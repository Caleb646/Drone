
Drone_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008908  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08008ba8  08008ba8  00009ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c28  08008c28  0000a014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008c28  08008c28  00009c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c30  08008c30  0000a014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c30  08008c30  00009c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c34  08008c34  00009c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  24000000  08008c38  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a68  24000014  08008c4c  0000a014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004a7c  08008c4c  0000aa7c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000212ab  00000000  00000000  0000a042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042ff  00000000  00000000  0002b2ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  0002f5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001427  00000000  00000000  00030ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005262  00000000  00000000  00032417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fff6  00000000  00000000  00037679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001aca59  00000000  00000000  0005766f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002040c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d94  00000000  00000000  0020410c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0020aea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008b90 	.word	0x08008b90

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	08008b90 	.word	0x08008b90

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <LoggerInit>:
  }
  return ch;
}

int8_t LoggerInit(UART_HandleTypeDef *pUART_)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  if(HAL_GetCurrentCPUID() != CM7_CPUID || pUART_ == NULL) 
 8000614:	f000 ff42 	bl	800149c <HAL_GetCurrentCPUID>
 8000618:	4603      	mov	r3, r0
 800061a:	2b03      	cmp	r3, #3
 800061c:	d102      	bne.n	8000624 <LoggerInit+0x18>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d105      	bne.n	8000630 <LoggerInit+0x24>
  {
    pUART = NULL;
 8000624:	4b10      	ldr	r3, [pc, #64]	@ (8000668 <LoggerInit+0x5c>)
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
    return -1;
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	e017      	b.n	8000660 <LoggerInit+0x54>
  }

  pCM4RingBuf = RingBuffCreate((void*)MEM_SHARED_CM4_UART_RINGBUFF_START, MEM_SHARED_CM4_UART_RINGBUFF_TOTAL_LEN);
 8000630:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000634:	480d      	ldr	r0, [pc, #52]	@ (800066c <LoggerInit+0x60>)
 8000636:	f000 f921 	bl	800087c <RingBuffCreate>
 800063a:	4603      	mov	r3, r0
 800063c:	4a0c      	ldr	r2, [pc, #48]	@ (8000670 <LoggerInit+0x64>)
 800063e:	6013      	str	r3, [r2, #0]
  pCM7RingBuf = RingBuffCreate((void*)MEM_SHARED_CM7_UART_RINGBUFF_START, MEM_SHARED_CM7_UART_RINGBUFF_TOTAL_LEN);
 8000640:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000644:	480b      	ldr	r0, [pc, #44]	@ (8000674 <LoggerInit+0x68>)
 8000646:	f000 f919 	bl	800087c <RingBuffCreate>
 800064a:	4603      	mov	r3, r0
 800064c:	4a0a      	ldr	r2, [pc, #40]	@ (8000678 <LoggerInit+0x6c>)
 800064e:	6013      	str	r3, [r2, #0]
  pUART = pUART_;
 8000650:	4a05      	ldr	r2, [pc, #20]	@ (8000668 <LoggerInit+0x5c>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6013      	str	r3, [r2, #0]
  SyncRegisterHandler(SyncUARTTaskHandler, SYNC_TASKID_UART_OUT);
 8000656:	2100      	movs	r1, #0
 8000658:	4808      	ldr	r0, [pc, #32]	@ (800067c <LoggerInit+0x70>)
 800065a:	f000 fa93 	bl	8000b84 <SyncRegisterHandler>

  return 0;
 800065e:	2300      	movs	r3, #0
}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	24000038 	.word	0x24000038
 800066c:	38000008 	.word	0x38000008
 8000670:	24000030 	.word	0x24000030
 8000674:	38000128 	.word	0x38000128
 8000678:	24000034 	.word	0x24000034
 800067c:	080006d1 	.word	0x080006d1

08000680 <LoggerWriteToUART>:

static int8_t LoggerWriteToUART(RingBuff volatile *pRingBuf)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  uint32_t len = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  void *pBufToTransmit = NULL;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]

  send:
  len = RingBuffGetLinearBlockReadLength(pRingBuf);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 f991 	bl	80009b8 <RingBuffGetLinearBlockReadLength>
 8000696:	60f8      	str	r0, [r7, #12]
  if(len > 0)
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d011      	beq.n	80006c2 <LoggerWriteToUART+0x42>
  {
    pBufToTransmit = RingBuffGetLinearBlockReadAddress(pRingBuf);
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f960 	bl	8000964 <RingBuffGetLinearBlockReadAddress>
 80006a4:	60b8      	str	r0, [r7, #8]
    HAL_UART_Transmit(pUART, pBufToTransmit, len, 1000);
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <LoggerWriteToUART+0x4c>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006b2:	68b9      	ldr	r1, [r7, #8]
 80006b4:	f004 fb52 	bl	8004d5c <HAL_UART_Transmit>
    RingBuffSkip(pRingBuf, len);
 80006b8:	68f9      	ldr	r1, [r7, #12]
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f000 f9be 	bl	8000a3c <RingBuffSkip>
    /* Check for anything in the overflow buffer */
    goto send;
 80006c0:	e7e6      	b.n	8000690 <LoggerWriteToUART+0x10>
  }
  return 0;
 80006c2:	2300      	movs	r3, #0
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	24000038 	.word	0x24000038

080006d0 <SyncUARTTaskHandler>:

static void SyncUARTTaskHandler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 80006d4:	f000 fee2 	bl	800149c <HAL_GetCurrentCPUID>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d104      	bne.n	80006e8 <SyncUARTTaskHandler+0x18>
  {
    LoggerWriteToUART(pCM4RingBuf);
 80006de:	4b03      	ldr	r3, [pc, #12]	@ (80006ec <SyncUARTTaskHandler+0x1c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ffcc 	bl	8000680 <LoggerWriteToUART>
  }
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	24000030 	.word	0x24000030

080006f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006f4:	4b49      	ldr	r3, [pc, #292]	@ (800081c <SystemInit+0x12c>)
 80006f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006fa:	4a48      	ldr	r2, [pc, #288]	@ (800081c <SystemInit+0x12c>)
 80006fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000700:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000704:	4b45      	ldr	r3, [pc, #276]	@ (800081c <SystemInit+0x12c>)
 8000706:	691b      	ldr	r3, [r3, #16]
 8000708:	4a44      	ldr	r2, [pc, #272]	@ (800081c <SystemInit+0x12c>)
 800070a:	f043 0310 	orr.w	r3, r3, #16
 800070e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000710:	4b43      	ldr	r3, [pc, #268]	@ (8000820 <SystemInit+0x130>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f003 030f 	and.w	r3, r3, #15
 8000718:	2b06      	cmp	r3, #6
 800071a:	d807      	bhi.n	800072c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800071c:	4b40      	ldr	r3, [pc, #256]	@ (8000820 <SystemInit+0x130>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f023 030f 	bic.w	r3, r3, #15
 8000724:	4a3e      	ldr	r2, [pc, #248]	@ (8000820 <SystemInit+0x130>)
 8000726:	f043 0307 	orr.w	r3, r3, #7
 800072a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800072c:	4b3d      	ldr	r3, [pc, #244]	@ (8000824 <SystemInit+0x134>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a3c      	ldr	r2, [pc, #240]	@ (8000824 <SystemInit+0x134>)
 8000732:	f043 0301 	orr.w	r3, r3, #1
 8000736:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000738:	4b3a      	ldr	r3, [pc, #232]	@ (8000824 <SystemInit+0x134>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800073e:	4b39      	ldr	r3, [pc, #228]	@ (8000824 <SystemInit+0x134>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	4938      	ldr	r1, [pc, #224]	@ (8000824 <SystemInit+0x134>)
 8000744:	4b38      	ldr	r3, [pc, #224]	@ (8000828 <SystemInit+0x138>)
 8000746:	4013      	ands	r3, r2
 8000748:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800074a:	4b35      	ldr	r3, [pc, #212]	@ (8000820 <SystemInit+0x130>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	2b00      	cmp	r3, #0
 8000754:	d007      	beq.n	8000766 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000756:	4b32      	ldr	r3, [pc, #200]	@ (8000820 <SystemInit+0x130>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f023 030f 	bic.w	r3, r3, #15
 800075e:	4a30      	ldr	r2, [pc, #192]	@ (8000820 <SystemInit+0x130>)
 8000760:	f043 0307 	orr.w	r3, r3, #7
 8000764:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000766:	4b2f      	ldr	r3, [pc, #188]	@ (8000824 <SystemInit+0x134>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800076c:	4b2d      	ldr	r3, [pc, #180]	@ (8000824 <SystemInit+0x134>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000772:	4b2c      	ldr	r3, [pc, #176]	@ (8000824 <SystemInit+0x134>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000778:	4b2a      	ldr	r3, [pc, #168]	@ (8000824 <SystemInit+0x134>)
 800077a:	4a2c      	ldr	r2, [pc, #176]	@ (800082c <SystemInit+0x13c>)
 800077c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800077e:	4b29      	ldr	r3, [pc, #164]	@ (8000824 <SystemInit+0x134>)
 8000780:	4a2b      	ldr	r2, [pc, #172]	@ (8000830 <SystemInit+0x140>)
 8000782:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000784:	4b27      	ldr	r3, [pc, #156]	@ (8000824 <SystemInit+0x134>)
 8000786:	4a2b      	ldr	r2, [pc, #172]	@ (8000834 <SystemInit+0x144>)
 8000788:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800078a:	4b26      	ldr	r3, [pc, #152]	@ (8000824 <SystemInit+0x134>)
 800078c:	2200      	movs	r2, #0
 800078e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000790:	4b24      	ldr	r3, [pc, #144]	@ (8000824 <SystemInit+0x134>)
 8000792:	4a28      	ldr	r2, [pc, #160]	@ (8000834 <SystemInit+0x144>)
 8000794:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000796:	4b23      	ldr	r3, [pc, #140]	@ (8000824 <SystemInit+0x134>)
 8000798:	2200      	movs	r2, #0
 800079a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800079c:	4b21      	ldr	r3, [pc, #132]	@ (8000824 <SystemInit+0x134>)
 800079e:	4a25      	ldr	r2, [pc, #148]	@ (8000834 <SystemInit+0x144>)
 80007a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007a2:	4b20      	ldr	r3, [pc, #128]	@ (8000824 <SystemInit+0x134>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000824 <SystemInit+0x134>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a1d      	ldr	r2, [pc, #116]	@ (8000824 <SystemInit+0x134>)
 80007ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80007b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <SystemInit+0x134>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80007ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <SystemInit+0x148>)
 80007bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007be:	4a1e      	ldr	r2, [pc, #120]	@ (8000838 <SystemInit+0x148>)
 80007c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007c4:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80007c6:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <SystemInit+0x14c>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000840 <SystemInit+0x150>)
 80007cc:	4013      	ands	r3, r2
 80007ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80007d2:	d202      	bcs.n	80007da <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000844 <SystemInit+0x154>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80007da:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <SystemInit+0x134>)
 80007dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d113      	bne.n	8000810 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <SystemInit+0x134>)
 80007ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007ee:	4a0d      	ldr	r2, [pc, #52]	@ (8000824 <SystemInit+0x134>)
 80007f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007f8:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <SystemInit+0x158>)
 80007fa:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007fe:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000800:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <SystemInit+0x134>)
 8000802:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000806:	4a07      	ldr	r2, [pc, #28]	@ (8000824 <SystemInit+0x134>)
 8000808:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800080c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000ed00 	.word	0xe000ed00
 8000820:	52002000 	.word	0x52002000
 8000824:	58024400 	.word	0x58024400
 8000828:	eaf6ed7f 	.word	0xeaf6ed7f
 800082c:	02020200 	.word	0x02020200
 8000830:	01ff0000 	.word	0x01ff0000
 8000834:	01010280 	.word	0x01010280
 8000838:	580000c0 	.word	0x580000c0
 800083c:	5c001000 	.word	0x5c001000
 8000840:	ffff0000 	.word	0xffff0000
 8000844:	51008108 	.word	0x51008108
 8000848:	52004000 	.word	0x52004000

0800084c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000850:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <ExitRun0Mode+0x2c>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	4a08      	ldr	r2, [pc, #32]	@ (8000878 <ExitRun0Mode+0x2c>)
 8000856:	f023 0302 	bic.w	r3, r3, #2
 800085a:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800085c:	bf00      	nop
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <ExitRun0Mode+0x2c>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000866:	2b00      	cmp	r3, #0
 8000868:	d0f9      	beq.n	800085e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800086a:	bf00      	nop
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	58024800 	.word	0x58024800

0800087c <RingBuffCreate>:
 * \param[in]       buff: Buffer handle
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
RINGBUFF_VOLATILE RingBuff* RingBuffCreate(void* pBuff, size_t size) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
    if (pBuff == NULL || size == 0 || size < (sizeof(RingBuff) + 1)) {
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d005      	beq.n	8000898 <RingBuffCreate+0x1c>
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d002      	beq.n	8000898 <RingBuffCreate+0x1c>
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	2b20      	cmp	r3, #32
 8000896:	d801      	bhi.n	800089c <RingBuffCreate+0x20>
        return NULL;
 8000898:	2300      	movs	r3, #0
 800089a:	e017      	b.n	80008cc <RingBuffCreate+0x50>
    }

    RINGBUFF_VOLATILE RingBuff *pRingBuf = (RingBuff*)pBuff;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	60fb      	str	r3, [r7, #12]
    BUF_MEMSET((void *)pRingBuf, 0x00, sizeof(RingBuff));
 80008a0:	2220      	movs	r2, #32
 80008a2:	2100      	movs	r1, #0
 80008a4:	68f8      	ldr	r0, [r7, #12]
 80008a6:	f008 f939 	bl	8008b1c <memset>

    pRingBuf->size = size - sizeof(RingBuff);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	f1a3 0220 	sub.w	r2, r3, #32
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	609a      	str	r2, [r3, #8]
    pRingBuf->buff = ((uint8_t*) ((uintptr_t)pBuff) + sizeof(RingBuff));
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f103 0220 	add.w	r2, r3, #32
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	605a      	str	r2, [r3, #4]

    pRingBuf->magic1 = 0xDEADBEEF;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	4a04      	ldr	r2, [pc, #16]	@ (80008d4 <RingBuffCreate+0x58>)
 80008c2:	601a      	str	r2, [r3, #0]
    pRingBuf->magic2 = ~0xDEADBEEF;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <RingBuffCreate+0x5c>)
 80008c8:	619a      	str	r2, [r3, #24]

    return pRingBuf;
 80008ca:	68fb      	ldr	r3, [r7, #12]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	deadbeef 	.word	0xdeadbeef
 80008d8:	21524110 	.word	0x21524110

080008dc <RingBuffGetFull>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
RingBuffGetFull(RINGBUFF_VOLATILE RingBuff* buff) {
 80008dc:	b480      	push	{r7}
 80008de:	b087      	sub	sp, #28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d011      	beq.n	800090e <RingBuffGetFull+0x32>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a1b      	ldr	r2, [pc, #108]	@ (800095c <RingBuffGetFull+0x80>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d10c      	bne.n	800090e <RingBuffGetFull+0x32>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4a19      	ldr	r2, [pc, #100]	@ (8000960 <RingBuffGetFull+0x84>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d107      	bne.n	800090e <RingBuffGetFull+0x32>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d003      	beq.n	800090e <RingBuffGetFull+0x32>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d101      	bne.n	8000912 <RingBuffGetFull+0x36>
        return 0;
 800090e:	2300      	movs	r3, #0
 8000910:	e01d      	b.n	800094e <RingBuffGetFull+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	691b      	ldr	r3, [r3, #16]
 8000916:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	429a      	cmp	r2, r3
 8000924:	d102      	bne.n	800092c <RingBuffGetFull+0x50>
        size = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
 800092a:	e00f      	b.n	800094c <RingBuffGetFull+0x70>
    } else if (w > r) {
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	429a      	cmp	r2, r3
 8000932:	d904      	bls.n	800093e <RingBuffGetFull+0x62>
        size = w - r;
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	e006      	b.n	800094c <RingBuffGetFull+0x70>
    } else {
        size = buff->size - (r - w);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	689a      	ldr	r2, [r3, #8]
 8000942:	6939      	ldr	r1, [r7, #16]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	1acb      	subs	r3, r1, r3
 8000948:	4413      	add	r3, r2
 800094a:	617b      	str	r3, [r7, #20]
    }
    return size;
 800094c:	697b      	ldr	r3, [r7, #20]
}
 800094e:	4618      	mov	r0, r3
 8000950:	371c      	adds	r7, #28
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	deadbeef 	.word	0xdeadbeef
 8000960:	21524110 	.word	0x21524110

08000964 <RingBuffGetLinearBlockReadAddress>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *
RingBuffGetLinearBlockReadAddress(RINGBUFF_VOLATILE RingBuff* buff) {
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d011      	beq.n	8000996 <RingBuffGetLinearBlockReadAddress+0x32>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a0e      	ldr	r2, [pc, #56]	@ (80009b0 <RingBuffGetLinearBlockReadAddress+0x4c>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d10c      	bne.n	8000996 <RingBuffGetLinearBlockReadAddress+0x32>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	4a0c      	ldr	r2, [pc, #48]	@ (80009b4 <RingBuffGetLinearBlockReadAddress+0x50>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d107      	bne.n	8000996 <RingBuffGetLinearBlockReadAddress+0x32>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d003      	beq.n	8000996 <RingBuffGetLinearBlockReadAddress+0x32>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d101      	bne.n	800099a <RingBuffGetLinearBlockReadAddress+0x36>
        return NULL;
 8000996:	2300      	movs	r3, #0
 8000998:	e004      	b.n	80009a4 <RingBuffGetLinearBlockReadAddress+0x40>
    }
    return &buff->buff[buff->r];
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	685a      	ldr	r2, [r3, #4]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	4413      	add	r3, r2
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	deadbeef 	.word	0xdeadbeef
 80009b4:	21524110 	.word	0x21524110

080009b8 <RingBuffGetLinearBlockReadLength>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
RingBuffGetLinearBlockReadLength(RINGBUFF_VOLATILE RingBuff* buff) {
 80009b8:	b480      	push	{r7}
 80009ba:	b087      	sub	sp, #28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d011      	beq.n	80009ea <RingBuffGetLinearBlockReadLength+0x32>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a1a      	ldr	r2, [pc, #104]	@ (8000a34 <RingBuffGetLinearBlockReadLength+0x7c>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d10c      	bne.n	80009ea <RingBuffGetLinearBlockReadLength+0x32>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a18      	ldr	r2, [pc, #96]	@ (8000a38 <RingBuffGetLinearBlockReadLength+0x80>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d107      	bne.n	80009ea <RingBuffGetLinearBlockReadLength+0x32>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d003      	beq.n	80009ea <RingBuffGetLinearBlockReadLength+0x32>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d101      	bne.n	80009ee <RingBuffGetLinearBlockReadLength+0x36>
        return 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e01b      	b.n	8000a26 <RingBuffGetLinearBlockReadLength+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	691b      	ldr	r3, [r3, #16]
 80009f2:	613b      	str	r3, [r7, #16]
    r = buff->r;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d904      	bls.n	8000a0c <RingBuffGetLinearBlockReadLength+0x54>
        len = w - r;
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	1ad3      	subs	r3, r2, r3
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	e00b      	b.n	8000a24 <RingBuffGetLinearBlockReadLength+0x6c>
    } else if (r > w) {
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d905      	bls.n	8000a20 <RingBuffGetLinearBlockReadLength+0x68>
        len = buff->size - r;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689a      	ldr	r2, [r3, #8]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	e001      	b.n	8000a24 <RingBuffGetLinearBlockReadLength+0x6c>
    } else {
        len = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
    }
    return len;
 8000a24:	697b      	ldr	r3, [r7, #20]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	371c      	adds	r7, #28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	deadbeef 	.word	0xdeadbeef
 8000a38:	21524110 	.word	0x21524110

08000a3c <RingBuffSkip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
RingBuffSkip(RINGBUFF_VOLATILE RingBuff* buff, size_t len) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d014      	beq.n	8000a76 <RingBuffSkip+0x3a>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a20      	ldr	r2, [pc, #128]	@ (8000ad4 <RingBuffSkip+0x98>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d10f      	bne.n	8000a76 <RingBuffSkip+0x3a>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ad8 <RingBuffSkip+0x9c>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d10a      	bne.n	8000a76 <RingBuffSkip+0x3a>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d006      	beq.n	8000a76 <RingBuffSkip+0x3a>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d002      	beq.n	8000a76 <RingBuffSkip+0x3a>
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d101      	bne.n	8000a7a <RingBuffSkip+0x3e>
        return 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e027      	b.n	8000aca <RingBuffSkip+0x8e>
    }

    full = RingBuffGetFull(buff);             /* Get buffer used length */
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ff2e 	bl	80008dc <RingBuffGetFull>
 8000a80:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);                   /* Calculate max skip */
 8000a82:	683a      	ldr	r2, [r7, #0]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4293      	cmp	r3, r2
 8000a88:	bf28      	it	cs
 8000a8a:	4613      	movcs	r3, r2
 8000a8c:	603b      	str	r3, [r7, #0]
    buff->r += len;                             /* Advance read pointer */
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	68da      	ldr	r2, [r3, #12]
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	441a      	add	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	68da      	ldr	r2, [r3, #12]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d306      	bcc.n	8000ab4 <RingBuffSkip+0x78>
        buff->r -= buff->size;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	68d2      	ldr	r2, [r2, #12]
 8000aae:	1ad2      	subs	r2, r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, len);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d005      	beq.n	8000ac8 <RingBuffSkip+0x8c>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	683a      	ldr	r2, [r7, #0]
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	4798      	blx	r3
    return len;
 8000ac8:	683b      	ldr	r3, [r7, #0]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	deadbeef 	.word	0xdeadbeef
 8000ad8:	21524110 	.word	0x21524110

08000adc <SyncMailBoxGet>:
#include "mem/mem.h"

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID);

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
    uint8_t volatile *pMB = NULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
    if(mbID == MAILBOX_CM7_ID) pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM7_START;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d103      	bne.n	8000af6 <SyncMailBoxGet+0x1a>
 8000aee:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	e001      	b.n	8000afa <SyncMailBoxGet+0x1e>
    else pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM4_START;
 8000af6:	4b04      	ldr	r3, [pc, #16]	@ (8000b08 <SyncMailBoxGet+0x2c>)
 8000af8:	60fb      	str	r3, [r7, #12]
    return pMB;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	38000004 	.word	0x38000004

08000b0c <SyncMailBoxRead>:
    asm volatile ("sev");
    return 0;
}

int8_t SyncMailBoxRead(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return -1;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	d902      	bls.n	8000b24 <SyncMailBoxRead+0x18>
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	e009      	b.n	8000b38 <SyncMailBoxRead+0x2c>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 8000b24:	68f8      	ldr	r0, [r7, #12]
 8000b26:	f7ff ffd9 	bl	8000adc <SyncMailBoxGet>
 8000b2a:	6178      	str	r0, [r7, #20]
    memcpy((void*)pBuffer, (void*)pMB, len);
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	6979      	ldr	r1, [r7, #20]
 8000b30:	68b8      	ldr	r0, [r7, #8]
 8000b32:	f008 f81f 	bl	8008b74 <memcpy>
    return 0;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <SyncGetTaskHandler>:
//     if(HAL_GetCurrentCPUID() == CM7_CPUID)  return 0;
//     else                                    return 1;
// }

static task_handler_fn_t SyncGetTaskHandler(uint32_t taskID)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
    if(taskID > NUM_TASK_TYPES) return NULL;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d901      	bls.n	8000b52 <SyncGetTaskHandler+0x12>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e003      	b.n	8000b5a <SyncGetTaskHandler+0x1a>
    return handlers[taskID];
 8000b52:	4a05      	ldr	r2, [pc, #20]	@ (8000b68 <SyncGetTaskHandler+0x28>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	2400003c 	.word	0x2400003c

08000b6c <SyncInit>:

/*
* \brief Each core needs to call SyncInit
*/
int8_t SyncInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
    memset(handlers, 0, sizeof(handlers));
 8000b70:	2208      	movs	r2, #8
 8000b72:	2100      	movs	r1, #0
 8000b74:	4802      	ldr	r0, [pc, #8]	@ (8000b80 <SyncInit+0x14>)
 8000b76:	f007 ffd1 	bl	8008b1c <memset>
    return 0;
 8000b7a:	2300      	movs	r3, #0
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2400003c 	.word	0x2400003c

08000b84 <SyncRegisterHandler>:

int8_t SyncRegisterHandler(task_handler_fn_t fn, uint32_t taskID)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
    if(taskID > NUM_TASK_TYPES) return -1;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d902      	bls.n	8000b9a <SyncRegisterHandler+0x16>
 8000b94:	f04f 33ff 	mov.w	r3, #4294967295
 8000b98:	e005      	b.n	8000ba6 <SyncRegisterHandler+0x22>
    handlers[taskID] = fn;
 8000b9a:	4906      	ldr	r1, [pc, #24]	@ (8000bb4 <SyncRegisterHandler+0x30>)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 0;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	2400003c 	.word	0x2400003c

08000bb8 <CM7_SEV_IRQHandler>:
* and the SEV IRQ handler for CM4 was called.
* This function was originally defined in CM4/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM7_SEV_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
    // CPUID == CM4
    uint32_t taskID = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f7ff ff9f 	bl	8000b0c <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ffb5 	bl	8000b40 <SyncGetTaskHandler>
 8000bd6:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <CM7_SEV_IRQHandler+0x2a>
    {
        fn();
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4798      	blx	r3
    }
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <CM4_SEV_IRQHandler>:
* and the SEV IRQ handler for CM7 was called.
* This function was originally defined in CM7/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM4_SEV_IRQHandler(void)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
    // CPUID == CM7
    uint32_t taskID = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM7_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f7ff ff86 	bl	8000b0c <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ff9c 	bl	8000b40 <SyncGetTaskHandler>
 8000c08:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <CM4_SEV_IRQHandler+0x2a>
    {
        fn();
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4798      	blx	r3
    }
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0

/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm("NOP"); }
 8000c22:	e000      	b.n	8000c26 <main+0xa>
 8000c24:	bf00      	nop
 8000c26:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd4 <main+0xb8>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1f8      	bne.n	8000c24 <main+0x8>
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c32:	f000 faeb 	bl	800120c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c36:	f000 f857 	bl	8000ce8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000c3a:	4b26      	ldr	r3, [pc, #152]	@ (8000cd4 <main+0xb8>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c40:	4a24      	ldr	r2, [pc, #144]	@ (8000cd4 <main+0xb8>)
 8000c42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c4a:	4b22      	ldr	r3, [pc, #136]	@ (8000cd4 <main+0xb8>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f000 fde1 	bl	8001820 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2000      	movs	r0, #0
 8000c62:	f000 fdf7 	bl	8001854 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm("NOP"); }
 8000c66:	e000      	b.n	8000c6a <main+0x4e>
 8000c68:	bf00      	nop
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd4 <main+0xb8>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d1f8      	bne.n	8000c68 <main+0x4c>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c76:	f000 f909 	bl	8000e8c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000c7a:	f000 f8bb 	bl	8000df4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LoggerInit(&huart1);
 8000c7e:	4816      	ldr	r0, [pc, #88]	@ (8000cd8 <main+0xbc>)
 8000c80:	f7ff fcc4 	bl	800060c <LoggerInit>
  SyncInit();
 8000c84:	f7ff ff72 	bl	8000b6c <SyncInit>
//  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c88:	f005 f9c6 	bl	8006018 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c8c:	4a13      	ldr	r2, [pc, #76]	@ (8000cdc <main+0xc0>)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4813      	ldr	r0, [pc, #76]	@ (8000ce0 <main+0xc4>)
 8000c92:	f005 fa0b 	bl	80060ac <osThreadNew>
 8000c96:	4603      	mov	r3, r0
 8000c98:	4a12      	ldr	r2, [pc, #72]	@ (8000ce4 <main+0xc8>)
 8000c9a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c9c:	f005 f9e0 	bl	8006060 <osKernelStart>
//  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ca0:	f005 f9ba 	bl	8006018 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cdc <main+0xc0>)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	480d      	ldr	r0, [pc, #52]	@ (8000ce0 <main+0xc4>)
 8000caa:	f005 f9ff 	bl	80060ac <osThreadNew>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ce4 <main+0xc8>)
 8000cb2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cb4:	f005 f9d4 	bl	8006060 <osKernelStart>
//  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cb8:	f005 f9ae 	bl	8006018 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cbc:	4a07      	ldr	r2, [pc, #28]	@ (8000cdc <main+0xc0>)
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4807      	ldr	r0, [pc, #28]	@ (8000ce0 <main+0xc4>)
 8000cc2:	f005 f9f3 	bl	80060ac <osThreadNew>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	4a06      	ldr	r2, [pc, #24]	@ (8000ce4 <main+0xc8>)
 8000cca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ccc:	f005 f9c8 	bl	8006060 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <main+0xb4>
 8000cd4:	58024400 	.word	0x58024400
 8000cd8:	24000044 	.word	0x24000044
 8000cdc:	08008bdc 	.word	0x08008bdc
 8000ce0:	08000f31 	.word	0x08000f31
 8000ce4:	240000d8 	.word	0x240000d8

08000ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b09c      	sub	sp, #112	@ 0x70
 8000cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf2:	224c      	movs	r2, #76	@ 0x4c
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f007 ff10 	bl	8008b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2220      	movs	r2, #32
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f007 ff0a 	bl	8008b1c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d08:	2004      	movs	r0, #4
 8000d0a:	f000 fdb7 	bl	800187c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	4b36      	ldr	r3, [pc, #216]	@ (8000dec <SystemClock_Config+0x104>)
 8000d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d16:	4a35      	ldr	r2, [pc, #212]	@ (8000dec <SystemClock_Config+0x104>)
 8000d18:	f023 0301 	bic.w	r3, r3, #1
 8000d1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d1e:	4b33      	ldr	r3, [pc, #204]	@ (8000dec <SystemClock_Config+0x104>)
 8000d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	4b31      	ldr	r3, [pc, #196]	@ (8000df0 <SystemClock_Config+0x108>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a30      	ldr	r2, [pc, #192]	@ (8000df0 <SystemClock_Config+0x108>)
 8000d2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <SystemClock_Config+0x108>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d40:	bf00      	nop
 8000d42:	4b2b      	ldr	r3, [pc, #172]	@ (8000df0 <SystemClock_Config+0x108>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d4e:	d1f8      	bne.n	8000d42 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000d50:	230b      	movs	r3, #11
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d58:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5e:	2340      	movs	r3, #64	@ 0x40
 8000d60:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d62:	2301      	movs	r3, #1
 8000d64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d66:	2302      	movs	r3, #2
 8000d68:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000d6e:	2305      	movs	r3, #5
 8000d70:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000d72:	2330      	movs	r3, #48	@ 0x30
 8000d74:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d76:	2302      	movs	r3, #2
 8000d78:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d82:	2308      	movs	r3, #8
 8000d84:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 fdcc 	bl	8001930 <HAL_RCC_OscConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000d9e:	f000 f8e1 	bl	8000f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da2:	233f      	movs	r3, #63	@ 0x3f
 8000da4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 fa0c 	bl	80021e4 <HAL_RCC_ClockConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000dd2:	f000 f8c7 	bl	8000f64 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000dd6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f001 fbb7 	bl	8002550 <HAL_RCC_MCOConfig>
}
 8000de2:	bf00      	nop
 8000de4:	3770      	adds	r7, #112	@ 0x70
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	58000400 	.word	0x58000400
 8000df0:	58024800 	.word	0x58024800

08000df4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000df8:	4b22      	ldr	r3, [pc, #136]	@ (8000e84 <MX_USART1_UART_Init+0x90>)
 8000dfa:	4a23      	ldr	r2, [pc, #140]	@ (8000e88 <MX_USART1_UART_Init+0x94>)
 8000dfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dfe:	4b21      	ldr	r3, [pc, #132]	@ (8000e84 <MX_USART1_UART_Init+0x90>)
 8000e00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e06:	4b1f      	ldr	r3, [pc, #124]	@ (8000e84 <MX_USART1_UART_Init+0x90>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e84 <MX_USART1_UART_Init+0x90>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e12:	4b1c      	ldr	r3, [pc, #112]	@ (8000e84 <MX_USART1_UART_Init+0x90>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e18:	4b1a      	ldr	r3, [pc, #104]	@ (8000e84 <MX_USART1_UART_Init+0x90>)
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1e:	4b19      	ldr	r3, [pc, #100]	@ (8000e84 <MX_USART1_UART_Init+0x90>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e24:	4b17      	ldr	r3, [pc, #92]	@ (8000e84 <MX_USART1_UART_Init+0x90>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e2a:	4b16      	ldr	r3, [pc, #88]	@ (8000e84 <MX_USART1_UART_Init+0x90>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e30:	4b14      	ldr	r3, [pc, #80]	@ (8000e84 <MX_USART1_UART_Init+0x90>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e36:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <MX_USART1_UART_Init+0x90>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e3c:	4811      	ldr	r0, [pc, #68]	@ (8000e84 <MX_USART1_UART_Init+0x90>)
 8000e3e:	f003 ff3d 	bl	8004cbc <HAL_UART_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e48:	f000 f88c 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	480d      	ldr	r0, [pc, #52]	@ (8000e84 <MX_USART1_UART_Init+0x90>)
 8000e50:	f004 ffd3 	bl	8005dfa <HAL_UARTEx_SetTxFifoThreshold>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e5a:	f000 f883 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4808      	ldr	r0, [pc, #32]	@ (8000e84 <MX_USART1_UART_Init+0x90>)
 8000e62:	f005 f808 	bl	8005e76 <HAL_UARTEx_SetRxFifoThreshold>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e6c:	f000 f87a 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e70:	4804      	ldr	r0, [pc, #16]	@ (8000e84 <MX_USART1_UART_Init+0x90>)
 8000e72:	f004 ff89 	bl	8005d88 <HAL_UARTEx_DisableFifoMode>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e7c:	f000 f872 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	24000044 	.word	0x24000044
 8000e88:	40011000 	.word	0x40011000

08000e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	f107 030c 	add.w	r3, r7, #12
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	4b21      	ldr	r3, [pc, #132]	@ (8000f28 <MX_GPIO_Init+0x9c>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f28 <MX_GPIO_Init+0x9c>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <MX_GPIO_Init+0x9c>)
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec0:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <MX_GPIO_Init+0x9c>)
 8000ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec6:	4a18      	ldr	r2, [pc, #96]	@ (8000f28 <MX_GPIO_Init+0x9c>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ed0:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <MX_GPIO_Init+0x9c>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ede:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <MX_GPIO_Init+0x9c>)
 8000ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee4:	4a10      	ldr	r2, [pc, #64]	@ (8000f28 <MX_GPIO_Init+0x9c>)
 8000ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eee:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <MX_GPIO_Init+0x9c>)
 8000ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000efc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	4619      	mov	r1, r3
 8000f18:	4804      	ldr	r0, [pc, #16]	@ (8000f2c <MX_GPIO_Init+0xa0>)
 8000f1a:	f000 fad1 	bl	80014c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f1e:	bf00      	nop
 8000f20:	3720      	adds	r7, #32
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	58024400 	.word	0x58024400
 8000f2c:	58020000 	.word	0x58020000

08000f30 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f005 f949 	bl	80061d0 <osDelay>
 8000f3e:	e7fb      	b.n	8000f38 <StartDefaultTask+0x8>

08000f40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a04      	ldr	r2, [pc, #16]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d101      	bne.n	8000f56 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000f52:	f000 f997 	bl	8001284 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40000800 	.word	0x40000800

08000f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f68:	b672      	cpsid	i
}
 8000f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <Error_Handler+0x8>

08000f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <HAL_MspInit+0x48>)
 8000f78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f7c:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb8 <HAL_MspInit+0x48>)
 8000f7e:	f043 0302 	orr.w	r3, r3, #2
 8000f82:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f86:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <HAL_MspInit+0x48>)
 8000f88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	210f      	movs	r1, #15
 8000f98:	f06f 0001 	mvn.w	r0, #1
 8000f9c:	f000 fa56 	bl	800144c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 5, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2105      	movs	r1, #5
 8000fa4:	2041      	movs	r0, #65	@ 0x41
 8000fa6:	f000 fa51 	bl	800144c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 8000faa:	2041      	movs	r0, #65	@ 0x41
 8000fac:	f000 fa68 	bl	8001480 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	58024400 	.word	0x58024400

08000fbc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b0bc      	sub	sp, #240	@ 0xf0
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	22c8      	movs	r2, #200	@ 0xc8
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f007 fd9d 	bl	8008b1c <memset>
  if(huart->Instance==USART1)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a27      	ldr	r2, [pc, #156]	@ (8001084 <HAL_UART_MspInit+0xc8>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d146      	bne.n	800107a <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fec:	f04f 0201 	mov.w	r2, #1
 8000ff0:	f04f 0300 	mov.w	r3, #0
 8000ff4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4618      	mov	r0, r3
 8001004:	f001 fd26 	bl	8002a54 <HAL_RCCEx_PeriphCLKConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800100e:	f7ff ffa9 	bl	8000f64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001012:	4b1d      	ldr	r3, [pc, #116]	@ (8001088 <HAL_UART_MspInit+0xcc>)
 8001014:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001018:	4a1b      	ldr	r2, [pc, #108]	@ (8001088 <HAL_UART_MspInit+0xcc>)
 800101a:	f043 0310 	orr.w	r3, r3, #16
 800101e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001022:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <HAL_UART_MspInit+0xcc>)
 8001024:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001028:	f003 0310 	and.w	r3, r3, #16
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <HAL_UART_MspInit+0xcc>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001036:	4a14      	ldr	r2, [pc, #80]	@ (8001088 <HAL_UART_MspInit+0xcc>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001040:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <HAL_UART_MspInit+0xcc>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800104e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001052:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001068:	2307      	movs	r3, #7
 800106a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001072:	4619      	mov	r1, r3
 8001074:	4805      	ldr	r0, [pc, #20]	@ (800108c <HAL_UART_MspInit+0xd0>)
 8001076:	f000 fa23 	bl	80014c0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800107a:	bf00      	nop
 800107c:	37f0      	adds	r7, #240	@ 0xf0
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40011000 	.word	0x40011000
 8001088:	58024400 	.word	0x58024400
 800108c:	58020000 	.word	0x58020000

08001090 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b090      	sub	sp, #64	@ 0x40
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b0f      	cmp	r3, #15
 800109c:	d827      	bhi.n	80010ee <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800109e:	2200      	movs	r2, #0
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	201e      	movs	r0, #30
 80010a4:	f000 f9d2 	bl	800144c <HAL_NVIC_SetPriority>

     /* Enable the TIM4 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80010a8:	201e      	movs	r0, #30
 80010aa:	f000 f9e9 	bl	8001480 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80010ae:	4a29      	ldr	r2, [pc, #164]	@ (8001154 <HAL_InitTick+0xc4>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80010b4:	4b28      	ldr	r3, [pc, #160]	@ (8001158 <HAL_InitTick+0xc8>)
 80010b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010ba:	4a27      	ldr	r2, [pc, #156]	@ (8001158 <HAL_InitTick+0xc8>)
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010c4:	4b24      	ldr	r3, [pc, #144]	@ (8001158 <HAL_InitTick+0xc8>)
 80010c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010d2:	f107 0210 	add.w	r2, r7, #16
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 fc77 	bl	80029d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d106      	bne.n	80010fa <HAL_InitTick+0x6a>
 80010ec:	e001      	b.n	80010f2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e02b      	b.n	800114a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010f2:	f001 fc41 	bl	8002978 <HAL_RCC_GetPCLK1Freq>
 80010f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80010f8:	e004      	b.n	8001104 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010fa:	f001 fc3d 	bl	8002978 <HAL_RCC_GetPCLK1Freq>
 80010fe:	4603      	mov	r3, r0
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001106:	4a15      	ldr	r2, [pc, #84]	@ (800115c <HAL_InitTick+0xcc>)
 8001108:	fba2 2303 	umull	r2, r3, r2, r3
 800110c:	0c9b      	lsrs	r3, r3, #18
 800110e:	3b01      	subs	r3, #1
 8001110:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001112:	4b13      	ldr	r3, [pc, #76]	@ (8001160 <HAL_InitTick+0xd0>)
 8001114:	4a13      	ldr	r2, [pc, #76]	@ (8001164 <HAL_InitTick+0xd4>)
 8001116:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001118:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <HAL_InitTick+0xd0>)
 800111a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800111e:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001120:	4a0f      	ldr	r2, [pc, #60]	@ (8001160 <HAL_InitTick+0xd0>)
 8001122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001124:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001126:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <HAL_InitTick+0xd0>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112c:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <HAL_InitTick+0xd0>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001132:	480b      	ldr	r0, [pc, #44]	@ (8001160 <HAL_InitTick+0xd0>)
 8001134:	f003 fafa 	bl	800472c <HAL_TIM_Base_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d104      	bne.n	8001148 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800113e:	4808      	ldr	r0, [pc, #32]	@ (8001160 <HAL_InitTick+0xd0>)
 8001140:	f003 fb56 	bl	80047f0 <HAL_TIM_Base_Start_IT>
 8001144:	4603      	mov	r3, r0
 8001146:	e000      	b.n	800114a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
}
 800114a:	4618      	mov	r0, r3
 800114c:	3740      	adds	r7, #64	@ 0x40
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	24000008 	.word	0x24000008
 8001158:	58024400 	.word	0x58024400
 800115c:	431bde83 	.word	0x431bde83
 8001160:	240000dc 	.word	0x240000dc
 8001164:	40000800 	.word	0x40000800

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <NMI_Handler+0x4>

08001170 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <HardFault_Handler+0x4>

08001178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <MemManage_Handler+0x4>

08001180 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <UsageFault_Handler+0x4>

08001190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80011a4:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <TIM4_IRQHandler+0x10>)
 80011a6:	f003 fb9b 	bl	80048e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	240000dc 	.word	0x240000dc

080011b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011b4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80011f0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80011b8:	f7ff fb48 	bl	800084c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011bc:	f7ff fa98 	bl	80006f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c0:	480c      	ldr	r0, [pc, #48]	@ (80011f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011c2:	490d      	ldr	r1, [pc, #52]	@ (80011f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011c4:	4a0d      	ldr	r2, [pc, #52]	@ (80011fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001200 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001204 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011e6:	f007 fca1 	bl	8008b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ea:	f7ff fd17 	bl	8000c1c <main>
  bx  lr
 80011ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011f0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011f8:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80011fc:	08008c38 	.word	0x08008c38
  ldr r2, =_sbss
 8001200:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8001204:	24004a7c 	.word	0x24004a7c

08001208 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC3_IRQHandler>
	...

0800120c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001212:	2003      	movs	r0, #3
 8001214:	f000 f90f 	bl	8001436 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001218:	f001 fa04 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 800121c:	4602      	mov	r2, r0
 800121e:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <HAL_Init+0x68>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	0a1b      	lsrs	r3, r3, #8
 8001224:	f003 030f 	and.w	r3, r3, #15
 8001228:	4913      	ldr	r1, [pc, #76]	@ (8001278 <HAL_Init+0x6c>)
 800122a:	5ccb      	ldrb	r3, [r1, r3]
 800122c:	f003 031f 	and.w	r3, r3, #31
 8001230:	fa22 f303 	lsr.w	r3, r2, r3
 8001234:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001236:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <HAL_Init+0x68>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	4a0e      	ldr	r2, [pc, #56]	@ (8001278 <HAL_Init+0x6c>)
 8001240:	5cd3      	ldrb	r3, [r2, r3]
 8001242:	f003 031f 	and.w	r3, r3, #31
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	fa22 f303 	lsr.w	r3, r2, r3
 800124c:	4a0b      	ldr	r2, [pc, #44]	@ (800127c <HAL_Init+0x70>)
 800124e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001250:	4a0b      	ldr	r2, [pc, #44]	@ (8001280 <HAL_Init+0x74>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001256:	200f      	movs	r0, #15
 8001258:	f7ff ff1a 	bl	8001090 <HAL_InitTick>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e002      	b.n	800126c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001266:	f7ff fe83 	bl	8000f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	58024400 	.word	0x58024400
 8001278:	08008bcc 	.word	0x08008bcc
 800127c:	24000004 	.word	0x24000004
 8001280:	24000000 	.word	0x24000000

08001284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_IncTick+0x20>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <HAL_IncTick+0x24>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a04      	ldr	r2, [pc, #16]	@ (80012a8 <HAL_IncTick+0x24>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	2400000c 	.word	0x2400000c
 80012a8:	24000128 	.word	0x24000128

080012ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b03      	ldr	r3, [pc, #12]	@ (80012c0 <HAL_GetTick+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	24000128 	.word	0x24000128

080012c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012c8:	4b03      	ldr	r3, [pc, #12]	@ (80012d8 <HAL_GetREVID+0x14>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	0c1b      	lsrs	r3, r3, #16
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	5c001000 	.word	0x5c001000

080012dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <__NVIC_SetPriorityGrouping+0x40>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 8001306:	4313      	orrs	r3, r2
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	@ (800131c <__NVIC_SetPriorityGrouping+0x40>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00
 8001320:	05fa0000 	.word	0x05fa0000

08001324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001328:	4b04      	ldr	r3, [pc, #16]	@ (800133c <__NVIC_GetPriorityGrouping+0x18>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0307 	and.w	r3, r3, #7
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800134a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800134e:	2b00      	cmp	r3, #0
 8001350:	db0b      	blt.n	800136a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	f003 021f 	and.w	r2, r3, #31
 8001358:	4907      	ldr	r1, [pc, #28]	@ (8001378 <__NVIC_EnableIRQ+0x38>)
 800135a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135e:	095b      	lsrs	r3, r3, #5
 8001360:	2001      	movs	r0, #1
 8001362:	fa00 f202 	lsl.w	r2, r0, r2
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000e100 	.word	0xe000e100

0800137c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001388:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db0a      	blt.n	80013a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	490c      	ldr	r1, [pc, #48]	@ (80013c8 <__NVIC_SetPriority+0x4c>)
 8001396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	440b      	add	r3, r1
 80013a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a4:	e00a      	b.n	80013bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4908      	ldr	r1, [pc, #32]	@ (80013cc <__NVIC_SetPriority+0x50>)
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3b04      	subs	r3, #4
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	761a      	strb	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	@ 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f1c3 0307 	rsb	r3, r3, #7
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	bf28      	it	cs
 80013ee:	2304      	movcs	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3304      	adds	r3, #4
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d902      	bls.n	8001400 <NVIC_EncodePriority+0x30>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3b03      	subs	r3, #3
 80013fe:	e000      	b.n	8001402 <NVIC_EncodePriority+0x32>
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001418:	f04f 31ff 	mov.w	r1, #4294967295
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43d9      	mvns	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	4313      	orrs	r3, r2
         );
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	@ 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ff4c 	bl	80012dc <__NVIC_SetPriorityGrouping>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800145a:	f7ff ff63 	bl	8001324 <__NVIC_GetPriorityGrouping>
 800145e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	68b9      	ldr	r1, [r7, #8]
 8001464:	6978      	ldr	r0, [r7, #20]
 8001466:	f7ff ffb3 	bl	80013d0 <NVIC_EncodePriority>
 800146a:	4602      	mov	r2, r0
 800146c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ff82 	bl	800137c <__NVIC_SetPriority>
}
 8001478:	bf00      	nop
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800148a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ff56 	bl	8001340 <__NVIC_EnableIRQ>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_GetCurrentCPUID+0x20>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014a8:	2b70      	cmp	r3, #112	@ 0x70
 80014aa:	d101      	bne.n	80014b0 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e000      	b.n	80014b2 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 80014b0:	2301      	movs	r3, #1
  }
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	@ 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80014ce:	4b89      	ldr	r3, [pc, #548]	@ (80016f4 <HAL_GPIO_Init+0x234>)
 80014d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014d2:	e194      	b.n	80017fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2101      	movs	r1, #1
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	fa01 f303 	lsl.w	r3, r1, r3
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 8186 	beq.w	80017f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d005      	beq.n	8001504 <HAL_GPIO_Init+0x44>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d130      	bne.n	8001566 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	2203      	movs	r2, #3
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800153a:	2201      	movs	r2, #1
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	091b      	lsrs	r3, r3, #4
 8001550:	f003 0201 	and.w	r2, r3, #1
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	2b03      	cmp	r3, #3
 8001570:	d017      	beq.n	80015a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	2203      	movs	r2, #3
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d123      	bne.n	80015f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	08da      	lsrs	r2, r3, #3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3208      	adds	r2, #8
 80015b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	220f      	movs	r2, #15
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	691a      	ldr	r2, [r3, #16]
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	08da      	lsrs	r2, r3, #3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3208      	adds	r2, #8
 80015f0:	69b9      	ldr	r1, [r7, #24]
 80015f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	2203      	movs	r2, #3
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0203 	and.w	r2, r3, #3
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 80e0 	beq.w	80017f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001638:	4b2f      	ldr	r3, [pc, #188]	@ (80016f8 <HAL_GPIO_Init+0x238>)
 800163a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800163e:	4a2e      	ldr	r2, [pc, #184]	@ (80016f8 <HAL_GPIO_Init+0x238>)
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001648:	4b2b      	ldr	r3, [pc, #172]	@ (80016f8 <HAL_GPIO_Init+0x238>)
 800164a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001656:	4a29      	ldr	r2, [pc, #164]	@ (80016fc <HAL_GPIO_Init+0x23c>)
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	089b      	lsrs	r3, r3, #2
 800165c:	3302      	adds	r3, #2
 800165e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	220f      	movs	r2, #15
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a20      	ldr	r2, [pc, #128]	@ (8001700 <HAL_GPIO_Init+0x240>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d052      	beq.n	8001728 <HAL_GPIO_Init+0x268>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a1f      	ldr	r2, [pc, #124]	@ (8001704 <HAL_GPIO_Init+0x244>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d031      	beq.n	80016ee <HAL_GPIO_Init+0x22e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a1e      	ldr	r2, [pc, #120]	@ (8001708 <HAL_GPIO_Init+0x248>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d02b      	beq.n	80016ea <HAL_GPIO_Init+0x22a>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a1d      	ldr	r2, [pc, #116]	@ (800170c <HAL_GPIO_Init+0x24c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d025      	beq.n	80016e6 <HAL_GPIO_Init+0x226>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a1c      	ldr	r2, [pc, #112]	@ (8001710 <HAL_GPIO_Init+0x250>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d01f      	beq.n	80016e2 <HAL_GPIO_Init+0x222>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001714 <HAL_GPIO_Init+0x254>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d019      	beq.n	80016de <HAL_GPIO_Init+0x21e>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001718 <HAL_GPIO_Init+0x258>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d013      	beq.n	80016da <HAL_GPIO_Init+0x21a>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a19      	ldr	r2, [pc, #100]	@ (800171c <HAL_GPIO_Init+0x25c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d00d      	beq.n	80016d6 <HAL_GPIO_Init+0x216>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a18      	ldr	r2, [pc, #96]	@ (8001720 <HAL_GPIO_Init+0x260>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d007      	beq.n	80016d2 <HAL_GPIO_Init+0x212>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a17      	ldr	r2, [pc, #92]	@ (8001724 <HAL_GPIO_Init+0x264>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d101      	bne.n	80016ce <HAL_GPIO_Init+0x20e>
 80016ca:	2309      	movs	r3, #9
 80016cc:	e02d      	b.n	800172a <HAL_GPIO_Init+0x26a>
 80016ce:	230a      	movs	r3, #10
 80016d0:	e02b      	b.n	800172a <HAL_GPIO_Init+0x26a>
 80016d2:	2308      	movs	r3, #8
 80016d4:	e029      	b.n	800172a <HAL_GPIO_Init+0x26a>
 80016d6:	2307      	movs	r3, #7
 80016d8:	e027      	b.n	800172a <HAL_GPIO_Init+0x26a>
 80016da:	2306      	movs	r3, #6
 80016dc:	e025      	b.n	800172a <HAL_GPIO_Init+0x26a>
 80016de:	2305      	movs	r3, #5
 80016e0:	e023      	b.n	800172a <HAL_GPIO_Init+0x26a>
 80016e2:	2304      	movs	r3, #4
 80016e4:	e021      	b.n	800172a <HAL_GPIO_Init+0x26a>
 80016e6:	2303      	movs	r3, #3
 80016e8:	e01f      	b.n	800172a <HAL_GPIO_Init+0x26a>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e01d      	b.n	800172a <HAL_GPIO_Init+0x26a>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e01b      	b.n	800172a <HAL_GPIO_Init+0x26a>
 80016f2:	bf00      	nop
 80016f4:	58000080 	.word	0x58000080
 80016f8:	58024400 	.word	0x58024400
 80016fc:	58000400 	.word	0x58000400
 8001700:	58020000 	.word	0x58020000
 8001704:	58020400 	.word	0x58020400
 8001708:	58020800 	.word	0x58020800
 800170c:	58020c00 	.word	0x58020c00
 8001710:	58021000 	.word	0x58021000
 8001714:	58021400 	.word	0x58021400
 8001718:	58021800 	.word	0x58021800
 800171c:	58021c00 	.word	0x58021c00
 8001720:	58022000 	.word	0x58022000
 8001724:	58022400 	.word	0x58022400
 8001728:	2300      	movs	r3, #0
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	f002 0203 	and.w	r2, r2, #3
 8001730:	0092      	lsls	r2, r2, #2
 8001732:	4093      	lsls	r3, r2
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800173a:	4938      	ldr	r1, [pc, #224]	@ (800181c <HAL_GPIO_Init+0x35c>)
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	3302      	adds	r3, #2
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001748:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800176e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800179c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	3301      	adds	r3, #1
 80017fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	fa22 f303 	lsr.w	r3, r2, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	f47f ae63 	bne.w	80014d4 <HAL_GPIO_Init+0x14>
  }
}
 800180e:	bf00      	nop
 8001810:	bf00      	nop
 8001812:	3724      	adds	r7, #36	@ 0x24
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	58000400 	.word	0x58000400

08001820 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001828:	4a08      	ldr	r2, [pc, #32]	@ (800184c <HAL_HSEM_FastTake+0x2c>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3320      	adds	r3, #32
 800182e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001832:	4a07      	ldr	r2, [pc, #28]	@ (8001850 <HAL_HSEM_FastTake+0x30>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d101      	bne.n	800183c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	e000      	b.n	800183e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	58026400 	.word	0x58026400
 8001850:	80000300 	.word	0x80000300

08001854 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800185e:	4906      	ldr	r1, [pc, #24]	@ (8001878 <HAL_HSEM_Release+0x24>)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	58026400 	.word	0x58026400

0800187c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001884:	4b29      	ldr	r3, [pc, #164]	@ (800192c <HAL_PWREx_ConfigSupply+0xb0>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	2b06      	cmp	r3, #6
 800188e:	d00a      	beq.n	80018a6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001890:	4b26      	ldr	r3, [pc, #152]	@ (800192c <HAL_PWREx_ConfigSupply+0xb0>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	429a      	cmp	r2, r3
 800189c:	d001      	beq.n	80018a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e040      	b.n	8001924 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e03e      	b.n	8001924 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80018a6:	4b21      	ldr	r3, [pc, #132]	@ (800192c <HAL_PWREx_ConfigSupply+0xb0>)
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80018ae:	491f      	ldr	r1, [pc, #124]	@ (800192c <HAL_PWREx_ConfigSupply+0xb0>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80018b6:	f7ff fcf9 	bl	80012ac <HAL_GetTick>
 80018ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018bc:	e009      	b.n	80018d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018be:	f7ff fcf5 	bl	80012ac <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018cc:	d901      	bls.n	80018d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e028      	b.n	8001924 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018d2:	4b16      	ldr	r3, [pc, #88]	@ (800192c <HAL_PWREx_ConfigSupply+0xb0>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018de:	d1ee      	bne.n	80018be <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b1e      	cmp	r3, #30
 80018e4:	d008      	beq.n	80018f8 <HAL_PWREx_ConfigSupply+0x7c>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80018ea:	d005      	beq.n	80018f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b1d      	cmp	r3, #29
 80018f0:	d002      	beq.n	80018f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b2d      	cmp	r3, #45	@ 0x2d
 80018f6:	d114      	bne.n	8001922 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80018f8:	f7ff fcd8 	bl	80012ac <HAL_GetTick>
 80018fc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80018fe:	e009      	b.n	8001914 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001900:	f7ff fcd4 	bl	80012ac <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800190e:	d901      	bls.n	8001914 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e007      	b.n	8001924 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001914:	4b05      	ldr	r3, [pc, #20]	@ (800192c <HAL_PWREx_ConfigSupply+0xb0>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800191c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001920:	d1ee      	bne.n	8001900 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	58024800 	.word	0x58024800

08001930 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08c      	sub	sp, #48	@ 0x30
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d102      	bne.n	8001944 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	f000 bc48 	b.w	80021d4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 8088 	beq.w	8001a62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001952:	4b99      	ldr	r3, [pc, #612]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800195a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800195c:	4b96      	ldr	r3, [pc, #600]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 800195e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001960:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001964:	2b10      	cmp	r3, #16
 8001966:	d007      	beq.n	8001978 <HAL_RCC_OscConfig+0x48>
 8001968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800196a:	2b18      	cmp	r3, #24
 800196c:	d111      	bne.n	8001992 <HAL_RCC_OscConfig+0x62>
 800196e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d10c      	bne.n	8001992 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001978:	4b8f      	ldr	r3, [pc, #572]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d06d      	beq.n	8001a60 <HAL_RCC_OscConfig+0x130>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d169      	bne.n	8001a60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	f000 bc21 	b.w	80021d4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800199a:	d106      	bne.n	80019aa <HAL_RCC_OscConfig+0x7a>
 800199c:	4b86      	ldr	r3, [pc, #536]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a85      	ldr	r2, [pc, #532]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 80019a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	e02e      	b.n	8001a08 <HAL_RCC_OscConfig+0xd8>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10c      	bne.n	80019cc <HAL_RCC_OscConfig+0x9c>
 80019b2:	4b81      	ldr	r3, [pc, #516]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a80      	ldr	r2, [pc, #512]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 80019b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	4b7e      	ldr	r3, [pc, #504]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a7d      	ldr	r2, [pc, #500]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 80019c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	e01d      	b.n	8001a08 <HAL_RCC_OscConfig+0xd8>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019d4:	d10c      	bne.n	80019f0 <HAL_RCC_OscConfig+0xc0>
 80019d6:	4b78      	ldr	r3, [pc, #480]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a77      	ldr	r2, [pc, #476]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 80019dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	4b75      	ldr	r3, [pc, #468]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a74      	ldr	r2, [pc, #464]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 80019e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	e00b      	b.n	8001a08 <HAL_RCC_OscConfig+0xd8>
 80019f0:	4b71      	ldr	r3, [pc, #452]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a70      	ldr	r2, [pc, #448]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 80019f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	4b6e      	ldr	r3, [pc, #440]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a6d      	ldr	r2, [pc, #436]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 8001a02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d013      	beq.n	8001a38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a10:	f7ff fc4c 	bl	80012ac <HAL_GetTick>
 8001a14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a18:	f7ff fc48 	bl	80012ac <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b64      	cmp	r3, #100	@ 0x64
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e3d4      	b.n	80021d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a2a:	4b63      	ldr	r3, [pc, #396]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0xe8>
 8001a36:	e014      	b.n	8001a62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff fc38 	bl	80012ac <HAL_GetTick>
 8001a3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff fc34 	bl	80012ac <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	@ 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e3c0      	b.n	80021d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a52:	4b59      	ldr	r3, [pc, #356]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x110>
 8001a5e:	e000      	b.n	8001a62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 80ca 	beq.w	8001c04 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a70:	4b51      	ldr	r3, [pc, #324]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a78:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a7a:	4b4f      	ldr	r3, [pc, #316]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a80:	6a3b      	ldr	r3, [r7, #32]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d007      	beq.n	8001a96 <HAL_RCC_OscConfig+0x166>
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	2b18      	cmp	r3, #24
 8001a8a:	d156      	bne.n	8001b3a <HAL_RCC_OscConfig+0x20a>
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d151      	bne.n	8001b3a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a96:	4b48      	ldr	r3, [pc, #288]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d005      	beq.n	8001aae <HAL_RCC_OscConfig+0x17e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e392      	b.n	80021d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001aae:	4b42      	ldr	r3, [pc, #264]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 0219 	bic.w	r2, r3, #25
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	493f      	ldr	r1, [pc, #252]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fbf4 	bl	80012ac <HAL_GetTick>
 8001ac4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac8:	f7ff fbf0 	bl	80012ac <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e37c      	b.n	80021d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ada:	4b37      	ldr	r3, [pc, #220]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae6:	f7ff fbed 	bl	80012c4 <HAL_GetREVID>
 8001aea:	4603      	mov	r3, r0
 8001aec:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d817      	bhi.n	8001b24 <HAL_RCC_OscConfig+0x1f4>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	2b40      	cmp	r3, #64	@ 0x40
 8001afa:	d108      	bne.n	8001b0e <HAL_RCC_OscConfig+0x1de>
 8001afc:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001b04:	4a2c      	ldr	r2, [pc, #176]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 8001b06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b0a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b0c:	e07a      	b.n	8001c04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	031b      	lsls	r3, r3, #12
 8001b1c:	4926      	ldr	r1, [pc, #152]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b22:	e06f      	b.n	8001c04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b24:	4b24      	ldr	r3, [pc, #144]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	061b      	lsls	r3, r3, #24
 8001b32:	4921      	ldr	r1, [pc, #132]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b38:	e064      	b.n	8001c04 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d047      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b42:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 0219 	bic.w	r2, r3, #25
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	491a      	ldr	r1, [pc, #104]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7ff fbaa 	bl	80012ac <HAL_GetTick>
 8001b58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b5c:	f7ff fba6 	bl	80012ac <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e332      	b.n	80021d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b6e:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7a:	f7ff fba3 	bl	80012c4 <HAL_GetREVID>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d819      	bhi.n	8001bbc <HAL_RCC_OscConfig+0x28c>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	2b40      	cmp	r3, #64	@ 0x40
 8001b8e:	d108      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x272>
 8001b90:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001b98:	4a07      	ldr	r2, [pc, #28]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 8001b9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b9e:	6053      	str	r3, [r2, #4]
 8001ba0:	e030      	b.n	8001c04 <HAL_RCC_OscConfig+0x2d4>
 8001ba2:	4b05      	ldr	r3, [pc, #20]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	031b      	lsls	r3, r3, #12
 8001bb0:	4901      	ldr	r1, [pc, #4]	@ (8001bb8 <HAL_RCC_OscConfig+0x288>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	604b      	str	r3, [r1, #4]
 8001bb6:	e025      	b.n	8001c04 <HAL_RCC_OscConfig+0x2d4>
 8001bb8:	58024400 	.word	0x58024400
 8001bbc:	4b9a      	ldr	r3, [pc, #616]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	061b      	lsls	r3, r3, #24
 8001bca:	4997      	ldr	r1, [pc, #604]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
 8001bd0:	e018      	b.n	8001c04 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd2:	4b95      	ldr	r3, [pc, #596]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a94      	ldr	r2, [pc, #592]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001bd8:	f023 0301 	bic.w	r3, r3, #1
 8001bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bde:	f7ff fb65 	bl	80012ac <HAL_GetTick>
 8001be2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be6:	f7ff fb61 	bl	80012ac <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e2ed      	b.n	80021d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bf8:	4b8b      	ldr	r3, [pc, #556]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f0      	bne.n	8001be6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0310 	and.w	r3, r3, #16
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80a9 	beq.w	8001d64 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c12:	4b85      	ldr	r3, [pc, #532]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c1a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c1c:	4b82      	ldr	r3, [pc, #520]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c20:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d007      	beq.n	8001c38 <HAL_RCC_OscConfig+0x308>
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2b18      	cmp	r3, #24
 8001c2c:	d13a      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x374>
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d135      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c38:	4b7b      	ldr	r3, [pc, #492]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <HAL_RCC_OscConfig+0x320>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	2b80      	cmp	r3, #128	@ 0x80
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e2c1      	b.n	80021d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c50:	f7ff fb38 	bl	80012c4 <HAL_GetREVID>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d817      	bhi.n	8001c8e <HAL_RCC_OscConfig+0x35e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	2b20      	cmp	r3, #32
 8001c64:	d108      	bne.n	8001c78 <HAL_RCC_OscConfig+0x348>
 8001c66:	4b70      	ldr	r3, [pc, #448]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001c6e:	4a6e      	ldr	r2, [pc, #440]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001c70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c74:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c76:	e075      	b.n	8001d64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c78:	4b6b      	ldr	r3, [pc, #428]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	069b      	lsls	r3, r3, #26
 8001c86:	4968      	ldr	r1, [pc, #416]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c8c:	e06a      	b.n	8001d64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c8e:	4b66      	ldr	r3, [pc, #408]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	061b      	lsls	r3, r3, #24
 8001c9c:	4962      	ldr	r1, [pc, #392]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ca2:	e05f      	b.n	8001d64 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d042      	beq.n	8001d32 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001cac:	4b5e      	ldr	r3, [pc, #376]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a5d      	ldr	r2, [pc, #372]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff faf8 	bl	80012ac <HAL_GetTick>
 8001cbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001cc0:	f7ff faf4 	bl	80012ac <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e280      	b.n	80021d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cd2:	4b55      	ldr	r3, [pc, #340]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cde:	f7ff faf1 	bl	80012c4 <HAL_GetREVID>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d817      	bhi.n	8001d1c <HAL_RCC_OscConfig+0x3ec>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	2b20      	cmp	r3, #32
 8001cf2:	d108      	bne.n	8001d06 <HAL_RCC_OscConfig+0x3d6>
 8001cf4:	4b4c      	ldr	r3, [pc, #304]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001cfc:	4a4a      	ldr	r2, [pc, #296]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001cfe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d02:	6053      	str	r3, [r2, #4]
 8001d04:	e02e      	b.n	8001d64 <HAL_RCC_OscConfig+0x434>
 8001d06:	4b48      	ldr	r3, [pc, #288]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	069b      	lsls	r3, r3, #26
 8001d14:	4944      	ldr	r1, [pc, #272]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	604b      	str	r3, [r1, #4]
 8001d1a:	e023      	b.n	8001d64 <HAL_RCC_OscConfig+0x434>
 8001d1c:	4b42      	ldr	r3, [pc, #264]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	061b      	lsls	r3, r3, #24
 8001d2a:	493f      	ldr	r1, [pc, #252]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	60cb      	str	r3, [r1, #12]
 8001d30:	e018      	b.n	8001d64 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d32:	4b3d      	ldr	r3, [pc, #244]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a3c      	ldr	r2, [pc, #240]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001d38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3e:	f7ff fab5 	bl	80012ac <HAL_GetTick>
 8001d42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d46:	f7ff fab1 	bl	80012ac <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e23d      	b.n	80021d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d58:	4b33      	ldr	r3, [pc, #204]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f0      	bne.n	8001d46 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d036      	beq.n	8001dde <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d019      	beq.n	8001dac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d78:	4b2b      	ldr	r3, [pc, #172]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d7c:	4a2a      	ldr	r2, [pc, #168]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d84:	f7ff fa92 	bl	80012ac <HAL_GetTick>
 8001d88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d8c:	f7ff fa8e 	bl	80012ac <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e21a      	b.n	80021d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d9e:	4b22      	ldr	r3, [pc, #136]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x45c>
 8001daa:	e018      	b.n	8001dde <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dac:	4b1e      	ldr	r3, [pc, #120]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001db0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db8:	f7ff fa78 	bl	80012ac <HAL_GetTick>
 8001dbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc0:	f7ff fa74 	bl	80012ac <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e200      	b.n	80021d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dd2:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001dd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d039      	beq.n	8001e5e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d01c      	beq.n	8001e2c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001df2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a0c      	ldr	r2, [pc, #48]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001df8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dfc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001dfe:	f7ff fa55 	bl	80012ac <HAL_GetTick>
 8001e02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e06:	f7ff fa51 	bl	80012ac <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e1dd      	b.n	80021d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e18:	4b03      	ldr	r3, [pc, #12]	@ (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x4d6>
 8001e24:	e01b      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
 8001e26:	bf00      	nop
 8001e28:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e2c:	4b9b      	ldr	r3, [pc, #620]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a9a      	ldr	r2, [pc, #616]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001e32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e36:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e38:	f7ff fa38 	bl	80012ac <HAL_GetTick>
 8001e3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e40:	f7ff fa34 	bl	80012ac <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e1c0      	b.n	80021d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e52:	4b92      	ldr	r3, [pc, #584]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8081 	beq.w	8001f6e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e6c:	4b8c      	ldr	r3, [pc, #560]	@ (80020a0 <HAL_RCC_OscConfig+0x770>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a8b      	ldr	r2, [pc, #556]	@ (80020a0 <HAL_RCC_OscConfig+0x770>)
 8001e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e78:	f7ff fa18 	bl	80012ac <HAL_GetTick>
 8001e7c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e80:	f7ff fa14 	bl	80012ac <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b64      	cmp	r3, #100	@ 0x64
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e1a0      	b.n	80021d4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e92:	4b83      	ldr	r3, [pc, #524]	@ (80020a0 <HAL_RCC_OscConfig+0x770>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d106      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x584>
 8001ea6:	4b7d      	ldr	r3, [pc, #500]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eaa:	4a7c      	ldr	r2, [pc, #496]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eb2:	e02d      	b.n	8001f10 <HAL_RCC_OscConfig+0x5e0>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10c      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x5a6>
 8001ebc:	4b77      	ldr	r3, [pc, #476]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec0:	4a76      	ldr	r2, [pc, #472]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001ec2:	f023 0301 	bic.w	r3, r3, #1
 8001ec6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ec8:	4b74      	ldr	r3, [pc, #464]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ecc:	4a73      	ldr	r2, [pc, #460]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001ece:	f023 0304 	bic.w	r3, r3, #4
 8001ed2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ed4:	e01c      	b.n	8001f10 <HAL_RCC_OscConfig+0x5e0>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b05      	cmp	r3, #5
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x5c8>
 8001ede:	4b6f      	ldr	r3, [pc, #444]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee2:	4a6e      	ldr	r2, [pc, #440]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eea:	4b6c      	ldr	r3, [pc, #432]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eee:	4a6b      	ldr	r2, [pc, #428]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ef6:	e00b      	b.n	8001f10 <HAL_RCC_OscConfig+0x5e0>
 8001ef8:	4b68      	ldr	r3, [pc, #416]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001efc:	4a67      	ldr	r2, [pc, #412]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001efe:	f023 0301 	bic.w	r3, r3, #1
 8001f02:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f04:	4b65      	ldr	r3, [pc, #404]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f08:	4a64      	ldr	r2, [pc, #400]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001f0a:	f023 0304 	bic.w	r3, r3, #4
 8001f0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d015      	beq.n	8001f44 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f18:	f7ff f9c8 	bl	80012ac <HAL_GetTick>
 8001f1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f1e:	e00a      	b.n	8001f36 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f20:	f7ff f9c4 	bl	80012ac <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e14e      	b.n	80021d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f36:	4b59      	ldr	r3, [pc, #356]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0ee      	beq.n	8001f20 <HAL_RCC_OscConfig+0x5f0>
 8001f42:	e014      	b.n	8001f6e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f44:	f7ff f9b2 	bl	80012ac <HAL_GetTick>
 8001f48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f4a:	e00a      	b.n	8001f62 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4c:	f7ff f9ae 	bl	80012ac <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e138      	b.n	80021d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f62:	4b4e      	ldr	r3, [pc, #312]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1ee      	bne.n	8001f4c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 812d 	beq.w	80021d2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f78:	4b48      	ldr	r3, [pc, #288]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f80:	2b18      	cmp	r3, #24
 8001f82:	f000 80bd 	beq.w	8002100 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	f040 809e 	bne.w	80020cc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f90:	4b42      	ldr	r3, [pc, #264]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a41      	ldr	r2, [pc, #260]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001f96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7ff f986 	bl	80012ac <HAL_GetTick>
 8001fa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa4:	f7ff f982 	bl	80012ac <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e10e      	b.n	80021d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fb6:	4b39      	ldr	r3, [pc, #228]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc2:	4b36      	ldr	r3, [pc, #216]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001fc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fc6:	4b37      	ldr	r3, [pc, #220]	@ (80020a4 <HAL_RCC_OscConfig+0x774>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001fd2:	0112      	lsls	r2, r2, #4
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	4931      	ldr	r1, [pc, #196]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	628b      	str	r3, [r1, #40]	@ 0x28
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fea:	3b01      	subs	r3, #1
 8001fec:	025b      	lsls	r3, r3, #9
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	041b      	lsls	r3, r3, #16
 8001ffa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002004:	3b01      	subs	r3, #1
 8002006:	061b      	lsls	r3, r3, #24
 8002008:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800200c:	4923      	ldr	r1, [pc, #140]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 800200e:	4313      	orrs	r3, r2
 8002010:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002012:	4b22      	ldr	r3, [pc, #136]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8002014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002016:	4a21      	ldr	r2, [pc, #132]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800201e:	4b1f      	ldr	r3, [pc, #124]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8002020:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002022:	4b21      	ldr	r3, [pc, #132]	@ (80020a8 <HAL_RCC_OscConfig+0x778>)
 8002024:	4013      	ands	r3, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800202a:	00d2      	lsls	r2, r2, #3
 800202c:	491b      	ldr	r1, [pc, #108]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 800202e:	4313      	orrs	r3, r2
 8002030:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002032:	4b1a      	ldr	r3, [pc, #104]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8002034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002036:	f023 020c 	bic.w	r2, r3, #12
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	4917      	ldr	r1, [pc, #92]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8002040:	4313      	orrs	r3, r2
 8002042:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002044:	4b15      	ldr	r3, [pc, #84]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8002046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002048:	f023 0202 	bic.w	r2, r3, #2
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002050:	4912      	ldr	r1, [pc, #72]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8002052:	4313      	orrs	r3, r2
 8002054:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002056:	4b11      	ldr	r3, [pc, #68]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8002058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205a:	4a10      	ldr	r2, [pc, #64]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002060:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002062:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8002064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002066:	4a0d      	ldr	r2, [pc, #52]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8002068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800206c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800206e:	4b0b      	ldr	r3, [pc, #44]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8002070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002072:	4a0a      	ldr	r2, [pc, #40]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8002074:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002078:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800207a:	4b08      	ldr	r3, [pc, #32]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 800207c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207e:	4a07      	ldr	r2, [pc, #28]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002086:	4b05      	ldr	r3, [pc, #20]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a04      	ldr	r2, [pc, #16]	@ (800209c <HAL_RCC_OscConfig+0x76c>)
 800208c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002092:	f7ff f90b 	bl	80012ac <HAL_GetTick>
 8002096:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002098:	e011      	b.n	80020be <HAL_RCC_OscConfig+0x78e>
 800209a:	bf00      	nop
 800209c:	58024400 	.word	0x58024400
 80020a0:	58024800 	.word	0x58024800
 80020a4:	fffffc0c 	.word	0xfffffc0c
 80020a8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ac:	f7ff f8fe 	bl	80012ac <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e08a      	b.n	80021d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020be:	4b47      	ldr	r3, [pc, #284]	@ (80021dc <HAL_RCC_OscConfig+0x8ac>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x77c>
 80020ca:	e082      	b.n	80021d2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020cc:	4b43      	ldr	r3, [pc, #268]	@ (80021dc <HAL_RCC_OscConfig+0x8ac>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a42      	ldr	r2, [pc, #264]	@ (80021dc <HAL_RCC_OscConfig+0x8ac>)
 80020d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7ff f8e8 	bl	80012ac <HAL_GetTick>
 80020dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7ff f8e4 	bl	80012ac <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e070      	b.n	80021d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020f2:	4b3a      	ldr	r3, [pc, #232]	@ (80021dc <HAL_RCC_OscConfig+0x8ac>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x7b0>
 80020fe:	e068      	b.n	80021d2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002100:	4b36      	ldr	r3, [pc, #216]	@ (80021dc <HAL_RCC_OscConfig+0x8ac>)
 8002102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002104:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002106:	4b35      	ldr	r3, [pc, #212]	@ (80021dc <HAL_RCC_OscConfig+0x8ac>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002110:	2b01      	cmp	r3, #1
 8002112:	d031      	beq.n	8002178 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f003 0203 	and.w	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800211e:	429a      	cmp	r2, r3
 8002120:	d12a      	bne.n	8002178 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212e:	429a      	cmp	r2, r3
 8002130:	d122      	bne.n	8002178 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d11a      	bne.n	8002178 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	0a5b      	lsrs	r3, r3, #9
 8002146:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800214e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002150:	429a      	cmp	r2, r3
 8002152:	d111      	bne.n	8002178 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	0c1b      	lsrs	r3, r3, #16
 8002158:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002160:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002162:	429a      	cmp	r2, r3
 8002164:	d108      	bne.n	8002178 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	0e1b      	lsrs	r3, r3, #24
 800216a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002172:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e02b      	b.n	80021d4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800217c:	4b17      	ldr	r3, [pc, #92]	@ (80021dc <HAL_RCC_OscConfig+0x8ac>)
 800217e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002180:	08db      	lsrs	r3, r3, #3
 8002182:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002186:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	429a      	cmp	r2, r3
 8002190:	d01f      	beq.n	80021d2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002192:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <HAL_RCC_OscConfig+0x8ac>)
 8002194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002196:	4a11      	ldr	r2, [pc, #68]	@ (80021dc <HAL_RCC_OscConfig+0x8ac>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800219e:	f7ff f885 	bl	80012ac <HAL_GetTick>
 80021a2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80021a4:	bf00      	nop
 80021a6:	f7ff f881 	bl	80012ac <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d0f9      	beq.n	80021a6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021b2:	4b0a      	ldr	r3, [pc, #40]	@ (80021dc <HAL_RCC_OscConfig+0x8ac>)
 80021b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021b6:	4b0a      	ldr	r3, [pc, #40]	@ (80021e0 <HAL_RCC_OscConfig+0x8b0>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021be:	00d2      	lsls	r2, r2, #3
 80021c0:	4906      	ldr	r1, [pc, #24]	@ (80021dc <HAL_RCC_OscConfig+0x8ac>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80021c6:	4b05      	ldr	r3, [pc, #20]	@ (80021dc <HAL_RCC_OscConfig+0x8ac>)
 80021c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ca:	4a04      	ldr	r2, [pc, #16]	@ (80021dc <HAL_RCC_OscConfig+0x8ac>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3730      	adds	r7, #48	@ 0x30
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	58024400 	.word	0x58024400
 80021e0:	ffff0007 	.word	0xffff0007

080021e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e19c      	b.n	8002532 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021f8:	4b8a      	ldr	r3, [pc, #552]	@ (8002424 <HAL_RCC_ClockConfig+0x240>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d910      	bls.n	8002228 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b87      	ldr	r3, [pc, #540]	@ (8002424 <HAL_RCC_ClockConfig+0x240>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 020f 	bic.w	r2, r3, #15
 800220e:	4985      	ldr	r1, [pc, #532]	@ (8002424 <HAL_RCC_ClockConfig+0x240>)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b83      	ldr	r3, [pc, #524]	@ (8002424 <HAL_RCC_ClockConfig+0x240>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e184      	b.n	8002532 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d010      	beq.n	8002256 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	4b7b      	ldr	r3, [pc, #492]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002240:	429a      	cmp	r2, r3
 8002242:	d908      	bls.n	8002256 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002244:	4b78      	ldr	r3, [pc, #480]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	4975      	ldr	r1, [pc, #468]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 8002252:	4313      	orrs	r3, r2
 8002254:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d010      	beq.n	8002284 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	4b70      	ldr	r3, [pc, #448]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800226e:	429a      	cmp	r2, r3
 8002270:	d908      	bls.n	8002284 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002272:	4b6d      	ldr	r3, [pc, #436]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	496a      	ldr	r1, [pc, #424]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 8002280:	4313      	orrs	r3, r2
 8002282:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	2b00      	cmp	r3, #0
 800228e:	d010      	beq.n	80022b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	699a      	ldr	r2, [r3, #24]
 8002294:	4b64      	ldr	r3, [pc, #400]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800229c:	429a      	cmp	r2, r3
 800229e:	d908      	bls.n	80022b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022a0:	4b61      	ldr	r3, [pc, #388]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	495e      	ldr	r1, [pc, #376]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d010      	beq.n	80022e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69da      	ldr	r2, [r3, #28]
 80022c2:	4b59      	ldr	r3, [pc, #356]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d908      	bls.n	80022e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80022ce:	4b56      	ldr	r3, [pc, #344]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	4953      	ldr	r1, [pc, #332]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d010      	beq.n	800230e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	4b4d      	ldr	r3, [pc, #308]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d908      	bls.n	800230e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022fc:	4b4a      	ldr	r3, [pc, #296]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f023 020f 	bic.w	r2, r3, #15
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4947      	ldr	r1, [pc, #284]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 800230a:	4313      	orrs	r3, r2
 800230c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d055      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800231a:	4b43      	ldr	r3, [pc, #268]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	4940      	ldr	r1, [pc, #256]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 8002328:	4313      	orrs	r3, r2
 800232a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d107      	bne.n	8002344 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002334:	4b3c      	ldr	r3, [pc, #240]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d121      	bne.n	8002384 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0f6      	b.n	8002532 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d107      	bne.n	800235c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800234c:	4b36      	ldr	r3, [pc, #216]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d115      	bne.n	8002384 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0ea      	b.n	8002532 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d107      	bne.n	8002374 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002364:	4b30      	ldr	r3, [pc, #192]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d109      	bne.n	8002384 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0de      	b.n	8002532 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002374:	4b2c      	ldr	r3, [pc, #176]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0d6      	b.n	8002532 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002384:	4b28      	ldr	r3, [pc, #160]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	f023 0207 	bic.w	r2, r3, #7
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4925      	ldr	r1, [pc, #148]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 8002392:	4313      	orrs	r3, r2
 8002394:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002396:	f7fe ff89 	bl	80012ac <HAL_GetTick>
 800239a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239c:	e00a      	b.n	80023b4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800239e:	f7fe ff85 	bl	80012ac <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e0be      	b.n	8002532 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d1eb      	bne.n	800239e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d010      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	4b14      	ldr	r3, [pc, #80]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	429a      	cmp	r2, r3
 80023e0:	d208      	bcs.n	80023f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e2:	4b11      	ldr	r3, [pc, #68]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	f023 020f 	bic.w	r2, r3, #15
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	490e      	ldr	r1, [pc, #56]	@ (8002428 <HAL_RCC_ClockConfig+0x244>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002424 <HAL_RCC_ClockConfig+0x240>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d214      	bcs.n	800242c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002402:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <HAL_RCC_ClockConfig+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 020f 	bic.w	r2, r3, #15
 800240a:	4906      	ldr	r1, [pc, #24]	@ (8002424 <HAL_RCC_ClockConfig+0x240>)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002412:	4b04      	ldr	r3, [pc, #16]	@ (8002424 <HAL_RCC_ClockConfig+0x240>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d005      	beq.n	800242c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e086      	b.n	8002532 <HAL_RCC_ClockConfig+0x34e>
 8002424:	52002000 	.word	0x52002000
 8002428:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d010      	beq.n	800245a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691a      	ldr	r2, [r3, #16]
 800243c:	4b3f      	ldr	r3, [pc, #252]	@ (800253c <HAL_RCC_ClockConfig+0x358>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002444:	429a      	cmp	r2, r3
 8002446:	d208      	bcs.n	800245a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002448:	4b3c      	ldr	r3, [pc, #240]	@ (800253c <HAL_RCC_ClockConfig+0x358>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	4939      	ldr	r1, [pc, #228]	@ (800253c <HAL_RCC_ClockConfig+0x358>)
 8002456:	4313      	orrs	r3, r2
 8002458:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d010      	beq.n	8002488 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695a      	ldr	r2, [r3, #20]
 800246a:	4b34      	ldr	r3, [pc, #208]	@ (800253c <HAL_RCC_ClockConfig+0x358>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002472:	429a      	cmp	r2, r3
 8002474:	d208      	bcs.n	8002488 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002476:	4b31      	ldr	r3, [pc, #196]	@ (800253c <HAL_RCC_ClockConfig+0x358>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	492e      	ldr	r1, [pc, #184]	@ (800253c <HAL_RCC_ClockConfig+0x358>)
 8002484:	4313      	orrs	r3, r2
 8002486:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0310 	and.w	r3, r3, #16
 8002490:	2b00      	cmp	r3, #0
 8002492:	d010      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699a      	ldr	r2, [r3, #24]
 8002498:	4b28      	ldr	r3, [pc, #160]	@ (800253c <HAL_RCC_ClockConfig+0x358>)
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d208      	bcs.n	80024b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024a4:	4b25      	ldr	r3, [pc, #148]	@ (800253c <HAL_RCC_ClockConfig+0x358>)
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	4922      	ldr	r1, [pc, #136]	@ (800253c <HAL_RCC_ClockConfig+0x358>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0320 	and.w	r3, r3, #32
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d010      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69da      	ldr	r2, [r3, #28]
 80024c6:	4b1d      	ldr	r3, [pc, #116]	@ (800253c <HAL_RCC_ClockConfig+0x358>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d208      	bcs.n	80024e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80024d2:	4b1a      	ldr	r3, [pc, #104]	@ (800253c <HAL_RCC_ClockConfig+0x358>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	4917      	ldr	r1, [pc, #92]	@ (800253c <HAL_RCC_ClockConfig+0x358>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024e4:	f000 f89e 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b14      	ldr	r3, [pc, #80]	@ (800253c <HAL_RCC_ClockConfig+0x358>)
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	f003 030f 	and.w	r3, r3, #15
 80024f4:	4912      	ldr	r1, [pc, #72]	@ (8002540 <HAL_RCC_ClockConfig+0x35c>)
 80024f6:	5ccb      	ldrb	r3, [r1, r3]
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002500:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002502:	4b0e      	ldr	r3, [pc, #56]	@ (800253c <HAL_RCC_ClockConfig+0x358>)
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	4a0d      	ldr	r2, [pc, #52]	@ (8002540 <HAL_RCC_ClockConfig+0x35c>)
 800250c:	5cd3      	ldrb	r3, [r2, r3]
 800250e:	f003 031f 	and.w	r3, r3, #31
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
 8002518:	4a0a      	ldr	r2, [pc, #40]	@ (8002544 <HAL_RCC_ClockConfig+0x360>)
 800251a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800251c:	4a0a      	ldr	r2, [pc, #40]	@ (8002548 <HAL_RCC_ClockConfig+0x364>)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002522:	4b0a      	ldr	r3, [pc, #40]	@ (800254c <HAL_RCC_ClockConfig+0x368>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe fdb2 	bl	8001090 <HAL_InitTick>
 800252c:	4603      	mov	r3, r0
 800252e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002530:	7bfb      	ldrb	r3, [r7, #15]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	58024400 	.word	0x58024400
 8002540:	08008bcc 	.word	0x08008bcc
 8002544:	24000004 	.word	0x24000004
 8002548:	24000000 	.word	0x24000000
 800254c:	24000008 	.word	0x24000008

08002550 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08c      	sub	sp, #48	@ 0x30
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d12a      	bne.n	80025b8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8002562:	4b2d      	ldr	r3, [pc, #180]	@ (8002618 <HAL_RCC_MCOConfig+0xc8>)
 8002564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002568:	4a2b      	ldr	r2, [pc, #172]	@ (8002618 <HAL_RCC_MCOConfig+0xc8>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002572:	4b29      	ldr	r3, [pc, #164]	@ (8002618 <HAL_RCC_MCOConfig+0xc8>)
 8002574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002580:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258a:	2303      	movs	r3, #3
 800258c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002592:	2300      	movs	r3, #0
 8002594:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002596:	f107 031c 	add.w	r3, r7, #28
 800259a:	4619      	mov	r1, r3
 800259c:	481f      	ldr	r0, [pc, #124]	@ (800261c <HAL_RCC_MCOConfig+0xcc>)
 800259e:	f7fe ff8f 	bl	80014c0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80025a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002618 <HAL_RCC_MCOConfig+0xc8>)
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 80025aa:	68b9      	ldr	r1, [r7, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	430b      	orrs	r3, r1
 80025b0:	4919      	ldr	r1, [pc, #100]	@ (8002618 <HAL_RCC_MCOConfig+0xc8>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80025b6:	e02a      	b.n	800260e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80025b8:	4b17      	ldr	r3, [pc, #92]	@ (8002618 <HAL_RCC_MCOConfig+0xc8>)
 80025ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025be:	4a16      	ldr	r2, [pc, #88]	@ (8002618 <HAL_RCC_MCOConfig+0xc8>)
 80025c0:	f043 0304 	orr.w	r3, r3, #4
 80025c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025c8:	4b13      	ldr	r3, [pc, #76]	@ (8002618 <HAL_RCC_MCOConfig+0xc8>)
 80025ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80025d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025dc:	2302      	movs	r3, #2
 80025de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e0:	2303      	movs	r3, #3
 80025e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80025e8:	2300      	movs	r3, #0
 80025ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80025ec:	f107 031c 	add.w	r3, r7, #28
 80025f0:	4619      	mov	r1, r3
 80025f2:	480b      	ldr	r0, [pc, #44]	@ (8002620 <HAL_RCC_MCOConfig+0xd0>)
 80025f4:	f7fe ff64 	bl	80014c0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80025f8:	4b07      	ldr	r3, [pc, #28]	@ (8002618 <HAL_RCC_MCOConfig+0xc8>)
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	01d9      	lsls	r1, r3, #7
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	430b      	orrs	r3, r1
 8002608:	4903      	ldr	r1, [pc, #12]	@ (8002618 <HAL_RCC_MCOConfig+0xc8>)
 800260a:	4313      	orrs	r3, r2
 800260c:	610b      	str	r3, [r1, #16]
}
 800260e:	bf00      	nop
 8002610:	3730      	adds	r7, #48	@ 0x30
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	58024400 	.word	0x58024400
 800261c:	58020000 	.word	0x58020000
 8002620:	58020800 	.word	0x58020800

08002624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002624:	b480      	push	{r7}
 8002626:	b089      	sub	sp, #36	@ 0x24
 8002628:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800262a:	4bb3      	ldr	r3, [pc, #716]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002632:	2b18      	cmp	r3, #24
 8002634:	f200 8155 	bhi.w	80028e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002638:	a201      	add	r2, pc, #4	@ (adr r2, 8002640 <HAL_RCC_GetSysClockFreq+0x1c>)
 800263a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263e:	bf00      	nop
 8002640:	080026a5 	.word	0x080026a5
 8002644:	080028e3 	.word	0x080028e3
 8002648:	080028e3 	.word	0x080028e3
 800264c:	080028e3 	.word	0x080028e3
 8002650:	080028e3 	.word	0x080028e3
 8002654:	080028e3 	.word	0x080028e3
 8002658:	080028e3 	.word	0x080028e3
 800265c:	080028e3 	.word	0x080028e3
 8002660:	080026cb 	.word	0x080026cb
 8002664:	080028e3 	.word	0x080028e3
 8002668:	080028e3 	.word	0x080028e3
 800266c:	080028e3 	.word	0x080028e3
 8002670:	080028e3 	.word	0x080028e3
 8002674:	080028e3 	.word	0x080028e3
 8002678:	080028e3 	.word	0x080028e3
 800267c:	080028e3 	.word	0x080028e3
 8002680:	080026d1 	.word	0x080026d1
 8002684:	080028e3 	.word	0x080028e3
 8002688:	080028e3 	.word	0x080028e3
 800268c:	080028e3 	.word	0x080028e3
 8002690:	080028e3 	.word	0x080028e3
 8002694:	080028e3 	.word	0x080028e3
 8002698:	080028e3 	.word	0x080028e3
 800269c:	080028e3 	.word	0x080028e3
 80026a0:	080026d7 	.word	0x080026d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026a4:	4b94      	ldr	r3, [pc, #592]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0320 	and.w	r3, r3, #32
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d009      	beq.n	80026c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80026b0:	4b91      	ldr	r3, [pc, #580]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	08db      	lsrs	r3, r3, #3
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	4a90      	ldr	r2, [pc, #576]	@ (80028fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
 80026c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80026c2:	e111      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80026c4:	4b8d      	ldr	r3, [pc, #564]	@ (80028fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026c6:	61bb      	str	r3, [r7, #24]
      break;
 80026c8:	e10e      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80026ca:	4b8d      	ldr	r3, [pc, #564]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026cc:	61bb      	str	r3, [r7, #24]
      break;
 80026ce:	e10b      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80026d0:	4b8c      	ldr	r3, [pc, #560]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80026d2:	61bb      	str	r3, [r7, #24]
      break;
 80026d4:	e108      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026d6:	4b88      	ldr	r3, [pc, #544]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80026e0:	4b85      	ldr	r3, [pc, #532]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026ec:	4b82      	ldr	r3, [pc, #520]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80026f6:	4b80      	ldr	r3, [pc, #512]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026fa:	08db      	lsrs	r3, r3, #3
 80026fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	fb02 f303 	mul.w	r3, r2, r3
 8002706:	ee07 3a90 	vmov	s15, r3
 800270a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800270e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80e1 	beq.w	80028dc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b02      	cmp	r3, #2
 800271e:	f000 8083 	beq.w	8002828 <HAL_RCC_GetSysClockFreq+0x204>
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2b02      	cmp	r3, #2
 8002726:	f200 80a1 	bhi.w	800286c <HAL_RCC_GetSysClockFreq+0x248>
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x114>
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d056      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002736:	e099      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002738:	4b6f      	ldr	r3, [pc, #444]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b00      	cmp	r3, #0
 8002742:	d02d      	beq.n	80027a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002744:	4b6c      	ldr	r3, [pc, #432]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	08db      	lsrs	r3, r3, #3
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	4a6b      	ldr	r2, [pc, #428]	@ (80028fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
 8002754:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	ee07 3a90 	vmov	s15, r3
 800275c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	ee07 3a90 	vmov	s15, r3
 8002766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800276a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800276e:	4b62      	ldr	r3, [pc, #392]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002776:	ee07 3a90 	vmov	s15, r3
 800277a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800277e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002782:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002908 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800278a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800278e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800279a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800279e:	e087      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	ee07 3a90 	vmov	s15, r3
 80027a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027aa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800290c <HAL_RCC_GetSysClockFreq+0x2e8>
 80027ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027b2:	4b51      	ldr	r3, [pc, #324]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ba:	ee07 3a90 	vmov	s15, r3
 80027be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80027c6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002908 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027e2:	e065      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	ee07 3a90 	vmov	s15, r3
 80027ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002910 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027f6:	4b40      	ldr	r3, [pc, #256]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027fe:	ee07 3a90 	vmov	s15, r3
 8002802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002806:	ed97 6a02 	vldr	s12, [r7, #8]
 800280a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002908 <HAL_RCC_GetSysClockFreq+0x2e4>
 800280e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800281a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800281e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002822:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002826:	e043      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002832:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002914 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800283a:	4b2f      	ldr	r3, [pc, #188]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002842:	ee07 3a90 	vmov	s15, r3
 8002846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800284a:	ed97 6a02 	vldr	s12, [r7, #8]
 800284e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002908 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800285a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800285e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002866:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800286a:	e021      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	ee07 3a90 	vmov	s15, r3
 8002872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002876:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002910 <HAL_RCC_GetSysClockFreq+0x2ec>
 800287a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800287e:	4b1e      	ldr	r3, [pc, #120]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002886:	ee07 3a90 	vmov	s15, r3
 800288a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800288e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002892:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002908 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800289a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800289e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80028b0:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b4:	0a5b      	lsrs	r3, r3, #9
 80028b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028ba:	3301      	adds	r3, #1
 80028bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	ee07 3a90 	vmov	s15, r3
 80028c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80028cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028d4:	ee17 3a90 	vmov	r3, s15
 80028d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80028da:	e005      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	61bb      	str	r3, [r7, #24]
      break;
 80028e0:	e002      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80028e2:	4b07      	ldr	r3, [pc, #28]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028e4:	61bb      	str	r3, [r7, #24]
      break;
 80028e6:	bf00      	nop
  }

  return sysclockfreq;
 80028e8:	69bb      	ldr	r3, [r7, #24]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3724      	adds	r7, #36	@ 0x24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	58024400 	.word	0x58024400
 80028fc:	03d09000 	.word	0x03d09000
 8002900:	003d0900 	.word	0x003d0900
 8002904:	017d7840 	.word	0x017d7840
 8002908:	46000000 	.word	0x46000000
 800290c:	4c742400 	.word	0x4c742400
 8002910:	4a742400 	.word	0x4a742400
 8002914:	4bbebc20 	.word	0x4bbebc20

08002918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800291e:	f7ff fe81 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 8002922:	4602      	mov	r2, r0
 8002924:	4b10      	ldr	r3, [pc, #64]	@ (8002968 <HAL_RCC_GetHCLKFreq+0x50>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	0a1b      	lsrs	r3, r3, #8
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	490f      	ldr	r1, [pc, #60]	@ (800296c <HAL_RCC_GetHCLKFreq+0x54>)
 8002930:	5ccb      	ldrb	r3, [r1, r3]
 8002932:	f003 031f 	and.w	r3, r3, #31
 8002936:	fa22 f303 	lsr.w	r3, r2, r3
 800293a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800293c:	4b0a      	ldr	r3, [pc, #40]	@ (8002968 <HAL_RCC_GetHCLKFreq+0x50>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	4a09      	ldr	r2, [pc, #36]	@ (800296c <HAL_RCC_GetHCLKFreq+0x54>)
 8002946:	5cd3      	ldrb	r3, [r2, r3]
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	fa22 f303 	lsr.w	r3, r2, r3
 8002952:	4a07      	ldr	r2, [pc, #28]	@ (8002970 <HAL_RCC_GetHCLKFreq+0x58>)
 8002954:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002956:	4a07      	ldr	r2, [pc, #28]	@ (8002974 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800295c:	4b04      	ldr	r3, [pc, #16]	@ (8002970 <HAL_RCC_GetHCLKFreq+0x58>)
 800295e:	681b      	ldr	r3, [r3, #0]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	58024400 	.word	0x58024400
 800296c:	08008bcc 	.word	0x08008bcc
 8002970:	24000004 	.word	0x24000004
 8002974:	24000000 	.word	0x24000000

08002978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800297c:	f7ff ffcc 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 8002980:	4602      	mov	r2, r0
 8002982:	4b06      	ldr	r3, [pc, #24]	@ (800299c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	091b      	lsrs	r3, r3, #4
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	4904      	ldr	r1, [pc, #16]	@ (80029a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800298e:	5ccb      	ldrb	r3, [r1, r3]
 8002990:	f003 031f 	and.w	r3, r3, #31
 8002994:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002998:	4618      	mov	r0, r3
 800299a:	bd80      	pop	{r7, pc}
 800299c:	58024400 	.word	0x58024400
 80029a0:	08008bcc 	.word	0x08008bcc

080029a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80029a8:	f7ff ffb6 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 80029ac:	4602      	mov	r2, r0
 80029ae:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	0a1b      	lsrs	r3, r3, #8
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	4904      	ldr	r1, [pc, #16]	@ (80029cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80029ba:	5ccb      	ldrb	r3, [r1, r3]
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	58024400 	.word	0x58024400
 80029cc:	08008bcc 	.word	0x08008bcc

080029d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	223f      	movs	r2, #63	@ 0x3f
 80029de:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029e0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a4c <HAL_RCC_GetClockConfig+0x7c>)
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	f003 0207 	and.w	r2, r3, #7
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80029ec:	4b17      	ldr	r3, [pc, #92]	@ (8002a4c <HAL_RCC_GetClockConfig+0x7c>)
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80029f8:	4b14      	ldr	r3, [pc, #80]	@ (8002a4c <HAL_RCC_GetClockConfig+0x7c>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f003 020f 	and.w	r2, r3, #15
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002a04:	4b11      	ldr	r3, [pc, #68]	@ (8002a4c <HAL_RCC_GetClockConfig+0x7c>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002a10:	4b0e      	ldr	r3, [pc, #56]	@ (8002a4c <HAL_RCC_GetClockConfig+0x7c>)
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a4c <HAL_RCC_GetClockConfig+0x7c>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002a28:	4b08      	ldr	r3, [pc, #32]	@ (8002a4c <HAL_RCC_GetClockConfig+0x7c>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a34:	4b06      	ldr	r3, [pc, #24]	@ (8002a50 <HAL_RCC_GetClockConfig+0x80>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 020f 	and.w	r2, r3, #15
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	601a      	str	r2, [r3, #0]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	58024400 	.word	0x58024400
 8002a50:	52002000 	.word	0x52002000

08002a54 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a58:	b0cc      	sub	sp, #304	@ 0x130
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a60:	2300      	movs	r3, #0
 8002a62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a66:	2300      	movs	r3, #0
 8002a68:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002a78:	2500      	movs	r5, #0
 8002a7a:	ea54 0305 	orrs.w	r3, r4, r5
 8002a7e:	d049      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002a80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002a8a:	d02f      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002a8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002a90:	d828      	bhi.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a96:	d01a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a9c:	d822      	bhi.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002aa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002aa6:	d007      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002aa8:	e01c      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aaa:	4bb8      	ldr	r3, [pc, #736]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aae:	4ab7      	ldr	r2, [pc, #732]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ab4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ab6:	e01a      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ab8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002abc:	3308      	adds	r3, #8
 8002abe:	2102      	movs	r1, #2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f001 fccf 	bl	8004464 <RCCEx_PLL2_Config>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002acc:	e00f      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002ace:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ad2:	3328      	adds	r3, #40	@ 0x28
 8002ad4:	2102      	movs	r1, #2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f001 fd76 	bl	80045c8 <RCCEx_PLL3_Config>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ae2:	e004      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002aea:	e000      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10a      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002af6:	4ba5      	ldr	r3, [pc, #660]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002afa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002afe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b04:	4aa1      	ldr	r2, [pc, #644]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b06:	430b      	orrs	r3, r1
 8002b08:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b0a:	e003      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b0c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b10:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002b20:	f04f 0900 	mov.w	r9, #0
 8002b24:	ea58 0309 	orrs.w	r3, r8, r9
 8002b28:	d047      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002b2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d82a      	bhi.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002b34:	a201      	add	r2, pc, #4	@ (adr r2, 8002b3c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3a:	bf00      	nop
 8002b3c:	08002b51 	.word	0x08002b51
 8002b40:	08002b5f 	.word	0x08002b5f
 8002b44:	08002b75 	.word	0x08002b75
 8002b48:	08002b93 	.word	0x08002b93
 8002b4c:	08002b93 	.word	0x08002b93
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b50:	4b8e      	ldr	r3, [pc, #568]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b54:	4a8d      	ldr	r2, [pc, #564]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b5c:	e01a      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b62:	3308      	adds	r3, #8
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f001 fc7c 	bl	8004464 <RCCEx_PLL2_Config>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b72:	e00f      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b78:	3328      	adds	r3, #40	@ 0x28
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f001 fd23 	bl	80045c8 <RCCEx_PLL3_Config>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b88:	e004      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002b90:	e000      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b94:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10a      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b9c:	4b7b      	ldr	r3, [pc, #492]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ba0:	f023 0107 	bic.w	r1, r3, #7
 8002ba4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002baa:	4a78      	ldr	r2, [pc, #480]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bac:	430b      	orrs	r3, r1
 8002bae:	6513      	str	r3, [r2, #80]	@ 0x50
 8002bb0:	e003      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002bb6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002bba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002bc6:	f04f 0b00 	mov.w	fp, #0
 8002bca:	ea5a 030b 	orrs.w	r3, sl, fp
 8002bce:	d04c      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002bd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bda:	d030      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002bdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002be0:	d829      	bhi.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002be2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002be4:	d02d      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002be6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002be8:	d825      	bhi.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002bea:	2b80      	cmp	r3, #128	@ 0x80
 8002bec:	d018      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002bee:	2b80      	cmp	r3, #128	@ 0x80
 8002bf0:	d821      	bhi.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002bf6:	2b40      	cmp	r3, #64	@ 0x40
 8002bf8:	d007      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002bfa:	e01c      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bfc:	4b63      	ldr	r3, [pc, #396]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c00:	4a62      	ldr	r2, [pc, #392]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002c08:	e01c      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c0e:	3308      	adds	r3, #8
 8002c10:	2100      	movs	r1, #0
 8002c12:	4618      	mov	r0, r3
 8002c14:	f001 fc26 	bl	8004464 <RCCEx_PLL2_Config>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002c1e:	e011      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c24:	3328      	adds	r3, #40	@ 0x28
 8002c26:	2100      	movs	r1, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f001 fccd 	bl	80045c8 <RCCEx_PLL3_Config>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002c34:	e006      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002c3c:	e002      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002c3e:	bf00      	nop
 8002c40:	e000      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002c42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c44:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10a      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002c4c:	4b4f      	ldr	r3, [pc, #316]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c50:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002c54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c5a:	4a4c      	ldr	r2, [pc, #304]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c60:	e003      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c66:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002c6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c72:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002c76:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002c80:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8002c84:	460b      	mov	r3, r1
 8002c86:	4313      	orrs	r3, r2
 8002c88:	d053      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002c8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002c92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c96:	d035      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002c98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c9c:	d82e      	bhi.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c9e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002ca2:	d031      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002ca4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002ca8:	d828      	bhi.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002caa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cae:	d01a      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002cb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cb4:	d822      	bhi.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002cba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cbe:	d007      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002cc0:	e01c      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cc2:	4b32      	ldr	r3, [pc, #200]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc6:	4a31      	ldr	r2, [pc, #196]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ccc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cce:	e01c      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cd4:	3308      	adds	r3, #8
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f001 fbc3 	bl	8004464 <RCCEx_PLL2_Config>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ce4:	e011      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ce6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cea:	3328      	adds	r3, #40	@ 0x28
 8002cec:	2100      	movs	r1, #0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f001 fc6a 	bl	80045c8 <RCCEx_PLL3_Config>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cfa:	e006      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002d02:	e002      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002d04:	bf00      	nop
 8002d06:	e000      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10b      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002d12:	4b1e      	ldr	r3, [pc, #120]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d16:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002d1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002d22:	4a1a      	ldr	r2, [pc, #104]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d24:	430b      	orrs	r3, r1
 8002d26:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d28:	e003      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d2a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d2e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002d32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002d3e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002d42:	2300      	movs	r3, #0
 8002d44:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002d48:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	d056      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002d52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002d5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d5e:	d038      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002d60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d64:	d831      	bhi.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d66:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d6a:	d034      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002d6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d70:	d82b      	bhi.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d76:	d01d      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002d78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d7c:	d825      	bhi.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d006      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002d82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d86:	d00a      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002d88:	e01f      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d8a:	bf00      	nop
 8002d8c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d90:	4ba2      	ldr	r3, [pc, #648]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d94:	4aa1      	ldr	r2, [pc, #644]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d9c:	e01c      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002da2:	3308      	adds	r3, #8
 8002da4:	2100      	movs	r1, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f001 fb5c 	bl	8004464 <RCCEx_PLL2_Config>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002db2:	e011      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002db4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002db8:	3328      	adds	r3, #40	@ 0x28
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 fc03 	bl	80045c8 <RCCEx_PLL3_Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002dc8:	e006      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002dd0:	e002      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002dd2:	bf00      	nop
 8002dd4:	e000      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002dd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dd8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10b      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002de0:	4b8e      	ldr	r3, [pc, #568]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002de8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002df0:	4a8a      	ldr	r2, [pc, #552]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002df2:	430b      	orrs	r3, r1
 8002df4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002df6:	e003      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002dfc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e08:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002e0c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002e10:	2300      	movs	r3, #0
 8002e12:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002e16:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	d03a      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002e20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e26:	2b30      	cmp	r3, #48	@ 0x30
 8002e28:	d01f      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002e2a:	2b30      	cmp	r3, #48	@ 0x30
 8002e2c:	d819      	bhi.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002e2e:	2b20      	cmp	r3, #32
 8002e30:	d00c      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	d815      	bhi.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d019      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002e3a:	2b10      	cmp	r3, #16
 8002e3c:	d111      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e3e:	4b77      	ldr	r3, [pc, #476]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e42:	4a76      	ldr	r2, [pc, #472]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002e4a:	e011      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e50:	3308      	adds	r3, #8
 8002e52:	2102      	movs	r1, #2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 fb05 	bl	8004464 <RCCEx_PLL2_Config>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002e60:	e006      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002e68:	e002      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002e6a:	bf00      	nop
 8002e6c:	e000      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e70:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e78:	4b68      	ldr	r3, [pc, #416]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e7c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002e80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e86:	4a65      	ldr	r2, [pc, #404]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e8c:	e003      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e8e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e92:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002e96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002ea2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002eac:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	d051      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002eb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002eba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ebc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ec0:	d035      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002ec2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ec6:	d82e      	bhi.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002ec8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ecc:	d031      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002ece:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ed2:	d828      	bhi.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002ed4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ed8:	d01a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002eda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ede:	d822      	bhi.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002ee4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ee8:	d007      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002eea:	e01c      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eec:	4b4b      	ldr	r3, [pc, #300]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef0:	4a4a      	ldr	r2, [pc, #296]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ef2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ef8:	e01c      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002efa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002efe:	3308      	adds	r3, #8
 8002f00:	2100      	movs	r1, #0
 8002f02:	4618      	mov	r0, r3
 8002f04:	f001 faae 	bl	8004464 <RCCEx_PLL2_Config>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f0e:	e011      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f14:	3328      	adds	r3, #40	@ 0x28
 8002f16:	2100      	movs	r1, #0
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f001 fb55 	bl	80045c8 <RCCEx_PLL3_Config>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f24:	e006      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002f2c:	e002      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002f2e:	bf00      	nop
 8002f30:	e000      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002f32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f34:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10a      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002f3c:	4b37      	ldr	r3, [pc, #220]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f40:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002f44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f4a:	4a34      	ldr	r2, [pc, #208]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f50:	e003      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f52:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f56:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002f5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f62:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002f66:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002f70:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4313      	orrs	r3, r2
 8002f78:	d056      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002f7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f84:	d033      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002f86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f8a:	d82c      	bhi.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f90:	d02f      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002f92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f96:	d826      	bhi.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f9c:	d02b      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002f9e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002fa2:	d820      	bhi.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002fa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fa8:	d012      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002faa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fae:	d81a      	bhi.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d022      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fb8:	d115      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fbe:	3308      	adds	r3, #8
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f001 fa4e 	bl	8004464 <RCCEx_PLL2_Config>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002fce:	e015      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fd4:	3328      	adds	r3, #40	@ 0x28
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f001 faf5 	bl	80045c8 <RCCEx_PLL3_Config>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002fe4:	e00a      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002fec:	e006      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002fee:	bf00      	nop
 8002ff0:	e004      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ff2:	bf00      	nop
 8002ff4:	e002      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ff6:	bf00      	nop
 8002ff8:	e000      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ffa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ffc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10d      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003004:	4b05      	ldr	r3, [pc, #20]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003008:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800300c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003010:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003012:	4a02      	ldr	r2, [pc, #8]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003014:	430b      	orrs	r3, r1
 8003016:	6513      	str	r3, [r2, #80]	@ 0x50
 8003018:	e006      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800301a:	bf00      	nop
 800301c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003020:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003024:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003028:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800302c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003030:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003034:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003038:	2300      	movs	r3, #0
 800303a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800303e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003042:	460b      	mov	r3, r1
 8003044:	4313      	orrs	r3, r2
 8003046:	d055      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003048:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800304c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003050:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003054:	d033      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003056:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800305a:	d82c      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800305c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003060:	d02f      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003066:	d826      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003068:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800306c:	d02b      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800306e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003072:	d820      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003074:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003078:	d012      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800307a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800307e:	d81a      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003080:	2b00      	cmp	r3, #0
 8003082:	d022      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003084:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003088:	d115      	bne.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800308a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800308e:	3308      	adds	r3, #8
 8003090:	2101      	movs	r1, #1
 8003092:	4618      	mov	r0, r3
 8003094:	f001 f9e6 	bl	8004464 <RCCEx_PLL2_Config>
 8003098:	4603      	mov	r3, r0
 800309a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800309e:	e015      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030a4:	3328      	adds	r3, #40	@ 0x28
 80030a6:	2101      	movs	r1, #1
 80030a8:	4618      	mov	r0, r3
 80030aa:	f001 fa8d 	bl	80045c8 <RCCEx_PLL3_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80030b4:	e00a      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80030bc:	e006      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80030be:	bf00      	nop
 80030c0:	e004      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80030c2:	bf00      	nop
 80030c4:	e002      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80030c6:	bf00      	nop
 80030c8:	e000      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80030ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10b      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80030d4:	4bb6      	ldr	r3, [pc, #728]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80030d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80030dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030e4:	4ab2      	ldr	r2, [pc, #712]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80030e6:	430b      	orrs	r3, r1
 80030e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80030ea:	e003      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030f0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80030f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fc:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003100:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003104:	2300      	movs	r3, #0
 8003106:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800310a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800310e:	460b      	mov	r3, r1
 8003110:	4313      	orrs	r3, r2
 8003112:	d02a      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8003114:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800311a:	2b00      	cmp	r3, #0
 800311c:	d011      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800311e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003122:	d10a      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003124:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003128:	3308      	adds	r3, #8
 800312a:	2101      	movs	r1, #1
 800312c:	4618      	mov	r0, r3
 800312e:	f001 f999 	bl	8004464 <RCCEx_PLL2_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8003138:	e004      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003140:	e000      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8003142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003144:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10a      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800314c:	4b98      	ldr	r3, [pc, #608]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800314e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003150:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8003154:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800315a:	4a95      	ldr	r2, [pc, #596]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800315c:	430b      	orrs	r3, r1
 800315e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003160:	e003      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003162:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003166:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800316a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003172:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003176:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800317a:	2300      	movs	r3, #0
 800317c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003180:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003184:	460b      	mov	r3, r1
 8003186:	4313      	orrs	r3, r2
 8003188:	d037      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800318a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800318e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003190:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003194:	d00e      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8003196:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800319a:	d816      	bhi.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x776>
 800319c:	2b00      	cmp	r3, #0
 800319e:	d018      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80031a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031a4:	d111      	bne.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031a6:	4b82      	ldr	r3, [pc, #520]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031aa:	4a81      	ldr	r2, [pc, #516]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80031b2:	e00f      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031b8:	3308      	adds	r3, #8
 80031ba:	2101      	movs	r1, #1
 80031bc:	4618      	mov	r0, r3
 80031be:	f001 f951 	bl	8004464 <RCCEx_PLL2_Config>
 80031c2:	4603      	mov	r3, r0
 80031c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80031c8:	e004      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80031d0:	e000      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80031d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10a      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031dc:	4b74      	ldr	r3, [pc, #464]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80031e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ea:	4a71      	ldr	r2, [pc, #452]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031ec:	430b      	orrs	r3, r1
 80031ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80031f0:	e003      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80031fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003202:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003206:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800320a:	2300      	movs	r3, #0
 800320c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003210:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003214:	460b      	mov	r3, r1
 8003216:	4313      	orrs	r3, r2
 8003218:	d03a      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800321a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800321e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003220:	2b03      	cmp	r3, #3
 8003222:	d81d      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8003224:	a201      	add	r2, pc, #4	@ (adr r2, 800322c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322a:	bf00      	nop
 800322c:	08003269 	.word	0x08003269
 8003230:	0800323d 	.word	0x0800323d
 8003234:	0800324b 	.word	0x0800324b
 8003238:	08003269 	.word	0x08003269
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800323c:	4b5c      	ldr	r3, [pc, #368]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800323e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003240:	4a5b      	ldr	r2, [pc, #364]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003248:	e00f      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800324a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800324e:	3308      	adds	r3, #8
 8003250:	2102      	movs	r1, #2
 8003252:	4618      	mov	r0, r3
 8003254:	f001 f906 	bl	8004464 <RCCEx_PLL2_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800325e:	e004      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003266:	e000      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8003268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800326a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10a      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003272:	4b4f      	ldr	r3, [pc, #316]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003276:	f023 0103 	bic.w	r1, r3, #3
 800327a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800327e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003280:	4a4b      	ldr	r2, [pc, #300]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003282:	430b      	orrs	r3, r1
 8003284:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003286:	e003      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003288:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800328c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003290:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003298:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800329c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032a0:	2300      	movs	r3, #0
 80032a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80032aa:	460b      	mov	r3, r1
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f000 80a0 	beq.w	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032b2:	4b40      	ldr	r3, [pc, #256]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a3f      	ldr	r2, [pc, #252]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80032b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032be:	f7fd fff5 	bl	80012ac <HAL_GetTick>
 80032c2:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032c6:	e00b      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c8:	f7fd fff0 	bl	80012ac <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b64      	cmp	r3, #100	@ 0x64
 80032d6:	d903      	bls.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80032de:	e005      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032e0:	4b34      	ldr	r3, [pc, #208]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0ed      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80032ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d17a      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80032f4:	4b2e      	ldr	r3, [pc, #184]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80032f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003300:	4053      	eors	r3, r2
 8003302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003306:	2b00      	cmp	r3, #0
 8003308:	d015      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800330a:	4b29      	ldr	r3, [pc, #164]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003312:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003316:	4b26      	ldr	r3, [pc, #152]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331a:	4a25      	ldr	r2, [pc, #148]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800331c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003320:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003322:	4b23      	ldr	r3, [pc, #140]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003326:	4a22      	ldr	r2, [pc, #136]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003328:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800332c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800332e:	4a20      	ldr	r2, [pc, #128]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003330:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003334:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003336:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800333a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800333e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003342:	d118      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7fd ffb2 	bl	80012ac <HAL_GetTick>
 8003348:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800334c:	e00d      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334e:	f7fd ffad 	bl	80012ac <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003358:	1ad2      	subs	r2, r2, r3
 800335a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800335e:	429a      	cmp	r2, r3
 8003360:	d903      	bls.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8003368:	e005      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800336a:	4b11      	ldr	r3, [pc, #68]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0eb      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8003376:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800337a:	2b00      	cmp	r3, #0
 800337c:	d130      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800337e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003382:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003386:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800338a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800338e:	d115      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x968>
 8003390:	4b07      	ldr	r3, [pc, #28]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003398:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800339c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80033a0:	091a      	lsrs	r2, r3, #4
 80033a2:	4b05      	ldr	r3, [pc, #20]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	4a02      	ldr	r2, [pc, #8]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80033a8:	430b      	orrs	r3, r1
 80033aa:	6113      	str	r3, [r2, #16]
 80033ac:	e00c      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80033ae:	bf00      	nop
 80033b0:	58024400 	.word	0x58024400
 80033b4:	58024800 	.word	0x58024800
 80033b8:	00ffffcf 	.word	0x00ffffcf
 80033bc:	4bd4      	ldr	r3, [pc, #848]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	4ad3      	ldr	r2, [pc, #844]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80033c2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80033c6:	6113      	str	r3, [r2, #16]
 80033c8:	4bd1      	ldr	r3, [pc, #836]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80033ca:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80033cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80033d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d8:	4acd      	ldr	r2, [pc, #820]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80033da:	430b      	orrs	r3, r1
 80033dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80033de:	e008      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033e4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80033e8:	e003      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033ee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80033f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fa:	f002 0301 	and.w	r3, r2, #1
 80033fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003402:	2300      	movs	r3, #0
 8003404:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003408:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800340c:	460b      	mov	r3, r1
 800340e:	4313      	orrs	r3, r2
 8003410:	f000 808b 	beq.w	800352a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003414:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003418:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800341c:	2b28      	cmp	r3, #40	@ 0x28
 800341e:	d86b      	bhi.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003420:	a201      	add	r2, pc, #4	@ (adr r2, 8003428 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003426:	bf00      	nop
 8003428:	08003501 	.word	0x08003501
 800342c:	080034f9 	.word	0x080034f9
 8003430:	080034f9 	.word	0x080034f9
 8003434:	080034f9 	.word	0x080034f9
 8003438:	080034f9 	.word	0x080034f9
 800343c:	080034f9 	.word	0x080034f9
 8003440:	080034f9 	.word	0x080034f9
 8003444:	080034f9 	.word	0x080034f9
 8003448:	080034cd 	.word	0x080034cd
 800344c:	080034f9 	.word	0x080034f9
 8003450:	080034f9 	.word	0x080034f9
 8003454:	080034f9 	.word	0x080034f9
 8003458:	080034f9 	.word	0x080034f9
 800345c:	080034f9 	.word	0x080034f9
 8003460:	080034f9 	.word	0x080034f9
 8003464:	080034f9 	.word	0x080034f9
 8003468:	080034e3 	.word	0x080034e3
 800346c:	080034f9 	.word	0x080034f9
 8003470:	080034f9 	.word	0x080034f9
 8003474:	080034f9 	.word	0x080034f9
 8003478:	080034f9 	.word	0x080034f9
 800347c:	080034f9 	.word	0x080034f9
 8003480:	080034f9 	.word	0x080034f9
 8003484:	080034f9 	.word	0x080034f9
 8003488:	08003501 	.word	0x08003501
 800348c:	080034f9 	.word	0x080034f9
 8003490:	080034f9 	.word	0x080034f9
 8003494:	080034f9 	.word	0x080034f9
 8003498:	080034f9 	.word	0x080034f9
 800349c:	080034f9 	.word	0x080034f9
 80034a0:	080034f9 	.word	0x080034f9
 80034a4:	080034f9 	.word	0x080034f9
 80034a8:	08003501 	.word	0x08003501
 80034ac:	080034f9 	.word	0x080034f9
 80034b0:	080034f9 	.word	0x080034f9
 80034b4:	080034f9 	.word	0x080034f9
 80034b8:	080034f9 	.word	0x080034f9
 80034bc:	080034f9 	.word	0x080034f9
 80034c0:	080034f9 	.word	0x080034f9
 80034c4:	080034f9 	.word	0x080034f9
 80034c8:	08003501 	.word	0x08003501
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034d0:	3308      	adds	r3, #8
 80034d2:	2101      	movs	r1, #1
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 ffc5 	bl	8004464 <RCCEx_PLL2_Config>
 80034da:	4603      	mov	r3, r0
 80034dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80034e0:	e00f      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034e6:	3328      	adds	r3, #40	@ 0x28
 80034e8:	2101      	movs	r1, #1
 80034ea:	4618      	mov	r0, r3
 80034ec:	f001 f86c 	bl	80045c8 <RCCEx_PLL3_Config>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80034f6:	e004      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80034fe:	e000      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8003500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003502:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10b      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800350a:	4b81      	ldr	r3, [pc, #516]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800350c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003512:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800351a:	4a7d      	ldr	r2, [pc, #500]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800351c:	430b      	orrs	r3, r1
 800351e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003520:	e003      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003522:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003526:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800352a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800352e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003532:	f002 0302 	and.w	r3, r2, #2
 8003536:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800353a:	2300      	movs	r3, #0
 800353c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003540:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003544:	460b      	mov	r3, r1
 8003546:	4313      	orrs	r3, r2
 8003548:	d042      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800354a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800354e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003550:	2b05      	cmp	r3, #5
 8003552:	d825      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8003554:	a201      	add	r2, pc, #4	@ (adr r2, 800355c <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8003556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355a:	bf00      	nop
 800355c:	080035a9 	.word	0x080035a9
 8003560:	08003575 	.word	0x08003575
 8003564:	0800358b 	.word	0x0800358b
 8003568:	080035a9 	.word	0x080035a9
 800356c:	080035a9 	.word	0x080035a9
 8003570:	080035a9 	.word	0x080035a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003574:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003578:	3308      	adds	r3, #8
 800357a:	2101      	movs	r1, #1
 800357c:	4618      	mov	r0, r3
 800357e:	f000 ff71 	bl	8004464 <RCCEx_PLL2_Config>
 8003582:	4603      	mov	r3, r0
 8003584:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003588:	e00f      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800358a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800358e:	3328      	adds	r3, #40	@ 0x28
 8003590:	2101      	movs	r1, #1
 8003592:	4618      	mov	r0, r3
 8003594:	f001 f818 	bl	80045c8 <RCCEx_PLL3_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800359e:	e004      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80035a6:	e000      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 80035a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80035b2:	4b57      	ldr	r3, [pc, #348]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80035b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b6:	f023 0107 	bic.w	r1, r3, #7
 80035ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035c0:	4a53      	ldr	r2, [pc, #332]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80035c2:	430b      	orrs	r3, r1
 80035c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80035c6:	e003      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035cc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d8:	f002 0304 	and.w	r3, r2, #4
 80035dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035e0:	2300      	movs	r3, #0
 80035e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4313      	orrs	r3, r2
 80035ee:	d044      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80035f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035f8:	2b05      	cmp	r3, #5
 80035fa:	d825      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80035fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003604 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80035fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003602:	bf00      	nop
 8003604:	08003651 	.word	0x08003651
 8003608:	0800361d 	.word	0x0800361d
 800360c:	08003633 	.word	0x08003633
 8003610:	08003651 	.word	0x08003651
 8003614:	08003651 	.word	0x08003651
 8003618:	08003651 	.word	0x08003651
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800361c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003620:	3308      	adds	r3, #8
 8003622:	2101      	movs	r1, #1
 8003624:	4618      	mov	r0, r3
 8003626:	f000 ff1d 	bl	8004464 <RCCEx_PLL2_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003630:	e00f      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003632:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003636:	3328      	adds	r3, #40	@ 0x28
 8003638:	2101      	movs	r1, #1
 800363a:	4618      	mov	r0, r3
 800363c:	f000 ffc4 	bl	80045c8 <RCCEx_PLL3_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003646:	e004      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800364e:	e000      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8003650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003652:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10b      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800365a:	4b2d      	ldr	r3, [pc, #180]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800365c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800365e:	f023 0107 	bic.w	r1, r3, #7
 8003662:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003666:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800366a:	4a29      	ldr	r2, [pc, #164]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800366c:	430b      	orrs	r3, r1
 800366e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003670:	e003      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003672:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003676:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800367a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800367e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003682:	f002 0320 	and.w	r3, r2, #32
 8003686:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800368a:	2300      	movs	r3, #0
 800368c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003690:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003694:	460b      	mov	r3, r1
 8003696:	4313      	orrs	r3, r2
 8003698:	d057      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800369a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800369e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036a6:	d035      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 80036a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036ac:	d82c      	bhi.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80036ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b2:	d031      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 80036b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b8:	d826      	bhi.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80036ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036be:	d02d      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80036c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036c4:	d820      	bhi.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80036c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036ca:	d012      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 80036cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036d0:	d81a      	bhi.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d024      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80036d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036da:	d115      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036e0:	3308      	adds	r3, #8
 80036e2:	2100      	movs	r1, #0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 febd 	bl	8004464 <RCCEx_PLL2_Config>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80036f0:	e017      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036f6:	3328      	adds	r3, #40	@ 0x28
 80036f8:	2102      	movs	r1, #2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 ff64 	bl	80045c8 <RCCEx_PLL3_Config>
 8003700:	4603      	mov	r3, r0
 8003702:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003706:	e00c      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800370e:	e008      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8003710:	58024400 	.word	0x58024400
        break;
 8003714:	bf00      	nop
 8003716:	e004      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003718:	bf00      	nop
 800371a:	e002      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800371c:	bf00      	nop
 800371e:	e000      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003722:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10b      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800372a:	4bc2      	ldr	r3, [pc, #776]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800372c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800372e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003732:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800373a:	4abe      	ldr	r2, [pc, #760]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800373c:	430b      	orrs	r3, r1
 800373e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003740:	e003      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003742:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003746:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800374a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003752:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003756:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800375a:	2300      	movs	r3, #0
 800375c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003760:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003764:	460b      	mov	r3, r1
 8003766:	4313      	orrs	r3, r2
 8003768:	d055      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800376a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800376e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003772:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003776:	d033      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8003778:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800377c:	d82c      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800377e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003782:	d02f      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8003784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003788:	d826      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800378a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800378e:	d02b      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8003790:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003794:	d820      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003796:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800379a:	d012      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 800379c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037a0:	d81a      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d022      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xd98>
 80037a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037aa:	d115      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037b0:	3308      	adds	r3, #8
 80037b2:	2100      	movs	r1, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fe55 	bl	8004464 <RCCEx_PLL2_Config>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80037c0:	e015      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037c6:	3328      	adds	r3, #40	@ 0x28
 80037c8:	2102      	movs	r1, #2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fefc 	bl	80045c8 <RCCEx_PLL3_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80037d6:	e00a      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80037de:	e006      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80037e0:	bf00      	nop
 80037e2:	e004      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80037e4:	bf00      	nop
 80037e6:	e002      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80037e8:	bf00      	nop
 80037ea:	e000      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80037ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10b      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037f6:	4b8f      	ldr	r3, [pc, #572]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80037f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80037fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003802:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003806:	4a8b      	ldr	r2, [pc, #556]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003808:	430b      	orrs	r3, r1
 800380a:	6593      	str	r3, [r2, #88]	@ 0x58
 800380c:	e003      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003812:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003816:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800381a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381e:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003822:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003826:	2300      	movs	r3, #0
 8003828:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800382c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003830:	460b      	mov	r3, r1
 8003832:	4313      	orrs	r3, r2
 8003834:	d055      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003836:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800383a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800383e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003842:	d033      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003844:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003848:	d82c      	bhi.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800384a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800384e:	d02f      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003850:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003854:	d826      	bhi.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003856:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800385a:	d02b      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800385c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003860:	d820      	bhi.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003862:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003866:	d012      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8003868:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800386c:	d81a      	bhi.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d022      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8003872:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003876:	d115      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003878:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800387c:	3308      	adds	r3, #8
 800387e:	2100      	movs	r1, #0
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fdef 	bl	8004464 <RCCEx_PLL2_Config>
 8003886:	4603      	mov	r3, r0
 8003888:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800388c:	e015      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800388e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003892:	3328      	adds	r3, #40	@ 0x28
 8003894:	2102      	movs	r1, #2
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fe96 	bl	80045c8 <RCCEx_PLL3_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80038a2:	e00a      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80038aa:	e006      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80038ac:	bf00      	nop
 80038ae:	e004      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80038b0:	bf00      	nop
 80038b2:	e002      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80038b4:	bf00      	nop
 80038b6:	e000      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80038b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10b      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80038c2:	4b5c      	ldr	r3, [pc, #368]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c6:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80038ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80038d2:	4a58      	ldr	r2, [pc, #352]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038d4:	430b      	orrs	r3, r1
 80038d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80038d8:	e003      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80038e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ea:	f002 0308 	and.w	r3, r2, #8
 80038ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80038f2:	2300      	movs	r3, #0
 80038f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80038f8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80038fc:	460b      	mov	r3, r1
 80038fe:	4313      	orrs	r3, r2
 8003900:	d01e      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003902:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800390e:	d10c      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003910:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003914:	3328      	adds	r3, #40	@ 0x28
 8003916:	2102      	movs	r1, #2
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fe55 	bl	80045c8 <RCCEx_PLL3_Config>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800392a:	4b42      	ldr	r3, [pc, #264]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800392c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800392e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003932:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800393a:	4a3e      	ldr	r2, [pc, #248]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800393c:	430b      	orrs	r3, r1
 800393e:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003940:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	f002 0310 	and.w	r3, r2, #16
 800394c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003950:	2300      	movs	r3, #0
 8003952:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003956:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800395a:	460b      	mov	r3, r1
 800395c:	4313      	orrs	r3, r2
 800395e:	d01e      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003960:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003964:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003968:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800396c:	d10c      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800396e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003972:	3328      	adds	r3, #40	@ 0x28
 8003974:	2102      	movs	r1, #2
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fe26 	bl	80045c8 <RCCEx_PLL3_Config>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003988:	4b2a      	ldr	r3, [pc, #168]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800398a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003990:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003994:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003998:	4a26      	ldr	r2, [pc, #152]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800399a:	430b      	orrs	r3, r1
 800399c:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800399e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80039aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039ae:	2300      	movs	r3, #0
 80039b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039b4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80039b8:	460b      	mov	r3, r1
 80039ba:	4313      	orrs	r3, r2
 80039bc:	d040      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80039be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039ca:	d022      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80039cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039d0:	d81b      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80039d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039da:	d00b      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80039dc:	e015      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039e2:	3308      	adds	r3, #8
 80039e4:	2100      	movs	r1, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fd3c 	bl	8004464 <RCCEx_PLL2_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80039f2:	e00f      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039f8:	3328      	adds	r3, #40	@ 0x28
 80039fa:	2102      	movs	r1, #2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fde3 	bl	80045c8 <RCCEx_PLL3_Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a08:	e004      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003a10:	e000      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8003a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10d      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a1c:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a20:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003a24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a2c:	4a01      	ldr	r2, [pc, #4]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a32:	e005      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003a34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a38:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a3c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a48:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003a4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a4e:	2300      	movs	r3, #0
 8003a50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a52:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003a56:	460b      	mov	r3, r1
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	d03b      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003a5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a68:	d01f      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8003a6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a6e:	d818      	bhi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003a70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a74:	d003      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8003a76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a7a:	d007      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003a7c:	e011      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a7e:	4b64      	ldr	r3, [pc, #400]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a82:	4a63      	ldr	r2, [pc, #396]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003a8a:	e00f      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a90:	3328      	adds	r3, #40	@ 0x28
 8003a92:	2101      	movs	r1, #1
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fd97 	bl	80045c8 <RCCEx_PLL3_Config>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003aa0:	e004      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003aa8:	e000      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8003aaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10b      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ab4:	4b56      	ldr	r3, [pc, #344]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003abc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ac4:	4a52      	ldr	r2, [pc, #328]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003ac6:	430b      	orrs	r3, r1
 8003ac8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003aca:	e003      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003acc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ad0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ad4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003adc:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003ae0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ae6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003aea:	460b      	mov	r3, r1
 8003aec:	4313      	orrs	r3, r2
 8003aee:	d031      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003af0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8003afa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003afe:	d007      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003b00:	e011      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b02:	4b43      	ldr	r3, [pc, #268]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b06:	4a42      	ldr	r2, [pc, #264]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b0e:	e00e      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b14:	3308      	adds	r3, #8
 8003b16:	2102      	movs	r1, #2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fca3 	bl	8004464 <RCCEx_PLL2_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b24:	e003      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10a      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003b36:	4b36      	ldr	r3, [pc, #216]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b44:	4a32      	ldr	r2, [pc, #200]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b46:	430b      	orrs	r3, r1
 8003b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b4a:	e003      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b50:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003b60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b62:	2300      	movs	r3, #0
 8003b64:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b66:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	d00c      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b74:	3328      	adds	r3, #40	@ 0x28
 8003b76:	2102      	movs	r1, #2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fd25 	bl	80045c8 <RCCEx_PLL3_Config>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003b8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003b96:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b98:	2300      	movs	r3, #0
 8003b9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b9c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	d03a      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003ba6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bb2:	d018      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003bb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bb8:	d811      	bhi.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003bba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bbe:	d014      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc4:	d80b      	bhi.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d011      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8003bca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bce:	d106      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd4:	4a0e      	ldr	r2, [pc, #56]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003be4:	e004      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003be6:	bf00      	nop
 8003be8:	e002      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003bea:	bf00      	nop
 8003bec:	e000      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bf0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10d      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bf8:	4b05      	ldr	r3, [pc, #20]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bfc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c08:	4a01      	ldr	r2, [pc, #4]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003c0a:	430b      	orrs	r3, r1
 8003c0c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c0e:	e005      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8003c10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c18:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003c28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c2e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003c32:	460b      	mov	r3, r1
 8003c34:	4313      	orrs	r3, r2
 8003c36:	d009      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c38:	4baa      	ldr	r3, [pc, #680]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c3c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003c40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c46:	4aa7      	ldr	r2, [pc, #668]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003c4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c54:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003c58:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c5e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003c62:	460b      	mov	r3, r1
 8003c64:	4313      	orrs	r3, r2
 8003c66:	d00a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003c68:	4b9e      	ldr	r3, [pc, #632]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003c70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c74:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003c78:	4a9a      	ldr	r2, [pc, #616]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c7a:	430b      	orrs	r3, r1
 8003c7c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c90:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003c94:	460b      	mov	r3, r1
 8003c96:	4313      	orrs	r3, r2
 8003c98:	d009      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c9a:	4b92      	ldr	r3, [pc, #584]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c9e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003ca2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca8:	4a8e      	ldr	r2, [pc, #568]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003caa:	430b      	orrs	r3, r1
 8003cac:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003cae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003cba:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cc0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	d00e      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cca:	4b86      	ldr	r3, [pc, #536]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	4a85      	ldr	r2, [pc, #532]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003cd0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003cd4:	6113      	str	r3, [r2, #16]
 8003cd6:	4b83      	ldr	r3, [pc, #524]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003cd8:	6919      	ldr	r1, [r3, #16]
 8003cda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cde:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003ce2:	4a80      	ldr	r2, [pc, #512]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ce8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cfa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4313      	orrs	r3, r2
 8003d02:	d009      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003d04:	4b77      	ldr	r3, [pc, #476]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d08:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003d0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d12:	4a74      	ldr	r2, [pc, #464]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d14:	430b      	orrs	r3, r1
 8003d16:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d20:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003d24:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d26:	2300      	movs	r3, #0
 8003d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d2a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4313      	orrs	r3, r2
 8003d32:	d00a      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d34:	4b6b      	ldr	r3, [pc, #428]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d38:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003d3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d44:	4a67      	ldr	r2, [pc, #412]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d46:	430b      	orrs	r3, r1
 8003d48:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003d4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	2100      	movs	r1, #0
 8003d54:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d5c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003d60:	460b      	mov	r3, r1
 8003d62:	4313      	orrs	r3, r2
 8003d64:	d011      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fb78 	bl	8004464 <RCCEx_PLL2_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003d7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d86:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003d8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d92:	2100      	movs	r1, #0
 8003d94:	6239      	str	r1, [r7, #32]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d9c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003da0:	460b      	mov	r3, r1
 8003da2:	4313      	orrs	r3, r2
 8003da4:	d011      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003da6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003daa:	3308      	adds	r3, #8
 8003dac:	2101      	movs	r1, #1
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fb58 	bl	8004464 <RCCEx_PLL2_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003dba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003dc6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003dca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	61b9      	str	r1, [r7, #24]
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	61fb      	str	r3, [r7, #28]
 8003ddc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003de0:	460b      	mov	r3, r1
 8003de2:	4313      	orrs	r3, r2
 8003de4:	d011      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003de6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dea:	3308      	adds	r3, #8
 8003dec:	2102      	movs	r1, #2
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fb38 	bl	8004464 <RCCEx_PLL2_Config>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003dfa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e06:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003e0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e12:	2100      	movs	r1, #0
 8003e14:	6139      	str	r1, [r7, #16]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003e20:	460b      	mov	r3, r1
 8003e22:	4313      	orrs	r3, r2
 8003e24:	d011      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e2a:	3328      	adds	r3, #40	@ 0x28
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fbca 	bl	80045c8 <RCCEx_PLL3_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8003e3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e42:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e46:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003e4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e52:	2100      	movs	r1, #0
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	f003 0310 	and.w	r3, r3, #16
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e60:	460b      	mov	r3, r1
 8003e62:	4313      	orrs	r3, r2
 8003e64:	d011      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e6a:	3328      	adds	r3, #40	@ 0x28
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fbaa 	bl	80045c8 <RCCEx_PLL3_Config>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003e7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e86:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003e8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e92:	2100      	movs	r1, #0
 8003e94:	6039      	str	r1, [r7, #0]
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	607b      	str	r3, [r7, #4]
 8003e9c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	d011      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ea6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003eaa:	3328      	adds	r3, #40	@ 0x28
 8003eac:	2102      	movs	r1, #2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fb8a 	bl	80045c8 <RCCEx_PLL3_Config>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003eba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ec6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8003eca:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e000      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ee4:	58024400 	.word	0x58024400

08003ee8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003eec:	f7fe fd14 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	4b06      	ldr	r3, [pc, #24]	@ (8003f0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	091b      	lsrs	r3, r3, #4
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	4904      	ldr	r1, [pc, #16]	@ (8003f10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003efe:	5ccb      	ldrb	r3, [r1, r3]
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	58024400 	.word	0x58024400
 8003f10:	08008bcc 	.word	0x08008bcc

08003f14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b089      	sub	sp, #36	@ 0x24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f1c:	4ba1      	ldr	r3, [pc, #644]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003f26:	4b9f      	ldr	r3, [pc, #636]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2a:	0b1b      	lsrs	r3, r3, #12
 8003f2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003f32:	4b9c      	ldr	r3, [pc, #624]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f36:	091b      	lsrs	r3, r3, #4
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003f3e:	4b99      	ldr	r3, [pc, #612]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f42:	08db      	lsrs	r3, r3, #3
 8003f44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 8111 	beq.w	8004184 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	f000 8083 	beq.w	8004070 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	f200 80a1 	bhi.w	80040b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d056      	beq.n	800402c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003f7e:	e099      	b.n	80040b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f80:	4b88      	ldr	r3, [pc, #544]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d02d      	beq.n	8003fe8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f8c:	4b85      	ldr	r3, [pc, #532]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	08db      	lsrs	r3, r3, #3
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	4a84      	ldr	r2, [pc, #528]	@ (80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003f98:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	ee07 3a90 	vmov	s15, r3
 8003fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	ee07 3a90 	vmov	s15, r3
 8003fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fb6:	4b7b      	ldr	r3, [pc, #492]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80041ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003fe6:	e087      	b.n	80040f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	ee07 3a90 	vmov	s15, r3
 8003fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ffa:	4b6a      	ldr	r3, [pc, #424]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004002:	ee07 3a90 	vmov	s15, r3
 8004006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800400a:	ed97 6a03 	vldr	s12, [r7, #12]
 800400e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80041ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800401a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800401e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004026:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800402a:	e065      	b.n	80040f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	ee07 3a90 	vmov	s15, r3
 8004032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004036:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80041b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800403a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800403e:	4b59      	ldr	r3, [pc, #356]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004046:	ee07 3a90 	vmov	s15, r3
 800404a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800404e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004052:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80041ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800405a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800405e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800406e:	e043      	b.n	80040f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	ee07 3a90 	vmov	s15, r3
 8004076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800407a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80041b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800407e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004082:	4b48      	ldr	r3, [pc, #288]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408a:	ee07 3a90 	vmov	s15, r3
 800408e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004092:	ed97 6a03 	vldr	s12, [r7, #12]
 8004096:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80041ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800409a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800409e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040b2:	e021      	b.n	80040f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	ee07 3a90 	vmov	s15, r3
 80040ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80041b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80040c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040c6:	4b37      	ldr	r3, [pc, #220]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80040da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80041ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80040f8:	4b2a      	ldr	r3, [pc, #168]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fc:	0a5b      	lsrs	r3, r3, #9
 80040fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004102:	ee07 3a90 	vmov	s15, r3
 8004106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800410e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004112:	edd7 6a07 	vldr	s13, [r7, #28]
 8004116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800411a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800411e:	ee17 2a90 	vmov	r2, s15
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004126:	4b1f      	ldr	r3, [pc, #124]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412a:	0c1b      	lsrs	r3, r3, #16
 800412c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004130:	ee07 3a90 	vmov	s15, r3
 8004134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004138:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800413c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004140:	edd7 6a07 	vldr	s13, [r7, #28]
 8004144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800414c:	ee17 2a90 	vmov	r2, s15
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004154:	4b13      	ldr	r3, [pc, #76]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004158:	0e1b      	lsrs	r3, r3, #24
 800415a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800415e:	ee07 3a90 	vmov	s15, r3
 8004162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004166:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800416a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800416e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004172:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800417a:	ee17 2a90 	vmov	r2, s15
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004182:	e008      	b.n	8004196 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	609a      	str	r2, [r3, #8]
}
 8004196:	bf00      	nop
 8004198:	3724      	adds	r7, #36	@ 0x24
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	58024400 	.word	0x58024400
 80041a8:	03d09000 	.word	0x03d09000
 80041ac:	46000000 	.word	0x46000000
 80041b0:	4c742400 	.word	0x4c742400
 80041b4:	4a742400 	.word	0x4a742400
 80041b8:	4bbebc20 	.word	0x4bbebc20

080041bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80041bc:	b480      	push	{r7}
 80041be:	b089      	sub	sp, #36	@ 0x24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041c4:	4ba1      	ldr	r3, [pc, #644]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80041ce:	4b9f      	ldr	r3, [pc, #636]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d2:	0d1b      	lsrs	r3, r3, #20
 80041d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80041da:	4b9c      	ldr	r3, [pc, #624]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041de:	0a1b      	lsrs	r3, r3, #8
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80041e6:	4b99      	ldr	r3, [pc, #612]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ea:	08db      	lsrs	r3, r3, #3
 80041ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	fb02 f303 	mul.w	r3, r2, r3
 80041f6:	ee07 3a90 	vmov	s15, r3
 80041fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 8111 	beq.w	800442c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b02      	cmp	r3, #2
 800420e:	f000 8083 	beq.w	8004318 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b02      	cmp	r3, #2
 8004216:	f200 80a1 	bhi.w	800435c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d056      	beq.n	80042d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004226:	e099      	b.n	800435c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004228:	4b88      	ldr	r3, [pc, #544]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0320 	and.w	r3, r3, #32
 8004230:	2b00      	cmp	r3, #0
 8004232:	d02d      	beq.n	8004290 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004234:	4b85      	ldr	r3, [pc, #532]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	08db      	lsrs	r3, r3, #3
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	4a84      	ldr	r2, [pc, #528]	@ (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
 8004244:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	ee07 3a90 	vmov	s15, r3
 800424c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	ee07 3a90 	vmov	s15, r3
 8004256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800425e:	4b7b      	ldr	r3, [pc, #492]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004266:	ee07 3a90 	vmov	s15, r3
 800426a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800426e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004272:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004454 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800427a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800427e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800428a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800428e:	e087      	b.n	80043a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	ee07 3a90 	vmov	s15, r3
 8004296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800429e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042a2:	4b6a      	ldr	r3, [pc, #424]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042aa:	ee07 3a90 	vmov	s15, r3
 80042ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80042b6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004454 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042d2:	e065      	b.n	80043a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	ee07 3a90 	vmov	s15, r3
 80042da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042de:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800445c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80042e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042e6:	4b59      	ldr	r3, [pc, #356]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80042fa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004454 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800430a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800430e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004312:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004316:	e043      	b.n	80043a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	ee07 3a90 	vmov	s15, r3
 800431e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004322:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004460 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800432a:	4b48      	ldr	r3, [pc, #288]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004332:	ee07 3a90 	vmov	s15, r3
 8004336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800433a:	ed97 6a03 	vldr	s12, [r7, #12]
 800433e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004454 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800434a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800434e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004356:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800435a:	e021      	b.n	80043a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	ee07 3a90 	vmov	s15, r3
 8004362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004366:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800445c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800436a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800436e:	4b37      	ldr	r3, [pc, #220]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004376:	ee07 3a90 	vmov	s15, r3
 800437a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800437e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004382:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004454 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800438a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800438e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800439e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80043a0:	4b2a      	ldr	r3, [pc, #168]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a4:	0a5b      	lsrs	r3, r3, #9
 80043a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80043be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043c6:	ee17 2a90 	vmov	r2, s15
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80043ce:	4b1f      	ldr	r3, [pc, #124]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d2:	0c1b      	lsrs	r3, r3, #16
 80043d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043d8:	ee07 3a90 	vmov	s15, r3
 80043dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80043ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043f4:	ee17 2a90 	vmov	r2, s15
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80043fc:	4b13      	ldr	r3, [pc, #76]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004400:	0e1b      	lsrs	r3, r3, #24
 8004402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004406:	ee07 3a90 	vmov	s15, r3
 800440a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004412:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004416:	edd7 6a07 	vldr	s13, [r7, #28]
 800441a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800441e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004422:	ee17 2a90 	vmov	r2, s15
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800442a:	e008      	b.n	800443e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	609a      	str	r2, [r3, #8]
}
 800443e:	bf00      	nop
 8004440:	3724      	adds	r7, #36	@ 0x24
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	58024400 	.word	0x58024400
 8004450:	03d09000 	.word	0x03d09000
 8004454:	46000000 	.word	0x46000000
 8004458:	4c742400 	.word	0x4c742400
 800445c:	4a742400 	.word	0x4a742400
 8004460:	4bbebc20 	.word	0x4bbebc20

08004464 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004472:	4b53      	ldr	r3, [pc, #332]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	2b03      	cmp	r3, #3
 800447c:	d101      	bne.n	8004482 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e099      	b.n	80045b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004482:	4b4f      	ldr	r3, [pc, #316]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a4e      	ldr	r2, [pc, #312]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004488:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800448c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800448e:	f7fc ff0d 	bl	80012ac <HAL_GetTick>
 8004492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004494:	e008      	b.n	80044a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004496:	f7fc ff09 	bl	80012ac <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e086      	b.n	80045b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044a8:	4b45      	ldr	r3, [pc, #276]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1f0      	bne.n	8004496 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80044b4:	4b42      	ldr	r3, [pc, #264]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 80044b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	031b      	lsls	r3, r3, #12
 80044c2:	493f      	ldr	r1, [pc, #252]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	3b01      	subs	r3, #1
 80044ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	025b      	lsls	r3, r3, #9
 80044da:	b29b      	uxth	r3, r3
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	041b      	lsls	r3, r3, #16
 80044e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	061b      	lsls	r3, r3, #24
 80044f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80044f8:	4931      	ldr	r1, [pc, #196]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80044fe:	4b30      	ldr	r3, [pc, #192]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004502:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	492d      	ldr	r1, [pc, #180]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 800450c:	4313      	orrs	r3, r2
 800450e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004510:	4b2b      	ldr	r3, [pc, #172]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004514:	f023 0220 	bic.w	r2, r3, #32
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	4928      	ldr	r1, [pc, #160]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 800451e:	4313      	orrs	r3, r2
 8004520:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004522:	4b27      	ldr	r3, [pc, #156]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004526:	4a26      	ldr	r2, [pc, #152]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004528:	f023 0310 	bic.w	r3, r3, #16
 800452c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800452e:	4b24      	ldr	r3, [pc, #144]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004530:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004532:	4b24      	ldr	r3, [pc, #144]	@ (80045c4 <RCCEx_PLL2_Config+0x160>)
 8004534:	4013      	ands	r3, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	69d2      	ldr	r2, [r2, #28]
 800453a:	00d2      	lsls	r2, r2, #3
 800453c:	4920      	ldr	r1, [pc, #128]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 800453e:	4313      	orrs	r3, r2
 8004540:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004542:	4b1f      	ldr	r3, [pc, #124]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004546:	4a1e      	ldr	r2, [pc, #120]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004548:	f043 0310 	orr.w	r3, r3, #16
 800454c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d106      	bne.n	8004562 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004554:	4b1a      	ldr	r3, [pc, #104]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004558:	4a19      	ldr	r2, [pc, #100]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 800455a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800455e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004560:	e00f      	b.n	8004582 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d106      	bne.n	8004576 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004568:	4b15      	ldr	r3, [pc, #84]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 800456a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456c:	4a14      	ldr	r2, [pc, #80]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 800456e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004572:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004574:	e005      	b.n	8004582 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004576:	4b12      	ldr	r3, [pc, #72]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457a:	4a11      	ldr	r2, [pc, #68]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 800457c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004580:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004582:	4b0f      	ldr	r3, [pc, #60]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a0e      	ldr	r2, [pc, #56]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004588:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800458c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800458e:	f7fc fe8d 	bl	80012ac <HAL_GetTick>
 8004592:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004594:	e008      	b.n	80045a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004596:	f7fc fe89 	bl	80012ac <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e006      	b.n	80045b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045a8:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0f0      	beq.n	8004596 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	58024400 	.word	0x58024400
 80045c4:	ffff0007 	.word	0xffff0007

080045c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045d6:	4b53      	ldr	r3, [pc, #332]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80045d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d101      	bne.n	80045e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e099      	b.n	800471a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80045e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a4e      	ldr	r2, [pc, #312]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80045ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f2:	f7fc fe5b 	bl	80012ac <HAL_GetTick>
 80045f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045f8:	e008      	b.n	800460c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80045fa:	f7fc fe57 	bl	80012ac <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e086      	b.n	800471a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800460c:	4b45      	ldr	r3, [pc, #276]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f0      	bne.n	80045fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004618:	4b42      	ldr	r3, [pc, #264]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 800461a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	051b      	lsls	r3, r3, #20
 8004626:	493f      	ldr	r1, [pc, #252]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 8004628:	4313      	orrs	r3, r2
 800462a:	628b      	str	r3, [r1, #40]	@ 0x28
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	3b01      	subs	r3, #1
 8004632:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	3b01      	subs	r3, #1
 800463c:	025b      	lsls	r3, r3, #9
 800463e:	b29b      	uxth	r3, r3
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	3b01      	subs	r3, #1
 8004648:	041b      	lsls	r3, r3, #16
 800464a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	3b01      	subs	r3, #1
 8004656:	061b      	lsls	r3, r3, #24
 8004658:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800465c:	4931      	ldr	r1, [pc, #196]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 800465e:	4313      	orrs	r3, r2
 8004660:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004662:	4b30      	ldr	r3, [pc, #192]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 8004664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004666:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	492d      	ldr	r1, [pc, #180]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 8004670:	4313      	orrs	r3, r2
 8004672:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004674:	4b2b      	ldr	r3, [pc, #172]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 8004676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004678:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	4928      	ldr	r1, [pc, #160]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 8004682:	4313      	orrs	r3, r2
 8004684:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004686:	4b27      	ldr	r3, [pc, #156]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 8004688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468a:	4a26      	ldr	r2, [pc, #152]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 800468c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004690:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004692:	4b24      	ldr	r3, [pc, #144]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 8004694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004696:	4b24      	ldr	r3, [pc, #144]	@ (8004728 <RCCEx_PLL3_Config+0x160>)
 8004698:	4013      	ands	r3, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	69d2      	ldr	r2, [r2, #28]
 800469e:	00d2      	lsls	r2, r2, #3
 80046a0:	4920      	ldr	r1, [pc, #128]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80046a6:	4b1f      	ldr	r3, [pc, #124]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d106      	bne.n	80046c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80046b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046bc:	4a19      	ldr	r2, [pc, #100]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80046c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80046c4:	e00f      	b.n	80046e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d106      	bne.n	80046da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80046cc:	4b15      	ldr	r3, [pc, #84]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d0:	4a14      	ldr	r2, [pc, #80]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80046d8:	e005      	b.n	80046e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80046da:	4b12      	ldr	r3, [pc, #72]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046de:	4a11      	ldr	r2, [pc, #68]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80046e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f2:	f7fc fddb 	bl	80012ac <HAL_GetTick>
 80046f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046f8:	e008      	b.n	800470c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80046fa:	f7fc fdd7 	bl	80012ac <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e006      	b.n	800471a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800470c:	4b05      	ldr	r3, [pc, #20]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0f0      	beq.n	80046fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004718:	7bfb      	ldrb	r3, [r7, #15]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	58024400 	.word	0x58024400
 8004728:	ffff0007 	.word	0xffff0007

0800472c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e049      	b.n	80047d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f841 	bl	80047da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3304      	adds	r3, #4
 8004768:	4619      	mov	r1, r3
 800476a:	4610      	mov	r0, r2
 800476c:	f000 f9e8 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
	...

080047f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b01      	cmp	r3, #1
 8004802:	d001      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e054      	b.n	80048b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0201 	orr.w	r2, r2, #1
 800481e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a26      	ldr	r2, [pc, #152]	@ (80048c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d022      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x80>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004832:	d01d      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x80>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a22      	ldr	r2, [pc, #136]	@ (80048c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d018      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x80>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a21      	ldr	r2, [pc, #132]	@ (80048c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d013      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x80>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1f      	ldr	r2, [pc, #124]	@ (80048cc <HAL_TIM_Base_Start_IT+0xdc>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00e      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x80>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1e      	ldr	r2, [pc, #120]	@ (80048d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d009      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x80>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1c      	ldr	r2, [pc, #112]	@ (80048d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d004      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x80>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1b      	ldr	r2, [pc, #108]	@ (80048d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d115      	bne.n	800489c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	4b19      	ldr	r3, [pc, #100]	@ (80048dc <HAL_TIM_Base_Start_IT+0xec>)
 8004878:	4013      	ands	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b06      	cmp	r3, #6
 8004880:	d015      	beq.n	80048ae <HAL_TIM_Base_Start_IT+0xbe>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004888:	d011      	beq.n	80048ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 0201 	orr.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489a:	e008      	b.n	80048ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	e000      	b.n	80048b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40010000 	.word	0x40010000
 80048c4:	40000400 	.word	0x40000400
 80048c8:	40000800 	.word	0x40000800
 80048cc:	40000c00 	.word	0x40000c00
 80048d0:	40010400 	.word	0x40010400
 80048d4:	40001800 	.word	0x40001800
 80048d8:	40014000 	.word	0x40014000
 80048dc:	00010007 	.word	0x00010007

080048e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d020      	beq.n	8004944 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01b      	beq.n	8004944 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0202 	mvn.w	r2, #2
 8004914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f8e9 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 8004930:	e005      	b.n	800493e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f8db 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f8ec 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	d020      	beq.n	8004990 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01b      	beq.n	8004990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0204 	mvn.w	r2, #4
 8004960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2202      	movs	r2, #2
 8004966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f8c3 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 800497c:	e005      	b.n	800498a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f8b5 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f8c6 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d020      	beq.n	80049dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01b      	beq.n	80049dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0208 	mvn.w	r2, #8
 80049ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2204      	movs	r2, #4
 80049b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f89d 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 80049c8:	e005      	b.n	80049d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f88f 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f8a0 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f003 0310 	and.w	r3, r3, #16
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d020      	beq.n	8004a28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01b      	beq.n	8004a28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0210 	mvn.w	r2, #16
 80049f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2208      	movs	r2, #8
 80049fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f877 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 8004a14:	e005      	b.n	8004a22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f869 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f87a 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00c      	beq.n	8004a4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d007      	beq.n	8004a4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f06f 0201 	mvn.w	r2, #1
 8004a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fc fa7a 	bl	8000f40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d104      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00c      	beq.n	8004a7a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d007      	beq.n	8004a7a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f90d 	bl	8004c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00c      	beq.n	8004a9e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d007      	beq.n	8004a9e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f905 	bl	8004ca8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00c      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d007      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f834 	bl	8004b2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00c      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f06f 0220 	mvn.w	r2, #32
 8004ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f8cd 	bl	8004c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ae6:	bf00      	nop
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
	...

08004b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a43      	ldr	r2, [pc, #268]	@ (8004c60 <TIM_Base_SetConfig+0x120>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d013      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b5e:	d00f      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a40      	ldr	r2, [pc, #256]	@ (8004c64 <TIM_Base_SetConfig+0x124>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00b      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a3f      	ldr	r2, [pc, #252]	@ (8004c68 <TIM_Base_SetConfig+0x128>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d007      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a3e      	ldr	r2, [pc, #248]	@ (8004c6c <TIM_Base_SetConfig+0x12c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a3d      	ldr	r2, [pc, #244]	@ (8004c70 <TIM_Base_SetConfig+0x130>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d108      	bne.n	8004b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a32      	ldr	r2, [pc, #200]	@ (8004c60 <TIM_Base_SetConfig+0x120>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d01f      	beq.n	8004bda <TIM_Base_SetConfig+0x9a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ba0:	d01b      	beq.n	8004bda <TIM_Base_SetConfig+0x9a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a2f      	ldr	r2, [pc, #188]	@ (8004c64 <TIM_Base_SetConfig+0x124>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d017      	beq.n	8004bda <TIM_Base_SetConfig+0x9a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a2e      	ldr	r2, [pc, #184]	@ (8004c68 <TIM_Base_SetConfig+0x128>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d013      	beq.n	8004bda <TIM_Base_SetConfig+0x9a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a2d      	ldr	r2, [pc, #180]	@ (8004c6c <TIM_Base_SetConfig+0x12c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00f      	beq.n	8004bda <TIM_Base_SetConfig+0x9a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a2c      	ldr	r2, [pc, #176]	@ (8004c70 <TIM_Base_SetConfig+0x130>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d00b      	beq.n	8004bda <TIM_Base_SetConfig+0x9a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a2b      	ldr	r2, [pc, #172]	@ (8004c74 <TIM_Base_SetConfig+0x134>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d007      	beq.n	8004bda <TIM_Base_SetConfig+0x9a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a2a      	ldr	r2, [pc, #168]	@ (8004c78 <TIM_Base_SetConfig+0x138>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d003      	beq.n	8004bda <TIM_Base_SetConfig+0x9a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a29      	ldr	r2, [pc, #164]	@ (8004c7c <TIM_Base_SetConfig+0x13c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d108      	bne.n	8004bec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a14      	ldr	r2, [pc, #80]	@ (8004c60 <TIM_Base_SetConfig+0x120>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d00f      	beq.n	8004c32 <TIM_Base_SetConfig+0xf2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a16      	ldr	r2, [pc, #88]	@ (8004c70 <TIM_Base_SetConfig+0x130>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00b      	beq.n	8004c32 <TIM_Base_SetConfig+0xf2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a15      	ldr	r2, [pc, #84]	@ (8004c74 <TIM_Base_SetConfig+0x134>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d007      	beq.n	8004c32 <TIM_Base_SetConfig+0xf2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a14      	ldr	r2, [pc, #80]	@ (8004c78 <TIM_Base_SetConfig+0x138>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d003      	beq.n	8004c32 <TIM_Base_SetConfig+0xf2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a13      	ldr	r2, [pc, #76]	@ (8004c7c <TIM_Base_SetConfig+0x13c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d103      	bne.n	8004c3a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f043 0204 	orr.w	r2, r3, #4
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	601a      	str	r2, [r3, #0]
}
 8004c52:	bf00      	nop
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40010000 	.word	0x40010000
 8004c64:	40000400 	.word	0x40000400
 8004c68:	40000800 	.word	0x40000800
 8004c6c:	40000c00 	.word	0x40000c00
 8004c70:	40010400 	.word	0x40010400
 8004c74:	40014000 	.word	0x40014000
 8004c78:	40014400 	.word	0x40014400
 8004c7c:	40014800 	.word	0x40014800

08004c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e042      	b.n	8004d54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d106      	bne.n	8004ce6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7fc f96b 	bl	8000fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2224      	movs	r2, #36	@ 0x24
 8004cea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0201 	bic.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fe1e 	bl	8005948 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f8b3 	bl	8004e78 <UART_SetConfig>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e01b      	b.n	8004d54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fe9d 	bl	8005a8c <UART_CheckIdleState>
 8004d52:	4603      	mov	r3, r0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08a      	sub	sp, #40	@ 0x28
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d72:	2b20      	cmp	r3, #32
 8004d74:	d17b      	bne.n	8004e6e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <HAL_UART_Transmit+0x26>
 8004d7c:	88fb      	ldrh	r3, [r7, #6]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e074      	b.n	8004e70 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2221      	movs	r2, #33	@ 0x21
 8004d92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d96:	f7fc fa89 	bl	80012ac <HAL_GetTick>
 8004d9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	88fa      	ldrh	r2, [r7, #6]
 8004da0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	88fa      	ldrh	r2, [r7, #6]
 8004da8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004db4:	d108      	bne.n	8004dc8 <HAL_UART_Transmit+0x6c>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d104      	bne.n	8004dc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	61bb      	str	r3, [r7, #24]
 8004dc6:	e003      	b.n	8004dd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004dd0:	e030      	b.n	8004e34 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	2180      	movs	r1, #128	@ 0x80
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 feff 	bl	8005be0 <UART_WaitOnFlagUntilTimeout>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e03d      	b.n	8004e70 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10b      	bne.n	8004e12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e08:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	3302      	adds	r3, #2
 8004e0e:	61bb      	str	r3, [r7, #24]
 8004e10:	e007      	b.n	8004e22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	781a      	ldrb	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1c8      	bne.n	8004dd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2200      	movs	r2, #0
 8004e48:	2140      	movs	r1, #64	@ 0x40
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 fec8 	bl	8005be0 <UART_WaitOnFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e006      	b.n	8004e70 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	e000      	b.n	8004e70 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004e6e:	2302      	movs	r3, #2
  }
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3720      	adds	r7, #32
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e7c:	b092      	sub	sp, #72	@ 0x48
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	431a      	orrs	r2, r3
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	4bbe      	ldr	r3, [pc, #760]	@ (80051a0 <UART_SetConfig+0x328>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4ab3      	ldr	r2, [pc, #716]	@ (80051a4 <UART_SetConfig+0x32c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d004      	beq.n	8004ee4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	4baf      	ldr	r3, [pc, #700]	@ (80051a8 <UART_SetConfig+0x330>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	6812      	ldr	r2, [r2, #0]
 8004ef2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efe:	f023 010f 	bic.w	r1, r3, #15
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4aa6      	ldr	r2, [pc, #664]	@ (80051ac <UART_SetConfig+0x334>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d177      	bne.n	8005008 <UART_SetConfig+0x190>
 8004f18:	4ba5      	ldr	r3, [pc, #660]	@ (80051b0 <UART_SetConfig+0x338>)
 8004f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f20:	2b28      	cmp	r3, #40	@ 0x28
 8004f22:	d86d      	bhi.n	8005000 <UART_SetConfig+0x188>
 8004f24:	a201      	add	r2, pc, #4	@ (adr r2, 8004f2c <UART_SetConfig+0xb4>)
 8004f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2a:	bf00      	nop
 8004f2c:	08004fd1 	.word	0x08004fd1
 8004f30:	08005001 	.word	0x08005001
 8004f34:	08005001 	.word	0x08005001
 8004f38:	08005001 	.word	0x08005001
 8004f3c:	08005001 	.word	0x08005001
 8004f40:	08005001 	.word	0x08005001
 8004f44:	08005001 	.word	0x08005001
 8004f48:	08005001 	.word	0x08005001
 8004f4c:	08004fd9 	.word	0x08004fd9
 8004f50:	08005001 	.word	0x08005001
 8004f54:	08005001 	.word	0x08005001
 8004f58:	08005001 	.word	0x08005001
 8004f5c:	08005001 	.word	0x08005001
 8004f60:	08005001 	.word	0x08005001
 8004f64:	08005001 	.word	0x08005001
 8004f68:	08005001 	.word	0x08005001
 8004f6c:	08004fe1 	.word	0x08004fe1
 8004f70:	08005001 	.word	0x08005001
 8004f74:	08005001 	.word	0x08005001
 8004f78:	08005001 	.word	0x08005001
 8004f7c:	08005001 	.word	0x08005001
 8004f80:	08005001 	.word	0x08005001
 8004f84:	08005001 	.word	0x08005001
 8004f88:	08005001 	.word	0x08005001
 8004f8c:	08004fe9 	.word	0x08004fe9
 8004f90:	08005001 	.word	0x08005001
 8004f94:	08005001 	.word	0x08005001
 8004f98:	08005001 	.word	0x08005001
 8004f9c:	08005001 	.word	0x08005001
 8004fa0:	08005001 	.word	0x08005001
 8004fa4:	08005001 	.word	0x08005001
 8004fa8:	08005001 	.word	0x08005001
 8004fac:	08004ff1 	.word	0x08004ff1
 8004fb0:	08005001 	.word	0x08005001
 8004fb4:	08005001 	.word	0x08005001
 8004fb8:	08005001 	.word	0x08005001
 8004fbc:	08005001 	.word	0x08005001
 8004fc0:	08005001 	.word	0x08005001
 8004fc4:	08005001 	.word	0x08005001
 8004fc8:	08005001 	.word	0x08005001
 8004fcc:	08004ff9 	.word	0x08004ff9
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fd6:	e222      	b.n	800541e <UART_SetConfig+0x5a6>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fde:	e21e      	b.n	800541e <UART_SetConfig+0x5a6>
 8004fe0:	2308      	movs	r3, #8
 8004fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fe6:	e21a      	b.n	800541e <UART_SetConfig+0x5a6>
 8004fe8:	2310      	movs	r3, #16
 8004fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fee:	e216      	b.n	800541e <UART_SetConfig+0x5a6>
 8004ff0:	2320      	movs	r3, #32
 8004ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ff6:	e212      	b.n	800541e <UART_SetConfig+0x5a6>
 8004ff8:	2340      	movs	r3, #64	@ 0x40
 8004ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ffe:	e20e      	b.n	800541e <UART_SetConfig+0x5a6>
 8005000:	2380      	movs	r3, #128	@ 0x80
 8005002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005006:	e20a      	b.n	800541e <UART_SetConfig+0x5a6>
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a69      	ldr	r2, [pc, #420]	@ (80051b4 <UART_SetConfig+0x33c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d130      	bne.n	8005074 <UART_SetConfig+0x1fc>
 8005012:	4b67      	ldr	r3, [pc, #412]	@ (80051b0 <UART_SetConfig+0x338>)
 8005014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	2b05      	cmp	r3, #5
 800501c:	d826      	bhi.n	800506c <UART_SetConfig+0x1f4>
 800501e:	a201      	add	r2, pc, #4	@ (adr r2, 8005024 <UART_SetConfig+0x1ac>)
 8005020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005024:	0800503d 	.word	0x0800503d
 8005028:	08005045 	.word	0x08005045
 800502c:	0800504d 	.word	0x0800504d
 8005030:	08005055 	.word	0x08005055
 8005034:	0800505d 	.word	0x0800505d
 8005038:	08005065 	.word	0x08005065
 800503c:	2300      	movs	r3, #0
 800503e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005042:	e1ec      	b.n	800541e <UART_SetConfig+0x5a6>
 8005044:	2304      	movs	r3, #4
 8005046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800504a:	e1e8      	b.n	800541e <UART_SetConfig+0x5a6>
 800504c:	2308      	movs	r3, #8
 800504e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005052:	e1e4      	b.n	800541e <UART_SetConfig+0x5a6>
 8005054:	2310      	movs	r3, #16
 8005056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800505a:	e1e0      	b.n	800541e <UART_SetConfig+0x5a6>
 800505c:	2320      	movs	r3, #32
 800505e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005062:	e1dc      	b.n	800541e <UART_SetConfig+0x5a6>
 8005064:	2340      	movs	r3, #64	@ 0x40
 8005066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800506a:	e1d8      	b.n	800541e <UART_SetConfig+0x5a6>
 800506c:	2380      	movs	r3, #128	@ 0x80
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005072:	e1d4      	b.n	800541e <UART_SetConfig+0x5a6>
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a4f      	ldr	r2, [pc, #316]	@ (80051b8 <UART_SetConfig+0x340>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d130      	bne.n	80050e0 <UART_SetConfig+0x268>
 800507e:	4b4c      	ldr	r3, [pc, #304]	@ (80051b0 <UART_SetConfig+0x338>)
 8005080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	2b05      	cmp	r3, #5
 8005088:	d826      	bhi.n	80050d8 <UART_SetConfig+0x260>
 800508a:	a201      	add	r2, pc, #4	@ (adr r2, 8005090 <UART_SetConfig+0x218>)
 800508c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005090:	080050a9 	.word	0x080050a9
 8005094:	080050b1 	.word	0x080050b1
 8005098:	080050b9 	.word	0x080050b9
 800509c:	080050c1 	.word	0x080050c1
 80050a0:	080050c9 	.word	0x080050c9
 80050a4:	080050d1 	.word	0x080050d1
 80050a8:	2300      	movs	r3, #0
 80050aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ae:	e1b6      	b.n	800541e <UART_SetConfig+0x5a6>
 80050b0:	2304      	movs	r3, #4
 80050b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050b6:	e1b2      	b.n	800541e <UART_SetConfig+0x5a6>
 80050b8:	2308      	movs	r3, #8
 80050ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050be:	e1ae      	b.n	800541e <UART_SetConfig+0x5a6>
 80050c0:	2310      	movs	r3, #16
 80050c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050c6:	e1aa      	b.n	800541e <UART_SetConfig+0x5a6>
 80050c8:	2320      	movs	r3, #32
 80050ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ce:	e1a6      	b.n	800541e <UART_SetConfig+0x5a6>
 80050d0:	2340      	movs	r3, #64	@ 0x40
 80050d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050d6:	e1a2      	b.n	800541e <UART_SetConfig+0x5a6>
 80050d8:	2380      	movs	r3, #128	@ 0x80
 80050da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050de:	e19e      	b.n	800541e <UART_SetConfig+0x5a6>
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a35      	ldr	r2, [pc, #212]	@ (80051bc <UART_SetConfig+0x344>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d130      	bne.n	800514c <UART_SetConfig+0x2d4>
 80050ea:	4b31      	ldr	r3, [pc, #196]	@ (80051b0 <UART_SetConfig+0x338>)
 80050ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	2b05      	cmp	r3, #5
 80050f4:	d826      	bhi.n	8005144 <UART_SetConfig+0x2cc>
 80050f6:	a201      	add	r2, pc, #4	@ (adr r2, 80050fc <UART_SetConfig+0x284>)
 80050f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fc:	08005115 	.word	0x08005115
 8005100:	0800511d 	.word	0x0800511d
 8005104:	08005125 	.word	0x08005125
 8005108:	0800512d 	.word	0x0800512d
 800510c:	08005135 	.word	0x08005135
 8005110:	0800513d 	.word	0x0800513d
 8005114:	2300      	movs	r3, #0
 8005116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800511a:	e180      	b.n	800541e <UART_SetConfig+0x5a6>
 800511c:	2304      	movs	r3, #4
 800511e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005122:	e17c      	b.n	800541e <UART_SetConfig+0x5a6>
 8005124:	2308      	movs	r3, #8
 8005126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800512a:	e178      	b.n	800541e <UART_SetConfig+0x5a6>
 800512c:	2310      	movs	r3, #16
 800512e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005132:	e174      	b.n	800541e <UART_SetConfig+0x5a6>
 8005134:	2320      	movs	r3, #32
 8005136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800513a:	e170      	b.n	800541e <UART_SetConfig+0x5a6>
 800513c:	2340      	movs	r3, #64	@ 0x40
 800513e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005142:	e16c      	b.n	800541e <UART_SetConfig+0x5a6>
 8005144:	2380      	movs	r3, #128	@ 0x80
 8005146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800514a:	e168      	b.n	800541e <UART_SetConfig+0x5a6>
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a1b      	ldr	r2, [pc, #108]	@ (80051c0 <UART_SetConfig+0x348>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d142      	bne.n	80051dc <UART_SetConfig+0x364>
 8005156:	4b16      	ldr	r3, [pc, #88]	@ (80051b0 <UART_SetConfig+0x338>)
 8005158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	2b05      	cmp	r3, #5
 8005160:	d838      	bhi.n	80051d4 <UART_SetConfig+0x35c>
 8005162:	a201      	add	r2, pc, #4	@ (adr r2, 8005168 <UART_SetConfig+0x2f0>)
 8005164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005168:	08005181 	.word	0x08005181
 800516c:	08005189 	.word	0x08005189
 8005170:	08005191 	.word	0x08005191
 8005174:	08005199 	.word	0x08005199
 8005178:	080051c5 	.word	0x080051c5
 800517c:	080051cd 	.word	0x080051cd
 8005180:	2300      	movs	r3, #0
 8005182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005186:	e14a      	b.n	800541e <UART_SetConfig+0x5a6>
 8005188:	2304      	movs	r3, #4
 800518a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800518e:	e146      	b.n	800541e <UART_SetConfig+0x5a6>
 8005190:	2308      	movs	r3, #8
 8005192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005196:	e142      	b.n	800541e <UART_SetConfig+0x5a6>
 8005198:	2310      	movs	r3, #16
 800519a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800519e:	e13e      	b.n	800541e <UART_SetConfig+0x5a6>
 80051a0:	cfff69f3 	.word	0xcfff69f3
 80051a4:	58000c00 	.word	0x58000c00
 80051a8:	11fff4ff 	.word	0x11fff4ff
 80051ac:	40011000 	.word	0x40011000
 80051b0:	58024400 	.word	0x58024400
 80051b4:	40004400 	.word	0x40004400
 80051b8:	40004800 	.word	0x40004800
 80051bc:	40004c00 	.word	0x40004c00
 80051c0:	40005000 	.word	0x40005000
 80051c4:	2320      	movs	r3, #32
 80051c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ca:	e128      	b.n	800541e <UART_SetConfig+0x5a6>
 80051cc:	2340      	movs	r3, #64	@ 0x40
 80051ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051d2:	e124      	b.n	800541e <UART_SetConfig+0x5a6>
 80051d4:	2380      	movs	r3, #128	@ 0x80
 80051d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051da:	e120      	b.n	800541e <UART_SetConfig+0x5a6>
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4acb      	ldr	r2, [pc, #812]	@ (8005510 <UART_SetConfig+0x698>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d176      	bne.n	80052d4 <UART_SetConfig+0x45c>
 80051e6:	4bcb      	ldr	r3, [pc, #812]	@ (8005514 <UART_SetConfig+0x69c>)
 80051e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051ee:	2b28      	cmp	r3, #40	@ 0x28
 80051f0:	d86c      	bhi.n	80052cc <UART_SetConfig+0x454>
 80051f2:	a201      	add	r2, pc, #4	@ (adr r2, 80051f8 <UART_SetConfig+0x380>)
 80051f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f8:	0800529d 	.word	0x0800529d
 80051fc:	080052cd 	.word	0x080052cd
 8005200:	080052cd 	.word	0x080052cd
 8005204:	080052cd 	.word	0x080052cd
 8005208:	080052cd 	.word	0x080052cd
 800520c:	080052cd 	.word	0x080052cd
 8005210:	080052cd 	.word	0x080052cd
 8005214:	080052cd 	.word	0x080052cd
 8005218:	080052a5 	.word	0x080052a5
 800521c:	080052cd 	.word	0x080052cd
 8005220:	080052cd 	.word	0x080052cd
 8005224:	080052cd 	.word	0x080052cd
 8005228:	080052cd 	.word	0x080052cd
 800522c:	080052cd 	.word	0x080052cd
 8005230:	080052cd 	.word	0x080052cd
 8005234:	080052cd 	.word	0x080052cd
 8005238:	080052ad 	.word	0x080052ad
 800523c:	080052cd 	.word	0x080052cd
 8005240:	080052cd 	.word	0x080052cd
 8005244:	080052cd 	.word	0x080052cd
 8005248:	080052cd 	.word	0x080052cd
 800524c:	080052cd 	.word	0x080052cd
 8005250:	080052cd 	.word	0x080052cd
 8005254:	080052cd 	.word	0x080052cd
 8005258:	080052b5 	.word	0x080052b5
 800525c:	080052cd 	.word	0x080052cd
 8005260:	080052cd 	.word	0x080052cd
 8005264:	080052cd 	.word	0x080052cd
 8005268:	080052cd 	.word	0x080052cd
 800526c:	080052cd 	.word	0x080052cd
 8005270:	080052cd 	.word	0x080052cd
 8005274:	080052cd 	.word	0x080052cd
 8005278:	080052bd 	.word	0x080052bd
 800527c:	080052cd 	.word	0x080052cd
 8005280:	080052cd 	.word	0x080052cd
 8005284:	080052cd 	.word	0x080052cd
 8005288:	080052cd 	.word	0x080052cd
 800528c:	080052cd 	.word	0x080052cd
 8005290:	080052cd 	.word	0x080052cd
 8005294:	080052cd 	.word	0x080052cd
 8005298:	080052c5 	.word	0x080052c5
 800529c:	2301      	movs	r3, #1
 800529e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052a2:	e0bc      	b.n	800541e <UART_SetConfig+0x5a6>
 80052a4:	2304      	movs	r3, #4
 80052a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052aa:	e0b8      	b.n	800541e <UART_SetConfig+0x5a6>
 80052ac:	2308      	movs	r3, #8
 80052ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052b2:	e0b4      	b.n	800541e <UART_SetConfig+0x5a6>
 80052b4:	2310      	movs	r3, #16
 80052b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ba:	e0b0      	b.n	800541e <UART_SetConfig+0x5a6>
 80052bc:	2320      	movs	r3, #32
 80052be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c2:	e0ac      	b.n	800541e <UART_SetConfig+0x5a6>
 80052c4:	2340      	movs	r3, #64	@ 0x40
 80052c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ca:	e0a8      	b.n	800541e <UART_SetConfig+0x5a6>
 80052cc:	2380      	movs	r3, #128	@ 0x80
 80052ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052d2:	e0a4      	b.n	800541e <UART_SetConfig+0x5a6>
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a8f      	ldr	r2, [pc, #572]	@ (8005518 <UART_SetConfig+0x6a0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d130      	bne.n	8005340 <UART_SetConfig+0x4c8>
 80052de:	4b8d      	ldr	r3, [pc, #564]	@ (8005514 <UART_SetConfig+0x69c>)
 80052e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	2b05      	cmp	r3, #5
 80052e8:	d826      	bhi.n	8005338 <UART_SetConfig+0x4c0>
 80052ea:	a201      	add	r2, pc, #4	@ (adr r2, 80052f0 <UART_SetConfig+0x478>)
 80052ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f0:	08005309 	.word	0x08005309
 80052f4:	08005311 	.word	0x08005311
 80052f8:	08005319 	.word	0x08005319
 80052fc:	08005321 	.word	0x08005321
 8005300:	08005329 	.word	0x08005329
 8005304:	08005331 	.word	0x08005331
 8005308:	2300      	movs	r3, #0
 800530a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800530e:	e086      	b.n	800541e <UART_SetConfig+0x5a6>
 8005310:	2304      	movs	r3, #4
 8005312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005316:	e082      	b.n	800541e <UART_SetConfig+0x5a6>
 8005318:	2308      	movs	r3, #8
 800531a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800531e:	e07e      	b.n	800541e <UART_SetConfig+0x5a6>
 8005320:	2310      	movs	r3, #16
 8005322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005326:	e07a      	b.n	800541e <UART_SetConfig+0x5a6>
 8005328:	2320      	movs	r3, #32
 800532a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532e:	e076      	b.n	800541e <UART_SetConfig+0x5a6>
 8005330:	2340      	movs	r3, #64	@ 0x40
 8005332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005336:	e072      	b.n	800541e <UART_SetConfig+0x5a6>
 8005338:	2380      	movs	r3, #128	@ 0x80
 800533a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533e:	e06e      	b.n	800541e <UART_SetConfig+0x5a6>
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a75      	ldr	r2, [pc, #468]	@ (800551c <UART_SetConfig+0x6a4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d130      	bne.n	80053ac <UART_SetConfig+0x534>
 800534a:	4b72      	ldr	r3, [pc, #456]	@ (8005514 <UART_SetConfig+0x69c>)
 800534c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	2b05      	cmp	r3, #5
 8005354:	d826      	bhi.n	80053a4 <UART_SetConfig+0x52c>
 8005356:	a201      	add	r2, pc, #4	@ (adr r2, 800535c <UART_SetConfig+0x4e4>)
 8005358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535c:	08005375 	.word	0x08005375
 8005360:	0800537d 	.word	0x0800537d
 8005364:	08005385 	.word	0x08005385
 8005368:	0800538d 	.word	0x0800538d
 800536c:	08005395 	.word	0x08005395
 8005370:	0800539d 	.word	0x0800539d
 8005374:	2300      	movs	r3, #0
 8005376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800537a:	e050      	b.n	800541e <UART_SetConfig+0x5a6>
 800537c:	2304      	movs	r3, #4
 800537e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005382:	e04c      	b.n	800541e <UART_SetConfig+0x5a6>
 8005384:	2308      	movs	r3, #8
 8005386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538a:	e048      	b.n	800541e <UART_SetConfig+0x5a6>
 800538c:	2310      	movs	r3, #16
 800538e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005392:	e044      	b.n	800541e <UART_SetConfig+0x5a6>
 8005394:	2320      	movs	r3, #32
 8005396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539a:	e040      	b.n	800541e <UART_SetConfig+0x5a6>
 800539c:	2340      	movs	r3, #64	@ 0x40
 800539e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a2:	e03c      	b.n	800541e <UART_SetConfig+0x5a6>
 80053a4:	2380      	movs	r3, #128	@ 0x80
 80053a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053aa:	e038      	b.n	800541e <UART_SetConfig+0x5a6>
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a5b      	ldr	r2, [pc, #364]	@ (8005520 <UART_SetConfig+0x6a8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d130      	bne.n	8005418 <UART_SetConfig+0x5a0>
 80053b6:	4b57      	ldr	r3, [pc, #348]	@ (8005514 <UART_SetConfig+0x69c>)
 80053b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	2b05      	cmp	r3, #5
 80053c0:	d826      	bhi.n	8005410 <UART_SetConfig+0x598>
 80053c2:	a201      	add	r2, pc, #4	@ (adr r2, 80053c8 <UART_SetConfig+0x550>)
 80053c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c8:	080053e1 	.word	0x080053e1
 80053cc:	080053e9 	.word	0x080053e9
 80053d0:	080053f1 	.word	0x080053f1
 80053d4:	080053f9 	.word	0x080053f9
 80053d8:	08005401 	.word	0x08005401
 80053dc:	08005409 	.word	0x08005409
 80053e0:	2302      	movs	r3, #2
 80053e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053e6:	e01a      	b.n	800541e <UART_SetConfig+0x5a6>
 80053e8:	2304      	movs	r3, #4
 80053ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ee:	e016      	b.n	800541e <UART_SetConfig+0x5a6>
 80053f0:	2308      	movs	r3, #8
 80053f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053f6:	e012      	b.n	800541e <UART_SetConfig+0x5a6>
 80053f8:	2310      	movs	r3, #16
 80053fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053fe:	e00e      	b.n	800541e <UART_SetConfig+0x5a6>
 8005400:	2320      	movs	r3, #32
 8005402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005406:	e00a      	b.n	800541e <UART_SetConfig+0x5a6>
 8005408:	2340      	movs	r3, #64	@ 0x40
 800540a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540e:	e006      	b.n	800541e <UART_SetConfig+0x5a6>
 8005410:	2380      	movs	r3, #128	@ 0x80
 8005412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005416:	e002      	b.n	800541e <UART_SetConfig+0x5a6>
 8005418:	2380      	movs	r3, #128	@ 0x80
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a3f      	ldr	r2, [pc, #252]	@ (8005520 <UART_SetConfig+0x6a8>)
 8005424:	4293      	cmp	r3, r2
 8005426:	f040 80f8 	bne.w	800561a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800542a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800542e:	2b20      	cmp	r3, #32
 8005430:	dc46      	bgt.n	80054c0 <UART_SetConfig+0x648>
 8005432:	2b02      	cmp	r3, #2
 8005434:	f2c0 8082 	blt.w	800553c <UART_SetConfig+0x6c4>
 8005438:	3b02      	subs	r3, #2
 800543a:	2b1e      	cmp	r3, #30
 800543c:	d87e      	bhi.n	800553c <UART_SetConfig+0x6c4>
 800543e:	a201      	add	r2, pc, #4	@ (adr r2, 8005444 <UART_SetConfig+0x5cc>)
 8005440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005444:	080054c7 	.word	0x080054c7
 8005448:	0800553d 	.word	0x0800553d
 800544c:	080054cf 	.word	0x080054cf
 8005450:	0800553d 	.word	0x0800553d
 8005454:	0800553d 	.word	0x0800553d
 8005458:	0800553d 	.word	0x0800553d
 800545c:	080054df 	.word	0x080054df
 8005460:	0800553d 	.word	0x0800553d
 8005464:	0800553d 	.word	0x0800553d
 8005468:	0800553d 	.word	0x0800553d
 800546c:	0800553d 	.word	0x0800553d
 8005470:	0800553d 	.word	0x0800553d
 8005474:	0800553d 	.word	0x0800553d
 8005478:	0800553d 	.word	0x0800553d
 800547c:	080054ef 	.word	0x080054ef
 8005480:	0800553d 	.word	0x0800553d
 8005484:	0800553d 	.word	0x0800553d
 8005488:	0800553d 	.word	0x0800553d
 800548c:	0800553d 	.word	0x0800553d
 8005490:	0800553d 	.word	0x0800553d
 8005494:	0800553d 	.word	0x0800553d
 8005498:	0800553d 	.word	0x0800553d
 800549c:	0800553d 	.word	0x0800553d
 80054a0:	0800553d 	.word	0x0800553d
 80054a4:	0800553d 	.word	0x0800553d
 80054a8:	0800553d 	.word	0x0800553d
 80054ac:	0800553d 	.word	0x0800553d
 80054b0:	0800553d 	.word	0x0800553d
 80054b4:	0800553d 	.word	0x0800553d
 80054b8:	0800553d 	.word	0x0800553d
 80054bc:	0800552f 	.word	0x0800552f
 80054c0:	2b40      	cmp	r3, #64	@ 0x40
 80054c2:	d037      	beq.n	8005534 <UART_SetConfig+0x6bc>
 80054c4:	e03a      	b.n	800553c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80054c6:	f7fe fd0f 	bl	8003ee8 <HAL_RCCEx_GetD3PCLK1Freq>
 80054ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80054cc:	e03c      	b.n	8005548 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fe fd1e 	bl	8003f14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80054d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054dc:	e034      	b.n	8005548 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054de:	f107 0318 	add.w	r3, r7, #24
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fe fe6a 	bl	80041bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054ec:	e02c      	b.n	8005548 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054ee:	4b09      	ldr	r3, [pc, #36]	@ (8005514 <UART_SetConfig+0x69c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d016      	beq.n	8005528 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80054fa:	4b06      	ldr	r3, [pc, #24]	@ (8005514 <UART_SetConfig+0x69c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	08db      	lsrs	r3, r3, #3
 8005500:	f003 0303 	and.w	r3, r3, #3
 8005504:	4a07      	ldr	r2, [pc, #28]	@ (8005524 <UART_SetConfig+0x6ac>)
 8005506:	fa22 f303 	lsr.w	r3, r2, r3
 800550a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800550c:	e01c      	b.n	8005548 <UART_SetConfig+0x6d0>
 800550e:	bf00      	nop
 8005510:	40011400 	.word	0x40011400
 8005514:	58024400 	.word	0x58024400
 8005518:	40007800 	.word	0x40007800
 800551c:	40007c00 	.word	0x40007c00
 8005520:	58000c00 	.word	0x58000c00
 8005524:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005528:	4b9d      	ldr	r3, [pc, #628]	@ (80057a0 <UART_SetConfig+0x928>)
 800552a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800552c:	e00c      	b.n	8005548 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800552e:	4b9d      	ldr	r3, [pc, #628]	@ (80057a4 <UART_SetConfig+0x92c>)
 8005530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005532:	e009      	b.n	8005548 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005534:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800553a:	e005      	b.n	8005548 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005546:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 81de 	beq.w	800590c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005554:	4a94      	ldr	r2, [pc, #592]	@ (80057a8 <UART_SetConfig+0x930>)
 8005556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800555a:	461a      	mov	r2, r3
 800555c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800555e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005562:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	4613      	mov	r3, r2
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	4413      	add	r3, r2
 800556e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005570:	429a      	cmp	r2, r3
 8005572:	d305      	bcc.n	8005580 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800557a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800557c:	429a      	cmp	r2, r3
 800557e:	d903      	bls.n	8005588 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005586:	e1c1      	b.n	800590c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800558a:	2200      	movs	r2, #0
 800558c:	60bb      	str	r3, [r7, #8]
 800558e:	60fa      	str	r2, [r7, #12]
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005594:	4a84      	ldr	r2, [pc, #528]	@ (80057a8 <UART_SetConfig+0x930>)
 8005596:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800559a:	b29b      	uxth	r3, r3
 800559c:	2200      	movs	r2, #0
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	607a      	str	r2, [r7, #4]
 80055a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055aa:	f7fa fe99 	bl	80002e0 <__aeabi_uldivmod>
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	4610      	mov	r0, r2
 80055b4:	4619      	mov	r1, r3
 80055b6:	f04f 0200 	mov.w	r2, #0
 80055ba:	f04f 0300 	mov.w	r3, #0
 80055be:	020b      	lsls	r3, r1, #8
 80055c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055c4:	0202      	lsls	r2, r0, #8
 80055c6:	6979      	ldr	r1, [r7, #20]
 80055c8:	6849      	ldr	r1, [r1, #4]
 80055ca:	0849      	lsrs	r1, r1, #1
 80055cc:	2000      	movs	r0, #0
 80055ce:	460c      	mov	r4, r1
 80055d0:	4605      	mov	r5, r0
 80055d2:	eb12 0804 	adds.w	r8, r2, r4
 80055d6:	eb43 0905 	adc.w	r9, r3, r5
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	469a      	mov	sl, r3
 80055e2:	4693      	mov	fp, r2
 80055e4:	4652      	mov	r2, sl
 80055e6:	465b      	mov	r3, fp
 80055e8:	4640      	mov	r0, r8
 80055ea:	4649      	mov	r1, r9
 80055ec:	f7fa fe78 	bl	80002e0 <__aeabi_uldivmod>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4613      	mov	r3, r2
 80055f6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055fe:	d308      	bcc.n	8005612 <UART_SetConfig+0x79a>
 8005600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005602:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005606:	d204      	bcs.n	8005612 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800560e:	60da      	str	r2, [r3, #12]
 8005610:	e17c      	b.n	800590c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005618:	e178      	b.n	800590c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005622:	f040 80c5 	bne.w	80057b0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005626:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800562a:	2b20      	cmp	r3, #32
 800562c:	dc48      	bgt.n	80056c0 <UART_SetConfig+0x848>
 800562e:	2b00      	cmp	r3, #0
 8005630:	db7b      	blt.n	800572a <UART_SetConfig+0x8b2>
 8005632:	2b20      	cmp	r3, #32
 8005634:	d879      	bhi.n	800572a <UART_SetConfig+0x8b2>
 8005636:	a201      	add	r2, pc, #4	@ (adr r2, 800563c <UART_SetConfig+0x7c4>)
 8005638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563c:	080056c7 	.word	0x080056c7
 8005640:	080056cf 	.word	0x080056cf
 8005644:	0800572b 	.word	0x0800572b
 8005648:	0800572b 	.word	0x0800572b
 800564c:	080056d7 	.word	0x080056d7
 8005650:	0800572b 	.word	0x0800572b
 8005654:	0800572b 	.word	0x0800572b
 8005658:	0800572b 	.word	0x0800572b
 800565c:	080056e7 	.word	0x080056e7
 8005660:	0800572b 	.word	0x0800572b
 8005664:	0800572b 	.word	0x0800572b
 8005668:	0800572b 	.word	0x0800572b
 800566c:	0800572b 	.word	0x0800572b
 8005670:	0800572b 	.word	0x0800572b
 8005674:	0800572b 	.word	0x0800572b
 8005678:	0800572b 	.word	0x0800572b
 800567c:	080056f7 	.word	0x080056f7
 8005680:	0800572b 	.word	0x0800572b
 8005684:	0800572b 	.word	0x0800572b
 8005688:	0800572b 	.word	0x0800572b
 800568c:	0800572b 	.word	0x0800572b
 8005690:	0800572b 	.word	0x0800572b
 8005694:	0800572b 	.word	0x0800572b
 8005698:	0800572b 	.word	0x0800572b
 800569c:	0800572b 	.word	0x0800572b
 80056a0:	0800572b 	.word	0x0800572b
 80056a4:	0800572b 	.word	0x0800572b
 80056a8:	0800572b 	.word	0x0800572b
 80056ac:	0800572b 	.word	0x0800572b
 80056b0:	0800572b 	.word	0x0800572b
 80056b4:	0800572b 	.word	0x0800572b
 80056b8:	0800572b 	.word	0x0800572b
 80056bc:	0800571d 	.word	0x0800571d
 80056c0:	2b40      	cmp	r3, #64	@ 0x40
 80056c2:	d02e      	beq.n	8005722 <UART_SetConfig+0x8aa>
 80056c4:	e031      	b.n	800572a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056c6:	f7fd f957 	bl	8002978 <HAL_RCC_GetPCLK1Freq>
 80056ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80056cc:	e033      	b.n	8005736 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056ce:	f7fd f969 	bl	80029a4 <HAL_RCC_GetPCLK2Freq>
 80056d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80056d4:	e02f      	b.n	8005736 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fe fc1a 	bl	8003f14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80056e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056e4:	e027      	b.n	8005736 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056e6:	f107 0318 	add.w	r3, r7, #24
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fe fd66 	bl	80041bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056f4:	e01f      	b.n	8005736 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056f6:	4b2d      	ldr	r3, [pc, #180]	@ (80057ac <UART_SetConfig+0x934>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d009      	beq.n	8005716 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005702:	4b2a      	ldr	r3, [pc, #168]	@ (80057ac <UART_SetConfig+0x934>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	08db      	lsrs	r3, r3, #3
 8005708:	f003 0303 	and.w	r3, r3, #3
 800570c:	4a24      	ldr	r2, [pc, #144]	@ (80057a0 <UART_SetConfig+0x928>)
 800570e:	fa22 f303 	lsr.w	r3, r2, r3
 8005712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005714:	e00f      	b.n	8005736 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005716:	4b22      	ldr	r3, [pc, #136]	@ (80057a0 <UART_SetConfig+0x928>)
 8005718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800571a:	e00c      	b.n	8005736 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800571c:	4b21      	ldr	r3, [pc, #132]	@ (80057a4 <UART_SetConfig+0x92c>)
 800571e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005720:	e009      	b.n	8005736 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005722:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005728:	e005      	b.n	8005736 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005734:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 80e7 	beq.w	800590c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005742:	4a19      	ldr	r2, [pc, #100]	@ (80057a8 <UART_SetConfig+0x930>)
 8005744:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005748:	461a      	mov	r2, r3
 800574a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800574c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005750:	005a      	lsls	r2, r3, #1
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	085b      	lsrs	r3, r3, #1
 8005758:	441a      	add	r2, r3
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005762:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005766:	2b0f      	cmp	r3, #15
 8005768:	d916      	bls.n	8005798 <UART_SetConfig+0x920>
 800576a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005770:	d212      	bcs.n	8005798 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005774:	b29b      	uxth	r3, r3
 8005776:	f023 030f 	bic.w	r3, r3, #15
 800577a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800577c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800577e:	085b      	lsrs	r3, r3, #1
 8005780:	b29b      	uxth	r3, r3
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	b29a      	uxth	r2, r3
 8005788:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800578a:	4313      	orrs	r3, r2
 800578c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005794:	60da      	str	r2, [r3, #12]
 8005796:	e0b9      	b.n	800590c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800579e:	e0b5      	b.n	800590c <UART_SetConfig+0xa94>
 80057a0:	03d09000 	.word	0x03d09000
 80057a4:	003d0900 	.word	0x003d0900
 80057a8:	08008c00 	.word	0x08008c00
 80057ac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80057b0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	dc49      	bgt.n	800584c <UART_SetConfig+0x9d4>
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	db7c      	blt.n	80058b6 <UART_SetConfig+0xa3e>
 80057bc:	2b20      	cmp	r3, #32
 80057be:	d87a      	bhi.n	80058b6 <UART_SetConfig+0xa3e>
 80057c0:	a201      	add	r2, pc, #4	@ (adr r2, 80057c8 <UART_SetConfig+0x950>)
 80057c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c6:	bf00      	nop
 80057c8:	08005853 	.word	0x08005853
 80057cc:	0800585b 	.word	0x0800585b
 80057d0:	080058b7 	.word	0x080058b7
 80057d4:	080058b7 	.word	0x080058b7
 80057d8:	08005863 	.word	0x08005863
 80057dc:	080058b7 	.word	0x080058b7
 80057e0:	080058b7 	.word	0x080058b7
 80057e4:	080058b7 	.word	0x080058b7
 80057e8:	08005873 	.word	0x08005873
 80057ec:	080058b7 	.word	0x080058b7
 80057f0:	080058b7 	.word	0x080058b7
 80057f4:	080058b7 	.word	0x080058b7
 80057f8:	080058b7 	.word	0x080058b7
 80057fc:	080058b7 	.word	0x080058b7
 8005800:	080058b7 	.word	0x080058b7
 8005804:	080058b7 	.word	0x080058b7
 8005808:	08005883 	.word	0x08005883
 800580c:	080058b7 	.word	0x080058b7
 8005810:	080058b7 	.word	0x080058b7
 8005814:	080058b7 	.word	0x080058b7
 8005818:	080058b7 	.word	0x080058b7
 800581c:	080058b7 	.word	0x080058b7
 8005820:	080058b7 	.word	0x080058b7
 8005824:	080058b7 	.word	0x080058b7
 8005828:	080058b7 	.word	0x080058b7
 800582c:	080058b7 	.word	0x080058b7
 8005830:	080058b7 	.word	0x080058b7
 8005834:	080058b7 	.word	0x080058b7
 8005838:	080058b7 	.word	0x080058b7
 800583c:	080058b7 	.word	0x080058b7
 8005840:	080058b7 	.word	0x080058b7
 8005844:	080058b7 	.word	0x080058b7
 8005848:	080058a9 	.word	0x080058a9
 800584c:	2b40      	cmp	r3, #64	@ 0x40
 800584e:	d02e      	beq.n	80058ae <UART_SetConfig+0xa36>
 8005850:	e031      	b.n	80058b6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005852:	f7fd f891 	bl	8002978 <HAL_RCC_GetPCLK1Freq>
 8005856:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005858:	e033      	b.n	80058c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800585a:	f7fd f8a3 	bl	80029a4 <HAL_RCC_GetPCLK2Freq>
 800585e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005860:	e02f      	b.n	80058c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005866:	4618      	mov	r0, r3
 8005868:	f7fe fb54 	bl	8003f14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800586c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005870:	e027      	b.n	80058c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005872:	f107 0318 	add.w	r3, r7, #24
 8005876:	4618      	mov	r0, r3
 8005878:	f7fe fca0 	bl	80041bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005880:	e01f      	b.n	80058c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005882:	4b2d      	ldr	r3, [pc, #180]	@ (8005938 <UART_SetConfig+0xac0>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0320 	and.w	r3, r3, #32
 800588a:	2b00      	cmp	r3, #0
 800588c:	d009      	beq.n	80058a2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800588e:	4b2a      	ldr	r3, [pc, #168]	@ (8005938 <UART_SetConfig+0xac0>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	08db      	lsrs	r3, r3, #3
 8005894:	f003 0303 	and.w	r3, r3, #3
 8005898:	4a28      	ldr	r2, [pc, #160]	@ (800593c <UART_SetConfig+0xac4>)
 800589a:	fa22 f303 	lsr.w	r3, r2, r3
 800589e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058a0:	e00f      	b.n	80058c2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80058a2:	4b26      	ldr	r3, [pc, #152]	@ (800593c <UART_SetConfig+0xac4>)
 80058a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058a6:	e00c      	b.n	80058c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058a8:	4b25      	ldr	r3, [pc, #148]	@ (8005940 <UART_SetConfig+0xac8>)
 80058aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058ac:	e009      	b.n	80058c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058b4:	e005      	b.n	80058c2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80058c0:	bf00      	nop
    }

    if (pclk != 0U)
 80058c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d021      	beq.n	800590c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005944 <UART_SetConfig+0xacc>)
 80058ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058d2:	461a      	mov	r2, r3
 80058d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	085b      	lsrs	r3, r3, #1
 80058e0:	441a      	add	r2, r3
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ee:	2b0f      	cmp	r3, #15
 80058f0:	d909      	bls.n	8005906 <UART_SetConfig+0xa8e>
 80058f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058f8:	d205      	bcs.n	8005906 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	60da      	str	r2, [r3, #12]
 8005904:	e002      	b.n	800590c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	2201      	movs	r2, #1
 8005910:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	2201      	movs	r2, #1
 8005918:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2200      	movs	r2, #0
 8005920:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2200      	movs	r2, #0
 8005926:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005928:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800592c:	4618      	mov	r0, r3
 800592e:	3748      	adds	r7, #72	@ 0x48
 8005930:	46bd      	mov	sp, r7
 8005932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005936:	bf00      	nop
 8005938:	58024400 	.word	0x58024400
 800593c:	03d09000 	.word	0x03d09000
 8005940:	003d0900 	.word	0x003d0900
 8005944:	08008c00 	.word	0x08008c00

08005948 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005954:	f003 0308 	and.w	r3, r3, #8
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	430a      	orrs	r2, r1
 8005992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00a      	beq.n	80059b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ba:	f003 0304 	and.w	r3, r3, #4
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00a      	beq.n	80059fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fe:	f003 0320 	and.w	r3, r3, #32
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00a      	beq.n	8005a1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01a      	beq.n	8005a5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a46:	d10a      	bne.n	8005a5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	605a      	str	r2, [r3, #4]
  }
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b098      	sub	sp, #96	@ 0x60
 8005a90:	af02      	add	r7, sp, #8
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a9c:	f7fb fc06 	bl	80012ac <HAL_GetTick>
 8005aa0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0308 	and.w	r3, r3, #8
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	d12f      	bne.n	8005b10 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ab0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f88e 	bl	8005be0 <UART_WaitOnFlagUntilTimeout>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d022      	beq.n	8005b10 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ada:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ade:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ae8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005aea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005aee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e6      	bne.n	8005aca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e063      	b.n	8005bd8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0304 	and.w	r3, r3, #4
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d149      	bne.n	8005bb2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b1e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b26:	2200      	movs	r2, #0
 8005b28:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f857 	bl	8005be0 <UART_WaitOnFlagUntilTimeout>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d03c      	beq.n	8005bb2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b40:	e853 3f00 	ldrex	r3, [r3]
 8005b44:	623b      	str	r3, [r7, #32]
   return(result);
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	461a      	mov	r2, r3
 8005b54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b56:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b58:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b5e:	e841 2300 	strex	r3, r2, [r1]
 8005b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1e6      	bne.n	8005b38 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3308      	adds	r3, #8
 8005b70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f023 0301 	bic.w	r3, r3, #1
 8005b80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3308      	adds	r3, #8
 8005b88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b8a:	61fa      	str	r2, [r7, #28]
 8005b8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	69b9      	ldr	r1, [r7, #24]
 8005b90:	69fa      	ldr	r2, [r7, #28]
 8005b92:	e841 2300 	strex	r3, r2, [r1]
 8005b96:	617b      	str	r3, [r7, #20]
   return(result);
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1e5      	bne.n	8005b6a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e012      	b.n	8005bd8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3758      	adds	r7, #88	@ 0x58
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	603b      	str	r3, [r7, #0]
 8005bec:	4613      	mov	r3, r2
 8005bee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bf0:	e04f      	b.n	8005c92 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf8:	d04b      	beq.n	8005c92 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bfa:	f7fb fb57 	bl	80012ac <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d302      	bcc.n	8005c10 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e04e      	b.n	8005cb2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0304 	and.w	r3, r3, #4
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d037      	beq.n	8005c92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b80      	cmp	r3, #128	@ 0x80
 8005c26:	d034      	beq.n	8005c92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2b40      	cmp	r3, #64	@ 0x40
 8005c2c:	d031      	beq.n	8005c92 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	d110      	bne.n	8005c5e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2208      	movs	r2, #8
 8005c42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 f839 	bl	8005cbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2208      	movs	r2, #8
 8005c4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e029      	b.n	8005cb2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c6c:	d111      	bne.n	8005c92 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 f81f 	bl	8005cbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e00f      	b.n	8005cb2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	69da      	ldr	r2, [r3, #28]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	bf0c      	ite	eq
 8005ca2:	2301      	moveq	r3, #1
 8005ca4:	2300      	movne	r3, #0
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	79fb      	ldrb	r3, [r7, #7]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d0a0      	beq.n	8005bf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
	...

08005cbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b095      	sub	sp, #84	@ 0x54
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	461a      	mov	r2, r3
 8005ce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ce2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ce4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ce8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e6      	bne.n	8005cc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3308      	adds	r3, #8
 8005cfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d06:	69fa      	ldr	r2, [r7, #28]
 8005d08:	4b1e      	ldr	r3, [pc, #120]	@ (8005d84 <UART_EndRxTransfer+0xc8>)
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3308      	adds	r3, #8
 8005d14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d1e:	e841 2300 	strex	r3, r2, [r1]
 8005d22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1e5      	bne.n	8005cf6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d118      	bne.n	8005d64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	e853 3f00 	ldrex	r3, [r3]
 8005d3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f023 0310 	bic.w	r3, r3, #16
 8005d46:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d50:	61bb      	str	r3, [r7, #24]
 8005d52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	6979      	ldr	r1, [r7, #20]
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	e841 2300 	strex	r3, r2, [r1]
 8005d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e6      	bne.n	8005d32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005d78:	bf00      	nop
 8005d7a:	3754      	adds	r7, #84	@ 0x54
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	effffffe 	.word	0xeffffffe

08005d88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d101      	bne.n	8005d9e <HAL_UARTEx_DisableFifoMode+0x16>
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	e027      	b.n	8005dee <HAL_UARTEx_DisableFifoMode+0x66>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2224      	movs	r2, #36	@ 0x24
 8005daa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0201 	bic.w	r2, r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005dcc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b084      	sub	sp, #16
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d101      	bne.n	8005e12 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	e02d      	b.n	8005e6e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2224      	movs	r2, #36	@ 0x24
 8005e1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0201 	bic.w	r2, r2, #1
 8005e38:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f850 	bl	8005ef4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	e02d      	b.n	8005eea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2224      	movs	r2, #36	@ 0x24
 8005e9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0201 	bic.w	r2, r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f812 	bl	8005ef4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
	...

08005ef4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d108      	bne.n	8005f16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f14:	e031      	b.n	8005f7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f16:	2310      	movs	r3, #16
 8005f18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f1a:	2310      	movs	r3, #16
 8005f1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	0e5b      	lsrs	r3, r3, #25
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	0f5b      	lsrs	r3, r3, #29
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f3e:	7bbb      	ldrb	r3, [r7, #14]
 8005f40:	7b3a      	ldrb	r2, [r7, #12]
 8005f42:	4911      	ldr	r1, [pc, #68]	@ (8005f88 <UARTEx_SetNbDataToProcess+0x94>)
 8005f44:	5c8a      	ldrb	r2, [r1, r2]
 8005f46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f4a:	7b3a      	ldrb	r2, [r7, #12]
 8005f4c:	490f      	ldr	r1, [pc, #60]	@ (8005f8c <UARTEx_SetNbDataToProcess+0x98>)
 8005f4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f50:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
 8005f5e:	7b7a      	ldrb	r2, [r7, #13]
 8005f60:	4909      	ldr	r1, [pc, #36]	@ (8005f88 <UARTEx_SetNbDataToProcess+0x94>)
 8005f62:	5c8a      	ldrb	r2, [r1, r2]
 8005f64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f68:	7b7a      	ldrb	r2, [r7, #13]
 8005f6a:	4908      	ldr	r1, [pc, #32]	@ (8005f8c <UARTEx_SetNbDataToProcess+0x98>)
 8005f6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005f7a:	bf00      	nop
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	08008c18 	.word	0x08008c18
 8005f8c:	08008c20 	.word	0x08008c20

08005f90 <__NVIC_SetPriority>:
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	4603      	mov	r3, r0
 8005f98:	6039      	str	r1, [r7, #0]
 8005f9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005f9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	db0a      	blt.n	8005fba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	490c      	ldr	r1, [pc, #48]	@ (8005fdc <__NVIC_SetPriority+0x4c>)
 8005faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fae:	0112      	lsls	r2, r2, #4
 8005fb0:	b2d2      	uxtb	r2, r2
 8005fb2:	440b      	add	r3, r1
 8005fb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005fb8:	e00a      	b.n	8005fd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	4908      	ldr	r1, [pc, #32]	@ (8005fe0 <__NVIC_SetPriority+0x50>)
 8005fc0:	88fb      	ldrh	r3, [r7, #6]
 8005fc2:	f003 030f 	and.w	r3, r3, #15
 8005fc6:	3b04      	subs	r3, #4
 8005fc8:	0112      	lsls	r2, r2, #4
 8005fca:	b2d2      	uxtb	r2, r2
 8005fcc:	440b      	add	r3, r1
 8005fce:	761a      	strb	r2, [r3, #24]
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	e000e100 	.word	0xe000e100
 8005fe0:	e000ed00 	.word	0xe000ed00

08005fe4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005fe8:	4b05      	ldr	r3, [pc, #20]	@ (8006000 <SysTick_Handler+0x1c>)
 8005fea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005fec:	f002 f95a 	bl	80082a4 <xTaskGetSchedulerState>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d001      	beq.n	8005ffa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005ff6:	f000 fd9f 	bl	8006b38 <xPortSysTickHandler>
  }
}
 8005ffa:	bf00      	nop
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	e000e010 	.word	0xe000e010

08006004 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006004:	b580      	push	{r7, lr}
 8006006:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006008:	2100      	movs	r1, #0
 800600a:	f06f 0004 	mvn.w	r0, #4
 800600e:	f7ff ffbf 	bl	8005f90 <__NVIC_SetPriority>
#endif
}
 8006012:	bf00      	nop
 8006014:	bd80      	pop	{r7, pc}
	...

08006018 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800601e:	f3ef 8305 	mrs	r3, IPSR
 8006022:	603b      	str	r3, [r7, #0]
  return(result);
 8006024:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800602a:	f06f 0305 	mvn.w	r3, #5
 800602e:	607b      	str	r3, [r7, #4]
 8006030:	e00c      	b.n	800604c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006032:	4b0a      	ldr	r3, [pc, #40]	@ (800605c <osKernelInitialize+0x44>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d105      	bne.n	8006046 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800603a:	4b08      	ldr	r3, [pc, #32]	@ (800605c <osKernelInitialize+0x44>)
 800603c:	2201      	movs	r2, #1
 800603e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006040:	2300      	movs	r3, #0
 8006042:	607b      	str	r3, [r7, #4]
 8006044:	e002      	b.n	800604c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006046:	f04f 33ff 	mov.w	r3, #4294967295
 800604a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800604c:	687b      	ldr	r3, [r7, #4]
}
 800604e:	4618      	mov	r0, r3
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	2400012c 	.word	0x2400012c

08006060 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006066:	f3ef 8305 	mrs	r3, IPSR
 800606a:	603b      	str	r3, [r7, #0]
  return(result);
 800606c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006072:	f06f 0305 	mvn.w	r3, #5
 8006076:	607b      	str	r3, [r7, #4]
 8006078:	e010      	b.n	800609c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800607a:	4b0b      	ldr	r3, [pc, #44]	@ (80060a8 <osKernelStart+0x48>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d109      	bne.n	8006096 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006082:	f7ff ffbf 	bl	8006004 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006086:	4b08      	ldr	r3, [pc, #32]	@ (80060a8 <osKernelStart+0x48>)
 8006088:	2202      	movs	r2, #2
 800608a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800608c:	f001 fcbc 	bl	8007a08 <vTaskStartScheduler>
      stat = osOK;
 8006090:	2300      	movs	r3, #0
 8006092:	607b      	str	r3, [r7, #4]
 8006094:	e002      	b.n	800609c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006096:	f04f 33ff 	mov.w	r3, #4294967295
 800609a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800609c:	687b      	ldr	r3, [r7, #4]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	2400012c 	.word	0x2400012c

080060ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08e      	sub	sp, #56	@ 0x38
 80060b0:	af04      	add	r7, sp, #16
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80060b8:	2300      	movs	r3, #0
 80060ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060bc:	f3ef 8305 	mrs	r3, IPSR
 80060c0:	617b      	str	r3, [r7, #20]
  return(result);
 80060c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d17e      	bne.n	80061c6 <osThreadNew+0x11a>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d07b      	beq.n	80061c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80060ce:	2380      	movs	r3, #128	@ 0x80
 80060d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80060d2:	2318      	movs	r3, #24
 80060d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80060da:	f04f 33ff 	mov.w	r3, #4294967295
 80060de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d045      	beq.n	8006172 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d002      	beq.n	80060f4 <osThreadNew+0x48>
        name = attr->name;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d008      	beq.n	800611a <osThreadNew+0x6e>
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	2b38      	cmp	r3, #56	@ 0x38
 800610c:	d805      	bhi.n	800611a <osThreadNew+0x6e>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <osThreadNew+0x72>
        return (NULL);
 800611a:	2300      	movs	r3, #0
 800611c:	e054      	b.n	80061c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	089b      	lsrs	r3, r3, #2
 800612c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00e      	beq.n	8006154 <osThreadNew+0xa8>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	2b5b      	cmp	r3, #91	@ 0x5b
 800613c:	d90a      	bls.n	8006154 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006142:	2b00      	cmp	r3, #0
 8006144:	d006      	beq.n	8006154 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <osThreadNew+0xa8>
        mem = 1;
 800614e:	2301      	movs	r3, #1
 8006150:	61bb      	str	r3, [r7, #24]
 8006152:	e010      	b.n	8006176 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10c      	bne.n	8006176 <osThreadNew+0xca>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d108      	bne.n	8006176 <osThreadNew+0xca>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d104      	bne.n	8006176 <osThreadNew+0xca>
          mem = 0;
 800616c:	2300      	movs	r3, #0
 800616e:	61bb      	str	r3, [r7, #24]
 8006170:	e001      	b.n	8006176 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006172:	2300      	movs	r3, #0
 8006174:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d110      	bne.n	800619e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006184:	9202      	str	r2, [sp, #8]
 8006186:	9301      	str	r3, [sp, #4]
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	6a3a      	ldr	r2, [r7, #32]
 8006190:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f001 fa5c 	bl	8007650 <xTaskCreateStatic>
 8006198:	4603      	mov	r3, r0
 800619a:	613b      	str	r3, [r7, #16]
 800619c:	e013      	b.n	80061c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d110      	bne.n	80061c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	f107 0310 	add.w	r3, r7, #16
 80061ac:	9301      	str	r3, [sp, #4]
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f001 faaa 	bl	8007710 <xTaskCreate>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d001      	beq.n	80061c6 <osThreadNew+0x11a>
            hTask = NULL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80061c6:	693b      	ldr	r3, [r7, #16]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3728      	adds	r7, #40	@ 0x28
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061d8:	f3ef 8305 	mrs	r3, IPSR
 80061dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80061de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <osDelay+0x1c>
    stat = osErrorISR;
 80061e4:	f06f 0305 	mvn.w	r3, #5
 80061e8:	60fb      	str	r3, [r7, #12]
 80061ea:	e007      	b.n	80061fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80061ec:	2300      	movs	r3, #0
 80061ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <osDelay+0x2c>
      vTaskDelay(ticks);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f001 fbd0 	bl	800799c <vTaskDelay>
    }
  }

  return (stat);
 80061fc:	68fb      	ldr	r3, [r7, #12]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
	...

08006208 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4a07      	ldr	r2, [pc, #28]	@ (8006234 <vApplicationGetIdleTaskMemory+0x2c>)
 8006218:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	4a06      	ldr	r2, [pc, #24]	@ (8006238 <vApplicationGetIdleTaskMemory+0x30>)
 800621e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2280      	movs	r2, #128	@ 0x80
 8006224:	601a      	str	r2, [r3, #0]
}
 8006226:	bf00      	nop
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	24000130 	.word	0x24000130
 8006238:	2400018c 	.word	0x2400018c

0800623c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4a07      	ldr	r2, [pc, #28]	@ (8006268 <vApplicationGetTimerTaskMemory+0x2c>)
 800624c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	4a06      	ldr	r2, [pc, #24]	@ (800626c <vApplicationGetTimerTaskMemory+0x30>)
 8006252:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800625a:	601a      	str	r2, [r3, #0]
}
 800625c:	bf00      	nop
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	2400038c 	.word	0x2400038c
 800626c:	240003e8 	.word	0x240003e8

08006270 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b08a      	sub	sp, #40	@ 0x28
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006278:	2300      	movs	r3, #0
 800627a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800627c:	f001 fc2c 	bl	8007ad8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006280:	4b5c      	ldr	r3, [pc, #368]	@ (80063f4 <pvPortMalloc+0x184>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006288:	f000 f924 	bl	80064d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800628c:	4b5a      	ldr	r3, [pc, #360]	@ (80063f8 <pvPortMalloc+0x188>)
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4013      	ands	r3, r2
 8006294:	2b00      	cmp	r3, #0
 8006296:	f040 8095 	bne.w	80063c4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d01e      	beq.n	80062de <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80062a0:	2208      	movs	r2, #8
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4413      	add	r3, r2
 80062a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f003 0307 	and.w	r3, r3, #7
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d015      	beq.n	80062de <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f023 0307 	bic.w	r3, r3, #7
 80062b8:	3308      	adds	r3, #8
 80062ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f003 0307 	and.w	r3, r3, #7
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00b      	beq.n	80062de <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80062d8:	bf00      	nop
 80062da:	bf00      	nop
 80062dc:	e7fd      	b.n	80062da <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d06f      	beq.n	80063c4 <pvPortMalloc+0x154>
 80062e4:	4b45      	ldr	r3, [pc, #276]	@ (80063fc <pvPortMalloc+0x18c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d86a      	bhi.n	80063c4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80062ee:	4b44      	ldr	r3, [pc, #272]	@ (8006400 <pvPortMalloc+0x190>)
 80062f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80062f2:	4b43      	ldr	r3, [pc, #268]	@ (8006400 <pvPortMalloc+0x190>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062f8:	e004      	b.n	8006304 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80062fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80062fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	429a      	cmp	r2, r3
 800630c:	d903      	bls.n	8006316 <pvPortMalloc+0xa6>
 800630e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1f1      	bne.n	80062fa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006316:	4b37      	ldr	r3, [pc, #220]	@ (80063f4 <pvPortMalloc+0x184>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800631c:	429a      	cmp	r2, r3
 800631e:	d051      	beq.n	80063c4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2208      	movs	r2, #8
 8006326:	4413      	add	r3, r2
 8006328:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800632a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	1ad2      	subs	r2, r2, r3
 800633a:	2308      	movs	r3, #8
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	429a      	cmp	r2, r3
 8006340:	d920      	bls.n	8006384 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4413      	add	r3, r2
 8006348:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	f003 0307 	and.w	r3, r3, #7
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00b      	beq.n	800636c <pvPortMalloc+0xfc>
	__asm volatile
 8006354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	613b      	str	r3, [r7, #16]
}
 8006366:	bf00      	nop
 8006368:	bf00      	nop
 800636a:	e7fd      	b.n	8006368 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800636c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	1ad2      	subs	r2, r2, r3
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800637e:	69b8      	ldr	r0, [r7, #24]
 8006380:	f000 f90a 	bl	8006598 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006384:	4b1d      	ldr	r3, [pc, #116]	@ (80063fc <pvPortMalloc+0x18c>)
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	4a1b      	ldr	r2, [pc, #108]	@ (80063fc <pvPortMalloc+0x18c>)
 8006390:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006392:	4b1a      	ldr	r3, [pc, #104]	@ (80063fc <pvPortMalloc+0x18c>)
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	4b1b      	ldr	r3, [pc, #108]	@ (8006404 <pvPortMalloc+0x194>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	429a      	cmp	r2, r3
 800639c:	d203      	bcs.n	80063a6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800639e:	4b17      	ldr	r3, [pc, #92]	@ (80063fc <pvPortMalloc+0x18c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a18      	ldr	r2, [pc, #96]	@ (8006404 <pvPortMalloc+0x194>)
 80063a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	4b13      	ldr	r3, [pc, #76]	@ (80063f8 <pvPortMalloc+0x188>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	431a      	orrs	r2, r3
 80063b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80063b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b6:	2200      	movs	r2, #0
 80063b8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80063ba:	4b13      	ldr	r3, [pc, #76]	@ (8006408 <pvPortMalloc+0x198>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3301      	adds	r3, #1
 80063c0:	4a11      	ldr	r2, [pc, #68]	@ (8006408 <pvPortMalloc+0x198>)
 80063c2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80063c4:	f001 fb96 	bl	8007af4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	f003 0307 	and.w	r3, r3, #7
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00b      	beq.n	80063ea <pvPortMalloc+0x17a>
	__asm volatile
 80063d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d6:	f383 8811 	msr	BASEPRI, r3
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	60fb      	str	r3, [r7, #12]
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop
 80063e8:	e7fd      	b.n	80063e6 <pvPortMalloc+0x176>
	return pvReturn;
 80063ea:	69fb      	ldr	r3, [r7, #28]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3728      	adds	r7, #40	@ 0x28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	240043f0 	.word	0x240043f0
 80063f8:	24004404 	.word	0x24004404
 80063fc:	240043f4 	.word	0x240043f4
 8006400:	240043e8 	.word	0x240043e8
 8006404:	240043f8 	.word	0x240043f8
 8006408:	240043fc 	.word	0x240043fc

0800640c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d04f      	beq.n	80064be <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800641e:	2308      	movs	r3, #8
 8006420:	425b      	negs	r3, r3
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	4413      	add	r3, r2
 8006426:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	4b25      	ldr	r3, [pc, #148]	@ (80064c8 <vPortFree+0xbc>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4013      	ands	r3, r2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10b      	bne.n	8006452 <vPortFree+0x46>
	__asm volatile
 800643a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	60fb      	str	r3, [r7, #12]
}
 800644c:	bf00      	nop
 800644e:	bf00      	nop
 8006450:	e7fd      	b.n	800644e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00b      	beq.n	8006472 <vPortFree+0x66>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	60bb      	str	r3, [r7, #8]
}
 800646c:	bf00      	nop
 800646e:	bf00      	nop
 8006470:	e7fd      	b.n	800646e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	685a      	ldr	r2, [r3, #4]
 8006476:	4b14      	ldr	r3, [pc, #80]	@ (80064c8 <vPortFree+0xbc>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4013      	ands	r3, r2
 800647c:	2b00      	cmp	r3, #0
 800647e:	d01e      	beq.n	80064be <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d11a      	bne.n	80064be <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	4b0e      	ldr	r3, [pc, #56]	@ (80064c8 <vPortFree+0xbc>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	43db      	mvns	r3, r3
 8006492:	401a      	ands	r2, r3
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006498:	f001 fb1e 	bl	8007ad8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	4b0a      	ldr	r3, [pc, #40]	@ (80064cc <vPortFree+0xc0>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4413      	add	r3, r2
 80064a6:	4a09      	ldr	r2, [pc, #36]	@ (80064cc <vPortFree+0xc0>)
 80064a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80064aa:	6938      	ldr	r0, [r7, #16]
 80064ac:	f000 f874 	bl	8006598 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80064b0:	4b07      	ldr	r3, [pc, #28]	@ (80064d0 <vPortFree+0xc4>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3301      	adds	r3, #1
 80064b6:	4a06      	ldr	r2, [pc, #24]	@ (80064d0 <vPortFree+0xc4>)
 80064b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80064ba:	f001 fb1b 	bl	8007af4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80064be:	bf00      	nop
 80064c0:	3718      	adds	r7, #24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	24004404 	.word	0x24004404
 80064cc:	240043f4 	.word	0x240043f4
 80064d0:	24004400 	.word	0x24004400

080064d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064da:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80064de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80064e0:	4b27      	ldr	r3, [pc, #156]	@ (8006580 <prvHeapInit+0xac>)
 80064e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f003 0307 	and.w	r3, r3, #7
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00c      	beq.n	8006508 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	3307      	adds	r3, #7
 80064f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 0307 	bic.w	r3, r3, #7
 80064fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	4a1f      	ldr	r2, [pc, #124]	@ (8006580 <prvHeapInit+0xac>)
 8006504:	4413      	add	r3, r2
 8006506:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800650c:	4a1d      	ldr	r2, [pc, #116]	@ (8006584 <prvHeapInit+0xb0>)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006512:	4b1c      	ldr	r3, [pc, #112]	@ (8006584 <prvHeapInit+0xb0>)
 8006514:	2200      	movs	r2, #0
 8006516:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	4413      	add	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006520:	2208      	movs	r2, #8
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	1a9b      	subs	r3, r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f023 0307 	bic.w	r3, r3, #7
 800652e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4a15      	ldr	r2, [pc, #84]	@ (8006588 <prvHeapInit+0xb4>)
 8006534:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006536:	4b14      	ldr	r3, [pc, #80]	@ (8006588 <prvHeapInit+0xb4>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2200      	movs	r2, #0
 800653c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800653e:	4b12      	ldr	r3, [pc, #72]	@ (8006588 <prvHeapInit+0xb4>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2200      	movs	r2, #0
 8006544:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	1ad2      	subs	r2, r2, r3
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006554:	4b0c      	ldr	r3, [pc, #48]	@ (8006588 <prvHeapInit+0xb4>)
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	4a0a      	ldr	r2, [pc, #40]	@ (800658c <prvHeapInit+0xb8>)
 8006562:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	4a09      	ldr	r2, [pc, #36]	@ (8006590 <prvHeapInit+0xbc>)
 800656a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800656c:	4b09      	ldr	r3, [pc, #36]	@ (8006594 <prvHeapInit+0xc0>)
 800656e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006572:	601a      	str	r2, [r3, #0]
}
 8006574:	bf00      	nop
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	240007e8 	.word	0x240007e8
 8006584:	240043e8 	.word	0x240043e8
 8006588:	240043f0 	.word	0x240043f0
 800658c:	240043f8 	.word	0x240043f8
 8006590:	240043f4 	.word	0x240043f4
 8006594:	24004404 	.word	0x24004404

08006598 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80065a0:	4b28      	ldr	r3, [pc, #160]	@ (8006644 <prvInsertBlockIntoFreeList+0xac>)
 80065a2:	60fb      	str	r3, [r7, #12]
 80065a4:	e002      	b.n	80065ac <prvInsertBlockIntoFreeList+0x14>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d8f7      	bhi.n	80065a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	4413      	add	r3, r2
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d108      	bne.n	80065da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	441a      	add	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	441a      	add	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d118      	bne.n	8006620 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	4b15      	ldr	r3, [pc, #84]	@ (8006648 <prvInsertBlockIntoFreeList+0xb0>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d00d      	beq.n	8006616 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	441a      	add	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	e008      	b.n	8006628 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006616:	4b0c      	ldr	r3, [pc, #48]	@ (8006648 <prvInsertBlockIntoFreeList+0xb0>)
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	e003      	b.n	8006628 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	429a      	cmp	r2, r3
 800662e:	d002      	beq.n	8006636 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006636:	bf00      	nop
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	240043e8 	.word	0x240043e8
 8006648:	240043f0 	.word	0x240043f0

0800664c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f103 0208 	add.w	r2, r3, #8
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f04f 32ff 	mov.w	r2, #4294967295
 8006664:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f103 0208 	add.w	r2, r3, #8
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f103 0208 	add.w	r2, r3, #8
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800669a:	bf00      	nop
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066a6:	b480      	push	{r7}
 80066a8:	b085      	sub	sp, #20
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	689a      	ldr	r2, [r3, #8]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	683a      	ldr	r2, [r7, #0]
 80066ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	601a      	str	r2, [r3, #0]
}
 80066e2:	bf00      	nop
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066ee:	b480      	push	{r7}
 80066f0:	b085      	sub	sp, #20
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006704:	d103      	bne.n	800670e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	e00c      	b.n	8006728 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	3308      	adds	r3, #8
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	e002      	b.n	800671c <vListInsert+0x2e>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	429a      	cmp	r2, r3
 8006726:	d2f6      	bcs.n	8006716 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	1c5a      	adds	r2, r3, #1
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	601a      	str	r2, [r3, #0]
}
 8006754:	bf00      	nop
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	6892      	ldr	r2, [r2, #8]
 8006776:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6852      	ldr	r2, [r2, #4]
 8006780:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	429a      	cmp	r2, r3
 800678a:	d103      	bne.n	8006794 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	1e5a      	subs	r2, r3, #1
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	3b04      	subs	r3, #4
 80067c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3b04      	subs	r3, #4
 80067d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f023 0201 	bic.w	r2, r3, #1
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3b04      	subs	r3, #4
 80067e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067e4:	4a0c      	ldr	r2, [pc, #48]	@ (8006818 <pxPortInitialiseStack+0x64>)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	3b14      	subs	r3, #20
 80067ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	3b04      	subs	r3, #4
 80067fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f06f 0202 	mvn.w	r2, #2
 8006802:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	3b20      	subs	r3, #32
 8006808:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800680a:	68fb      	ldr	r3, [r7, #12]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	0800681d 	.word	0x0800681d

0800681c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006822:	2300      	movs	r3, #0
 8006824:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006826:	4b13      	ldr	r3, [pc, #76]	@ (8006874 <prvTaskExitError+0x58>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800682e:	d00b      	beq.n	8006848 <prvTaskExitError+0x2c>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	60fb      	str	r3, [r7, #12]
}
 8006842:	bf00      	nop
 8006844:	bf00      	nop
 8006846:	e7fd      	b.n	8006844 <prvTaskExitError+0x28>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	60bb      	str	r3, [r7, #8]
}
 800685a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800685c:	bf00      	nop
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d0fc      	beq.n	800685e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	24000010 	.word	0x24000010
	...

08006880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006880:	4b07      	ldr	r3, [pc, #28]	@ (80068a0 <pxCurrentTCBConst2>)
 8006882:	6819      	ldr	r1, [r3, #0]
 8006884:	6808      	ldr	r0, [r1, #0]
 8006886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688a:	f380 8809 	msr	PSP, r0
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f04f 0000 	mov.w	r0, #0
 8006896:	f380 8811 	msr	BASEPRI, r0
 800689a:	4770      	bx	lr
 800689c:	f3af 8000 	nop.w

080068a0 <pxCurrentTCBConst2>:
 80068a0:	24004450 	.word	0x24004450
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop

080068a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80068a8:	4808      	ldr	r0, [pc, #32]	@ (80068cc <prvPortStartFirstTask+0x24>)
 80068aa:	6800      	ldr	r0, [r0, #0]
 80068ac:	6800      	ldr	r0, [r0, #0]
 80068ae:	f380 8808 	msr	MSP, r0
 80068b2:	f04f 0000 	mov.w	r0, #0
 80068b6:	f380 8814 	msr	CONTROL, r0
 80068ba:	b662      	cpsie	i
 80068bc:	b661      	cpsie	f
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	df00      	svc	0
 80068c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068ca:	bf00      	nop
 80068cc:	e000ed08 	.word	0xe000ed08

080068d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80068d6:	4b47      	ldr	r3, [pc, #284]	@ (80069f4 <xPortStartScheduler+0x124>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a47      	ldr	r2, [pc, #284]	@ (80069f8 <xPortStartScheduler+0x128>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d10b      	bne.n	80068f8 <xPortStartScheduler+0x28>
	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	60fb      	str	r3, [r7, #12]
}
 80068f2:	bf00      	nop
 80068f4:	bf00      	nop
 80068f6:	e7fd      	b.n	80068f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80068f8:	4b3e      	ldr	r3, [pc, #248]	@ (80069f4 <xPortStartScheduler+0x124>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a3f      	ldr	r2, [pc, #252]	@ (80069fc <xPortStartScheduler+0x12c>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d10b      	bne.n	800691a <xPortStartScheduler+0x4a>
	__asm volatile
 8006902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	613b      	str	r3, [r7, #16]
}
 8006914:	bf00      	nop
 8006916:	bf00      	nop
 8006918:	e7fd      	b.n	8006916 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800691a:	4b39      	ldr	r3, [pc, #228]	@ (8006a00 <xPortStartScheduler+0x130>)
 800691c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	b2db      	uxtb	r3, r3
 8006924:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	22ff      	movs	r2, #255	@ 0xff
 800692a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	b2db      	uxtb	r3, r3
 8006932:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006934:	78fb      	ldrb	r3, [r7, #3]
 8006936:	b2db      	uxtb	r3, r3
 8006938:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800693c:	b2da      	uxtb	r2, r3
 800693e:	4b31      	ldr	r3, [pc, #196]	@ (8006a04 <xPortStartScheduler+0x134>)
 8006940:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006942:	4b31      	ldr	r3, [pc, #196]	@ (8006a08 <xPortStartScheduler+0x138>)
 8006944:	2207      	movs	r2, #7
 8006946:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006948:	e009      	b.n	800695e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800694a:	4b2f      	ldr	r3, [pc, #188]	@ (8006a08 <xPortStartScheduler+0x138>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	3b01      	subs	r3, #1
 8006950:	4a2d      	ldr	r2, [pc, #180]	@ (8006a08 <xPortStartScheduler+0x138>)
 8006952:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006954:	78fb      	ldrb	r3, [r7, #3]
 8006956:	b2db      	uxtb	r3, r3
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	b2db      	uxtb	r3, r3
 800695c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	b2db      	uxtb	r3, r3
 8006962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006966:	2b80      	cmp	r3, #128	@ 0x80
 8006968:	d0ef      	beq.n	800694a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800696a:	4b27      	ldr	r3, [pc, #156]	@ (8006a08 <xPortStartScheduler+0x138>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f1c3 0307 	rsb	r3, r3, #7
 8006972:	2b04      	cmp	r3, #4
 8006974:	d00b      	beq.n	800698e <xPortStartScheduler+0xbe>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	60bb      	str	r3, [r7, #8]
}
 8006988:	bf00      	nop
 800698a:	bf00      	nop
 800698c:	e7fd      	b.n	800698a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800698e:	4b1e      	ldr	r3, [pc, #120]	@ (8006a08 <xPortStartScheduler+0x138>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	021b      	lsls	r3, r3, #8
 8006994:	4a1c      	ldr	r2, [pc, #112]	@ (8006a08 <xPortStartScheduler+0x138>)
 8006996:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006998:	4b1b      	ldr	r3, [pc, #108]	@ (8006a08 <xPortStartScheduler+0x138>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80069a0:	4a19      	ldr	r2, [pc, #100]	@ (8006a08 <xPortStartScheduler+0x138>)
 80069a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069ac:	4b17      	ldr	r3, [pc, #92]	@ (8006a0c <xPortStartScheduler+0x13c>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a16      	ldr	r2, [pc, #88]	@ (8006a0c <xPortStartScheduler+0x13c>)
 80069b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80069b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069b8:	4b14      	ldr	r3, [pc, #80]	@ (8006a0c <xPortStartScheduler+0x13c>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a13      	ldr	r2, [pc, #76]	@ (8006a0c <xPortStartScheduler+0x13c>)
 80069be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80069c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069c4:	f000 f8da 	bl	8006b7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069c8:	4b11      	ldr	r3, [pc, #68]	@ (8006a10 <xPortStartScheduler+0x140>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80069ce:	f000 f8f9 	bl	8006bc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069d2:	4b10      	ldr	r3, [pc, #64]	@ (8006a14 <xPortStartScheduler+0x144>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a0f      	ldr	r2, [pc, #60]	@ (8006a14 <xPortStartScheduler+0x144>)
 80069d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80069dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069de:	f7ff ff63 	bl	80068a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069e2:	f001 f9ef 	bl	8007dc4 <vTaskSwitchContext>
	prvTaskExitError();
 80069e6:	f7ff ff19 	bl	800681c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3718      	adds	r7, #24
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	e000ed00 	.word	0xe000ed00
 80069f8:	410fc271 	.word	0x410fc271
 80069fc:	410fc270 	.word	0x410fc270
 8006a00:	e000e400 	.word	0xe000e400
 8006a04:	24004408 	.word	0x24004408
 8006a08:	2400440c 	.word	0x2400440c
 8006a0c:	e000ed20 	.word	0xe000ed20
 8006a10:	24000010 	.word	0x24000010
 8006a14:	e000ef34 	.word	0xe000ef34

08006a18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	607b      	str	r3, [r7, #4]
}
 8006a30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a32:	4b10      	ldr	r3, [pc, #64]	@ (8006a74 <vPortEnterCritical+0x5c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3301      	adds	r3, #1
 8006a38:	4a0e      	ldr	r2, [pc, #56]	@ (8006a74 <vPortEnterCritical+0x5c>)
 8006a3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8006a74 <vPortEnterCritical+0x5c>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d110      	bne.n	8006a66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a44:	4b0c      	ldr	r3, [pc, #48]	@ (8006a78 <vPortEnterCritical+0x60>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00b      	beq.n	8006a66 <vPortEnterCritical+0x4e>
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	603b      	str	r3, [r7, #0]
}
 8006a60:	bf00      	nop
 8006a62:	bf00      	nop
 8006a64:	e7fd      	b.n	8006a62 <vPortEnterCritical+0x4a>
	}
}
 8006a66:	bf00      	nop
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	24000010 	.word	0x24000010
 8006a78:	e000ed04 	.word	0xe000ed04

08006a7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a82:	4b12      	ldr	r3, [pc, #72]	@ (8006acc <vPortExitCritical+0x50>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10b      	bne.n	8006aa2 <vPortExitCritical+0x26>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	607b      	str	r3, [r7, #4]
}
 8006a9c:	bf00      	nop
 8006a9e:	bf00      	nop
 8006aa0:	e7fd      	b.n	8006a9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8006acc <vPortExitCritical+0x50>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	4a08      	ldr	r2, [pc, #32]	@ (8006acc <vPortExitCritical+0x50>)
 8006aaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006aac:	4b07      	ldr	r3, [pc, #28]	@ (8006acc <vPortExitCritical+0x50>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d105      	bne.n	8006ac0 <vPortExitCritical+0x44>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006abe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	24000010 	.word	0x24000010

08006ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ad0:	f3ef 8009 	mrs	r0, PSP
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	4b15      	ldr	r3, [pc, #84]	@ (8006b30 <pxCurrentTCBConst>)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	f01e 0f10 	tst.w	lr, #16
 8006ae0:	bf08      	it	eq
 8006ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aea:	6010      	str	r0, [r2, #0]
 8006aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006af0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006af4:	f380 8811 	msr	BASEPRI, r0
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f001 f960 	bl	8007dc4 <vTaskSwitchContext>
 8006b04:	f04f 0000 	mov.w	r0, #0
 8006b08:	f380 8811 	msr	BASEPRI, r0
 8006b0c:	bc09      	pop	{r0, r3}
 8006b0e:	6819      	ldr	r1, [r3, #0]
 8006b10:	6808      	ldr	r0, [r1, #0]
 8006b12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b16:	f01e 0f10 	tst.w	lr, #16
 8006b1a:	bf08      	it	eq
 8006b1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b20:	f380 8809 	msr	PSP, r0
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	f3af 8000 	nop.w

08006b30 <pxCurrentTCBConst>:
 8006b30:	24004450 	.word	0x24004450
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b34:	bf00      	nop
 8006b36:	bf00      	nop

08006b38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	607b      	str	r3, [r7, #4]
}
 8006b50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b52:	f001 f87d 	bl	8007c50 <xTaskIncrementTick>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d003      	beq.n	8006b64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b5c:	4b06      	ldr	r3, [pc, #24]	@ (8006b78 <xPortSysTickHandler+0x40>)
 8006b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	2300      	movs	r3, #0
 8006b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	f383 8811 	msr	BASEPRI, r3
}
 8006b6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b70:	bf00      	nop
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	e000ed04 	.word	0xe000ed04

08006b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b80:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb0 <vPortSetupTimerInterrupt+0x34>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b86:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb4 <vPortSetupTimerInterrupt+0x38>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb8 <vPortSetupTimerInterrupt+0x3c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a0a      	ldr	r2, [pc, #40]	@ (8006bbc <vPortSetupTimerInterrupt+0x40>)
 8006b92:	fba2 2303 	umull	r2, r3, r2, r3
 8006b96:	099b      	lsrs	r3, r3, #6
 8006b98:	4a09      	ldr	r2, [pc, #36]	@ (8006bc0 <vPortSetupTimerInterrupt+0x44>)
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b9e:	4b04      	ldr	r3, [pc, #16]	@ (8006bb0 <vPortSetupTimerInterrupt+0x34>)
 8006ba0:	2207      	movs	r2, #7
 8006ba2:	601a      	str	r2, [r3, #0]
}
 8006ba4:	bf00      	nop
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	e000e010 	.word	0xe000e010
 8006bb4:	e000e018 	.word	0xe000e018
 8006bb8:	24000000 	.word	0x24000000
 8006bbc:	10624dd3 	.word	0x10624dd3
 8006bc0:	e000e014 	.word	0xe000e014

08006bc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006bc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006bd4 <vPortEnableVFP+0x10>
 8006bc8:	6801      	ldr	r1, [r0, #0]
 8006bca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006bce:	6001      	str	r1, [r0, #0]
 8006bd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006bd2:	bf00      	nop
 8006bd4:	e000ed88 	.word	0xe000ed88

08006bd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006bde:	f3ef 8305 	mrs	r3, IPSR
 8006be2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2b0f      	cmp	r3, #15
 8006be8:	d915      	bls.n	8006c16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006bea:	4a18      	ldr	r2, [pc, #96]	@ (8006c4c <vPortValidateInterruptPriority+0x74>)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4413      	add	r3, r2
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006bf4:	4b16      	ldr	r3, [pc, #88]	@ (8006c50 <vPortValidateInterruptPriority+0x78>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	7afa      	ldrb	r2, [r7, #11]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d20b      	bcs.n	8006c16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	607b      	str	r3, [r7, #4]
}
 8006c10:	bf00      	nop
 8006c12:	bf00      	nop
 8006c14:	e7fd      	b.n	8006c12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c16:	4b0f      	ldr	r3, [pc, #60]	@ (8006c54 <vPortValidateInterruptPriority+0x7c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8006c58 <vPortValidateInterruptPriority+0x80>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d90b      	bls.n	8006c3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	603b      	str	r3, [r7, #0]
}
 8006c38:	bf00      	nop
 8006c3a:	bf00      	nop
 8006c3c:	e7fd      	b.n	8006c3a <vPortValidateInterruptPriority+0x62>
	}
 8006c3e:	bf00      	nop
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	e000e3f0 	.word	0xe000e3f0
 8006c50:	24004408 	.word	0x24004408
 8006c54:	e000ed0c 	.word	0xe000ed0c
 8006c58:	2400440c 	.word	0x2400440c

08006c5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10b      	bne.n	8006c88 <xQueueGenericReset+0x2c>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	60bb      	str	r3, [r7, #8]
}
 8006c82:	bf00      	nop
 8006c84:	bf00      	nop
 8006c86:	e7fd      	b.n	8006c84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006c88:	f7ff fec6 	bl	8006a18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c94:	68f9      	ldr	r1, [r7, #12]
 8006c96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c98:	fb01 f303 	mul.w	r3, r1, r3
 8006c9c:	441a      	add	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	68f9      	ldr	r1, [r7, #12]
 8006cbc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006cbe:	fb01 f303 	mul.w	r3, r1, r3
 8006cc2:	441a      	add	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	22ff      	movs	r2, #255	@ 0xff
 8006ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	22ff      	movs	r2, #255	@ 0xff
 8006cd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d114      	bne.n	8006d08 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d01a      	beq.n	8006d1c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3310      	adds	r3, #16
 8006cea:	4618      	mov	r0, r3
 8006cec:	f001 f91a 	bl	8007f24 <xTaskRemoveFromEventList>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d012      	beq.n	8006d1c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d2c <xQueueGenericReset+0xd0>)
 8006cf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	e009      	b.n	8006d1c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	3310      	adds	r3, #16
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7ff fc9d 	bl	800664c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	3324      	adds	r3, #36	@ 0x24
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7ff fc98 	bl	800664c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d1c:	f7ff feae 	bl	8006a7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d20:	2301      	movs	r3, #1
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	e000ed04 	.word	0xe000ed04

08006d30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08e      	sub	sp, #56	@ 0x38
 8006d34:	af02      	add	r7, sp, #8
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
 8006d3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10b      	bne.n	8006d5c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d56:	bf00      	nop
 8006d58:	bf00      	nop
 8006d5a:	e7fd      	b.n	8006d58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10b      	bne.n	8006d7a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop
 8006d78:	e7fd      	b.n	8006d76 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d002      	beq.n	8006d86 <xQueueGenericCreateStatic+0x56>
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <xQueueGenericCreateStatic+0x5a>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <xQueueGenericCreateStatic+0x5c>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10b      	bne.n	8006da8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	623b      	str	r3, [r7, #32]
}
 8006da2:	bf00      	nop
 8006da4:	bf00      	nop
 8006da6:	e7fd      	b.n	8006da4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d102      	bne.n	8006db4 <xQueueGenericCreateStatic+0x84>
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <xQueueGenericCreateStatic+0x88>
 8006db4:	2301      	movs	r3, #1
 8006db6:	e000      	b.n	8006dba <xQueueGenericCreateStatic+0x8a>
 8006db8:	2300      	movs	r3, #0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10b      	bne.n	8006dd6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	61fb      	str	r3, [r7, #28]
}
 8006dd0:	bf00      	nop
 8006dd2:	bf00      	nop
 8006dd4:	e7fd      	b.n	8006dd2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006dd6:	2350      	movs	r3, #80	@ 0x50
 8006dd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2b50      	cmp	r3, #80	@ 0x50
 8006dde:	d00b      	beq.n	8006df8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	61bb      	str	r3, [r7, #24]
}
 8006df2:	bf00      	nop
 8006df4:	bf00      	nop
 8006df6:	e7fd      	b.n	8006df4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006df8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00d      	beq.n	8006e20 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e0c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	4613      	mov	r3, r2
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	68b9      	ldr	r1, [r7, #8]
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f000 f805 	bl	8006e2a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3730      	adds	r7, #48	@ 0x30
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	60f8      	str	r0, [r7, #12]
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	607a      	str	r2, [r7, #4]
 8006e36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d103      	bne.n	8006e46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	e002      	b.n	8006e4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e58:	2101      	movs	r1, #1
 8006e5a:	69b8      	ldr	r0, [r7, #24]
 8006e5c:	f7ff fefe 	bl	8006c5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	78fa      	ldrb	r2, [r7, #3]
 8006e64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e68:	bf00      	nop
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b08e      	sub	sp, #56	@ 0x38
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
 8006e7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10b      	bne.n	8006ea4 <xQueueGenericSend+0x34>
	__asm volatile
 8006e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006e9e:	bf00      	nop
 8006ea0:	bf00      	nop
 8006ea2:	e7fd      	b.n	8006ea0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d103      	bne.n	8006eb2 <xQueueGenericSend+0x42>
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <xQueueGenericSend+0x46>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e000      	b.n	8006eb8 <xQueueGenericSend+0x48>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10b      	bne.n	8006ed4 <xQueueGenericSend+0x64>
	__asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ece:	bf00      	nop
 8006ed0:	bf00      	nop
 8006ed2:	e7fd      	b.n	8006ed0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d103      	bne.n	8006ee2 <xQueueGenericSend+0x72>
 8006eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d101      	bne.n	8006ee6 <xQueueGenericSend+0x76>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e000      	b.n	8006ee8 <xQueueGenericSend+0x78>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10b      	bne.n	8006f04 <xQueueGenericSend+0x94>
	__asm volatile
 8006eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	623b      	str	r3, [r7, #32]
}
 8006efe:	bf00      	nop
 8006f00:	bf00      	nop
 8006f02:	e7fd      	b.n	8006f00 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f04:	f001 f9ce 	bl	80082a4 <xTaskGetSchedulerState>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d102      	bne.n	8006f14 <xQueueGenericSend+0xa4>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <xQueueGenericSend+0xa8>
 8006f14:	2301      	movs	r3, #1
 8006f16:	e000      	b.n	8006f1a <xQueueGenericSend+0xaa>
 8006f18:	2300      	movs	r3, #0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10b      	bne.n	8006f36 <xQueueGenericSend+0xc6>
	__asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	61fb      	str	r3, [r7, #28]
}
 8006f30:	bf00      	nop
 8006f32:	bf00      	nop
 8006f34:	e7fd      	b.n	8006f32 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f36:	f7ff fd6f 	bl	8006a18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d302      	bcc.n	8006f4c <xQueueGenericSend+0xdc>
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d129      	bne.n	8006fa0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	68b9      	ldr	r1, [r7, #8]
 8006f50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f52:	f000 fa0f 	bl	8007374 <prvCopyDataToQueue>
 8006f56:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d010      	beq.n	8006f82 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f62:	3324      	adds	r3, #36	@ 0x24
 8006f64:	4618      	mov	r0, r3
 8006f66:	f000 ffdd 	bl	8007f24 <xTaskRemoveFromEventList>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d013      	beq.n	8006f98 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f70:	4b3f      	ldr	r3, [pc, #252]	@ (8007070 <xQueueGenericSend+0x200>)
 8006f72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	e00a      	b.n	8006f98 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d007      	beq.n	8006f98 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f88:	4b39      	ldr	r3, [pc, #228]	@ (8007070 <xQueueGenericSend+0x200>)
 8006f8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f98:	f7ff fd70 	bl	8006a7c <vPortExitCritical>
				return pdPASS;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e063      	b.n	8007068 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d103      	bne.n	8006fae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fa6:	f7ff fd69 	bl	8006a7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006faa:	2300      	movs	r3, #0
 8006fac:	e05c      	b.n	8007068 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d106      	bne.n	8006fc2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fb4:	f107 0314 	add.w	r3, r7, #20
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f001 f817 	bl	8007fec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fc2:	f7ff fd5b 	bl	8006a7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fc6:	f000 fd87 	bl	8007ad8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fca:	f7ff fd25 	bl	8006a18 <vPortEnterCritical>
 8006fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fd4:	b25b      	sxtb	r3, r3
 8006fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fda:	d103      	bne.n	8006fe4 <xQueueGenericSend+0x174>
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fea:	b25b      	sxtb	r3, r3
 8006fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff0:	d103      	bne.n	8006ffa <xQueueGenericSend+0x18a>
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ffa:	f7ff fd3f 	bl	8006a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ffe:	1d3a      	adds	r2, r7, #4
 8007000:	f107 0314 	add.w	r3, r7, #20
 8007004:	4611      	mov	r1, r2
 8007006:	4618      	mov	r0, r3
 8007008:	f001 f806 	bl	8008018 <xTaskCheckForTimeOut>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d124      	bne.n	800705c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007012:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007014:	f000 faa6 	bl	8007564 <prvIsQueueFull>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d018      	beq.n	8007050 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800701e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007020:	3310      	adds	r3, #16
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	4611      	mov	r1, r2
 8007026:	4618      	mov	r0, r3
 8007028:	f000 ff2a 	bl	8007e80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800702c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800702e:	f000 fa31 	bl	8007494 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007032:	f000 fd5f 	bl	8007af4 <xTaskResumeAll>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	f47f af7c 	bne.w	8006f36 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800703e:	4b0c      	ldr	r3, [pc, #48]	@ (8007070 <xQueueGenericSend+0x200>)
 8007040:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007044:	601a      	str	r2, [r3, #0]
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	e772      	b.n	8006f36 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007050:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007052:	f000 fa1f 	bl	8007494 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007056:	f000 fd4d 	bl	8007af4 <xTaskResumeAll>
 800705a:	e76c      	b.n	8006f36 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800705c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800705e:	f000 fa19 	bl	8007494 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007062:	f000 fd47 	bl	8007af4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007066:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007068:	4618      	mov	r0, r3
 800706a:	3738      	adds	r7, #56	@ 0x38
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	e000ed04 	.word	0xe000ed04

08007074 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b090      	sub	sp, #64	@ 0x40
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10b      	bne.n	80070a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800709e:	bf00      	nop
 80070a0:	bf00      	nop
 80070a2:	e7fd      	b.n	80070a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d103      	bne.n	80070b2 <xQueueGenericSendFromISR+0x3e>
 80070aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <xQueueGenericSendFromISR+0x42>
 80070b2:	2301      	movs	r3, #1
 80070b4:	e000      	b.n	80070b8 <xQueueGenericSendFromISR+0x44>
 80070b6:	2300      	movs	r3, #0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10b      	bne.n	80070d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80070ce:	bf00      	nop
 80070d0:	bf00      	nop
 80070d2:	e7fd      	b.n	80070d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d103      	bne.n	80070e2 <xQueueGenericSendFromISR+0x6e>
 80070da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d101      	bne.n	80070e6 <xQueueGenericSendFromISR+0x72>
 80070e2:	2301      	movs	r3, #1
 80070e4:	e000      	b.n	80070e8 <xQueueGenericSendFromISR+0x74>
 80070e6:	2300      	movs	r3, #0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10b      	bne.n	8007104 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	623b      	str	r3, [r7, #32]
}
 80070fe:	bf00      	nop
 8007100:	bf00      	nop
 8007102:	e7fd      	b.n	8007100 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007104:	f7ff fd68 	bl	8006bd8 <vPortValidateInterruptPriority>
	__asm volatile
 8007108:	f3ef 8211 	mrs	r2, BASEPRI
 800710c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	61fa      	str	r2, [r7, #28]
 800711e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007120:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007122:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007126:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800712c:	429a      	cmp	r2, r3
 800712e:	d302      	bcc.n	8007136 <xQueueGenericSendFromISR+0xc2>
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	2b02      	cmp	r3, #2
 8007134:	d12f      	bne.n	8007196 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007138:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800713c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007144:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	68b9      	ldr	r1, [r7, #8]
 800714a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800714c:	f000 f912 	bl	8007374 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007150:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007158:	d112      	bne.n	8007180 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800715a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715e:	2b00      	cmp	r3, #0
 8007160:	d016      	beq.n	8007190 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007164:	3324      	adds	r3, #36	@ 0x24
 8007166:	4618      	mov	r0, r3
 8007168:	f000 fedc 	bl	8007f24 <xTaskRemoveFromEventList>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00e      	beq.n	8007190 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00b      	beq.n	8007190 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	e007      	b.n	8007190 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007180:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007184:	3301      	adds	r3, #1
 8007186:	b2db      	uxtb	r3, r3
 8007188:	b25a      	sxtb	r2, r3
 800718a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800718c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007190:	2301      	movs	r3, #1
 8007192:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007194:	e001      	b.n	800719a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007196:	2300      	movs	r3, #0
 8007198:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800719a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800719c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f383 8811 	msr	BASEPRI, r3
}
 80071a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3740      	adds	r7, #64	@ 0x40
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b08c      	sub	sp, #48	@ 0x30
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80071bc:	2300      	movs	r3, #0
 80071be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10b      	bne.n	80071e2 <xQueueReceive+0x32>
	__asm volatile
 80071ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	623b      	str	r3, [r7, #32]
}
 80071dc:	bf00      	nop
 80071de:	bf00      	nop
 80071e0:	e7fd      	b.n	80071de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d103      	bne.n	80071f0 <xQueueReceive+0x40>
 80071e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <xQueueReceive+0x44>
 80071f0:	2301      	movs	r3, #1
 80071f2:	e000      	b.n	80071f6 <xQueueReceive+0x46>
 80071f4:	2300      	movs	r3, #0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10b      	bne.n	8007212 <xQueueReceive+0x62>
	__asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	61fb      	str	r3, [r7, #28]
}
 800720c:	bf00      	nop
 800720e:	bf00      	nop
 8007210:	e7fd      	b.n	800720e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007212:	f001 f847 	bl	80082a4 <xTaskGetSchedulerState>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d102      	bne.n	8007222 <xQueueReceive+0x72>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <xQueueReceive+0x76>
 8007222:	2301      	movs	r3, #1
 8007224:	e000      	b.n	8007228 <xQueueReceive+0x78>
 8007226:	2300      	movs	r3, #0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10b      	bne.n	8007244 <xQueueReceive+0x94>
	__asm volatile
 800722c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	61bb      	str	r3, [r7, #24]
}
 800723e:	bf00      	nop
 8007240:	bf00      	nop
 8007242:	e7fd      	b.n	8007240 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007244:	f7ff fbe8 	bl	8006a18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800724e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007250:	2b00      	cmp	r3, #0
 8007252:	d01f      	beq.n	8007294 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007254:	68b9      	ldr	r1, [r7, #8]
 8007256:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007258:	f000 f8f6 	bl	8007448 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800725c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725e:	1e5a      	subs	r2, r3, #1
 8007260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007262:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00f      	beq.n	800728c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800726c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800726e:	3310      	adds	r3, #16
 8007270:	4618      	mov	r0, r3
 8007272:	f000 fe57 	bl	8007f24 <xTaskRemoveFromEventList>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d007      	beq.n	800728c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800727c:	4b3c      	ldr	r3, [pc, #240]	@ (8007370 <xQueueReceive+0x1c0>)
 800727e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800728c:	f7ff fbf6 	bl	8006a7c <vPortExitCritical>
				return pdPASS;
 8007290:	2301      	movs	r3, #1
 8007292:	e069      	b.n	8007368 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d103      	bne.n	80072a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800729a:	f7ff fbef 	bl	8006a7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800729e:	2300      	movs	r3, #0
 80072a0:	e062      	b.n	8007368 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d106      	bne.n	80072b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072a8:	f107 0310 	add.w	r3, r7, #16
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 fe9d 	bl	8007fec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072b2:	2301      	movs	r3, #1
 80072b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072b6:	f7ff fbe1 	bl	8006a7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072ba:	f000 fc0d 	bl	8007ad8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072be:	f7ff fbab 	bl	8006a18 <vPortEnterCritical>
 80072c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072c8:	b25b      	sxtb	r3, r3
 80072ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ce:	d103      	bne.n	80072d8 <xQueueReceive+0x128>
 80072d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072de:	b25b      	sxtb	r3, r3
 80072e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e4:	d103      	bne.n	80072ee <xQueueReceive+0x13e>
 80072e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072ee:	f7ff fbc5 	bl	8006a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072f2:	1d3a      	adds	r2, r7, #4
 80072f4:	f107 0310 	add.w	r3, r7, #16
 80072f8:	4611      	mov	r1, r2
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 fe8c 	bl	8008018 <xTaskCheckForTimeOut>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d123      	bne.n	800734e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007306:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007308:	f000 f916 	bl	8007538 <prvIsQueueEmpty>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d017      	beq.n	8007342 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007314:	3324      	adds	r3, #36	@ 0x24
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	4611      	mov	r1, r2
 800731a:	4618      	mov	r0, r3
 800731c:	f000 fdb0 	bl	8007e80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007320:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007322:	f000 f8b7 	bl	8007494 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007326:	f000 fbe5 	bl	8007af4 <xTaskResumeAll>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d189      	bne.n	8007244 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007330:	4b0f      	ldr	r3, [pc, #60]	@ (8007370 <xQueueReceive+0x1c0>)
 8007332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	e780      	b.n	8007244 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007342:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007344:	f000 f8a6 	bl	8007494 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007348:	f000 fbd4 	bl	8007af4 <xTaskResumeAll>
 800734c:	e77a      	b.n	8007244 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800734e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007350:	f000 f8a0 	bl	8007494 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007354:	f000 fbce 	bl	8007af4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007358:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800735a:	f000 f8ed 	bl	8007538 <prvIsQueueEmpty>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	f43f af6f 	beq.w	8007244 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007366:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007368:	4618      	mov	r0, r3
 800736a:	3730      	adds	r7, #48	@ 0x30
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	e000ed04 	.word	0xe000ed04

08007374 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007380:	2300      	movs	r3, #0
 8007382:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007388:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10d      	bne.n	80073ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d14d      	bne.n	8007436 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 ff9e 	bl	80082e0 <xTaskPriorityDisinherit>
 80073a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	609a      	str	r2, [r3, #8]
 80073ac:	e043      	b.n	8007436 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d119      	bne.n	80073e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6858      	ldr	r0, [r3, #4]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073bc:	461a      	mov	r2, r3
 80073be:	68b9      	ldr	r1, [r7, #8]
 80073c0:	f001 fbd8 	bl	8008b74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073cc:	441a      	add	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d32b      	bcc.n	8007436 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	605a      	str	r2, [r3, #4]
 80073e6:	e026      	b.n	8007436 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	68d8      	ldr	r0, [r3, #12]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f0:	461a      	mov	r2, r3
 80073f2:	68b9      	ldr	r1, [r7, #8]
 80073f4:	f001 fbbe 	bl	8008b74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	68da      	ldr	r2, [r3, #12]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007400:	425b      	negs	r3, r3
 8007402:	441a      	add	r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	68da      	ldr	r2, [r3, #12]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d207      	bcs.n	8007424 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741c:	425b      	negs	r3, r3
 800741e:	441a      	add	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b02      	cmp	r3, #2
 8007428:	d105      	bne.n	8007436 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	3b01      	subs	r3, #1
 8007434:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	1c5a      	adds	r2, r3, #1
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800743e:	697b      	ldr	r3, [r7, #20]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007456:	2b00      	cmp	r3, #0
 8007458:	d018      	beq.n	800748c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68da      	ldr	r2, [r3, #12]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007462:	441a      	add	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68da      	ldr	r2, [r3, #12]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	429a      	cmp	r2, r3
 8007472:	d303      	bcc.n	800747c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68d9      	ldr	r1, [r3, #12]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007484:	461a      	mov	r2, r3
 8007486:	6838      	ldr	r0, [r7, #0]
 8007488:	f001 fb74 	bl	8008b74 <memcpy>
	}
}
 800748c:	bf00      	nop
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800749c:	f7ff fabc 	bl	8006a18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074a8:	e011      	b.n	80074ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d012      	beq.n	80074d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	3324      	adds	r3, #36	@ 0x24
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 fd34 	bl	8007f24 <xTaskRemoveFromEventList>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80074c2:	f000 fe0d 	bl	80080e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
 80074c8:	3b01      	subs	r3, #1
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	dce9      	bgt.n	80074aa <prvUnlockQueue+0x16>
 80074d6:	e000      	b.n	80074da <prvUnlockQueue+0x46>
					break;
 80074d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	22ff      	movs	r2, #255	@ 0xff
 80074de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80074e2:	f7ff facb 	bl	8006a7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80074e6:	f7ff fa97 	bl	8006a18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074f2:	e011      	b.n	8007518 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d012      	beq.n	8007522 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	3310      	adds	r3, #16
 8007500:	4618      	mov	r0, r3
 8007502:	f000 fd0f 	bl	8007f24 <xTaskRemoveFromEventList>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d001      	beq.n	8007510 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800750c:	f000 fde8 	bl	80080e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	3b01      	subs	r3, #1
 8007514:	b2db      	uxtb	r3, r3
 8007516:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800751c:	2b00      	cmp	r3, #0
 800751e:	dce9      	bgt.n	80074f4 <prvUnlockQueue+0x60>
 8007520:	e000      	b.n	8007524 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007522:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	22ff      	movs	r2, #255	@ 0xff
 8007528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800752c:	f7ff faa6 	bl	8006a7c <vPortExitCritical>
}
 8007530:	bf00      	nop
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007540:	f7ff fa6a 	bl	8006a18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007548:	2b00      	cmp	r3, #0
 800754a:	d102      	bne.n	8007552 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800754c:	2301      	movs	r3, #1
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	e001      	b.n	8007556 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007552:	2300      	movs	r3, #0
 8007554:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007556:	f7ff fa91 	bl	8006a7c <vPortExitCritical>

	return xReturn;
 800755a:	68fb      	ldr	r3, [r7, #12]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800756c:	f7ff fa54 	bl	8006a18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007578:	429a      	cmp	r2, r3
 800757a:	d102      	bne.n	8007582 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800757c:	2301      	movs	r3, #1
 800757e:	60fb      	str	r3, [r7, #12]
 8007580:	e001      	b.n	8007586 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007582:	2300      	movs	r3, #0
 8007584:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007586:	f7ff fa79 	bl	8006a7c <vPortExitCritical>

	return xReturn;
 800758a:	68fb      	ldr	r3, [r7, #12]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800759e:	2300      	movs	r3, #0
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	e014      	b.n	80075ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80075a4:	4a0f      	ldr	r2, [pc, #60]	@ (80075e4 <vQueueAddToRegistry+0x50>)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10b      	bne.n	80075c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80075b0:	490c      	ldr	r1, [pc, #48]	@ (80075e4 <vQueueAddToRegistry+0x50>)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80075ba:	4a0a      	ldr	r2, [pc, #40]	@ (80075e4 <vQueueAddToRegistry+0x50>)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	00db      	lsls	r3, r3, #3
 80075c0:	4413      	add	r3, r2
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80075c6:	e006      	b.n	80075d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3301      	adds	r3, #1
 80075cc:	60fb      	str	r3, [r7, #12]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2b07      	cmp	r3, #7
 80075d2:	d9e7      	bls.n	80075a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	24004410 	.word	0x24004410

080075e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80075f8:	f7ff fa0e 	bl	8006a18 <vPortEnterCritical>
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007602:	b25b      	sxtb	r3, r3
 8007604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007608:	d103      	bne.n	8007612 <vQueueWaitForMessageRestricted+0x2a>
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007618:	b25b      	sxtb	r3, r3
 800761a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800761e:	d103      	bne.n	8007628 <vQueueWaitForMessageRestricted+0x40>
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007628:	f7ff fa28 	bl	8006a7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007630:	2b00      	cmp	r3, #0
 8007632:	d106      	bne.n	8007642 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	3324      	adds	r3, #36	@ 0x24
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	68b9      	ldr	r1, [r7, #8]
 800763c:	4618      	mov	r0, r3
 800763e:	f000 fc45 	bl	8007ecc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007642:	6978      	ldr	r0, [r7, #20]
 8007644:	f7ff ff26 	bl	8007494 <prvUnlockQueue>
	}
 8007648:	bf00      	nop
 800764a:	3718      	adds	r7, #24
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007650:	b580      	push	{r7, lr}
 8007652:	b08e      	sub	sp, #56	@ 0x38
 8007654:	af04      	add	r7, sp, #16
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
 800765c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800765e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10b      	bne.n	800767c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007668:	f383 8811 	msr	BASEPRI, r3
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	f3bf 8f4f 	dsb	sy
 8007674:	623b      	str	r3, [r7, #32]
}
 8007676:	bf00      	nop
 8007678:	bf00      	nop
 800767a:	e7fd      	b.n	8007678 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800767c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10b      	bne.n	800769a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007686:	f383 8811 	msr	BASEPRI, r3
 800768a:	f3bf 8f6f 	isb	sy
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	61fb      	str	r3, [r7, #28]
}
 8007694:	bf00      	nop
 8007696:	bf00      	nop
 8007698:	e7fd      	b.n	8007696 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800769a:	235c      	movs	r3, #92	@ 0x5c
 800769c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80076a2:	d00b      	beq.n	80076bc <xTaskCreateStatic+0x6c>
	__asm volatile
 80076a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a8:	f383 8811 	msr	BASEPRI, r3
 80076ac:	f3bf 8f6f 	isb	sy
 80076b0:	f3bf 8f4f 	dsb	sy
 80076b4:	61bb      	str	r3, [r7, #24]
}
 80076b6:	bf00      	nop
 80076b8:	bf00      	nop
 80076ba:	e7fd      	b.n	80076b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80076bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80076be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d01e      	beq.n	8007702 <xTaskCreateStatic+0xb2>
 80076c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d01b      	beq.n	8007702 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80076d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d6:	2202      	movs	r2, #2
 80076d8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076dc:	2300      	movs	r3, #0
 80076de:	9303      	str	r3, [sp, #12]
 80076e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e2:	9302      	str	r3, [sp, #8]
 80076e4:	f107 0314 	add.w	r3, r7, #20
 80076e8:	9301      	str	r3, [sp, #4]
 80076ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	68b9      	ldr	r1, [r7, #8]
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f000 f850 	bl	800779a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80076fc:	f000 f8de 	bl	80078bc <prvAddNewTaskToReadyList>
 8007700:	e001      	b.n	8007706 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007702:	2300      	movs	r3, #0
 8007704:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007706:	697b      	ldr	r3, [r7, #20]
	}
 8007708:	4618      	mov	r0, r3
 800770a:	3728      	adds	r7, #40	@ 0x28
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08c      	sub	sp, #48	@ 0x30
 8007714:	af04      	add	r7, sp, #16
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	603b      	str	r3, [r7, #0]
 800771c:	4613      	mov	r3, r2
 800771e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007720:	88fb      	ldrh	r3, [r7, #6]
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4618      	mov	r0, r3
 8007726:	f7fe fda3 	bl	8006270 <pvPortMalloc>
 800772a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00e      	beq.n	8007750 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007732:	205c      	movs	r0, #92	@ 0x5c
 8007734:	f7fe fd9c 	bl	8006270 <pvPortMalloc>
 8007738:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d003      	beq.n	8007748 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	631a      	str	r2, [r3, #48]	@ 0x30
 8007746:	e005      	b.n	8007754 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007748:	6978      	ldr	r0, [r7, #20]
 800774a:	f7fe fe5f 	bl	800640c <vPortFree>
 800774e:	e001      	b.n	8007754 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007750:	2300      	movs	r3, #0
 8007752:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d017      	beq.n	800778a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007762:	88fa      	ldrh	r2, [r7, #6]
 8007764:	2300      	movs	r3, #0
 8007766:	9303      	str	r3, [sp, #12]
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	9302      	str	r3, [sp, #8]
 800776c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800776e:	9301      	str	r3, [sp, #4]
 8007770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	68b9      	ldr	r1, [r7, #8]
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 f80e 	bl	800779a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800777e:	69f8      	ldr	r0, [r7, #28]
 8007780:	f000 f89c 	bl	80078bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007784:	2301      	movs	r3, #1
 8007786:	61bb      	str	r3, [r7, #24]
 8007788:	e002      	b.n	8007790 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800778a:	f04f 33ff 	mov.w	r3, #4294967295
 800778e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007790:	69bb      	ldr	r3, [r7, #24]
	}
 8007792:	4618      	mov	r0, r3
 8007794:	3720      	adds	r7, #32
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b088      	sub	sp, #32
 800779e:	af00      	add	r7, sp, #0
 80077a0:	60f8      	str	r0, [r7, #12]
 80077a2:	60b9      	str	r1, [r7, #8]
 80077a4:	607a      	str	r2, [r7, #4]
 80077a6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80077a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077aa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	461a      	mov	r2, r3
 80077b2:	21a5      	movs	r1, #165	@ 0xa5
 80077b4:	f001 f9b2 	bl	8008b1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80077b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077bc:	6879      	ldr	r1, [r7, #4]
 80077be:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80077c2:	440b      	add	r3, r1
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	f023 0307 	bic.w	r3, r3, #7
 80077d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	f003 0307 	and.w	r3, r3, #7
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00b      	beq.n	80077f4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80077dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	617b      	str	r3, [r7, #20]
}
 80077ee:	bf00      	nop
 80077f0:	bf00      	nop
 80077f2:	e7fd      	b.n	80077f0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d01f      	beq.n	800783a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077fa:	2300      	movs	r3, #0
 80077fc:	61fb      	str	r3, [r7, #28]
 80077fe:	e012      	b.n	8007826 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	4413      	add	r3, r2
 8007806:	7819      	ldrb	r1, [r3, #0]
 8007808:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	4413      	add	r3, r2
 800780e:	3334      	adds	r3, #52	@ 0x34
 8007810:	460a      	mov	r2, r1
 8007812:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	4413      	add	r3, r2
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d006      	beq.n	800782e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	3301      	adds	r3, #1
 8007824:	61fb      	str	r3, [r7, #28]
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	2b0f      	cmp	r3, #15
 800782a:	d9e9      	bls.n	8007800 <prvInitialiseNewTask+0x66>
 800782c:	e000      	b.n	8007830 <prvInitialiseNewTask+0x96>
			{
				break;
 800782e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007832:	2200      	movs	r2, #0
 8007834:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007838:	e003      	b.n	8007842 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800783a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007844:	2b37      	cmp	r3, #55	@ 0x37
 8007846:	d901      	bls.n	800784c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007848:	2337      	movs	r3, #55	@ 0x37
 800784a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800784c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007850:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007854:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007856:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785a:	2200      	movs	r2, #0
 800785c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800785e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007860:	3304      	adds	r3, #4
 8007862:	4618      	mov	r0, r3
 8007864:	f7fe ff12 	bl	800668c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800786a:	3318      	adds	r3, #24
 800786c:	4618      	mov	r0, r3
 800786e:	f7fe ff0d 	bl	800668c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007876:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800787a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800787e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007880:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007884:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007886:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788a:	2200      	movs	r2, #0
 800788c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800788e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	68f9      	ldr	r1, [r7, #12]
 800789a:	69b8      	ldr	r0, [r7, #24]
 800789c:	f7fe ff8a 	bl	80067b4 <pxPortInitialiseStack>
 80078a0:	4602      	mov	r2, r0
 80078a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80078a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80078ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078b2:	bf00      	nop
 80078b4:	3720      	adds	r7, #32
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
	...

080078bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078c4:	f7ff f8a8 	bl	8006a18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078c8:	4b2d      	ldr	r3, [pc, #180]	@ (8007980 <prvAddNewTaskToReadyList+0xc4>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3301      	adds	r3, #1
 80078ce:	4a2c      	ldr	r2, [pc, #176]	@ (8007980 <prvAddNewTaskToReadyList+0xc4>)
 80078d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078d2:	4b2c      	ldr	r3, [pc, #176]	@ (8007984 <prvAddNewTaskToReadyList+0xc8>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d109      	bne.n	80078ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078da:	4a2a      	ldr	r2, [pc, #168]	@ (8007984 <prvAddNewTaskToReadyList+0xc8>)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078e0:	4b27      	ldr	r3, [pc, #156]	@ (8007980 <prvAddNewTaskToReadyList+0xc4>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d110      	bne.n	800790a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078e8:	f000 fc1e 	bl	8008128 <prvInitialiseTaskLists>
 80078ec:	e00d      	b.n	800790a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078ee:	4b26      	ldr	r3, [pc, #152]	@ (8007988 <prvAddNewTaskToReadyList+0xcc>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d109      	bne.n	800790a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078f6:	4b23      	ldr	r3, [pc, #140]	@ (8007984 <prvAddNewTaskToReadyList+0xc8>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007900:	429a      	cmp	r2, r3
 8007902:	d802      	bhi.n	800790a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007904:	4a1f      	ldr	r2, [pc, #124]	@ (8007984 <prvAddNewTaskToReadyList+0xc8>)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800790a:	4b20      	ldr	r3, [pc, #128]	@ (800798c <prvAddNewTaskToReadyList+0xd0>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	3301      	adds	r3, #1
 8007910:	4a1e      	ldr	r2, [pc, #120]	@ (800798c <prvAddNewTaskToReadyList+0xd0>)
 8007912:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007914:	4b1d      	ldr	r3, [pc, #116]	@ (800798c <prvAddNewTaskToReadyList+0xd0>)
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007920:	4b1b      	ldr	r3, [pc, #108]	@ (8007990 <prvAddNewTaskToReadyList+0xd4>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	429a      	cmp	r2, r3
 8007926:	d903      	bls.n	8007930 <prvAddNewTaskToReadyList+0x74>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800792c:	4a18      	ldr	r2, [pc, #96]	@ (8007990 <prvAddNewTaskToReadyList+0xd4>)
 800792e:	6013      	str	r3, [r2, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007934:	4613      	mov	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4a15      	ldr	r2, [pc, #84]	@ (8007994 <prvAddNewTaskToReadyList+0xd8>)
 800793e:	441a      	add	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	3304      	adds	r3, #4
 8007944:	4619      	mov	r1, r3
 8007946:	4610      	mov	r0, r2
 8007948:	f7fe fead 	bl	80066a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800794c:	f7ff f896 	bl	8006a7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007950:	4b0d      	ldr	r3, [pc, #52]	@ (8007988 <prvAddNewTaskToReadyList+0xcc>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00e      	beq.n	8007976 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007958:	4b0a      	ldr	r3, [pc, #40]	@ (8007984 <prvAddNewTaskToReadyList+0xc8>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007962:	429a      	cmp	r2, r3
 8007964:	d207      	bcs.n	8007976 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007966:	4b0c      	ldr	r3, [pc, #48]	@ (8007998 <prvAddNewTaskToReadyList+0xdc>)
 8007968:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007976:	bf00      	nop
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	24004924 	.word	0x24004924
 8007984:	24004450 	.word	0x24004450
 8007988:	24004930 	.word	0x24004930
 800798c:	24004940 	.word	0x24004940
 8007990:	2400492c 	.word	0x2400492c
 8007994:	24004454 	.word	0x24004454
 8007998:	e000ed04 	.word	0xe000ed04

0800799c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d018      	beq.n	80079e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80079ae:	4b14      	ldr	r3, [pc, #80]	@ (8007a00 <vTaskDelay+0x64>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00b      	beq.n	80079ce <vTaskDelay+0x32>
	__asm volatile
 80079b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	60bb      	str	r3, [r7, #8]
}
 80079c8:	bf00      	nop
 80079ca:	bf00      	nop
 80079cc:	e7fd      	b.n	80079ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80079ce:	f000 f883 	bl	8007ad8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079d2:	2100      	movs	r1, #0
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fcf3 	bl	80083c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80079da:	f000 f88b 	bl	8007af4 <xTaskResumeAll>
 80079de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d107      	bne.n	80079f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80079e6:	4b07      	ldr	r3, [pc, #28]	@ (8007a04 <vTaskDelay+0x68>)
 80079e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079ec:	601a      	str	r2, [r3, #0]
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079f6:	bf00      	nop
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	2400494c 	.word	0x2400494c
 8007a04:	e000ed04 	.word	0xe000ed04

08007a08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08a      	sub	sp, #40	@ 0x28
 8007a0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a16:	463a      	mov	r2, r7
 8007a18:	1d39      	adds	r1, r7, #4
 8007a1a:	f107 0308 	add.w	r3, r7, #8
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fe fbf2 	bl	8006208 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	9202      	str	r2, [sp, #8]
 8007a2c:	9301      	str	r3, [sp, #4]
 8007a2e:	2300      	movs	r3, #0
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	2300      	movs	r3, #0
 8007a34:	460a      	mov	r2, r1
 8007a36:	4922      	ldr	r1, [pc, #136]	@ (8007ac0 <vTaskStartScheduler+0xb8>)
 8007a38:	4822      	ldr	r0, [pc, #136]	@ (8007ac4 <vTaskStartScheduler+0xbc>)
 8007a3a:	f7ff fe09 	bl	8007650 <xTaskCreateStatic>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	4a21      	ldr	r2, [pc, #132]	@ (8007ac8 <vTaskStartScheduler+0xc0>)
 8007a42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a44:	4b20      	ldr	r3, [pc, #128]	@ (8007ac8 <vTaskStartScheduler+0xc0>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d002      	beq.n	8007a52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	617b      	str	r3, [r7, #20]
 8007a50:	e001      	b.n	8007a56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d102      	bne.n	8007a62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007a5c:	f000 fd04 	bl	8008468 <xTimerCreateTimerTask>
 8007a60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d116      	bne.n	8007a96 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a6c:	f383 8811 	msr	BASEPRI, r3
 8007a70:	f3bf 8f6f 	isb	sy
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	613b      	str	r3, [r7, #16]
}
 8007a7a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a7c:	4b13      	ldr	r3, [pc, #76]	@ (8007acc <vTaskStartScheduler+0xc4>)
 8007a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a84:	4b12      	ldr	r3, [pc, #72]	@ (8007ad0 <vTaskStartScheduler+0xc8>)
 8007a86:	2201      	movs	r2, #1
 8007a88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a8a:	4b12      	ldr	r3, [pc, #72]	@ (8007ad4 <vTaskStartScheduler+0xcc>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a90:	f7fe ff1e 	bl	80068d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a94:	e00f      	b.n	8007ab6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9c:	d10b      	bne.n	8007ab6 <vTaskStartScheduler+0xae>
	__asm volatile
 8007a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	60fb      	str	r3, [r7, #12]
}
 8007ab0:	bf00      	nop
 8007ab2:	bf00      	nop
 8007ab4:	e7fd      	b.n	8007ab2 <vTaskStartScheduler+0xaa>
}
 8007ab6:	bf00      	nop
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	08008bb4 	.word	0x08008bb4
 8007ac4:	080080f9 	.word	0x080080f9
 8007ac8:	24004948 	.word	0x24004948
 8007acc:	24004944 	.word	0x24004944
 8007ad0:	24004930 	.word	0x24004930
 8007ad4:	24004928 	.word	0x24004928

08007ad8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ad8:	b480      	push	{r7}
 8007ada:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007adc:	4b04      	ldr	r3, [pc, #16]	@ (8007af0 <vTaskSuspendAll+0x18>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	4a03      	ldr	r2, [pc, #12]	@ (8007af0 <vTaskSuspendAll+0x18>)
 8007ae4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007ae6:	bf00      	nop
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	2400494c 	.word	0x2400494c

08007af4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007afa:	2300      	movs	r3, #0
 8007afc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007afe:	2300      	movs	r3, #0
 8007b00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b02:	4b42      	ldr	r3, [pc, #264]	@ (8007c0c <xTaskResumeAll+0x118>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10b      	bne.n	8007b22 <xTaskResumeAll+0x2e>
	__asm volatile
 8007b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b0e:	f383 8811 	msr	BASEPRI, r3
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	603b      	str	r3, [r7, #0]
}
 8007b1c:	bf00      	nop
 8007b1e:	bf00      	nop
 8007b20:	e7fd      	b.n	8007b1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b22:	f7fe ff79 	bl	8006a18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b26:	4b39      	ldr	r3, [pc, #228]	@ (8007c0c <xTaskResumeAll+0x118>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	4a37      	ldr	r2, [pc, #220]	@ (8007c0c <xTaskResumeAll+0x118>)
 8007b2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b30:	4b36      	ldr	r3, [pc, #216]	@ (8007c0c <xTaskResumeAll+0x118>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d162      	bne.n	8007bfe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b38:	4b35      	ldr	r3, [pc, #212]	@ (8007c10 <xTaskResumeAll+0x11c>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d05e      	beq.n	8007bfe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b40:	e02f      	b.n	8007ba2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b42:	4b34      	ldr	r3, [pc, #208]	@ (8007c14 <xTaskResumeAll+0x120>)
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3318      	adds	r3, #24
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fe fe06 	bl	8006760 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	3304      	adds	r3, #4
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fe fe01 	bl	8006760 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b62:	4b2d      	ldr	r3, [pc, #180]	@ (8007c18 <xTaskResumeAll+0x124>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d903      	bls.n	8007b72 <xTaskResumeAll+0x7e>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b6e:	4a2a      	ldr	r2, [pc, #168]	@ (8007c18 <xTaskResumeAll+0x124>)
 8007b70:	6013      	str	r3, [r2, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b76:	4613      	mov	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4a27      	ldr	r2, [pc, #156]	@ (8007c1c <xTaskResumeAll+0x128>)
 8007b80:	441a      	add	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	3304      	adds	r3, #4
 8007b86:	4619      	mov	r1, r3
 8007b88:	4610      	mov	r0, r2
 8007b8a:	f7fe fd8c 	bl	80066a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b92:	4b23      	ldr	r3, [pc, #140]	@ (8007c20 <xTaskResumeAll+0x12c>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d302      	bcc.n	8007ba2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007b9c:	4b21      	ldr	r3, [pc, #132]	@ (8007c24 <xTaskResumeAll+0x130>)
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8007c14 <xTaskResumeAll+0x120>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1cb      	bne.n	8007b42 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007bb0:	f000 fb58 	bl	8008264 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8007c28 <xTaskResumeAll+0x134>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d010      	beq.n	8007be2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007bc0:	f000 f846 	bl	8007c50 <xTaskIncrementTick>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d002      	beq.n	8007bd0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007bca:	4b16      	ldr	r3, [pc, #88]	@ (8007c24 <xTaskResumeAll+0x130>)
 8007bcc:	2201      	movs	r2, #1
 8007bce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1f1      	bne.n	8007bc0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007bdc:	4b12      	ldr	r3, [pc, #72]	@ (8007c28 <xTaskResumeAll+0x134>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007be2:	4b10      	ldr	r3, [pc, #64]	@ (8007c24 <xTaskResumeAll+0x130>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d009      	beq.n	8007bfe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007bea:	2301      	movs	r3, #1
 8007bec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007bee:	4b0f      	ldr	r3, [pc, #60]	@ (8007c2c <xTaskResumeAll+0x138>)
 8007bf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bf4:	601a      	str	r2, [r3, #0]
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007bfe:	f7fe ff3d 	bl	8006a7c <vPortExitCritical>

	return xAlreadyYielded;
 8007c02:	68bb      	ldr	r3, [r7, #8]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	2400494c 	.word	0x2400494c
 8007c10:	24004924 	.word	0x24004924
 8007c14:	240048e4 	.word	0x240048e4
 8007c18:	2400492c 	.word	0x2400492c
 8007c1c:	24004454 	.word	0x24004454
 8007c20:	24004450 	.word	0x24004450
 8007c24:	24004938 	.word	0x24004938
 8007c28:	24004934 	.word	0x24004934
 8007c2c:	e000ed04 	.word	0xe000ed04

08007c30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c36:	4b05      	ldr	r3, [pc, #20]	@ (8007c4c <xTaskGetTickCount+0x1c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c3c:	687b      	ldr	r3, [r7, #4]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	24004928 	.word	0x24004928

08007c50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c56:	2300      	movs	r3, #0
 8007c58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c5a:	4b4f      	ldr	r3, [pc, #316]	@ (8007d98 <xTaskIncrementTick+0x148>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f040 8090 	bne.w	8007d84 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c64:	4b4d      	ldr	r3, [pc, #308]	@ (8007d9c <xTaskIncrementTick+0x14c>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c6c:	4a4b      	ldr	r2, [pc, #300]	@ (8007d9c <xTaskIncrementTick+0x14c>)
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d121      	bne.n	8007cbc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c78:	4b49      	ldr	r3, [pc, #292]	@ (8007da0 <xTaskIncrementTick+0x150>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00b      	beq.n	8007c9a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	603b      	str	r3, [r7, #0]
}
 8007c94:	bf00      	nop
 8007c96:	bf00      	nop
 8007c98:	e7fd      	b.n	8007c96 <xTaskIncrementTick+0x46>
 8007c9a:	4b41      	ldr	r3, [pc, #260]	@ (8007da0 <xTaskIncrementTick+0x150>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	60fb      	str	r3, [r7, #12]
 8007ca0:	4b40      	ldr	r3, [pc, #256]	@ (8007da4 <xTaskIncrementTick+0x154>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a3e      	ldr	r2, [pc, #248]	@ (8007da0 <xTaskIncrementTick+0x150>)
 8007ca6:	6013      	str	r3, [r2, #0]
 8007ca8:	4a3e      	ldr	r2, [pc, #248]	@ (8007da4 <xTaskIncrementTick+0x154>)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6013      	str	r3, [r2, #0]
 8007cae:	4b3e      	ldr	r3, [pc, #248]	@ (8007da8 <xTaskIncrementTick+0x158>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	4a3c      	ldr	r2, [pc, #240]	@ (8007da8 <xTaskIncrementTick+0x158>)
 8007cb6:	6013      	str	r3, [r2, #0]
 8007cb8:	f000 fad4 	bl	8008264 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8007dac <xTaskIncrementTick+0x15c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d349      	bcc.n	8007d5a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cc6:	4b36      	ldr	r3, [pc, #216]	@ (8007da0 <xTaskIncrementTick+0x150>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d104      	bne.n	8007cda <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cd0:	4b36      	ldr	r3, [pc, #216]	@ (8007dac <xTaskIncrementTick+0x15c>)
 8007cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd6:	601a      	str	r2, [r3, #0]
					break;
 8007cd8:	e03f      	b.n	8007d5a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cda:	4b31      	ldr	r3, [pc, #196]	@ (8007da0 <xTaskIncrementTick+0x150>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007cea:	693a      	ldr	r2, [r7, #16]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d203      	bcs.n	8007cfa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007cf2:	4a2e      	ldr	r2, [pc, #184]	@ (8007dac <xTaskIncrementTick+0x15c>)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007cf8:	e02f      	b.n	8007d5a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fe fd2e 	bl	8006760 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d004      	beq.n	8007d16 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	3318      	adds	r3, #24
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7fe fd25 	bl	8006760 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d1a:	4b25      	ldr	r3, [pc, #148]	@ (8007db0 <xTaskIncrementTick+0x160>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d903      	bls.n	8007d2a <xTaskIncrementTick+0xda>
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d26:	4a22      	ldr	r2, [pc, #136]	@ (8007db0 <xTaskIncrementTick+0x160>)
 8007d28:	6013      	str	r3, [r2, #0]
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d2e:	4613      	mov	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4413      	add	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4a1f      	ldr	r2, [pc, #124]	@ (8007db4 <xTaskIncrementTick+0x164>)
 8007d38:	441a      	add	r2, r3
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	4619      	mov	r1, r3
 8007d40:	4610      	mov	r0, r2
 8007d42:	f7fe fcb0 	bl	80066a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8007db8 <xTaskIncrementTick+0x168>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d3b8      	bcc.n	8007cc6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007d54:	2301      	movs	r3, #1
 8007d56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d58:	e7b5      	b.n	8007cc6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d5a:	4b17      	ldr	r3, [pc, #92]	@ (8007db8 <xTaskIncrementTick+0x168>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d60:	4914      	ldr	r1, [pc, #80]	@ (8007db4 <xTaskIncrementTick+0x164>)
 8007d62:	4613      	mov	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4413      	add	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	440b      	add	r3, r1
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d901      	bls.n	8007d76 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007d72:	2301      	movs	r3, #1
 8007d74:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d76:	4b11      	ldr	r3, [pc, #68]	@ (8007dbc <xTaskIncrementTick+0x16c>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d007      	beq.n	8007d8e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	617b      	str	r3, [r7, #20]
 8007d82:	e004      	b.n	8007d8e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d84:	4b0e      	ldr	r3, [pc, #56]	@ (8007dc0 <xTaskIncrementTick+0x170>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8007dc0 <xTaskIncrementTick+0x170>)
 8007d8c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d8e:	697b      	ldr	r3, [r7, #20]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3718      	adds	r7, #24
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	2400494c 	.word	0x2400494c
 8007d9c:	24004928 	.word	0x24004928
 8007da0:	240048dc 	.word	0x240048dc
 8007da4:	240048e0 	.word	0x240048e0
 8007da8:	2400493c 	.word	0x2400493c
 8007dac:	24004944 	.word	0x24004944
 8007db0:	2400492c 	.word	0x2400492c
 8007db4:	24004454 	.word	0x24004454
 8007db8:	24004450 	.word	0x24004450
 8007dbc:	24004938 	.word	0x24004938
 8007dc0:	24004934 	.word	0x24004934

08007dc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007dca:	4b28      	ldr	r3, [pc, #160]	@ (8007e6c <vTaskSwitchContext+0xa8>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d003      	beq.n	8007dda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007dd2:	4b27      	ldr	r3, [pc, #156]	@ (8007e70 <vTaskSwitchContext+0xac>)
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007dd8:	e042      	b.n	8007e60 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007dda:	4b25      	ldr	r3, [pc, #148]	@ (8007e70 <vTaskSwitchContext+0xac>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007de0:	4b24      	ldr	r3, [pc, #144]	@ (8007e74 <vTaskSwitchContext+0xb0>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	60fb      	str	r3, [r7, #12]
 8007de6:	e011      	b.n	8007e0c <vTaskSwitchContext+0x48>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d10b      	bne.n	8007e06 <vTaskSwitchContext+0x42>
	__asm volatile
 8007dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	607b      	str	r3, [r7, #4]
}
 8007e00:	bf00      	nop
 8007e02:	bf00      	nop
 8007e04:	e7fd      	b.n	8007e02 <vTaskSwitchContext+0x3e>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	491a      	ldr	r1, [pc, #104]	@ (8007e78 <vTaskSwitchContext+0xb4>)
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	4613      	mov	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	440b      	add	r3, r1
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d0e3      	beq.n	8007de8 <vTaskSwitchContext+0x24>
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	4613      	mov	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4a13      	ldr	r2, [pc, #76]	@ (8007e78 <vTaskSwitchContext+0xb4>)
 8007e2c:	4413      	add	r3, r2
 8007e2e:	60bb      	str	r3, [r7, #8]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	605a      	str	r2, [r3, #4]
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	3308      	adds	r3, #8
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d104      	bne.n	8007e50 <vTaskSwitchContext+0x8c>
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	605a      	str	r2, [r3, #4]
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	4a09      	ldr	r2, [pc, #36]	@ (8007e7c <vTaskSwitchContext+0xb8>)
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	4a06      	ldr	r2, [pc, #24]	@ (8007e74 <vTaskSwitchContext+0xb0>)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6013      	str	r3, [r2, #0]
}
 8007e60:	bf00      	nop
 8007e62:	3714      	adds	r7, #20
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	2400494c 	.word	0x2400494c
 8007e70:	24004938 	.word	0x24004938
 8007e74:	2400492c 	.word	0x2400492c
 8007e78:	24004454 	.word	0x24004454
 8007e7c:	24004450 	.word	0x24004450

08007e80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10b      	bne.n	8007ea8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	60fb      	str	r3, [r7, #12]
}
 8007ea2:	bf00      	nop
 8007ea4:	bf00      	nop
 8007ea6:	e7fd      	b.n	8007ea4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ea8:	4b07      	ldr	r3, [pc, #28]	@ (8007ec8 <vTaskPlaceOnEventList+0x48>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3318      	adds	r3, #24
 8007eae:	4619      	mov	r1, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f7fe fc1c 	bl	80066ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	6838      	ldr	r0, [r7, #0]
 8007eba:	f000 fa81 	bl	80083c0 <prvAddCurrentTaskToDelayedList>
}
 8007ebe:	bf00      	nop
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	24004450 	.word	0x24004450

08007ecc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10b      	bne.n	8007ef6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	617b      	str	r3, [r7, #20]
}
 8007ef0:	bf00      	nop
 8007ef2:	bf00      	nop
 8007ef4:	e7fd      	b.n	8007ef2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8007f20 <vTaskPlaceOnEventListRestricted+0x54>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3318      	adds	r3, #24
 8007efc:	4619      	mov	r1, r3
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f7fe fbd1 	bl	80066a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f0e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007f10:	6879      	ldr	r1, [r7, #4]
 8007f12:	68b8      	ldr	r0, [r7, #8]
 8007f14:	f000 fa54 	bl	80083c0 <prvAddCurrentTaskToDelayedList>
	}
 8007f18:	bf00      	nop
 8007f1a:	3718      	adds	r7, #24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	24004450 	.word	0x24004450

08007f24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10b      	bne.n	8007f52 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f3e:	f383 8811 	msr	BASEPRI, r3
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	60fb      	str	r3, [r7, #12]
}
 8007f4c:	bf00      	nop
 8007f4e:	bf00      	nop
 8007f50:	e7fd      	b.n	8007f4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	3318      	adds	r3, #24
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fe fc02 	bl	8006760 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8007fd4 <xTaskRemoveFromEventList+0xb0>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d11d      	bne.n	8007fa0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	3304      	adds	r3, #4
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7fe fbf9 	bl	8006760 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f72:	4b19      	ldr	r3, [pc, #100]	@ (8007fd8 <xTaskRemoveFromEventList+0xb4>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d903      	bls.n	8007f82 <xTaskRemoveFromEventList+0x5e>
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f7e:	4a16      	ldr	r2, [pc, #88]	@ (8007fd8 <xTaskRemoveFromEventList+0xb4>)
 8007f80:	6013      	str	r3, [r2, #0]
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f86:	4613      	mov	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4413      	add	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4a13      	ldr	r2, [pc, #76]	@ (8007fdc <xTaskRemoveFromEventList+0xb8>)
 8007f90:	441a      	add	r2, r3
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	3304      	adds	r3, #4
 8007f96:	4619      	mov	r1, r3
 8007f98:	4610      	mov	r0, r2
 8007f9a:	f7fe fb84 	bl	80066a6 <vListInsertEnd>
 8007f9e:	e005      	b.n	8007fac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	3318      	adds	r3, #24
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	480e      	ldr	r0, [pc, #56]	@ (8007fe0 <xTaskRemoveFromEventList+0xbc>)
 8007fa8:	f7fe fb7d 	bl	80066a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8007fe4 <xTaskRemoveFromEventList+0xc0>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d905      	bls.n	8007fc6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8007fe8 <xTaskRemoveFromEventList+0xc4>)
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	e001      	b.n	8007fca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007fca:	697b      	ldr	r3, [r7, #20]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	2400494c 	.word	0x2400494c
 8007fd8:	2400492c 	.word	0x2400492c
 8007fdc:	24004454 	.word	0x24004454
 8007fe0:	240048e4 	.word	0x240048e4
 8007fe4:	24004450 	.word	0x24004450
 8007fe8:	24004938 	.word	0x24004938

08007fec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ff4:	4b06      	ldr	r3, [pc, #24]	@ (8008010 <vTaskInternalSetTimeOutState+0x24>)
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ffc:	4b05      	ldr	r3, [pc, #20]	@ (8008014 <vTaskInternalSetTimeOutState+0x28>)
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	605a      	str	r2, [r3, #4]
}
 8008004:	bf00      	nop
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	2400493c 	.word	0x2400493c
 8008014:	24004928 	.word	0x24004928

08008018 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b088      	sub	sp, #32
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10b      	bne.n	8008040 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	613b      	str	r3, [r7, #16]
}
 800803a:	bf00      	nop
 800803c:	bf00      	nop
 800803e:	e7fd      	b.n	800803c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10b      	bne.n	800805e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	60fb      	str	r3, [r7, #12]
}
 8008058:	bf00      	nop
 800805a:	bf00      	nop
 800805c:	e7fd      	b.n	800805a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800805e:	f7fe fcdb 	bl	8006a18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008062:	4b1d      	ldr	r3, [pc, #116]	@ (80080d8 <xTaskCheckForTimeOut+0xc0>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807a:	d102      	bne.n	8008082 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800807c:	2300      	movs	r3, #0
 800807e:	61fb      	str	r3, [r7, #28]
 8008080:	e023      	b.n	80080ca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	4b15      	ldr	r3, [pc, #84]	@ (80080dc <xTaskCheckForTimeOut+0xc4>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	429a      	cmp	r2, r3
 800808c:	d007      	beq.n	800809e <xTaskCheckForTimeOut+0x86>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	69ba      	ldr	r2, [r7, #24]
 8008094:	429a      	cmp	r2, r3
 8008096:	d302      	bcc.n	800809e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008098:	2301      	movs	r3, #1
 800809a:	61fb      	str	r3, [r7, #28]
 800809c:	e015      	b.n	80080ca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d20b      	bcs.n	80080c0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	1ad2      	subs	r2, r2, r3
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f7ff ff99 	bl	8007fec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80080ba:	2300      	movs	r3, #0
 80080bc:	61fb      	str	r3, [r7, #28]
 80080be:	e004      	b.n	80080ca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80080c6:	2301      	movs	r3, #1
 80080c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80080ca:	f7fe fcd7 	bl	8006a7c <vPortExitCritical>

	return xReturn;
 80080ce:	69fb      	ldr	r3, [r7, #28]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3720      	adds	r7, #32
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	24004928 	.word	0x24004928
 80080dc:	2400493c 	.word	0x2400493c

080080e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80080e0:	b480      	push	{r7}
 80080e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80080e4:	4b03      	ldr	r3, [pc, #12]	@ (80080f4 <vTaskMissedYield+0x14>)
 80080e6:	2201      	movs	r2, #1
 80080e8:	601a      	str	r2, [r3, #0]
}
 80080ea:	bf00      	nop
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr
 80080f4:	24004938 	.word	0x24004938

080080f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008100:	f000 f852 	bl	80081a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008104:	4b06      	ldr	r3, [pc, #24]	@ (8008120 <prvIdleTask+0x28>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d9f9      	bls.n	8008100 <prvIdleTask+0x8>
			{
				taskYIELD();
 800810c:	4b05      	ldr	r3, [pc, #20]	@ (8008124 <prvIdleTask+0x2c>)
 800810e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800811c:	e7f0      	b.n	8008100 <prvIdleTask+0x8>
 800811e:	bf00      	nop
 8008120:	24004454 	.word	0x24004454
 8008124:	e000ed04 	.word	0xe000ed04

08008128 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800812e:	2300      	movs	r3, #0
 8008130:	607b      	str	r3, [r7, #4]
 8008132:	e00c      	b.n	800814e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	4613      	mov	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4413      	add	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4a12      	ldr	r2, [pc, #72]	@ (8008188 <prvInitialiseTaskLists+0x60>)
 8008140:	4413      	add	r3, r2
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe fa82 	bl	800664c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3301      	adds	r3, #1
 800814c:	607b      	str	r3, [r7, #4]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b37      	cmp	r3, #55	@ 0x37
 8008152:	d9ef      	bls.n	8008134 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008154:	480d      	ldr	r0, [pc, #52]	@ (800818c <prvInitialiseTaskLists+0x64>)
 8008156:	f7fe fa79 	bl	800664c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800815a:	480d      	ldr	r0, [pc, #52]	@ (8008190 <prvInitialiseTaskLists+0x68>)
 800815c:	f7fe fa76 	bl	800664c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008160:	480c      	ldr	r0, [pc, #48]	@ (8008194 <prvInitialiseTaskLists+0x6c>)
 8008162:	f7fe fa73 	bl	800664c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008166:	480c      	ldr	r0, [pc, #48]	@ (8008198 <prvInitialiseTaskLists+0x70>)
 8008168:	f7fe fa70 	bl	800664c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800816c:	480b      	ldr	r0, [pc, #44]	@ (800819c <prvInitialiseTaskLists+0x74>)
 800816e:	f7fe fa6d 	bl	800664c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008172:	4b0b      	ldr	r3, [pc, #44]	@ (80081a0 <prvInitialiseTaskLists+0x78>)
 8008174:	4a05      	ldr	r2, [pc, #20]	@ (800818c <prvInitialiseTaskLists+0x64>)
 8008176:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008178:	4b0a      	ldr	r3, [pc, #40]	@ (80081a4 <prvInitialiseTaskLists+0x7c>)
 800817a:	4a05      	ldr	r2, [pc, #20]	@ (8008190 <prvInitialiseTaskLists+0x68>)
 800817c:	601a      	str	r2, [r3, #0]
}
 800817e:	bf00      	nop
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	24004454 	.word	0x24004454
 800818c:	240048b4 	.word	0x240048b4
 8008190:	240048c8 	.word	0x240048c8
 8008194:	240048e4 	.word	0x240048e4
 8008198:	240048f8 	.word	0x240048f8
 800819c:	24004910 	.word	0x24004910
 80081a0:	240048dc 	.word	0x240048dc
 80081a4:	240048e0 	.word	0x240048e0

080081a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081ae:	e019      	b.n	80081e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80081b0:	f7fe fc32 	bl	8006a18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081b4:	4b10      	ldr	r3, [pc, #64]	@ (80081f8 <prvCheckTasksWaitingTermination+0x50>)
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	3304      	adds	r3, #4
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fe facd 	bl	8006760 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081c6:	4b0d      	ldr	r3, [pc, #52]	@ (80081fc <prvCheckTasksWaitingTermination+0x54>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	3b01      	subs	r3, #1
 80081cc:	4a0b      	ldr	r2, [pc, #44]	@ (80081fc <prvCheckTasksWaitingTermination+0x54>)
 80081ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008200 <prvCheckTasksWaitingTermination+0x58>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	3b01      	subs	r3, #1
 80081d6:	4a0a      	ldr	r2, [pc, #40]	@ (8008200 <prvCheckTasksWaitingTermination+0x58>)
 80081d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80081da:	f7fe fc4f 	bl	8006a7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f810 	bl	8008204 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081e4:	4b06      	ldr	r3, [pc, #24]	@ (8008200 <prvCheckTasksWaitingTermination+0x58>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1e1      	bne.n	80081b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80081ec:	bf00      	nop
 80081ee:	bf00      	nop
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	240048f8 	.word	0x240048f8
 80081fc:	24004924 	.word	0x24004924
 8008200:	2400490c 	.word	0x2400490c

08008204 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008212:	2b00      	cmp	r3, #0
 8008214:	d108      	bne.n	8008228 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800821a:	4618      	mov	r0, r3
 800821c:	f7fe f8f6 	bl	800640c <vPortFree>
				vPortFree( pxTCB );
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7fe f8f3 	bl	800640c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008226:	e019      	b.n	800825c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800822e:	2b01      	cmp	r3, #1
 8008230:	d103      	bne.n	800823a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f7fe f8ea 	bl	800640c <vPortFree>
	}
 8008238:	e010      	b.n	800825c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008240:	2b02      	cmp	r3, #2
 8008242:	d00b      	beq.n	800825c <prvDeleteTCB+0x58>
	__asm volatile
 8008244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	60fb      	str	r3, [r7, #12]
}
 8008256:	bf00      	nop
 8008258:	bf00      	nop
 800825a:	e7fd      	b.n	8008258 <prvDeleteTCB+0x54>
	}
 800825c:	bf00      	nop
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800826a:	4b0c      	ldr	r3, [pc, #48]	@ (800829c <prvResetNextTaskUnblockTime+0x38>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d104      	bne.n	800827e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008274:	4b0a      	ldr	r3, [pc, #40]	@ (80082a0 <prvResetNextTaskUnblockTime+0x3c>)
 8008276:	f04f 32ff 	mov.w	r2, #4294967295
 800827a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800827c:	e008      	b.n	8008290 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800827e:	4b07      	ldr	r3, [pc, #28]	@ (800829c <prvResetNextTaskUnblockTime+0x38>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	4a04      	ldr	r2, [pc, #16]	@ (80082a0 <prvResetNextTaskUnblockTime+0x3c>)
 800828e:	6013      	str	r3, [r2, #0]
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	240048dc 	.word	0x240048dc
 80082a0:	24004944 	.word	0x24004944

080082a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80082aa:	4b0b      	ldr	r3, [pc, #44]	@ (80082d8 <xTaskGetSchedulerState+0x34>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d102      	bne.n	80082b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80082b2:	2301      	movs	r3, #1
 80082b4:	607b      	str	r3, [r7, #4]
 80082b6:	e008      	b.n	80082ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082b8:	4b08      	ldr	r3, [pc, #32]	@ (80082dc <xTaskGetSchedulerState+0x38>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d102      	bne.n	80082c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80082c0:	2302      	movs	r3, #2
 80082c2:	607b      	str	r3, [r7, #4]
 80082c4:	e001      	b.n	80082ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80082c6:	2300      	movs	r3, #0
 80082c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80082ca:	687b      	ldr	r3, [r7, #4]
	}
 80082cc:	4618      	mov	r0, r3
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	24004930 	.word	0x24004930
 80082dc:	2400494c 	.word	0x2400494c

080082e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80082ec:	2300      	movs	r3, #0
 80082ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d058      	beq.n	80083a8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80082f6:	4b2f      	ldr	r3, [pc, #188]	@ (80083b4 <xTaskPriorityDisinherit+0xd4>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d00b      	beq.n	8008318 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008304:	f383 8811 	msr	BASEPRI, r3
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	60fb      	str	r3, [r7, #12]
}
 8008312:	bf00      	nop
 8008314:	bf00      	nop
 8008316:	e7fd      	b.n	8008314 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10b      	bne.n	8008338 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	60bb      	str	r3, [r7, #8]
}
 8008332:	bf00      	nop
 8008334:	bf00      	nop
 8008336:	e7fd      	b.n	8008334 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800833c:	1e5a      	subs	r2, r3, #1
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800834a:	429a      	cmp	r2, r3
 800834c:	d02c      	beq.n	80083a8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008352:	2b00      	cmp	r3, #0
 8008354:	d128      	bne.n	80083a8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	3304      	adds	r3, #4
 800835a:	4618      	mov	r0, r3
 800835c:	f7fe fa00 	bl	8006760 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800836c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008378:	4b0f      	ldr	r3, [pc, #60]	@ (80083b8 <xTaskPriorityDisinherit+0xd8>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	429a      	cmp	r2, r3
 800837e:	d903      	bls.n	8008388 <xTaskPriorityDisinherit+0xa8>
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008384:	4a0c      	ldr	r2, [pc, #48]	@ (80083b8 <xTaskPriorityDisinherit+0xd8>)
 8008386:	6013      	str	r3, [r2, #0]
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800838c:	4613      	mov	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4a09      	ldr	r2, [pc, #36]	@ (80083bc <xTaskPriorityDisinherit+0xdc>)
 8008396:	441a      	add	r2, r3
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	3304      	adds	r3, #4
 800839c:	4619      	mov	r1, r3
 800839e:	4610      	mov	r0, r2
 80083a0:	f7fe f981 	bl	80066a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80083a4:	2301      	movs	r3, #1
 80083a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083a8:	697b      	ldr	r3, [r7, #20]
	}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3718      	adds	r7, #24
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	24004450 	.word	0x24004450
 80083b8:	2400492c 	.word	0x2400492c
 80083bc:	24004454 	.word	0x24004454

080083c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083ca:	4b21      	ldr	r3, [pc, #132]	@ (8008450 <prvAddCurrentTaskToDelayedList+0x90>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083d0:	4b20      	ldr	r3, [pc, #128]	@ (8008454 <prvAddCurrentTaskToDelayedList+0x94>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	3304      	adds	r3, #4
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fe f9c2 	bl	8006760 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e2:	d10a      	bne.n	80083fa <prvAddCurrentTaskToDelayedList+0x3a>
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d007      	beq.n	80083fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083ea:	4b1a      	ldr	r3, [pc, #104]	@ (8008454 <prvAddCurrentTaskToDelayedList+0x94>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	3304      	adds	r3, #4
 80083f0:	4619      	mov	r1, r3
 80083f2:	4819      	ldr	r0, [pc, #100]	@ (8008458 <prvAddCurrentTaskToDelayedList+0x98>)
 80083f4:	f7fe f957 	bl	80066a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80083f8:	e026      	b.n	8008448 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4413      	add	r3, r2
 8008400:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008402:	4b14      	ldr	r3, [pc, #80]	@ (8008454 <prvAddCurrentTaskToDelayedList+0x94>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	429a      	cmp	r2, r3
 8008410:	d209      	bcs.n	8008426 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008412:	4b12      	ldr	r3, [pc, #72]	@ (800845c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	4b0f      	ldr	r3, [pc, #60]	@ (8008454 <prvAddCurrentTaskToDelayedList+0x94>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3304      	adds	r3, #4
 800841c:	4619      	mov	r1, r3
 800841e:	4610      	mov	r0, r2
 8008420:	f7fe f965 	bl	80066ee <vListInsert>
}
 8008424:	e010      	b.n	8008448 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008426:	4b0e      	ldr	r3, [pc, #56]	@ (8008460 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	4b0a      	ldr	r3, [pc, #40]	@ (8008454 <prvAddCurrentTaskToDelayedList+0x94>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3304      	adds	r3, #4
 8008430:	4619      	mov	r1, r3
 8008432:	4610      	mov	r0, r2
 8008434:	f7fe f95b 	bl	80066ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008438:	4b0a      	ldr	r3, [pc, #40]	@ (8008464 <prvAddCurrentTaskToDelayedList+0xa4>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	429a      	cmp	r2, r3
 8008440:	d202      	bcs.n	8008448 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008442:	4a08      	ldr	r2, [pc, #32]	@ (8008464 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	6013      	str	r3, [r2, #0]
}
 8008448:	bf00      	nop
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	24004928 	.word	0x24004928
 8008454:	24004450 	.word	0x24004450
 8008458:	24004910 	.word	0x24004910
 800845c:	240048e0 	.word	0x240048e0
 8008460:	240048dc 	.word	0x240048dc
 8008464:	24004944 	.word	0x24004944

08008468 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b08a      	sub	sp, #40	@ 0x28
 800846c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800846e:	2300      	movs	r3, #0
 8008470:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008472:	f000 fb13 	bl	8008a9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008476:	4b1d      	ldr	r3, [pc, #116]	@ (80084ec <xTimerCreateTimerTask+0x84>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d021      	beq.n	80084c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800847e:	2300      	movs	r3, #0
 8008480:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008482:	2300      	movs	r3, #0
 8008484:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008486:	1d3a      	adds	r2, r7, #4
 8008488:	f107 0108 	add.w	r1, r7, #8
 800848c:	f107 030c 	add.w	r3, r7, #12
 8008490:	4618      	mov	r0, r3
 8008492:	f7fd fed3 	bl	800623c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008496:	6879      	ldr	r1, [r7, #4]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	9202      	str	r2, [sp, #8]
 800849e:	9301      	str	r3, [sp, #4]
 80084a0:	2302      	movs	r3, #2
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	2300      	movs	r3, #0
 80084a6:	460a      	mov	r2, r1
 80084a8:	4911      	ldr	r1, [pc, #68]	@ (80084f0 <xTimerCreateTimerTask+0x88>)
 80084aa:	4812      	ldr	r0, [pc, #72]	@ (80084f4 <xTimerCreateTimerTask+0x8c>)
 80084ac:	f7ff f8d0 	bl	8007650 <xTaskCreateStatic>
 80084b0:	4603      	mov	r3, r0
 80084b2:	4a11      	ldr	r2, [pc, #68]	@ (80084f8 <xTimerCreateTimerTask+0x90>)
 80084b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80084b6:	4b10      	ldr	r3, [pc, #64]	@ (80084f8 <xTimerCreateTimerTask+0x90>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d001      	beq.n	80084c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80084be:	2301      	movs	r3, #1
 80084c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10b      	bne.n	80084e0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80084c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	613b      	str	r3, [r7, #16]
}
 80084da:	bf00      	nop
 80084dc:	bf00      	nop
 80084de:	e7fd      	b.n	80084dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80084e0:	697b      	ldr	r3, [r7, #20]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3718      	adds	r7, #24
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	24004980 	.word	0x24004980
 80084f0:	08008bbc 	.word	0x08008bbc
 80084f4:	08008635 	.word	0x08008635
 80084f8:	24004984 	.word	0x24004984

080084fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b08a      	sub	sp, #40	@ 0x28
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800850a:	2300      	movs	r3, #0
 800850c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10b      	bne.n	800852c <xTimerGenericCommand+0x30>
	__asm volatile
 8008514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008518:	f383 8811 	msr	BASEPRI, r3
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	623b      	str	r3, [r7, #32]
}
 8008526:	bf00      	nop
 8008528:	bf00      	nop
 800852a:	e7fd      	b.n	8008528 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800852c:	4b19      	ldr	r3, [pc, #100]	@ (8008594 <xTimerGenericCommand+0x98>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d02a      	beq.n	800858a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	2b05      	cmp	r3, #5
 8008544:	dc18      	bgt.n	8008578 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008546:	f7ff fead 	bl	80082a4 <xTaskGetSchedulerState>
 800854a:	4603      	mov	r3, r0
 800854c:	2b02      	cmp	r3, #2
 800854e:	d109      	bne.n	8008564 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008550:	4b10      	ldr	r3, [pc, #64]	@ (8008594 <xTimerGenericCommand+0x98>)
 8008552:	6818      	ldr	r0, [r3, #0]
 8008554:	f107 0110 	add.w	r1, r7, #16
 8008558:	2300      	movs	r3, #0
 800855a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800855c:	f7fe fc88 	bl	8006e70 <xQueueGenericSend>
 8008560:	6278      	str	r0, [r7, #36]	@ 0x24
 8008562:	e012      	b.n	800858a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008564:	4b0b      	ldr	r3, [pc, #44]	@ (8008594 <xTimerGenericCommand+0x98>)
 8008566:	6818      	ldr	r0, [r3, #0]
 8008568:	f107 0110 	add.w	r1, r7, #16
 800856c:	2300      	movs	r3, #0
 800856e:	2200      	movs	r2, #0
 8008570:	f7fe fc7e 	bl	8006e70 <xQueueGenericSend>
 8008574:	6278      	str	r0, [r7, #36]	@ 0x24
 8008576:	e008      	b.n	800858a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008578:	4b06      	ldr	r3, [pc, #24]	@ (8008594 <xTimerGenericCommand+0x98>)
 800857a:	6818      	ldr	r0, [r3, #0]
 800857c:	f107 0110 	add.w	r1, r7, #16
 8008580:	2300      	movs	r3, #0
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	f7fe fd76 	bl	8007074 <xQueueGenericSendFromISR>
 8008588:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800858a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800858c:	4618      	mov	r0, r3
 800858e:	3728      	adds	r7, #40	@ 0x28
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	24004980 	.word	0x24004980

08008598 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b088      	sub	sp, #32
 800859c:	af02      	add	r7, sp, #8
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085a2:	4b23      	ldr	r3, [pc, #140]	@ (8008630 <prvProcessExpiredTimer+0x98>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	3304      	adds	r3, #4
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fe f8d5 	bl	8006760 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085bc:	f003 0304 	and.w	r3, r3, #4
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d023      	beq.n	800860c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	699a      	ldr	r2, [r3, #24]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	18d1      	adds	r1, r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	6978      	ldr	r0, [r7, #20]
 80085d2:	f000 f8d5 	bl	8008780 <prvInsertTimerInActiveList>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d020      	beq.n	800861e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085dc:	2300      	movs	r3, #0
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	2300      	movs	r3, #0
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	2100      	movs	r1, #0
 80085e6:	6978      	ldr	r0, [r7, #20]
 80085e8:	f7ff ff88 	bl	80084fc <xTimerGenericCommand>
 80085ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d114      	bne.n	800861e <prvProcessExpiredTimer+0x86>
	__asm volatile
 80085f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f8:	f383 8811 	msr	BASEPRI, r3
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	60fb      	str	r3, [r7, #12]
}
 8008606:	bf00      	nop
 8008608:	bf00      	nop
 800860a:	e7fd      	b.n	8008608 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008612:	f023 0301 	bic.w	r3, r3, #1
 8008616:	b2da      	uxtb	r2, r3
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	6978      	ldr	r0, [r7, #20]
 8008624:	4798      	blx	r3
}
 8008626:	bf00      	nop
 8008628:	3718      	adds	r7, #24
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	24004978 	.word	0x24004978

08008634 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800863c:	f107 0308 	add.w	r3, r7, #8
 8008640:	4618      	mov	r0, r3
 8008642:	f000 f859 	bl	80086f8 <prvGetNextExpireTime>
 8008646:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	4619      	mov	r1, r3
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f000 f805 	bl	800865c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008652:	f000 f8d7 	bl	8008804 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008656:	bf00      	nop
 8008658:	e7f0      	b.n	800863c <prvTimerTask+0x8>
	...

0800865c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008666:	f7ff fa37 	bl	8007ad8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800866a:	f107 0308 	add.w	r3, r7, #8
 800866e:	4618      	mov	r0, r3
 8008670:	f000 f866 	bl	8008740 <prvSampleTimeNow>
 8008674:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d130      	bne.n	80086de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d10a      	bne.n	8008698 <prvProcessTimerOrBlockTask+0x3c>
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	429a      	cmp	r2, r3
 8008688:	d806      	bhi.n	8008698 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800868a:	f7ff fa33 	bl	8007af4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800868e:	68f9      	ldr	r1, [r7, #12]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f7ff ff81 	bl	8008598 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008696:	e024      	b.n	80086e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d008      	beq.n	80086b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800869e:	4b13      	ldr	r3, [pc, #76]	@ (80086ec <prvProcessTimerOrBlockTask+0x90>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d101      	bne.n	80086ac <prvProcessTimerOrBlockTask+0x50>
 80086a8:	2301      	movs	r3, #1
 80086aa:	e000      	b.n	80086ae <prvProcessTimerOrBlockTask+0x52>
 80086ac:	2300      	movs	r3, #0
 80086ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80086b0:	4b0f      	ldr	r3, [pc, #60]	@ (80086f0 <prvProcessTimerOrBlockTask+0x94>)
 80086b2:	6818      	ldr	r0, [r3, #0]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	4619      	mov	r1, r3
 80086be:	f7fe ff93 	bl	80075e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80086c2:	f7ff fa17 	bl	8007af4 <xTaskResumeAll>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10a      	bne.n	80086e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80086cc:	4b09      	ldr	r3, [pc, #36]	@ (80086f4 <prvProcessTimerOrBlockTask+0x98>)
 80086ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086d2:	601a      	str	r2, [r3, #0]
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	f3bf 8f6f 	isb	sy
}
 80086dc:	e001      	b.n	80086e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80086de:	f7ff fa09 	bl	8007af4 <xTaskResumeAll>
}
 80086e2:	bf00      	nop
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	2400497c 	.word	0x2400497c
 80086f0:	24004980 	.word	0x24004980
 80086f4:	e000ed04 	.word	0xe000ed04

080086f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008700:	4b0e      	ldr	r3, [pc, #56]	@ (800873c <prvGetNextExpireTime+0x44>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d101      	bne.n	800870e <prvGetNextExpireTime+0x16>
 800870a:	2201      	movs	r2, #1
 800870c:	e000      	b.n	8008710 <prvGetNextExpireTime+0x18>
 800870e:	2200      	movs	r2, #0
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d105      	bne.n	8008728 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800871c:	4b07      	ldr	r3, [pc, #28]	@ (800873c <prvGetNextExpireTime+0x44>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	60fb      	str	r3, [r7, #12]
 8008726:	e001      	b.n	800872c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008728:	2300      	movs	r3, #0
 800872a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800872c:	68fb      	ldr	r3, [r7, #12]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	24004978 	.word	0x24004978

08008740 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008748:	f7ff fa72 	bl	8007c30 <xTaskGetTickCount>
 800874c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800874e:	4b0b      	ldr	r3, [pc, #44]	@ (800877c <prvSampleTimeNow+0x3c>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	429a      	cmp	r2, r3
 8008756:	d205      	bcs.n	8008764 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008758:	f000 f93a 	bl	80089d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	601a      	str	r2, [r3, #0]
 8008762:	e002      	b.n	800876a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800876a:	4a04      	ldr	r2, [pc, #16]	@ (800877c <prvSampleTimeNow+0x3c>)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008770:	68fb      	ldr	r3, [r7, #12]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	24004988 	.word	0x24004988

08008780 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
 800878c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800878e:	2300      	movs	r3, #0
 8008790:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d812      	bhi.n	80087cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	1ad2      	subs	r2, r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d302      	bcc.n	80087ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80087b4:	2301      	movs	r3, #1
 80087b6:	617b      	str	r3, [r7, #20]
 80087b8:	e01b      	b.n	80087f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80087ba:	4b10      	ldr	r3, [pc, #64]	@ (80087fc <prvInsertTimerInActiveList+0x7c>)
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	3304      	adds	r3, #4
 80087c2:	4619      	mov	r1, r3
 80087c4:	4610      	mov	r0, r2
 80087c6:	f7fd ff92 	bl	80066ee <vListInsert>
 80087ca:	e012      	b.n	80087f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d206      	bcs.n	80087e2 <prvInsertTimerInActiveList+0x62>
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d302      	bcc.n	80087e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80087dc:	2301      	movs	r3, #1
 80087de:	617b      	str	r3, [r7, #20]
 80087e0:	e007      	b.n	80087f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087e2:	4b07      	ldr	r3, [pc, #28]	@ (8008800 <prvInsertTimerInActiveList+0x80>)
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	3304      	adds	r3, #4
 80087ea:	4619      	mov	r1, r3
 80087ec:	4610      	mov	r0, r2
 80087ee:	f7fd ff7e 	bl	80066ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 80087f2:	697b      	ldr	r3, [r7, #20]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3718      	adds	r7, #24
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	2400497c 	.word	0x2400497c
 8008800:	24004978 	.word	0x24004978

08008804 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b08e      	sub	sp, #56	@ 0x38
 8008808:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800880a:	e0ce      	b.n	80089aa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	da19      	bge.n	8008846 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008812:	1d3b      	adds	r3, r7, #4
 8008814:	3304      	adds	r3, #4
 8008816:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10b      	bne.n	8008836 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	61fb      	str	r3, [r7, #28]
}
 8008830:	bf00      	nop
 8008832:	bf00      	nop
 8008834:	e7fd      	b.n	8008832 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800883c:	6850      	ldr	r0, [r2, #4]
 800883e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008840:	6892      	ldr	r2, [r2, #8]
 8008842:	4611      	mov	r1, r2
 8008844:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2b00      	cmp	r3, #0
 800884a:	f2c0 80ae 	blt.w	80089aa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d004      	beq.n	8008864 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800885a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800885c:	3304      	adds	r3, #4
 800885e:	4618      	mov	r0, r3
 8008860:	f7fd ff7e 	bl	8006760 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008864:	463b      	mov	r3, r7
 8008866:	4618      	mov	r0, r3
 8008868:	f7ff ff6a 	bl	8008740 <prvSampleTimeNow>
 800886c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2b09      	cmp	r3, #9
 8008872:	f200 8097 	bhi.w	80089a4 <prvProcessReceivedCommands+0x1a0>
 8008876:	a201      	add	r2, pc, #4	@ (adr r2, 800887c <prvProcessReceivedCommands+0x78>)
 8008878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800887c:	080088a5 	.word	0x080088a5
 8008880:	080088a5 	.word	0x080088a5
 8008884:	080088a5 	.word	0x080088a5
 8008888:	0800891b 	.word	0x0800891b
 800888c:	0800892f 	.word	0x0800892f
 8008890:	0800897b 	.word	0x0800897b
 8008894:	080088a5 	.word	0x080088a5
 8008898:	080088a5 	.word	0x080088a5
 800889c:	0800891b 	.word	0x0800891b
 80088a0:	0800892f 	.word	0x0800892f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088aa:	f043 0301 	orr.w	r3, r3, #1
 80088ae:	b2da      	uxtb	r2, r3
 80088b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	18d1      	adds	r1, r2, r3
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088c4:	f7ff ff5c 	bl	8008780 <prvInsertTimerInActiveList>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d06c      	beq.n	80089a8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088dc:	f003 0304 	and.w	r3, r3, #4
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d061      	beq.n	80089a8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e8:	699b      	ldr	r3, [r3, #24]
 80088ea:	441a      	add	r2, r3
 80088ec:	2300      	movs	r3, #0
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	2300      	movs	r3, #0
 80088f2:	2100      	movs	r1, #0
 80088f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088f6:	f7ff fe01 	bl	80084fc <xTimerGenericCommand>
 80088fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80088fc:	6a3b      	ldr	r3, [r7, #32]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d152      	bne.n	80089a8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	61bb      	str	r3, [r7, #24]
}
 8008914:	bf00      	nop
 8008916:	bf00      	nop
 8008918:	e7fd      	b.n	8008916 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800891a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008920:	f023 0301 	bic.w	r3, r3, #1
 8008924:	b2da      	uxtb	r2, r3
 8008926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008928:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800892c:	e03d      	b.n	80089aa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800892e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008930:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008934:	f043 0301 	orr.w	r3, r3, #1
 8008938:	b2da      	uxtb	r2, r3
 800893a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800893c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008944:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10b      	bne.n	8008966 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	617b      	str	r3, [r7, #20]
}
 8008960:	bf00      	nop
 8008962:	bf00      	nop
 8008964:	e7fd      	b.n	8008962 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008968:	699a      	ldr	r2, [r3, #24]
 800896a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896c:	18d1      	adds	r1, r2, r3
 800896e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008972:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008974:	f7ff ff04 	bl	8008780 <prvInsertTimerInActiveList>
					break;
 8008978:	e017      	b.n	80089aa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800897a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800897c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008980:	f003 0302 	and.w	r3, r3, #2
 8008984:	2b00      	cmp	r3, #0
 8008986:	d103      	bne.n	8008990 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008988:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800898a:	f7fd fd3f 	bl	800640c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800898e:	e00c      	b.n	80089aa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008992:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008996:	f023 0301 	bic.w	r3, r3, #1
 800899a:	b2da      	uxtb	r2, r3
 800899c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800899e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80089a2:	e002      	b.n	80089aa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80089a4:	bf00      	nop
 80089a6:	e000      	b.n	80089aa <prvProcessReceivedCommands+0x1a6>
					break;
 80089a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089aa:	4b08      	ldr	r3, [pc, #32]	@ (80089cc <prvProcessReceivedCommands+0x1c8>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	1d39      	adds	r1, r7, #4
 80089b0:	2200      	movs	r2, #0
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fe fbfc 	bl	80071b0 <xQueueReceive>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f47f af26 	bne.w	800880c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80089c0:	bf00      	nop
 80089c2:	bf00      	nop
 80089c4:	3730      	adds	r7, #48	@ 0x30
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	24004980 	.word	0x24004980

080089d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b088      	sub	sp, #32
 80089d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089d6:	e049      	b.n	8008a6c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089d8:	4b2e      	ldr	r3, [pc, #184]	@ (8008a94 <prvSwitchTimerLists+0xc4>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089e2:	4b2c      	ldr	r3, [pc, #176]	@ (8008a94 <prvSwitchTimerLists+0xc4>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	3304      	adds	r3, #4
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fd feb5 	bl	8006760 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a04:	f003 0304 	and.w	r3, r3, #4
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d02f      	beq.n	8008a6c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	699b      	ldr	r3, [r3, #24]
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	4413      	add	r3, r2
 8008a14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d90e      	bls.n	8008a3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8008a94 <prvSwitchTimerLists+0xc4>)
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	3304      	adds	r3, #4
 8008a32:	4619      	mov	r1, r3
 8008a34:	4610      	mov	r0, r2
 8008a36:	f7fd fe5a 	bl	80066ee <vListInsert>
 8008a3a:	e017      	b.n	8008a6c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	2300      	movs	r3, #0
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	2100      	movs	r1, #0
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f7ff fd58 	bl	80084fc <xTimerGenericCommand>
 8008a4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10b      	bne.n	8008a6c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a58:	f383 8811 	msr	BASEPRI, r3
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	603b      	str	r3, [r7, #0]
}
 8008a66:	bf00      	nop
 8008a68:	bf00      	nop
 8008a6a:	e7fd      	b.n	8008a68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a6c:	4b09      	ldr	r3, [pc, #36]	@ (8008a94 <prvSwitchTimerLists+0xc4>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1b0      	bne.n	80089d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008a76:	4b07      	ldr	r3, [pc, #28]	@ (8008a94 <prvSwitchTimerLists+0xc4>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a7c:	4b06      	ldr	r3, [pc, #24]	@ (8008a98 <prvSwitchTimerLists+0xc8>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a04      	ldr	r2, [pc, #16]	@ (8008a94 <prvSwitchTimerLists+0xc4>)
 8008a82:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008a84:	4a04      	ldr	r2, [pc, #16]	@ (8008a98 <prvSwitchTimerLists+0xc8>)
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	6013      	str	r3, [r2, #0]
}
 8008a8a:	bf00      	nop
 8008a8c:	3718      	adds	r7, #24
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	24004978 	.word	0x24004978
 8008a98:	2400497c 	.word	0x2400497c

08008a9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008aa2:	f7fd ffb9 	bl	8006a18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008aa6:	4b15      	ldr	r3, [pc, #84]	@ (8008afc <prvCheckForValidListAndQueue+0x60>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d120      	bne.n	8008af0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008aae:	4814      	ldr	r0, [pc, #80]	@ (8008b00 <prvCheckForValidListAndQueue+0x64>)
 8008ab0:	f7fd fdcc 	bl	800664c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008ab4:	4813      	ldr	r0, [pc, #76]	@ (8008b04 <prvCheckForValidListAndQueue+0x68>)
 8008ab6:	f7fd fdc9 	bl	800664c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008aba:	4b13      	ldr	r3, [pc, #76]	@ (8008b08 <prvCheckForValidListAndQueue+0x6c>)
 8008abc:	4a10      	ldr	r2, [pc, #64]	@ (8008b00 <prvCheckForValidListAndQueue+0x64>)
 8008abe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008ac0:	4b12      	ldr	r3, [pc, #72]	@ (8008b0c <prvCheckForValidListAndQueue+0x70>)
 8008ac2:	4a10      	ldr	r2, [pc, #64]	@ (8008b04 <prvCheckForValidListAndQueue+0x68>)
 8008ac4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	4b11      	ldr	r3, [pc, #68]	@ (8008b10 <prvCheckForValidListAndQueue+0x74>)
 8008acc:	4a11      	ldr	r2, [pc, #68]	@ (8008b14 <prvCheckForValidListAndQueue+0x78>)
 8008ace:	2110      	movs	r1, #16
 8008ad0:	200a      	movs	r0, #10
 8008ad2:	f7fe f92d 	bl	8006d30 <xQueueGenericCreateStatic>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	4a08      	ldr	r2, [pc, #32]	@ (8008afc <prvCheckForValidListAndQueue+0x60>)
 8008ada:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008adc:	4b07      	ldr	r3, [pc, #28]	@ (8008afc <prvCheckForValidListAndQueue+0x60>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d005      	beq.n	8008af0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008ae4:	4b05      	ldr	r3, [pc, #20]	@ (8008afc <prvCheckForValidListAndQueue+0x60>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	490b      	ldr	r1, [pc, #44]	@ (8008b18 <prvCheckForValidListAndQueue+0x7c>)
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fe fd52 	bl	8007594 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008af0:	f7fd ffc4 	bl	8006a7c <vPortExitCritical>
}
 8008af4:	bf00      	nop
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	24004980 	.word	0x24004980
 8008b00:	24004950 	.word	0x24004950
 8008b04:	24004964 	.word	0x24004964
 8008b08:	24004978 	.word	0x24004978
 8008b0c:	2400497c 	.word	0x2400497c
 8008b10:	24004a2c 	.word	0x24004a2c
 8008b14:	2400498c 	.word	0x2400498c
 8008b18:	08008bc4 	.word	0x08008bc4

08008b1c <memset>:
 8008b1c:	4402      	add	r2, r0
 8008b1e:	4603      	mov	r3, r0
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d100      	bne.n	8008b26 <memset+0xa>
 8008b24:	4770      	bx	lr
 8008b26:	f803 1b01 	strb.w	r1, [r3], #1
 8008b2a:	e7f9      	b.n	8008b20 <memset+0x4>

08008b2c <__libc_init_array>:
 8008b2c:	b570      	push	{r4, r5, r6, lr}
 8008b2e:	4d0d      	ldr	r5, [pc, #52]	@ (8008b64 <__libc_init_array+0x38>)
 8008b30:	4c0d      	ldr	r4, [pc, #52]	@ (8008b68 <__libc_init_array+0x3c>)
 8008b32:	1b64      	subs	r4, r4, r5
 8008b34:	10a4      	asrs	r4, r4, #2
 8008b36:	2600      	movs	r6, #0
 8008b38:	42a6      	cmp	r6, r4
 8008b3a:	d109      	bne.n	8008b50 <__libc_init_array+0x24>
 8008b3c:	4d0b      	ldr	r5, [pc, #44]	@ (8008b6c <__libc_init_array+0x40>)
 8008b3e:	4c0c      	ldr	r4, [pc, #48]	@ (8008b70 <__libc_init_array+0x44>)
 8008b40:	f000 f826 	bl	8008b90 <_init>
 8008b44:	1b64      	subs	r4, r4, r5
 8008b46:	10a4      	asrs	r4, r4, #2
 8008b48:	2600      	movs	r6, #0
 8008b4a:	42a6      	cmp	r6, r4
 8008b4c:	d105      	bne.n	8008b5a <__libc_init_array+0x2e>
 8008b4e:	bd70      	pop	{r4, r5, r6, pc}
 8008b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b54:	4798      	blx	r3
 8008b56:	3601      	adds	r6, #1
 8008b58:	e7ee      	b.n	8008b38 <__libc_init_array+0xc>
 8008b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b5e:	4798      	blx	r3
 8008b60:	3601      	adds	r6, #1
 8008b62:	e7f2      	b.n	8008b4a <__libc_init_array+0x1e>
 8008b64:	08008c30 	.word	0x08008c30
 8008b68:	08008c30 	.word	0x08008c30
 8008b6c:	08008c30 	.word	0x08008c30
 8008b70:	08008c34 	.word	0x08008c34

08008b74 <memcpy>:
 8008b74:	440a      	add	r2, r1
 8008b76:	4291      	cmp	r1, r2
 8008b78:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b7c:	d100      	bne.n	8008b80 <memcpy+0xc>
 8008b7e:	4770      	bx	lr
 8008b80:	b510      	push	{r4, lr}
 8008b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b8a:	4291      	cmp	r1, r2
 8008b8c:	d1f9      	bne.n	8008b82 <memcpy+0xe>
 8008b8e:	bd10      	pop	{r4, pc}

08008b90 <_init>:
 8008b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b92:	bf00      	nop
 8008b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b96:	bc08      	pop	{r3}
 8008b98:	469e      	mov	lr, r3
 8008b9a:	4770      	bx	lr

08008b9c <_fini>:
 8008b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9e:	bf00      	nop
 8008ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ba2:	bc08      	pop	{r3}
 8008ba4:	469e      	mov	lr, r3
 8008ba6:	4770      	bx	lr
