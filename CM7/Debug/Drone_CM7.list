
Drone_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb24  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002110  0800bdc4  0800bdc4  0000cdc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ded4  0800ded4  0000f070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ded4  0800ded4  0000eed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dedc  0800dedc  0000f070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dedc  0800dedc  0000eedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dee0  0800dee0  0000eee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  24000000  0800dee4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001174  24000070  0800df54  0000f070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240011e4  0800df54  0000f1e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000f070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002581f  00000000  00000000  0000f09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cbe  00000000  00000000  000348bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d60  00000000  00000000  00039580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016b1  00000000  00000000  0003b2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042750  00000000  00000000  0003c991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024c15  00000000  00000000  0007f0e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b41fb  00000000  00000000  000a3cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00257ef1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008378  00000000  00000000  00257f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  002602ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bdac 	.word	0x0800bdac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	0800bdac 	.word	0x0800bdac

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <FlightContextUpdateIMUData>:
{
    pContext->attitude = attitude;
}

void FlightContextUpdateIMUData(FlightContext *pContext, Vec3 accel, Vec3 gyro)
{
 80006ac:	b490      	push	{r4, r7}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	4638      	mov	r0, r7
 80006b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    pContext->imuUnFilteredAccel = accel;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	461c      	mov	r4, r3
 80006be:	463b      	mov	r3, r7
 80006c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80006c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    pContext->imuUnFilteredGyro = gyro;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	3330      	adds	r3, #48	@ 0x30
 80006cc:	f107 0218 	add.w	r2, r7, #24
 80006d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80006d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 80006d6:	bf00      	nop
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc90      	pop	{r4, r7}
 80006de:	4770      	bx	lr

080006e0 <__io_putchar>:

static void SyncUARTTaskHandler(void);
static int8_t LoggerWriteToUART(RingBuff volatile *pBuff);

PUTCHAR_PROTOTYPE
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 80006e8:	f001 fe16 	bl	8002318 <HAL_GetCurrentCPUID>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b03      	cmp	r3, #3
 80006f0:	d110      	bne.n	8000714 <__io_putchar+0x34>
  {
    RingBuffWrite(pCM7RingBuf, (void*)&ch, 1);
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <__io_putchar+0x68>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	1d39      	adds	r1, r7, #4
 80006f8:	2201      	movs	r2, #1
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 f990 	bl	8000a20 <RingBuffWrite>
    if((char)ch == '\n')
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	2b0a      	cmp	r3, #10
 8000706:	d119      	bne.n	800073c <__io_putchar+0x5c>
    {
      LoggerWriteToUART(pCM7RingBuf);
 8000708:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <__io_putchar+0x68>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4618      	mov	r0, r3
 800070e:	f000 f859 	bl	80007c4 <LoggerWriteToUART>
 8000712:	e013      	b.n	800073c <__io_putchar+0x5c>
    }
  }
  else 
  {
    RingBuffWrite(pCM4RingBuf, (void*)&ch, 1);
 8000714:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <__io_putchar+0x6c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	1d39      	adds	r1, r7, #4
 800071a:	2201      	movs	r2, #1
 800071c:	4618      	mov	r0, r3
 800071e:	f000 f97f 	bl	8000a20 <RingBuffWrite>
    if((char)ch == '\n')
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b0a      	cmp	r3, #10
 8000728:	d108      	bne.n	800073c <__io_putchar+0x5c>
    {
      /*
      * CM4 sends signal to CM7 to send CM4's ring buffer to the UART interface
      */
      uint32_t taskID = SYNC_TASKID_UART_OUT;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
      SyncMailBoxWriteNotify(MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2204      	movs	r2, #4
 8000734:	4619      	mov	r1, r3
 8000736:	2000      	movs	r0, #0
 8000738:	f000 fd2e 	bl	8001198 <SyncMailBoxWriteNotify>
    }
  }
  return ch;
 800073c:	687b      	ldr	r3, [r7, #4]
}
 800073e:	4618      	mov	r0, r3
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	24000090 	.word	0x24000090
 800074c:	2400008c 	.word	0x2400008c

08000750 <LoggerInit>:

int8_t LoggerInit(UART_HandleTypeDef *pUART_)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if(HAL_GetCurrentCPUID() != CM7_CPUID || pUART_ == NULL) 
 8000758:	f001 fdde 	bl	8002318 <HAL_GetCurrentCPUID>
 800075c:	4603      	mov	r3, r0
 800075e:	2b03      	cmp	r3, #3
 8000760:	d102      	bne.n	8000768 <LoggerInit+0x18>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d105      	bne.n	8000774 <LoggerInit+0x24>
  {
    pUART = NULL;
 8000768:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <LoggerInit+0x5c>)
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
    return -1;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	e017      	b.n	80007a4 <LoggerInit+0x54>
  }

  pCM4RingBuf = RingBuffCreate((void*)MEM_SHARED_CM4_UART_RINGBUFF_START, MEM_SHARED_CM4_UART_RINGBUFF_TOTAL_LEN);
 8000774:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000778:	480d      	ldr	r0, [pc, #52]	@ (80007b0 <LoggerInit+0x60>)
 800077a:	f000 f921 	bl	80009c0 <RingBuffCreate>
 800077e:	4603      	mov	r3, r0
 8000780:	4a0c      	ldr	r2, [pc, #48]	@ (80007b4 <LoggerInit+0x64>)
 8000782:	6013      	str	r3, [r2, #0]
  pCM7RingBuf = RingBuffCreate((void*)MEM_SHARED_CM7_UART_RINGBUFF_START, MEM_SHARED_CM7_UART_RINGBUFF_TOTAL_LEN);
 8000784:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000788:	480b      	ldr	r0, [pc, #44]	@ (80007b8 <LoggerInit+0x68>)
 800078a:	f000 f919 	bl	80009c0 <RingBuffCreate>
 800078e:	4603      	mov	r3, r0
 8000790:	4a0a      	ldr	r2, [pc, #40]	@ (80007bc <LoggerInit+0x6c>)
 8000792:	6013      	str	r3, [r2, #0]
  pUART = pUART_;
 8000794:	4a05      	ldr	r2, [pc, #20]	@ (80007ac <LoggerInit+0x5c>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6013      	str	r3, [r2, #0]
  SyncRegisterHandler(SyncUARTTaskHandler, SYNC_TASKID_UART_OUT);
 800079a:	2100      	movs	r1, #0
 800079c:	4808      	ldr	r0, [pc, #32]	@ (80007c0 <LoggerInit+0x70>)
 800079e:	f000 fd53 	bl	8001248 <SyncRegisterHandler>

  return 0;
 80007a2:	2300      	movs	r3, #0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	24000094 	.word	0x24000094
 80007b0:	38000008 	.word	0x38000008
 80007b4:	2400008c 	.word	0x2400008c
 80007b8:	38000128 	.word	0x38000128
 80007bc:	24000090 	.word	0x24000090
 80007c0:	08000815 	.word	0x08000815

080007c4 <LoggerWriteToUART>:

static int8_t LoggerWriteToUART(RingBuff volatile *pRingBuf)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t len = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
  void *pBufToTransmit = NULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]

  send:
  len = RingBuffGetLinearBlockReadLength(pRingBuf);
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f000 fa5f 	bl	8000c98 <RingBuffGetLinearBlockReadLength>
 80007da:	60f8      	str	r0, [r7, #12]
  if(len > 0)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d011      	beq.n	8000806 <LoggerWriteToUART+0x42>
  {
    pBufToTransmit = RingBuffGetLinearBlockReadAddress(pRingBuf);
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f000 fa2e 	bl	8000c44 <RingBuffGetLinearBlockReadAddress>
 80007e8:	60b8      	str	r0, [r7, #8]
    HAL_UART_Transmit(pUART, pBufToTransmit, len, 1000);
 80007ea:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <LoggerWriteToUART+0x4c>)
 80007ec:	6818      	ldr	r0, [r3, #0]
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007f6:	68b9      	ldr	r1, [r7, #8]
 80007f8:	f006 fe7e 	bl	80074f8 <HAL_UART_Transmit>
    RingBuffSkip(pRingBuf, len);
 80007fc:	68f9      	ldr	r1, [r7, #12]
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 fa8c 	bl	8000d1c <RingBuffSkip>
    /* Check for anything in the overflow buffer */
    goto send;
 8000804:	e7e6      	b.n	80007d4 <LoggerWriteToUART+0x10>
  }
  return 0;
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	24000094 	.word	0x24000094

08000814 <SyncUARTTaskHandler>:

static void SyncUARTTaskHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 8000818:	f001 fd7e 	bl	8002318 <HAL_GetCurrentCPUID>
 800081c:	4603      	mov	r3, r0
 800081e:	2b03      	cmp	r3, #3
 8000820:	d104      	bne.n	800082c <SyncUARTTaskHandler+0x18>
  {
    LoggerWriteToUART(pCM4RingBuf);
 8000822:	4b03      	ldr	r3, [pc, #12]	@ (8000830 <SyncUARTTaskHandler+0x1c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ffcc 	bl	80007c4 <LoggerWriteToUART>
  }
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2400008c 	.word	0x2400008c

08000834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000838:	4b49      	ldr	r3, [pc, #292]	@ (8000960 <SystemInit+0x12c>)
 800083a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800083e:	4a48      	ldr	r2, [pc, #288]	@ (8000960 <SystemInit+0x12c>)
 8000840:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000844:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000848:	4b45      	ldr	r3, [pc, #276]	@ (8000960 <SystemInit+0x12c>)
 800084a:	691b      	ldr	r3, [r3, #16]
 800084c:	4a44      	ldr	r2, [pc, #272]	@ (8000960 <SystemInit+0x12c>)
 800084e:	f043 0310 	orr.w	r3, r3, #16
 8000852:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000854:	4b43      	ldr	r3, [pc, #268]	@ (8000964 <SystemInit+0x130>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f003 030f 	and.w	r3, r3, #15
 800085c:	2b06      	cmp	r3, #6
 800085e:	d807      	bhi.n	8000870 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000860:	4b40      	ldr	r3, [pc, #256]	@ (8000964 <SystemInit+0x130>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f023 030f 	bic.w	r3, r3, #15
 8000868:	4a3e      	ldr	r2, [pc, #248]	@ (8000964 <SystemInit+0x130>)
 800086a:	f043 0307 	orr.w	r3, r3, #7
 800086e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000870:	4b3d      	ldr	r3, [pc, #244]	@ (8000968 <SystemInit+0x134>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a3c      	ldr	r2, [pc, #240]	@ (8000968 <SystemInit+0x134>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800087c:	4b3a      	ldr	r3, [pc, #232]	@ (8000968 <SystemInit+0x134>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000882:	4b39      	ldr	r3, [pc, #228]	@ (8000968 <SystemInit+0x134>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	4938      	ldr	r1, [pc, #224]	@ (8000968 <SystemInit+0x134>)
 8000888:	4b38      	ldr	r3, [pc, #224]	@ (800096c <SystemInit+0x138>)
 800088a:	4013      	ands	r3, r2
 800088c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800088e:	4b35      	ldr	r3, [pc, #212]	@ (8000964 <SystemInit+0x130>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	2b00      	cmp	r3, #0
 8000898:	d007      	beq.n	80008aa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800089a:	4b32      	ldr	r3, [pc, #200]	@ (8000964 <SystemInit+0x130>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f023 030f 	bic.w	r3, r3, #15
 80008a2:	4a30      	ldr	r2, [pc, #192]	@ (8000964 <SystemInit+0x130>)
 80008a4:	f043 0307 	orr.w	r3, r3, #7
 80008a8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80008aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000968 <SystemInit+0x134>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80008b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000968 <SystemInit+0x134>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80008b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000968 <SystemInit+0x134>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80008bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000968 <SystemInit+0x134>)
 80008be:	4a2c      	ldr	r2, [pc, #176]	@ (8000970 <SystemInit+0x13c>)
 80008c0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80008c2:	4b29      	ldr	r3, [pc, #164]	@ (8000968 <SystemInit+0x134>)
 80008c4:	4a2b      	ldr	r2, [pc, #172]	@ (8000974 <SystemInit+0x140>)
 80008c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80008c8:	4b27      	ldr	r3, [pc, #156]	@ (8000968 <SystemInit+0x134>)
 80008ca:	4a2b      	ldr	r2, [pc, #172]	@ (8000978 <SystemInit+0x144>)
 80008cc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80008ce:	4b26      	ldr	r3, [pc, #152]	@ (8000968 <SystemInit+0x134>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80008d4:	4b24      	ldr	r3, [pc, #144]	@ (8000968 <SystemInit+0x134>)
 80008d6:	4a28      	ldr	r2, [pc, #160]	@ (8000978 <SystemInit+0x144>)
 80008d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80008da:	4b23      	ldr	r3, [pc, #140]	@ (8000968 <SystemInit+0x134>)
 80008dc:	2200      	movs	r2, #0
 80008de:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80008e0:	4b21      	ldr	r3, [pc, #132]	@ (8000968 <SystemInit+0x134>)
 80008e2:	4a25      	ldr	r2, [pc, #148]	@ (8000978 <SystemInit+0x144>)
 80008e4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80008e6:	4b20      	ldr	r3, [pc, #128]	@ (8000968 <SystemInit+0x134>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000968 <SystemInit+0x134>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000968 <SystemInit+0x134>)
 80008f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80008f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <SystemInit+0x134>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80008fe:	4b1f      	ldr	r3, [pc, #124]	@ (800097c <SystemInit+0x148>)
 8000900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000902:	4a1e      	ldr	r2, [pc, #120]	@ (800097c <SystemInit+0x148>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000908:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800090a:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <SystemInit+0x14c>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	4b1d      	ldr	r3, [pc, #116]	@ (8000984 <SystemInit+0x150>)
 8000910:	4013      	ands	r3, r2
 8000912:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000916:	d202      	bcs.n	800091e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000918:	4b1b      	ldr	r3, [pc, #108]	@ (8000988 <SystemInit+0x154>)
 800091a:	2201      	movs	r2, #1
 800091c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800091e:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <SystemInit+0x134>)
 8000920:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000924:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000928:	2b00      	cmp	r3, #0
 800092a:	d113      	bne.n	8000954 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800092c:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <SystemInit+0x134>)
 800092e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000932:	4a0d      	ldr	r2, [pc, #52]	@ (8000968 <SystemInit+0x134>)
 8000934:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000938:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800093c:	4b13      	ldr	r3, [pc, #76]	@ (800098c <SystemInit+0x158>)
 800093e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000942:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000944:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <SystemInit+0x134>)
 8000946:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800094a:	4a07      	ldr	r2, [pc, #28]	@ (8000968 <SystemInit+0x134>)
 800094c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000950:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000ed00 	.word	0xe000ed00
 8000964:	52002000 	.word	0x52002000
 8000968:	58024400 	.word	0x58024400
 800096c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000970:	02020200 	.word	0x02020200
 8000974:	01ff0000 	.word	0x01ff0000
 8000978:	01010280 	.word	0x01010280
 800097c:	580000c0 	.word	0x580000c0
 8000980:	5c001000 	.word	0x5c001000
 8000984:	ffff0000 	.word	0xffff0000
 8000988:	51008108 	.word	0x51008108
 800098c:	52004000 	.word	0x52004000

08000990 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000994:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <ExitRun0Mode+0x2c>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	4a08      	ldr	r2, [pc, #32]	@ (80009bc <ExitRun0Mode+0x2c>)
 800099a:	f023 0302 	bic.w	r3, r3, #2
 800099e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80009a0:	bf00      	nop
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <ExitRun0Mode+0x2c>)
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d0f9      	beq.n	80009a2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80009ae:	bf00      	nop
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	58024800 	.word	0x58024800

080009c0 <RingBuffCreate>:
 * \param[in]       buff: Buffer handle
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
RINGBUFF_VOLATILE RingBuff* RingBuffCreate(void* pBuff, size_t size) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
    if (pBuff == NULL || size == 0 || size < (sizeof(RingBuff) + 1)) {
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d005      	beq.n	80009dc <RingBuffCreate+0x1c>
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d002      	beq.n	80009dc <RingBuffCreate+0x1c>
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	2b20      	cmp	r3, #32
 80009da:	d801      	bhi.n	80009e0 <RingBuffCreate+0x20>
        return NULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	e017      	b.n	8000a10 <RingBuffCreate+0x50>
    }

    RINGBUFF_VOLATILE RingBuff *pRingBuf = (RingBuff*)pBuff;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	60fb      	str	r3, [r7, #12]
    BUF_MEMSET((void *)pRingBuf, 0x00, sizeof(RingBuff));
 80009e4:	2220      	movs	r2, #32
 80009e6:	2100      	movs	r1, #0
 80009e8:	68f8      	ldr	r0, [r7, #12]
 80009ea:	f00a fc4f 	bl	800b28c <memset>

    pRingBuf->size = size - sizeof(RingBuff);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	f1a3 0220 	sub.w	r2, r3, #32
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	609a      	str	r2, [r3, #8]
    pRingBuf->buff = ((uint8_t*) ((uintptr_t)pBuff) + sizeof(RingBuff));
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f103 0220 	add.w	r2, r3, #32
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	605a      	str	r2, [r3, #4]

    pRingBuf->magic1 = 0xDEADBEEF;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <RingBuffCreate+0x58>)
 8000a06:	601a      	str	r2, [r3, #0]
    pRingBuf->magic2 = ~0xDEADBEEF;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <RingBuffCreate+0x5c>)
 8000a0c:	619a      	str	r2, [r3, #24]

    return pRingBuf;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	deadbeef 	.word	0xdeadbeef
 8000a1c:	21524110 	.word	0x21524110

08000a20 <RingBuffWrite>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
RingBuffWrite(RINGBUFF_VOLATILE RingBuff* buff, const void* data, size_t btw) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d017      	beq.n	8000a66 <RingBuffWrite+0x46>
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a3b      	ldr	r2, [pc, #236]	@ (8000b28 <RingBuffWrite+0x108>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d112      	bne.n	8000a66 <RingBuffWrite+0x46>
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	4a39      	ldr	r2, [pc, #228]	@ (8000b2c <RingBuffWrite+0x10c>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d10d      	bne.n	8000a66 <RingBuffWrite+0x46>
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d009      	beq.n	8000a66 <RingBuffWrite+0x46>
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d005      	beq.n	8000a66 <RingBuffWrite+0x46>
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d002      	beq.n	8000a66 <RingBuffWrite+0x46>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d101      	bne.n	8000a6a <RingBuffWrite+0x4a>
        return 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	e059      	b.n	8000b1e <RingBuffWrite+0xfe>
    }

    /* Calculate maximum number of bytes available to write */
    free = RingBuffGetFree(buff);
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f000 f860 	bl	8000b30 <RingBuffGetFree>
 8000a70:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	4293      	cmp	r3, r2
 8000a78:	bf28      	it	cs
 8000a7a:	4613      	movcs	r3, r2
 8000a7c:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d101      	bne.n	8000a88 <RingBuffWrite+0x68>
        return 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	e04a      	b.n	8000b1e <RingBuffWrite+0xfe>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	689a      	ldr	r2, [r3, #8]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	691b      	ldr	r3, [r3, #16]
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d905      	bls.n	8000aa4 <RingBuffWrite+0x84>
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	689a      	ldr	r2, [r3, #8]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	691b      	ldr	r3, [r3, #16]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	e000      	b.n	8000aa6 <RingBuffWrite+0x86>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	691b      	ldr	r3, [r3, #16]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	69f9      	ldr	r1, [r7, #28]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f00a fc63 	bl	800b382 <memcpy>
    buff->w += tocopy;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	691a      	ldr	r2, [r3, #16]
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	441a      	add	r2, r3
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
    btw -= tocopy;
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d00b      	beq.n	8000aee <RingBuffWrite+0xce>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	6858      	ldr	r0, [r3, #4]
 8000ada:	69fa      	ldr	r2, [r7, #28]
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	4413      	add	r3, r2
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f00a fc4d 	bl	800b382 <memcpy>
        buff->w = btw;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	611a      	str	r2, [r3, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	691a      	ldr	r2, [r3, #16]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d302      	bcc.n	8000b00 <RingBuffWrite+0xe0>
        buff->w = 0;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_WRITE, tocopy + btw);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d007      	beq.n	8000b18 <RingBuffWrite+0xf8>
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	6979      	ldr	r1, [r7, #20]
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	440a      	add	r2, r1
 8000b12:	2101      	movs	r1, #1
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	4798      	blx	r3
    return tocopy + btw;
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3720      	adds	r7, #32
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	deadbeef 	.word	0xdeadbeef
 8000b2c:	21524110 	.word	0x21524110

08000b30 <RingBuffGetFree>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
RingBuffGetFree(RINGBUFF_VOLATILE RingBuff* buff) {
 8000b30:	b480      	push	{r7}
 8000b32:	b087      	sub	sp, #28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d011      	beq.n	8000b62 <RingBuffGetFree+0x32>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a1c      	ldr	r2, [pc, #112]	@ (8000bb4 <RingBuffGetFree+0x84>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d10c      	bne.n	8000b62 <RingBuffGetFree+0x32>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8000bb8 <RingBuffGetFree+0x88>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d107      	bne.n	8000b62 <RingBuffGetFree+0x32>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <RingBuffGetFree+0x32>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d101      	bne.n	8000b66 <RingBuffGetFree+0x36>
        return 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	e01f      	b.n	8000ba6 <RingBuffGetFree+0x76>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	691b      	ldr	r3, [r3, #16]
 8000b6a:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d103      	bne.n	8000b82 <RingBuffGetFree+0x52>
        size = buff->size;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	e00f      	b.n	8000ba2 <RingBuffGetFree+0x72>
    } else if (r > w) {
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d904      	bls.n	8000b94 <RingBuffGetFree+0x64>
        size = r - w;
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	1ad3      	subs	r3, r2, r3
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	e006      	b.n	8000ba2 <RingBuffGetFree+0x72>
    } else {
        size = buff->size - (w - r);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689a      	ldr	r2, [r3, #8]
 8000b98:	68f9      	ldr	r1, [r7, #12]
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	1acb      	subs	r3, r1, r3
 8000b9e:	4413      	add	r3, r2
 8000ba0:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3b01      	subs	r3, #1
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	371c      	adds	r7, #28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	deadbeef 	.word	0xdeadbeef
 8000bb8:	21524110 	.word	0x21524110

08000bbc <RingBuffGetFull>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
RingBuffGetFull(RINGBUFF_VOLATILE RingBuff* buff) {
 8000bbc:	b480      	push	{r7}
 8000bbe:	b087      	sub	sp, #28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d011      	beq.n	8000bee <RingBuffGetFull+0x32>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a1b      	ldr	r2, [pc, #108]	@ (8000c3c <RingBuffGetFull+0x80>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d10c      	bne.n	8000bee <RingBuffGetFull+0x32>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a19      	ldr	r2, [pc, #100]	@ (8000c40 <RingBuffGetFull+0x84>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d107      	bne.n	8000bee <RingBuffGetFull+0x32>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d003      	beq.n	8000bee <RingBuffGetFull+0x32>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <RingBuffGetFull+0x36>
        return 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	e01d      	b.n	8000c2e <RingBuffGetFull+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	691b      	ldr	r3, [r3, #16]
 8000bf6:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d102      	bne.n	8000c0c <RingBuffGetFull+0x50>
        size = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	e00f      	b.n	8000c2c <RingBuffGetFull+0x70>
    } else if (w > r) {
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d904      	bls.n	8000c1e <RingBuffGetFull+0x62>
        size = w - r;
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	e006      	b.n	8000c2c <RingBuffGetFull+0x70>
    } else {
        size = buff->size - (r - w);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	689a      	ldr	r2, [r3, #8]
 8000c22:	6939      	ldr	r1, [r7, #16]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	1acb      	subs	r3, r1, r3
 8000c28:	4413      	add	r3, r2
 8000c2a:	617b      	str	r3, [r7, #20]
    }
    return size;
 8000c2c:	697b      	ldr	r3, [r7, #20]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	371c      	adds	r7, #28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	deadbeef 	.word	0xdeadbeef
 8000c40:	21524110 	.word	0x21524110

08000c44 <RingBuffGetLinearBlockReadAddress>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *
RingBuffGetLinearBlockReadAddress(RINGBUFF_VOLATILE RingBuff* buff) {
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d011      	beq.n	8000c76 <RingBuffGetLinearBlockReadAddress+0x32>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a0e      	ldr	r2, [pc, #56]	@ (8000c90 <RingBuffGetLinearBlockReadAddress+0x4c>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d10c      	bne.n	8000c76 <RingBuffGetLinearBlockReadAddress+0x32>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a0c      	ldr	r2, [pc, #48]	@ (8000c94 <RingBuffGetLinearBlockReadAddress+0x50>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d107      	bne.n	8000c76 <RingBuffGetLinearBlockReadAddress+0x32>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <RingBuffGetLinearBlockReadAddress+0x32>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d101      	bne.n	8000c7a <RingBuffGetLinearBlockReadAddress+0x36>
        return NULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e004      	b.n	8000c84 <RingBuffGetLinearBlockReadAddress+0x40>
    }
    return &buff->buff[buff->r];
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	4413      	add	r3, r2
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	deadbeef 	.word	0xdeadbeef
 8000c94:	21524110 	.word	0x21524110

08000c98 <RingBuffGetLinearBlockReadLength>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
RingBuffGetLinearBlockReadLength(RINGBUFF_VOLATILE RingBuff* buff) {
 8000c98:	b480      	push	{r7}
 8000c9a:	b087      	sub	sp, #28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d011      	beq.n	8000cca <RingBuffGetLinearBlockReadLength+0x32>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a1a      	ldr	r2, [pc, #104]	@ (8000d14 <RingBuffGetLinearBlockReadLength+0x7c>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d10c      	bne.n	8000cca <RingBuffGetLinearBlockReadLength+0x32>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a18      	ldr	r2, [pc, #96]	@ (8000d18 <RingBuffGetLinearBlockReadLength+0x80>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d107      	bne.n	8000cca <RingBuffGetLinearBlockReadLength+0x32>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d003      	beq.n	8000cca <RingBuffGetLinearBlockReadLength+0x32>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <RingBuffGetLinearBlockReadLength+0x36>
        return 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e01b      	b.n	8000d06 <RingBuffGetLinearBlockReadLength+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	691b      	ldr	r3, [r3, #16]
 8000cd2:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d904      	bls.n	8000cec <RingBuffGetLinearBlockReadLength+0x54>
        len = w - r;
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	e00b      	b.n	8000d04 <RingBuffGetLinearBlockReadLength+0x6c>
    } else if (r > w) {
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d905      	bls.n	8000d00 <RingBuffGetLinearBlockReadLength+0x68>
        len = buff->size - r;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	e001      	b.n	8000d04 <RingBuffGetLinearBlockReadLength+0x6c>
    } else {
        len = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
    }
    return len;
 8000d04:	697b      	ldr	r3, [r7, #20]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	371c      	adds	r7, #28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	deadbeef 	.word	0xdeadbeef
 8000d18:	21524110 	.word	0x21524110

08000d1c <RingBuffSkip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
RingBuffSkip(RINGBUFF_VOLATILE RingBuff* buff, size_t len) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d014      	beq.n	8000d56 <RingBuffSkip+0x3a>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a20      	ldr	r2, [pc, #128]	@ (8000db4 <RingBuffSkip+0x98>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d10f      	bne.n	8000d56 <RingBuffSkip+0x3a>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8000db8 <RingBuffSkip+0x9c>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d10a      	bne.n	8000d56 <RingBuffSkip+0x3a>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d006      	beq.n	8000d56 <RingBuffSkip+0x3a>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d002      	beq.n	8000d56 <RingBuffSkip+0x3a>
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <RingBuffSkip+0x3e>
        return 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e027      	b.n	8000daa <RingBuffSkip+0x8e>
    }

    full = RingBuffGetFull(buff);             /* Get buffer used length */
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ff2e 	bl	8000bbc <RingBuffGetFull>
 8000d60:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);                   /* Calculate max skip */
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4293      	cmp	r3, r2
 8000d68:	bf28      	it	cs
 8000d6a:	4613      	movcs	r3, r2
 8000d6c:	603b      	str	r3, [r7, #0]
    buff->r += len;                             /* Advance read pointer */
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	441a      	add	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68da      	ldr	r2, [r3, #12]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d306      	bcc.n	8000d94 <RingBuffSkip+0x78>
        buff->r -= buff->size;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	68d2      	ldr	r2, [r2, #12]
 8000d8e:	1ad2      	subs	r2, r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, len);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	695b      	ldr	r3, [r3, #20]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d005      	beq.n	8000da8 <RingBuffSkip+0x8c>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	2100      	movs	r1, #0
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	4798      	blx	r3
    return len;
 8000da8:	683b      	ldr	r3, [r7, #0]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	deadbeef 	.word	0xdeadbeef
 8000db8:	21524110 	.word	0x21524110

08000dbc <IMUReadReg>:
    0x2e, 0x00, 0xc1
};


IMU_STATUS IMUReadReg(IMU *pIMU, uint8_t reg, uint8_t *pBuf, uint32_t len)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b091      	sub	sp, #68	@ 0x44
 8000dc0:	af02      	add	r7, sp, #8
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	607a      	str	r2, [r7, #4]
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	72fb      	strb	r3, [r7, #11]
	uint8_t pTx[16];
	memset(pTx, 0, sizeof(pTx));
 8000dcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd0:	2210      	movs	r2, #16
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f00a fa59 	bl	800b28c <memset>
	// 0x80 bmi270 read bit
	pTx[0] = 0x80 | reg;
 8000dda:	7afb      	ldrb	r3, [r7, #11]
 8000ddc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	uint8_t pRx[16];
	memset(pRx, 0, sizeof(pRx));
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	2210      	movs	r2, #16
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f00a fa4c 	bl	800b28c <memset>
	// status = HAL_SPI_Transmit(pIMUSPIRef, pTemp, 1, 100);

	// set NSS high
	// HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

	if(len + 1 > 16)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	3301      	adds	r3, #1
 8000df8:	2b10      	cmp	r3, #16
 8000dfa:	d901      	bls.n	8000e00 <IMUReadReg+0x44>
	{
		return IMU_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e01f      	b.n	8000e40 <IMUReadReg+0x84>
	}

	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(pIMU->pSPI, pTx, pRx, len + 1, 100);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	6818      	ldr	r0, [r3, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	3301      	adds	r3, #1
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	f107 0214 	add.w	r2, r7, #20
 8000e10:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000e14:	2464      	movs	r4, #100	@ 0x64
 8000e16:	9400      	str	r4, [sp, #0]
 8000e18:	f004 fef2 	bl	8005c00 <HAL_SPI_TransmitReceive>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if(status != HAL_OK)
 8000e22:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <IMUReadReg+0x72>
	{
		return IMU_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e008      	b.n	8000e40 <IMUReadReg+0x84>
	}
	// 1st byte sent by bmi270 is a dummy byte
	memcpy(pBuf, &pRx[1], len);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	3301      	adds	r3, #1
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	4619      	mov	r1, r3
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f00a faa2 	bl	800b382 <memcpy>

	return IMU_OK;
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	373c      	adds	r7, #60	@ 0x3c
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd90      	pop	{r4, r7, pc}

08000e48 <IMUWriteReg>:

IMU_STATUS IMUWriteReg(IMU *pIMU, uint8_t reg, uint8_t *pBuf, uint32_t len)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	@ 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	460b      	mov	r3, r1
 8000e56:	72fb      	strb	r3, [r7, #11]
	uint8_t pTx[16];
	memset(pTx, 0, sizeof(pTx));
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2210      	movs	r2, #16
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f00a fa13 	bl	800b28c <memset>

	if(len + 1 > 16)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	2b10      	cmp	r3, #16
 8000e6c:	d901      	bls.n	8000e72 <IMUWriteReg+0x2a>
	{
		return IMU_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e01e      	b.n	8000eb0 <IMUWriteReg+0x68>
	}

	pTx[0] = reg;
 8000e72:	7afb      	ldrb	r3, [r7, #11]
 8000e74:	753b      	strb	r3, [r7, #20]
	memcpy(&pTx[1], (void*)pBuf, len);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f00a fa7e 	bl	800b382 <memcpy>

	HAL_StatusTypeDef status = HAL_SPI_Transmit(pIMU->pSPI, pTx, len + 1, 100);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	3301      	adds	r3, #1
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	f107 0114 	add.w	r1, r7, #20
 8000e96:	2364      	movs	r3, #100	@ 0x64
 8000e98:	f004 fcc4 	bl	8005824 <HAL_SPI_Transmit>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if(status != HAL_OK)
 8000ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <IMUWriteReg+0x66>
	{
		return IMU_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <IMUWriteReg+0x68>
	}

	return IMU_OK;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3728      	adds	r7, #40	@ 0x28
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <IMU2CPUInterruptHandler>:
}

IMU_STATUS IMU2CPUInterruptHandler(
  IMU *pIMU, Vec3 *pOutputAccel,Vec3 *pOutputGyro
)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  if(pIMU == NULL || pIMU->pSPI == NULL || pOutputAccel == NULL || pOutputGyro == NULL)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d009      	beq.n	8000ede <IMU2CPUInterruptHandler+0x26>
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d005      	beq.n	8000ede <IMU2CPUInterruptHandler+0x26>
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d002      	beq.n	8000ede <IMU2CPUInterruptHandler+0x26>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d112      	bne.n	8000f04 <IMU2CPUInterruptHandler+0x4c>
  {
    LOG_ERROR("Invalid arguments");
 8000ede:	481c      	ldr	r0, [pc, #112]	@ (8000f50 <IMU2CPUInterruptHandler+0x98>)
 8000ee0:	f00a f88c 	bl	800affc <iprintf>
 8000ee4:	481b      	ldr	r0, [pc, #108]	@ (8000f54 <IMU2CPUInterruptHandler+0x9c>)
 8000ee6:	f00a f889 	bl	800affc <iprintf>
 8000eea:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8000eee:	481a      	ldr	r0, [pc, #104]	@ (8000f58 <IMU2CPUInterruptHandler+0xa0>)
 8000ef0:	f00a f884 	bl	800affc <iprintf>
 8000ef4:	4819      	ldr	r0, [pc, #100]	@ (8000f5c <IMU2CPUInterruptHandler+0xa4>)
 8000ef6:	f00a f881 	bl	800affc <iprintf>
 8000efa:	4819      	ldr	r0, [pc, #100]	@ (8000f60 <IMU2CPUInterruptHandler+0xa8>)
 8000efc:	f00a f8e6 	bl	800b0cc <puts>
    return IMU_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e021      	b.n	8000f48 <IMU2CPUInterruptHandler+0x90>
  }

  // read both status registers
  uint8_t pBuf[2] = {0, 0};
 8000f04:	2300      	movs	r3, #0
 8000f06:	82bb      	strh	r3, [r7, #20]
  IMU_STATUS status = IMUReadReg(pIMU, BMI2_INT_STATUS_1_ADDR, pBuf, 2);
 8000f08:	f107 0214 	add.w	r2, r7, #20
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	211d      	movs	r1, #29
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f7ff ff53 	bl	8000dbc <IMUReadReg>
 8000f16:	4603      	mov	r3, r0
 8000f18:	75fb      	strb	r3, [r7, #23]

  // uint8_t intStatus0 = pBuf[0];
  uint8_t intStatus1 = pBuf[1];
 8000f1a:	7d7b      	ldrb	r3, [r7, #21]
 8000f1c:	75bb      	strb	r3, [r7, #22]
  }

  if(BIT_ISSET(intStatus1, BMI2_INT_STATUS_ACC_RDY_BIT)) status |= IMUUpdateAccel(pIMU, *pOutputAccel, pOutputAccel);
  if(BIT_ISSET(intStatus1, BMI2_INT_STATUS_GYR_RDY_BIT)) status |= IMUUpdateGyro(pIMU, *pOutputGyro, pOutputGyro);

  if(status != IMU_OK) LOG_ERROR("Failed to update IMU position data");
 8000f1e:	7dfb      	ldrb	r3, [r7, #23]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d010      	beq.n	8000f46 <IMU2CPUInterruptHandler+0x8e>
 8000f24:	480a      	ldr	r0, [pc, #40]	@ (8000f50 <IMU2CPUInterruptHandler+0x98>)
 8000f26:	f00a f869 	bl	800affc <iprintf>
 8000f2a:	480a      	ldr	r0, [pc, #40]	@ (8000f54 <IMU2CPUInterruptHandler+0x9c>)
 8000f2c:	f00a f866 	bl	800affc <iprintf>
 8000f30:	f240 215a 	movw	r1, #602	@ 0x25a
 8000f34:	4808      	ldr	r0, [pc, #32]	@ (8000f58 <IMU2CPUInterruptHandler+0xa0>)
 8000f36:	f00a f861 	bl	800affc <iprintf>
 8000f3a:	480a      	ldr	r0, [pc, #40]	@ (8000f64 <IMU2CPUInterruptHandler+0xac>)
 8000f3c:	f00a f85e 	bl	800affc <iprintf>
 8000f40:	4807      	ldr	r0, [pc, #28]	@ (8000f60 <IMU2CPUInterruptHandler+0xa8>)
 8000f42:	f00a f8c3 	bl	800b0cc <puts>

  return status;
 8000f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	0800bdc4 	.word	0x0800bdc4
 8000f54:	0800bdd0 	.word	0x0800bdd0
 8000f58:	0800be0c 	.word	0x0800be0c
 8000f5c:	0800be10 	.word	0x0800be10
 8000f60:	0800be24 	.word	0x0800be24
 8000f64:	0800be28 	.word	0x0800be28

08000f68 <IMUInit>:
  IMU_ACC_RANGE accRange,
  IMU_ACC_ODR accODR,
  IMU_GYRO_RANGE gyroRange,
  IMU_GYRO_ODR gyroODR
)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	4611      	mov	r1, r2
 8000f74:	461a      	mov	r2, r3
 8000f76:	460b      	mov	r3, r1
 8000f78:	71fb      	strb	r3, [r7, #7]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	71bb      	strb	r3, [r7, #6]
  memset(pIMU, 0, sizeof(IMU));
 8000f7e:	2238      	movs	r2, #56	@ 0x38
 8000f80:	2100      	movs	r1, #0
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	f00a f982 	bl	800b28c <memset>
	pIMU->pSPI = pSPI;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	601a      	str	r2, [r3, #0]
  pIMU->accRange = accRange;
 8000f8e:	79fa      	ldrb	r2, [r7, #7]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	625a      	str	r2, [r3, #36]	@ 0x24
  pIMU->accODR = accODR;
 8000f94:	79ba      	ldrb	r2, [r7, #6]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	629a      	str	r2, [r3, #40]	@ 0x28
  pIMU->gyroRange = gyroRange;
 8000f9a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	62da      	str	r2, [r3, #44]	@ 0x2c
  pIMU->gyroODR = gyroODR;
 8000fa2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	631a      	str	r2, [r3, #48]	@ 0x30
  pIMU->msLastAccUpdateTime = HAL_GetTick();
 8000faa:	f001 f899 	bl	80020e0 <HAL_GetTick>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	61da      	str	r2, [r3, #28]
  pIMU->msLastGyroUpdateTime = HAL_GetTick();
 8000fb6:	f001 f893 	bl	80020e0 <HAL_GetTick>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	621a      	str	r2, [r3, #32]
  pIMU->magic = IMU_MAGIC;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4a59      	ldr	r2, [pc, #356]	@ (800112c <IMUInit+0x1c4>)
 8000fc6:	635a      	str	r2, [r3, #52]	@ 0x34

	IMU_STATUS status;
	uint8_t pBuffer[2];
  memset(pBuffer, 0, sizeof(pBuffer));
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2202      	movs	r2, #2
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f00a f95b 	bl	800b28c <memset>

	// Dummy read to initialize SPI
	status = IMUReadReg(pIMU, BMI2_CHIP_ID_ADDR, pBuffer, 1);
 8000fd6:	f107 0214 	add.w	r2, r7, #20
 8000fda:	2301      	movs	r3, #1
 8000fdc:	2100      	movs	r1, #0
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f7ff feec 	bl	8000dbc <IMUReadReg>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	75fb      	strb	r3, [r7, #23]
	status = IMUReadReg(pIMU, BMI2_CHIP_ID_ADDR, pBuffer, 1);
 8000fe8:	f107 0214 	add.w	r2, r7, #20
 8000fec:	2301      	movs	r3, #1
 8000fee:	2100      	movs	r1, #0
 8000ff0:	68f8      	ldr	r0, [r7, #12]
 8000ff2:	f7ff fee3 	bl	8000dbc <IMUReadReg>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	75fb      	strb	r3, [r7, #23]

	// Disable PWR_CONF advanced power save
	pBuffer[0] = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	753b      	strb	r3, [r7, #20]
	status = IMUWriteReg(pIMU, BMI2_PWR_CONF_ADDR, pBuffer, 1);
 8000ffe:	f107 0214 	add.w	r2, r7, #20
 8001002:	2301      	movs	r3, #1
 8001004:	217c      	movs	r1, #124	@ 0x7c
 8001006:	68f8      	ldr	r0, [r7, #12]
 8001008:	f7ff ff1e 	bl	8000e48 <IMUWriteReg>
 800100c:	4603      	mov	r3, r0
 800100e:	75fb      	strb	r3, [r7, #23]

	HAL_Delay(1);
 8001010:	2001      	movs	r0, #1
 8001012:	f001 f871 	bl	80020f8 <HAL_Delay>

	// Prepare config file
	pBuffer[0] = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	753b      	strb	r3, [r7, #20]
	status = IMUWriteReg(pIMU, BMI2_INIT_CTRL_ADDR, pBuffer, 1);
 800101a:	f107 0214 	add.w	r2, r7, #20
 800101e:	2301      	movs	r3, #1
 8001020:	2159      	movs	r1, #89	@ 0x59
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f7ff ff10 	bl	8000e48 <IMUWriteReg>
 8001028:	4603      	mov	r3, r0
 800102a:	75fb      	strb	r3, [r7, #23]

	// I added the data write address directly to the config_file
	HAL_SPI_Transmit(pIMU->pSPI, bmi270_config_file, sizeof(bmi270_config_file), 100);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6818      	ldr	r0, [r3, #0]
 8001030:	2364      	movs	r3, #100	@ 0x64
 8001032:	f242 0201 	movw	r2, #8193	@ 0x2001
 8001036:	493e      	ldr	r1, [pc, #248]	@ (8001130 <IMUInit+0x1c8>)
 8001038:	f004 fbf4 	bl	8005824 <HAL_SPI_Transmit>

	pBuffer[0] = 0x01;
 800103c:	2301      	movs	r3, #1
 800103e:	753b      	strb	r3, [r7, #20]
	status = IMUWriteReg(pIMU, BMI2_INIT_CTRL_ADDR, pBuffer, 1);
 8001040:	f107 0214 	add.w	r2, r7, #20
 8001044:	2301      	movs	r3, #1
 8001046:	2159      	movs	r1, #89	@ 0x59
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	f7ff fefd 	bl	8000e48 <IMUWriteReg>
 800104e:	4603      	mov	r3, r0
 8001050:	75fb      	strb	r3, [r7, #23]

	HAL_Delay(20);
 8001052:	2014      	movs	r0, #20
 8001054:	f001 f850 	bl	80020f8 <HAL_Delay>

	status = IMUReadReg(pIMU, BMI2_INTERNAL_STATUS_ADDR, pBuffer, 1);
 8001058:	f107 0214 	add.w	r2, r7, #20
 800105c:	2301      	movs	r3, #1
 800105e:	2121      	movs	r1, #33	@ 0x21
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f7ff feab 	bl	8000dbc <IMUReadReg>
 8001066:	4603      	mov	r3, r0
 8001068:	75fb      	strb	r3, [r7, #23]
	if(status == -1 || (pBuffer[0] & 1) == 0)
 800106a:	7d3b      	ldrb	r3, [r7, #20]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <IMUInit+0x110>
	{
		return IMU_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e054      	b.n	8001122 <IMUInit+0x1ba>

  /*
  * Device Enable/Disable
  */
  // enable acceleration, gyro, and temp but disable auxillary interface
  pBuffer[0] = 0x0E;
 8001078:	230e      	movs	r3, #14
 800107a:	753b      	strb	r3, [r7, #20]
  status = IMUWriteReg(pIMU, BMI2_PWR_CTRL_ADDR, pBuffer, 1);
 800107c:	f107 0214 	add.w	r2, r7, #20
 8001080:	2301      	movs	r3, #1
 8001082:	217d      	movs	r1, #125	@ 0x7d
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f7ff fedf 	bl	8000e48 <IMUWriteReg>
 800108a:	4603      	mov	r3, r0
 800108c:	75fb      	strb	r3, [r7, #23]

  /*
  * Accelerometer Setup
  */
  // enable acc filter perf bit, set acc bwp to normal, and set acc_odr to 100 Hz
  pBuffer[0] = BMI2_ACC_CONF_PERF_MODE_BIT | BMI2_ACC_CONF_BWP_NORMAL_BIT | pIMU->accODR;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001092:	b2db      	uxtb	r3, r3
 8001094:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001098:	b2db      	uxtb	r3, r3
 800109a:	753b      	strb	r3, [r7, #20]
  // Set acc range to pIMU->accRange
  pBuffer[1] = pIMU->accRange;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	757b      	strb	r3, [r7, #21]
  status = IMUWriteReg(pIMU, BMI2_ACC_CONF_ADDR, pBuffer, 2);
 80010a4:	f107 0214 	add.w	r2, r7, #20
 80010a8:	2302      	movs	r3, #2
 80010aa:	2140      	movs	r1, #64	@ 0x40
 80010ac:	68f8      	ldr	r0, [r7, #12]
 80010ae:	f7ff fecb 	bl	8000e48 <IMUWriteReg>
 80010b2:	4603      	mov	r3, r0
 80010b4:	75fb      	strb	r3, [r7, #23]

  /*
  * Gyro Setup
  */
  // enable gyro filter perf bit, set gyr bwp to normal, and set gry_odr to 100 Hz
  pBuffer[0] = BMI2_GYRO_CONF_FILTER_PERF_BIT | BMI2_GYRO_CONF_NOISE_PERF_BIT | BMI2_GYRO_CONF_BWP_NORMAL_BIT | pIMU->gyroODR;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	f063 031f 	orn	r3, r3, #31
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	753b      	strb	r3, [r7, #20]
  // set gyro range
  pBuffer[1] = pIMU->gyroRange;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	757b      	strb	r3, [r7, #21]
  status = IMUWriteReg(pIMU, BMI2_GYR_CONF_ADDR, pBuffer, 2);
 80010cc:	f107 0214 	add.w	r2, r7, #20
 80010d0:	2302      	movs	r3, #2
 80010d2:	2142      	movs	r1, #66	@ 0x42
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f7ff feb7 	bl	8000e48 <IMUWriteReg>
 80010da:	4603      	mov	r3, r0
 80010dc:	75fb      	strb	r3, [r7, #23]

  /*
  * Power Setup
  */
  // disable adv power sav and leave fifo self wakeup enabled
  pBuffer[0] = 0x02;
 80010de:	2302      	movs	r3, #2
 80010e0:	753b      	strb	r3, [r7, #20]
  status = IMUWriteReg(pIMU, BMI2_PWR_CONF_ADDR, pBuffer, 1);
 80010e2:	f107 0214 	add.w	r2, r7, #20
 80010e6:	2301      	movs	r3, #1
 80010e8:	217c      	movs	r1, #124	@ 0x7c
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f7ff feac 	bl	8000e48 <IMUWriteReg>
 80010f0:	4603      	mov	r3, r0
 80010f2:	75fb      	strb	r3, [r7, #23]

  /*
  * Interrupt Setup
  */
  // enable INT1 w input disabled, output enabled, push pull, and active high
  pBuffer[0] = (0 << 3) | (1 << 2) | (0 << 1) | (1 << 0);
 80010f4:	2305      	movs	r3, #5
 80010f6:	753b      	strb	r3, [r7, #20]
  status = IMUWriteReg(pIMU, BMI2_INT1_IO_CTRL_ADDR, pBuffer, 1);
 80010f8:	f107 0214 	add.w	r2, r7, #20
 80010fc:	2301      	movs	r3, #1
 80010fe:	2153      	movs	r1, #83	@ 0x53
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f7ff fea1 	bl	8000e48 <IMUWriteReg>
 8001106:	4603      	mov	r3, r0
 8001108:	75fb      	strb	r3, [r7, #23]
  // interrupts will NOT be cleared automatically. Have to be cleared by the
  // the host reading the int status registers
  pBuffer[0] = 1;
 800110a:	2301      	movs	r3, #1
 800110c:	753b      	strb	r3, [r7, #20]
  status = IMUWriteReg(pIMU, BMI2_INT_LATCH_ADDR, pBuffer, 1);
 800110e:	f107 0214 	add.w	r2, r7, #20
 8001112:	2301      	movs	r3, #1
 8001114:	2155      	movs	r1, #85	@ 0x55
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f7ff fe96 	bl	8000e48 <IMUWriteReg>
 800111c:	4603      	mov	r3, r0
 800111e:	75fb      	strb	r3, [r7, #23]

	return IMU_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	fafaafaf 	.word	0xfafaafaf
 8001130:	0800be74 	.word	0x0800be74

08001134 <SyncMailBoxGet>:
#include "mem/mem.h"

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID);

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
    uint8_t volatile *pMB = NULL;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
    if(mbID == MAILBOX_CM7_ID) pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM7_START;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d103      	bne.n	800114e <SyncMailBoxGet+0x1a>
 8001146:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	e001      	b.n	8001152 <SyncMailBoxGet+0x1e>
    else pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM4_START;
 800114e:	4b04      	ldr	r3, [pc, #16]	@ (8001160 <SyncMailBoxGet+0x2c>)
 8001150:	60fb      	str	r3, [r7, #12]
    return pMB;
 8001152:	68fb      	ldr	r3, [r7, #12]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	38000004 	.word	0x38000004

08001164 <SyncMailBoxWrite>:

int8_t SyncMailBoxWrite(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return -1;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b04      	cmp	r3, #4
 8001174:	d902      	bls.n	800117c <SyncMailBoxWrite+0x18>
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	e009      	b.n	8001190 <SyncMailBoxWrite+0x2c>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 800117c:	68f8      	ldr	r0, [r7, #12]
 800117e:	f7ff ffd9 	bl	8001134 <SyncMailBoxGet>
 8001182:	6178      	str	r0, [r7, #20]
    memcpy((void*)pMB, (void*)pBuffer, len);
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	68b9      	ldr	r1, [r7, #8]
 8001188:	6978      	ldr	r0, [r7, #20]
 800118a:	f00a f8fa 	bl	800b382 <memcpy>
    return 0;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <SyncMailBoxWriteNotify>:

int8_t SyncMailBoxWriteNotify(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
    int8_t status = SyncMailBoxWrite(mbID, pBuffer, len);
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	68b9      	ldr	r1, [r7, #8]
 80011a8:	68f8      	ldr	r0, [r7, #12]
 80011aa:	f7ff ffdb 	bl	8001164 <SyncMailBoxWrite>
 80011ae:	4603      	mov	r3, r0
 80011b0:	75fb      	strb	r3, [r7, #23]
    if(status < 0) return status;
 80011b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	da02      	bge.n	80011c0 <SyncMailBoxWriteNotify+0x28>
 80011ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011be:	e003      	b.n	80011c8 <SyncMailBoxWriteNotify+0x30>
    asm volatile ("dsb");
 80011c0:	f3bf 8f4f 	dsb	sy
    asm volatile ("sev");
 80011c4:	bf40      	sev
    return 0;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <SyncMailBoxRead>:

int8_t SyncMailBoxRead(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return -1;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b04      	cmp	r3, #4
 80011e0:	d902      	bls.n	80011e8 <SyncMailBoxRead+0x18>
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	e009      	b.n	80011fc <SyncMailBoxRead+0x2c>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f7ff ffa3 	bl	8001134 <SyncMailBoxGet>
 80011ee:	6178      	str	r0, [r7, #20]
    memcpy((void*)pBuffer, (void*)pMB, len);
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6979      	ldr	r1, [r7, #20]
 80011f4:	68b8      	ldr	r0, [r7, #8]
 80011f6:	f00a f8c4 	bl	800b382 <memcpy>
    return 0;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <SyncGetTaskHandler>:
//     if(HAL_GetCurrentCPUID() == CM7_CPUID)  return 0;
//     else                                    return 1;
// }

static task_handler_fn_t SyncGetTaskHandler(uint32_t taskID)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
    if(taskID > NUM_TASK_TYPES) return NULL;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <SyncGetTaskHandler+0x12>
 8001212:	2300      	movs	r3, #0
 8001214:	e003      	b.n	800121e <SyncGetTaskHandler+0x1a>
    return handlers[taskID];
 8001216:	4a05      	ldr	r2, [pc, #20]	@ (800122c <SyncGetTaskHandler+0x28>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	24000098 	.word	0x24000098

08001230 <SyncInit>:

/*
* \brief Each core needs to call SyncInit
*/
int8_t SyncInit(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
    memset(handlers, 0, sizeof(handlers));
 8001234:	2208      	movs	r2, #8
 8001236:	2100      	movs	r1, #0
 8001238:	4802      	ldr	r0, [pc, #8]	@ (8001244 <SyncInit+0x14>)
 800123a:	f00a f827 	bl	800b28c <memset>
    return 0;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	bd80      	pop	{r7, pc}
 8001244:	24000098 	.word	0x24000098

08001248 <SyncRegisterHandler>:

int8_t SyncRegisterHandler(task_handler_fn_t fn, uint32_t taskID)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
    if(taskID > NUM_TASK_TYPES) return -1;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d902      	bls.n	800125e <SyncRegisterHandler+0x16>
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	e005      	b.n	800126a <SyncRegisterHandler+0x22>
    handlers[taskID] = fn;
 800125e:	4906      	ldr	r1, [pc, #24]	@ (8001278 <SyncRegisterHandler+0x30>)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 0;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	24000098 	.word	0x24000098

0800127c <CM7_SEV_IRQHandler>:
* and the SEV IRQ handler for CM4 was called.
* This function was originally defined in CM4/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM7_SEV_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
    // CPUID == CM4
    uint32_t taskID = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 8001286:	463b      	mov	r3, r7
 8001288:	2204      	movs	r2, #4
 800128a:	4619      	mov	r1, r3
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff ff9f 	bl	80011d0 <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ffb5 	bl	8001204 <SyncGetTaskHandler>
 800129a:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <CM7_SEV_IRQHandler+0x2a>
    {
        fn();
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4798      	blx	r3
    }
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <CM4_SEV_IRQHandler>:
* and the SEV IRQ handler for CM7 was called.
* This function was originally defined in CM7/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM4_SEV_IRQHandler(void)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
    // CPUID == CM7
    uint32_t taskID = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM7_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 80012b8:	463b      	mov	r3, r7
 80012ba:	2204      	movs	r2, #4
 80012bc:	4619      	mov	r1, r3
 80012be:	2001      	movs	r0, #1
 80012c0:	f7ff ff86 	bl	80011d0 <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ff9c 	bl	8001204 <SyncGetTaskHandler>
 80012cc:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <CM4_SEV_IRQHandler+0x2a>
    {
        fn();
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4798      	blx	r3
    }
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_GPIO_EXTI_Callback>:
PIDContext gPIDVelContext;
PIDContext gPIDVelAngularContext;
TaskHandle_t gpTaskMotionControlUpdate;

void HAL_GPIO_EXTI_Callback(uint16_t gpioPin)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b08d      	sub	sp, #52	@ 0x34
 80012e4:	af04      	add	r7, sp, #16
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
    if(gpioPin == IMU_INT_Pin) 
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	2b80      	cmp	r3, #128	@ 0x80
 80012ee:	d12f      	bne.n	8001350 <HAL_GPIO_EXTI_Callback+0x70>
    {
        Vec3 accel = gFlightContext.imuUnFilteredAccel;
 80012f0:	4a19      	ldr	r2, [pc, #100]	@ (8001358 <HAL_GPIO_EXTI_Callback+0x78>)
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        Vec3 gyro = gFlightContext.imuUnFilteredGyro;
 80012fc:	4a16      	ldr	r2, [pc, #88]	@ (8001358 <HAL_GPIO_EXTI_Callback+0x78>)
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	3230      	adds	r2, #48	@ 0x30
 8001304:	ca07      	ldmia	r2, {r0, r1, r2}
 8001306:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        if(IMU2CPUInterruptHandler(&gIMU, &accel, &gyro) == IMU_OK)
 800130a:	f107 0208 	add.w	r2, r7, #8
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4811      	ldr	r0, [pc, #68]	@ (800135c <HAL_GPIO_EXTI_Callback+0x7c>)
 8001316:	f7ff fdcf 	bl	8000eb8 <IMU2CPUInterruptHandler>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d117      	bne.n	8001350 <HAL_GPIO_EXTI_Callback+0x70>
        {
            FlightContextUpdateIMUData(&gFlightContext, accel, gyro);
 8001320:	466c      	mov	r4, sp
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800132a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001334:	4808      	ldr	r0, [pc, #32]	@ (8001358 <HAL_GPIO_EXTI_Callback+0x78>)
 8001336:	f7ff f9b9 	bl	80006ac <FlightContextUpdateIMUData>
            if(gpTaskMotionControlUpdate != NULL) xTaskNotifyGive(gpTaskMotionControlUpdate);
 800133a:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <HAL_GPIO_EXTI_Callback+0x80>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d006      	beq.n	8001350 <HAL_GPIO_EXTI_Callback+0x70>
 8001342:	4b07      	ldr	r3, [pc, #28]	@ (8001360 <HAL_GPIO_EXTI_Callback+0x80>)
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	2300      	movs	r3, #0
 8001348:	2202      	movs	r2, #2
 800134a:	2100      	movs	r1, #0
 800134c:	f009 f92c 	bl	800a5a8 <xTaskGenericNotify>
        }
    }
}
 8001350:	bf00      	nop
 8001352:	3724      	adds	r7, #36	@ 0x24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd90      	pop	{r4, r7, pc}
 8001358:	2400028c 	.word	0x2400028c
 800135c:	24000254 	.word	0x24000254
 8001360:	240002fc 	.word	0x240002fc

08001364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af02      	add	r7, sp, #8

/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm("NOP"); }
 800136a:	e000      	b.n	800136e <main+0xa>
 800136c:	bf00      	nop
 800136e:	4b22      	ldr	r3, [pc, #136]	@ (80013f8 <main+0x94>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f8      	bne.n	800136c <main+0x8>
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137a:	f000 fe61 	bl	8002040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137e:	f000 f843 	bl	8001408 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001382:	4b1d      	ldr	r3, [pc, #116]	@ (80013f8 <main+0x94>)
 8001384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001388:	4a1b      	ldr	r2, [pc, #108]	@ (80013f8 <main+0x94>)
 800138a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800138e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <main+0x94>)
 8001394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80013a0:	2000      	movs	r0, #0
 80013a2:	f001 f995 	bl	80026d0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80013a6:	2100      	movs	r1, #0
 80013a8:	2000      	movs	r0, #0
 80013aa:	f001 f9ab 	bl	8002704 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm("NOP"); }
 80013ae:	e000      	b.n	80013b2 <main+0x4e>
 80013b0:	bf00      	nop
 80013b2:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <main+0x94>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f8      	bne.n	80013b0 <main+0x4c>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013be:	f000 fa29 	bl	8001814 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80013c2:	f000 f9db 	bl	800177c <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80013c6:	f000 f8a5 	bl	8001514 <MX_SPI2_Init>
  MX_TIM8_Init();
 80013ca:	f000 f8f9 	bl	80015c0 <MX_TIM8_Init>
  MX_TIM13_Init();
 80013ce:	f000 f987 	bl	80016e0 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  LoggerInit(&huart1);
 80013d2:	480a      	ldr	r0, [pc, #40]	@ (80013fc <main+0x98>)
 80013d4:	f7ff f9bc 	bl	8000750 <LoggerInit>
  SyncInit();
 80013d8:	f7ff ff2a 	bl	8001230 <SyncInit>
  IMUInit(
 80013dc:	2308      	movs	r3, #8
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	2303      	movs	r3, #3
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2308      	movs	r3, #8
 80013e6:	2201      	movs	r2, #1
 80013e8:	4905      	ldr	r1, [pc, #20]	@ (8001400 <main+0x9c>)
 80013ea:	4806      	ldr	r0, [pc, #24]	@ (8001404 <main+0xa0>)
 80013ec:	f7ff fdbc 	bl	8000f68 <IMUInit>
    IMU_ACC_ODR_100,
    IMU_GYRO_RANGE_250,
    IMU_GYRO_ODR_100
  );

  vTaskStartScheduler();
 80013f0:	f008 fbfe 	bl	8009bf0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Init scheduler */
  // osKernelInitialize();

  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <main+0x90>
 80013f8:	58024400 	.word	0x58024400
 80013fc:	240001c0 	.word	0x240001c0
 8001400:	240000a0 	.word	0x240000a0
 8001404:	24000254 	.word	0x24000254

08001408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b09c      	sub	sp, #112	@ 0x70
 800140c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001412:	224c      	movs	r2, #76	@ 0x4c
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f009 ff38 	bl	800b28c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2220      	movs	r2, #32
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f009 ff32 	bl	800b28c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001428:	2004      	movs	r0, #4
 800142a:	f001 f97f 	bl	800272c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800142e:	2300      	movs	r3, #0
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	4b36      	ldr	r3, [pc, #216]	@ (800150c <SystemClock_Config+0x104>)
 8001434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001436:	4a35      	ldr	r2, [pc, #212]	@ (800150c <SystemClock_Config+0x104>)
 8001438:	f023 0301 	bic.w	r3, r3, #1
 800143c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800143e:	4b33      	ldr	r3, [pc, #204]	@ (800150c <SystemClock_Config+0x104>)
 8001440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	4b31      	ldr	r3, [pc, #196]	@ (8001510 <SystemClock_Config+0x108>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a30      	ldr	r2, [pc, #192]	@ (8001510 <SystemClock_Config+0x108>)
 800144e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b2e      	ldr	r3, [pc, #184]	@ (8001510 <SystemClock_Config+0x108>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001460:	bf00      	nop
 8001462:	4b2b      	ldr	r3, [pc, #172]	@ (8001510 <SystemClock_Config+0x108>)
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800146a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800146e:	d1f8      	bne.n	8001462 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001470:	230b      	movs	r3, #11
 8001472:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001474:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001478:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800147a:	2301      	movs	r3, #1
 800147c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800147e:	2340      	movs	r3, #64	@ 0x40
 8001480:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001482:	2301      	movs	r3, #1
 8001484:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001486:	2302      	movs	r3, #2
 8001488:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800148a:	2302      	movs	r3, #2
 800148c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800148e:	2305      	movs	r3, #5
 8001490:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8001492:	2330      	movs	r3, #48	@ 0x30
 8001494:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001496:	2302      	movs	r3, #2
 8001498:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800149a:	2305      	movs	r3, #5
 800149c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800149e:	2302      	movs	r3, #2
 80014a0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80014a2:	2308      	movs	r3, #8
 80014a4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b2:	4618      	mov	r0, r3
 80014b4:	f001 f994 	bl	80027e0 <HAL_RCC_OscConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80014be:	f000 fa41 	bl	8001944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c2:	233f      	movs	r3, #63	@ 0x3f
 80014c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 fdd4 	bl	8003094 <HAL_RCC_ClockConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80014f2:	f000 fa27 	bl	8001944 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80014f6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80014fa:	2100      	movs	r1, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	f001 ff7f 	bl	8003400 <HAL_RCC_MCOConfig>
}
 8001502:	bf00      	nop
 8001504:	3770      	adds	r7, #112	@ 0x70
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	58000400 	.word	0x58000400
 8001510:	58024800 	.word	0x58024800

08001514 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001518:	4b27      	ldr	r3, [pc, #156]	@ (80015b8 <MX_SPI2_Init+0xa4>)
 800151a:	4a28      	ldr	r2, [pc, #160]	@ (80015bc <MX_SPI2_Init+0xa8>)
 800151c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800151e:	4b26      	ldr	r3, [pc, #152]	@ (80015b8 <MX_SPI2_Init+0xa4>)
 8001520:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001524:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001526:	4b24      	ldr	r3, [pc, #144]	@ (80015b8 <MX_SPI2_Init+0xa4>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800152c:	4b22      	ldr	r3, [pc, #136]	@ (80015b8 <MX_SPI2_Init+0xa4>)
 800152e:	2207      	movs	r2, #7
 8001530:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001532:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <MX_SPI2_Init+0xa4>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001538:	4b1f      	ldr	r3, [pc, #124]	@ (80015b8 <MX_SPI2_Init+0xa4>)
 800153a:	2200      	movs	r2, #0
 800153c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800153e:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <MX_SPI2_Init+0xa4>)
 8001540:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001544:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001546:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <MX_SPI2_Init+0xa4>)
 8001548:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800154c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800154e:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <MX_SPI2_Init+0xa4>)
 8001550:	2200      	movs	r2, #0
 8001552:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001554:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <MX_SPI2_Init+0xa4>)
 8001556:	2200      	movs	r2, #0
 8001558:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800155a:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <MX_SPI2_Init+0xa4>)
 800155c:	2200      	movs	r2, #0
 800155e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001560:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <MX_SPI2_Init+0xa4>)
 8001562:	2200      	movs	r2, #0
 8001564:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001566:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <MX_SPI2_Init+0xa4>)
 8001568:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800156c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800156e:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <MX_SPI2_Init+0xa4>)
 8001570:	2200      	movs	r2, #0
 8001572:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001574:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <MX_SPI2_Init+0xa4>)
 8001576:	2200      	movs	r2, #0
 8001578:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800157a:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <MX_SPI2_Init+0xa4>)
 800157c:	2200      	movs	r2, #0
 800157e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001580:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <MX_SPI2_Init+0xa4>)
 8001582:	2200      	movs	r2, #0
 8001584:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001586:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <MX_SPI2_Init+0xa4>)
 8001588:	2200      	movs	r2, #0
 800158a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800158c:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <MX_SPI2_Init+0xa4>)
 800158e:	2200      	movs	r2, #0
 8001590:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001592:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <MX_SPI2_Init+0xa4>)
 8001594:	2200      	movs	r2, #0
 8001596:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001598:	4b07      	ldr	r3, [pc, #28]	@ (80015b8 <MX_SPI2_Init+0xa4>)
 800159a:	2200      	movs	r2, #0
 800159c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800159e:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <MX_SPI2_Init+0xa4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015a4:	4804      	ldr	r0, [pc, #16]	@ (80015b8 <MX_SPI2_Init+0xa4>)
 80015a6:	f004 f819 	bl	80055dc <HAL_SPI_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80015b0:	f000 f9c8 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	240000a0 	.word	0x240000a0
 80015bc:	40003800 	.word	0x40003800

080015c0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b096      	sub	sp, #88	@ 0x58
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]
 80015e2:	615a      	str	r2, [r3, #20]
 80015e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	222c      	movs	r2, #44	@ 0x2c
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f009 fe4d 	bl	800b28c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015f2:	4b39      	ldr	r3, [pc, #228]	@ (80016d8 <MX_TIM8_Init+0x118>)
 80015f4:	4a39      	ldr	r2, [pc, #228]	@ (80016dc <MX_TIM8_Init+0x11c>)
 80015f6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015f8:	4b37      	ldr	r3, [pc, #220]	@ (80016d8 <MX_TIM8_Init+0x118>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fe:	4b36      	ldr	r3, [pc, #216]	@ (80016d8 <MX_TIM8_Init+0x118>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001604:	4b34      	ldr	r3, [pc, #208]	@ (80016d8 <MX_TIM8_Init+0x118>)
 8001606:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800160a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160c:	4b32      	ldr	r3, [pc, #200]	@ (80016d8 <MX_TIM8_Init+0x118>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001612:	4b31      	ldr	r3, [pc, #196]	@ (80016d8 <MX_TIM8_Init+0x118>)
 8001614:	2200      	movs	r2, #0
 8001616:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001618:	4b2f      	ldr	r3, [pc, #188]	@ (80016d8 <MX_TIM8_Init+0x118>)
 800161a:	2200      	movs	r2, #0
 800161c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800161e:	482e      	ldr	r0, [pc, #184]	@ (80016d8 <MX_TIM8_Init+0x118>)
 8001620:	f004 ffe0 	bl	80065e4 <HAL_TIM_PWM_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800162a:	f000 f98b 	bl	8001944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162e:	2300      	movs	r3, #0
 8001630:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001632:	2300      	movs	r3, #0
 8001634:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800163a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800163e:	4619      	mov	r1, r3
 8001640:	4825      	ldr	r0, [pc, #148]	@ (80016d8 <MX_TIM8_Init+0x118>)
 8001642:	f005 fddf 	bl	8007204 <HAL_TIMEx_MasterConfigSynchronization>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800164c:	f000 f97a 	bl	8001944 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001650:	2360      	movs	r3, #96	@ 0x60
 8001652:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001658:	2300      	movs	r3, #0
 800165a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800165c:	2300      	movs	r3, #0
 800165e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001664:	2300      	movs	r3, #0
 8001666:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001668:	2300      	movs	r3, #0
 800166a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800166c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001670:	2200      	movs	r2, #0
 8001672:	4619      	mov	r1, r3
 8001674:	4818      	ldr	r0, [pc, #96]	@ (80016d8 <MX_TIM8_Init+0x118>)
 8001676:	f005 f913 	bl	80068a0 <HAL_TIM_PWM_ConfigChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001680:	f000 f960 	bl	8001944 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001698:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800169c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	4619      	mov	r1, r3
 80016b8:	4807      	ldr	r0, [pc, #28]	@ (80016d8 <MX_TIM8_Init+0x118>)
 80016ba:	f005 fe31 	bl	8007320 <HAL_TIMEx_ConfigBreakDeadTime>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80016c4:	f000 f93e 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80016c8:	4803      	ldr	r0, [pc, #12]	@ (80016d8 <MX_TIM8_Init+0x118>)
 80016ca:	f000 fa61 	bl	8001b90 <HAL_TIM_MspPostInit>

}
 80016ce:	bf00      	nop
 80016d0:	3758      	adds	r7, #88	@ 0x58
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	24000128 	.word	0x24000128
 80016dc:	40010400 	.word	0x40010400

080016e0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
 80016f4:	615a      	str	r2, [r3, #20]
 80016f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80016f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001774 <MX_TIM13_Init+0x94>)
 80016fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001778 <MX_TIM13_Init+0x98>)
 80016fc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80016fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001774 <MX_TIM13_Init+0x94>)
 8001700:	2200      	movs	r2, #0
 8001702:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001704:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <MX_TIM13_Init+0x94>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800170a:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <MX_TIM13_Init+0x94>)
 800170c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001710:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001712:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <MX_TIM13_Init+0x94>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001718:	4b16      	ldr	r3, [pc, #88]	@ (8001774 <MX_TIM13_Init+0x94>)
 800171a:	2200      	movs	r2, #0
 800171c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800171e:	4815      	ldr	r0, [pc, #84]	@ (8001774 <MX_TIM13_Init+0x94>)
 8001720:	f004 fe91 	bl	8006446 <HAL_TIM_Base_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800172a:	f000 f90b 	bl	8001944 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800172e:	4811      	ldr	r0, [pc, #68]	@ (8001774 <MX_TIM13_Init+0x94>)
 8001730:	f004 ff58 	bl	80065e4 <HAL_TIM_PWM_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800173a:	f000 f903 	bl	8001944 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800173e:	2360      	movs	r3, #96	@ 0x60
 8001740:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2200      	movs	r2, #0
 8001752:	4619      	mov	r1, r3
 8001754:	4807      	ldr	r0, [pc, #28]	@ (8001774 <MX_TIM13_Init+0x94>)
 8001756:	f005 f8a3 	bl	80068a0 <HAL_TIM_PWM_ConfigChannel>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001760:	f000 f8f0 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001764:	4803      	ldr	r0, [pc, #12]	@ (8001774 <MX_TIM13_Init+0x94>)
 8001766:	f000 fa13 	bl	8001b90 <HAL_TIM_MspPostInit>

}
 800176a:	bf00      	nop
 800176c:	3720      	adds	r7, #32
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	24000174 	.word	0x24000174
 8001778:	40001c00 	.word	0x40001c00

0800177c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001780:	4b22      	ldr	r3, [pc, #136]	@ (800180c <MX_USART1_UART_Init+0x90>)
 8001782:	4a23      	ldr	r2, [pc, #140]	@ (8001810 <MX_USART1_UART_Init+0x94>)
 8001784:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001786:	4b21      	ldr	r3, [pc, #132]	@ (800180c <MX_USART1_UART_Init+0x90>)
 8001788:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800178c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800178e:	4b1f      	ldr	r3, [pc, #124]	@ (800180c <MX_USART1_UART_Init+0x90>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001794:	4b1d      	ldr	r3, [pc, #116]	@ (800180c <MX_USART1_UART_Init+0x90>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800179a:	4b1c      	ldr	r3, [pc, #112]	@ (800180c <MX_USART1_UART_Init+0x90>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017a0:	4b1a      	ldr	r3, [pc, #104]	@ (800180c <MX_USART1_UART_Init+0x90>)
 80017a2:	220c      	movs	r2, #12
 80017a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a6:	4b19      	ldr	r3, [pc, #100]	@ (800180c <MX_USART1_UART_Init+0x90>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ac:	4b17      	ldr	r3, [pc, #92]	@ (800180c <MX_USART1_UART_Init+0x90>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017b2:	4b16      	ldr	r3, [pc, #88]	@ (800180c <MX_USART1_UART_Init+0x90>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017b8:	4b14      	ldr	r3, [pc, #80]	@ (800180c <MX_USART1_UART_Init+0x90>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017be:	4b13      	ldr	r3, [pc, #76]	@ (800180c <MX_USART1_UART_Init+0x90>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017c4:	4811      	ldr	r0, [pc, #68]	@ (800180c <MX_USART1_UART_Init+0x90>)
 80017c6:	f005 fe47 	bl	8007458 <HAL_UART_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80017d0:	f000 f8b8 	bl	8001944 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017d4:	2100      	movs	r1, #0
 80017d6:	480d      	ldr	r0, [pc, #52]	@ (800180c <MX_USART1_UART_Init+0x90>)
 80017d8:	f006 fedd 	bl	8008596 <HAL_UARTEx_SetTxFifoThreshold>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80017e2:	f000 f8af 	bl	8001944 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017e6:	2100      	movs	r1, #0
 80017e8:	4808      	ldr	r0, [pc, #32]	@ (800180c <MX_USART1_UART_Init+0x90>)
 80017ea:	f006 ff12 	bl	8008612 <HAL_UARTEx_SetRxFifoThreshold>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017f4:	f000 f8a6 	bl	8001944 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017f8:	4804      	ldr	r0, [pc, #16]	@ (800180c <MX_USART1_UART_Init+0x90>)
 80017fa:	f006 fe93 	bl	8008524 <HAL_UARTEx_DisableFifoMode>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001804:	f000 f89e 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	240001c0 	.word	0x240001c0
 8001810:	40011000 	.word	0x40011000

08001814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	@ 0x28
 8001818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800182a:	4b3a      	ldr	r3, [pc, #232]	@ (8001914 <MX_GPIO_Init+0x100>)
 800182c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001830:	4a38      	ldr	r2, [pc, #224]	@ (8001914 <MX_GPIO_Init+0x100>)
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800183a:	4b36      	ldr	r3, [pc, #216]	@ (8001914 <MX_GPIO_Init+0x100>)
 800183c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001848:	4b32      	ldr	r3, [pc, #200]	@ (8001914 <MX_GPIO_Init+0x100>)
 800184a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800184e:	4a31      	ldr	r2, [pc, #196]	@ (8001914 <MX_GPIO_Init+0x100>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001858:	4b2e      	ldr	r3, [pc, #184]	@ (8001914 <MX_GPIO_Init+0x100>)
 800185a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001866:	4b2b      	ldr	r3, [pc, #172]	@ (8001914 <MX_GPIO_Init+0x100>)
 8001868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800186c:	4a29      	ldr	r2, [pc, #164]	@ (8001914 <MX_GPIO_Init+0x100>)
 800186e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001872:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001876:	4b27      	ldr	r3, [pc, #156]	@ (8001914 <MX_GPIO_Init+0x100>)
 8001878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800187c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001884:	4b23      	ldr	r3, [pc, #140]	@ (8001914 <MX_GPIO_Init+0x100>)
 8001886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800188a:	4a22      	ldr	r2, [pc, #136]	@ (8001914 <MX_GPIO_Init+0x100>)
 800188c:	f043 0320 	orr.w	r3, r3, #32
 8001890:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001894:	4b1f      	ldr	r3, [pc, #124]	@ (8001914 <MX_GPIO_Init+0x100>)
 8001896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800189a:	f003 0320 	and.w	r3, r3, #32
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80018a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001914 <MX_GPIO_Init+0x100>)
 80018a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001914 <MX_GPIO_Init+0x100>)
 80018aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018b2:	4b18      	ldr	r3, [pc, #96]	@ (8001914 <MX_GPIO_Init+0x100>)
 80018b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018bc:	603b      	str	r3, [r7, #0]
 80018be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 80018c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	480e      	ldr	r0, [pc, #56]	@ (8001918 <MX_GPIO_Init+0x104>)
 80018de:	f000 fd2d 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80018e2:	2380      	movs	r3, #128	@ 0x80
 80018e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	4809      	ldr	r0, [pc, #36]	@ (800191c <MX_GPIO_Init+0x108>)
 80018f8:	f000 fd20 	bl	800233c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(IMU_INT_EXTI_IRQn, 5, 0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2105      	movs	r1, #5
 8001900:	2017      	movs	r0, #23
 8001902:	f000 fce1 	bl	80022c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(IMU_INT_EXTI_IRQn);
 8001906:	2017      	movs	r0, #23
 8001908:	f000 fcf8 	bl	80022fc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800190c:	bf00      	nop
 800190e:	3728      	adds	r7, #40	@ 0x28
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	58024400 	.word	0x58024400
 8001918:	58020000 	.word	0x58020000
 800191c:	58020800 	.word	0x58020800

08001920 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a04      	ldr	r2, [pc, #16]	@ (8001940 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d101      	bne.n	8001936 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001932:	f000 fbc1 	bl	80020b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40000800 	.word	0x40000800

08001944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001948:	b672      	cpsid	i
}
 800194a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <Error_Handler+0x8>

08001950 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001956:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <HAL_MspInit+0x48>)
 8001958:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800195c:	4a0e      	ldr	r2, [pc, #56]	@ (8001998 <HAL_MspInit+0x48>)
 800195e:	f043 0302 	orr.w	r3, r3, #2
 8001962:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001966:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <HAL_MspInit+0x48>)
 8001968:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001974:	2200      	movs	r2, #0
 8001976:	210f      	movs	r1, #15
 8001978:	f06f 0001 	mvn.w	r0, #1
 800197c:	f000 fca4 	bl	80022c8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 5, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	2105      	movs	r1, #5
 8001984:	2041      	movs	r0, #65	@ 0x41
 8001986:	f000 fc9f 	bl	80022c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 800198a:	2041      	movs	r0, #65	@ 0x41
 800198c:	f000 fcb6 	bl	80022fc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	58024400 	.word	0x58024400

0800199c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b0be      	sub	sp, #248	@ 0xf8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019b4:	f107 0318 	add.w	r3, r7, #24
 80019b8:	22c8      	movs	r2, #200	@ 0xc8
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f009 fc65 	bl	800b28c <memset>
  if(hspi->Instance==SPI2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a38      	ldr	r2, [pc, #224]	@ (8001aa8 <HAL_SPI_MspInit+0x10c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d169      	bne.n	8001aa0 <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80019cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80019d8:	2300      	movs	r3, #0
 80019da:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019dc:	f107 0318 	add.w	r3, r7, #24
 80019e0:	4618      	mov	r0, r3
 80019e2:	f001 ff8f 	bl	8003904 <HAL_RCCEx_PeriphCLKConfig>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80019ec:	f7ff ffaa 	bl	8001944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019f0:	4b2e      	ldr	r3, [pc, #184]	@ (8001aac <HAL_SPI_MspInit+0x110>)
 80019f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019f6:	4a2d      	ldr	r2, [pc, #180]	@ (8001aac <HAL_SPI_MspInit+0x110>)
 80019f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a00:	4b2a      	ldr	r3, [pc, #168]	@ (8001aac <HAL_SPI_MspInit+0x110>)
 8001a02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	4b27      	ldr	r3, [pc, #156]	@ (8001aac <HAL_SPI_MspInit+0x110>)
 8001a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a14:	4a25      	ldr	r2, [pc, #148]	@ (8001aac <HAL_SPI_MspInit+0x110>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a1e:	4b23      	ldr	r3, [pc, #140]	@ (8001aac <HAL_SPI_MspInit+0x110>)
 8001a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001aac <HAL_SPI_MspInit+0x110>)
 8001a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a32:	4a1e      	ldr	r2, [pc, #120]	@ (8001aac <HAL_SPI_MspInit+0x110>)
 8001a34:	f043 0304 	orr.w	r3, r3, #4
 8001a38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aac <HAL_SPI_MspInit+0x110>)
 8001a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_NSS_Pin;
 8001a4a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a64:	2305      	movs	r3, #5
 8001a66:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480f      	ldr	r0, [pc, #60]	@ (8001ab0 <HAL_SPI_MspInit+0x114>)
 8001a72:	f000 fc63 	bl	800233c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_3_Pin|PMOD_2_Pin;
 8001a76:	230c      	movs	r3, #12
 8001a78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a8e:	2305      	movs	r3, #5
 8001a90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a94:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4806      	ldr	r0, [pc, #24]	@ (8001ab4 <HAL_SPI_MspInit+0x118>)
 8001a9c:	f000 fc4e 	bl	800233c <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001aa0:	bf00      	nop
 8001aa2:	37f8      	adds	r7, #248	@ 0xf8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40003800 	.word	0x40003800
 8001aac:	58024400 	.word	0x58024400
 8001ab0:	58020000 	.word	0x58020000
 8001ab4:	58020800 	.word	0x58020800

08001ab8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	@ 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8001b40 <HAL_TIM_PWM_MspInit+0x88>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d12d      	bne.n	8001b36 <HAL_TIM_PWM_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ada:	4b1a      	ldr	r3, [pc, #104]	@ (8001b44 <HAL_TIM_PWM_MspInit+0x8c>)
 8001adc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ae0:	4a18      	ldr	r2, [pc, #96]	@ (8001b44 <HAL_TIM_PWM_MspInit+0x8c>)
 8001ae2:	f043 0302 	orr.w	r3, r3, #2
 8001ae6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001aea:	4b16      	ldr	r3, [pc, #88]	@ (8001b44 <HAL_TIM_PWM_MspInit+0x8c>)
 8001aec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001af8:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <HAL_TIM_PWM_MspInit+0x8c>)
 8001afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001afe:	4a11      	ldr	r2, [pc, #68]	@ (8001b44 <HAL_TIM_PWM_MspInit+0x8c>)
 8001b00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b08:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <HAL_TIM_PWM_MspInit+0x8c>)
 8001b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001b16:	2340      	movs	r3, #64	@ 0x40
 8001b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b26:	2303      	movs	r3, #3
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4805      	ldr	r0, [pc, #20]	@ (8001b48 <HAL_TIM_PWM_MspInit+0x90>)
 8001b32:	f000 fc03 	bl	800233c <HAL_GPIO_Init>

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	@ 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40010400 	.word	0x40010400
 8001b44:	58024400 	.word	0x58024400
 8001b48:	58022400 	.word	0x58022400

08001b4c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0b      	ldr	r2, [pc, #44]	@ (8001b88 <HAL_TIM_Base_MspInit+0x3c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d10e      	bne.n	8001b7c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <HAL_TIM_Base_MspInit+0x40>)
 8001b60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b64:	4a09      	ldr	r2, [pc, #36]	@ (8001b8c <HAL_TIM_Base_MspInit+0x40>)
 8001b66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b6a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b6e:	4b07      	ldr	r3, [pc, #28]	@ (8001b8c <HAL_TIM_Base_MspInit+0x40>)
 8001b70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM13_MspInit 1 */

  }

}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	40001c00 	.word	0x40001c00
 8001b8c:	58024400 	.word	0x58024400

08001b90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	@ 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a35      	ldr	r2, [pc, #212]	@ (8001c84 <HAL_TIM_MspPostInit+0xf4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d13e      	bne.n	8001c30 <HAL_TIM_MspPostInit+0xa0>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb2:	4b35      	ldr	r3, [pc, #212]	@ (8001c88 <HAL_TIM_MspPostInit+0xf8>)
 8001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bb8:	4a33      	ldr	r2, [pc, #204]	@ (8001c88 <HAL_TIM_MspPostInit+0xf8>)
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bc2:	4b31      	ldr	r3, [pc, #196]	@ (8001c88 <HAL_TIM_MspPostInit+0xf8>)
 8001bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c88 <HAL_TIM_MspPostInit+0xf8>)
 8001bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bd6:	4a2c      	ldr	r2, [pc, #176]	@ (8001c88 <HAL_TIM_MspPostInit+0xf8>)
 8001bd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001be0:	4b29      	ldr	r3, [pc, #164]	@ (8001c88 <HAL_TIM_MspPostInit+0xf8>)
 8001be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001be6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PJ7     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bee:	2340      	movs	r3, #64	@ 0x40
 8001bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	4820      	ldr	r0, [pc, #128]	@ (8001c8c <HAL_TIM_MspPostInit+0xfc>)
 8001c0a:	f000 fb97 	bl	800233c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001c0e:	2380      	movs	r3, #128	@ 0x80
 8001c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	4619      	mov	r1, r3
 8001c28:	4819      	ldr	r0, [pc, #100]	@ (8001c90 <HAL_TIM_MspPostInit+0x100>)
 8001c2a:	f000 fb87 	bl	800233c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM13_MspPostInit 1 */

    /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8001c2e:	e024      	b.n	8001c7a <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM13)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a17      	ldr	r2, [pc, #92]	@ (8001c94 <HAL_TIM_MspPostInit+0x104>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d11f      	bne.n	8001c7a <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c3a:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <HAL_TIM_MspPostInit+0xf8>)
 8001c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c40:	4a11      	ldr	r2, [pc, #68]	@ (8001c88 <HAL_TIM_MspPostInit+0xf8>)
 8001c42:	f043 0320 	orr.w	r3, r3, #32
 8001c46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c88 <HAL_TIM_MspPostInit+0xf8>)
 8001c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c50:	f003 0320 	and.w	r3, r3, #32
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 8001c58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001c6a:	2309      	movs	r3, #9
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4619      	mov	r1, r3
 8001c74:	4808      	ldr	r0, [pc, #32]	@ (8001c98 <HAL_TIM_MspPostInit+0x108>)
 8001c76:	f000 fb61 	bl	800233c <HAL_GPIO_Init>
}
 8001c7a:	bf00      	nop
 8001c7c:	3728      	adds	r7, #40	@ 0x28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40010400 	.word	0x40010400
 8001c88:	58024400 	.word	0x58024400
 8001c8c:	58020800 	.word	0x58020800
 8001c90:	58022400 	.word	0x58022400
 8001c94:	40001c00 	.word	0x40001c00
 8001c98:	58021400 	.word	0x58021400

08001c9c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b0bc      	sub	sp, #240	@ 0xf0
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cb4:	f107 0310 	add.w	r3, r7, #16
 8001cb8:	22c8      	movs	r2, #200	@ 0xc8
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f009 fae5 	bl	800b28c <memset>
  if(huart->Instance==USART1)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a27      	ldr	r2, [pc, #156]	@ (8001d64 <HAL_UART_MspInit+0xc8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d146      	bne.n	8001d5a <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ccc:	f04f 0201 	mov.w	r2, #1
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cde:	f107 0310 	add.w	r3, r7, #16
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f001 fe0e 	bl	8003904 <HAL_RCCEx_PeriphCLKConfig>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001cee:	f7ff fe29 	bl	8001944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d68 <HAL_UART_MspInit+0xcc>)
 8001cf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8001d68 <HAL_UART_MspInit+0xcc>)
 8001cfa:	f043 0310 	orr.w	r3, r3, #16
 8001cfe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d02:	4b19      	ldr	r3, [pc, #100]	@ (8001d68 <HAL_UART_MspInit+0xcc>)
 8001d04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d08:	f003 0310 	and.w	r3, r3, #16
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d10:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <HAL_UART_MspInit+0xcc>)
 8001d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d16:	4a14      	ldr	r2, [pc, #80]	@ (8001d68 <HAL_UART_MspInit+0xcc>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d20:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <HAL_UART_MspInit+0xcc>)
 8001d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001d2e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d48:	2307      	movs	r3, #7
 8001d4a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d52:	4619      	mov	r1, r3
 8001d54:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <HAL_UART_MspInit+0xd0>)
 8001d56:	f000 faf1 	bl	800233c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001d5a:	bf00      	nop
 8001d5c:	37f0      	adds	r7, #240	@ 0xf0
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40011000 	.word	0x40011000
 8001d68:	58024400 	.word	0x58024400
 8001d6c:	58020000 	.word	0x58020000

08001d70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b090      	sub	sp, #64	@ 0x40
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b0f      	cmp	r3, #15
 8001d7c:	d827      	bhi.n	8001dce <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	201e      	movs	r0, #30
 8001d84:	f000 faa0 	bl	80022c8 <HAL_NVIC_SetPriority>

     /* Enable the TIM4 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d88:	201e      	movs	r0, #30
 8001d8a:	f000 fab7 	bl	80022fc <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001d8e:	4a29      	ldr	r2, [pc, #164]	@ (8001e34 <HAL_InitTick+0xc4>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001d94:	4b28      	ldr	r3, [pc, #160]	@ (8001e38 <HAL_InitTick+0xc8>)
 8001d96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d9a:	4a27      	ldr	r2, [pc, #156]	@ (8001e38 <HAL_InitTick+0xc8>)
 8001d9c:	f043 0304 	orr.w	r3, r3, #4
 8001da0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001da4:	4b24      	ldr	r3, [pc, #144]	@ (8001e38 <HAL_InitTick+0xc8>)
 8001da6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001db2:	f107 0210 	add.w	r2, r7, #16
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4611      	mov	r1, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f001 fd5f 	bl	8003880 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d106      	bne.n	8001dda <HAL_InitTick+0x6a>
 8001dcc:	e001      	b.n	8001dd2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e02b      	b.n	8001e2a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001dd2:	f001 fd29 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 8001dd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001dd8:	e004      	b.n	8001de4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001dda:	f001 fd25 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 8001dde:	4603      	mov	r3, r0
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001de6:	4a15      	ldr	r2, [pc, #84]	@ (8001e3c <HAL_InitTick+0xcc>)
 8001de8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dec:	0c9b      	lsrs	r3, r3, #18
 8001dee:	3b01      	subs	r3, #1
 8001df0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001df2:	4b13      	ldr	r3, [pc, #76]	@ (8001e40 <HAL_InitTick+0xd0>)
 8001df4:	4a13      	ldr	r2, [pc, #76]	@ (8001e44 <HAL_InitTick+0xd4>)
 8001df6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001df8:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <HAL_InitTick+0xd0>)
 8001dfa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dfe:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001e00:	4a0f      	ldr	r2, [pc, #60]	@ (8001e40 <HAL_InitTick+0xd0>)
 8001e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e04:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	@ (8001e40 <HAL_InitTick+0xd0>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e40 <HAL_InitTick+0xd0>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001e12:	480b      	ldr	r0, [pc, #44]	@ (8001e40 <HAL_InitTick+0xd0>)
 8001e14:	f004 fb17 	bl	8006446 <HAL_TIM_Base_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d104      	bne.n	8001e28 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001e1e:	4808      	ldr	r0, [pc, #32]	@ (8001e40 <HAL_InitTick+0xd0>)
 8001e20:	f004 fb68 	bl	80064f4 <HAL_TIM_Base_Start_IT>
 8001e24:	4603      	mov	r3, r0
 8001e26:	e000      	b.n	8001e2a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3740      	adds	r7, #64	@ 0x40
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	24000008 	.word	0x24000008
 8001e38:	58024400 	.word	0x58024400
 8001e3c:	431bde83 	.word	0x431bde83
 8001e40:	24000300 	.word	0x24000300
 8001e44:	40000800 	.word	0x40000800

08001e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <NMI_Handler+0x4>

08001e50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <HardFault_Handler+0x4>

08001e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <MemManage_Handler+0x4>

08001e60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <BusFault_Handler+0x4>

08001e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e6c:	bf00      	nop
 8001e6e:	e7fd      	b.n	8001e6c <UsageFault_Handler+0x4>

08001e70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8001e82:	2080      	movs	r0, #128	@ 0x80
 8001e84:	f000 fc0a 	bl	800269c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e90:	4802      	ldr	r0, [pc, #8]	@ (8001e9c <TIM4_IRQHandler+0x10>)
 8001e92:	f004 fbfe 	bl	8006692 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	24000300 	.word	0x24000300

08001ea0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	e00a      	b.n	8001ec8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001eb2:	f3af 8000 	nop.w
 8001eb6:	4601      	mov	r1, r0
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	60ba      	str	r2, [r7, #8]
 8001ebe:	b2ca      	uxtb	r2, r1
 8001ec0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	dbf0      	blt.n	8001eb2 <_read+0x12>
  }

  return len;
 8001ed0:	687b      	ldr	r3, [r7, #4]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	e009      	b.n	8001f00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	60ba      	str	r2, [r7, #8]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fbf3 	bl	80006e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	3301      	adds	r3, #1
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	dbf1      	blt.n	8001eec <_write+0x12>
  }
  return len;
 8001f08:	687b      	ldr	r3, [r7, #4]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <_close>:

int _close(int file)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f3a:	605a      	str	r2, [r3, #4]
  return 0;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <_isatty>:

int _isatty(int file)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f52:	2301      	movs	r3, #1
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f84:	4a14      	ldr	r2, [pc, #80]	@ (8001fd8 <_sbrk+0x5c>)
 8001f86:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <_sbrk+0x60>)
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f90:	4b13      	ldr	r3, [pc, #76]	@ (8001fe0 <_sbrk+0x64>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f98:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <_sbrk+0x64>)
 8001f9a:	4a12      	ldr	r2, [pc, #72]	@ (8001fe4 <_sbrk+0x68>)
 8001f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f9e:	4b10      	ldr	r3, [pc, #64]	@ (8001fe0 <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d207      	bcs.n	8001fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fac:	f009 f9bc 	bl	800b328 <__errno>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fba:	e009      	b.n	8001fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fbc:	4b08      	ldr	r3, [pc, #32]	@ (8001fe0 <_sbrk+0x64>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fc2:	4b07      	ldr	r3, [pc, #28]	@ (8001fe0 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	4a05      	ldr	r2, [pc, #20]	@ (8001fe0 <_sbrk+0x64>)
 8001fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fce:	68fb      	ldr	r3, [r7, #12]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	24080000 	.word	0x24080000
 8001fdc:	00000400 	.word	0x00000400
 8001fe0:	2400034c 	.word	0x2400034c
 8001fe4:	240011e8 	.word	0x240011e8

08001fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001fe8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002024 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001fec:	f7fe fcd0 	bl	8000990 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ff0:	f7fe fc20 	bl	8000834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ff4:	480c      	ldr	r0, [pc, #48]	@ (8002028 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ff6:	490d      	ldr	r1, [pc, #52]	@ (800202c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8002030 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ffc:	e002      	b.n	8002004 <LoopCopyDataInit>

08001ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002002:	3304      	adds	r3, #4

08002004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002008:	d3f9      	bcc.n	8001ffe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800200a:	4a0a      	ldr	r2, [pc, #40]	@ (8002034 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800200c:	4c0a      	ldr	r4, [pc, #40]	@ (8002038 <LoopFillZerobss+0x22>)
  movs r3, #0
 800200e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002010:	e001      	b.n	8002016 <LoopFillZerobss>

08002012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002014:	3204      	adds	r2, #4

08002016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002018:	d3fb      	bcc.n	8002012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800201a:	f009 f98b 	bl	800b334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800201e:	f7ff f9a1 	bl	8001364 <main>
  bx  lr
 8002022:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002024:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002028:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800202c:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8002030:	0800dee4 	.word	0x0800dee4
  ldr r2, =_sbss
 8002034:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8002038:	240011e4 	.word	0x240011e4

0800203c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800203c:	e7fe      	b.n	800203c <ADC3_IRQHandler>
	...

08002040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002046:	2003      	movs	r0, #3
 8002048:	f000 f933 	bl	80022b2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800204c:	f001 fa42 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 8002050:	4602      	mov	r2, r0
 8002052:	4b15      	ldr	r3, [pc, #84]	@ (80020a8 <HAL_Init+0x68>)
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	0a1b      	lsrs	r3, r3, #8
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	4913      	ldr	r1, [pc, #76]	@ (80020ac <HAL_Init+0x6c>)
 800205e:	5ccb      	ldrb	r3, [r1, r3]
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
 8002068:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800206a:	4b0f      	ldr	r3, [pc, #60]	@ (80020a8 <HAL_Init+0x68>)
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	4a0e      	ldr	r2, [pc, #56]	@ (80020ac <HAL_Init+0x6c>)
 8002074:	5cd3      	ldrb	r3, [r2, r3]
 8002076:	f003 031f 	and.w	r3, r3, #31
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	fa22 f303 	lsr.w	r3, r2, r3
 8002080:	4a0b      	ldr	r2, [pc, #44]	@ (80020b0 <HAL_Init+0x70>)
 8002082:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002084:	4a0b      	ldr	r2, [pc, #44]	@ (80020b4 <HAL_Init+0x74>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800208a:	200f      	movs	r0, #15
 800208c:	f7ff fe70 	bl	8001d70 <HAL_InitTick>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e002      	b.n	80020a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800209a:	f7ff fc59 	bl	8001950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	58024400 	.word	0x58024400
 80020ac:	0800be64 	.word	0x0800be64
 80020b0:	24000004 	.word	0x24000004
 80020b4:	24000000 	.word	0x24000000

080020b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <HAL_IncTick+0x20>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <HAL_IncTick+0x24>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	4a04      	ldr	r2, [pc, #16]	@ (80020dc <HAL_IncTick+0x24>)
 80020ca:	6013      	str	r3, [r2, #0]
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	2400000c 	.word	0x2400000c
 80020dc:	24000350 	.word	0x24000350

080020e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return uwTick;
 80020e4:	4b03      	ldr	r3, [pc, #12]	@ (80020f4 <HAL_GetTick+0x14>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	24000350 	.word	0x24000350

080020f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002100:	f7ff ffee 	bl	80020e0 <HAL_GetTick>
 8002104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002110:	d005      	beq.n	800211e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002112:	4b0a      	ldr	r3, [pc, #40]	@ (800213c <HAL_Delay+0x44>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4413      	add	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800211e:	bf00      	nop
 8002120:	f7ff ffde 	bl	80020e0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	429a      	cmp	r2, r3
 800212e:	d8f7      	bhi.n	8002120 <HAL_Delay+0x28>
  {
  }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	2400000c 	.word	0x2400000c

08002140 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002144:	4b03      	ldr	r3, [pc, #12]	@ (8002154 <HAL_GetREVID+0x14>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	0c1b      	lsrs	r3, r3, #16
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	5c001000 	.word	0x5c001000

08002158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002168:	4b0b      	ldr	r3, [pc, #44]	@ (8002198 <__NVIC_SetPriorityGrouping+0x40>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002174:	4013      	ands	r3, r2
 8002176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002180:	4b06      	ldr	r3, [pc, #24]	@ (800219c <__NVIC_SetPriorityGrouping+0x44>)
 8002182:	4313      	orrs	r3, r2
 8002184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002186:	4a04      	ldr	r2, [pc, #16]	@ (8002198 <__NVIC_SetPriorityGrouping+0x40>)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	60d3      	str	r3, [r2, #12]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000ed00 	.word	0xe000ed00
 800219c:	05fa0000 	.word	0x05fa0000

080021a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a4:	4b04      	ldr	r3, [pc, #16]	@ (80021b8 <__NVIC_GetPriorityGrouping+0x18>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	0a1b      	lsrs	r3, r3, #8
 80021aa:	f003 0307 	and.w	r3, r3, #7
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	db0b      	blt.n	80021e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	f003 021f 	and.w	r2, r3, #31
 80021d4:	4907      	ldr	r1, [pc, #28]	@ (80021f4 <__NVIC_EnableIRQ+0x38>)
 80021d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021da:	095b      	lsrs	r3, r3, #5
 80021dc:	2001      	movs	r0, #1
 80021de:	fa00 f202 	lsl.w	r2, r0, r2
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	e000e100 	.word	0xe000e100

080021f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	6039      	str	r1, [r7, #0]
 8002202:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002204:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002208:	2b00      	cmp	r3, #0
 800220a:	db0a      	blt.n	8002222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	b2da      	uxtb	r2, r3
 8002210:	490c      	ldr	r1, [pc, #48]	@ (8002244 <__NVIC_SetPriority+0x4c>)
 8002212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002216:	0112      	lsls	r2, r2, #4
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	440b      	add	r3, r1
 800221c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002220:	e00a      	b.n	8002238 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4908      	ldr	r1, [pc, #32]	@ (8002248 <__NVIC_SetPriority+0x50>)
 8002228:	88fb      	ldrh	r3, [r7, #6]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	3b04      	subs	r3, #4
 8002230:	0112      	lsls	r2, r2, #4
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	440b      	add	r3, r1
 8002236:	761a      	strb	r2, [r3, #24]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000e100 	.word	0xe000e100
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224c:	b480      	push	{r7}
 800224e:	b089      	sub	sp, #36	@ 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f1c3 0307 	rsb	r3, r3, #7
 8002266:	2b04      	cmp	r3, #4
 8002268:	bf28      	it	cs
 800226a:	2304      	movcs	r3, #4
 800226c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3304      	adds	r3, #4
 8002272:	2b06      	cmp	r3, #6
 8002274:	d902      	bls.n	800227c <NVIC_EncodePriority+0x30>
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3b03      	subs	r3, #3
 800227a:	e000      	b.n	800227e <NVIC_EncodePriority+0x32>
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	f04f 32ff 	mov.w	r2, #4294967295
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	401a      	ands	r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002294:	f04f 31ff 	mov.w	r1, #4294967295
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	fa01 f303 	lsl.w	r3, r1, r3
 800229e:	43d9      	mvns	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	4313      	orrs	r3, r2
         );
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3724      	adds	r7, #36	@ 0x24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff ff4c 	bl	8002158 <__NVIC_SetPriorityGrouping>
}
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
 80022d4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022d6:	f7ff ff63 	bl	80021a0 <__NVIC_GetPriorityGrouping>
 80022da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	68b9      	ldr	r1, [r7, #8]
 80022e0:	6978      	ldr	r0, [r7, #20]
 80022e2:	f7ff ffb3 	bl	800224c <NVIC_EncodePriority>
 80022e6:	4602      	mov	r2, r0
 80022e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022ec:	4611      	mov	r1, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff ff82 	bl	80021f8 <__NVIC_SetPriority>
}
 80022f4:	bf00      	nop
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002306:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff ff56 	bl	80021bc <__NVIC_EnableIRQ>
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 800231c:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <HAL_GetCurrentCPUID+0x20>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002324:	2b70      	cmp	r3, #112	@ 0x70
 8002326:	d101      	bne.n	800232c <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8002328:	2303      	movs	r3, #3
 800232a:	e000      	b.n	800232e <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 800232c:	2301      	movs	r3, #1
  }
}
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800233c:	b480      	push	{r7}
 800233e:	b089      	sub	sp, #36	@ 0x24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800234a:	4b89      	ldr	r3, [pc, #548]	@ (8002570 <HAL_GPIO_Init+0x234>)
 800234c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800234e:	e194      	b.n	800267a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	2101      	movs	r1, #1
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	fa01 f303 	lsl.w	r3, r1, r3
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 8186 	beq.w	8002674 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d005      	beq.n	8002380 <HAL_GPIO_Init+0x44>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d130      	bne.n	80023e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	2203      	movs	r2, #3
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023b6:	2201      	movs	r2, #1
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	091b      	lsrs	r3, r3, #4
 80023cc:	f003 0201 	and.w	r2, r3, #1
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d017      	beq.n	800241e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	2203      	movs	r2, #3
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d123      	bne.n	8002472 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	08da      	lsrs	r2, r3, #3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3208      	adds	r2, #8
 8002432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	220f      	movs	r2, #15
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	691a      	ldr	r2, [r3, #16]
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	08da      	lsrs	r2, r3, #3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3208      	adds	r2, #8
 800246c:	69b9      	ldr	r1, [r7, #24]
 800246e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	2203      	movs	r2, #3
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 0203 	and.w	r2, r3, #3
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 80e0 	beq.w	8002674 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002574 <HAL_GPIO_Init+0x238>)
 80024b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024ba:	4a2e      	ldr	r2, [pc, #184]	@ (8002574 <HAL_GPIO_Init+0x238>)
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80024c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002574 <HAL_GPIO_Init+0x238>)
 80024c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024d2:	4a29      	ldr	r2, [pc, #164]	@ (8002578 <HAL_GPIO_Init+0x23c>)
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	089b      	lsrs	r3, r3, #2
 80024d8:	3302      	adds	r3, #2
 80024da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	220f      	movs	r2, #15
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a20      	ldr	r2, [pc, #128]	@ (800257c <HAL_GPIO_Init+0x240>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d052      	beq.n	80025a4 <HAL_GPIO_Init+0x268>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a1f      	ldr	r2, [pc, #124]	@ (8002580 <HAL_GPIO_Init+0x244>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d031      	beq.n	800256a <HAL_GPIO_Init+0x22e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a1e      	ldr	r2, [pc, #120]	@ (8002584 <HAL_GPIO_Init+0x248>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d02b      	beq.n	8002566 <HAL_GPIO_Init+0x22a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a1d      	ldr	r2, [pc, #116]	@ (8002588 <HAL_GPIO_Init+0x24c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d025      	beq.n	8002562 <HAL_GPIO_Init+0x226>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a1c      	ldr	r2, [pc, #112]	@ (800258c <HAL_GPIO_Init+0x250>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d01f      	beq.n	800255e <HAL_GPIO_Init+0x222>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a1b      	ldr	r2, [pc, #108]	@ (8002590 <HAL_GPIO_Init+0x254>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d019      	beq.n	800255a <HAL_GPIO_Init+0x21e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a1a      	ldr	r2, [pc, #104]	@ (8002594 <HAL_GPIO_Init+0x258>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d013      	beq.n	8002556 <HAL_GPIO_Init+0x21a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a19      	ldr	r2, [pc, #100]	@ (8002598 <HAL_GPIO_Init+0x25c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d00d      	beq.n	8002552 <HAL_GPIO_Init+0x216>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a18      	ldr	r2, [pc, #96]	@ (800259c <HAL_GPIO_Init+0x260>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d007      	beq.n	800254e <HAL_GPIO_Init+0x212>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a17      	ldr	r2, [pc, #92]	@ (80025a0 <HAL_GPIO_Init+0x264>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d101      	bne.n	800254a <HAL_GPIO_Init+0x20e>
 8002546:	2309      	movs	r3, #9
 8002548:	e02d      	b.n	80025a6 <HAL_GPIO_Init+0x26a>
 800254a:	230a      	movs	r3, #10
 800254c:	e02b      	b.n	80025a6 <HAL_GPIO_Init+0x26a>
 800254e:	2308      	movs	r3, #8
 8002550:	e029      	b.n	80025a6 <HAL_GPIO_Init+0x26a>
 8002552:	2307      	movs	r3, #7
 8002554:	e027      	b.n	80025a6 <HAL_GPIO_Init+0x26a>
 8002556:	2306      	movs	r3, #6
 8002558:	e025      	b.n	80025a6 <HAL_GPIO_Init+0x26a>
 800255a:	2305      	movs	r3, #5
 800255c:	e023      	b.n	80025a6 <HAL_GPIO_Init+0x26a>
 800255e:	2304      	movs	r3, #4
 8002560:	e021      	b.n	80025a6 <HAL_GPIO_Init+0x26a>
 8002562:	2303      	movs	r3, #3
 8002564:	e01f      	b.n	80025a6 <HAL_GPIO_Init+0x26a>
 8002566:	2302      	movs	r3, #2
 8002568:	e01d      	b.n	80025a6 <HAL_GPIO_Init+0x26a>
 800256a:	2301      	movs	r3, #1
 800256c:	e01b      	b.n	80025a6 <HAL_GPIO_Init+0x26a>
 800256e:	bf00      	nop
 8002570:	58000080 	.word	0x58000080
 8002574:	58024400 	.word	0x58024400
 8002578:	58000400 	.word	0x58000400
 800257c:	58020000 	.word	0x58020000
 8002580:	58020400 	.word	0x58020400
 8002584:	58020800 	.word	0x58020800
 8002588:	58020c00 	.word	0x58020c00
 800258c:	58021000 	.word	0x58021000
 8002590:	58021400 	.word	0x58021400
 8002594:	58021800 	.word	0x58021800
 8002598:	58021c00 	.word	0x58021c00
 800259c:	58022000 	.word	0x58022000
 80025a0:	58022400 	.word	0x58022400
 80025a4:	2300      	movs	r3, #0
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	f002 0203 	and.w	r2, r2, #3
 80025ac:	0092      	lsls	r2, r2, #2
 80025ae:	4093      	lsls	r3, r2
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025b6:	4938      	ldr	r1, [pc, #224]	@ (8002698 <HAL_GPIO_Init+0x35c>)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	089b      	lsrs	r3, r3, #2
 80025bc:	3302      	adds	r3, #2
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80025ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80025f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002618:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	3301      	adds	r3, #1
 8002678:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	f47f ae63 	bne.w	8002350 <HAL_GPIO_Init+0x14>
  }
}
 800268a:	bf00      	nop
 800268c:	bf00      	nop
 800268e:	3724      	adds	r7, #36	@ 0x24
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	58000400 	.word	0x58000400

0800269c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80026a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d008      	beq.n	80026c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026ba:	88fb      	ldrh	r3, [r7, #6]
 80026bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026c0:	88fb      	ldrh	r3, [r7, #6]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fe0c 	bl	80012e0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80026d8:	4a08      	ldr	r2, [pc, #32]	@ (80026fc <HAL_HSEM_FastTake+0x2c>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3320      	adds	r3, #32
 80026de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e2:	4a07      	ldr	r2, [pc, #28]	@ (8002700 <HAL_HSEM_FastTake+0x30>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d101      	bne.n	80026ec <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	e000      	b.n	80026ee <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	58026400 	.word	0x58026400
 8002700:	80000300 	.word	0x80000300

08002704 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800270e:	4906      	ldr	r1, [pc, #24]	@ (8002728 <HAL_HSEM_Release+0x24>)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	58026400 	.word	0x58026400

0800272c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002734:	4b29      	ldr	r3, [pc, #164]	@ (80027dc <HAL_PWREx_ConfigSupply+0xb0>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	2b06      	cmp	r3, #6
 800273e:	d00a      	beq.n	8002756 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002740:	4b26      	ldr	r3, [pc, #152]	@ (80027dc <HAL_PWREx_ConfigSupply+0xb0>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	429a      	cmp	r2, r3
 800274c:	d001      	beq.n	8002752 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e040      	b.n	80027d4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	e03e      	b.n	80027d4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002756:	4b21      	ldr	r3, [pc, #132]	@ (80027dc <HAL_PWREx_ConfigSupply+0xb0>)
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800275e:	491f      	ldr	r1, [pc, #124]	@ (80027dc <HAL_PWREx_ConfigSupply+0xb0>)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4313      	orrs	r3, r2
 8002764:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002766:	f7ff fcbb 	bl	80020e0 <HAL_GetTick>
 800276a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800276c:	e009      	b.n	8002782 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800276e:	f7ff fcb7 	bl	80020e0 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800277c:	d901      	bls.n	8002782 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e028      	b.n	80027d4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002782:	4b16      	ldr	r3, [pc, #88]	@ (80027dc <HAL_PWREx_ConfigSupply+0xb0>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800278a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800278e:	d1ee      	bne.n	800276e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b1e      	cmp	r3, #30
 8002794:	d008      	beq.n	80027a8 <HAL_PWREx_ConfigSupply+0x7c>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b2e      	cmp	r3, #46	@ 0x2e
 800279a:	d005      	beq.n	80027a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b1d      	cmp	r3, #29
 80027a0:	d002      	beq.n	80027a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b2d      	cmp	r3, #45	@ 0x2d
 80027a6:	d114      	bne.n	80027d2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80027a8:	f7ff fc9a 	bl	80020e0 <HAL_GetTick>
 80027ac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80027ae:	e009      	b.n	80027c4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027b0:	f7ff fc96 	bl	80020e0 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027be:	d901      	bls.n	80027c4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e007      	b.n	80027d4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80027c4:	4b05      	ldr	r3, [pc, #20]	@ (80027dc <HAL_PWREx_ConfigSupply+0xb0>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027d0:	d1ee      	bne.n	80027b0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	58024800 	.word	0x58024800

080027e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08c      	sub	sp, #48	@ 0x30
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d102      	bne.n	80027f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	f000 bc48 	b.w	8003084 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 8088 	beq.w	8002912 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002802:	4b99      	ldr	r3, [pc, #612]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800280a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800280c:	4b96      	ldr	r3, [pc, #600]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 800280e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002810:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002814:	2b10      	cmp	r3, #16
 8002816:	d007      	beq.n	8002828 <HAL_RCC_OscConfig+0x48>
 8002818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800281a:	2b18      	cmp	r3, #24
 800281c:	d111      	bne.n	8002842 <HAL_RCC_OscConfig+0x62>
 800281e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d10c      	bne.n	8002842 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002828:	4b8f      	ldr	r3, [pc, #572]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d06d      	beq.n	8002910 <HAL_RCC_OscConfig+0x130>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d169      	bne.n	8002910 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	f000 bc21 	b.w	8003084 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800284a:	d106      	bne.n	800285a <HAL_RCC_OscConfig+0x7a>
 800284c:	4b86      	ldr	r3, [pc, #536]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a85      	ldr	r2, [pc, #532]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 8002852:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	e02e      	b.n	80028b8 <HAL_RCC_OscConfig+0xd8>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10c      	bne.n	800287c <HAL_RCC_OscConfig+0x9c>
 8002862:	4b81      	ldr	r3, [pc, #516]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a80      	ldr	r2, [pc, #512]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 8002868:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b7e      	ldr	r3, [pc, #504]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a7d      	ldr	r2, [pc, #500]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 8002874:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e01d      	b.n	80028b8 <HAL_RCC_OscConfig+0xd8>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0xc0>
 8002886:	4b78      	ldr	r3, [pc, #480]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a77      	ldr	r2, [pc, #476]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 800288c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b75      	ldr	r3, [pc, #468]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a74      	ldr	r2, [pc, #464]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 8002898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e00b      	b.n	80028b8 <HAL_RCC_OscConfig+0xd8>
 80028a0:	4b71      	ldr	r3, [pc, #452]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a70      	ldr	r2, [pc, #448]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 80028a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b6e      	ldr	r3, [pc, #440]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a6d      	ldr	r2, [pc, #436]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 80028b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d013      	beq.n	80028e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7ff fc0e 	bl	80020e0 <HAL_GetTick>
 80028c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c8:	f7ff fc0a 	bl	80020e0 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	@ 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e3d4      	b.n	8003084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028da:	4b63      	ldr	r3, [pc, #396]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0xe8>
 80028e6:	e014      	b.n	8002912 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7ff fbfa 	bl	80020e0 <HAL_GetTick>
 80028ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f0:	f7ff fbf6 	bl	80020e0 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	@ 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e3c0      	b.n	8003084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002902:	4b59      	ldr	r3, [pc, #356]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x110>
 800290e:	e000      	b.n	8002912 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 80ca 	beq.w	8002ab4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002920:	4b51      	ldr	r3, [pc, #324]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002928:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800292a:	4b4f      	ldr	r3, [pc, #316]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 800292c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d007      	beq.n	8002946 <HAL_RCC_OscConfig+0x166>
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	2b18      	cmp	r3, #24
 800293a:	d156      	bne.n	80029ea <HAL_RCC_OscConfig+0x20a>
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d151      	bne.n	80029ea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002946:	4b48      	ldr	r3, [pc, #288]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	2b00      	cmp	r3, #0
 8002950:	d005      	beq.n	800295e <HAL_RCC_OscConfig+0x17e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e392      	b.n	8003084 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800295e:	4b42      	ldr	r3, [pc, #264]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 0219 	bic.w	r2, r3, #25
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	493f      	ldr	r1, [pc, #252]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 800296c:	4313      	orrs	r3, r2
 800296e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7ff fbb6 	bl	80020e0 <HAL_GetTick>
 8002974:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002978:	f7ff fbb2 	bl	80020e0 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e37c      	b.n	8003084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800298a:	4b37      	ldr	r3, [pc, #220]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002996:	f7ff fbd3 	bl	8002140 <HAL_GetREVID>
 800299a:	4603      	mov	r3, r0
 800299c:	f241 0203 	movw	r2, #4099	@ 0x1003
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d817      	bhi.n	80029d4 <HAL_RCC_OscConfig+0x1f4>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b40      	cmp	r3, #64	@ 0x40
 80029aa:	d108      	bne.n	80029be <HAL_RCC_OscConfig+0x1de>
 80029ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80029b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 80029b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029bc:	e07a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029be:	4b2a      	ldr	r3, [pc, #168]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	031b      	lsls	r3, r3, #12
 80029cc:	4926      	ldr	r1, [pc, #152]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d2:	e06f      	b.n	8002ab4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d4:	4b24      	ldr	r3, [pc, #144]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	061b      	lsls	r3, r3, #24
 80029e2:	4921      	ldr	r1, [pc, #132]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e8:	e064      	b.n	8002ab4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d047      	beq.n	8002a82 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 0219 	bic.w	r2, r3, #25
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	491a      	ldr	r1, [pc, #104]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a04:	f7ff fb6c 	bl	80020e0 <HAL_GetTick>
 8002a08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a0c:	f7ff fb68 	bl	80020e0 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e332      	b.n	8003084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a1e:	4b12      	ldr	r3, [pc, #72]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2a:	f7ff fb89 	bl	8002140 <HAL_GetREVID>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d819      	bhi.n	8002a6c <HAL_RCC_OscConfig+0x28c>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	2b40      	cmp	r3, #64	@ 0x40
 8002a3e:	d108      	bne.n	8002a52 <HAL_RCC_OscConfig+0x272>
 8002a40:	4b09      	ldr	r3, [pc, #36]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002a48:	4a07      	ldr	r2, [pc, #28]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 8002a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a4e:	6053      	str	r3, [r2, #4]
 8002a50:	e030      	b.n	8002ab4 <HAL_RCC_OscConfig+0x2d4>
 8002a52:	4b05      	ldr	r3, [pc, #20]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	031b      	lsls	r3, r3, #12
 8002a60:	4901      	ldr	r1, [pc, #4]	@ (8002a68 <HAL_RCC_OscConfig+0x288>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
 8002a66:	e025      	b.n	8002ab4 <HAL_RCC_OscConfig+0x2d4>
 8002a68:	58024400 	.word	0x58024400
 8002a6c:	4b9a      	ldr	r3, [pc, #616]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	061b      	lsls	r3, r3, #24
 8002a7a:	4997      	ldr	r1, [pc, #604]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
 8002a80:	e018      	b.n	8002ab4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a82:	4b95      	ldr	r3, [pc, #596]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a94      	ldr	r2, [pc, #592]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8e:	f7ff fb27 	bl	80020e0 <HAL_GetTick>
 8002a92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a96:	f7ff fb23 	bl	80020e0 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e2ed      	b.n	8003084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002aa8:	4b8b      	ldr	r3, [pc, #556]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f0      	bne.n	8002a96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0310 	and.w	r3, r3, #16
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 80a9 	beq.w	8002c14 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ac2:	4b85      	ldr	r3, [pc, #532]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002aca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002acc:	4b82      	ldr	r3, [pc, #520]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d007      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x308>
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2b18      	cmp	r3, #24
 8002adc:	d13a      	bne.n	8002b54 <HAL_RCC_OscConfig+0x374>
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d135      	bne.n	8002b54 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ae8:	4b7b      	ldr	r3, [pc, #492]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_OscConfig+0x320>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	2b80      	cmp	r3, #128	@ 0x80
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e2c1      	b.n	8003084 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b00:	f7ff fb1e 	bl	8002140 <HAL_GetREVID>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d817      	bhi.n	8002b3e <HAL_RCC_OscConfig+0x35e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d108      	bne.n	8002b28 <HAL_RCC_OscConfig+0x348>
 8002b16:	4b70      	ldr	r3, [pc, #448]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002b1e:	4a6e      	ldr	r2, [pc, #440]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002b20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b24:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b26:	e075      	b.n	8002c14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b28:	4b6b      	ldr	r3, [pc, #428]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	069b      	lsls	r3, r3, #26
 8002b36:	4968      	ldr	r1, [pc, #416]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b3c:	e06a      	b.n	8002c14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b3e:	4b66      	ldr	r3, [pc, #408]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	061b      	lsls	r3, r3, #24
 8002b4c:	4962      	ldr	r1, [pc, #392]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b52:	e05f      	b.n	8002c14 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d042      	beq.n	8002be2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b5c:	4b5e      	ldr	r3, [pc, #376]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a5d      	ldr	r2, [pc, #372]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7ff faba 	bl	80020e0 <HAL_GetTick>
 8002b6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b70:	f7ff fab6 	bl	80020e0 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e280      	b.n	8003084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b82:	4b55      	ldr	r3, [pc, #340]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b8e:	f7ff fad7 	bl	8002140 <HAL_GetREVID>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d817      	bhi.n	8002bcc <HAL_RCC_OscConfig+0x3ec>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d108      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x3d6>
 8002ba4:	4b4c      	ldr	r3, [pc, #304]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002bac:	4a4a      	ldr	r2, [pc, #296]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002bae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002bb2:	6053      	str	r3, [r2, #4]
 8002bb4:	e02e      	b.n	8002c14 <HAL_RCC_OscConfig+0x434>
 8002bb6:	4b48      	ldr	r3, [pc, #288]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	069b      	lsls	r3, r3, #26
 8002bc4:	4944      	ldr	r1, [pc, #272]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]
 8002bca:	e023      	b.n	8002c14 <HAL_RCC_OscConfig+0x434>
 8002bcc:	4b42      	ldr	r3, [pc, #264]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	061b      	lsls	r3, r3, #24
 8002bda:	493f      	ldr	r1, [pc, #252]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60cb      	str	r3, [r1, #12]
 8002be0:	e018      	b.n	8002c14 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002be2:	4b3d      	ldr	r3, [pc, #244]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a3c      	ldr	r2, [pc, #240]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002be8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bee:	f7ff fa77 	bl	80020e0 <HAL_GetTick>
 8002bf2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002bf6:	f7ff fa73 	bl	80020e0 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e23d      	b.n	8003084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c08:	4b33      	ldr	r3, [pc, #204]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f0      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d036      	beq.n	8002c8e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d019      	beq.n	8002c5c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c28:	4b2b      	ldr	r3, [pc, #172]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002c2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c2c:	4a2a      	ldr	r2, [pc, #168]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7ff fa54 	bl	80020e0 <HAL_GetTick>
 8002c38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c3c:	f7ff fa50 	bl	80020e0 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e21a      	b.n	8003084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c4e:	4b22      	ldr	r3, [pc, #136]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x45c>
 8002c5a:	e018      	b.n	8002c8e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002c5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c60:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002c62:	f023 0301 	bic.w	r3, r3, #1
 8002c66:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c68:	f7ff fa3a 	bl	80020e0 <HAL_GetTick>
 8002c6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c70:	f7ff fa36 	bl	80020e0 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e200      	b.n	8003084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c82:	4b15      	ldr	r3, [pc, #84]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d039      	beq.n	8002d0e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d01c      	beq.n	8002cdc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a0c      	ldr	r2, [pc, #48]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002ca8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cae:	f7ff fa17 	bl	80020e0 <HAL_GetTick>
 8002cb2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cb6:	f7ff fa13 	bl	80020e0 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e1dd      	b.n	8003084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cc8:	4b03      	ldr	r3, [pc, #12]	@ (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x4d6>
 8002cd4:	e01b      	b.n	8002d0e <HAL_RCC_OscConfig+0x52e>
 8002cd6:	bf00      	nop
 8002cd8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cdc:	4b9b      	ldr	r3, [pc, #620]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a9a      	ldr	r2, [pc, #616]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002ce2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ce6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ce8:	f7ff f9fa 	bl	80020e0 <HAL_GetTick>
 8002cec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cf0:	f7ff f9f6 	bl	80020e0 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e1c0      	b.n	8003084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d02:	4b92      	ldr	r3, [pc, #584]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 8081 	beq.w	8002e1e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d1c:	4b8c      	ldr	r3, [pc, #560]	@ (8002f50 <HAL_RCC_OscConfig+0x770>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a8b      	ldr	r2, [pc, #556]	@ (8002f50 <HAL_RCC_OscConfig+0x770>)
 8002d22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d28:	f7ff f9da 	bl	80020e0 <HAL_GetTick>
 8002d2c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d30:	f7ff f9d6 	bl	80020e0 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	@ 0x64
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e1a0      	b.n	8003084 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d42:	4b83      	ldr	r3, [pc, #524]	@ (8002f50 <HAL_RCC_OscConfig+0x770>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d106      	bne.n	8002d64 <HAL_RCC_OscConfig+0x584>
 8002d56:	4b7d      	ldr	r3, [pc, #500]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5a:	4a7c      	ldr	r2, [pc, #496]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d62:	e02d      	b.n	8002dc0 <HAL_RCC_OscConfig+0x5e0>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10c      	bne.n	8002d86 <HAL_RCC_OscConfig+0x5a6>
 8002d6c:	4b77      	ldr	r3, [pc, #476]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d70:	4a76      	ldr	r2, [pc, #472]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002d72:	f023 0301 	bic.w	r3, r3, #1
 8002d76:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d78:	4b74      	ldr	r3, [pc, #464]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7c:	4a73      	ldr	r2, [pc, #460]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002d7e:	f023 0304 	bic.w	r3, r3, #4
 8002d82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d84:	e01c      	b.n	8002dc0 <HAL_RCC_OscConfig+0x5e0>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	2b05      	cmp	r3, #5
 8002d8c:	d10c      	bne.n	8002da8 <HAL_RCC_OscConfig+0x5c8>
 8002d8e:	4b6f      	ldr	r3, [pc, #444]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d92:	4a6e      	ldr	r2, [pc, #440]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002d94:	f043 0304 	orr.w	r3, r3, #4
 8002d98:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d9a:	4b6c      	ldr	r3, [pc, #432]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9e:	4a6b      	ldr	r2, [pc, #428]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002da6:	e00b      	b.n	8002dc0 <HAL_RCC_OscConfig+0x5e0>
 8002da8:	4b68      	ldr	r3, [pc, #416]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dac:	4a67      	ldr	r2, [pc, #412]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002dae:	f023 0301 	bic.w	r3, r3, #1
 8002db2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002db4:	4b65      	ldr	r3, [pc, #404]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db8:	4a64      	ldr	r2, [pc, #400]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002dba:	f023 0304 	bic.w	r3, r3, #4
 8002dbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d015      	beq.n	8002df4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc8:	f7ff f98a 	bl	80020e0 <HAL_GetTick>
 8002dcc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dce:	e00a      	b.n	8002de6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd0:	f7ff f986 	bl	80020e0 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e14e      	b.n	8003084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002de6:	4b59      	ldr	r3, [pc, #356]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0ee      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x5f0>
 8002df2:	e014      	b.n	8002e1e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df4:	f7ff f974 	bl	80020e0 <HAL_GetTick>
 8002df8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dfa:	e00a      	b.n	8002e12 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfc:	f7ff f970 	bl	80020e0 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e138      	b.n	8003084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e12:	4b4e      	ldr	r3, [pc, #312]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1ee      	bne.n	8002dfc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 812d 	beq.w	8003082 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e28:	4b48      	ldr	r3, [pc, #288]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e30:	2b18      	cmp	r3, #24
 8002e32:	f000 80bd 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	f040 809e 	bne.w	8002f7c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e40:	4b42      	ldr	r3, [pc, #264]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a41      	ldr	r2, [pc, #260]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002e46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7ff f948 	bl	80020e0 <HAL_GetTick>
 8002e50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e54:	f7ff f944 	bl	80020e0 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e10e      	b.n	8003084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e66:	4b39      	ldr	r3, [pc, #228]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e72:	4b36      	ldr	r3, [pc, #216]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002e74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e76:	4b37      	ldr	r3, [pc, #220]	@ (8002f54 <HAL_RCC_OscConfig+0x774>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e82:	0112      	lsls	r2, r2, #4
 8002e84:	430a      	orrs	r2, r1
 8002e86:	4931      	ldr	r1, [pc, #196]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	628b      	str	r3, [r1, #40]	@ 0x28
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e90:	3b01      	subs	r3, #1
 8002e92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	025b      	lsls	r3, r3, #9
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	041b      	lsls	r3, r3, #16
 8002eaa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	061b      	lsls	r3, r3, #24
 8002eb8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002ebc:	4923      	ldr	r1, [pc, #140]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002ec2:	4b22      	ldr	r3, [pc, #136]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec6:	4a21      	ldr	r2, [pc, #132]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ece:	4b1f      	ldr	r3, [pc, #124]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002ed0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ed2:	4b21      	ldr	r3, [pc, #132]	@ (8002f58 <HAL_RCC_OscConfig+0x778>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002eda:	00d2      	lsls	r2, r2, #3
 8002edc:	491b      	ldr	r1, [pc, #108]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee6:	f023 020c 	bic.w	r2, r3, #12
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	4917      	ldr	r1, [pc, #92]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ef4:	4b15      	ldr	r3, [pc, #84]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef8:	f023 0202 	bic.w	r2, r3, #2
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f00:	4912      	ldr	r1, [pc, #72]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f06:	4b11      	ldr	r3, [pc, #68]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0a:	4a10      	ldr	r2, [pc, #64]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f12:	4b0e      	ldr	r3, [pc, #56]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f16:	4a0d      	ldr	r2, [pc, #52]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f22:	4a0a      	ldr	r2, [pc, #40]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002f24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002f2a:	4b08      	ldr	r3, [pc, #32]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2e:	4a07      	ldr	r2, [pc, #28]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f36:	4b05      	ldr	r3, [pc, #20]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a04      	ldr	r2, [pc, #16]	@ (8002f4c <HAL_RCC_OscConfig+0x76c>)
 8002f3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f42:	f7ff f8cd 	bl	80020e0 <HAL_GetTick>
 8002f46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f48:	e011      	b.n	8002f6e <HAL_RCC_OscConfig+0x78e>
 8002f4a:	bf00      	nop
 8002f4c:	58024400 	.word	0x58024400
 8002f50:	58024800 	.word	0x58024800
 8002f54:	fffffc0c 	.word	0xfffffc0c
 8002f58:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5c:	f7ff f8c0 	bl	80020e0 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e08a      	b.n	8003084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f6e:	4b47      	ldr	r3, [pc, #284]	@ (800308c <HAL_RCC_OscConfig+0x8ac>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0x77c>
 8002f7a:	e082      	b.n	8003082 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7c:	4b43      	ldr	r3, [pc, #268]	@ (800308c <HAL_RCC_OscConfig+0x8ac>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a42      	ldr	r2, [pc, #264]	@ (800308c <HAL_RCC_OscConfig+0x8ac>)
 8002f82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7ff f8aa 	bl	80020e0 <HAL_GetTick>
 8002f8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f90:	f7ff f8a6 	bl	80020e0 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e070      	b.n	8003084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fa2:	4b3a      	ldr	r3, [pc, #232]	@ (800308c <HAL_RCC_OscConfig+0x8ac>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x7b0>
 8002fae:	e068      	b.n	8003082 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002fb0:	4b36      	ldr	r3, [pc, #216]	@ (800308c <HAL_RCC_OscConfig+0x8ac>)
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002fb6:	4b35      	ldr	r3, [pc, #212]	@ (800308c <HAL_RCC_OscConfig+0x8ac>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d031      	beq.n	8003028 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f003 0203 	and.w	r2, r3, #3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d12a      	bne.n	8003028 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d122      	bne.n	8003028 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d11a      	bne.n	8003028 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	0a5b      	lsrs	r3, r3, #9
 8002ff6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ffe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003000:	429a      	cmp	r2, r3
 8003002:	d111      	bne.n	8003028 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	0c1b      	lsrs	r3, r3, #16
 8003008:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003010:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d108      	bne.n	8003028 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	0e1b      	lsrs	r3, r3, #24
 800301a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003022:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003024:	429a      	cmp	r2, r3
 8003026:	d001      	beq.n	800302c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e02b      	b.n	8003084 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800302c:	4b17      	ldr	r3, [pc, #92]	@ (800308c <HAL_RCC_OscConfig+0x8ac>)
 800302e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003030:	08db      	lsrs	r3, r3, #3
 8003032:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003036:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	429a      	cmp	r2, r3
 8003040:	d01f      	beq.n	8003082 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003042:	4b12      	ldr	r3, [pc, #72]	@ (800308c <HAL_RCC_OscConfig+0x8ac>)
 8003044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003046:	4a11      	ldr	r2, [pc, #68]	@ (800308c <HAL_RCC_OscConfig+0x8ac>)
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800304e:	f7ff f847 	bl	80020e0 <HAL_GetTick>
 8003052:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003054:	bf00      	nop
 8003056:	f7ff f843 	bl	80020e0 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305e:	4293      	cmp	r3, r2
 8003060:	d0f9      	beq.n	8003056 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003062:	4b0a      	ldr	r3, [pc, #40]	@ (800308c <HAL_RCC_OscConfig+0x8ac>)
 8003064:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003066:	4b0a      	ldr	r3, [pc, #40]	@ (8003090 <HAL_RCC_OscConfig+0x8b0>)
 8003068:	4013      	ands	r3, r2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800306e:	00d2      	lsls	r2, r2, #3
 8003070:	4906      	ldr	r1, [pc, #24]	@ (800308c <HAL_RCC_OscConfig+0x8ac>)
 8003072:	4313      	orrs	r3, r2
 8003074:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003076:	4b05      	ldr	r3, [pc, #20]	@ (800308c <HAL_RCC_OscConfig+0x8ac>)
 8003078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307a:	4a04      	ldr	r2, [pc, #16]	@ (800308c <HAL_RCC_OscConfig+0x8ac>)
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3730      	adds	r7, #48	@ 0x30
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	58024400 	.word	0x58024400
 8003090:	ffff0007 	.word	0xffff0007

08003094 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e19c      	b.n	80033e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030a8:	4b8a      	ldr	r3, [pc, #552]	@ (80032d4 <HAL_RCC_ClockConfig+0x240>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d910      	bls.n	80030d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b6:	4b87      	ldr	r3, [pc, #540]	@ (80032d4 <HAL_RCC_ClockConfig+0x240>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 020f 	bic.w	r2, r3, #15
 80030be:	4985      	ldr	r1, [pc, #532]	@ (80032d4 <HAL_RCC_ClockConfig+0x240>)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c6:	4b83      	ldr	r3, [pc, #524]	@ (80032d4 <HAL_RCC_ClockConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e184      	b.n	80033e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d010      	beq.n	8003106 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	4b7b      	ldr	r3, [pc, #492]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d908      	bls.n	8003106 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030f4:	4b78      	ldr	r3, [pc, #480]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	4975      	ldr	r1, [pc, #468]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 8003102:	4313      	orrs	r3, r2
 8003104:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d010      	beq.n	8003134 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695a      	ldr	r2, [r3, #20]
 8003116:	4b70      	ldr	r3, [pc, #448]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800311e:	429a      	cmp	r2, r3
 8003120:	d908      	bls.n	8003134 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003122:	4b6d      	ldr	r3, [pc, #436]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	496a      	ldr	r1, [pc, #424]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 8003130:	4313      	orrs	r3, r2
 8003132:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b00      	cmp	r3, #0
 800313e:	d010      	beq.n	8003162 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699a      	ldr	r2, [r3, #24]
 8003144:	4b64      	ldr	r3, [pc, #400]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800314c:	429a      	cmp	r2, r3
 800314e:	d908      	bls.n	8003162 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003150:	4b61      	ldr	r3, [pc, #388]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	495e      	ldr	r1, [pc, #376]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 800315e:	4313      	orrs	r3, r2
 8003160:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0320 	and.w	r3, r3, #32
 800316a:	2b00      	cmp	r3, #0
 800316c:	d010      	beq.n	8003190 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69da      	ldr	r2, [r3, #28]
 8003172:	4b59      	ldr	r3, [pc, #356]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800317a:	429a      	cmp	r2, r3
 800317c:	d908      	bls.n	8003190 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800317e:	4b56      	ldr	r3, [pc, #344]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	4953      	ldr	r1, [pc, #332]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 800318c:	4313      	orrs	r3, r2
 800318e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d010      	beq.n	80031be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	4b4d      	ldr	r3, [pc, #308]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d908      	bls.n	80031be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ac:	4b4a      	ldr	r3, [pc, #296]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f023 020f 	bic.w	r2, r3, #15
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	4947      	ldr	r1, [pc, #284]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d055      	beq.n	8003276 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80031ca:	4b43      	ldr	r3, [pc, #268]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	4940      	ldr	r1, [pc, #256]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d107      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031e4:	4b3c      	ldr	r3, [pc, #240]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d121      	bne.n	8003234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0f6      	b.n	80033e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d107      	bne.n	800320c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031fc:	4b36      	ldr	r3, [pc, #216]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d115      	bne.n	8003234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0ea      	b.n	80033e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d107      	bne.n	8003224 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003214:	4b30      	ldr	r3, [pc, #192]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0de      	b.n	80033e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003224:	4b2c      	ldr	r3, [pc, #176]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0d6      	b.n	80033e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003234:	4b28      	ldr	r3, [pc, #160]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	f023 0207 	bic.w	r2, r3, #7
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	4925      	ldr	r1, [pc, #148]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 8003242:	4313      	orrs	r3, r2
 8003244:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003246:	f7fe ff4b 	bl	80020e0 <HAL_GetTick>
 800324a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324c:	e00a      	b.n	8003264 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800324e:	f7fe ff47 	bl	80020e0 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800325c:	4293      	cmp	r3, r2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e0be      	b.n	80033e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003264:	4b1c      	ldr	r3, [pc, #112]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	429a      	cmp	r2, r3
 8003274:	d1eb      	bne.n	800324e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d010      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	4b14      	ldr	r3, [pc, #80]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	429a      	cmp	r2, r3
 8003290:	d208      	bcs.n	80032a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003292:	4b11      	ldr	r3, [pc, #68]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	f023 020f 	bic.w	r2, r3, #15
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	490e      	ldr	r1, [pc, #56]	@ (80032d8 <HAL_RCC_ClockConfig+0x244>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032a4:	4b0b      	ldr	r3, [pc, #44]	@ (80032d4 <HAL_RCC_ClockConfig+0x240>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 030f 	and.w	r3, r3, #15
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d214      	bcs.n	80032dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b2:	4b08      	ldr	r3, [pc, #32]	@ (80032d4 <HAL_RCC_ClockConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 020f 	bic.w	r2, r3, #15
 80032ba:	4906      	ldr	r1, [pc, #24]	@ (80032d4 <HAL_RCC_ClockConfig+0x240>)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	4313      	orrs	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c2:	4b04      	ldr	r3, [pc, #16]	@ (80032d4 <HAL_RCC_ClockConfig+0x240>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d005      	beq.n	80032dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e086      	b.n	80033e2 <HAL_RCC_ClockConfig+0x34e>
 80032d4:	52002000 	.word	0x52002000
 80032d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d010      	beq.n	800330a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	4b3f      	ldr	r3, [pc, #252]	@ (80033ec <HAL_RCC_ClockConfig+0x358>)
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d208      	bcs.n	800330a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032f8:	4b3c      	ldr	r3, [pc, #240]	@ (80033ec <HAL_RCC_ClockConfig+0x358>)
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	4939      	ldr	r1, [pc, #228]	@ (80033ec <HAL_RCC_ClockConfig+0x358>)
 8003306:	4313      	orrs	r3, r2
 8003308:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d010      	beq.n	8003338 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695a      	ldr	r2, [r3, #20]
 800331a:	4b34      	ldr	r3, [pc, #208]	@ (80033ec <HAL_RCC_ClockConfig+0x358>)
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003322:	429a      	cmp	r2, r3
 8003324:	d208      	bcs.n	8003338 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003326:	4b31      	ldr	r3, [pc, #196]	@ (80033ec <HAL_RCC_ClockConfig+0x358>)
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	492e      	ldr	r1, [pc, #184]	@ (80033ec <HAL_RCC_ClockConfig+0x358>)
 8003334:	4313      	orrs	r3, r2
 8003336:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b00      	cmp	r3, #0
 8003342:	d010      	beq.n	8003366 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	699a      	ldr	r2, [r3, #24]
 8003348:	4b28      	ldr	r3, [pc, #160]	@ (80033ec <HAL_RCC_ClockConfig+0x358>)
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003350:	429a      	cmp	r2, r3
 8003352:	d208      	bcs.n	8003366 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003354:	4b25      	ldr	r3, [pc, #148]	@ (80033ec <HAL_RCC_ClockConfig+0x358>)
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	4922      	ldr	r1, [pc, #136]	@ (80033ec <HAL_RCC_ClockConfig+0x358>)
 8003362:	4313      	orrs	r3, r2
 8003364:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0320 	and.w	r3, r3, #32
 800336e:	2b00      	cmp	r3, #0
 8003370:	d010      	beq.n	8003394 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69da      	ldr	r2, [r3, #28]
 8003376:	4b1d      	ldr	r3, [pc, #116]	@ (80033ec <HAL_RCC_ClockConfig+0x358>)
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800337e:	429a      	cmp	r2, r3
 8003380:	d208      	bcs.n	8003394 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003382:	4b1a      	ldr	r3, [pc, #104]	@ (80033ec <HAL_RCC_ClockConfig+0x358>)
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	4917      	ldr	r1, [pc, #92]	@ (80033ec <HAL_RCC_ClockConfig+0x358>)
 8003390:	4313      	orrs	r3, r2
 8003392:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003394:	f000 f89e 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 8003398:	4602      	mov	r2, r0
 800339a:	4b14      	ldr	r3, [pc, #80]	@ (80033ec <HAL_RCC_ClockConfig+0x358>)
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	4912      	ldr	r1, [pc, #72]	@ (80033f0 <HAL_RCC_ClockConfig+0x35c>)
 80033a6:	5ccb      	ldrb	r3, [r1, r3]
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
 80033b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033b2:	4b0e      	ldr	r3, [pc, #56]	@ (80033ec <HAL_RCC_ClockConfig+0x358>)
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	4a0d      	ldr	r2, [pc, #52]	@ (80033f0 <HAL_RCC_ClockConfig+0x35c>)
 80033bc:	5cd3      	ldrb	r3, [r2, r3]
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	fa22 f303 	lsr.w	r3, r2, r3
 80033c8:	4a0a      	ldr	r2, [pc, #40]	@ (80033f4 <HAL_RCC_ClockConfig+0x360>)
 80033ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033cc:	4a0a      	ldr	r2, [pc, #40]	@ (80033f8 <HAL_RCC_ClockConfig+0x364>)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80033d2:	4b0a      	ldr	r3, [pc, #40]	@ (80033fc <HAL_RCC_ClockConfig+0x368>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fcca 	bl	8001d70 <HAL_InitTick>
 80033dc:	4603      	mov	r3, r0
 80033de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	58024400 	.word	0x58024400
 80033f0:	0800be64 	.word	0x0800be64
 80033f4:	24000004 	.word	0x24000004
 80033f8:	24000000 	.word	0x24000000
 80033fc:	24000008 	.word	0x24000008

08003400 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08c      	sub	sp, #48	@ 0x30
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d12a      	bne.n	8003468 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003412:	4b2d      	ldr	r3, [pc, #180]	@ (80034c8 <HAL_RCC_MCOConfig+0xc8>)
 8003414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003418:	4a2b      	ldr	r2, [pc, #172]	@ (80034c8 <HAL_RCC_MCOConfig+0xc8>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003422:	4b29      	ldr	r3, [pc, #164]	@ (80034c8 <HAL_RCC_MCOConfig+0xc8>)
 8003424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003430:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003436:	2302      	movs	r3, #2
 8003438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800343a:	2303      	movs	r3, #3
 800343c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343e:	2300      	movs	r3, #0
 8003440:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003442:	2300      	movs	r3, #0
 8003444:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003446:	f107 031c 	add.w	r3, r7, #28
 800344a:	4619      	mov	r1, r3
 800344c:	481f      	ldr	r0, [pc, #124]	@ (80034cc <HAL_RCC_MCOConfig+0xcc>)
 800344e:	f7fe ff75 	bl	800233c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003452:	4b1d      	ldr	r3, [pc, #116]	@ (80034c8 <HAL_RCC_MCOConfig+0xc8>)
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800345a:	68b9      	ldr	r1, [r7, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	430b      	orrs	r3, r1
 8003460:	4919      	ldr	r1, [pc, #100]	@ (80034c8 <HAL_RCC_MCOConfig+0xc8>)
 8003462:	4313      	orrs	r3, r2
 8003464:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8003466:	e02a      	b.n	80034be <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8003468:	4b17      	ldr	r3, [pc, #92]	@ (80034c8 <HAL_RCC_MCOConfig+0xc8>)
 800346a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800346e:	4a16      	ldr	r2, [pc, #88]	@ (80034c8 <HAL_RCC_MCOConfig+0xc8>)
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003478:	4b13      	ldr	r3, [pc, #76]	@ (80034c8 <HAL_RCC_MCOConfig+0xc8>)
 800347a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003486:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800348a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348c:	2302      	movs	r3, #2
 800348e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003490:	2303      	movs	r3, #3
 8003492:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003494:	2300      	movs	r3, #0
 8003496:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003498:	2300      	movs	r3, #0
 800349a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800349c:	f107 031c 	add.w	r3, r7, #28
 80034a0:	4619      	mov	r1, r3
 80034a2:	480b      	ldr	r0, [pc, #44]	@ (80034d0 <HAL_RCC_MCOConfig+0xd0>)
 80034a4:	f7fe ff4a 	bl	800233c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80034a8:	4b07      	ldr	r3, [pc, #28]	@ (80034c8 <HAL_RCC_MCOConfig+0xc8>)
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	01d9      	lsls	r1, r3, #7
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	430b      	orrs	r3, r1
 80034b8:	4903      	ldr	r1, [pc, #12]	@ (80034c8 <HAL_RCC_MCOConfig+0xc8>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	610b      	str	r3, [r1, #16]
}
 80034be:	bf00      	nop
 80034c0:	3730      	adds	r7, #48	@ 0x30
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	58024400 	.word	0x58024400
 80034cc:	58020000 	.word	0x58020000
 80034d0:	58020800 	.word	0x58020800

080034d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b089      	sub	sp, #36	@ 0x24
 80034d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034da:	4bb3      	ldr	r3, [pc, #716]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034e2:	2b18      	cmp	r3, #24
 80034e4:	f200 8155 	bhi.w	8003792 <HAL_RCC_GetSysClockFreq+0x2be>
 80034e8:	a201      	add	r2, pc, #4	@ (adr r2, 80034f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80034ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ee:	bf00      	nop
 80034f0:	08003555 	.word	0x08003555
 80034f4:	08003793 	.word	0x08003793
 80034f8:	08003793 	.word	0x08003793
 80034fc:	08003793 	.word	0x08003793
 8003500:	08003793 	.word	0x08003793
 8003504:	08003793 	.word	0x08003793
 8003508:	08003793 	.word	0x08003793
 800350c:	08003793 	.word	0x08003793
 8003510:	0800357b 	.word	0x0800357b
 8003514:	08003793 	.word	0x08003793
 8003518:	08003793 	.word	0x08003793
 800351c:	08003793 	.word	0x08003793
 8003520:	08003793 	.word	0x08003793
 8003524:	08003793 	.word	0x08003793
 8003528:	08003793 	.word	0x08003793
 800352c:	08003793 	.word	0x08003793
 8003530:	08003581 	.word	0x08003581
 8003534:	08003793 	.word	0x08003793
 8003538:	08003793 	.word	0x08003793
 800353c:	08003793 	.word	0x08003793
 8003540:	08003793 	.word	0x08003793
 8003544:	08003793 	.word	0x08003793
 8003548:	08003793 	.word	0x08003793
 800354c:	08003793 	.word	0x08003793
 8003550:	08003587 	.word	0x08003587
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003554:	4b94      	ldr	r3, [pc, #592]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0320 	and.w	r3, r3, #32
 800355c:	2b00      	cmp	r3, #0
 800355e:	d009      	beq.n	8003574 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003560:	4b91      	ldr	r3, [pc, #580]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	08db      	lsrs	r3, r3, #3
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	4a90      	ldr	r2, [pc, #576]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800356c:	fa22 f303 	lsr.w	r3, r2, r3
 8003570:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003572:	e111      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003574:	4b8d      	ldr	r3, [pc, #564]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003576:	61bb      	str	r3, [r7, #24]
      break;
 8003578:	e10e      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800357a:	4b8d      	ldr	r3, [pc, #564]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800357c:	61bb      	str	r3, [r7, #24]
      break;
 800357e:	e10b      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003580:	4b8c      	ldr	r3, [pc, #560]	@ (80037b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003582:	61bb      	str	r3, [r7, #24]
      break;
 8003584:	e108      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003586:	4b88      	ldr	r3, [pc, #544]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003590:	4b85      	ldr	r3, [pc, #532]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800359a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800359c:	4b82      	ldr	r3, [pc, #520]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80035a6:	4b80      	ldr	r3, [pc, #512]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035aa:	08db      	lsrs	r3, r3, #3
 80035ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	fb02 f303 	mul.w	r3, r2, r3
 80035b6:	ee07 3a90 	vmov	s15, r3
 80035ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 80e1 	beq.w	800378c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	f000 8083 	beq.w	80036d8 <HAL_RCC_GetSysClockFreq+0x204>
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	f200 80a1 	bhi.w	800371c <HAL_RCC_GetSysClockFreq+0x248>
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_RCC_GetSysClockFreq+0x114>
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d056      	beq.n	8003694 <HAL_RCC_GetSysClockFreq+0x1c0>
 80035e6:	e099      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035e8:	4b6f      	ldr	r3, [pc, #444]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d02d      	beq.n	8003650 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80035f4:	4b6c      	ldr	r3, [pc, #432]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	08db      	lsrs	r3, r3, #3
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	4a6b      	ldr	r2, [pc, #428]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
 8003604:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	ee07 3a90 	vmov	s15, r3
 800360c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	ee07 3a90 	vmov	s15, r3
 8003616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800361a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800361e:	4b62      	ldr	r3, [pc, #392]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003626:	ee07 3a90 	vmov	s15, r3
 800362a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800362e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003632:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80037b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800363a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800363e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800364a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800364e:	e087      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800365a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80037bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800365e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003662:	4b51      	ldr	r3, [pc, #324]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800366a:	ee07 3a90 	vmov	s15, r3
 800366e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003672:	ed97 6a02 	vldr	s12, [r7, #8]
 8003676:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80037b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800367a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800367e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003682:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800368a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003692:	e065      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	ee07 3a90 	vmov	s15, r3
 800369a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800369e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80037c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036a6:	4b40      	ldr	r3, [pc, #256]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ae:	ee07 3a90 	vmov	s15, r3
 80036b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80037b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036d6:	e043      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	ee07 3a90 	vmov	s15, r3
 80036de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80037c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80036e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ea:	4b2f      	ldr	r3, [pc, #188]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f2:	ee07 3a90 	vmov	s15, r3
 80036f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80036fe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80037b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800370a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800370e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003716:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800371a:	e021      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	ee07 3a90 	vmov	s15, r3
 8003722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003726:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80037c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800372a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800372e:	4b1e      	ldr	r3, [pc, #120]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003736:	ee07 3a90 	vmov	s15, r3
 800373a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800373e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003742:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80037b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800374a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800374e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800375e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003760:	4b11      	ldr	r3, [pc, #68]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003764:	0a5b      	lsrs	r3, r3, #9
 8003766:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800376a:	3301      	adds	r3, #1
 800376c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	ee07 3a90 	vmov	s15, r3
 8003774:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003778:	edd7 6a07 	vldr	s13, [r7, #28]
 800377c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003784:	ee17 3a90 	vmov	r3, s15
 8003788:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800378a:	e005      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	61bb      	str	r3, [r7, #24]
      break;
 8003790:	e002      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003792:	4b07      	ldr	r3, [pc, #28]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003794:	61bb      	str	r3, [r7, #24]
      break;
 8003796:	bf00      	nop
  }

  return sysclockfreq;
 8003798:	69bb      	ldr	r3, [r7, #24]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3724      	adds	r7, #36	@ 0x24
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	58024400 	.word	0x58024400
 80037ac:	03d09000 	.word	0x03d09000
 80037b0:	003d0900 	.word	0x003d0900
 80037b4:	017d7840 	.word	0x017d7840
 80037b8:	46000000 	.word	0x46000000
 80037bc:	4c742400 	.word	0x4c742400
 80037c0:	4a742400 	.word	0x4a742400
 80037c4:	4bbebc20 	.word	0x4bbebc20

080037c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80037ce:	f7ff fe81 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 80037d2:	4602      	mov	r2, r0
 80037d4:	4b10      	ldr	r3, [pc, #64]	@ (8003818 <HAL_RCC_GetHCLKFreq+0x50>)
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	0a1b      	lsrs	r3, r3, #8
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	490f      	ldr	r1, [pc, #60]	@ (800381c <HAL_RCC_GetHCLKFreq+0x54>)
 80037e0:	5ccb      	ldrb	r3, [r1, r3]
 80037e2:	f003 031f 	and.w	r3, r3, #31
 80037e6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003818 <HAL_RCC_GetHCLKFreq+0x50>)
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	f003 030f 	and.w	r3, r3, #15
 80037f4:	4a09      	ldr	r2, [pc, #36]	@ (800381c <HAL_RCC_GetHCLKFreq+0x54>)
 80037f6:	5cd3      	ldrb	r3, [r2, r3]
 80037f8:	f003 031f 	and.w	r3, r3, #31
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003802:	4a07      	ldr	r2, [pc, #28]	@ (8003820 <HAL_RCC_GetHCLKFreq+0x58>)
 8003804:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003806:	4a07      	ldr	r2, [pc, #28]	@ (8003824 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800380c:	4b04      	ldr	r3, [pc, #16]	@ (8003820 <HAL_RCC_GetHCLKFreq+0x58>)
 800380e:	681b      	ldr	r3, [r3, #0]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	58024400 	.word	0x58024400
 800381c:	0800be64 	.word	0x0800be64
 8003820:	24000004 	.word	0x24000004
 8003824:	24000000 	.word	0x24000000

08003828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800382c:	f7ff ffcc 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 8003830:	4602      	mov	r2, r0
 8003832:	4b06      	ldr	r3, [pc, #24]	@ (800384c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	091b      	lsrs	r3, r3, #4
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	4904      	ldr	r1, [pc, #16]	@ (8003850 <HAL_RCC_GetPCLK1Freq+0x28>)
 800383e:	5ccb      	ldrb	r3, [r1, r3]
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003848:	4618      	mov	r0, r3
 800384a:	bd80      	pop	{r7, pc}
 800384c:	58024400 	.word	0x58024400
 8003850:	0800be64 	.word	0x0800be64

08003854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003858:	f7ff ffb6 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b06      	ldr	r3, [pc, #24]	@ (8003878 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	0a1b      	lsrs	r3, r3, #8
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	4904      	ldr	r1, [pc, #16]	@ (800387c <HAL_RCC_GetPCLK2Freq+0x28>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003874:	4618      	mov	r0, r3
 8003876:	bd80      	pop	{r7, pc}
 8003878:	58024400 	.word	0x58024400
 800387c:	0800be64 	.word	0x0800be64

08003880 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	223f      	movs	r2, #63	@ 0x3f
 800388e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003890:	4b1a      	ldr	r3, [pc, #104]	@ (80038fc <HAL_RCC_GetClockConfig+0x7c>)
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f003 0207 	and.w	r2, r3, #7
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800389c:	4b17      	ldr	r3, [pc, #92]	@ (80038fc <HAL_RCC_GetClockConfig+0x7c>)
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80038a8:	4b14      	ldr	r3, [pc, #80]	@ (80038fc <HAL_RCC_GetClockConfig+0x7c>)
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	f003 020f 	and.w	r2, r3, #15
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80038b4:	4b11      	ldr	r3, [pc, #68]	@ (80038fc <HAL_RCC_GetClockConfig+0x7c>)
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80038c0:	4b0e      	ldr	r3, [pc, #56]	@ (80038fc <HAL_RCC_GetClockConfig+0x7c>)
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80038cc:	4b0b      	ldr	r3, [pc, #44]	@ (80038fc <HAL_RCC_GetClockConfig+0x7c>)
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80038d8:	4b08      	ldr	r3, [pc, #32]	@ (80038fc <HAL_RCC_GetClockConfig+0x7c>)
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038e4:	4b06      	ldr	r3, [pc, #24]	@ (8003900 <HAL_RCC_GetClockConfig+0x80>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 020f 	and.w	r2, r3, #15
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	601a      	str	r2, [r3, #0]
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	58024400 	.word	0x58024400
 8003900:	52002000 	.word	0x52002000

08003904 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003908:	b0cc      	sub	sp, #304	@ 0x130
 800390a:	af00      	add	r7, sp, #0
 800390c:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003910:	2300      	movs	r3, #0
 8003912:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003916:	2300      	movs	r3, #0
 8003918:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800391c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003928:	2500      	movs	r5, #0
 800392a:	ea54 0305 	orrs.w	r3, r4, r5
 800392e:	d049      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003930:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003934:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003936:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800393a:	d02f      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800393c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003940:	d828      	bhi.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003942:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003946:	d01a      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003948:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800394c:	d822      	bhi.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003952:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003956:	d007      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003958:	e01c      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800395a:	4bb8      	ldr	r3, [pc, #736]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800395c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395e:	4ab7      	ldr	r2, [pc, #732]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003964:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003966:	e01a      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003968:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800396c:	3308      	adds	r3, #8
 800396e:	2102      	movs	r1, #2
 8003970:	4618      	mov	r0, r3
 8003972:	f001 fccf 	bl	8005314 <RCCEx_PLL2_Config>
 8003976:	4603      	mov	r3, r0
 8003978:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800397c:	e00f      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800397e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003982:	3328      	adds	r3, #40	@ 0x28
 8003984:	2102      	movs	r1, #2
 8003986:	4618      	mov	r0, r3
 8003988:	f001 fd76 	bl	8005478 <RCCEx_PLL3_Config>
 800398c:	4603      	mov	r3, r0
 800398e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003992:	e004      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800399a:	e000      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800399c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800399e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80039a6:	4ba5      	ldr	r3, [pc, #660]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80039ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039b4:	4aa1      	ldr	r2, [pc, #644]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039b6:	430b      	orrs	r3, r1
 80039b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80039ba:	e003      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039c0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039cc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80039d0:	f04f 0900 	mov.w	r9, #0
 80039d4:	ea58 0309 	orrs.w	r3, r8, r9
 80039d8:	d047      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80039da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d82a      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80039e4:	a201      	add	r2, pc, #4	@ (adr r2, 80039ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80039e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	08003a01 	.word	0x08003a01
 80039f0:	08003a0f 	.word	0x08003a0f
 80039f4:	08003a25 	.word	0x08003a25
 80039f8:	08003a43 	.word	0x08003a43
 80039fc:	08003a43 	.word	0x08003a43
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a00:	4b8e      	ldr	r3, [pc, #568]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a04:	4a8d      	ldr	r2, [pc, #564]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a0c:	e01a      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a12:	3308      	adds	r3, #8
 8003a14:	2100      	movs	r1, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f001 fc7c 	bl	8005314 <RCCEx_PLL2_Config>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a22:	e00f      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a28:	3328      	adds	r3, #40	@ 0x28
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f001 fd23 	bl	8005478 <RCCEx_PLL3_Config>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a38:	e004      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003a40:	e000      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003a42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a44:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10a      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a4c:	4b7b      	ldr	r3, [pc, #492]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a50:	f023 0107 	bic.w	r1, r3, #7
 8003a54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5a:	4a78      	ldr	r2, [pc, #480]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a60:	e003      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a66:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003a6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003a76:	f04f 0b00 	mov.w	fp, #0
 8003a7a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003a7e:	d04c      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003a80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a8a:	d030      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003a8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a90:	d829      	bhi.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003a92:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a94:	d02d      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003a96:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a98:	d825      	bhi.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003a9a:	2b80      	cmp	r3, #128	@ 0x80
 8003a9c:	d018      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003a9e:	2b80      	cmp	r3, #128	@ 0x80
 8003aa0:	d821      	bhi.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003aa6:	2b40      	cmp	r3, #64	@ 0x40
 8003aa8:	d007      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003aaa:	e01c      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aac:	4b63      	ldr	r3, [pc, #396]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab0:	4a62      	ldr	r2, [pc, #392]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ab2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003ab8:	e01c      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003aba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003abe:	3308      	adds	r3, #8
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f001 fc26 	bl	8005314 <RCCEx_PLL2_Config>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003ace:	e011      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ad0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ad4:	3328      	adds	r3, #40	@ 0x28
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f001 fccd 	bl	8005478 <RCCEx_PLL3_Config>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003ae4:	e006      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003aec:	e002      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003aee:	bf00      	nop
 8003af0:	e000      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003af2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003afc:	4b4f      	ldr	r3, [pc, #316]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b00:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003b04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b0a:	4a4c      	ldr	r2, [pc, #304]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b10:	e003      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b12:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b16:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b22:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003b26:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003b30:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8003b34:	460b      	mov	r3, r1
 8003b36:	4313      	orrs	r3, r2
 8003b38:	d053      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003b3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b46:	d035      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003b48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b4c:	d82e      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b4e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003b52:	d031      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003b54:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003b58:	d828      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b5e:	d01a      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003b60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b64:	d822      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003b6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b6e:	d007      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003b70:	e01c      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b72:	4b32      	ldr	r3, [pc, #200]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b76:	4a31      	ldr	r2, [pc, #196]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b7e:	e01c      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b84:	3308      	adds	r3, #8
 8003b86:	2100      	movs	r1, #0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f001 fbc3 	bl	8005314 <RCCEx_PLL2_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003b94:	e011      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b9a:	3328      	adds	r3, #40	@ 0x28
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f001 fc6a 	bl	8005478 <RCCEx_PLL3_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003baa:	e006      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003bb2:	e002      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003bb4:	bf00      	nop
 8003bb6:	e000      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003bb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10b      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003bca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003bd2:	4a1a      	ldr	r2, [pc, #104]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bd8:	e003      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bda:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003bde:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003be2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bea:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003bee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003bf8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	d056      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003c02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c0e:	d038      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003c10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c14:	d831      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c1a:	d034      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003c1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c20:	d82b      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c26:	d01d      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003c28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c2c:	d825      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d006      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003c32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c36:	d00a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003c38:	e01f      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c3a:	bf00      	nop
 8003c3c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c40:	4ba2      	ldr	r3, [pc, #648]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c44:	4aa1      	ldr	r2, [pc, #644]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c4c:	e01c      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c52:	3308      	adds	r3, #8
 8003c54:	2100      	movs	r1, #0
 8003c56:	4618      	mov	r0, r3
 8003c58:	f001 fb5c 	bl	8005314 <RCCEx_PLL2_Config>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c62:	e011      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c68:	3328      	adds	r3, #40	@ 0x28
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f001 fc03 	bl	8005478 <RCCEx_PLL3_Config>
 8003c72:	4603      	mov	r3, r0
 8003c74:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c78:	e006      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003c80:	e002      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003c82:	bf00      	nop
 8003c84:	e000      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003c86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c88:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10b      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003c90:	4b8e      	ldr	r3, [pc, #568]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c94:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003c98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ca0:	4a8a      	ldr	r2, [pc, #552]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ca6:	e003      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003cac:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003cb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003cbc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003cc6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	d03a      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003cd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd6:	2b30      	cmp	r3, #48	@ 0x30
 8003cd8:	d01f      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003cda:	2b30      	cmp	r3, #48	@ 0x30
 8003cdc:	d819      	bhi.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	d00c      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	d815      	bhi.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d019      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003cea:	2b10      	cmp	r3, #16
 8003cec:	d111      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cee:	4b77      	ldr	r3, [pc, #476]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf2:	4a76      	ldr	r2, [pc, #472]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003cfa:	e011      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d00:	3308      	adds	r3, #8
 8003d02:	2102      	movs	r1, #2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f001 fb05 	bl	8005314 <RCCEx_PLL2_Config>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d10:	e006      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003d18:	e002      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d1a:	bf00      	nop
 8003d1c:	e000      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d20:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10a      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d28:	4b68      	ldr	r3, [pc, #416]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003d30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d36:	4a65      	ldr	r2, [pc, #404]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d38:	430b      	orrs	r3, r1
 8003d3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d3c:	e003      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d42:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003d52:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003d56:	2300      	movs	r3, #0
 8003d58:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003d5c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003d60:	460b      	mov	r3, r1
 8003d62:	4313      	orrs	r3, r2
 8003d64:	d051      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003d66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d70:	d035      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003d72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d76:	d82e      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003d78:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d7c:	d031      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003d7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d82:	d828      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003d84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d88:	d01a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003d8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d8e:	d822      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003d94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d98:	d007      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003d9a:	e01c      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da0:	4a4a      	ldr	r2, [pc, #296]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003da2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003da6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003da8:	e01c      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003daa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dae:	3308      	adds	r3, #8
 8003db0:	2100      	movs	r1, #0
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 faae 	bl	8005314 <RCCEx_PLL2_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003dbe:	e011      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dc4:	3328      	adds	r3, #40	@ 0x28
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f001 fb55 	bl	8005478 <RCCEx_PLL3_Config>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003dd4:	e006      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003ddc:	e002      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003dde:	bf00      	nop
 8003de0:	e000      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003dec:	4b37      	ldr	r3, [pc, #220]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003df4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003df8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dfa:	4a34      	ldr	r2, [pc, #208]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e00:	e003      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e06:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e12:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003e16:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003e20:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4313      	orrs	r3, r2
 8003e28:	d056      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003e2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e34:	d033      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003e36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e3a:	d82c      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e40:	d02f      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003e42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e46:	d826      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e4c:	d02b      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003e4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e52:	d820      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e58:	d012      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003e5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e5e:	d81a      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d022      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e68:	d115      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e6e:	3308      	adds	r3, #8
 8003e70:	2101      	movs	r1, #1
 8003e72:	4618      	mov	r0, r3
 8003e74:	f001 fa4e 	bl	8005314 <RCCEx_PLL2_Config>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003e7e:	e015      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e84:	3328      	adds	r3, #40	@ 0x28
 8003e86:	2101      	movs	r1, #1
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f001 faf5 	bl	8005478 <RCCEx_PLL3_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003e94:	e00a      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003e9c:	e006      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e9e:	bf00      	nop
 8003ea0:	e004      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ea2:	bf00      	nop
 8003ea4:	e002      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ea6:	bf00      	nop
 8003ea8:	e000      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003eaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10d      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003eb4:	4b05      	ldr	r3, [pc, #20]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003ebc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ec0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ec2:	4a02      	ldr	r2, [pc, #8]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ec4:	430b      	orrs	r3, r1
 8003ec6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ec8:	e006      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003eca:	bf00      	nop
 8003ecc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ed4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ed8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003ee4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003eee:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	d055      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ef8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003efc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f04:	d033      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f0a:	d82c      	bhi.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f10:	d02f      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f16:	d826      	bhi.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f1c:	d02b      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003f1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f22:	d820      	bhi.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f28:	d012      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003f2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f2e:	d81a      	bhi.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d022      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003f34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f38:	d115      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f3e:	3308      	adds	r3, #8
 8003f40:	2101      	movs	r1, #1
 8003f42:	4618      	mov	r0, r3
 8003f44:	f001 f9e6 	bl	8005314 <RCCEx_PLL2_Config>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f4e:	e015      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f54:	3328      	adds	r3, #40	@ 0x28
 8003f56:	2101      	movs	r1, #1
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f001 fa8d 	bl	8005478 <RCCEx_PLL3_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f64:	e00a      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003f6c:	e006      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f6e:	bf00      	nop
 8003f70:	e004      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f72:	bf00      	nop
 8003f74:	e002      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f76:	bf00      	nop
 8003f78:	e000      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003f7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f7c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10b      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003f84:	4bb6      	ldr	r3, [pc, #728]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f88:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f94:	4ab2      	ldr	r2, [pc, #712]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003f96:	430b      	orrs	r3, r1
 8003f98:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f9a:	e003      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003fa0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003fa4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fac:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fba:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	d02a      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8003fc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d011      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003fce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fd2:	d10a      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fd8:	3308      	adds	r3, #8
 8003fda:	2101      	movs	r1, #1
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f001 f999 	bl	8005314 <RCCEx_PLL2_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8003fe8:	e004      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003ff0:	e000      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8003ff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ff4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10a      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003ffc:	4b98      	ldr	r3, [pc, #608]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004000:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004004:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800400a:	4a95      	ldr	r2, [pc, #596]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800400c:	430b      	orrs	r3, r1
 800400e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004010:	e003      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004012:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004016:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800401a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800401e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004022:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004026:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800402a:	2300      	movs	r3, #0
 800402c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004030:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004034:	460b      	mov	r3, r1
 8004036:	4313      	orrs	r3, r2
 8004038:	d037      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800403a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800403e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004040:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004044:	d00e      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8004046:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800404a:	d816      	bhi.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x776>
 800404c:	2b00      	cmp	r3, #0
 800404e:	d018      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004050:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004054:	d111      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004056:	4b82      	ldr	r3, [pc, #520]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405a:	4a81      	ldr	r2, [pc, #516]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800405c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004060:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004062:	e00f      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004064:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004068:	3308      	adds	r3, #8
 800406a:	2101      	movs	r1, #1
 800406c:	4618      	mov	r0, r3
 800406e:	f001 f951 	bl	8005314 <RCCEx_PLL2_Config>
 8004072:	4603      	mov	r3, r0
 8004074:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004078:	e004      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004080:	e000      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8004082:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004084:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10a      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800408c:	4b74      	ldr	r3, [pc, #464]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800408e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004090:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004094:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800409a:	4a71      	ldr	r2, [pc, #452]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800409c:	430b      	orrs	r3, r1
 800409e:	6513      	str	r3, [r2, #80]	@ 0x50
 80040a0:	e003      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80040a6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80040aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b2:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80040b6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040ba:	2300      	movs	r3, #0
 80040bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80040c0:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4313      	orrs	r3, r2
 80040c8:	d03a      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80040ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040d0:	2b03      	cmp	r3, #3
 80040d2:	d81d      	bhi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80040d4:	a201      	add	r2, pc, #4	@ (adr r2, 80040dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80040d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040da:	bf00      	nop
 80040dc:	08004119 	.word	0x08004119
 80040e0:	080040ed 	.word	0x080040ed
 80040e4:	080040fb 	.word	0x080040fb
 80040e8:	08004119 	.word	0x08004119
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ec:	4b5c      	ldr	r3, [pc, #368]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80040ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f0:	4a5b      	ldr	r2, [pc, #364]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80040f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040f8:	e00f      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040fe:	3308      	adds	r3, #8
 8004100:	2102      	movs	r1, #2
 8004102:	4618      	mov	r0, r3
 8004104:	f001 f906 	bl	8005314 <RCCEx_PLL2_Config>
 8004108:	4603      	mov	r3, r0
 800410a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800410e:	e004      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004116:	e000      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8004118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800411a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10a      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004122:	4b4f      	ldr	r3, [pc, #316]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004126:	f023 0103 	bic.w	r1, r3, #3
 800412a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800412e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004130:	4a4b      	ldr	r2, [pc, #300]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004132:	430b      	orrs	r3, r1
 8004134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004136:	e003      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004138:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800413c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004140:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004148:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800414c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004150:	2300      	movs	r3, #0
 8004152:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004156:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800415a:	460b      	mov	r3, r1
 800415c:	4313      	orrs	r3, r2
 800415e:	f000 80a0 	beq.w	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004162:	4b40      	ldr	r3, [pc, #256]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a3f      	ldr	r2, [pc, #252]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800416c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800416e:	f7fd ffb7 	bl	80020e0 <HAL_GetTick>
 8004172:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004176:	e00b      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004178:	f7fd ffb2 	bl	80020e0 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b64      	cmp	r3, #100	@ 0x64
 8004186:	d903      	bls.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800418e:	e005      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004190:	4b34      	ldr	r3, [pc, #208]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0ed      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 800419c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d17a      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80041a4:	4b2e      	ldr	r3, [pc, #184]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80041a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80041a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80041b0:	4053      	eors	r3, r2
 80041b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d015      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041ba:	4b29      	ldr	r3, [pc, #164]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80041bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041c6:	4b26      	ldr	r3, [pc, #152]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80041c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ca:	4a25      	ldr	r2, [pc, #148]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80041cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041d0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041d2:	4b23      	ldr	r3, [pc, #140]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d6:	4a22      	ldr	r2, [pc, #136]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80041d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041dc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80041de:	4a20      	ldr	r2, [pc, #128]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80041e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80041e4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80041e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80041ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041f2:	d118      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f4:	f7fd ff74 	bl	80020e0 <HAL_GetTick>
 80041f8:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041fc:	e00d      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041fe:	f7fd ff6f 	bl	80020e0 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004208:	1ad2      	subs	r2, r2, r3
 800420a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800420e:	429a      	cmp	r2, r3
 8004210:	d903      	bls.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8004218:	e005      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800421a:	4b11      	ldr	r3, [pc, #68]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0eb      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8004226:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800422a:	2b00      	cmp	r3, #0
 800422c:	d130      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800422e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004232:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004236:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800423a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800423e:	d115      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8004240:	4b07      	ldr	r3, [pc, #28]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004248:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800424c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004250:	091a      	lsrs	r2, r3, #4
 8004252:	4b05      	ldr	r3, [pc, #20]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004254:	4013      	ands	r3, r2
 8004256:	4a02      	ldr	r2, [pc, #8]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004258:	430b      	orrs	r3, r1
 800425a:	6113      	str	r3, [r2, #16]
 800425c:	e00c      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800425e:	bf00      	nop
 8004260:	58024400 	.word	0x58024400
 8004264:	58024800 	.word	0x58024800
 8004268:	00ffffcf 	.word	0x00ffffcf
 800426c:	4bd4      	ldr	r3, [pc, #848]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	4ad3      	ldr	r2, [pc, #844]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004272:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004276:	6113      	str	r3, [r2, #16]
 8004278:	4bd1      	ldr	r3, [pc, #836]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800427a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800427c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004280:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004288:	4acd      	ldr	r2, [pc, #820]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800428a:	430b      	orrs	r3, r1
 800428c:	6713      	str	r3, [r2, #112]	@ 0x70
 800428e:	e008      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004290:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004294:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8004298:	e003      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800429e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80042a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042aa:	f002 0301 	and.w	r3, r2, #1
 80042ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042b2:	2300      	movs	r3, #0
 80042b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80042bc:	460b      	mov	r3, r1
 80042be:	4313      	orrs	r3, r2
 80042c0:	f000 808b 	beq.w	80043da <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80042c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042cc:	2b28      	cmp	r3, #40	@ 0x28
 80042ce:	d86b      	bhi.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80042d0:	a201      	add	r2, pc, #4	@ (adr r2, 80042d8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80042d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d6:	bf00      	nop
 80042d8:	080043b1 	.word	0x080043b1
 80042dc:	080043a9 	.word	0x080043a9
 80042e0:	080043a9 	.word	0x080043a9
 80042e4:	080043a9 	.word	0x080043a9
 80042e8:	080043a9 	.word	0x080043a9
 80042ec:	080043a9 	.word	0x080043a9
 80042f0:	080043a9 	.word	0x080043a9
 80042f4:	080043a9 	.word	0x080043a9
 80042f8:	0800437d 	.word	0x0800437d
 80042fc:	080043a9 	.word	0x080043a9
 8004300:	080043a9 	.word	0x080043a9
 8004304:	080043a9 	.word	0x080043a9
 8004308:	080043a9 	.word	0x080043a9
 800430c:	080043a9 	.word	0x080043a9
 8004310:	080043a9 	.word	0x080043a9
 8004314:	080043a9 	.word	0x080043a9
 8004318:	08004393 	.word	0x08004393
 800431c:	080043a9 	.word	0x080043a9
 8004320:	080043a9 	.word	0x080043a9
 8004324:	080043a9 	.word	0x080043a9
 8004328:	080043a9 	.word	0x080043a9
 800432c:	080043a9 	.word	0x080043a9
 8004330:	080043a9 	.word	0x080043a9
 8004334:	080043a9 	.word	0x080043a9
 8004338:	080043b1 	.word	0x080043b1
 800433c:	080043a9 	.word	0x080043a9
 8004340:	080043a9 	.word	0x080043a9
 8004344:	080043a9 	.word	0x080043a9
 8004348:	080043a9 	.word	0x080043a9
 800434c:	080043a9 	.word	0x080043a9
 8004350:	080043a9 	.word	0x080043a9
 8004354:	080043a9 	.word	0x080043a9
 8004358:	080043b1 	.word	0x080043b1
 800435c:	080043a9 	.word	0x080043a9
 8004360:	080043a9 	.word	0x080043a9
 8004364:	080043a9 	.word	0x080043a9
 8004368:	080043a9 	.word	0x080043a9
 800436c:	080043a9 	.word	0x080043a9
 8004370:	080043a9 	.word	0x080043a9
 8004374:	080043a9 	.word	0x080043a9
 8004378:	080043b1 	.word	0x080043b1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800437c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004380:	3308      	adds	r3, #8
 8004382:	2101      	movs	r1, #1
 8004384:	4618      	mov	r0, r3
 8004386:	f000 ffc5 	bl	8005314 <RCCEx_PLL2_Config>
 800438a:	4603      	mov	r3, r0
 800438c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004390:	e00f      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004392:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004396:	3328      	adds	r3, #40	@ 0x28
 8004398:	2101      	movs	r1, #1
 800439a:	4618      	mov	r0, r3
 800439c:	f001 f86c 	bl	8005478 <RCCEx_PLL3_Config>
 80043a0:	4603      	mov	r3, r0
 80043a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80043a6:	e004      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80043ae:	e000      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80043b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10b      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80043ba:	4b81      	ldr	r3, [pc, #516]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80043bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043be:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80043c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ca:	4a7d      	ldr	r2, [pc, #500]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80043cc:	430b      	orrs	r3, r1
 80043ce:	6553      	str	r3, [r2, #84]	@ 0x54
 80043d0:	e003      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80043d6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80043da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	f002 0302 	and.w	r3, r2, #2
 80043e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043ea:	2300      	movs	r3, #0
 80043ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80043f0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80043f4:	460b      	mov	r3, r1
 80043f6:	4313      	orrs	r3, r2
 80043f8:	d042      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80043fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004400:	2b05      	cmp	r3, #5
 8004402:	d825      	bhi.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8004404:	a201      	add	r2, pc, #4	@ (adr r2, 800440c <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8004406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440a:	bf00      	nop
 800440c:	08004459 	.word	0x08004459
 8004410:	08004425 	.word	0x08004425
 8004414:	0800443b 	.word	0x0800443b
 8004418:	08004459 	.word	0x08004459
 800441c:	08004459 	.word	0x08004459
 8004420:	08004459 	.word	0x08004459
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004424:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004428:	3308      	adds	r3, #8
 800442a:	2101      	movs	r1, #1
 800442c:	4618      	mov	r0, r3
 800442e:	f000 ff71 	bl	8005314 <RCCEx_PLL2_Config>
 8004432:	4603      	mov	r3, r0
 8004434:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004438:	e00f      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800443a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800443e:	3328      	adds	r3, #40	@ 0x28
 8004440:	2101      	movs	r1, #1
 8004442:	4618      	mov	r0, r3
 8004444:	f001 f818 	bl	8005478 <RCCEx_PLL3_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800444e:	e004      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004456:	e000      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8004458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800445a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004462:	4b57      	ldr	r3, [pc, #348]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004466:	f023 0107 	bic.w	r1, r3, #7
 800446a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800446e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004470:	4a53      	ldr	r2, [pc, #332]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004472:	430b      	orrs	r3, r1
 8004474:	6553      	str	r3, [r2, #84]	@ 0x54
 8004476:	e003      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800447c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004480:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f002 0304 	and.w	r3, r2, #4
 800448c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004490:	2300      	movs	r3, #0
 8004492:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004496:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800449a:	460b      	mov	r3, r1
 800449c:	4313      	orrs	r3, r2
 800449e:	d044      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80044a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044a8:	2b05      	cmp	r3, #5
 80044aa:	d825      	bhi.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80044ac:	a201      	add	r2, pc, #4	@ (adr r2, 80044b4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80044ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b2:	bf00      	nop
 80044b4:	08004501 	.word	0x08004501
 80044b8:	080044cd 	.word	0x080044cd
 80044bc:	080044e3 	.word	0x080044e3
 80044c0:	08004501 	.word	0x08004501
 80044c4:	08004501 	.word	0x08004501
 80044c8:	08004501 	.word	0x08004501
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044d0:	3308      	adds	r3, #8
 80044d2:	2101      	movs	r1, #1
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 ff1d 	bl	8005314 <RCCEx_PLL2_Config>
 80044da:	4603      	mov	r3, r0
 80044dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044e0:	e00f      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044e6:	3328      	adds	r3, #40	@ 0x28
 80044e8:	2101      	movs	r1, #1
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 ffc4 	bl	8005478 <RCCEx_PLL3_Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044f6:	e004      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80044fe:	e000      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8004500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004502:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10b      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800450a:	4b2d      	ldr	r3, [pc, #180]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800450c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800450e:	f023 0107 	bic.w	r1, r3, #7
 8004512:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004516:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800451a:	4a29      	ldr	r2, [pc, #164]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800451c:	430b      	orrs	r3, r1
 800451e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004520:	e003      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004522:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004526:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800452a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800452e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004532:	f002 0320 	and.w	r3, r2, #32
 8004536:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800453a:	2300      	movs	r3, #0
 800453c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004540:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004544:	460b      	mov	r3, r1
 8004546:	4313      	orrs	r3, r2
 8004548:	d057      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800454a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800454e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004552:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004556:	d035      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8004558:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800455c:	d82c      	bhi.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800455e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004562:	d031      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8004564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004568:	d826      	bhi.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800456a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800456e:	d02d      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8004570:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004574:	d820      	bhi.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004576:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800457a:	d012      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 800457c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004580:	d81a      	bhi.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d024      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8004586:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800458a:	d115      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800458c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004590:	3308      	adds	r3, #8
 8004592:	2100      	movs	r1, #0
 8004594:	4618      	mov	r0, r3
 8004596:	f000 febd 	bl	8005314 <RCCEx_PLL2_Config>
 800459a:	4603      	mov	r3, r0
 800459c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80045a0:	e017      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045a6:	3328      	adds	r3, #40	@ 0x28
 80045a8:	2102      	movs	r1, #2
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 ff64 	bl	8005478 <RCCEx_PLL3_Config>
 80045b0:	4603      	mov	r3, r0
 80045b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80045b6:	e00c      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80045be:	e008      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80045c0:	58024400 	.word	0x58024400
        break;
 80045c4:	bf00      	nop
 80045c6:	e004      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80045c8:	bf00      	nop
 80045ca:	e002      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80045cc:	bf00      	nop
 80045ce:	e000      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80045d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10b      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045da:	4bc2      	ldr	r3, [pc, #776]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045de:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80045e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045ea:	4abe      	ldr	r2, [pc, #760]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045ec:	430b      	orrs	r3, r1
 80045ee:	6553      	str	r3, [r2, #84]	@ 0x54
 80045f0:	e003      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80045f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004606:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800460a:	2300      	movs	r3, #0
 800460c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004610:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004614:	460b      	mov	r3, r1
 8004616:	4313      	orrs	r3, r2
 8004618:	d055      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800461a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800461e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004622:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004626:	d033      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8004628:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800462c:	d82c      	bhi.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800462e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004632:	d02f      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8004634:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004638:	d826      	bhi.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800463a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800463e:	d02b      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8004640:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004644:	d820      	bhi.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004646:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800464a:	d012      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 800464c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004650:	d81a      	bhi.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004652:	2b00      	cmp	r3, #0
 8004654:	d022      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8004656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800465a:	d115      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800465c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004660:	3308      	adds	r3, #8
 8004662:	2100      	movs	r1, #0
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fe55 	bl	8005314 <RCCEx_PLL2_Config>
 800466a:	4603      	mov	r3, r0
 800466c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004670:	e015      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004672:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004676:	3328      	adds	r3, #40	@ 0x28
 8004678:	2102      	movs	r1, #2
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fefc 	bl	8005478 <RCCEx_PLL3_Config>
 8004680:	4603      	mov	r3, r0
 8004682:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004686:	e00a      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800468e:	e006      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004690:	bf00      	nop
 8004692:	e004      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004694:	bf00      	nop
 8004696:	e002      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004698:	bf00      	nop
 800469a:	e000      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800469c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800469e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10b      	bne.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046a6:	4b8f      	ldr	r3, [pc, #572]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046aa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80046ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80046b6:	4a8b      	ldr	r2, [pc, #556]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046b8:	430b      	orrs	r3, r1
 80046ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80046bc:	e003      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046c2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80046c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ce:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80046d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046d6:	2300      	movs	r3, #0
 80046d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046dc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80046e0:	460b      	mov	r3, r1
 80046e2:	4313      	orrs	r3, r2
 80046e4:	d055      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80046e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046ee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80046f2:	d033      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80046f4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80046f8:	d82c      	bhi.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80046fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046fe:	d02f      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004700:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004704:	d826      	bhi.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004706:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800470a:	d02b      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800470c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004710:	d820      	bhi.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004712:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004716:	d012      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8004718:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800471c:	d81a      	bhi.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800471e:	2b00      	cmp	r3, #0
 8004720:	d022      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8004722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004726:	d115      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004728:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800472c:	3308      	adds	r3, #8
 800472e:	2100      	movs	r1, #0
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fdef 	bl	8005314 <RCCEx_PLL2_Config>
 8004736:	4603      	mov	r3, r0
 8004738:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800473c:	e015      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800473e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004742:	3328      	adds	r3, #40	@ 0x28
 8004744:	2102      	movs	r1, #2
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fe96 	bl	8005478 <RCCEx_PLL3_Config>
 800474c:	4603      	mov	r3, r0
 800474e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004752:	e00a      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800475a:	e006      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800475c:	bf00      	nop
 800475e:	e004      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004760:	bf00      	nop
 8004762:	e002      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004764:	bf00      	nop
 8004766:	e000      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800476a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10b      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004772:	4b5c      	ldr	r3, [pc, #368]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004776:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800477a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800477e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004782:	4a58      	ldr	r2, [pc, #352]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004784:	430b      	orrs	r3, r1
 8004786:	6593      	str	r3, [r2, #88]	@ 0x58
 8004788:	e003      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800478e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004792:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479a:	f002 0308 	and.w	r3, r2, #8
 800479e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047a2:	2300      	movs	r3, #0
 80047a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80047a8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80047ac:	460b      	mov	r3, r1
 80047ae:	4313      	orrs	r3, r2
 80047b0:	d01e      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80047b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047be:	d10c      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047c4:	3328      	adds	r3, #40	@ 0x28
 80047c6:	2102      	movs	r1, #2
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 fe55 	bl	8005478 <RCCEx_PLL3_Config>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80047da:	4b42      	ldr	r3, [pc, #264]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ea:	4a3e      	ldr	r2, [pc, #248]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047ec:	430b      	orrs	r3, r1
 80047ee:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f8:	f002 0310 	and.w	r3, r2, #16
 80047fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004800:	2300      	movs	r3, #0
 8004802:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004806:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800480a:	460b      	mov	r3, r1
 800480c:	4313      	orrs	r3, r2
 800480e:	d01e      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004810:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004814:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004818:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800481c:	d10c      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800481e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004822:	3328      	adds	r3, #40	@ 0x28
 8004824:	2102      	movs	r1, #2
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fe26 	bl	8005478 <RCCEx_PLL3_Config>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004838:	4b2a      	ldr	r3, [pc, #168]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800483a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800483c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004840:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004844:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004848:	4a26      	ldr	r2, [pc, #152]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800484a:	430b      	orrs	r3, r1
 800484c:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800484e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004856:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800485a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800485e:	2300      	movs	r3, #0
 8004860:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004864:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004868:	460b      	mov	r3, r1
 800486a:	4313      	orrs	r3, r2
 800486c:	d040      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800486e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004872:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004876:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800487a:	d022      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 800487c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004880:	d81b      	bhi.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8004886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800488a:	d00b      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 800488c:	e015      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800488e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004892:	3308      	adds	r3, #8
 8004894:	2100      	movs	r1, #0
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fd3c 	bl	8005314 <RCCEx_PLL2_Config>
 800489c:	4603      	mov	r3, r0
 800489e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80048a2:	e00f      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048a8:	3328      	adds	r3, #40	@ 0x28
 80048aa:	2102      	movs	r1, #2
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 fde3 	bl	8005478 <RCCEx_PLL3_Config>
 80048b2:	4603      	mov	r3, r0
 80048b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80048b8:	e004      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80048c0:	e000      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80048c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10d      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048cc:	4b05      	ldr	r3, [pc, #20]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80048d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80048dc:	4a01      	ldr	r2, [pc, #4]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048de:	430b      	orrs	r3, r1
 80048e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80048e2:	e005      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80048e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80048ec:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80048fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048fe:	2300      	movs	r3, #0
 8004900:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004902:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004906:	460b      	mov	r3, r1
 8004908:	4313      	orrs	r3, r2
 800490a:	d03b      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800490c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004910:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004914:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004918:	d01f      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800491a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800491e:	d818      	bhi.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8004920:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004924:	d003      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8004926:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800492a:	d007      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 800492c:	e011      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800492e:	4b64      	ldr	r3, [pc, #400]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004932:	4a63      	ldr	r2, [pc, #396]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004934:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004938:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800493a:	e00f      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800493c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004940:	3328      	adds	r3, #40	@ 0x28
 8004942:	2101      	movs	r1, #1
 8004944:	4618      	mov	r0, r3
 8004946:	f000 fd97 	bl	8005478 <RCCEx_PLL3_Config>
 800494a:	4603      	mov	r3, r0
 800494c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004950:	e004      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004958:	e000      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800495a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800495c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10b      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004964:	4b56      	ldr	r3, [pc, #344]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004968:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800496c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004974:	4a52      	ldr	r2, [pc, #328]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004976:	430b      	orrs	r3, r1
 8004978:	6553      	str	r3, [r2, #84]	@ 0x54
 800497a:	e003      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004980:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004984:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004990:	673b      	str	r3, [r7, #112]	@ 0x70
 8004992:	2300      	movs	r3, #0
 8004994:	677b      	str	r3, [r7, #116]	@ 0x74
 8004996:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800499a:	460b      	mov	r3, r1
 800499c:	4313      	orrs	r3, r2
 800499e:	d031      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80049a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80049aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ae:	d007      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80049b0:	e011      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b2:	4b43      	ldr	r3, [pc, #268]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80049b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b6:	4a42      	ldr	r2, [pc, #264]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80049b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80049be:	e00e      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049c4:	3308      	adds	r3, #8
 80049c6:	2102      	movs	r1, #2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 fca3 	bl	8005314 <RCCEx_PLL2_Config>
 80049ce:	4603      	mov	r3, r0
 80049d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80049d4:	e003      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80049dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10a      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049e6:	4b36      	ldr	r3, [pc, #216]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80049e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f4:	4a32      	ldr	r2, [pc, #200]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80049f6:	430b      	orrs	r3, r1
 80049f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049fa:	e003      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004a00:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004a10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a12:	2300      	movs	r3, #0
 8004a14:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a16:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	d00c      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a24:	3328      	adds	r3, #40	@ 0x28
 8004a26:	2102      	movs	r1, #2
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 fd25 	bl	8005478 <RCCEx_PLL3_Config>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a42:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004a46:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a48:	2300      	movs	r3, #0
 8004a4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a4c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004a50:	460b      	mov	r3, r1
 8004a52:	4313      	orrs	r3, r2
 8004a54:	d03a      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004a56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a62:	d018      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8004a64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a68:	d811      	bhi.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8004a6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a6e:	d014      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8004a70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a74:	d80b      	bhi.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d011      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8004a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a7e:	d106      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a80:	4b0f      	ldr	r3, [pc, #60]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a84:	4a0e      	ldr	r2, [pc, #56]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004a86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004a94:	e004      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004a96:	bf00      	nop
 8004a98:	e002      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004a9a:	bf00      	nop
 8004a9c:	e000      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aa0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10d      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004aa8:	4b05      	ldr	r3, [pc, #20]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ab0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ab8:	4a01      	ldr	r2, [pc, #4]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004aba:	430b      	orrs	r3, r1
 8004abc:	6553      	str	r3, [r2, #84]	@ 0x54
 8004abe:	e005      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8004ac0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004ac8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004acc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004ad8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ada:	2300      	movs	r3, #0
 8004adc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ade:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	d009      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ae8:	4baa      	ldr	r3, [pc, #680]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004af0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004af4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004af6:	4aa7      	ldr	r2, [pc, #668]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004afc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b04:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004b08:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b0e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004b12:	460b      	mov	r3, r1
 8004b14:	4313      	orrs	r3, r2
 8004b16:	d00a      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004b18:	4b9e      	ldr	r3, [pc, #632]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004b20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b24:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b28:	4a9a      	ldr	r2, [pc, #616]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004b2a:	430b      	orrs	r3, r1
 8004b2c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b40:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004b44:	460b      	mov	r3, r1
 8004b46:	4313      	orrs	r3, r2
 8004b48:	d009      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b4a:	4b92      	ldr	r3, [pc, #584]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b4e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004b52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b58:	4a8e      	ldr	r2, [pc, #568]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004b5a:	430b      	orrs	r3, r1
 8004b5c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b66:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004b6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b70:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004b74:	460b      	mov	r3, r1
 8004b76:	4313      	orrs	r3, r2
 8004b78:	d00e      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b7a:	4b86      	ldr	r3, [pc, #536]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	4a85      	ldr	r2, [pc, #532]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004b80:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b84:	6113      	str	r3, [r2, #16]
 8004b86:	4b83      	ldr	r3, [pc, #524]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004b88:	6919      	ldr	r1, [r3, #16]
 8004b8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b8e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004b92:	4a80      	ldr	r2, [pc, #512]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004b94:	430b      	orrs	r3, r1
 8004b96:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004ba4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004baa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	d009      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004bb4:	4b77      	ldr	r3, [pc, #476]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bb8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004bbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc2:	4a74      	ldr	r2, [pc, #464]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004bd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bda:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004bde:	460b      	mov	r3, r1
 8004be0:	4313      	orrs	r3, r2
 8004be2:	d00a      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004be4:	4b6b      	ldr	r3, [pc, #428]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004bec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bf4:	4a67      	ldr	r2, [pc, #412]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004bf6:	430b      	orrs	r3, r1
 8004bf8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004bfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c02:	2100      	movs	r1, #0
 8004c04:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c0c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004c10:	460b      	mov	r3, r1
 8004c12:	4313      	orrs	r3, r2
 8004c14:	d011      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c1a:	3308      	adds	r3, #8
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fb78 	bl	8005314 <RCCEx_PLL2_Config>
 8004c24:	4603      	mov	r3, r0
 8004c26:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004c2a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c32:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c36:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004c3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c42:	2100      	movs	r1, #0
 8004c44:	6239      	str	r1, [r7, #32]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c4c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004c50:	460b      	mov	r3, r1
 8004c52:	4313      	orrs	r3, r2
 8004c54:	d011      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c5a:	3308      	adds	r3, #8
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fb58 	bl	8005314 <RCCEx_PLL2_Config>
 8004c64:	4603      	mov	r3, r0
 8004c66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004c6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c76:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004c7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	2100      	movs	r1, #0
 8004c84:	61b9      	str	r1, [r7, #24]
 8004c86:	f003 0304 	and.w	r3, r3, #4
 8004c8a:	61fb      	str	r3, [r7, #28]
 8004c8c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c90:	460b      	mov	r3, r1
 8004c92:	4313      	orrs	r3, r2
 8004c94:	d011      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c9a:	3308      	adds	r3, #8
 8004c9c:	2102      	movs	r1, #2
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fb38 	bl	8005314 <RCCEx_PLL2_Config>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004caa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004cb6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004cba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	6139      	str	r1, [r7, #16]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	d011      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cda:	3328      	adds	r3, #40	@ 0x28
 8004cdc:	2100      	movs	r1, #0
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fbca 	bl	8005478 <RCCEx_PLL3_Config>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8004cea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004cf6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004cfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d02:	2100      	movs	r1, #0
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	f003 0310 	and.w	r3, r3, #16
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004d10:	460b      	mov	r3, r1
 8004d12:	4313      	orrs	r3, r2
 8004d14:	d011      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d1a:	3328      	adds	r3, #40	@ 0x28
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fbaa 	bl	8005478 <RCCEx_PLL3_Config>
 8004d24:	4603      	mov	r3, r0
 8004d26:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004d2a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d32:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d36:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004d3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d42:	2100      	movs	r1, #0
 8004d44:	6039      	str	r1, [r7, #0]
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	607b      	str	r3, [r7, #4]
 8004d4c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d50:	460b      	mov	r3, r1
 8004d52:	4313      	orrs	r3, r2
 8004d54:	d011      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d5a:	3328      	adds	r3, #40	@ 0x28
 8004d5c:	2102      	movs	r1, #2
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fb8a 	bl	8005478 <RCCEx_PLL3_Config>
 8004d64:	4603      	mov	r3, r0
 8004d66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004d6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d76:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8004d7a:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	e000      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d94:	58024400 	.word	0x58024400

08004d98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004d9c:	f7fe fd14 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 8004da0:	4602      	mov	r2, r0
 8004da2:	4b06      	ldr	r3, [pc, #24]	@ (8004dbc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	091b      	lsrs	r3, r3, #4
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	4904      	ldr	r1, [pc, #16]	@ (8004dc0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004dae:	5ccb      	ldrb	r3, [r1, r3]
 8004db0:	f003 031f 	and.w	r3, r3, #31
 8004db4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	58024400 	.word	0x58024400
 8004dc0:	0800be64 	.word	0x0800be64

08004dc4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b089      	sub	sp, #36	@ 0x24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004dcc:	4ba1      	ldr	r3, [pc, #644]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004dd6:	4b9f      	ldr	r3, [pc, #636]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dda:	0b1b      	lsrs	r3, r3, #12
 8004ddc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004de0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004de2:	4b9c      	ldr	r3, [pc, #624]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004dee:	4b99      	ldr	r3, [pc, #612]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df2:	08db      	lsrs	r3, r3, #3
 8004df4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	fb02 f303 	mul.w	r3, r2, r3
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 8111 	beq.w	8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	f000 8083 	beq.w	8004f20 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	f200 80a1 	bhi.w	8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d056      	beq.n	8004edc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004e2e:	e099      	b.n	8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e30:	4b88      	ldr	r3, [pc, #544]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d02d      	beq.n	8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e3c:	4b85      	ldr	r3, [pc, #532]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	08db      	lsrs	r3, r3, #3
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	4a84      	ldr	r2, [pc, #528]	@ (8005058 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004e48:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	ee07 3a90 	vmov	s15, r3
 8004e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e66:	4b7b      	ldr	r3, [pc, #492]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e7a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800505c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e96:	e087      	b.n	8004fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005060 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eaa:	4b6a      	ldr	r3, [pc, #424]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ebe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800505c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eda:	e065      	b.n	8004fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	ee07 3a90 	vmov	s15, r3
 8004ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eee:	4b59      	ldr	r3, [pc, #356]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef6:	ee07 3a90 	vmov	s15, r3
 8004efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f02:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800505c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f1e:	e043      	b.n	8004fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005068 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f32:	4b48      	ldr	r3, [pc, #288]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3a:	ee07 3a90 	vmov	s15, r3
 8004f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f46:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800505c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f62:	e021      	b.n	8004fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f76:	4b37      	ldr	r3, [pc, #220]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f8a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800505c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fa6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fac:	0a5b      	lsrs	r3, r3, #9
 8004fae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fce:	ee17 2a90 	vmov	r2, s15
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fda:	0c1b      	lsrs	r3, r3, #16
 8004fdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fe0:	ee07 3a90 	vmov	s15, r3
 8004fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ff0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ffc:	ee17 2a90 	vmov	r2, s15
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005004:	4b13      	ldr	r3, [pc, #76]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005008:	0e1b      	lsrs	r3, r3, #24
 800500a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800500e:	ee07 3a90 	vmov	s15, r3
 8005012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005016:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800501a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800501e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800502a:	ee17 2a90 	vmov	r2, s15
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005032:	e008      	b.n	8005046 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	609a      	str	r2, [r3, #8]
}
 8005046:	bf00      	nop
 8005048:	3724      	adds	r7, #36	@ 0x24
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	58024400 	.word	0x58024400
 8005058:	03d09000 	.word	0x03d09000
 800505c:	46000000 	.word	0x46000000
 8005060:	4c742400 	.word	0x4c742400
 8005064:	4a742400 	.word	0x4a742400
 8005068:	4bbebc20 	.word	0x4bbebc20

0800506c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800506c:	b480      	push	{r7}
 800506e:	b089      	sub	sp, #36	@ 0x24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005074:	4ba1      	ldr	r3, [pc, #644]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005078:	f003 0303 	and.w	r3, r3, #3
 800507c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800507e:	4b9f      	ldr	r3, [pc, #636]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005082:	0d1b      	lsrs	r3, r3, #20
 8005084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005088:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800508a:	4b9c      	ldr	r3, [pc, #624]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800508c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508e:	0a1b      	lsrs	r3, r3, #8
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005096:	4b99      	ldr	r3, [pc, #612]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509a:	08db      	lsrs	r3, r3, #3
 800509c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	fb02 f303 	mul.w	r3, r2, r3
 80050a6:	ee07 3a90 	vmov	s15, r3
 80050aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 8111 	beq.w	80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	2b02      	cmp	r3, #2
 80050be:	f000 8083 	beq.w	80051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	f200 80a1 	bhi.w	800520c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d056      	beq.n	8005184 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80050d6:	e099      	b.n	800520c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050d8:	4b88      	ldr	r3, [pc, #544]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0320 	and.w	r3, r3, #32
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d02d      	beq.n	8005140 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050e4:	4b85      	ldr	r3, [pc, #532]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	08db      	lsrs	r3, r3, #3
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	4a84      	ldr	r2, [pc, #528]	@ (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80050f0:	fa22 f303 	lsr.w	r3, r2, r3
 80050f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	ee07 3a90 	vmov	s15, r3
 80050fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800510e:	4b7b      	ldr	r3, [pc, #492]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800511e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005122:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005304 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800512a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800512e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800513a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800513e:	e087      	b.n	8005250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	ee07 3a90 	vmov	s15, r3
 8005146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800514e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005152:	4b6a      	ldr	r3, [pc, #424]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515a:	ee07 3a90 	vmov	s15, r3
 800515e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005162:	ed97 6a03 	vldr	s12, [r7, #12]
 8005166:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005304 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800516a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800516e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800517a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005182:	e065      	b.n	8005250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800530c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005196:	4b59      	ldr	r3, [pc, #356]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800519e:	ee07 3a90 	vmov	s15, r3
 80051a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005304 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051c6:	e043      	b.n	8005250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	ee07 3a90 	vmov	s15, r3
 80051ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80051d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051da:	4b48      	ldr	r3, [pc, #288]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005304 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005206:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800520a:	e021      	b.n	8005250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005216:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800530c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800521a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800521e:	4b37      	ldr	r3, [pc, #220]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800522e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005232:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005304 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800523a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800523e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800524a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800524e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005250:	4b2a      	ldr	r3, [pc, #168]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005254:	0a5b      	lsrs	r3, r3, #9
 8005256:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005262:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005266:	ee37 7a87 	vadd.f32	s14, s15, s14
 800526a:	edd7 6a07 	vldr	s13, [r7, #28]
 800526e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005276:	ee17 2a90 	vmov	r2, s15
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800527e:	4b1f      	ldr	r3, [pc, #124]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005282:	0c1b      	lsrs	r3, r3, #16
 8005284:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005288:	ee07 3a90 	vmov	s15, r3
 800528c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005290:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005294:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005298:	edd7 6a07 	vldr	s13, [r7, #28]
 800529c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052a4:	ee17 2a90 	vmov	r2, s15
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80052ac:	4b13      	ldr	r3, [pc, #76]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b0:	0e1b      	lsrs	r3, r3, #24
 80052b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052b6:	ee07 3a90 	vmov	s15, r3
 80052ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80052ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052d2:	ee17 2a90 	vmov	r2, s15
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80052da:	e008      	b.n	80052ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	609a      	str	r2, [r3, #8]
}
 80052ee:	bf00      	nop
 80052f0:	3724      	adds	r7, #36	@ 0x24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	58024400 	.word	0x58024400
 8005300:	03d09000 	.word	0x03d09000
 8005304:	46000000 	.word	0x46000000
 8005308:	4c742400 	.word	0x4c742400
 800530c:	4a742400 	.word	0x4a742400
 8005310:	4bbebc20 	.word	0x4bbebc20

08005314 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005322:	4b53      	ldr	r3, [pc, #332]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 8005324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	2b03      	cmp	r3, #3
 800532c:	d101      	bne.n	8005332 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e099      	b.n	8005466 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005332:	4b4f      	ldr	r3, [pc, #316]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a4e      	ldr	r2, [pc, #312]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 8005338:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800533c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800533e:	f7fc fecf 	bl	80020e0 <HAL_GetTick>
 8005342:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005344:	e008      	b.n	8005358 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005346:	f7fc fecb 	bl	80020e0 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d901      	bls.n	8005358 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e086      	b.n	8005466 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005358:	4b45      	ldr	r3, [pc, #276]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1f0      	bne.n	8005346 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005364:	4b42      	ldr	r3, [pc, #264]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 8005366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005368:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	031b      	lsls	r3, r3, #12
 8005372:	493f      	ldr	r1, [pc, #252]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 8005374:	4313      	orrs	r3, r2
 8005376:	628b      	str	r3, [r1, #40]	@ 0x28
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	3b01      	subs	r3, #1
 800537e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	3b01      	subs	r3, #1
 8005388:	025b      	lsls	r3, r3, #9
 800538a:	b29b      	uxth	r3, r3
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	3b01      	subs	r3, #1
 8005394:	041b      	lsls	r3, r3, #16
 8005396:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	061b      	lsls	r3, r3, #24
 80053a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80053a8:	4931      	ldr	r1, [pc, #196]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80053ae:	4b30      	ldr	r3, [pc, #192]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 80053b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	492d      	ldr	r1, [pc, #180]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80053c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 80053c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c4:	f023 0220 	bic.w	r2, r3, #32
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	4928      	ldr	r1, [pc, #160]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80053d2:	4b27      	ldr	r3, [pc, #156]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 80053d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d6:	4a26      	ldr	r2, [pc, #152]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 80053d8:	f023 0310 	bic.w	r3, r3, #16
 80053dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80053de:	4b24      	ldr	r3, [pc, #144]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 80053e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053e2:	4b24      	ldr	r3, [pc, #144]	@ (8005474 <RCCEx_PLL2_Config+0x160>)
 80053e4:	4013      	ands	r3, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	69d2      	ldr	r2, [r2, #28]
 80053ea:	00d2      	lsls	r2, r2, #3
 80053ec:	4920      	ldr	r1, [pc, #128]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80053f2:	4b1f      	ldr	r3, [pc, #124]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 80053f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 80053f8:	f043 0310 	orr.w	r3, r3, #16
 80053fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d106      	bne.n	8005412 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005404:	4b1a      	ldr	r3, [pc, #104]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 8005406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005408:	4a19      	ldr	r2, [pc, #100]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 800540a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800540e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005410:	e00f      	b.n	8005432 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d106      	bne.n	8005426 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005418:	4b15      	ldr	r3, [pc, #84]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 800541a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541c:	4a14      	ldr	r2, [pc, #80]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 800541e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005422:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005424:	e005      	b.n	8005432 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005426:	4b12      	ldr	r3, [pc, #72]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 8005428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542a:	4a11      	ldr	r2, [pc, #68]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 800542c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005430:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005432:	4b0f      	ldr	r3, [pc, #60]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a0e      	ldr	r2, [pc, #56]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 8005438:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800543c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800543e:	f7fc fe4f 	bl	80020e0 <HAL_GetTick>
 8005442:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005444:	e008      	b.n	8005458 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005446:	f7fc fe4b 	bl	80020e0 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e006      	b.n	8005466 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005458:	4b05      	ldr	r3, [pc, #20]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0f0      	beq.n	8005446 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005464:	7bfb      	ldrb	r3, [r7, #15]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	58024400 	.word	0x58024400
 8005474:	ffff0007 	.word	0xffff0007

08005478 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005486:	4b53      	ldr	r3, [pc, #332]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	2b03      	cmp	r3, #3
 8005490:	d101      	bne.n	8005496 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e099      	b.n	80055ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005496:	4b4f      	ldr	r3, [pc, #316]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a4e      	ldr	r2, [pc, #312]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 800549c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a2:	f7fc fe1d 	bl	80020e0 <HAL_GetTick>
 80054a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80054a8:	e008      	b.n	80054bc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80054aa:	f7fc fe19 	bl	80020e0 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d901      	bls.n	80054bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e086      	b.n	80055ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80054bc:	4b45      	ldr	r3, [pc, #276]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1f0      	bne.n	80054aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80054c8:	4b42      	ldr	r3, [pc, #264]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 80054ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054cc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	051b      	lsls	r3, r3, #20
 80054d6:	493f      	ldr	r1, [pc, #252]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	628b      	str	r3, [r1, #40]	@ 0x28
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	025b      	lsls	r3, r3, #9
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	041b      	lsls	r3, r3, #16
 80054fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	3b01      	subs	r3, #1
 8005506:	061b      	lsls	r3, r3, #24
 8005508:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800550c:	4931      	ldr	r1, [pc, #196]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 800550e:	4313      	orrs	r3, r2
 8005510:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005512:	4b30      	ldr	r3, [pc, #192]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005516:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	492d      	ldr	r1, [pc, #180]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005520:	4313      	orrs	r3, r2
 8005522:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005524:	4b2b      	ldr	r3, [pc, #172]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005528:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	4928      	ldr	r1, [pc, #160]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005532:	4313      	orrs	r3, r2
 8005534:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005536:	4b27      	ldr	r3, [pc, #156]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553a:	4a26      	ldr	r2, [pc, #152]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 800553c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005540:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005542:	4b24      	ldr	r3, [pc, #144]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005544:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005546:	4b24      	ldr	r3, [pc, #144]	@ (80055d8 <RCCEx_PLL3_Config+0x160>)
 8005548:	4013      	ands	r3, r2
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	69d2      	ldr	r2, [r2, #28]
 800554e:	00d2      	lsls	r2, r2, #3
 8005550:	4920      	ldr	r1, [pc, #128]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005552:	4313      	orrs	r3, r2
 8005554:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005556:	4b1f      	ldr	r3, [pc, #124]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555a:	4a1e      	ldr	r2, [pc, #120]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 800555c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005560:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d106      	bne.n	8005576 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005568:	4b1a      	ldr	r3, [pc, #104]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 800556a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556c:	4a19      	ldr	r2, [pc, #100]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 800556e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005572:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005574:	e00f      	b.n	8005596 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d106      	bne.n	800558a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800557c:	4b15      	ldr	r3, [pc, #84]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 800557e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005580:	4a14      	ldr	r2, [pc, #80]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005582:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005586:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005588:	e005      	b.n	8005596 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800558a:	4b12      	ldr	r3, [pc, #72]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 800558c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558e:	4a11      	ldr	r2, [pc, #68]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005590:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005594:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005596:	4b0f      	ldr	r3, [pc, #60]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a0e      	ldr	r2, [pc, #56]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 800559c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a2:	f7fc fd9d 	bl	80020e0 <HAL_GetTick>
 80055a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80055a8:	e008      	b.n	80055bc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80055aa:	f7fc fd99 	bl	80020e0 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d901      	bls.n	80055bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e006      	b.n	80055ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80055bc:	4b05      	ldr	r3, [pc, #20]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d0f0      	beq.n	80055aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	58024400 	.word	0x58024400
 80055d8:	ffff0007 	.word	0xffff0007

080055dc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e10f      	b.n	800580e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a87      	ldr	r2, [pc, #540]	@ (8005818 <HAL_SPI_Init+0x23c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00f      	beq.n	800561e <HAL_SPI_Init+0x42>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a86      	ldr	r2, [pc, #536]	@ (800581c <HAL_SPI_Init+0x240>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00a      	beq.n	800561e <HAL_SPI_Init+0x42>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a84      	ldr	r2, [pc, #528]	@ (8005820 <HAL_SPI_Init+0x244>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d005      	beq.n	800561e <HAL_SPI_Init+0x42>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	2b0f      	cmp	r3, #15
 8005618:	d901      	bls.n	800561e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e0f7      	b.n	800580e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fef6 	bl	8006410 <SPI_GetPacketSize>
 8005624:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a7b      	ldr	r2, [pc, #492]	@ (8005818 <HAL_SPI_Init+0x23c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00c      	beq.n	800564a <HAL_SPI_Init+0x6e>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a79      	ldr	r2, [pc, #484]	@ (800581c <HAL_SPI_Init+0x240>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d007      	beq.n	800564a <HAL_SPI_Init+0x6e>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a78      	ldr	r2, [pc, #480]	@ (8005820 <HAL_SPI_Init+0x244>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d002      	beq.n	800564a <HAL_SPI_Init+0x6e>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2b08      	cmp	r3, #8
 8005648:	d811      	bhi.n	800566e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800564e:	4a72      	ldr	r2, [pc, #456]	@ (8005818 <HAL_SPI_Init+0x23c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d009      	beq.n	8005668 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a70      	ldr	r2, [pc, #448]	@ (800581c <HAL_SPI_Init+0x240>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d004      	beq.n	8005668 <HAL_SPI_Init+0x8c>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a6f      	ldr	r2, [pc, #444]	@ (8005820 <HAL_SPI_Init+0x244>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d104      	bne.n	8005672 <HAL_SPI_Init+0x96>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2b10      	cmp	r3, #16
 800566c:	d901      	bls.n	8005672 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e0cd      	b.n	800580e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7fc f988 	bl	800199c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0201 	bic.w	r2, r2, #1
 80056a2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80056ae:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056b8:	d119      	bne.n	80056ee <HAL_SPI_Init+0x112>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056c2:	d103      	bne.n	80056cc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d008      	beq.n	80056de <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10c      	bne.n	80056ee <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80056d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056dc:	d107      	bne.n	80056ee <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80056ec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00f      	beq.n	800571a <HAL_SPI_Init+0x13e>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	2b06      	cmp	r3, #6
 8005700:	d90b      	bls.n	800571a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	e007      	b.n	800572a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005728:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	69da      	ldr	r2, [r3, #28]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005732:	431a      	orrs	r2, r3
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800573c:	ea42 0103 	orr.w	r1, r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800575a:	431a      	orrs	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	431a      	orrs	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	431a      	orrs	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	431a      	orrs	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800578a:	ea42 0103 	orr.w	r1, r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d113      	bne.n	80057ca <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057b4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80057c8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0201 	bic.w	r2, r2, #1
 80057d8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	40013000 	.word	0x40013000
 800581c:	40003800 	.word	0x40003800
 8005820:	40003c00 	.word	0x40003c00

08005824 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b088      	sub	sp, #32
 8005828:	af02      	add	r7, sp, #8
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	603b      	str	r3, [r7, #0]
 8005830:	4613      	mov	r3, r2
 8005832:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3320      	adds	r3, #32
 800583a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800583c:	f7fc fc50 	bl	80020e0 <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b01      	cmp	r3, #1
 800584c:	d001      	beq.n	8005852 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800584e:	2302      	movs	r3, #2
 8005850:	e1d1      	b.n	8005bf6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <HAL_SPI_Transmit+0x3a>
 8005858:	88fb      	ldrh	r3, [r7, #6]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e1c9      	b.n	8005bf6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005868:	2b01      	cmp	r3, #1
 800586a:	d101      	bne.n	8005870 <HAL_SPI_Transmit+0x4c>
 800586c:	2302      	movs	r3, #2
 800586e:	e1c2      	b.n	8005bf6 <HAL_SPI_Transmit+0x3d2>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2203      	movs	r2, #3
 800587c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	88fa      	ldrh	r2, [r7, #6]
 8005892:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	88fa      	ldrh	r2, [r7, #6]
 800589a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80058c8:	d108      	bne.n	80058dc <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	e009      	b.n	80058f0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80058ee:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	4b96      	ldr	r3, [pc, #600]	@ (8005b50 <HAL_SPI_Transmit+0x32c>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	88f9      	ldrh	r1, [r7, #6]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	6812      	ldr	r2, [r2, #0]
 8005900:	430b      	orrs	r3, r1
 8005902:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800591c:	d107      	bne.n	800592e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800592c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	2b0f      	cmp	r3, #15
 8005934:	d947      	bls.n	80059c6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005936:	e03f      	b.n	80059b8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b02      	cmp	r3, #2
 8005944:	d114      	bne.n	8005970 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6812      	ldr	r2, [r2, #0]
 8005950:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005956:	1d1a      	adds	r2, r3, #4
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800596e:	e023      	b.n	80059b8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005970:	f7fc fbb6 	bl	80020e0 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d803      	bhi.n	8005988 <HAL_SPI_Transmit+0x164>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005986:	d102      	bne.n	800598e <HAL_SPI_Transmit+0x16a>
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d114      	bne.n	80059b8 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f000 fc70 	bl	8006274 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800599a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e11e      	b.n	8005bf6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1b9      	bne.n	8005938 <HAL_SPI_Transmit+0x114>
 80059c4:	e0f1      	b.n	8005baa <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	2b07      	cmp	r3, #7
 80059cc:	f240 80e6 	bls.w	8005b9c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80059d0:	e05d      	b.n	8005a8e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	f003 0302 	and.w	r3, r3, #2
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d132      	bne.n	8005a46 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d918      	bls.n	8005a1e <HAL_SPI_Transmit+0x1fa>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d014      	beq.n	8005a1e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6812      	ldr	r2, [r2, #0]
 80059fe:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a04:	1d1a      	adds	r2, r3, #4
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b02      	subs	r3, #2
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005a1c:	e037      	b.n	8005a8e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a22:	881a      	ldrh	r2, [r3, #0]
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a2c:	1c9a      	adds	r2, r3, #2
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005a44:	e023      	b.n	8005a8e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a46:	f7fc fb4b 	bl	80020e0 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d803      	bhi.n	8005a5e <HAL_SPI_Transmit+0x23a>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5c:	d102      	bne.n	8005a64 <HAL_SPI_Transmit+0x240>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d114      	bne.n	8005a8e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 fc05 	bl	8006274 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e0b3      	b.n	8005bf6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d19b      	bne.n	80059d2 <HAL_SPI_Transmit+0x1ae>
 8005a9a:	e086      	b.n	8005baa <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d154      	bne.n	8005b54 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	d918      	bls.n	8005ae8 <HAL_SPI_Transmit+0x2c4>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aba:	2b40      	cmp	r3, #64	@ 0x40
 8005abc:	d914      	bls.n	8005ae8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6812      	ldr	r2, [r2, #0]
 8005ac8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ace:	1d1a      	adds	r2, r3, #4
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	3b04      	subs	r3, #4
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005ae6:	e059      	b.n	8005b9c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d917      	bls.n	8005b24 <HAL_SPI_Transmit+0x300>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d013      	beq.n	8005b24 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b00:	881a      	ldrh	r2, [r3, #0]
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b0a:	1c9a      	adds	r2, r3, #2
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	3b02      	subs	r3, #2
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005b22:	e03b      	b.n	8005b9c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3320      	adds	r3, #32
 8005b2e:	7812      	ldrb	r2, [r2, #0]
 8005b30:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	3b01      	subs	r3, #1
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005b4e:	e025      	b.n	8005b9c <HAL_SPI_Transmit+0x378>
 8005b50:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b54:	f7fc fac4 	bl	80020e0 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d803      	bhi.n	8005b6c <HAL_SPI_Transmit+0x348>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6a:	d102      	bne.n	8005b72 <HAL_SPI_Transmit+0x34e>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d114      	bne.n	8005b9c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 fb7e 	bl	8006274 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b7e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e02c      	b.n	8005bf6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f47f af79 	bne.w	8005a9c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2108      	movs	r1, #8
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 fbfd 	bl	80063b4 <SPI_WaitOnFlagUntilTimeout>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d007      	beq.n	8005bd0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bc6:	f043 0220 	orr.w	r2, r3, #32
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 fb4f 	bl	8006274 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e000      	b.n	8005bf6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
  }
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop

08005c00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08e      	sub	sp, #56	@ 0x38
 8005c04:	af02      	add	r7, sp, #8
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3320      	adds	r3, #32
 8005c14:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3330      	adds	r3, #48	@ 0x30
 8005c1c:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c22:	095b      	lsrs	r3, r3, #5
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3301      	adds	r3, #1
 8005c28:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c2a:	f7fc fa59 	bl	80020e0 <HAL_GetTick>
 8005c2e:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8005c30:	887b      	ldrh	r3, [r7, #2]
 8005c32:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8005c34:	887b      	ldrh	r3, [r7, #2]
 8005c36:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d001      	beq.n	8005c48 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8005c44:	2302      	movs	r3, #2
 8005c46:	e310      	b.n	800626a <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d005      	beq.n	8005c5a <HAL_SPI_TransmitReceive+0x5a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <HAL_SPI_TransmitReceive+0x5a>
 8005c54:	887b      	ldrh	r3, [r7, #2]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e305      	b.n	800626a <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_SPI_TransmitReceive+0x6c>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e2fe      	b.n	800626a <HAL_SPI_TransmitReceive+0x66a>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2205      	movs	r2, #5
 8005c78:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	887a      	ldrh	r2, [r7, #2]
 8005c8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	887a      	ldrh	r2, [r7, #2]
 8005c96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	887a      	ldrh	r2, [r7, #2]
 8005ca4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	887a      	ldrh	r2, [r7, #2]
 8005cac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8005cca:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a70      	ldr	r2, [pc, #448]	@ (8005e94 <HAL_SPI_TransmitReceive+0x294>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d009      	beq.n	8005cea <HAL_SPI_TransmitReceive+0xea>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a6f      	ldr	r2, [pc, #444]	@ (8005e98 <HAL_SPI_TransmitReceive+0x298>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d004      	beq.n	8005cea <HAL_SPI_TransmitReceive+0xea>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a6d      	ldr	r2, [pc, #436]	@ (8005e9c <HAL_SPI_TransmitReceive+0x29c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d102      	bne.n	8005cf0 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8005cea:	2310      	movs	r3, #16
 8005cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cee:	e001      	b.n	8005cf4 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8005cf0:	2308      	movs	r3, #8
 8005cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	4b69      	ldr	r3, [pc, #420]	@ (8005ea0 <HAL_SPI_TransmitReceive+0x2a0>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	8879      	ldrh	r1, [r7, #2]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	6812      	ldr	r2, [r2, #0]
 8005d04:	430b      	orrs	r3, r1
 8005d06:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0201 	orr.w	r2, r2, #1
 8005d16:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d20:	d107      	bne.n	8005d32 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	2b0f      	cmp	r3, #15
 8005d38:	f240 80a2 	bls.w	8005e80 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8005d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d3e:	089b      	lsrs	r3, r3, #2
 8005d40:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005d42:	e094      	b.n	8005e6e <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d120      	bne.n	8005d94 <HAL_SPI_TransmitReceive+0x194>
 8005d52:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d01d      	beq.n	8005d94 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005d58:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005d5a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d217      	bcs.n	8005d94 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6812      	ldr	r2, [r2, #0]
 8005d6e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d74:	1d1a      	adds	r2, r3, #4
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d92:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005d9c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d065      	beq.n	8005e6e <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d118      	bne.n	8005de2 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005db8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005dba:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dc0:	1d1a      	adds	r2, r3, #4
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005dde:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005de0:	e045      	b.n	8005e6e <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005de2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005de4:	8bfb      	ldrh	r3, [r7, #30]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d21d      	bcs.n	8005e26 <HAL_SPI_TransmitReceive+0x226>
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d018      	beq.n	8005e26 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dfc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005dfe:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e04:	1d1a      	adds	r2, r3, #4
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	3b01      	subs	r3, #1
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e22:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005e24:	e023      	b.n	8005e6e <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e26:	f7fc f95b 	bl	80020e0 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d803      	bhi.n	8005e3e <HAL_SPI_TransmitReceive+0x23e>
 8005e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3c:	d102      	bne.n	8005e44 <HAL_SPI_TransmitReceive+0x244>
 8005e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d114      	bne.n	8005e6e <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f000 fa15 	bl	8006274 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e50:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e1fd      	b.n	800626a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005e6e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f47f af67 	bne.w	8005d44 <HAL_SPI_TransmitReceive+0x144>
 8005e76:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f47f af63 	bne.w	8005d44 <HAL_SPI_TransmitReceive+0x144>
 8005e7e:	e1ce      	b.n	800621e <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	2b07      	cmp	r3, #7
 8005e86:	f240 81c2 	bls.w	800620e <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8005e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8c:	085b      	lsrs	r3, r3, #1
 8005e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005e90:	e0c9      	b.n	8006026 <HAL_SPI_TransmitReceive+0x426>
 8005e92:	bf00      	nop
 8005e94:	40013000 	.word	0x40013000
 8005e98:	40003800 	.word	0x40003800
 8005e9c:	40003c00 	.word	0x40003c00
 8005ea0:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d11f      	bne.n	8005ef2 <HAL_SPI_TransmitReceive+0x2f2>
 8005eb2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d01c      	beq.n	8005ef2 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005eb8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005eba:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ebe:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d216      	bcs.n	8005ef2 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ec8:	881a      	ldrh	r2, [r3, #0]
 8005eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ecc:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ed2:	1c9a      	adds	r2, r3, #2
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ef0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005efa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 8092 	beq.w	8006026 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d118      	bne.n	8005f42 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f14:	6a3a      	ldr	r2, [r7, #32]
 8005f16:	8812      	ldrh	r2, [r2, #0]
 8005f18:	b292      	uxth	r2, r2
 8005f1a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f20:	1c9a      	adds	r2, r3, #2
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f3e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005f40:	e071      	b.n	8006026 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005f42:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005f44:	8bfb      	ldrh	r3, [r7, #30]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d228      	bcs.n	8005f9c <HAL_SPI_TransmitReceive+0x39c>
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d023      	beq.n	8005f9c <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f58:	6a3a      	ldr	r2, [r7, #32]
 8005f5a:	8812      	ldrh	r2, [r2, #0]
 8005f5c:	b292      	uxth	r2, r2
 8005f5e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f64:	1c9a      	adds	r2, r3, #2
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f6e:	6a3a      	ldr	r2, [r7, #32]
 8005f70:	8812      	ldrh	r2, [r2, #0]
 8005f72:	b292      	uxth	r2, r2
 8005f74:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f7a:	1c9a      	adds	r2, r3, #2
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	3b02      	subs	r3, #2
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f98:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005f9a:	e044      	b.n	8006026 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005f9c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d11d      	bne.n	8005fde <HAL_SPI_TransmitReceive+0x3de>
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d018      	beq.n	8005fde <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fb0:	6a3a      	ldr	r2, [r7, #32]
 8005fb2:	8812      	ldrh	r2, [r2, #0]
 8005fb4:	b292      	uxth	r2, r2
 8005fb6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fbc:	1c9a      	adds	r2, r3, #2
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005fda:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005fdc:	e023      	b.n	8006026 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fde:	f7fc f87f 	bl	80020e0 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d803      	bhi.n	8005ff6 <HAL_SPI_TransmitReceive+0x3f6>
 8005fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff4:	d102      	bne.n	8005ffc <HAL_SPI_TransmitReceive+0x3fc>
 8005ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d114      	bne.n	8006026 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 f939 	bl	8006274 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006008:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e121      	b.n	800626a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006026:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006028:	2b00      	cmp	r3, #0
 800602a:	f47f af3b 	bne.w	8005ea4 <HAL_SPI_TransmitReceive+0x2a4>
 800602e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006030:	2b00      	cmp	r3, #0
 8006032:	f47f af37 	bne.w	8005ea4 <HAL_SPI_TransmitReceive+0x2a4>
 8006036:	e0f2      	b.n	800621e <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b02      	cmp	r3, #2
 8006044:	d121      	bne.n	800608a <HAL_SPI_TransmitReceive+0x48a>
 8006046:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006048:	2b00      	cmp	r3, #0
 800604a:	d01e      	beq.n	800608a <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800604c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800604e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006052:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006054:	429a      	cmp	r2, r3
 8006056:	d218      	bcs.n	800608a <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3320      	adds	r3, #32
 8006062:	7812      	ldrb	r2, [r2, #0]
 8006064:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006076:	b29b      	uxth	r3, r3
 8006078:	3b01      	subs	r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006088:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006092:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 80ba 	beq.w	800620e <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d11b      	bne.n	80060e0 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060b4:	7812      	ldrb	r2, [r2, #0]
 80060b6:	b2d2      	uxtb	r2, r2
 80060b8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060be:	1c5a      	adds	r2, r3, #1
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	3b01      	subs	r3, #1
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80060dc:	853b      	strh	r3, [r7, #40]	@ 0x28
 80060de:	e096      	b.n	800620e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80060e0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80060e2:	8bfb      	ldrh	r3, [r7, #30]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d24a      	bcs.n	800617e <HAL_SPI_TransmitReceive+0x57e>
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d045      	beq.n	800617e <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060fe:	7812      	ldrb	r2, [r2, #0]
 8006100:	b2d2      	uxtb	r2, r2
 8006102:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800611a:	7812      	ldrb	r2, [r2, #0]
 800611c:	b2d2      	uxtb	r2, r2
 800611e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006136:	7812      	ldrb	r2, [r2, #0]
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006152:	7812      	ldrb	r2, [r2, #0]
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006168:	b29b      	uxth	r3, r3
 800616a:	3b04      	subs	r3, #4
 800616c:	b29a      	uxth	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800617a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800617c:	e047      	b.n	800620e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800617e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006180:	2b03      	cmp	r3, #3
 8006182:	d820      	bhi.n	80061c6 <HAL_SPI_TransmitReceive+0x5c6>
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d01b      	beq.n	80061c6 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800619a:	7812      	ldrb	r2, [r2, #0]
 800619c:	b2d2      	uxtb	r2, r2
 800619e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061a4:	1c5a      	adds	r2, r3, #1
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061c2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80061c4:	e023      	b.n	800620e <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061c6:	f7fb ff8b 	bl	80020e0 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d803      	bhi.n	80061de <HAL_SPI_TransmitReceive+0x5de>
 80061d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061dc:	d102      	bne.n	80061e4 <HAL_SPI_TransmitReceive+0x5e4>
 80061de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d114      	bne.n	800620e <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f845 	bl	8006274 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e02d      	b.n	800626a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800620e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006210:	2b00      	cmp	r3, #0
 8006212:	f47f af11 	bne.w	8006038 <HAL_SPI_TransmitReceive+0x438>
 8006216:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006218:	2b00      	cmp	r3, #0
 800621a:	f47f af0d 	bne.w	8006038 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006224:	2200      	movs	r2, #0
 8006226:	2108      	movs	r1, #8
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f000 f8c3 	bl	80063b4 <SPI_WaitOnFlagUntilTimeout>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d007      	beq.n	8006244 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800623a:	f043 0220 	orr.w	r2, r3, #32
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f000 f815 	bl	8006274 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e000      	b.n	800626a <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8006268:	2300      	movs	r3, #0
  }
}
 800626a:	4618      	mov	r0, r3
 800626c:	3730      	adds	r7, #48	@ 0x30
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop

08006274 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699a      	ldr	r2, [r3, #24]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0208 	orr.w	r2, r2, #8
 8006292:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699a      	ldr	r2, [r3, #24]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0210 	orr.w	r2, r2, #16
 80062a2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0201 	bic.w	r2, r2, #1
 80062b2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6919      	ldr	r1, [r3, #16]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	4b3c      	ldr	r3, [pc, #240]	@ (80063b0 <SPI_CloseTransfer+0x13c>)
 80062c0:	400b      	ands	r3, r1
 80062c2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689a      	ldr	r2, [r3, #8]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80062d2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b04      	cmp	r3, #4
 80062de:	d014      	beq.n	800630a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f003 0320 	and.w	r3, r3, #32
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00f      	beq.n	800630a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	699a      	ldr	r2, [r3, #24]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f042 0220 	orr.w	r2, r2, #32
 8006308:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b03      	cmp	r3, #3
 8006314:	d014      	beq.n	8006340 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00f      	beq.n	8006340 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006326:	f043 0204 	orr.w	r2, r3, #4
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699a      	ldr	r2, [r3, #24]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800633e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00f      	beq.n	800636a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006350:	f043 0201 	orr.w	r2, r3, #1
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	699a      	ldr	r2, [r3, #24]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006368:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00f      	beq.n	8006394 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800637a:	f043 0208 	orr.w	r2, r3, #8
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699a      	ldr	r2, [r3, #24]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006392:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80063a4:	bf00      	nop
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	fffffc90 	.word	0xfffffc90

080063b4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	603b      	str	r3, [r7, #0]
 80063c0:	4613      	mov	r3, r2
 80063c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80063c4:	e010      	b.n	80063e8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063c6:	f7fb fe8b 	bl	80020e0 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d803      	bhi.n	80063de <SPI_WaitOnFlagUntilTimeout+0x2a>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063dc:	d102      	bne.n	80063e4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e00f      	b.n	8006408 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	695a      	ldr	r2, [r3, #20]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	4013      	ands	r3, r2
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	bf0c      	ite	eq
 80063f8:	2301      	moveq	r3, #1
 80063fa:	2300      	movne	r3, #0
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	461a      	mov	r2, r3
 8006400:	79fb      	ldrb	r3, [r7, #7]
 8006402:	429a      	cmp	r2, r3
 8006404:	d0df      	beq.n	80063c6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800641c:	095b      	lsrs	r3, r3, #5
 800641e:	3301      	adds	r3, #1
 8006420:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	3301      	adds	r3, #1
 8006428:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	3307      	adds	r3, #7
 800642e:	08db      	lsrs	r3, r3, #3
 8006430:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	fb02 f303 	mul.w	r3, r2, r3
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b082      	sub	sp, #8
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e049      	b.n	80064ec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	d106      	bne.n	8006472 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7fb fb6d 	bl	8001b4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2202      	movs	r2, #2
 8006476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	3304      	adds	r3, #4
 8006482:	4619      	mov	r1, r3
 8006484:	4610      	mov	r0, r2
 8006486:	f000 fb47 	bl	8006b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b01      	cmp	r3, #1
 8006506:	d001      	beq.n	800650c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e054      	b.n	80065b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68da      	ldr	r2, [r3, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a26      	ldr	r2, [pc, #152]	@ (80065c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d022      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x80>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006536:	d01d      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x80>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a22      	ldr	r2, [pc, #136]	@ (80065c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d018      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x80>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a21      	ldr	r2, [pc, #132]	@ (80065cc <HAL_TIM_Base_Start_IT+0xd8>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d013      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x80>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a1f      	ldr	r2, [pc, #124]	@ (80065d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d00e      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x80>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a1e      	ldr	r2, [pc, #120]	@ (80065d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d009      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x80>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a1c      	ldr	r2, [pc, #112]	@ (80065d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d004      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x80>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a1b      	ldr	r2, [pc, #108]	@ (80065dc <HAL_TIM_Base_Start_IT+0xe8>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d115      	bne.n	80065a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689a      	ldr	r2, [r3, #8]
 800657a:	4b19      	ldr	r3, [pc, #100]	@ (80065e0 <HAL_TIM_Base_Start_IT+0xec>)
 800657c:	4013      	ands	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2b06      	cmp	r3, #6
 8006584:	d015      	beq.n	80065b2 <HAL_TIM_Base_Start_IT+0xbe>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800658c:	d011      	beq.n	80065b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f042 0201 	orr.w	r2, r2, #1
 800659c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800659e:	e008      	b.n	80065b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f042 0201 	orr.w	r2, r2, #1
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	e000      	b.n	80065b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	40010000 	.word	0x40010000
 80065c8:	40000400 	.word	0x40000400
 80065cc:	40000800 	.word	0x40000800
 80065d0:	40000c00 	.word	0x40000c00
 80065d4:	40010400 	.word	0x40010400
 80065d8:	40001800 	.word	0x40001800
 80065dc:	40014000 	.word	0x40014000
 80065e0:	00010007 	.word	0x00010007

080065e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e049      	b.n	800668a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d106      	bne.n	8006610 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7fb fa54 	bl	8001ab8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	3304      	adds	r3, #4
 8006620:	4619      	mov	r1, r3
 8006622:	4610      	mov	r0, r2
 8006624:	f000 fa78 	bl	8006b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d020      	beq.n	80066f6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d01b      	beq.n	80066f6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f06f 0202 	mvn.w	r2, #2
 80066c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	f003 0303 	and.w	r3, r3, #3
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 f9fd 	bl	8006adc <HAL_TIM_IC_CaptureCallback>
 80066e2:	e005      	b.n	80066f0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f9ef 	bl	8006ac8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fa00 	bl	8006af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d020      	beq.n	8006742 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f003 0304 	and.w	r3, r3, #4
 8006706:	2b00      	cmp	r3, #0
 8006708:	d01b      	beq.n	8006742 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f06f 0204 	mvn.w	r2, #4
 8006712:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006724:	2b00      	cmp	r3, #0
 8006726:	d003      	beq.n	8006730 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f9d7 	bl	8006adc <HAL_TIM_IC_CaptureCallback>
 800672e:	e005      	b.n	800673c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f9c9 	bl	8006ac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f9da 	bl	8006af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f003 0308 	and.w	r3, r3, #8
 8006748:	2b00      	cmp	r3, #0
 800674a:	d020      	beq.n	800678e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f003 0308 	and.w	r3, r3, #8
 8006752:	2b00      	cmp	r3, #0
 8006754:	d01b      	beq.n	800678e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f06f 0208 	mvn.w	r2, #8
 800675e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2204      	movs	r2, #4
 8006764:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	f003 0303 	and.w	r3, r3, #3
 8006770:	2b00      	cmp	r3, #0
 8006772:	d003      	beq.n	800677c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f9b1 	bl	8006adc <HAL_TIM_IC_CaptureCallback>
 800677a:	e005      	b.n	8006788 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f9a3 	bl	8006ac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f9b4 	bl	8006af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f003 0310 	and.w	r3, r3, #16
 8006794:	2b00      	cmp	r3, #0
 8006796:	d020      	beq.n	80067da <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f003 0310 	and.w	r3, r3, #16
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d01b      	beq.n	80067da <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f06f 0210 	mvn.w	r2, #16
 80067aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2208      	movs	r2, #8
 80067b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d003      	beq.n	80067c8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f98b 	bl	8006adc <HAL_TIM_IC_CaptureCallback>
 80067c6:	e005      	b.n	80067d4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f97d 	bl	8006ac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f98e 	bl	8006af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00c      	beq.n	80067fe <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d007      	beq.n	80067fe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f06f 0201 	mvn.w	r2, #1
 80067f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7fb f891 	bl	8001920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006804:	2b00      	cmp	r3, #0
 8006806:	d104      	bne.n	8006812 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00c      	beq.n	800682c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006818:	2b00      	cmp	r3, #0
 800681a:	d007      	beq.n	800682c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fe02 	bl	8007430 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00c      	beq.n	8006850 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800683c:	2b00      	cmp	r3, #0
 800683e:	d007      	beq.n	8006850 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fdfa 	bl	8007444 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00c      	beq.n	8006874 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006860:	2b00      	cmp	r3, #0
 8006862:	d007      	beq.n	8006874 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800686c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f948 	bl	8006b04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f003 0320 	and.w	r3, r3, #32
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00c      	beq.n	8006898 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f003 0320 	and.w	r3, r3, #32
 8006884:	2b00      	cmp	r3, #0
 8006886:	d007      	beq.n	8006898 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f06f 0220 	mvn.w	r2, #32
 8006890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fdc2 	bl	800741c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006898:	bf00      	nop
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d101      	bne.n	80068be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068ba:	2302      	movs	r3, #2
 80068bc:	e0ff      	b.n	8006abe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b14      	cmp	r3, #20
 80068ca:	f200 80f0 	bhi.w	8006aae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80068ce:	a201      	add	r2, pc, #4	@ (adr r2, 80068d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d4:	08006929 	.word	0x08006929
 80068d8:	08006aaf 	.word	0x08006aaf
 80068dc:	08006aaf 	.word	0x08006aaf
 80068e0:	08006aaf 	.word	0x08006aaf
 80068e4:	08006969 	.word	0x08006969
 80068e8:	08006aaf 	.word	0x08006aaf
 80068ec:	08006aaf 	.word	0x08006aaf
 80068f0:	08006aaf 	.word	0x08006aaf
 80068f4:	080069ab 	.word	0x080069ab
 80068f8:	08006aaf 	.word	0x08006aaf
 80068fc:	08006aaf 	.word	0x08006aaf
 8006900:	08006aaf 	.word	0x08006aaf
 8006904:	080069eb 	.word	0x080069eb
 8006908:	08006aaf 	.word	0x08006aaf
 800690c:	08006aaf 	.word	0x08006aaf
 8006910:	08006aaf 	.word	0x08006aaf
 8006914:	08006a2d 	.word	0x08006a2d
 8006918:	08006aaf 	.word	0x08006aaf
 800691c:	08006aaf 	.word	0x08006aaf
 8006920:	08006aaf 	.word	0x08006aaf
 8006924:	08006a6d 	.word	0x08006a6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68b9      	ldr	r1, [r7, #8]
 800692e:	4618      	mov	r0, r3
 8006930:	f000 f992 	bl	8006c58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699a      	ldr	r2, [r3, #24]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 0208 	orr.w	r2, r2, #8
 8006942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	699a      	ldr	r2, [r3, #24]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 0204 	bic.w	r2, r2, #4
 8006952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6999      	ldr	r1, [r3, #24]
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	691a      	ldr	r2, [r3, #16]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	619a      	str	r2, [r3, #24]
      break;
 8006966:	e0a5      	b.n	8006ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fa02 	bl	8006d78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	699a      	ldr	r2, [r3, #24]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	699a      	ldr	r2, [r3, #24]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6999      	ldr	r1, [r3, #24]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	021a      	lsls	r2, r3, #8
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	619a      	str	r2, [r3, #24]
      break;
 80069a8:	e084      	b.n	8006ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68b9      	ldr	r1, [r7, #8]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 fa6b 	bl	8006e8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	69da      	ldr	r2, [r3, #28]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f042 0208 	orr.w	r2, r2, #8
 80069c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69da      	ldr	r2, [r3, #28]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0204 	bic.w	r2, r2, #4
 80069d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	69d9      	ldr	r1, [r3, #28]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	691a      	ldr	r2, [r3, #16]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	61da      	str	r2, [r3, #28]
      break;
 80069e8:	e064      	b.n	8006ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68b9      	ldr	r1, [r7, #8]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 fad3 	bl	8006f9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	69da      	ldr	r2, [r3, #28]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	69da      	ldr	r2, [r3, #28]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69d9      	ldr	r1, [r3, #28]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	021a      	lsls	r2, r3, #8
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	61da      	str	r2, [r3, #28]
      break;
 8006a2a:	e043      	b.n	8006ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68b9      	ldr	r1, [r7, #8]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fb1c 	bl	8007070 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0208 	orr.w	r2, r2, #8
 8006a46:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 0204 	bic.w	r2, r2, #4
 8006a56:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	691a      	ldr	r2, [r3, #16]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006a6a:	e023      	b.n	8006ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68b9      	ldr	r1, [r7, #8]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fb60 	bl	8007138 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	021a      	lsls	r2, r3, #8
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006aac:	e002      	b.n	8006ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop

08006ac8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a43      	ldr	r2, [pc, #268]	@ (8006c38 <TIM_Base_SetConfig+0x120>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d013      	beq.n	8006b58 <TIM_Base_SetConfig+0x40>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b36:	d00f      	beq.n	8006b58 <TIM_Base_SetConfig+0x40>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a40      	ldr	r2, [pc, #256]	@ (8006c3c <TIM_Base_SetConfig+0x124>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d00b      	beq.n	8006b58 <TIM_Base_SetConfig+0x40>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a3f      	ldr	r2, [pc, #252]	@ (8006c40 <TIM_Base_SetConfig+0x128>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d007      	beq.n	8006b58 <TIM_Base_SetConfig+0x40>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a3e      	ldr	r2, [pc, #248]	@ (8006c44 <TIM_Base_SetConfig+0x12c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d003      	beq.n	8006b58 <TIM_Base_SetConfig+0x40>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a3d      	ldr	r2, [pc, #244]	@ (8006c48 <TIM_Base_SetConfig+0x130>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d108      	bne.n	8006b6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a32      	ldr	r2, [pc, #200]	@ (8006c38 <TIM_Base_SetConfig+0x120>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d01f      	beq.n	8006bb2 <TIM_Base_SetConfig+0x9a>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b78:	d01b      	beq.n	8006bb2 <TIM_Base_SetConfig+0x9a>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a2f      	ldr	r2, [pc, #188]	@ (8006c3c <TIM_Base_SetConfig+0x124>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d017      	beq.n	8006bb2 <TIM_Base_SetConfig+0x9a>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a2e      	ldr	r2, [pc, #184]	@ (8006c40 <TIM_Base_SetConfig+0x128>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d013      	beq.n	8006bb2 <TIM_Base_SetConfig+0x9a>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a2d      	ldr	r2, [pc, #180]	@ (8006c44 <TIM_Base_SetConfig+0x12c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00f      	beq.n	8006bb2 <TIM_Base_SetConfig+0x9a>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a2c      	ldr	r2, [pc, #176]	@ (8006c48 <TIM_Base_SetConfig+0x130>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d00b      	beq.n	8006bb2 <TIM_Base_SetConfig+0x9a>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a2b      	ldr	r2, [pc, #172]	@ (8006c4c <TIM_Base_SetConfig+0x134>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d007      	beq.n	8006bb2 <TIM_Base_SetConfig+0x9a>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a2a      	ldr	r2, [pc, #168]	@ (8006c50 <TIM_Base_SetConfig+0x138>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d003      	beq.n	8006bb2 <TIM_Base_SetConfig+0x9a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a29      	ldr	r2, [pc, #164]	@ (8006c54 <TIM_Base_SetConfig+0x13c>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d108      	bne.n	8006bc4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	689a      	ldr	r2, [r3, #8]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a14      	ldr	r2, [pc, #80]	@ (8006c38 <TIM_Base_SetConfig+0x120>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d00f      	beq.n	8006c0a <TIM_Base_SetConfig+0xf2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a16      	ldr	r2, [pc, #88]	@ (8006c48 <TIM_Base_SetConfig+0x130>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d00b      	beq.n	8006c0a <TIM_Base_SetConfig+0xf2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a15      	ldr	r2, [pc, #84]	@ (8006c4c <TIM_Base_SetConfig+0x134>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d007      	beq.n	8006c0a <TIM_Base_SetConfig+0xf2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a14      	ldr	r2, [pc, #80]	@ (8006c50 <TIM_Base_SetConfig+0x138>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d003      	beq.n	8006c0a <TIM_Base_SetConfig+0xf2>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a13      	ldr	r2, [pc, #76]	@ (8006c54 <TIM_Base_SetConfig+0x13c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d103      	bne.n	8006c12 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	691a      	ldr	r2, [r3, #16]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f043 0204 	orr.w	r2, r3, #4
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	601a      	str	r2, [r3, #0]
}
 8006c2a:	bf00      	nop
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	40010000 	.word	0x40010000
 8006c3c:	40000400 	.word	0x40000400
 8006c40:	40000800 	.word	0x40000800
 8006c44:	40000c00 	.word	0x40000c00
 8006c48:	40010400 	.word	0x40010400
 8006c4c:	40014000 	.word	0x40014000
 8006c50:	40014400 	.word	0x40014400
 8006c54:	40014800 	.word	0x40014800

08006c58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b087      	sub	sp, #28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	f023 0201 	bic.w	r2, r3, #1
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	4b37      	ldr	r3, [pc, #220]	@ (8006d60 <TIM_OC1_SetConfig+0x108>)
 8006c84:	4013      	ands	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0303 	bic.w	r3, r3, #3
 8006c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f023 0302 	bic.w	r3, r3, #2
 8006ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a2d      	ldr	r2, [pc, #180]	@ (8006d64 <TIM_OC1_SetConfig+0x10c>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d00f      	beq.n	8006cd4 <TIM_OC1_SetConfig+0x7c>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8006d68 <TIM_OC1_SetConfig+0x110>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d00b      	beq.n	8006cd4 <TIM_OC1_SetConfig+0x7c>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a2b      	ldr	r2, [pc, #172]	@ (8006d6c <TIM_OC1_SetConfig+0x114>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d007      	beq.n	8006cd4 <TIM_OC1_SetConfig+0x7c>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a2a      	ldr	r2, [pc, #168]	@ (8006d70 <TIM_OC1_SetConfig+0x118>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d003      	beq.n	8006cd4 <TIM_OC1_SetConfig+0x7c>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a29      	ldr	r2, [pc, #164]	@ (8006d74 <TIM_OC1_SetConfig+0x11c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d10c      	bne.n	8006cee <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f023 0308 	bic.w	r3, r3, #8
 8006cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f023 0304 	bic.w	r3, r3, #4
 8006cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8006d64 <TIM_OC1_SetConfig+0x10c>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d00f      	beq.n	8006d16 <TIM_OC1_SetConfig+0xbe>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8006d68 <TIM_OC1_SetConfig+0x110>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d00b      	beq.n	8006d16 <TIM_OC1_SetConfig+0xbe>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a1a      	ldr	r2, [pc, #104]	@ (8006d6c <TIM_OC1_SetConfig+0x114>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d007      	beq.n	8006d16 <TIM_OC1_SetConfig+0xbe>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a19      	ldr	r2, [pc, #100]	@ (8006d70 <TIM_OC1_SetConfig+0x118>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d003      	beq.n	8006d16 <TIM_OC1_SetConfig+0xbe>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a18      	ldr	r2, [pc, #96]	@ (8006d74 <TIM_OC1_SetConfig+0x11c>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d111      	bne.n	8006d3a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	621a      	str	r2, [r3, #32]
}
 8006d54:	bf00      	nop
 8006d56:	371c      	adds	r7, #28
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	fffeff8f 	.word	0xfffeff8f
 8006d64:	40010000 	.word	0x40010000
 8006d68:	40010400 	.word	0x40010400
 8006d6c:	40014000 	.word	0x40014000
 8006d70:	40014400 	.word	0x40014400
 8006d74:	40014800 	.word	0x40014800

08006d78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	f023 0210 	bic.w	r2, r3, #16
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	4b34      	ldr	r3, [pc, #208]	@ (8006e74 <TIM_OC2_SetConfig+0xfc>)
 8006da4:	4013      	ands	r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	021b      	lsls	r3, r3, #8
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f023 0320 	bic.w	r3, r3, #32
 8006dc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	011b      	lsls	r3, r3, #4
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a29      	ldr	r2, [pc, #164]	@ (8006e78 <TIM_OC2_SetConfig+0x100>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d003      	beq.n	8006de0 <TIM_OC2_SetConfig+0x68>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a28      	ldr	r2, [pc, #160]	@ (8006e7c <TIM_OC2_SetConfig+0x104>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d10d      	bne.n	8006dfc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	011b      	lsls	r3, r3, #4
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8006e78 <TIM_OC2_SetConfig+0x100>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00f      	beq.n	8006e24 <TIM_OC2_SetConfig+0xac>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a1d      	ldr	r2, [pc, #116]	@ (8006e7c <TIM_OC2_SetConfig+0x104>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00b      	beq.n	8006e24 <TIM_OC2_SetConfig+0xac>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8006e80 <TIM_OC2_SetConfig+0x108>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d007      	beq.n	8006e24 <TIM_OC2_SetConfig+0xac>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a1b      	ldr	r2, [pc, #108]	@ (8006e84 <TIM_OC2_SetConfig+0x10c>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d003      	beq.n	8006e24 <TIM_OC2_SetConfig+0xac>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8006e88 <TIM_OC2_SetConfig+0x110>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d113      	bne.n	8006e4c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	621a      	str	r2, [r3, #32]
}
 8006e66:	bf00      	nop
 8006e68:	371c      	adds	r7, #28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	feff8fff 	.word	0xfeff8fff
 8006e78:	40010000 	.word	0x40010000
 8006e7c:	40010400 	.word	0x40010400
 8006e80:	40014000 	.word	0x40014000
 8006e84:	40014400 	.word	0x40014400
 8006e88:	40014800 	.word	0x40014800

08006e8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	4b33      	ldr	r3, [pc, #204]	@ (8006f84 <TIM_OC3_SetConfig+0xf8>)
 8006eb8:	4013      	ands	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 0303 	bic.w	r3, r3, #3
 8006ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	021b      	lsls	r3, r3, #8
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a28      	ldr	r2, [pc, #160]	@ (8006f88 <TIM_OC3_SetConfig+0xfc>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d003      	beq.n	8006ef2 <TIM_OC3_SetConfig+0x66>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a27      	ldr	r2, [pc, #156]	@ (8006f8c <TIM_OC3_SetConfig+0x100>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d10d      	bne.n	8006f0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	021b      	lsls	r3, r3, #8
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a1d      	ldr	r2, [pc, #116]	@ (8006f88 <TIM_OC3_SetConfig+0xfc>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d00f      	beq.n	8006f36 <TIM_OC3_SetConfig+0xaa>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a1c      	ldr	r2, [pc, #112]	@ (8006f8c <TIM_OC3_SetConfig+0x100>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d00b      	beq.n	8006f36 <TIM_OC3_SetConfig+0xaa>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a1b      	ldr	r2, [pc, #108]	@ (8006f90 <TIM_OC3_SetConfig+0x104>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d007      	beq.n	8006f36 <TIM_OC3_SetConfig+0xaa>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a1a      	ldr	r2, [pc, #104]	@ (8006f94 <TIM_OC3_SetConfig+0x108>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d003      	beq.n	8006f36 <TIM_OC3_SetConfig+0xaa>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a19      	ldr	r2, [pc, #100]	@ (8006f98 <TIM_OC3_SetConfig+0x10c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d113      	bne.n	8006f5e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	011b      	lsls	r3, r3, #4
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	011b      	lsls	r3, r3, #4
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	621a      	str	r2, [r3, #32]
}
 8006f78:	bf00      	nop
 8006f7a:	371c      	adds	r7, #28
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	fffeff8f 	.word	0xfffeff8f
 8006f88:	40010000 	.word	0x40010000
 8006f8c:	40010400 	.word	0x40010400
 8006f90:	40014000 	.word	0x40014000
 8006f94:	40014400 	.word	0x40014400
 8006f98:	40014800 	.word	0x40014800

08006f9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	4b24      	ldr	r3, [pc, #144]	@ (8007058 <TIM_OC4_SetConfig+0xbc>)
 8006fc8:	4013      	ands	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	021b      	lsls	r3, r3, #8
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006fe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	031b      	lsls	r3, r3, #12
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a19      	ldr	r2, [pc, #100]	@ (800705c <TIM_OC4_SetConfig+0xc0>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d00f      	beq.n	800701c <TIM_OC4_SetConfig+0x80>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a18      	ldr	r2, [pc, #96]	@ (8007060 <TIM_OC4_SetConfig+0xc4>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d00b      	beq.n	800701c <TIM_OC4_SetConfig+0x80>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a17      	ldr	r2, [pc, #92]	@ (8007064 <TIM_OC4_SetConfig+0xc8>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d007      	beq.n	800701c <TIM_OC4_SetConfig+0x80>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a16      	ldr	r2, [pc, #88]	@ (8007068 <TIM_OC4_SetConfig+0xcc>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d003      	beq.n	800701c <TIM_OC4_SetConfig+0x80>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a15      	ldr	r2, [pc, #84]	@ (800706c <TIM_OC4_SetConfig+0xd0>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d109      	bne.n	8007030 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007022:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	019b      	lsls	r3, r3, #6
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	4313      	orrs	r3, r2
 800702e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	621a      	str	r2, [r3, #32]
}
 800704a:	bf00      	nop
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	feff8fff 	.word	0xfeff8fff
 800705c:	40010000 	.word	0x40010000
 8007060:	40010400 	.word	0x40010400
 8007064:	40014000 	.word	0x40014000
 8007068:	40014400 	.word	0x40014400
 800706c:	40014800 	.word	0x40014800

08007070 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	4b21      	ldr	r3, [pc, #132]	@ (8007120 <TIM_OC5_SetConfig+0xb0>)
 800709c:	4013      	ands	r3, r2
 800709e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80070b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	041b      	lsls	r3, r3, #16
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a18      	ldr	r2, [pc, #96]	@ (8007124 <TIM_OC5_SetConfig+0xb4>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d00f      	beq.n	80070e6 <TIM_OC5_SetConfig+0x76>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a17      	ldr	r2, [pc, #92]	@ (8007128 <TIM_OC5_SetConfig+0xb8>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d00b      	beq.n	80070e6 <TIM_OC5_SetConfig+0x76>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a16      	ldr	r2, [pc, #88]	@ (800712c <TIM_OC5_SetConfig+0xbc>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d007      	beq.n	80070e6 <TIM_OC5_SetConfig+0x76>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a15      	ldr	r2, [pc, #84]	@ (8007130 <TIM_OC5_SetConfig+0xc0>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d003      	beq.n	80070e6 <TIM_OC5_SetConfig+0x76>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a14      	ldr	r2, [pc, #80]	@ (8007134 <TIM_OC5_SetConfig+0xc4>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d109      	bne.n	80070fa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	021b      	lsls	r3, r3, #8
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	621a      	str	r2, [r3, #32]
}
 8007114:	bf00      	nop
 8007116:	371c      	adds	r7, #28
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	fffeff8f 	.word	0xfffeff8f
 8007124:	40010000 	.word	0x40010000
 8007128:	40010400 	.word	0x40010400
 800712c:	40014000 	.word	0x40014000
 8007130:	40014400 	.word	0x40014400
 8007134:	40014800 	.word	0x40014800

08007138 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800715e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	4b22      	ldr	r3, [pc, #136]	@ (80071ec <TIM_OC6_SetConfig+0xb4>)
 8007164:	4013      	ands	r3, r2
 8007166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	021b      	lsls	r3, r3, #8
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	4313      	orrs	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800717a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	051b      	lsls	r3, r3, #20
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	4313      	orrs	r3, r2
 8007186:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a19      	ldr	r2, [pc, #100]	@ (80071f0 <TIM_OC6_SetConfig+0xb8>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d00f      	beq.n	80071b0 <TIM_OC6_SetConfig+0x78>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a18      	ldr	r2, [pc, #96]	@ (80071f4 <TIM_OC6_SetConfig+0xbc>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d00b      	beq.n	80071b0 <TIM_OC6_SetConfig+0x78>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a17      	ldr	r2, [pc, #92]	@ (80071f8 <TIM_OC6_SetConfig+0xc0>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d007      	beq.n	80071b0 <TIM_OC6_SetConfig+0x78>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a16      	ldr	r2, [pc, #88]	@ (80071fc <TIM_OC6_SetConfig+0xc4>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d003      	beq.n	80071b0 <TIM_OC6_SetConfig+0x78>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a15      	ldr	r2, [pc, #84]	@ (8007200 <TIM_OC6_SetConfig+0xc8>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d109      	bne.n	80071c4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	029b      	lsls	r3, r3, #10
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	621a      	str	r2, [r3, #32]
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	feff8fff 	.word	0xfeff8fff
 80071f0:	40010000 	.word	0x40010000
 80071f4:	40010400 	.word	0x40010400
 80071f8:	40014000 	.word	0x40014000
 80071fc:	40014400 	.word	0x40014400
 8007200:	40014800 	.word	0x40014800

08007204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007214:	2b01      	cmp	r3, #1
 8007216:	d101      	bne.n	800721c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007218:	2302      	movs	r3, #2
 800721a:	e06d      	b.n	80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a30      	ldr	r2, [pc, #192]	@ (8007304 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d004      	beq.n	8007250 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a2f      	ldr	r2, [pc, #188]	@ (8007308 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d108      	bne.n	8007262 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007256:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	4313      	orrs	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007268:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	4313      	orrs	r3, r2
 8007272:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a20      	ldr	r2, [pc, #128]	@ (8007304 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d022      	beq.n	80072cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800728e:	d01d      	beq.n	80072cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a1d      	ldr	r2, [pc, #116]	@ (800730c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d018      	beq.n	80072cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a1c      	ldr	r2, [pc, #112]	@ (8007310 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d013      	beq.n	80072cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a1a      	ldr	r2, [pc, #104]	@ (8007314 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d00e      	beq.n	80072cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a15      	ldr	r2, [pc, #84]	@ (8007308 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d009      	beq.n	80072cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a16      	ldr	r2, [pc, #88]	@ (8007318 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d004      	beq.n	80072cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a15      	ldr	r2, [pc, #84]	@ (800731c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d10c      	bne.n	80072e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	4313      	orrs	r3, r2
 80072dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	40010000 	.word	0x40010000
 8007308:	40010400 	.word	0x40010400
 800730c:	40000400 	.word	0x40000400
 8007310:	40000800 	.word	0x40000800
 8007314:	40000c00 	.word	0x40000c00
 8007318:	40001800 	.word	0x40001800
 800731c:	40014000 	.word	0x40014000

08007320 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007334:	2b01      	cmp	r3, #1
 8007336:	d101      	bne.n	800733c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007338:	2302      	movs	r3, #2
 800733a:	e065      	b.n	8007408 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	4313      	orrs	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	4313      	orrs	r3, r2
 800736c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4313      	orrs	r3, r2
 800737a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	4313      	orrs	r3, r2
 8007388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	4313      	orrs	r3, r2
 8007396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	041b      	lsls	r3, r3, #16
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a16      	ldr	r2, [pc, #88]	@ (8007414 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d004      	beq.n	80073ca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a14      	ldr	r2, [pc, #80]	@ (8007418 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d115      	bne.n	80073f6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d4:	051b      	lsls	r3, r3, #20
 80073d6:	4313      	orrs	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	40010000 	.word	0x40010000
 8007418:	40010400 	.word	0x40010400

0800741c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e042      	b.n	80074f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007470:	2b00      	cmp	r3, #0
 8007472:	d106      	bne.n	8007482 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7fa fc0d 	bl	8001c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2224      	movs	r2, #36	@ 0x24
 8007486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 0201 	bic.w	r2, r2, #1
 8007498:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fe1e 	bl	80080e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 f8b3 	bl	8007614 <UART_SetConfig>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d101      	bne.n	80074b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e01b      	b.n	80074f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80074c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689a      	ldr	r2, [r3, #8]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80074d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f042 0201 	orr.w	r2, r2, #1
 80074e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fe9d 	bl	8008228 <UART_CheckIdleState>
 80074ee:	4603      	mov	r3, r0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08a      	sub	sp, #40	@ 0x28
 80074fc:	af02      	add	r7, sp, #8
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	603b      	str	r3, [r7, #0]
 8007504:	4613      	mov	r3, r2
 8007506:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800750e:	2b20      	cmp	r3, #32
 8007510:	d17b      	bne.n	800760a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d002      	beq.n	800751e <HAL_UART_Transmit+0x26>
 8007518:	88fb      	ldrh	r3, [r7, #6]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e074      	b.n	800760c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2221      	movs	r2, #33	@ 0x21
 800752e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007532:	f7fa fdd5 	bl	80020e0 <HAL_GetTick>
 8007536:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	88fa      	ldrh	r2, [r7, #6]
 800753c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	88fa      	ldrh	r2, [r7, #6]
 8007544:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007550:	d108      	bne.n	8007564 <HAL_UART_Transmit+0x6c>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d104      	bne.n	8007564 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800755a:	2300      	movs	r3, #0
 800755c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	61bb      	str	r3, [r7, #24]
 8007562:	e003      	b.n	800756c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007568:	2300      	movs	r3, #0
 800756a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800756c:	e030      	b.n	80075d0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2200      	movs	r2, #0
 8007576:	2180      	movs	r1, #128	@ 0x80
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f000 feff 	bl	800837c <UART_WaitOnFlagUntilTimeout>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d005      	beq.n	8007590 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2220      	movs	r2, #32
 8007588:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e03d      	b.n	800760c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10b      	bne.n	80075ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	3302      	adds	r3, #2
 80075aa:	61bb      	str	r3, [r7, #24]
 80075ac:	e007      	b.n	80075be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	781a      	ldrb	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	3301      	adds	r3, #1
 80075bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1c8      	bne.n	800756e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	2200      	movs	r2, #0
 80075e4:	2140      	movs	r1, #64	@ 0x40
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f000 fec8 	bl	800837c <UART_WaitOnFlagUntilTimeout>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d005      	beq.n	80075fe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2220      	movs	r2, #32
 80075f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e006      	b.n	800760c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2220      	movs	r2, #32
 8007602:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007606:	2300      	movs	r3, #0
 8007608:	e000      	b.n	800760c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800760a:	2302      	movs	r3, #2
  }
}
 800760c:	4618      	mov	r0, r3
 800760e:	3720      	adds	r7, #32
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007618:	b092      	sub	sp, #72	@ 0x48
 800761a:	af00      	add	r7, sp, #0
 800761c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	431a      	orrs	r2, r3
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	431a      	orrs	r2, r3
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	69db      	ldr	r3, [r3, #28]
 8007638:	4313      	orrs	r3, r2
 800763a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	4bbe      	ldr	r3, [pc, #760]	@ (800793c <UART_SetConfig+0x328>)
 8007644:	4013      	ands	r3, r2
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	6812      	ldr	r2, [r2, #0]
 800764a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800764c:	430b      	orrs	r3, r1
 800764e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	68da      	ldr	r2, [r3, #12]
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	430a      	orrs	r2, r1
 8007664:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4ab3      	ldr	r2, [pc, #716]	@ (8007940 <UART_SetConfig+0x32c>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d004      	beq.n	8007680 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800767c:	4313      	orrs	r3, r2
 800767e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689a      	ldr	r2, [r3, #8]
 8007686:	4baf      	ldr	r3, [pc, #700]	@ (8007944 <UART_SetConfig+0x330>)
 8007688:	4013      	ands	r3, r2
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	6812      	ldr	r2, [r2, #0]
 800768e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007690:	430b      	orrs	r3, r1
 8007692:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800769a:	f023 010f 	bic.w	r1, r3, #15
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4aa6      	ldr	r2, [pc, #664]	@ (8007948 <UART_SetConfig+0x334>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d177      	bne.n	80077a4 <UART_SetConfig+0x190>
 80076b4:	4ba5      	ldr	r3, [pc, #660]	@ (800794c <UART_SetConfig+0x338>)
 80076b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076bc:	2b28      	cmp	r3, #40	@ 0x28
 80076be:	d86d      	bhi.n	800779c <UART_SetConfig+0x188>
 80076c0:	a201      	add	r2, pc, #4	@ (adr r2, 80076c8 <UART_SetConfig+0xb4>)
 80076c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c6:	bf00      	nop
 80076c8:	0800776d 	.word	0x0800776d
 80076cc:	0800779d 	.word	0x0800779d
 80076d0:	0800779d 	.word	0x0800779d
 80076d4:	0800779d 	.word	0x0800779d
 80076d8:	0800779d 	.word	0x0800779d
 80076dc:	0800779d 	.word	0x0800779d
 80076e0:	0800779d 	.word	0x0800779d
 80076e4:	0800779d 	.word	0x0800779d
 80076e8:	08007775 	.word	0x08007775
 80076ec:	0800779d 	.word	0x0800779d
 80076f0:	0800779d 	.word	0x0800779d
 80076f4:	0800779d 	.word	0x0800779d
 80076f8:	0800779d 	.word	0x0800779d
 80076fc:	0800779d 	.word	0x0800779d
 8007700:	0800779d 	.word	0x0800779d
 8007704:	0800779d 	.word	0x0800779d
 8007708:	0800777d 	.word	0x0800777d
 800770c:	0800779d 	.word	0x0800779d
 8007710:	0800779d 	.word	0x0800779d
 8007714:	0800779d 	.word	0x0800779d
 8007718:	0800779d 	.word	0x0800779d
 800771c:	0800779d 	.word	0x0800779d
 8007720:	0800779d 	.word	0x0800779d
 8007724:	0800779d 	.word	0x0800779d
 8007728:	08007785 	.word	0x08007785
 800772c:	0800779d 	.word	0x0800779d
 8007730:	0800779d 	.word	0x0800779d
 8007734:	0800779d 	.word	0x0800779d
 8007738:	0800779d 	.word	0x0800779d
 800773c:	0800779d 	.word	0x0800779d
 8007740:	0800779d 	.word	0x0800779d
 8007744:	0800779d 	.word	0x0800779d
 8007748:	0800778d 	.word	0x0800778d
 800774c:	0800779d 	.word	0x0800779d
 8007750:	0800779d 	.word	0x0800779d
 8007754:	0800779d 	.word	0x0800779d
 8007758:	0800779d 	.word	0x0800779d
 800775c:	0800779d 	.word	0x0800779d
 8007760:	0800779d 	.word	0x0800779d
 8007764:	0800779d 	.word	0x0800779d
 8007768:	08007795 	.word	0x08007795
 800776c:	2301      	movs	r3, #1
 800776e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007772:	e222      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007774:	2304      	movs	r3, #4
 8007776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800777a:	e21e      	b.n	8007bba <UART_SetConfig+0x5a6>
 800777c:	2308      	movs	r3, #8
 800777e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007782:	e21a      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007784:	2310      	movs	r3, #16
 8007786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800778a:	e216      	b.n	8007bba <UART_SetConfig+0x5a6>
 800778c:	2320      	movs	r3, #32
 800778e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007792:	e212      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007794:	2340      	movs	r3, #64	@ 0x40
 8007796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800779a:	e20e      	b.n	8007bba <UART_SetConfig+0x5a6>
 800779c:	2380      	movs	r3, #128	@ 0x80
 800779e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077a2:	e20a      	b.n	8007bba <UART_SetConfig+0x5a6>
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a69      	ldr	r2, [pc, #420]	@ (8007950 <UART_SetConfig+0x33c>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d130      	bne.n	8007810 <UART_SetConfig+0x1fc>
 80077ae:	4b67      	ldr	r3, [pc, #412]	@ (800794c <UART_SetConfig+0x338>)
 80077b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077b2:	f003 0307 	and.w	r3, r3, #7
 80077b6:	2b05      	cmp	r3, #5
 80077b8:	d826      	bhi.n	8007808 <UART_SetConfig+0x1f4>
 80077ba:	a201      	add	r2, pc, #4	@ (adr r2, 80077c0 <UART_SetConfig+0x1ac>)
 80077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c0:	080077d9 	.word	0x080077d9
 80077c4:	080077e1 	.word	0x080077e1
 80077c8:	080077e9 	.word	0x080077e9
 80077cc:	080077f1 	.word	0x080077f1
 80077d0:	080077f9 	.word	0x080077f9
 80077d4:	08007801 	.word	0x08007801
 80077d8:	2300      	movs	r3, #0
 80077da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077de:	e1ec      	b.n	8007bba <UART_SetConfig+0x5a6>
 80077e0:	2304      	movs	r3, #4
 80077e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077e6:	e1e8      	b.n	8007bba <UART_SetConfig+0x5a6>
 80077e8:	2308      	movs	r3, #8
 80077ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ee:	e1e4      	b.n	8007bba <UART_SetConfig+0x5a6>
 80077f0:	2310      	movs	r3, #16
 80077f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077f6:	e1e0      	b.n	8007bba <UART_SetConfig+0x5a6>
 80077f8:	2320      	movs	r3, #32
 80077fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077fe:	e1dc      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007800:	2340      	movs	r3, #64	@ 0x40
 8007802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007806:	e1d8      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007808:	2380      	movs	r3, #128	@ 0x80
 800780a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800780e:	e1d4      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a4f      	ldr	r2, [pc, #316]	@ (8007954 <UART_SetConfig+0x340>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d130      	bne.n	800787c <UART_SetConfig+0x268>
 800781a:	4b4c      	ldr	r3, [pc, #304]	@ (800794c <UART_SetConfig+0x338>)
 800781c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800781e:	f003 0307 	and.w	r3, r3, #7
 8007822:	2b05      	cmp	r3, #5
 8007824:	d826      	bhi.n	8007874 <UART_SetConfig+0x260>
 8007826:	a201      	add	r2, pc, #4	@ (adr r2, 800782c <UART_SetConfig+0x218>)
 8007828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782c:	08007845 	.word	0x08007845
 8007830:	0800784d 	.word	0x0800784d
 8007834:	08007855 	.word	0x08007855
 8007838:	0800785d 	.word	0x0800785d
 800783c:	08007865 	.word	0x08007865
 8007840:	0800786d 	.word	0x0800786d
 8007844:	2300      	movs	r3, #0
 8007846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800784a:	e1b6      	b.n	8007bba <UART_SetConfig+0x5a6>
 800784c:	2304      	movs	r3, #4
 800784e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007852:	e1b2      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007854:	2308      	movs	r3, #8
 8007856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800785a:	e1ae      	b.n	8007bba <UART_SetConfig+0x5a6>
 800785c:	2310      	movs	r3, #16
 800785e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007862:	e1aa      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007864:	2320      	movs	r3, #32
 8007866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800786a:	e1a6      	b.n	8007bba <UART_SetConfig+0x5a6>
 800786c:	2340      	movs	r3, #64	@ 0x40
 800786e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007872:	e1a2      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007874:	2380      	movs	r3, #128	@ 0x80
 8007876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800787a:	e19e      	b.n	8007bba <UART_SetConfig+0x5a6>
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a35      	ldr	r2, [pc, #212]	@ (8007958 <UART_SetConfig+0x344>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d130      	bne.n	80078e8 <UART_SetConfig+0x2d4>
 8007886:	4b31      	ldr	r3, [pc, #196]	@ (800794c <UART_SetConfig+0x338>)
 8007888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800788a:	f003 0307 	and.w	r3, r3, #7
 800788e:	2b05      	cmp	r3, #5
 8007890:	d826      	bhi.n	80078e0 <UART_SetConfig+0x2cc>
 8007892:	a201      	add	r2, pc, #4	@ (adr r2, 8007898 <UART_SetConfig+0x284>)
 8007894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007898:	080078b1 	.word	0x080078b1
 800789c:	080078b9 	.word	0x080078b9
 80078a0:	080078c1 	.word	0x080078c1
 80078a4:	080078c9 	.word	0x080078c9
 80078a8:	080078d1 	.word	0x080078d1
 80078ac:	080078d9 	.word	0x080078d9
 80078b0:	2300      	movs	r3, #0
 80078b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078b6:	e180      	b.n	8007bba <UART_SetConfig+0x5a6>
 80078b8:	2304      	movs	r3, #4
 80078ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078be:	e17c      	b.n	8007bba <UART_SetConfig+0x5a6>
 80078c0:	2308      	movs	r3, #8
 80078c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078c6:	e178      	b.n	8007bba <UART_SetConfig+0x5a6>
 80078c8:	2310      	movs	r3, #16
 80078ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ce:	e174      	b.n	8007bba <UART_SetConfig+0x5a6>
 80078d0:	2320      	movs	r3, #32
 80078d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078d6:	e170      	b.n	8007bba <UART_SetConfig+0x5a6>
 80078d8:	2340      	movs	r3, #64	@ 0x40
 80078da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078de:	e16c      	b.n	8007bba <UART_SetConfig+0x5a6>
 80078e0:	2380      	movs	r3, #128	@ 0x80
 80078e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078e6:	e168      	b.n	8007bba <UART_SetConfig+0x5a6>
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a1b      	ldr	r2, [pc, #108]	@ (800795c <UART_SetConfig+0x348>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d142      	bne.n	8007978 <UART_SetConfig+0x364>
 80078f2:	4b16      	ldr	r3, [pc, #88]	@ (800794c <UART_SetConfig+0x338>)
 80078f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	2b05      	cmp	r3, #5
 80078fc:	d838      	bhi.n	8007970 <UART_SetConfig+0x35c>
 80078fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007904 <UART_SetConfig+0x2f0>)
 8007900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007904:	0800791d 	.word	0x0800791d
 8007908:	08007925 	.word	0x08007925
 800790c:	0800792d 	.word	0x0800792d
 8007910:	08007935 	.word	0x08007935
 8007914:	08007961 	.word	0x08007961
 8007918:	08007969 	.word	0x08007969
 800791c:	2300      	movs	r3, #0
 800791e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007922:	e14a      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007924:	2304      	movs	r3, #4
 8007926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800792a:	e146      	b.n	8007bba <UART_SetConfig+0x5a6>
 800792c:	2308      	movs	r3, #8
 800792e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007932:	e142      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007934:	2310      	movs	r3, #16
 8007936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800793a:	e13e      	b.n	8007bba <UART_SetConfig+0x5a6>
 800793c:	cfff69f3 	.word	0xcfff69f3
 8007940:	58000c00 	.word	0x58000c00
 8007944:	11fff4ff 	.word	0x11fff4ff
 8007948:	40011000 	.word	0x40011000
 800794c:	58024400 	.word	0x58024400
 8007950:	40004400 	.word	0x40004400
 8007954:	40004800 	.word	0x40004800
 8007958:	40004c00 	.word	0x40004c00
 800795c:	40005000 	.word	0x40005000
 8007960:	2320      	movs	r3, #32
 8007962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007966:	e128      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007968:	2340      	movs	r3, #64	@ 0x40
 800796a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796e:	e124      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007970:	2380      	movs	r3, #128	@ 0x80
 8007972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007976:	e120      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4acb      	ldr	r2, [pc, #812]	@ (8007cac <UART_SetConfig+0x698>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d176      	bne.n	8007a70 <UART_SetConfig+0x45c>
 8007982:	4bcb      	ldr	r3, [pc, #812]	@ (8007cb0 <UART_SetConfig+0x69c>)
 8007984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007986:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800798a:	2b28      	cmp	r3, #40	@ 0x28
 800798c:	d86c      	bhi.n	8007a68 <UART_SetConfig+0x454>
 800798e:	a201      	add	r2, pc, #4	@ (adr r2, 8007994 <UART_SetConfig+0x380>)
 8007990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007994:	08007a39 	.word	0x08007a39
 8007998:	08007a69 	.word	0x08007a69
 800799c:	08007a69 	.word	0x08007a69
 80079a0:	08007a69 	.word	0x08007a69
 80079a4:	08007a69 	.word	0x08007a69
 80079a8:	08007a69 	.word	0x08007a69
 80079ac:	08007a69 	.word	0x08007a69
 80079b0:	08007a69 	.word	0x08007a69
 80079b4:	08007a41 	.word	0x08007a41
 80079b8:	08007a69 	.word	0x08007a69
 80079bc:	08007a69 	.word	0x08007a69
 80079c0:	08007a69 	.word	0x08007a69
 80079c4:	08007a69 	.word	0x08007a69
 80079c8:	08007a69 	.word	0x08007a69
 80079cc:	08007a69 	.word	0x08007a69
 80079d0:	08007a69 	.word	0x08007a69
 80079d4:	08007a49 	.word	0x08007a49
 80079d8:	08007a69 	.word	0x08007a69
 80079dc:	08007a69 	.word	0x08007a69
 80079e0:	08007a69 	.word	0x08007a69
 80079e4:	08007a69 	.word	0x08007a69
 80079e8:	08007a69 	.word	0x08007a69
 80079ec:	08007a69 	.word	0x08007a69
 80079f0:	08007a69 	.word	0x08007a69
 80079f4:	08007a51 	.word	0x08007a51
 80079f8:	08007a69 	.word	0x08007a69
 80079fc:	08007a69 	.word	0x08007a69
 8007a00:	08007a69 	.word	0x08007a69
 8007a04:	08007a69 	.word	0x08007a69
 8007a08:	08007a69 	.word	0x08007a69
 8007a0c:	08007a69 	.word	0x08007a69
 8007a10:	08007a69 	.word	0x08007a69
 8007a14:	08007a59 	.word	0x08007a59
 8007a18:	08007a69 	.word	0x08007a69
 8007a1c:	08007a69 	.word	0x08007a69
 8007a20:	08007a69 	.word	0x08007a69
 8007a24:	08007a69 	.word	0x08007a69
 8007a28:	08007a69 	.word	0x08007a69
 8007a2c:	08007a69 	.word	0x08007a69
 8007a30:	08007a69 	.word	0x08007a69
 8007a34:	08007a61 	.word	0x08007a61
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a3e:	e0bc      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007a40:	2304      	movs	r3, #4
 8007a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a46:	e0b8      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007a48:	2308      	movs	r3, #8
 8007a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a4e:	e0b4      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007a50:	2310      	movs	r3, #16
 8007a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a56:	e0b0      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007a58:	2320      	movs	r3, #32
 8007a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a5e:	e0ac      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007a60:	2340      	movs	r3, #64	@ 0x40
 8007a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a66:	e0a8      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007a68:	2380      	movs	r3, #128	@ 0x80
 8007a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a6e:	e0a4      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a8f      	ldr	r2, [pc, #572]	@ (8007cb4 <UART_SetConfig+0x6a0>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d130      	bne.n	8007adc <UART_SetConfig+0x4c8>
 8007a7a:	4b8d      	ldr	r3, [pc, #564]	@ (8007cb0 <UART_SetConfig+0x69c>)
 8007a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a7e:	f003 0307 	and.w	r3, r3, #7
 8007a82:	2b05      	cmp	r3, #5
 8007a84:	d826      	bhi.n	8007ad4 <UART_SetConfig+0x4c0>
 8007a86:	a201      	add	r2, pc, #4	@ (adr r2, 8007a8c <UART_SetConfig+0x478>)
 8007a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8c:	08007aa5 	.word	0x08007aa5
 8007a90:	08007aad 	.word	0x08007aad
 8007a94:	08007ab5 	.word	0x08007ab5
 8007a98:	08007abd 	.word	0x08007abd
 8007a9c:	08007ac5 	.word	0x08007ac5
 8007aa0:	08007acd 	.word	0x08007acd
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aaa:	e086      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007aac:	2304      	movs	r3, #4
 8007aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ab2:	e082      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007ab4:	2308      	movs	r3, #8
 8007ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aba:	e07e      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007abc:	2310      	movs	r3, #16
 8007abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ac2:	e07a      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007ac4:	2320      	movs	r3, #32
 8007ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aca:	e076      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007acc:	2340      	movs	r3, #64	@ 0x40
 8007ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ad2:	e072      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007ad4:	2380      	movs	r3, #128	@ 0x80
 8007ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ada:	e06e      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a75      	ldr	r2, [pc, #468]	@ (8007cb8 <UART_SetConfig+0x6a4>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d130      	bne.n	8007b48 <UART_SetConfig+0x534>
 8007ae6:	4b72      	ldr	r3, [pc, #456]	@ (8007cb0 <UART_SetConfig+0x69c>)
 8007ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aea:	f003 0307 	and.w	r3, r3, #7
 8007aee:	2b05      	cmp	r3, #5
 8007af0:	d826      	bhi.n	8007b40 <UART_SetConfig+0x52c>
 8007af2:	a201      	add	r2, pc, #4	@ (adr r2, 8007af8 <UART_SetConfig+0x4e4>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b11 	.word	0x08007b11
 8007afc:	08007b19 	.word	0x08007b19
 8007b00:	08007b21 	.word	0x08007b21
 8007b04:	08007b29 	.word	0x08007b29
 8007b08:	08007b31 	.word	0x08007b31
 8007b0c:	08007b39 	.word	0x08007b39
 8007b10:	2300      	movs	r3, #0
 8007b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b16:	e050      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007b18:	2304      	movs	r3, #4
 8007b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b1e:	e04c      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007b20:	2308      	movs	r3, #8
 8007b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b26:	e048      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007b28:	2310      	movs	r3, #16
 8007b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b2e:	e044      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007b30:	2320      	movs	r3, #32
 8007b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b36:	e040      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007b38:	2340      	movs	r3, #64	@ 0x40
 8007b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b3e:	e03c      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007b40:	2380      	movs	r3, #128	@ 0x80
 8007b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b46:	e038      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a5b      	ldr	r2, [pc, #364]	@ (8007cbc <UART_SetConfig+0x6a8>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d130      	bne.n	8007bb4 <UART_SetConfig+0x5a0>
 8007b52:	4b57      	ldr	r3, [pc, #348]	@ (8007cb0 <UART_SetConfig+0x69c>)
 8007b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b56:	f003 0307 	and.w	r3, r3, #7
 8007b5a:	2b05      	cmp	r3, #5
 8007b5c:	d826      	bhi.n	8007bac <UART_SetConfig+0x598>
 8007b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b64 <UART_SetConfig+0x550>)
 8007b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b64:	08007b7d 	.word	0x08007b7d
 8007b68:	08007b85 	.word	0x08007b85
 8007b6c:	08007b8d 	.word	0x08007b8d
 8007b70:	08007b95 	.word	0x08007b95
 8007b74:	08007b9d 	.word	0x08007b9d
 8007b78:	08007ba5 	.word	0x08007ba5
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b82:	e01a      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007b84:	2304      	movs	r3, #4
 8007b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b8a:	e016      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007b8c:	2308      	movs	r3, #8
 8007b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b92:	e012      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007b94:	2310      	movs	r3, #16
 8007b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b9a:	e00e      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007b9c:	2320      	movs	r3, #32
 8007b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ba2:	e00a      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007ba4:	2340      	movs	r3, #64	@ 0x40
 8007ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007baa:	e006      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007bac:	2380      	movs	r3, #128	@ 0x80
 8007bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bb2:	e002      	b.n	8007bba <UART_SetConfig+0x5a6>
 8007bb4:	2380      	movs	r3, #128	@ 0x80
 8007bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a3f      	ldr	r2, [pc, #252]	@ (8007cbc <UART_SetConfig+0x6a8>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	f040 80f8 	bne.w	8007db6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bc6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007bca:	2b20      	cmp	r3, #32
 8007bcc:	dc46      	bgt.n	8007c5c <UART_SetConfig+0x648>
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	f2c0 8082 	blt.w	8007cd8 <UART_SetConfig+0x6c4>
 8007bd4:	3b02      	subs	r3, #2
 8007bd6:	2b1e      	cmp	r3, #30
 8007bd8:	d87e      	bhi.n	8007cd8 <UART_SetConfig+0x6c4>
 8007bda:	a201      	add	r2, pc, #4	@ (adr r2, 8007be0 <UART_SetConfig+0x5cc>)
 8007bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be0:	08007c63 	.word	0x08007c63
 8007be4:	08007cd9 	.word	0x08007cd9
 8007be8:	08007c6b 	.word	0x08007c6b
 8007bec:	08007cd9 	.word	0x08007cd9
 8007bf0:	08007cd9 	.word	0x08007cd9
 8007bf4:	08007cd9 	.word	0x08007cd9
 8007bf8:	08007c7b 	.word	0x08007c7b
 8007bfc:	08007cd9 	.word	0x08007cd9
 8007c00:	08007cd9 	.word	0x08007cd9
 8007c04:	08007cd9 	.word	0x08007cd9
 8007c08:	08007cd9 	.word	0x08007cd9
 8007c0c:	08007cd9 	.word	0x08007cd9
 8007c10:	08007cd9 	.word	0x08007cd9
 8007c14:	08007cd9 	.word	0x08007cd9
 8007c18:	08007c8b 	.word	0x08007c8b
 8007c1c:	08007cd9 	.word	0x08007cd9
 8007c20:	08007cd9 	.word	0x08007cd9
 8007c24:	08007cd9 	.word	0x08007cd9
 8007c28:	08007cd9 	.word	0x08007cd9
 8007c2c:	08007cd9 	.word	0x08007cd9
 8007c30:	08007cd9 	.word	0x08007cd9
 8007c34:	08007cd9 	.word	0x08007cd9
 8007c38:	08007cd9 	.word	0x08007cd9
 8007c3c:	08007cd9 	.word	0x08007cd9
 8007c40:	08007cd9 	.word	0x08007cd9
 8007c44:	08007cd9 	.word	0x08007cd9
 8007c48:	08007cd9 	.word	0x08007cd9
 8007c4c:	08007cd9 	.word	0x08007cd9
 8007c50:	08007cd9 	.word	0x08007cd9
 8007c54:	08007cd9 	.word	0x08007cd9
 8007c58:	08007ccb 	.word	0x08007ccb
 8007c5c:	2b40      	cmp	r3, #64	@ 0x40
 8007c5e:	d037      	beq.n	8007cd0 <UART_SetConfig+0x6bc>
 8007c60:	e03a      	b.n	8007cd8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007c62:	f7fd f899 	bl	8004d98 <HAL_RCCEx_GetD3PCLK1Freq>
 8007c66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c68:	e03c      	b.n	8007ce4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fd f8a8 	bl	8004dc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c78:	e034      	b.n	8007ce4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c7a:	f107 0318 	add.w	r3, r7, #24
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fd f9f4 	bl	800506c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c88:	e02c      	b.n	8007ce4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c8a:	4b09      	ldr	r3, [pc, #36]	@ (8007cb0 <UART_SetConfig+0x69c>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0320 	and.w	r3, r3, #32
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d016      	beq.n	8007cc4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c96:	4b06      	ldr	r3, [pc, #24]	@ (8007cb0 <UART_SetConfig+0x69c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	08db      	lsrs	r3, r3, #3
 8007c9c:	f003 0303 	and.w	r3, r3, #3
 8007ca0:	4a07      	ldr	r2, [pc, #28]	@ (8007cc0 <UART_SetConfig+0x6ac>)
 8007ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ca8:	e01c      	b.n	8007ce4 <UART_SetConfig+0x6d0>
 8007caa:	bf00      	nop
 8007cac:	40011400 	.word	0x40011400
 8007cb0:	58024400 	.word	0x58024400
 8007cb4:	40007800 	.word	0x40007800
 8007cb8:	40007c00 	.word	0x40007c00
 8007cbc:	58000c00 	.word	0x58000c00
 8007cc0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007cc4:	4b9d      	ldr	r3, [pc, #628]	@ (8007f3c <UART_SetConfig+0x928>)
 8007cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cc8:	e00c      	b.n	8007ce4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cca:	4b9d      	ldr	r3, [pc, #628]	@ (8007f40 <UART_SetConfig+0x92c>)
 8007ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cce:	e009      	b.n	8007ce4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cd6:	e005      	b.n	8007ce4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007ce2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f000 81de 	beq.w	80080a8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf0:	4a94      	ldr	r2, [pc, #592]	@ (8007f44 <UART_SetConfig+0x930>)
 8007cf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cfe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	4613      	mov	r3, r2
 8007d06:	005b      	lsls	r3, r3, #1
 8007d08:	4413      	add	r3, r2
 8007d0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d305      	bcc.n	8007d1c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d903      	bls.n	8007d24 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d22:	e1c1      	b.n	80080a8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d26:	2200      	movs	r2, #0
 8007d28:	60bb      	str	r3, [r7, #8]
 8007d2a:	60fa      	str	r2, [r7, #12]
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d30:	4a84      	ldr	r2, [pc, #528]	@ (8007f44 <UART_SetConfig+0x930>)
 8007d32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	2200      	movs	r2, #0
 8007d3a:	603b      	str	r3, [r7, #0]
 8007d3c:	607a      	str	r2, [r7, #4]
 8007d3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d46:	f7f8 fb1b 	bl	8000380 <__aeabi_uldivmod>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	4610      	mov	r0, r2
 8007d50:	4619      	mov	r1, r3
 8007d52:	f04f 0200 	mov.w	r2, #0
 8007d56:	f04f 0300 	mov.w	r3, #0
 8007d5a:	020b      	lsls	r3, r1, #8
 8007d5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d60:	0202      	lsls	r2, r0, #8
 8007d62:	6979      	ldr	r1, [r7, #20]
 8007d64:	6849      	ldr	r1, [r1, #4]
 8007d66:	0849      	lsrs	r1, r1, #1
 8007d68:	2000      	movs	r0, #0
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	4605      	mov	r5, r0
 8007d6e:	eb12 0804 	adds.w	r8, r2, r4
 8007d72:	eb43 0905 	adc.w	r9, r3, r5
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	469a      	mov	sl, r3
 8007d7e:	4693      	mov	fp, r2
 8007d80:	4652      	mov	r2, sl
 8007d82:	465b      	mov	r3, fp
 8007d84:	4640      	mov	r0, r8
 8007d86:	4649      	mov	r1, r9
 8007d88:	f7f8 fafa 	bl	8000380 <__aeabi_uldivmod>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	4613      	mov	r3, r2
 8007d92:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d9a:	d308      	bcc.n	8007dae <UART_SetConfig+0x79a>
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007da2:	d204      	bcs.n	8007dae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007daa:	60da      	str	r2, [r3, #12]
 8007dac:	e17c      	b.n	80080a8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007db4:	e178      	b.n	80080a8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dbe:	f040 80c5 	bne.w	8007f4c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007dc2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007dc6:	2b20      	cmp	r3, #32
 8007dc8:	dc48      	bgt.n	8007e5c <UART_SetConfig+0x848>
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	db7b      	blt.n	8007ec6 <UART_SetConfig+0x8b2>
 8007dce:	2b20      	cmp	r3, #32
 8007dd0:	d879      	bhi.n	8007ec6 <UART_SetConfig+0x8b2>
 8007dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8007dd8 <UART_SetConfig+0x7c4>)
 8007dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd8:	08007e63 	.word	0x08007e63
 8007ddc:	08007e6b 	.word	0x08007e6b
 8007de0:	08007ec7 	.word	0x08007ec7
 8007de4:	08007ec7 	.word	0x08007ec7
 8007de8:	08007e73 	.word	0x08007e73
 8007dec:	08007ec7 	.word	0x08007ec7
 8007df0:	08007ec7 	.word	0x08007ec7
 8007df4:	08007ec7 	.word	0x08007ec7
 8007df8:	08007e83 	.word	0x08007e83
 8007dfc:	08007ec7 	.word	0x08007ec7
 8007e00:	08007ec7 	.word	0x08007ec7
 8007e04:	08007ec7 	.word	0x08007ec7
 8007e08:	08007ec7 	.word	0x08007ec7
 8007e0c:	08007ec7 	.word	0x08007ec7
 8007e10:	08007ec7 	.word	0x08007ec7
 8007e14:	08007ec7 	.word	0x08007ec7
 8007e18:	08007e93 	.word	0x08007e93
 8007e1c:	08007ec7 	.word	0x08007ec7
 8007e20:	08007ec7 	.word	0x08007ec7
 8007e24:	08007ec7 	.word	0x08007ec7
 8007e28:	08007ec7 	.word	0x08007ec7
 8007e2c:	08007ec7 	.word	0x08007ec7
 8007e30:	08007ec7 	.word	0x08007ec7
 8007e34:	08007ec7 	.word	0x08007ec7
 8007e38:	08007ec7 	.word	0x08007ec7
 8007e3c:	08007ec7 	.word	0x08007ec7
 8007e40:	08007ec7 	.word	0x08007ec7
 8007e44:	08007ec7 	.word	0x08007ec7
 8007e48:	08007ec7 	.word	0x08007ec7
 8007e4c:	08007ec7 	.word	0x08007ec7
 8007e50:	08007ec7 	.word	0x08007ec7
 8007e54:	08007ec7 	.word	0x08007ec7
 8007e58:	08007eb9 	.word	0x08007eb9
 8007e5c:	2b40      	cmp	r3, #64	@ 0x40
 8007e5e:	d02e      	beq.n	8007ebe <UART_SetConfig+0x8aa>
 8007e60:	e031      	b.n	8007ec6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e62:	f7fb fce1 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 8007e66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e68:	e033      	b.n	8007ed2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e6a:	f7fb fcf3 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 8007e6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e70:	e02f      	b.n	8007ed2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fc ffa4 	bl	8004dc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e80:	e027      	b.n	8007ed2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e82:	f107 0318 	add.w	r3, r7, #24
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fd f8f0 	bl	800506c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e90:	e01f      	b.n	8007ed2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e92:	4b2d      	ldr	r3, [pc, #180]	@ (8007f48 <UART_SetConfig+0x934>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0320 	and.w	r3, r3, #32
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d009      	beq.n	8007eb2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8007f48 <UART_SetConfig+0x934>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	08db      	lsrs	r3, r3, #3
 8007ea4:	f003 0303 	and.w	r3, r3, #3
 8007ea8:	4a24      	ldr	r2, [pc, #144]	@ (8007f3c <UART_SetConfig+0x928>)
 8007eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8007eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007eb0:	e00f      	b.n	8007ed2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007eb2:	4b22      	ldr	r3, [pc, #136]	@ (8007f3c <UART_SetConfig+0x928>)
 8007eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eb6:	e00c      	b.n	8007ed2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007eb8:	4b21      	ldr	r3, [pc, #132]	@ (8007f40 <UART_SetConfig+0x92c>)
 8007eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ebc:	e009      	b.n	8007ed2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ec4:	e005      	b.n	8007ed2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007ed0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 80e7 	beq.w	80080a8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ede:	4a19      	ldr	r2, [pc, #100]	@ (8007f44 <UART_SetConfig+0x930>)
 8007ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ee8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007eec:	005a      	lsls	r2, r3, #1
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	085b      	lsrs	r3, r3, #1
 8007ef4:	441a      	add	r2, r3
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f02:	2b0f      	cmp	r3, #15
 8007f04:	d916      	bls.n	8007f34 <UART_SetConfig+0x920>
 8007f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f0c:	d212      	bcs.n	8007f34 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	f023 030f 	bic.w	r3, r3, #15
 8007f16:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1a:	085b      	lsrs	r3, r3, #1
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	f003 0307 	and.w	r3, r3, #7
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007f26:	4313      	orrs	r3, r2
 8007f28:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007f30:	60da      	str	r2, [r3, #12]
 8007f32:	e0b9      	b.n	80080a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007f3a:	e0b5      	b.n	80080a8 <UART_SetConfig+0xa94>
 8007f3c:	03d09000 	.word	0x03d09000
 8007f40:	003d0900 	.word	0x003d0900
 8007f44:	0800de78 	.word	0x0800de78
 8007f48:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f4c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007f50:	2b20      	cmp	r3, #32
 8007f52:	dc49      	bgt.n	8007fe8 <UART_SetConfig+0x9d4>
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	db7c      	blt.n	8008052 <UART_SetConfig+0xa3e>
 8007f58:	2b20      	cmp	r3, #32
 8007f5a:	d87a      	bhi.n	8008052 <UART_SetConfig+0xa3e>
 8007f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8007f64 <UART_SetConfig+0x950>)
 8007f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f62:	bf00      	nop
 8007f64:	08007fef 	.word	0x08007fef
 8007f68:	08007ff7 	.word	0x08007ff7
 8007f6c:	08008053 	.word	0x08008053
 8007f70:	08008053 	.word	0x08008053
 8007f74:	08007fff 	.word	0x08007fff
 8007f78:	08008053 	.word	0x08008053
 8007f7c:	08008053 	.word	0x08008053
 8007f80:	08008053 	.word	0x08008053
 8007f84:	0800800f 	.word	0x0800800f
 8007f88:	08008053 	.word	0x08008053
 8007f8c:	08008053 	.word	0x08008053
 8007f90:	08008053 	.word	0x08008053
 8007f94:	08008053 	.word	0x08008053
 8007f98:	08008053 	.word	0x08008053
 8007f9c:	08008053 	.word	0x08008053
 8007fa0:	08008053 	.word	0x08008053
 8007fa4:	0800801f 	.word	0x0800801f
 8007fa8:	08008053 	.word	0x08008053
 8007fac:	08008053 	.word	0x08008053
 8007fb0:	08008053 	.word	0x08008053
 8007fb4:	08008053 	.word	0x08008053
 8007fb8:	08008053 	.word	0x08008053
 8007fbc:	08008053 	.word	0x08008053
 8007fc0:	08008053 	.word	0x08008053
 8007fc4:	08008053 	.word	0x08008053
 8007fc8:	08008053 	.word	0x08008053
 8007fcc:	08008053 	.word	0x08008053
 8007fd0:	08008053 	.word	0x08008053
 8007fd4:	08008053 	.word	0x08008053
 8007fd8:	08008053 	.word	0x08008053
 8007fdc:	08008053 	.word	0x08008053
 8007fe0:	08008053 	.word	0x08008053
 8007fe4:	08008045 	.word	0x08008045
 8007fe8:	2b40      	cmp	r3, #64	@ 0x40
 8007fea:	d02e      	beq.n	800804a <UART_SetConfig+0xa36>
 8007fec:	e031      	b.n	8008052 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fee:	f7fb fc1b 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 8007ff2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ff4:	e033      	b.n	800805e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ff6:	f7fb fc2d 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 8007ffa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ffc:	e02f      	b.n	800805e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ffe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008002:	4618      	mov	r0, r3
 8008004:	f7fc fede 	bl	8004dc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800800c:	e027      	b.n	800805e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800800e:	f107 0318 	add.w	r3, r7, #24
 8008012:	4618      	mov	r0, r3
 8008014:	f7fd f82a 	bl	800506c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800801c:	e01f      	b.n	800805e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800801e:	4b2d      	ldr	r3, [pc, #180]	@ (80080d4 <UART_SetConfig+0xac0>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0320 	and.w	r3, r3, #32
 8008026:	2b00      	cmp	r3, #0
 8008028:	d009      	beq.n	800803e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800802a:	4b2a      	ldr	r3, [pc, #168]	@ (80080d4 <UART_SetConfig+0xac0>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	08db      	lsrs	r3, r3, #3
 8008030:	f003 0303 	and.w	r3, r3, #3
 8008034:	4a28      	ldr	r2, [pc, #160]	@ (80080d8 <UART_SetConfig+0xac4>)
 8008036:	fa22 f303 	lsr.w	r3, r2, r3
 800803a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800803c:	e00f      	b.n	800805e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800803e:	4b26      	ldr	r3, [pc, #152]	@ (80080d8 <UART_SetConfig+0xac4>)
 8008040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008042:	e00c      	b.n	800805e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008044:	4b25      	ldr	r3, [pc, #148]	@ (80080dc <UART_SetConfig+0xac8>)
 8008046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008048:	e009      	b.n	800805e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800804a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800804e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008050:	e005      	b.n	800805e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008052:	2300      	movs	r3, #0
 8008054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800805c:	bf00      	nop
    }

    if (pclk != 0U)
 800805e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008060:	2b00      	cmp	r3, #0
 8008062:	d021      	beq.n	80080a8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008068:	4a1d      	ldr	r2, [pc, #116]	@ (80080e0 <UART_SetConfig+0xacc>)
 800806a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800806e:	461a      	mov	r2, r3
 8008070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008072:	fbb3 f2f2 	udiv	r2, r3, r2
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	085b      	lsrs	r3, r3, #1
 800807c:	441a      	add	r2, r3
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	fbb2 f3f3 	udiv	r3, r2, r3
 8008086:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800808a:	2b0f      	cmp	r3, #15
 800808c:	d909      	bls.n	80080a2 <UART_SetConfig+0xa8e>
 800808e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008094:	d205      	bcs.n	80080a2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008098:	b29a      	uxth	r2, r3
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	60da      	str	r2, [r3, #12]
 80080a0:	e002      	b.n	80080a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	2200      	movs	r2, #0
 80080bc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	2200      	movs	r2, #0
 80080c2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80080c4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3748      	adds	r7, #72	@ 0x48
 80080cc:	46bd      	mov	sp, r7
 80080ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080d2:	bf00      	nop
 80080d4:	58024400 	.word	0x58024400
 80080d8:	03d09000 	.word	0x03d09000
 80080dc:	003d0900 	.word	0x003d0900
 80080e0:	0800de78 	.word	0x0800de78

080080e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f0:	f003 0308 	and.w	r3, r3, #8
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00a      	beq.n	800810e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	430a      	orrs	r2, r1
 800810c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00a      	beq.n	8008130 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	430a      	orrs	r2, r1
 800812e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008134:	f003 0302 	and.w	r3, r3, #2
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00a      	beq.n	8008152 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	430a      	orrs	r2, r1
 8008150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008156:	f003 0304 	and.w	r3, r3, #4
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00a      	beq.n	8008174 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	430a      	orrs	r2, r1
 8008172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008178:	f003 0310 	and.w	r3, r3, #16
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00a      	beq.n	8008196 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	430a      	orrs	r2, r1
 8008194:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800819a:	f003 0320 	and.w	r3, r3, #32
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00a      	beq.n	80081b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	430a      	orrs	r2, r1
 80081b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d01a      	beq.n	80081fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	430a      	orrs	r2, r1
 80081d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081e2:	d10a      	bne.n	80081fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	430a      	orrs	r2, r1
 80081f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00a      	beq.n	800821c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	430a      	orrs	r2, r1
 800821a:	605a      	str	r2, [r3, #4]
  }
}
 800821c:	bf00      	nop
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b098      	sub	sp, #96	@ 0x60
 800822c:	af02      	add	r7, sp, #8
 800822e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008238:	f7f9 ff52 	bl	80020e0 <HAL_GetTick>
 800823c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0308 	and.w	r3, r3, #8
 8008248:	2b08      	cmp	r3, #8
 800824a:	d12f      	bne.n	80082ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800824c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008254:	2200      	movs	r2, #0
 8008256:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f88e 	bl	800837c <UART_WaitOnFlagUntilTimeout>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d022      	beq.n	80082ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800826e:	e853 3f00 	ldrex	r3, [r3]
 8008272:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008276:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800827a:	653b      	str	r3, [r7, #80]	@ 0x50
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	461a      	mov	r2, r3
 8008282:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008284:	647b      	str	r3, [r7, #68]	@ 0x44
 8008286:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008288:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800828a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800828c:	e841 2300 	strex	r3, r2, [r1]
 8008290:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008294:	2b00      	cmp	r3, #0
 8008296:	d1e6      	bne.n	8008266 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2220      	movs	r2, #32
 800829c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082a8:	2303      	movs	r3, #3
 80082aa:	e063      	b.n	8008374 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0304 	and.w	r3, r3, #4
 80082b6:	2b04      	cmp	r3, #4
 80082b8:	d149      	bne.n	800834e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082c2:	2200      	movs	r2, #0
 80082c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f857 	bl	800837c <UART_WaitOnFlagUntilTimeout>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d03c      	beq.n	800834e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082dc:	e853 3f00 	ldrex	r3, [r3]
 80082e0:	623b      	str	r3, [r7, #32]
   return(result);
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	461a      	mov	r2, r3
 80082f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80082f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082fa:	e841 2300 	strex	r3, r2, [r1]
 80082fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1e6      	bne.n	80082d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	3308      	adds	r3, #8
 800830c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	e853 3f00 	ldrex	r3, [r3]
 8008314:	60fb      	str	r3, [r7, #12]
   return(result);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f023 0301 	bic.w	r3, r3, #1
 800831c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	3308      	adds	r3, #8
 8008324:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008326:	61fa      	str	r2, [r7, #28]
 8008328:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832a:	69b9      	ldr	r1, [r7, #24]
 800832c:	69fa      	ldr	r2, [r7, #28]
 800832e:	e841 2300 	strex	r3, r2, [r1]
 8008332:	617b      	str	r3, [r7, #20]
   return(result);
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1e5      	bne.n	8008306 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2220      	movs	r2, #32
 800833e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e012      	b.n	8008374 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2220      	movs	r2, #32
 8008352:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2220      	movs	r2, #32
 800835a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3758      	adds	r7, #88	@ 0x58
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	603b      	str	r3, [r7, #0]
 8008388:	4613      	mov	r3, r2
 800838a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800838c:	e04f      	b.n	800842e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008394:	d04b      	beq.n	800842e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008396:	f7f9 fea3 	bl	80020e0 <HAL_GetTick>
 800839a:	4602      	mov	r2, r0
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	69ba      	ldr	r2, [r7, #24]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d302      	bcc.n	80083ac <UART_WaitOnFlagUntilTimeout+0x30>
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d101      	bne.n	80083b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80083ac:	2303      	movs	r3, #3
 80083ae:	e04e      	b.n	800844e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0304 	and.w	r3, r3, #4
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d037      	beq.n	800842e <UART_WaitOnFlagUntilTimeout+0xb2>
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2b80      	cmp	r3, #128	@ 0x80
 80083c2:	d034      	beq.n	800842e <UART_WaitOnFlagUntilTimeout+0xb2>
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	2b40      	cmp	r3, #64	@ 0x40
 80083c8:	d031      	beq.n	800842e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	f003 0308 	and.w	r3, r3, #8
 80083d4:	2b08      	cmp	r3, #8
 80083d6:	d110      	bne.n	80083fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2208      	movs	r2, #8
 80083de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f000 f839 	bl	8008458 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2208      	movs	r2, #8
 80083ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e029      	b.n	800844e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008404:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008408:	d111      	bne.n	800842e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 f81f 	bl	8008458 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2220      	movs	r2, #32
 800841e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e00f      	b.n	800844e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69da      	ldr	r2, [r3, #28]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	4013      	ands	r3, r2
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	429a      	cmp	r2, r3
 800843c:	bf0c      	ite	eq
 800843e:	2301      	moveq	r3, #1
 8008440:	2300      	movne	r3, #0
 8008442:	b2db      	uxtb	r3, r3
 8008444:	461a      	mov	r2, r3
 8008446:	79fb      	ldrb	r3, [r7, #7]
 8008448:	429a      	cmp	r2, r3
 800844a:	d0a0      	beq.n	800838e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008458:	b480      	push	{r7}
 800845a:	b095      	sub	sp, #84	@ 0x54
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008468:	e853 3f00 	ldrex	r3, [r3]
 800846c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800846e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008470:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008474:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	461a      	mov	r2, r3
 800847c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800847e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008480:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008482:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008484:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008486:	e841 2300 	strex	r3, r2, [r1]
 800848a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800848c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1e6      	bne.n	8008460 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3308      	adds	r3, #8
 8008498:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849a:	6a3b      	ldr	r3, [r7, #32]
 800849c:	e853 3f00 	ldrex	r3, [r3]
 80084a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80084a2:	69fa      	ldr	r2, [r7, #28]
 80084a4:	4b1e      	ldr	r3, [pc, #120]	@ (8008520 <UART_EndRxTransfer+0xc8>)
 80084a6:	4013      	ands	r3, r2
 80084a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	3308      	adds	r3, #8
 80084b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80084b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084ba:	e841 2300 	strex	r3, r2, [r1]
 80084be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1e5      	bne.n	8008492 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d118      	bne.n	8008500 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	e853 3f00 	ldrex	r3, [r3]
 80084da:	60bb      	str	r3, [r7, #8]
   return(result);
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	f023 0310 	bic.w	r3, r3, #16
 80084e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	461a      	mov	r2, r3
 80084ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084ec:	61bb      	str	r3, [r7, #24]
 80084ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f0:	6979      	ldr	r1, [r7, #20]
 80084f2:	69ba      	ldr	r2, [r7, #24]
 80084f4:	e841 2300 	strex	r3, r2, [r1]
 80084f8:	613b      	str	r3, [r7, #16]
   return(result);
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e6      	bne.n	80084ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2220      	movs	r2, #32
 8008504:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008514:	bf00      	nop
 8008516:	3754      	adds	r7, #84	@ 0x54
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr
 8008520:	effffffe 	.word	0xeffffffe

08008524 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008532:	2b01      	cmp	r3, #1
 8008534:	d101      	bne.n	800853a <HAL_UARTEx_DisableFifoMode+0x16>
 8008536:	2302      	movs	r3, #2
 8008538:	e027      	b.n	800858a <HAL_UARTEx_DisableFifoMode+0x66>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2224      	movs	r2, #36	@ 0x24
 8008546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f022 0201 	bic.w	r2, r2, #1
 8008560:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008568:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2220      	movs	r2, #32
 800857c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b084      	sub	sp, #16
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d101      	bne.n	80085ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80085aa:	2302      	movs	r3, #2
 80085ac:	e02d      	b.n	800860a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2224      	movs	r2, #36	@ 0x24
 80085ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f022 0201 	bic.w	r2, r2, #1
 80085d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	683a      	ldr	r2, [r7, #0]
 80085e6:	430a      	orrs	r2, r1
 80085e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f850 	bl	8008690 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2220      	movs	r2, #32
 80085fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b084      	sub	sp, #16
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008622:	2b01      	cmp	r3, #1
 8008624:	d101      	bne.n	800862a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008626:	2302      	movs	r3, #2
 8008628:	e02d      	b.n	8008686 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2224      	movs	r2, #36	@ 0x24
 8008636:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f022 0201 	bic.w	r2, r2, #1
 8008650:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	683a      	ldr	r2, [r7, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f812 	bl	8008690 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2220      	movs	r2, #32
 8008678:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
	...

08008690 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800869c:	2b00      	cmp	r3, #0
 800869e:	d108      	bne.n	80086b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80086b0:	e031      	b.n	8008716 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80086b2:	2310      	movs	r3, #16
 80086b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80086b6:	2310      	movs	r3, #16
 80086b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	0e5b      	lsrs	r3, r3, #25
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	f003 0307 	and.w	r3, r3, #7
 80086c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	0f5b      	lsrs	r3, r3, #29
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	f003 0307 	and.w	r3, r3, #7
 80086d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086da:	7bbb      	ldrb	r3, [r7, #14]
 80086dc:	7b3a      	ldrb	r2, [r7, #12]
 80086de:	4911      	ldr	r1, [pc, #68]	@ (8008724 <UARTEx_SetNbDataToProcess+0x94>)
 80086e0:	5c8a      	ldrb	r2, [r1, r2]
 80086e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80086e6:	7b3a      	ldrb	r2, [r7, #12]
 80086e8:	490f      	ldr	r1, [pc, #60]	@ (8008728 <UARTEx_SetNbDataToProcess+0x98>)
 80086ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086f8:	7bfb      	ldrb	r3, [r7, #15]
 80086fa:	7b7a      	ldrb	r2, [r7, #13]
 80086fc:	4909      	ldr	r1, [pc, #36]	@ (8008724 <UARTEx_SetNbDataToProcess+0x94>)
 80086fe:	5c8a      	ldrb	r2, [r1, r2]
 8008700:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008704:	7b7a      	ldrb	r2, [r7, #13]
 8008706:	4908      	ldr	r1, [pc, #32]	@ (8008728 <UARTEx_SetNbDataToProcess+0x98>)
 8008708:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800870a:	fb93 f3f2 	sdiv	r3, r3, r2
 800870e:	b29a      	uxth	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008716:	bf00      	nop
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	0800de90 	.word	0x0800de90
 8008728:	0800de98 	.word	0x0800de98

0800872c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800872c:	b580      	push	{r7, lr}
 800872e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008730:	4b05      	ldr	r3, [pc, #20]	@ (8008748 <SysTick_Handler+0x1c>)
 8008732:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008734:	f001 feaa 	bl	800a48c <xTaskGetSchedulerState>
 8008738:	4603      	mov	r3, r0
 800873a:	2b01      	cmp	r3, #1
 800873c:	d001      	beq.n	8008742 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800873e:	f000 fb6b 	bl	8008e18 <xPortSysTickHandler>
  }
}
 8008742:	bf00      	nop
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	e000e010 	.word	0xe000e010

0800874c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	4a07      	ldr	r2, [pc, #28]	@ (8008778 <vApplicationGetIdleTaskMemory+0x2c>)
 800875c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	4a06      	ldr	r2, [pc, #24]	@ (800877c <vApplicationGetIdleTaskMemory+0x30>)
 8008762:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2280      	movs	r2, #128	@ 0x80
 8008768:	601a      	str	r2, [r3, #0]
}
 800876a:	bf00      	nop
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	24000354 	.word	0x24000354
 800877c:	240003b0 	.word	0x240003b0

08008780 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	4a07      	ldr	r2, [pc, #28]	@ (80087ac <vApplicationGetTimerTaskMemory+0x2c>)
 8008790:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	4a06      	ldr	r2, [pc, #24]	@ (80087b0 <vApplicationGetTimerTaskMemory+0x30>)
 8008796:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800879e:	601a      	str	r2, [r3, #0]
}
 80087a0:	bf00      	nop
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	240005b0 	.word	0x240005b0
 80087b0:	2400060c 	.word	0x2400060c

080087b4 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d04f      	beq.n	8008866 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80087c6:	2308      	movs	r3, #8
 80087c8:	425b      	negs	r3, r3
 80087ca:	697a      	ldr	r2, [r7, #20]
 80087cc:	4413      	add	r3, r2
 80087ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	4b25      	ldr	r3, [pc, #148]	@ (8008870 <vPortFree+0xbc>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4013      	ands	r3, r2
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10b      	bne.n	80087fa <vPortFree+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80087f4:	bf00      	nop
 80087f6:	bf00      	nop
 80087f8:	e7fd      	b.n	80087f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00b      	beq.n	800881a <vPortFree+0x66>
	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	60bb      	str	r3, [r7, #8]
}
 8008814:	bf00      	nop
 8008816:	bf00      	nop
 8008818:	e7fd      	b.n	8008816 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	685a      	ldr	r2, [r3, #4]
 800881e:	4b14      	ldr	r3, [pc, #80]	@ (8008870 <vPortFree+0xbc>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4013      	ands	r3, r2
 8008824:	2b00      	cmp	r3, #0
 8008826:	d01e      	beq.n	8008866 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d11a      	bne.n	8008866 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	685a      	ldr	r2, [r3, #4]
 8008834:	4b0e      	ldr	r3, [pc, #56]	@ (8008870 <vPortFree+0xbc>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	43db      	mvns	r3, r3
 800883a:	401a      	ands	r2, r3
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008840:	f001 fa3e 	bl	8009cc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	685a      	ldr	r2, [r3, #4]
 8008848:	4b0a      	ldr	r3, [pc, #40]	@ (8008874 <vPortFree+0xc0>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4413      	add	r3, r2
 800884e:	4a09      	ldr	r2, [pc, #36]	@ (8008874 <vPortFree+0xc0>)
 8008850:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008852:	6938      	ldr	r0, [r7, #16]
 8008854:	f000 f812 	bl	800887c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008858:	4b07      	ldr	r3, [pc, #28]	@ (8008878 <vPortFree+0xc4>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3301      	adds	r3, #1
 800885e:	4a06      	ldr	r2, [pc, #24]	@ (8008878 <vPortFree+0xc4>)
 8008860:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008862:	f001 fa3b 	bl	8009cdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008866:	bf00      	nop
 8008868:	3718      	adds	r7, #24
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	24000a20 	.word	0x24000a20
 8008874:	24000a18 	.word	0x24000a18
 8008878:	24000a1c 	.word	0x24000a1c

0800887c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008884:	4b28      	ldr	r3, [pc, #160]	@ (8008928 <prvInsertBlockIntoFreeList+0xac>)
 8008886:	60fb      	str	r3, [r7, #12]
 8008888:	e002      	b.n	8008890 <prvInsertBlockIntoFreeList+0x14>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	60fb      	str	r3, [r7, #12]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	429a      	cmp	r2, r3
 8008898:	d8f7      	bhi.n	800888a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	4413      	add	r3, r2
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d108      	bne.n	80088be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	685a      	ldr	r2, [r3, #4]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	441a      	add	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	441a      	add	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d118      	bne.n	8008904 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	4b15      	ldr	r3, [pc, #84]	@ (800892c <prvInsertBlockIntoFreeList+0xb0>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d00d      	beq.n	80088fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	685a      	ldr	r2, [r3, #4]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	441a      	add	r2, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	601a      	str	r2, [r3, #0]
 80088f8:	e008      	b.n	800890c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80088fa:	4b0c      	ldr	r3, [pc, #48]	@ (800892c <prvInsertBlockIntoFreeList+0xb0>)
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	601a      	str	r2, [r3, #0]
 8008902:	e003      	b.n	800890c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	429a      	cmp	r2, r3
 8008912:	d002      	beq.n	800891a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800891a:	bf00      	nop
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	24000a0c 	.word	0x24000a0c
 800892c:	24000a14 	.word	0x24000a14

08008930 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f103 0208 	add.w	r2, r3, #8
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f04f 32ff 	mov.w	r2, #4294967295
 8008948:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f103 0208 	add.w	r2, r3, #8
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f103 0208 	add.w	r2, r3, #8
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800897e:	bf00      	nop
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr

0800898a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800898a:	b480      	push	{r7}
 800898c:	b085      	sub	sp, #20
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	689a      	ldr	r2, [r3, #8]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	683a      	ldr	r2, [r7, #0]
 80089ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	683a      	ldr	r2, [r7, #0]
 80089b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	1c5a      	adds	r2, r3, #1
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	601a      	str	r2, [r3, #0]
}
 80089c6:	bf00      	nop
 80089c8:	3714      	adds	r7, #20
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089d2:	b480      	push	{r7}
 80089d4:	b085      	sub	sp, #20
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e8:	d103      	bne.n	80089f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	60fb      	str	r3, [r7, #12]
 80089f0:	e00c      	b.n	8008a0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	3308      	adds	r3, #8
 80089f6:	60fb      	str	r3, [r7, #12]
 80089f8:	e002      	b.n	8008a00 <vListInsert+0x2e>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	60fb      	str	r3, [r7, #12]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d2f6      	bcs.n	80089fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	685a      	ldr	r2, [r3, #4]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	683a      	ldr	r2, [r7, #0]
 8008a1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	683a      	ldr	r2, [r7, #0]
 8008a26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	1c5a      	adds	r2, r3, #1
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	601a      	str	r2, [r3, #0]
}
 8008a38:	bf00      	nop
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	6892      	ldr	r2, [r2, #8]
 8008a5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	6852      	ldr	r2, [r2, #4]
 8008a64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d103      	bne.n	8008a78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	689a      	ldr	r2, [r3, #8]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	1e5a      	subs	r2, r3, #1
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3714      	adds	r7, #20
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	3b04      	subs	r3, #4
 8008aa8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008ab0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	3b04      	subs	r3, #4
 8008ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	f023 0201 	bic.w	r2, r3, #1
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	3b04      	subs	r3, #4
 8008ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ac8:	4a0c      	ldr	r2, [pc, #48]	@ (8008afc <pxPortInitialiseStack+0x64>)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	3b14      	subs	r3, #20
 8008ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	3b04      	subs	r3, #4
 8008ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f06f 0202 	mvn.w	r2, #2
 8008ae6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	3b20      	subs	r3, #32
 8008aec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008aee:	68fb      	ldr	r3, [r7, #12]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3714      	adds	r7, #20
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	08008b01 	.word	0x08008b01

08008b00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b06:	2300      	movs	r3, #0
 8008b08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b0a:	4b13      	ldr	r3, [pc, #76]	@ (8008b58 <prvTaskExitError+0x58>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b12:	d00b      	beq.n	8008b2c <prvTaskExitError+0x2c>
	__asm volatile
 8008b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	60fb      	str	r3, [r7, #12]
}
 8008b26:	bf00      	nop
 8008b28:	bf00      	nop
 8008b2a:	e7fd      	b.n	8008b28 <prvTaskExitError+0x28>
	__asm volatile
 8008b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b30:	f383 8811 	msr	BASEPRI, r3
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	60bb      	str	r3, [r7, #8]
}
 8008b3e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b40:	bf00      	nop
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d0fc      	beq.n	8008b42 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b48:	bf00      	nop
 8008b4a:	bf00      	nop
 8008b4c:	3714      	adds	r7, #20
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	24000010 	.word	0x24000010
 8008b5c:	00000000 	.word	0x00000000

08008b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008b60:	4b07      	ldr	r3, [pc, #28]	@ (8008b80 <pxCurrentTCBConst2>)
 8008b62:	6819      	ldr	r1, [r3, #0]
 8008b64:	6808      	ldr	r0, [r1, #0]
 8008b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6a:	f380 8809 	msr	PSP, r0
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f04f 0000 	mov.w	r0, #0
 8008b76:	f380 8811 	msr	BASEPRI, r0
 8008b7a:	4770      	bx	lr
 8008b7c:	f3af 8000 	nop.w

08008b80 <pxCurrentTCBConst2>:
 8008b80:	24000a6c 	.word	0x24000a6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop

08008b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b88:	4808      	ldr	r0, [pc, #32]	@ (8008bac <prvPortStartFirstTask+0x24>)
 8008b8a:	6800      	ldr	r0, [r0, #0]
 8008b8c:	6800      	ldr	r0, [r0, #0]
 8008b8e:	f380 8808 	msr	MSP, r0
 8008b92:	f04f 0000 	mov.w	r0, #0
 8008b96:	f380 8814 	msr	CONTROL, r0
 8008b9a:	b662      	cpsie	i
 8008b9c:	b661      	cpsie	f
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	df00      	svc	0
 8008ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008baa:	bf00      	nop
 8008bac:	e000ed08 	.word	0xe000ed08

08008bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008bb6:	4b47      	ldr	r3, [pc, #284]	@ (8008cd4 <xPortStartScheduler+0x124>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a47      	ldr	r2, [pc, #284]	@ (8008cd8 <xPortStartScheduler+0x128>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d10b      	bne.n	8008bd8 <xPortStartScheduler+0x28>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	60fb      	str	r3, [r7, #12]
}
 8008bd2:	bf00      	nop
 8008bd4:	bf00      	nop
 8008bd6:	e7fd      	b.n	8008bd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008bd8:	4b3e      	ldr	r3, [pc, #248]	@ (8008cd4 <xPortStartScheduler+0x124>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a3f      	ldr	r2, [pc, #252]	@ (8008cdc <xPortStartScheduler+0x12c>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d10b      	bne.n	8008bfa <xPortStartScheduler+0x4a>
	__asm volatile
 8008be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be6:	f383 8811 	msr	BASEPRI, r3
 8008bea:	f3bf 8f6f 	isb	sy
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	613b      	str	r3, [r7, #16]
}
 8008bf4:	bf00      	nop
 8008bf6:	bf00      	nop
 8008bf8:	e7fd      	b.n	8008bf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008bfa:	4b39      	ldr	r3, [pc, #228]	@ (8008ce0 <xPortStartScheduler+0x130>)
 8008bfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	22ff      	movs	r2, #255	@ 0xff
 8008c0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c14:	78fb      	ldrb	r3, [r7, #3]
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008c1c:	b2da      	uxtb	r2, r3
 8008c1e:	4b31      	ldr	r3, [pc, #196]	@ (8008ce4 <xPortStartScheduler+0x134>)
 8008c20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c22:	4b31      	ldr	r3, [pc, #196]	@ (8008ce8 <xPortStartScheduler+0x138>)
 8008c24:	2207      	movs	r2, #7
 8008c26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c28:	e009      	b.n	8008c3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8008ce8 <xPortStartScheduler+0x138>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	4a2d      	ldr	r2, [pc, #180]	@ (8008ce8 <xPortStartScheduler+0x138>)
 8008c32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c34:	78fb      	ldrb	r3, [r7, #3]
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	005b      	lsls	r3, r3, #1
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c3e:	78fb      	ldrb	r3, [r7, #3]
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c46:	2b80      	cmp	r3, #128	@ 0x80
 8008c48:	d0ef      	beq.n	8008c2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c4a:	4b27      	ldr	r3, [pc, #156]	@ (8008ce8 <xPortStartScheduler+0x138>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f1c3 0307 	rsb	r3, r3, #7
 8008c52:	2b04      	cmp	r3, #4
 8008c54:	d00b      	beq.n	8008c6e <xPortStartScheduler+0xbe>
	__asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	60bb      	str	r3, [r7, #8]
}
 8008c68:	bf00      	nop
 8008c6a:	bf00      	nop
 8008c6c:	e7fd      	b.n	8008c6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8008ce8 <xPortStartScheduler+0x138>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	021b      	lsls	r3, r3, #8
 8008c74:	4a1c      	ldr	r2, [pc, #112]	@ (8008ce8 <xPortStartScheduler+0x138>)
 8008c76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c78:	4b1b      	ldr	r3, [pc, #108]	@ (8008ce8 <xPortStartScheduler+0x138>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008c80:	4a19      	ldr	r2, [pc, #100]	@ (8008ce8 <xPortStartScheduler+0x138>)
 8008c82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c8c:	4b17      	ldr	r3, [pc, #92]	@ (8008cec <xPortStartScheduler+0x13c>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a16      	ldr	r2, [pc, #88]	@ (8008cec <xPortStartScheduler+0x13c>)
 8008c92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008c96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c98:	4b14      	ldr	r3, [pc, #80]	@ (8008cec <xPortStartScheduler+0x13c>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a13      	ldr	r2, [pc, #76]	@ (8008cec <xPortStartScheduler+0x13c>)
 8008c9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008ca2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ca4:	f000 f8da 	bl	8008e5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ca8:	4b11      	ldr	r3, [pc, #68]	@ (8008cf0 <xPortStartScheduler+0x140>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008cae:	f000 f8f9 	bl	8008ea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008cb2:	4b10      	ldr	r3, [pc, #64]	@ (8008cf4 <xPortStartScheduler+0x144>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a0f      	ldr	r2, [pc, #60]	@ (8008cf4 <xPortStartScheduler+0x144>)
 8008cb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008cbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008cbe:	f7ff ff63 	bl	8008b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008cc2:	f001 f973 	bl	8009fac <vTaskSwitchContext>
	prvTaskExitError();
 8008cc6:	f7ff ff1b 	bl	8008b00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3718      	adds	r7, #24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	e000ed00 	.word	0xe000ed00
 8008cd8:	410fc271 	.word	0x410fc271
 8008cdc:	410fc270 	.word	0x410fc270
 8008ce0:	e000e400 	.word	0xe000e400
 8008ce4:	24000a24 	.word	0x24000a24
 8008ce8:	24000a28 	.word	0x24000a28
 8008cec:	e000ed20 	.word	0xe000ed20
 8008cf0:	24000010 	.word	0x24000010
 8008cf4:	e000ef34 	.word	0xe000ef34

08008cf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8008cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d02:	f383 8811 	msr	BASEPRI, r3
 8008d06:	f3bf 8f6f 	isb	sy
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	607b      	str	r3, [r7, #4]
}
 8008d10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d12:	4b10      	ldr	r3, [pc, #64]	@ (8008d54 <vPortEnterCritical+0x5c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	3301      	adds	r3, #1
 8008d18:	4a0e      	ldr	r2, [pc, #56]	@ (8008d54 <vPortEnterCritical+0x5c>)
 8008d1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8008d54 <vPortEnterCritical+0x5c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d110      	bne.n	8008d46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d24:	4b0c      	ldr	r3, [pc, #48]	@ (8008d58 <vPortEnterCritical+0x60>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00b      	beq.n	8008d46 <vPortEnterCritical+0x4e>
	__asm volatile
 8008d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d32:	f383 8811 	msr	BASEPRI, r3
 8008d36:	f3bf 8f6f 	isb	sy
 8008d3a:	f3bf 8f4f 	dsb	sy
 8008d3e:	603b      	str	r3, [r7, #0]
}
 8008d40:	bf00      	nop
 8008d42:	bf00      	nop
 8008d44:	e7fd      	b.n	8008d42 <vPortEnterCritical+0x4a>
	}
}
 8008d46:	bf00      	nop
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	24000010 	.word	0x24000010
 8008d58:	e000ed04 	.word	0xe000ed04

08008d5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d62:	4b12      	ldr	r3, [pc, #72]	@ (8008dac <vPortExitCritical+0x50>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10b      	bne.n	8008d82 <vPortExitCritical+0x26>
	__asm volatile
 8008d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6e:	f383 8811 	msr	BASEPRI, r3
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	f3bf 8f4f 	dsb	sy
 8008d7a:	607b      	str	r3, [r7, #4]
}
 8008d7c:	bf00      	nop
 8008d7e:	bf00      	nop
 8008d80:	e7fd      	b.n	8008d7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008d82:	4b0a      	ldr	r3, [pc, #40]	@ (8008dac <vPortExitCritical+0x50>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	3b01      	subs	r3, #1
 8008d88:	4a08      	ldr	r2, [pc, #32]	@ (8008dac <vPortExitCritical+0x50>)
 8008d8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d8c:	4b07      	ldr	r3, [pc, #28]	@ (8008dac <vPortExitCritical+0x50>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d105      	bne.n	8008da0 <vPortExitCritical+0x44>
 8008d94:	2300      	movs	r3, #0
 8008d96:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008d9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr
 8008dac:	24000010 	.word	0x24000010

08008db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008db0:	f3ef 8009 	mrs	r0, PSP
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	4b15      	ldr	r3, [pc, #84]	@ (8008e10 <pxCurrentTCBConst>)
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	f01e 0f10 	tst.w	lr, #16
 8008dc0:	bf08      	it	eq
 8008dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dca:	6010      	str	r0, [r2, #0]
 8008dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008dd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008dd4:	f380 8811 	msr	BASEPRI, r0
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f001 f8e4 	bl	8009fac <vTaskSwitchContext>
 8008de4:	f04f 0000 	mov.w	r0, #0
 8008de8:	f380 8811 	msr	BASEPRI, r0
 8008dec:	bc09      	pop	{r0, r3}
 8008dee:	6819      	ldr	r1, [r3, #0]
 8008df0:	6808      	ldr	r0, [r1, #0]
 8008df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df6:	f01e 0f10 	tst.w	lr, #16
 8008dfa:	bf08      	it	eq
 8008dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e00:	f380 8809 	msr	PSP, r0
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	f3af 8000 	nop.w

08008e10 <pxCurrentTCBConst>:
 8008e10:	24000a6c 	.word	0x24000a6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e14:	bf00      	nop
 8008e16:	bf00      	nop

08008e18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	607b      	str	r3, [r7, #4]
}
 8008e30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e32:	f001 f801 	bl	8009e38 <xTaskIncrementTick>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d003      	beq.n	8008e44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e3c:	4b06      	ldr	r3, [pc, #24]	@ (8008e58 <xPortSysTickHandler+0x40>)
 8008e3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	2300      	movs	r3, #0
 8008e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	f383 8811 	msr	BASEPRI, r3
}
 8008e4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e50:	bf00      	nop
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	e000ed04 	.word	0xe000ed04

08008e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e60:	4b0b      	ldr	r3, [pc, #44]	@ (8008e90 <vPortSetupTimerInterrupt+0x34>)
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e66:	4b0b      	ldr	r3, [pc, #44]	@ (8008e94 <vPortSetupTimerInterrupt+0x38>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e98 <vPortSetupTimerInterrupt+0x3c>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a0a      	ldr	r2, [pc, #40]	@ (8008e9c <vPortSetupTimerInterrupt+0x40>)
 8008e72:	fba2 2303 	umull	r2, r3, r2, r3
 8008e76:	099b      	lsrs	r3, r3, #6
 8008e78:	4a09      	ldr	r2, [pc, #36]	@ (8008ea0 <vPortSetupTimerInterrupt+0x44>)
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e7e:	4b04      	ldr	r3, [pc, #16]	@ (8008e90 <vPortSetupTimerInterrupt+0x34>)
 8008e80:	2207      	movs	r2, #7
 8008e82:	601a      	str	r2, [r3, #0]
}
 8008e84:	bf00      	nop
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	e000e010 	.word	0xe000e010
 8008e94:	e000e018 	.word	0xe000e018
 8008e98:	24000000 	.word	0x24000000
 8008e9c:	10624dd3 	.word	0x10624dd3
 8008ea0:	e000e014 	.word	0xe000e014

08008ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008eb4 <vPortEnableVFP+0x10>
 8008ea8:	6801      	ldr	r1, [r0, #0]
 8008eaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008eae:	6001      	str	r1, [r0, #0]
 8008eb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008eb2:	bf00      	nop
 8008eb4:	e000ed88 	.word	0xe000ed88

08008eb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ebe:	f3ef 8305 	mrs	r3, IPSR
 8008ec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2b0f      	cmp	r3, #15
 8008ec8:	d915      	bls.n	8008ef6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008eca:	4a18      	ldr	r2, [pc, #96]	@ (8008f2c <vPortValidateInterruptPriority+0x74>)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4413      	add	r3, r2
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ed4:	4b16      	ldr	r3, [pc, #88]	@ (8008f30 <vPortValidateInterruptPriority+0x78>)
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	7afa      	ldrb	r2, [r7, #11]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d20b      	bcs.n	8008ef6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee2:	f383 8811 	msr	BASEPRI, r3
 8008ee6:	f3bf 8f6f 	isb	sy
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	607b      	str	r3, [r7, #4]
}
 8008ef0:	bf00      	nop
 8008ef2:	bf00      	nop
 8008ef4:	e7fd      	b.n	8008ef2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8008f34 <vPortValidateInterruptPriority+0x7c>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008efe:	4b0e      	ldr	r3, [pc, #56]	@ (8008f38 <vPortValidateInterruptPriority+0x80>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d90b      	bls.n	8008f1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	603b      	str	r3, [r7, #0]
}
 8008f18:	bf00      	nop
 8008f1a:	bf00      	nop
 8008f1c:	e7fd      	b.n	8008f1a <vPortValidateInterruptPriority+0x62>
	}
 8008f1e:	bf00      	nop
 8008f20:	3714      	adds	r7, #20
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	e000e3f0 	.word	0xe000e3f0
 8008f30:	24000a24 	.word	0x24000a24
 8008f34:	e000ed0c 	.word	0xe000ed0c
 8008f38:	24000a28 	.word	0x24000a28

08008f3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10b      	bne.n	8008f68 <xQueueGenericReset+0x2c>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	60bb      	str	r3, [r7, #8]
}
 8008f62:	bf00      	nop
 8008f64:	bf00      	nop
 8008f66:	e7fd      	b.n	8008f64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008f68:	f7ff fec6 	bl	8008cf8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f74:	68f9      	ldr	r1, [r7, #12]
 8008f76:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008f78:	fb01 f303 	mul.w	r3, r1, r3
 8008f7c:	441a      	add	r2, r3
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2200      	movs	r2, #0
 8008f86:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	68f9      	ldr	r1, [r7, #12]
 8008f9c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008f9e:	fb01 f303 	mul.w	r3, r1, r3
 8008fa2:	441a      	add	r2, r3
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	22ff      	movs	r2, #255	@ 0xff
 8008fac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	22ff      	movs	r2, #255	@ 0xff
 8008fb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d114      	bne.n	8008fe8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d01a      	beq.n	8008ffc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	3310      	adds	r3, #16
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f001 f89e 	bl	800a10c <xTaskRemoveFromEventList>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d012      	beq.n	8008ffc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800900c <xQueueGenericReset+0xd0>)
 8008fd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fdc:	601a      	str	r2, [r3, #0]
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	e009      	b.n	8008ffc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	3310      	adds	r3, #16
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7ff fc9f 	bl	8008930 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	3324      	adds	r3, #36	@ 0x24
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7ff fc9a 	bl	8008930 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008ffc:	f7ff feae 	bl	8008d5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009000:	2301      	movs	r3, #1
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	e000ed04 	.word	0xe000ed04

08009010 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009010:	b580      	push	{r7, lr}
 8009012:	b08e      	sub	sp, #56	@ 0x38
 8009014:	af02      	add	r7, sp, #8
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
 800901c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10b      	bne.n	800903c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009036:	bf00      	nop
 8009038:	bf00      	nop
 800903a:	e7fd      	b.n	8009038 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10b      	bne.n	800905a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009046:	f383 8811 	msr	BASEPRI, r3
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009054:	bf00      	nop
 8009056:	bf00      	nop
 8009058:	e7fd      	b.n	8009056 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d002      	beq.n	8009066 <xQueueGenericCreateStatic+0x56>
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <xQueueGenericCreateStatic+0x5a>
 8009066:	2301      	movs	r3, #1
 8009068:	e000      	b.n	800906c <xQueueGenericCreateStatic+0x5c>
 800906a:	2300      	movs	r3, #0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10b      	bne.n	8009088 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	623b      	str	r3, [r7, #32]
}
 8009082:	bf00      	nop
 8009084:	bf00      	nop
 8009086:	e7fd      	b.n	8009084 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d102      	bne.n	8009094 <xQueueGenericCreateStatic+0x84>
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d101      	bne.n	8009098 <xQueueGenericCreateStatic+0x88>
 8009094:	2301      	movs	r3, #1
 8009096:	e000      	b.n	800909a <xQueueGenericCreateStatic+0x8a>
 8009098:	2300      	movs	r3, #0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10b      	bne.n	80090b6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800909e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	61fb      	str	r3, [r7, #28]
}
 80090b0:	bf00      	nop
 80090b2:	bf00      	nop
 80090b4:	e7fd      	b.n	80090b2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80090b6:	2350      	movs	r3, #80	@ 0x50
 80090b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	2b50      	cmp	r3, #80	@ 0x50
 80090be:	d00b      	beq.n	80090d8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80090c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	61bb      	str	r3, [r7, #24]
}
 80090d2:	bf00      	nop
 80090d4:	bf00      	nop
 80090d6:	e7fd      	b.n	80090d4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80090d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80090de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00d      	beq.n	8009100 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80090e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80090ec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80090f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	4613      	mov	r3, r2
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	68b9      	ldr	r1, [r7, #8]
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f000 f805 	bl	800910a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009102:	4618      	mov	r0, r3
 8009104:	3730      	adds	r7, #48	@ 0x30
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b084      	sub	sp, #16
 800910e:	af00      	add	r7, sp, #0
 8009110:	60f8      	str	r0, [r7, #12]
 8009112:	60b9      	str	r1, [r7, #8]
 8009114:	607a      	str	r2, [r7, #4]
 8009116:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d103      	bne.n	8009126 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	69ba      	ldr	r2, [r7, #24]
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	e002      	b.n	800912c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800912c:	69bb      	ldr	r3, [r7, #24]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	68ba      	ldr	r2, [r7, #8]
 8009136:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009138:	2101      	movs	r1, #1
 800913a:	69b8      	ldr	r0, [r7, #24]
 800913c:	f7ff fefe 	bl	8008f3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	78fa      	ldrb	r2, [r7, #3]
 8009144:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009148:	bf00      	nop
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b08e      	sub	sp, #56	@ 0x38
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
 800915c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800915e:	2300      	movs	r3, #0
 8009160:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10b      	bne.n	8009184 <xQueueGenericSend+0x34>
	__asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800917e:	bf00      	nop
 8009180:	bf00      	nop
 8009182:	e7fd      	b.n	8009180 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d103      	bne.n	8009192 <xQueueGenericSend+0x42>
 800918a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800918e:	2b00      	cmp	r3, #0
 8009190:	d101      	bne.n	8009196 <xQueueGenericSend+0x46>
 8009192:	2301      	movs	r3, #1
 8009194:	e000      	b.n	8009198 <xQueueGenericSend+0x48>
 8009196:	2300      	movs	r3, #0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10b      	bne.n	80091b4 <xQueueGenericSend+0x64>
	__asm volatile
 800919c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a0:	f383 8811 	msr	BASEPRI, r3
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	f3bf 8f4f 	dsb	sy
 80091ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80091ae:	bf00      	nop
 80091b0:	bf00      	nop
 80091b2:	e7fd      	b.n	80091b0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d103      	bne.n	80091c2 <xQueueGenericSend+0x72>
 80091ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d101      	bne.n	80091c6 <xQueueGenericSend+0x76>
 80091c2:	2301      	movs	r3, #1
 80091c4:	e000      	b.n	80091c8 <xQueueGenericSend+0x78>
 80091c6:	2300      	movs	r3, #0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10b      	bne.n	80091e4 <xQueueGenericSend+0x94>
	__asm volatile
 80091cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d0:	f383 8811 	msr	BASEPRI, r3
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	623b      	str	r3, [r7, #32]
}
 80091de:	bf00      	nop
 80091e0:	bf00      	nop
 80091e2:	e7fd      	b.n	80091e0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091e4:	f001 f952 	bl	800a48c <xTaskGetSchedulerState>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d102      	bne.n	80091f4 <xQueueGenericSend+0xa4>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d101      	bne.n	80091f8 <xQueueGenericSend+0xa8>
 80091f4:	2301      	movs	r3, #1
 80091f6:	e000      	b.n	80091fa <xQueueGenericSend+0xaa>
 80091f8:	2300      	movs	r3, #0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10b      	bne.n	8009216 <xQueueGenericSend+0xc6>
	__asm volatile
 80091fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	61fb      	str	r3, [r7, #28]
}
 8009210:	bf00      	nop
 8009212:	bf00      	nop
 8009214:	e7fd      	b.n	8009212 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009216:	f7ff fd6f 	bl	8008cf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800921a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800921e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009222:	429a      	cmp	r2, r3
 8009224:	d302      	bcc.n	800922c <xQueueGenericSend+0xdc>
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	2b02      	cmp	r3, #2
 800922a:	d129      	bne.n	8009280 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800922c:	683a      	ldr	r2, [r7, #0]
 800922e:	68b9      	ldr	r1, [r7, #8]
 8009230:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009232:	f000 fa0f 	bl	8009654 <prvCopyDataToQueue>
 8009236:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800923c:	2b00      	cmp	r3, #0
 800923e:	d010      	beq.n	8009262 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009242:	3324      	adds	r3, #36	@ 0x24
 8009244:	4618      	mov	r0, r3
 8009246:	f000 ff61 	bl	800a10c <xTaskRemoveFromEventList>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d013      	beq.n	8009278 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009250:	4b3f      	ldr	r3, [pc, #252]	@ (8009350 <xQueueGenericSend+0x200>)
 8009252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009256:	601a      	str	r2, [r3, #0]
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	e00a      	b.n	8009278 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009264:	2b00      	cmp	r3, #0
 8009266:	d007      	beq.n	8009278 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009268:	4b39      	ldr	r3, [pc, #228]	@ (8009350 <xQueueGenericSend+0x200>)
 800926a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800926e:	601a      	str	r2, [r3, #0]
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009278:	f7ff fd70 	bl	8008d5c <vPortExitCritical>
				return pdPASS;
 800927c:	2301      	movs	r3, #1
 800927e:	e063      	b.n	8009348 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d103      	bne.n	800928e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009286:	f7ff fd69 	bl	8008d5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800928a:	2300      	movs	r3, #0
 800928c:	e05c      	b.n	8009348 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800928e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009290:	2b00      	cmp	r3, #0
 8009292:	d106      	bne.n	80092a2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009294:	f107 0314 	add.w	r3, r7, #20
 8009298:	4618      	mov	r0, r3
 800929a:	f000 ff9b 	bl	800a1d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800929e:	2301      	movs	r3, #1
 80092a0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092a2:	f7ff fd5b 	bl	8008d5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80092a6:	f000 fd0b 	bl	8009cc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092aa:	f7ff fd25 	bl	8008cf8 <vPortEnterCritical>
 80092ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80092b4:	b25b      	sxtb	r3, r3
 80092b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ba:	d103      	bne.n	80092c4 <xQueueGenericSend+0x174>
 80092bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092be:	2200      	movs	r2, #0
 80092c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80092ca:	b25b      	sxtb	r3, r3
 80092cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d0:	d103      	bne.n	80092da <xQueueGenericSend+0x18a>
 80092d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80092da:	f7ff fd3f 	bl	8008d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092de:	1d3a      	adds	r2, r7, #4
 80092e0:	f107 0314 	add.w	r3, r7, #20
 80092e4:	4611      	mov	r1, r2
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 ff8a 	bl	800a200 <xTaskCheckForTimeOut>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d124      	bne.n	800933c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80092f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80092f4:	f000 faa6 	bl	8009844 <prvIsQueueFull>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d018      	beq.n	8009330 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80092fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009300:	3310      	adds	r3, #16
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	4611      	mov	r1, r2
 8009306:	4618      	mov	r0, r3
 8009308:	f000 feae 	bl	800a068 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800930c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800930e:	f000 fa31 	bl	8009774 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009312:	f000 fce3 	bl	8009cdc <xTaskResumeAll>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	f47f af7c 	bne.w	8009216 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800931e:	4b0c      	ldr	r3, [pc, #48]	@ (8009350 <xQueueGenericSend+0x200>)
 8009320:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009324:	601a      	str	r2, [r3, #0]
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	e772      	b.n	8009216 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009330:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009332:	f000 fa1f 	bl	8009774 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009336:	f000 fcd1 	bl	8009cdc <xTaskResumeAll>
 800933a:	e76c      	b.n	8009216 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800933c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800933e:	f000 fa19 	bl	8009774 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009342:	f000 fccb 	bl	8009cdc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009346:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009348:	4618      	mov	r0, r3
 800934a:	3738      	adds	r7, #56	@ 0x38
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	e000ed04 	.word	0xe000ed04

08009354 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b090      	sub	sp, #64	@ 0x40
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
 8009360:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10b      	bne.n	8009384 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800937e:	bf00      	nop
 8009380:	bf00      	nop
 8009382:	e7fd      	b.n	8009380 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d103      	bne.n	8009392 <xQueueGenericSendFromISR+0x3e>
 800938a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800938c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800938e:	2b00      	cmp	r3, #0
 8009390:	d101      	bne.n	8009396 <xQueueGenericSendFromISR+0x42>
 8009392:	2301      	movs	r3, #1
 8009394:	e000      	b.n	8009398 <xQueueGenericSendFromISR+0x44>
 8009396:	2300      	movs	r3, #0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d10b      	bne.n	80093b4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800939c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093a0:	f383 8811 	msr	BASEPRI, r3
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80093ae:	bf00      	nop
 80093b0:	bf00      	nop
 80093b2:	e7fd      	b.n	80093b0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	d103      	bne.n	80093c2 <xQueueGenericSendFromISR+0x6e>
 80093ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d101      	bne.n	80093c6 <xQueueGenericSendFromISR+0x72>
 80093c2:	2301      	movs	r3, #1
 80093c4:	e000      	b.n	80093c8 <xQueueGenericSendFromISR+0x74>
 80093c6:	2300      	movs	r3, #0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d10b      	bne.n	80093e4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80093cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d0:	f383 8811 	msr	BASEPRI, r3
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	623b      	str	r3, [r7, #32]
}
 80093de:	bf00      	nop
 80093e0:	bf00      	nop
 80093e2:	e7fd      	b.n	80093e0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093e4:	f7ff fd68 	bl	8008eb8 <vPortValidateInterruptPriority>
	__asm volatile
 80093e8:	f3ef 8211 	mrs	r2, BASEPRI
 80093ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f0:	f383 8811 	msr	BASEPRI, r3
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	61fa      	str	r2, [r7, #28]
 80093fe:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8009400:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009402:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009406:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800940c:	429a      	cmp	r2, r3
 800940e:	d302      	bcc.n	8009416 <xQueueGenericSendFromISR+0xc2>
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	2b02      	cmp	r3, #2
 8009414:	d12f      	bne.n	8009476 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009418:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800941c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009424:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	68b9      	ldr	r1, [r7, #8]
 800942a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800942c:	f000 f912 	bl	8009654 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009430:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009438:	d112      	bne.n	8009460 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800943a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800943c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800943e:	2b00      	cmp	r3, #0
 8009440:	d016      	beq.n	8009470 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009444:	3324      	adds	r3, #36	@ 0x24
 8009446:	4618      	mov	r0, r3
 8009448:	f000 fe60 	bl	800a10c <xTaskRemoveFromEventList>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00e      	beq.n	8009470 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00b      	beq.n	8009470 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	601a      	str	r2, [r3, #0]
 800945e:	e007      	b.n	8009470 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009460:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009464:	3301      	adds	r3, #1
 8009466:	b2db      	uxtb	r3, r3
 8009468:	b25a      	sxtb	r2, r3
 800946a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800946c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009470:	2301      	movs	r3, #1
 8009472:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009474:	e001      	b.n	800947a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009476:	2300      	movs	r3, #0
 8009478:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800947a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800947c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f383 8811 	msr	BASEPRI, r3
}
 8009484:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009488:	4618      	mov	r0, r3
 800948a:	3740      	adds	r7, #64	@ 0x40
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b08c      	sub	sp, #48	@ 0x30
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800949c:	2300      	movs	r3, #0
 800949e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80094a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d10b      	bne.n	80094c2 <xQueueReceive+0x32>
	__asm volatile
 80094aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	623b      	str	r3, [r7, #32]
}
 80094bc:	bf00      	nop
 80094be:	bf00      	nop
 80094c0:	e7fd      	b.n	80094be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d103      	bne.n	80094d0 <xQueueReceive+0x40>
 80094c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d101      	bne.n	80094d4 <xQueueReceive+0x44>
 80094d0:	2301      	movs	r3, #1
 80094d2:	e000      	b.n	80094d6 <xQueueReceive+0x46>
 80094d4:	2300      	movs	r3, #0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d10b      	bne.n	80094f2 <xQueueReceive+0x62>
	__asm volatile
 80094da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094de:	f383 8811 	msr	BASEPRI, r3
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	f3bf 8f4f 	dsb	sy
 80094ea:	61fb      	str	r3, [r7, #28]
}
 80094ec:	bf00      	nop
 80094ee:	bf00      	nop
 80094f0:	e7fd      	b.n	80094ee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094f2:	f000 ffcb 	bl	800a48c <xTaskGetSchedulerState>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d102      	bne.n	8009502 <xQueueReceive+0x72>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d101      	bne.n	8009506 <xQueueReceive+0x76>
 8009502:	2301      	movs	r3, #1
 8009504:	e000      	b.n	8009508 <xQueueReceive+0x78>
 8009506:	2300      	movs	r3, #0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10b      	bne.n	8009524 <xQueueReceive+0x94>
	__asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	61bb      	str	r3, [r7, #24]
}
 800951e:	bf00      	nop
 8009520:	bf00      	nop
 8009522:	e7fd      	b.n	8009520 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009524:	f7ff fbe8 	bl	8008cf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800952c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800952e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009530:	2b00      	cmp	r3, #0
 8009532:	d01f      	beq.n	8009574 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009534:	68b9      	ldr	r1, [r7, #8]
 8009536:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009538:	f000 f8f6 	bl	8009728 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800953c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800953e:	1e5a      	subs	r2, r3, #1
 8009540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009542:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00f      	beq.n	800956c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800954c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800954e:	3310      	adds	r3, #16
 8009550:	4618      	mov	r0, r3
 8009552:	f000 fddb 	bl	800a10c <xTaskRemoveFromEventList>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d007      	beq.n	800956c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800955c:	4b3c      	ldr	r3, [pc, #240]	@ (8009650 <xQueueReceive+0x1c0>)
 800955e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009562:	601a      	str	r2, [r3, #0]
 8009564:	f3bf 8f4f 	dsb	sy
 8009568:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800956c:	f7ff fbf6 	bl	8008d5c <vPortExitCritical>
				return pdPASS;
 8009570:	2301      	movs	r3, #1
 8009572:	e069      	b.n	8009648 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d103      	bne.n	8009582 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800957a:	f7ff fbef 	bl	8008d5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800957e:	2300      	movs	r3, #0
 8009580:	e062      	b.n	8009648 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009584:	2b00      	cmp	r3, #0
 8009586:	d106      	bne.n	8009596 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009588:	f107 0310 	add.w	r3, r7, #16
 800958c:	4618      	mov	r0, r3
 800958e:	f000 fe21 	bl	800a1d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009592:	2301      	movs	r3, #1
 8009594:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009596:	f7ff fbe1 	bl	8008d5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800959a:	f000 fb91 	bl	8009cc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800959e:	f7ff fbab 	bl	8008cf8 <vPortEnterCritical>
 80095a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095a8:	b25b      	sxtb	r3, r3
 80095aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ae:	d103      	bne.n	80095b8 <xQueueReceive+0x128>
 80095b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095be:	b25b      	sxtb	r3, r3
 80095c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c4:	d103      	bne.n	80095ce <xQueueReceive+0x13e>
 80095c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095ce:	f7ff fbc5 	bl	8008d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095d2:	1d3a      	adds	r2, r7, #4
 80095d4:	f107 0310 	add.w	r3, r7, #16
 80095d8:	4611      	mov	r1, r2
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 fe10 	bl	800a200 <xTaskCheckForTimeOut>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d123      	bne.n	800962e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095e8:	f000 f916 	bl	8009818 <prvIsQueueEmpty>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d017      	beq.n	8009622 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80095f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f4:	3324      	adds	r3, #36	@ 0x24
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	4611      	mov	r1, r2
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 fd34 	bl	800a068 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009600:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009602:	f000 f8b7 	bl	8009774 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009606:	f000 fb69 	bl	8009cdc <xTaskResumeAll>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d189      	bne.n	8009524 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009610:	4b0f      	ldr	r3, [pc, #60]	@ (8009650 <xQueueReceive+0x1c0>)
 8009612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009616:	601a      	str	r2, [r3, #0]
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	e780      	b.n	8009524 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009622:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009624:	f000 f8a6 	bl	8009774 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009628:	f000 fb58 	bl	8009cdc <xTaskResumeAll>
 800962c:	e77a      	b.n	8009524 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800962e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009630:	f000 f8a0 	bl	8009774 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009634:	f000 fb52 	bl	8009cdc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009638:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800963a:	f000 f8ed 	bl	8009818 <prvIsQueueEmpty>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	f43f af6f 	beq.w	8009524 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009646:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009648:	4618      	mov	r0, r3
 800964a:	3730      	adds	r7, #48	@ 0x30
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	e000ed04 	.word	0xe000ed04

08009654 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b086      	sub	sp, #24
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009660:	2300      	movs	r3, #0
 8009662:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009668:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800966e:	2b00      	cmp	r3, #0
 8009670:	d10d      	bne.n	800968e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d14d      	bne.n	8009716 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	4618      	mov	r0, r3
 8009680:	f000 ff22 	bl	800a4c8 <xTaskPriorityDisinherit>
 8009684:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	609a      	str	r2, [r3, #8]
 800968c:	e043      	b.n	8009716 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d119      	bne.n	80096c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6858      	ldr	r0, [r3, #4]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800969c:	461a      	mov	r2, r3
 800969e:	68b9      	ldr	r1, [r7, #8]
 80096a0:	f001 fe6f 	bl	800b382 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	685a      	ldr	r2, [r3, #4]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ac:	441a      	add	r2, r3
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	685a      	ldr	r2, [r3, #4]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d32b      	bcc.n	8009716 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	605a      	str	r2, [r3, #4]
 80096c6:	e026      	b.n	8009716 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	68d8      	ldr	r0, [r3, #12]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096d0:	461a      	mov	r2, r3
 80096d2:	68b9      	ldr	r1, [r7, #8]
 80096d4:	f001 fe55 	bl	800b382 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	68da      	ldr	r2, [r3, #12]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096e0:	425b      	negs	r3, r3
 80096e2:	441a      	add	r2, r3
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	68da      	ldr	r2, [r3, #12]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d207      	bcs.n	8009704 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	689a      	ldr	r2, [r3, #8]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096fc:	425b      	negs	r3, r3
 80096fe:	441a      	add	r2, r3
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2b02      	cmp	r3, #2
 8009708:	d105      	bne.n	8009716 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d002      	beq.n	8009716 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	3b01      	subs	r3, #1
 8009714:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	1c5a      	adds	r2, r3, #1
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800971e:	697b      	ldr	r3, [r7, #20]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3718      	adds	r7, #24
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009736:	2b00      	cmp	r3, #0
 8009738:	d018      	beq.n	800976c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	68da      	ldr	r2, [r3, #12]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009742:	441a      	add	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	68da      	ldr	r2, [r3, #12]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	429a      	cmp	r2, r3
 8009752:	d303      	bcc.n	800975c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	68d9      	ldr	r1, [r3, #12]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009764:	461a      	mov	r2, r3
 8009766:	6838      	ldr	r0, [r7, #0]
 8009768:	f001 fe0b 	bl	800b382 <memcpy>
	}
}
 800976c:	bf00      	nop
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800977c:	f7ff fabc 	bl	8008cf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009786:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009788:	e011      	b.n	80097ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800978e:	2b00      	cmp	r3, #0
 8009790:	d012      	beq.n	80097b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	3324      	adds	r3, #36	@ 0x24
 8009796:	4618      	mov	r0, r3
 8009798:	f000 fcb8 	bl	800a10c <xTaskRemoveFromEventList>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d001      	beq.n	80097a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80097a2:	f000 fd91 	bl	800a2c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80097a6:	7bfb      	ldrb	r3, [r7, #15]
 80097a8:	3b01      	subs	r3, #1
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80097ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	dce9      	bgt.n	800978a <prvUnlockQueue+0x16>
 80097b6:	e000      	b.n	80097ba <prvUnlockQueue+0x46>
					break;
 80097b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	22ff      	movs	r2, #255	@ 0xff
 80097be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80097c2:	f7ff facb 	bl	8008d5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80097c6:	f7ff fa97 	bl	8008cf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80097d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097d2:	e011      	b.n	80097f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d012      	beq.n	8009802 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	3310      	adds	r3, #16
 80097e0:	4618      	mov	r0, r3
 80097e2:	f000 fc93 	bl	800a10c <xTaskRemoveFromEventList>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80097ec:	f000 fd6c 	bl	800a2c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80097f0:	7bbb      	ldrb	r3, [r7, #14]
 80097f2:	3b01      	subs	r3, #1
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	dce9      	bgt.n	80097d4 <prvUnlockQueue+0x60>
 8009800:	e000      	b.n	8009804 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009802:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	22ff      	movs	r2, #255	@ 0xff
 8009808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800980c:	f7ff faa6 	bl	8008d5c <vPortExitCritical>
}
 8009810:	bf00      	nop
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009820:	f7ff fa6a 	bl	8008cf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009828:	2b00      	cmp	r3, #0
 800982a:	d102      	bne.n	8009832 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800982c:	2301      	movs	r3, #1
 800982e:	60fb      	str	r3, [r7, #12]
 8009830:	e001      	b.n	8009836 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009832:	2300      	movs	r3, #0
 8009834:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009836:	f7ff fa91 	bl	8008d5c <vPortExitCritical>

	return xReturn;
 800983a:	68fb      	ldr	r3, [r7, #12]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800984c:	f7ff fa54 	bl	8008cf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009858:	429a      	cmp	r2, r3
 800985a:	d102      	bne.n	8009862 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800985c:	2301      	movs	r3, #1
 800985e:	60fb      	str	r3, [r7, #12]
 8009860:	e001      	b.n	8009866 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009862:	2300      	movs	r3, #0
 8009864:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009866:	f7ff fa79 	bl	8008d5c <vPortExitCritical>

	return xReturn;
 800986a:	68fb      	ldr	r3, [r7, #12]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800987e:	2300      	movs	r3, #0
 8009880:	60fb      	str	r3, [r7, #12]
 8009882:	e014      	b.n	80098ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009884:	4a0f      	ldr	r2, [pc, #60]	@ (80098c4 <vQueueAddToRegistry+0x50>)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10b      	bne.n	80098a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009890:	490c      	ldr	r1, [pc, #48]	@ (80098c4 <vQueueAddToRegistry+0x50>)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	683a      	ldr	r2, [r7, #0]
 8009896:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800989a:	4a0a      	ldr	r2, [pc, #40]	@ (80098c4 <vQueueAddToRegistry+0x50>)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	00db      	lsls	r3, r3, #3
 80098a0:	4413      	add	r3, r2
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80098a6:	e006      	b.n	80098b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	3301      	adds	r3, #1
 80098ac:	60fb      	str	r3, [r7, #12]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2b07      	cmp	r3, #7
 80098b2:	d9e7      	bls.n	8009884 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80098b4:	bf00      	nop
 80098b6:	bf00      	nop
 80098b8:	3714      	adds	r7, #20
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	24000a2c 	.word	0x24000a2c

080098c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b086      	sub	sp, #24
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80098d8:	f7ff fa0e 	bl	8008cf8 <vPortEnterCritical>
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80098e2:	b25b      	sxtb	r3, r3
 80098e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e8:	d103      	bne.n	80098f2 <vQueueWaitForMessageRestricted+0x2a>
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80098f8:	b25b      	sxtb	r3, r3
 80098fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098fe:	d103      	bne.n	8009908 <vQueueWaitForMessageRestricted+0x40>
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	2200      	movs	r2, #0
 8009904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009908:	f7ff fa28 	bl	8008d5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009910:	2b00      	cmp	r3, #0
 8009912:	d106      	bne.n	8009922 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	3324      	adds	r3, #36	@ 0x24
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	68b9      	ldr	r1, [r7, #8]
 800991c:	4618      	mov	r0, r3
 800991e:	f000 fbc9 	bl	800a0b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009922:	6978      	ldr	r0, [r7, #20]
 8009924:	f7ff ff26 	bl	8009774 <prvUnlockQueue>
	}
 8009928:	bf00      	nop
 800992a:	3718      	adds	r7, #24
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009930:	b580      	push	{r7, lr}
 8009932:	b08e      	sub	sp, #56	@ 0x38
 8009934:	af04      	add	r7, sp, #16
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]
 800993c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800993e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009940:	2b00      	cmp	r3, #0
 8009942:	d10b      	bne.n	800995c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	623b      	str	r3, [r7, #32]
}
 8009956:	bf00      	nop
 8009958:	bf00      	nop
 800995a:	e7fd      	b.n	8009958 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800995c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10b      	bne.n	800997a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	61fb      	str	r3, [r7, #28]
}
 8009974:	bf00      	nop
 8009976:	bf00      	nop
 8009978:	e7fd      	b.n	8009976 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800997a:	235c      	movs	r3, #92	@ 0x5c
 800997c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	2b5c      	cmp	r3, #92	@ 0x5c
 8009982:	d00b      	beq.n	800999c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009988:	f383 8811 	msr	BASEPRI, r3
 800998c:	f3bf 8f6f 	isb	sy
 8009990:	f3bf 8f4f 	dsb	sy
 8009994:	61bb      	str	r3, [r7, #24]
}
 8009996:	bf00      	nop
 8009998:	bf00      	nop
 800999a:	e7fd      	b.n	8009998 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800999c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800999e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d01e      	beq.n	80099e2 <xTaskCreateStatic+0xb2>
 80099a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d01b      	beq.n	80099e2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80099aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80099ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80099b2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80099b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b6:	2202      	movs	r2, #2
 80099b8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80099bc:	2300      	movs	r3, #0
 80099be:	9303      	str	r3, [sp, #12]
 80099c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c2:	9302      	str	r3, [sp, #8]
 80099c4:	f107 0314 	add.w	r3, r7, #20
 80099c8:	9301      	str	r3, [sp, #4]
 80099ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	68b9      	ldr	r1, [r7, #8]
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f000 f80b 	bl	80099f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80099da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80099dc:	f000 f898 	bl	8009b10 <prvAddNewTaskToReadyList>
 80099e0:	e001      	b.n	80099e6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80099e2:	2300      	movs	r3, #0
 80099e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80099e6:	697b      	ldr	r3, [r7, #20]
	}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3728      	adds	r7, #40	@ 0x28
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b088      	sub	sp, #32
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
 80099fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80099fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a00:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	461a      	mov	r2, r3
 8009a08:	21a5      	movs	r1, #165	@ 0xa5
 8009a0a:	f001 fc3f 	bl	800b28c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a12:	6879      	ldr	r1, [r7, #4]
 8009a14:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8009a18:	440b      	add	r3, r1
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4413      	add	r3, r2
 8009a1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	f023 0307 	bic.w	r3, r3, #7
 8009a26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	f003 0307 	and.w	r3, r3, #7
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00b      	beq.n	8009a4a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a36:	f383 8811 	msr	BASEPRI, r3
 8009a3a:	f3bf 8f6f 	isb	sy
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	617b      	str	r3, [r7, #20]
}
 8009a44:	bf00      	nop
 8009a46:	bf00      	nop
 8009a48:	e7fd      	b.n	8009a46 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d01f      	beq.n	8009a90 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a50:	2300      	movs	r3, #0
 8009a52:	61fb      	str	r3, [r7, #28]
 8009a54:	e012      	b.n	8009a7c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009a56:	68ba      	ldr	r2, [r7, #8]
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	7819      	ldrb	r1, [r3, #0]
 8009a5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	4413      	add	r3, r2
 8009a64:	3334      	adds	r3, #52	@ 0x34
 8009a66:	460a      	mov	r2, r1
 8009a68:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	4413      	add	r3, r2
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d006      	beq.n	8009a84 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	61fb      	str	r3, [r7, #28]
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	2b0f      	cmp	r3, #15
 8009a80:	d9e9      	bls.n	8009a56 <prvInitialiseNewTask+0x66>
 8009a82:	e000      	b.n	8009a86 <prvInitialiseNewTask+0x96>
			{
				break;
 8009a84:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009a8e:	e003      	b.n	8009a98 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a9a:	2b37      	cmp	r3, #55	@ 0x37
 8009a9c:	d901      	bls.n	8009aa2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009a9e:	2337      	movs	r3, #55	@ 0x37
 8009aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009aac:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7fe ff59 	bl	8008970 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac0:	3318      	adds	r3, #24
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fe ff54 	bl	8008970 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009acc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ada:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009adc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009aec:	683a      	ldr	r2, [r7, #0]
 8009aee:	68f9      	ldr	r1, [r7, #12]
 8009af0:	69b8      	ldr	r0, [r7, #24]
 8009af2:	f7fe ffd1 	bl	8008a98 <pxPortInitialiseStack>
 8009af6:	4602      	mov	r2, r0
 8009af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009afa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d002      	beq.n	8009b08 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b08:	bf00      	nop
 8009b0a:	3720      	adds	r7, #32
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009b18:	f7ff f8ee 	bl	8008cf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8009bd4 <prvAddNewTaskToReadyList+0xc4>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	3301      	adds	r3, #1
 8009b22:	4a2c      	ldr	r2, [pc, #176]	@ (8009bd4 <prvAddNewTaskToReadyList+0xc4>)
 8009b24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009b26:	4b2c      	ldr	r3, [pc, #176]	@ (8009bd8 <prvAddNewTaskToReadyList+0xc8>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d109      	bne.n	8009b42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009b2e:	4a2a      	ldr	r2, [pc, #168]	@ (8009bd8 <prvAddNewTaskToReadyList+0xc8>)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009b34:	4b27      	ldr	r3, [pc, #156]	@ (8009bd4 <prvAddNewTaskToReadyList+0xc4>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d110      	bne.n	8009b5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009b3c:	f000 fbe8 	bl	800a310 <prvInitialiseTaskLists>
 8009b40:	e00d      	b.n	8009b5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009b42:	4b26      	ldr	r3, [pc, #152]	@ (8009bdc <prvAddNewTaskToReadyList+0xcc>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d109      	bne.n	8009b5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009b4a:	4b23      	ldr	r3, [pc, #140]	@ (8009bd8 <prvAddNewTaskToReadyList+0xc8>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d802      	bhi.n	8009b5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009b58:	4a1f      	ldr	r2, [pc, #124]	@ (8009bd8 <prvAddNewTaskToReadyList+0xc8>)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009b5e:	4b20      	ldr	r3, [pc, #128]	@ (8009be0 <prvAddNewTaskToReadyList+0xd0>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	3301      	adds	r3, #1
 8009b64:	4a1e      	ldr	r2, [pc, #120]	@ (8009be0 <prvAddNewTaskToReadyList+0xd0>)
 8009b66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009b68:	4b1d      	ldr	r3, [pc, #116]	@ (8009be0 <prvAddNewTaskToReadyList+0xd0>)
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b74:	4b1b      	ldr	r3, [pc, #108]	@ (8009be4 <prvAddNewTaskToReadyList+0xd4>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d903      	bls.n	8009b84 <prvAddNewTaskToReadyList+0x74>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b80:	4a18      	ldr	r2, [pc, #96]	@ (8009be4 <prvAddNewTaskToReadyList+0xd4>)
 8009b82:	6013      	str	r3, [r2, #0]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b88:	4613      	mov	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4413      	add	r3, r2
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	4a15      	ldr	r2, [pc, #84]	@ (8009be8 <prvAddNewTaskToReadyList+0xd8>)
 8009b92:	441a      	add	r2, r3
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	3304      	adds	r3, #4
 8009b98:	4619      	mov	r1, r3
 8009b9a:	4610      	mov	r0, r2
 8009b9c:	f7fe fef5 	bl	800898a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ba0:	f7ff f8dc 	bl	8008d5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8009bdc <prvAddNewTaskToReadyList+0xcc>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00e      	beq.n	8009bca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009bac:	4b0a      	ldr	r3, [pc, #40]	@ (8009bd8 <prvAddNewTaskToReadyList+0xc8>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d207      	bcs.n	8009bca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009bba:	4b0c      	ldr	r3, [pc, #48]	@ (8009bec <prvAddNewTaskToReadyList+0xdc>)
 8009bbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bc0:	601a      	str	r2, [r3, #0]
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bca:	bf00      	nop
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	24000f40 	.word	0x24000f40
 8009bd8:	24000a6c 	.word	0x24000a6c
 8009bdc:	24000f4c 	.word	0x24000f4c
 8009be0:	24000f5c 	.word	0x24000f5c
 8009be4:	24000f48 	.word	0x24000f48
 8009be8:	24000a70 	.word	0x24000a70
 8009bec:	e000ed04 	.word	0xe000ed04

08009bf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b08a      	sub	sp, #40	@ 0x28
 8009bf4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009bfe:	463a      	mov	r2, r7
 8009c00:	1d39      	adds	r1, r7, #4
 8009c02:	f107 0308 	add.w	r3, r7, #8
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7fe fda0 	bl	800874c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009c0c:	6839      	ldr	r1, [r7, #0]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	68ba      	ldr	r2, [r7, #8]
 8009c12:	9202      	str	r2, [sp, #8]
 8009c14:	9301      	str	r3, [sp, #4]
 8009c16:	2300      	movs	r3, #0
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	460a      	mov	r2, r1
 8009c1e:	4922      	ldr	r1, [pc, #136]	@ (8009ca8 <vTaskStartScheduler+0xb8>)
 8009c20:	4822      	ldr	r0, [pc, #136]	@ (8009cac <vTaskStartScheduler+0xbc>)
 8009c22:	f7ff fe85 	bl	8009930 <xTaskCreateStatic>
 8009c26:	4603      	mov	r3, r0
 8009c28:	4a21      	ldr	r2, [pc, #132]	@ (8009cb0 <vTaskStartScheduler+0xc0>)
 8009c2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009c2c:	4b20      	ldr	r3, [pc, #128]	@ (8009cb0 <vTaskStartScheduler+0xc0>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d002      	beq.n	8009c3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009c34:	2301      	movs	r3, #1
 8009c36:	617b      	str	r3, [r7, #20]
 8009c38:	e001      	b.n	8009c3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d102      	bne.n	8009c4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009c44:	f000 fdbe 	bl	800a7c4 <xTimerCreateTimerTask>
 8009c48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d116      	bne.n	8009c7e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c54:	f383 8811 	msr	BASEPRI, r3
 8009c58:	f3bf 8f6f 	isb	sy
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	613b      	str	r3, [r7, #16]
}
 8009c62:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c64:	4b13      	ldr	r3, [pc, #76]	@ (8009cb4 <vTaskStartScheduler+0xc4>)
 8009c66:	f04f 32ff 	mov.w	r2, #4294967295
 8009c6a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c6c:	4b12      	ldr	r3, [pc, #72]	@ (8009cb8 <vTaskStartScheduler+0xc8>)
 8009c6e:	2201      	movs	r2, #1
 8009c70:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c72:	4b12      	ldr	r3, [pc, #72]	@ (8009cbc <vTaskStartScheduler+0xcc>)
 8009c74:	2200      	movs	r2, #0
 8009c76:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c78:	f7fe ff9a 	bl	8008bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c7c:	e00f      	b.n	8009c9e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c84:	d10b      	bne.n	8009c9e <vTaskStartScheduler+0xae>
	__asm volatile
 8009c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c8a:	f383 8811 	msr	BASEPRI, r3
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	60fb      	str	r3, [r7, #12]
}
 8009c98:	bf00      	nop
 8009c9a:	bf00      	nop
 8009c9c:	e7fd      	b.n	8009c9a <vTaskStartScheduler+0xaa>
}
 8009c9e:	bf00      	nop
 8009ca0:	3718      	adds	r7, #24
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	0800be4c 	.word	0x0800be4c
 8009cac:	0800a2e1 	.word	0x0800a2e1
 8009cb0:	24000f64 	.word	0x24000f64
 8009cb4:	24000f60 	.word	0x24000f60
 8009cb8:	24000f4c 	.word	0x24000f4c
 8009cbc:	24000f44 	.word	0x24000f44

08009cc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009cc4:	4b04      	ldr	r3, [pc, #16]	@ (8009cd8 <vTaskSuspendAll+0x18>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	4a03      	ldr	r2, [pc, #12]	@ (8009cd8 <vTaskSuspendAll+0x18>)
 8009ccc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009cce:	bf00      	nop
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	24000f68 	.word	0x24000f68

08009cdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009cea:	4b42      	ldr	r3, [pc, #264]	@ (8009df4 <xTaskResumeAll+0x118>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d10b      	bne.n	8009d0a <xTaskResumeAll+0x2e>
	__asm volatile
 8009cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf6:	f383 8811 	msr	BASEPRI, r3
 8009cfa:	f3bf 8f6f 	isb	sy
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	603b      	str	r3, [r7, #0]
}
 8009d04:	bf00      	nop
 8009d06:	bf00      	nop
 8009d08:	e7fd      	b.n	8009d06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009d0a:	f7fe fff5 	bl	8008cf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009d0e:	4b39      	ldr	r3, [pc, #228]	@ (8009df4 <xTaskResumeAll+0x118>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	3b01      	subs	r3, #1
 8009d14:	4a37      	ldr	r2, [pc, #220]	@ (8009df4 <xTaskResumeAll+0x118>)
 8009d16:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d18:	4b36      	ldr	r3, [pc, #216]	@ (8009df4 <xTaskResumeAll+0x118>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d162      	bne.n	8009de6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009d20:	4b35      	ldr	r3, [pc, #212]	@ (8009df8 <xTaskResumeAll+0x11c>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d05e      	beq.n	8009de6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d28:	e02f      	b.n	8009d8a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d2a:	4b34      	ldr	r3, [pc, #208]	@ (8009dfc <xTaskResumeAll+0x120>)
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	3318      	adds	r3, #24
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fe fe84 	bl	8008a44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	3304      	adds	r3, #4
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7fe fe7f 	bl	8008a44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8009e00 <xTaskResumeAll+0x124>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d903      	bls.n	8009d5a <xTaskResumeAll+0x7e>
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d56:	4a2a      	ldr	r2, [pc, #168]	@ (8009e00 <xTaskResumeAll+0x124>)
 8009d58:	6013      	str	r3, [r2, #0]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d5e:	4613      	mov	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4413      	add	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4a27      	ldr	r2, [pc, #156]	@ (8009e04 <xTaskResumeAll+0x128>)
 8009d68:	441a      	add	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	4619      	mov	r1, r3
 8009d70:	4610      	mov	r0, r2
 8009d72:	f7fe fe0a 	bl	800898a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d7a:	4b23      	ldr	r3, [pc, #140]	@ (8009e08 <xTaskResumeAll+0x12c>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d302      	bcc.n	8009d8a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009d84:	4b21      	ldr	r3, [pc, #132]	@ (8009e0c <xTaskResumeAll+0x130>)
 8009d86:	2201      	movs	r2, #1
 8009d88:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8009dfc <xTaskResumeAll+0x120>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1cb      	bne.n	8009d2a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d001      	beq.n	8009d9c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d98:	f000 fb58 	bl	800a44c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8009e10 <xTaskResumeAll+0x134>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d010      	beq.n	8009dca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009da8:	f000 f846 	bl	8009e38 <xTaskIncrementTick>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d002      	beq.n	8009db8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009db2:	4b16      	ldr	r3, [pc, #88]	@ (8009e0c <xTaskResumeAll+0x130>)
 8009db4:	2201      	movs	r2, #1
 8009db6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d1f1      	bne.n	8009da8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009dc4:	4b12      	ldr	r3, [pc, #72]	@ (8009e10 <xTaskResumeAll+0x134>)
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009dca:	4b10      	ldr	r3, [pc, #64]	@ (8009e0c <xTaskResumeAll+0x130>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d009      	beq.n	8009de6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8009e14 <xTaskResumeAll+0x138>)
 8009dd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ddc:	601a      	str	r2, [r3, #0]
 8009dde:	f3bf 8f4f 	dsb	sy
 8009de2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009de6:	f7fe ffb9 	bl	8008d5c <vPortExitCritical>

	return xAlreadyYielded;
 8009dea:	68bb      	ldr	r3, [r7, #8]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	24000f68 	.word	0x24000f68
 8009df8:	24000f40 	.word	0x24000f40
 8009dfc:	24000f00 	.word	0x24000f00
 8009e00:	24000f48 	.word	0x24000f48
 8009e04:	24000a70 	.word	0x24000a70
 8009e08:	24000a6c 	.word	0x24000a6c
 8009e0c:	24000f54 	.word	0x24000f54
 8009e10:	24000f50 	.word	0x24000f50
 8009e14:	e000ed04 	.word	0xe000ed04

08009e18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009e1e:	4b05      	ldr	r3, [pc, #20]	@ (8009e34 <xTaskGetTickCount+0x1c>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009e24:	687b      	ldr	r3, [r7, #4]
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	370c      	adds	r7, #12
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	24000f44 	.word	0x24000f44

08009e38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e42:	4b4f      	ldr	r3, [pc, #316]	@ (8009f80 <xTaskIncrementTick+0x148>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	f040 8090 	bne.w	8009f6c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e4c:	4b4d      	ldr	r3, [pc, #308]	@ (8009f84 <xTaskIncrementTick+0x14c>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	3301      	adds	r3, #1
 8009e52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e54:	4a4b      	ldr	r2, [pc, #300]	@ (8009f84 <xTaskIncrementTick+0x14c>)
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d121      	bne.n	8009ea4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e60:	4b49      	ldr	r3, [pc, #292]	@ (8009f88 <xTaskIncrementTick+0x150>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00b      	beq.n	8009e82 <xTaskIncrementTick+0x4a>
	__asm volatile
 8009e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e6e:	f383 8811 	msr	BASEPRI, r3
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	603b      	str	r3, [r7, #0]
}
 8009e7c:	bf00      	nop
 8009e7e:	bf00      	nop
 8009e80:	e7fd      	b.n	8009e7e <xTaskIncrementTick+0x46>
 8009e82:	4b41      	ldr	r3, [pc, #260]	@ (8009f88 <xTaskIncrementTick+0x150>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	60fb      	str	r3, [r7, #12]
 8009e88:	4b40      	ldr	r3, [pc, #256]	@ (8009f8c <xTaskIncrementTick+0x154>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a3e      	ldr	r2, [pc, #248]	@ (8009f88 <xTaskIncrementTick+0x150>)
 8009e8e:	6013      	str	r3, [r2, #0]
 8009e90:	4a3e      	ldr	r2, [pc, #248]	@ (8009f8c <xTaskIncrementTick+0x154>)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6013      	str	r3, [r2, #0]
 8009e96:	4b3e      	ldr	r3, [pc, #248]	@ (8009f90 <xTaskIncrementTick+0x158>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	4a3c      	ldr	r2, [pc, #240]	@ (8009f90 <xTaskIncrementTick+0x158>)
 8009e9e:	6013      	str	r3, [r2, #0]
 8009ea0:	f000 fad4 	bl	800a44c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ea4:	4b3b      	ldr	r3, [pc, #236]	@ (8009f94 <xTaskIncrementTick+0x15c>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	693a      	ldr	r2, [r7, #16]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d349      	bcc.n	8009f42 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009eae:	4b36      	ldr	r3, [pc, #216]	@ (8009f88 <xTaskIncrementTick+0x150>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d104      	bne.n	8009ec2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eb8:	4b36      	ldr	r3, [pc, #216]	@ (8009f94 <xTaskIncrementTick+0x15c>)
 8009eba:	f04f 32ff 	mov.w	r2, #4294967295
 8009ebe:	601a      	str	r2, [r3, #0]
					break;
 8009ec0:	e03f      	b.n	8009f42 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ec2:	4b31      	ldr	r3, [pc, #196]	@ (8009f88 <xTaskIncrementTick+0x150>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009ed2:	693a      	ldr	r2, [r7, #16]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d203      	bcs.n	8009ee2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009eda:	4a2e      	ldr	r2, [pc, #184]	@ (8009f94 <xTaskIncrementTick+0x15c>)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009ee0:	e02f      	b.n	8009f42 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7fe fdac 	bl	8008a44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d004      	beq.n	8009efe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	3318      	adds	r3, #24
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7fe fda3 	bl	8008a44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f02:	4b25      	ldr	r3, [pc, #148]	@ (8009f98 <xTaskIncrementTick+0x160>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d903      	bls.n	8009f12 <xTaskIncrementTick+0xda>
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f0e:	4a22      	ldr	r2, [pc, #136]	@ (8009f98 <xTaskIncrementTick+0x160>)
 8009f10:	6013      	str	r3, [r2, #0]
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f16:	4613      	mov	r3, r2
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	4413      	add	r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8009f9c <xTaskIncrementTick+0x164>)
 8009f20:	441a      	add	r2, r3
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	3304      	adds	r3, #4
 8009f26:	4619      	mov	r1, r3
 8009f28:	4610      	mov	r0, r2
 8009f2a:	f7fe fd2e 	bl	800898a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f32:	4b1b      	ldr	r3, [pc, #108]	@ (8009fa0 <xTaskIncrementTick+0x168>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d3b8      	bcc.n	8009eae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f40:	e7b5      	b.n	8009eae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009f42:	4b17      	ldr	r3, [pc, #92]	@ (8009fa0 <xTaskIncrementTick+0x168>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f48:	4914      	ldr	r1, [pc, #80]	@ (8009f9c <xTaskIncrementTick+0x164>)
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	4413      	add	r3, r2
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	440b      	add	r3, r1
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d901      	bls.n	8009f5e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009f5e:	4b11      	ldr	r3, [pc, #68]	@ (8009fa4 <xTaskIncrementTick+0x16c>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d007      	beq.n	8009f76 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009f66:	2301      	movs	r3, #1
 8009f68:	617b      	str	r3, [r7, #20]
 8009f6a:	e004      	b.n	8009f76 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8009fa8 <xTaskIncrementTick+0x170>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	3301      	adds	r3, #1
 8009f72:	4a0d      	ldr	r2, [pc, #52]	@ (8009fa8 <xTaskIncrementTick+0x170>)
 8009f74:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009f76:	697b      	ldr	r3, [r7, #20]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3718      	adds	r7, #24
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	24000f68 	.word	0x24000f68
 8009f84:	24000f44 	.word	0x24000f44
 8009f88:	24000ef8 	.word	0x24000ef8
 8009f8c:	24000efc 	.word	0x24000efc
 8009f90:	24000f58 	.word	0x24000f58
 8009f94:	24000f60 	.word	0x24000f60
 8009f98:	24000f48 	.word	0x24000f48
 8009f9c:	24000a70 	.word	0x24000a70
 8009fa0:	24000a6c 	.word	0x24000a6c
 8009fa4:	24000f54 	.word	0x24000f54
 8009fa8:	24000f50 	.word	0x24000f50

08009fac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009fac:	b480      	push	{r7}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009fb2:	4b28      	ldr	r3, [pc, #160]	@ (800a054 <vTaskSwitchContext+0xa8>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d003      	beq.n	8009fc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009fba:	4b27      	ldr	r3, [pc, #156]	@ (800a058 <vTaskSwitchContext+0xac>)
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009fc0:	e042      	b.n	800a048 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009fc2:	4b25      	ldr	r3, [pc, #148]	@ (800a058 <vTaskSwitchContext+0xac>)
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fc8:	4b24      	ldr	r3, [pc, #144]	@ (800a05c <vTaskSwitchContext+0xb0>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	60fb      	str	r3, [r7, #12]
 8009fce:	e011      	b.n	8009ff4 <vTaskSwitchContext+0x48>
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10b      	bne.n	8009fee <vTaskSwitchContext+0x42>
	__asm volatile
 8009fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fda:	f383 8811 	msr	BASEPRI, r3
 8009fde:	f3bf 8f6f 	isb	sy
 8009fe2:	f3bf 8f4f 	dsb	sy
 8009fe6:	607b      	str	r3, [r7, #4]
}
 8009fe8:	bf00      	nop
 8009fea:	bf00      	nop
 8009fec:	e7fd      	b.n	8009fea <vTaskSwitchContext+0x3e>
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	60fb      	str	r3, [r7, #12]
 8009ff4:	491a      	ldr	r1, [pc, #104]	@ (800a060 <vTaskSwitchContext+0xb4>)
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	4613      	mov	r3, r2
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	4413      	add	r3, r2
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	440b      	add	r3, r1
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d0e3      	beq.n	8009fd0 <vTaskSwitchContext+0x24>
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	4613      	mov	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	4413      	add	r3, r2
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4a13      	ldr	r2, [pc, #76]	@ (800a060 <vTaskSwitchContext+0xb4>)
 800a014:	4413      	add	r3, r2
 800a016:	60bb      	str	r3, [r7, #8]
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	685a      	ldr	r2, [r3, #4]
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	605a      	str	r2, [r3, #4]
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	685a      	ldr	r2, [r3, #4]
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	3308      	adds	r3, #8
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d104      	bne.n	800a038 <vTaskSwitchContext+0x8c>
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	685a      	ldr	r2, [r3, #4]
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	605a      	str	r2, [r3, #4]
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	4a09      	ldr	r2, [pc, #36]	@ (800a064 <vTaskSwitchContext+0xb8>)
 800a040:	6013      	str	r3, [r2, #0]
 800a042:	4a06      	ldr	r2, [pc, #24]	@ (800a05c <vTaskSwitchContext+0xb0>)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6013      	str	r3, [r2, #0]
}
 800a048:	bf00      	nop
 800a04a:	3714      	adds	r7, #20
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr
 800a054:	24000f68 	.word	0x24000f68
 800a058:	24000f54 	.word	0x24000f54
 800a05c:	24000f48 	.word	0x24000f48
 800a060:	24000a70 	.word	0x24000a70
 800a064:	24000a6c 	.word	0x24000a6c

0800a068 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d10b      	bne.n	800a090 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a07c:	f383 8811 	msr	BASEPRI, r3
 800a080:	f3bf 8f6f 	isb	sy
 800a084:	f3bf 8f4f 	dsb	sy
 800a088:	60fb      	str	r3, [r7, #12]
}
 800a08a:	bf00      	nop
 800a08c:	bf00      	nop
 800a08e:	e7fd      	b.n	800a08c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a090:	4b07      	ldr	r3, [pc, #28]	@ (800a0b0 <vTaskPlaceOnEventList+0x48>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	3318      	adds	r3, #24
 800a096:	4619      	mov	r1, r3
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f7fe fc9a 	bl	80089d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a09e:	2101      	movs	r1, #1
 800a0a0:	6838      	ldr	r0, [r7, #0]
 800a0a2:	f000 fb3b 	bl	800a71c <prvAddCurrentTaskToDelayedList>
}
 800a0a6:	bf00      	nop
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	24000a6c 	.word	0x24000a6c

0800a0b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b086      	sub	sp, #24
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d10b      	bne.n	800a0de <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a0c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ca:	f383 8811 	msr	BASEPRI, r3
 800a0ce:	f3bf 8f6f 	isb	sy
 800a0d2:	f3bf 8f4f 	dsb	sy
 800a0d6:	617b      	str	r3, [r7, #20]
}
 800a0d8:	bf00      	nop
 800a0da:	bf00      	nop
 800a0dc:	e7fd      	b.n	800a0da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a0de:	4b0a      	ldr	r3, [pc, #40]	@ (800a108 <vTaskPlaceOnEventListRestricted+0x54>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	3318      	adds	r3, #24
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f7fe fc4f 	bl	800898a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d002      	beq.n	800a0f8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a0f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a0f8:	6879      	ldr	r1, [r7, #4]
 800a0fa:	68b8      	ldr	r0, [r7, #8]
 800a0fc:	f000 fb0e 	bl	800a71c <prvAddCurrentTaskToDelayedList>
	}
 800a100:	bf00      	nop
 800a102:	3718      	adds	r7, #24
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	24000a6c 	.word	0x24000a6c

0800a10c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b086      	sub	sp, #24
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10b      	bne.n	800a13a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a126:	f383 8811 	msr	BASEPRI, r3
 800a12a:	f3bf 8f6f 	isb	sy
 800a12e:	f3bf 8f4f 	dsb	sy
 800a132:	60fb      	str	r3, [r7, #12]
}
 800a134:	bf00      	nop
 800a136:	bf00      	nop
 800a138:	e7fd      	b.n	800a136 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	3318      	adds	r3, #24
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fe fc80 	bl	8008a44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a144:	4b1d      	ldr	r3, [pc, #116]	@ (800a1bc <xTaskRemoveFromEventList+0xb0>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d11d      	bne.n	800a188 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	3304      	adds	r3, #4
 800a150:	4618      	mov	r0, r3
 800a152:	f7fe fc77 	bl	8008a44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a15a:	4b19      	ldr	r3, [pc, #100]	@ (800a1c0 <xTaskRemoveFromEventList+0xb4>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d903      	bls.n	800a16a <xTaskRemoveFromEventList+0x5e>
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a166:	4a16      	ldr	r2, [pc, #88]	@ (800a1c0 <xTaskRemoveFromEventList+0xb4>)
 800a168:	6013      	str	r3, [r2, #0]
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a16e:	4613      	mov	r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4413      	add	r3, r2
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	4a13      	ldr	r2, [pc, #76]	@ (800a1c4 <xTaskRemoveFromEventList+0xb8>)
 800a178:	441a      	add	r2, r3
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	3304      	adds	r3, #4
 800a17e:	4619      	mov	r1, r3
 800a180:	4610      	mov	r0, r2
 800a182:	f7fe fc02 	bl	800898a <vListInsertEnd>
 800a186:	e005      	b.n	800a194 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	3318      	adds	r3, #24
 800a18c:	4619      	mov	r1, r3
 800a18e:	480e      	ldr	r0, [pc, #56]	@ (800a1c8 <xTaskRemoveFromEventList+0xbc>)
 800a190:	f7fe fbfb 	bl	800898a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a198:	4b0c      	ldr	r3, [pc, #48]	@ (800a1cc <xTaskRemoveFromEventList+0xc0>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d905      	bls.n	800a1ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a1a6:	4b0a      	ldr	r3, [pc, #40]	@ (800a1d0 <xTaskRemoveFromEventList+0xc4>)
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	601a      	str	r2, [r3, #0]
 800a1ac:	e001      	b.n	800a1b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a1b2:	697b      	ldr	r3, [r7, #20]
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3718      	adds	r7, #24
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	24000f68 	.word	0x24000f68
 800a1c0:	24000f48 	.word	0x24000f48
 800a1c4:	24000a70 	.word	0x24000a70
 800a1c8:	24000f00 	.word	0x24000f00
 800a1cc:	24000a6c 	.word	0x24000a6c
 800a1d0:	24000f54 	.word	0x24000f54

0800a1d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a1dc:	4b06      	ldr	r3, [pc, #24]	@ (800a1f8 <vTaskInternalSetTimeOutState+0x24>)
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a1e4:	4b05      	ldr	r3, [pc, #20]	@ (800a1fc <vTaskInternalSetTimeOutState+0x28>)
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	605a      	str	r2, [r3, #4]
}
 800a1ec:	bf00      	nop
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	24000f58 	.word	0x24000f58
 800a1fc:	24000f44 	.word	0x24000f44

0800a200 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b088      	sub	sp, #32
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d10b      	bne.n	800a228 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a214:	f383 8811 	msr	BASEPRI, r3
 800a218:	f3bf 8f6f 	isb	sy
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	613b      	str	r3, [r7, #16]
}
 800a222:	bf00      	nop
 800a224:	bf00      	nop
 800a226:	e7fd      	b.n	800a224 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d10b      	bne.n	800a246 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a232:	f383 8811 	msr	BASEPRI, r3
 800a236:	f3bf 8f6f 	isb	sy
 800a23a:	f3bf 8f4f 	dsb	sy
 800a23e:	60fb      	str	r3, [r7, #12]
}
 800a240:	bf00      	nop
 800a242:	bf00      	nop
 800a244:	e7fd      	b.n	800a242 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a246:	f7fe fd57 	bl	8008cf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a24a:	4b1d      	ldr	r3, [pc, #116]	@ (800a2c0 <xTaskCheckForTimeOut+0xc0>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	69ba      	ldr	r2, [r7, #24]
 800a256:	1ad3      	subs	r3, r2, r3
 800a258:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a262:	d102      	bne.n	800a26a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a264:	2300      	movs	r3, #0
 800a266:	61fb      	str	r3, [r7, #28]
 800a268:	e023      	b.n	800a2b2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	4b15      	ldr	r3, [pc, #84]	@ (800a2c4 <xTaskCheckForTimeOut+0xc4>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	429a      	cmp	r2, r3
 800a274:	d007      	beq.n	800a286 <xTaskCheckForTimeOut+0x86>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	69ba      	ldr	r2, [r7, #24]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d302      	bcc.n	800a286 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a280:	2301      	movs	r3, #1
 800a282:	61fb      	str	r3, [r7, #28]
 800a284:	e015      	b.n	800a2b2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	697a      	ldr	r2, [r7, #20]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d20b      	bcs.n	800a2a8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	1ad2      	subs	r2, r2, r3
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f7ff ff99 	bl	800a1d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	61fb      	str	r3, [r7, #28]
 800a2a6:	e004      	b.n	800a2b2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a2b2:	f7fe fd53 	bl	8008d5c <vPortExitCritical>

	return xReturn;
 800a2b6:	69fb      	ldr	r3, [r7, #28]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3720      	adds	r7, #32
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	24000f44 	.word	0x24000f44
 800a2c4:	24000f58 	.word	0x24000f58

0800a2c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a2cc:	4b03      	ldr	r3, [pc, #12]	@ (800a2dc <vTaskMissedYield+0x14>)
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	601a      	str	r2, [r3, #0]
}
 800a2d2:	bf00      	nop
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr
 800a2dc:	24000f54 	.word	0x24000f54

0800a2e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a2e8:	f000 f852 	bl	800a390 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a2ec:	4b06      	ldr	r3, [pc, #24]	@ (800a308 <prvIdleTask+0x28>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d9f9      	bls.n	800a2e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a2f4:	4b05      	ldr	r3, [pc, #20]	@ (800a30c <prvIdleTask+0x2c>)
 800a2f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2fa:	601a      	str	r2, [r3, #0]
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a304:	e7f0      	b.n	800a2e8 <prvIdleTask+0x8>
 800a306:	bf00      	nop
 800a308:	24000a70 	.word	0x24000a70
 800a30c:	e000ed04 	.word	0xe000ed04

0800a310 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a316:	2300      	movs	r3, #0
 800a318:	607b      	str	r3, [r7, #4]
 800a31a:	e00c      	b.n	800a336 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	4613      	mov	r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	4413      	add	r3, r2
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	4a12      	ldr	r2, [pc, #72]	@ (800a370 <prvInitialiseTaskLists+0x60>)
 800a328:	4413      	add	r3, r2
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fe fb00 	bl	8008930 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	3301      	adds	r3, #1
 800a334:	607b      	str	r3, [r7, #4]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b37      	cmp	r3, #55	@ 0x37
 800a33a:	d9ef      	bls.n	800a31c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a33c:	480d      	ldr	r0, [pc, #52]	@ (800a374 <prvInitialiseTaskLists+0x64>)
 800a33e:	f7fe faf7 	bl	8008930 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a342:	480d      	ldr	r0, [pc, #52]	@ (800a378 <prvInitialiseTaskLists+0x68>)
 800a344:	f7fe faf4 	bl	8008930 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a348:	480c      	ldr	r0, [pc, #48]	@ (800a37c <prvInitialiseTaskLists+0x6c>)
 800a34a:	f7fe faf1 	bl	8008930 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a34e:	480c      	ldr	r0, [pc, #48]	@ (800a380 <prvInitialiseTaskLists+0x70>)
 800a350:	f7fe faee 	bl	8008930 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a354:	480b      	ldr	r0, [pc, #44]	@ (800a384 <prvInitialiseTaskLists+0x74>)
 800a356:	f7fe faeb 	bl	8008930 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a35a:	4b0b      	ldr	r3, [pc, #44]	@ (800a388 <prvInitialiseTaskLists+0x78>)
 800a35c:	4a05      	ldr	r2, [pc, #20]	@ (800a374 <prvInitialiseTaskLists+0x64>)
 800a35e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a360:	4b0a      	ldr	r3, [pc, #40]	@ (800a38c <prvInitialiseTaskLists+0x7c>)
 800a362:	4a05      	ldr	r2, [pc, #20]	@ (800a378 <prvInitialiseTaskLists+0x68>)
 800a364:	601a      	str	r2, [r3, #0]
}
 800a366:	bf00      	nop
 800a368:	3708      	adds	r7, #8
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	24000a70 	.word	0x24000a70
 800a374:	24000ed0 	.word	0x24000ed0
 800a378:	24000ee4 	.word	0x24000ee4
 800a37c:	24000f00 	.word	0x24000f00
 800a380:	24000f14 	.word	0x24000f14
 800a384:	24000f2c 	.word	0x24000f2c
 800a388:	24000ef8 	.word	0x24000ef8
 800a38c:	24000efc 	.word	0x24000efc

0800a390 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a396:	e019      	b.n	800a3cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a398:	f7fe fcae 	bl	8008cf8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a39c:	4b10      	ldr	r3, [pc, #64]	@ (800a3e0 <prvCheckTasksWaitingTermination+0x50>)
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	3304      	adds	r3, #4
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fe fb4b 	bl	8008a44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a3ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a3e4 <prvCheckTasksWaitingTermination+0x54>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	4a0b      	ldr	r2, [pc, #44]	@ (800a3e4 <prvCheckTasksWaitingTermination+0x54>)
 800a3b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a3b8:	4b0b      	ldr	r3, [pc, #44]	@ (800a3e8 <prvCheckTasksWaitingTermination+0x58>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	4a0a      	ldr	r2, [pc, #40]	@ (800a3e8 <prvCheckTasksWaitingTermination+0x58>)
 800a3c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a3c2:	f7fe fccb 	bl	8008d5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f810 	bl	800a3ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3cc:	4b06      	ldr	r3, [pc, #24]	@ (800a3e8 <prvCheckTasksWaitingTermination+0x58>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d1e1      	bne.n	800a398 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a3d4:	bf00      	nop
 800a3d6:	bf00      	nop
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	24000f14 	.word	0x24000f14
 800a3e4:	24000f40 	.word	0x24000f40
 800a3e8:	24000f28 	.word	0x24000f28

0800a3ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d108      	bne.n	800a410 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a402:	4618      	mov	r0, r3
 800a404:	f7fe f9d6 	bl	80087b4 <vPortFree>
				vPortFree( pxTCB );
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f7fe f9d3 	bl	80087b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a40e:	e019      	b.n	800a444 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a416:	2b01      	cmp	r3, #1
 800a418:	d103      	bne.n	800a422 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f7fe f9ca 	bl	80087b4 <vPortFree>
	}
 800a420:	e010      	b.n	800a444 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a428:	2b02      	cmp	r3, #2
 800a42a:	d00b      	beq.n	800a444 <prvDeleteTCB+0x58>
	__asm volatile
 800a42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a430:	f383 8811 	msr	BASEPRI, r3
 800a434:	f3bf 8f6f 	isb	sy
 800a438:	f3bf 8f4f 	dsb	sy
 800a43c:	60fb      	str	r3, [r7, #12]
}
 800a43e:	bf00      	nop
 800a440:	bf00      	nop
 800a442:	e7fd      	b.n	800a440 <prvDeleteTCB+0x54>
	}
 800a444:	bf00      	nop
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a452:	4b0c      	ldr	r3, [pc, #48]	@ (800a484 <prvResetNextTaskUnblockTime+0x38>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d104      	bne.n	800a466 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a45c:	4b0a      	ldr	r3, [pc, #40]	@ (800a488 <prvResetNextTaskUnblockTime+0x3c>)
 800a45e:	f04f 32ff 	mov.w	r2, #4294967295
 800a462:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a464:	e008      	b.n	800a478 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a466:	4b07      	ldr	r3, [pc, #28]	@ (800a484 <prvResetNextTaskUnblockTime+0x38>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	4a04      	ldr	r2, [pc, #16]	@ (800a488 <prvResetNextTaskUnblockTime+0x3c>)
 800a476:	6013      	str	r3, [r2, #0]
}
 800a478:	bf00      	nop
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr
 800a484:	24000ef8 	.word	0x24000ef8
 800a488:	24000f60 	.word	0x24000f60

0800a48c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a492:	4b0b      	ldr	r3, [pc, #44]	@ (800a4c0 <xTaskGetSchedulerState+0x34>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d102      	bne.n	800a4a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a49a:	2301      	movs	r3, #1
 800a49c:	607b      	str	r3, [r7, #4]
 800a49e:	e008      	b.n	800a4b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4a0:	4b08      	ldr	r3, [pc, #32]	@ (800a4c4 <xTaskGetSchedulerState+0x38>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d102      	bne.n	800a4ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a4a8:	2302      	movs	r3, #2
 800a4aa:	607b      	str	r3, [r7, #4]
 800a4ac:	e001      	b.n	800a4b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a4b2:	687b      	ldr	r3, [r7, #4]
	}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr
 800a4c0:	24000f4c 	.word	0x24000f4c
 800a4c4:	24000f68 	.word	0x24000f68

0800a4c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b086      	sub	sp, #24
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d058      	beq.n	800a590 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a4de:	4b2f      	ldr	r3, [pc, #188]	@ (800a59c <xTaskPriorityDisinherit+0xd4>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	693a      	ldr	r2, [r7, #16]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d00b      	beq.n	800a500 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a4e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ec:	f383 8811 	msr	BASEPRI, r3
 800a4f0:	f3bf 8f6f 	isb	sy
 800a4f4:	f3bf 8f4f 	dsb	sy
 800a4f8:	60fb      	str	r3, [r7, #12]
}
 800a4fa:	bf00      	nop
 800a4fc:	bf00      	nop
 800a4fe:	e7fd      	b.n	800a4fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a504:	2b00      	cmp	r3, #0
 800a506:	d10b      	bne.n	800a520 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a50c:	f383 8811 	msr	BASEPRI, r3
 800a510:	f3bf 8f6f 	isb	sy
 800a514:	f3bf 8f4f 	dsb	sy
 800a518:	60bb      	str	r3, [r7, #8]
}
 800a51a:	bf00      	nop
 800a51c:	bf00      	nop
 800a51e:	e7fd      	b.n	800a51c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a524:	1e5a      	subs	r2, r3, #1
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a532:	429a      	cmp	r2, r3
 800a534:	d02c      	beq.n	800a590 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d128      	bne.n	800a590 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	3304      	adds	r3, #4
 800a542:	4618      	mov	r0, r3
 800a544:	f7fe fa7e 	bl	8008a44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a554:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a560:	4b0f      	ldr	r3, [pc, #60]	@ (800a5a0 <xTaskPriorityDisinherit+0xd8>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	429a      	cmp	r2, r3
 800a566:	d903      	bls.n	800a570 <xTaskPriorityDisinherit+0xa8>
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a56c:	4a0c      	ldr	r2, [pc, #48]	@ (800a5a0 <xTaskPriorityDisinherit+0xd8>)
 800a56e:	6013      	str	r3, [r2, #0]
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a574:	4613      	mov	r3, r2
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	4413      	add	r3, r2
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	4a09      	ldr	r2, [pc, #36]	@ (800a5a4 <xTaskPriorityDisinherit+0xdc>)
 800a57e:	441a      	add	r2, r3
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	3304      	adds	r3, #4
 800a584:	4619      	mov	r1, r3
 800a586:	4610      	mov	r0, r2
 800a588:	f7fe f9ff 	bl	800898a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a58c:	2301      	movs	r3, #1
 800a58e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a590:	697b      	ldr	r3, [r7, #20]
	}
 800a592:	4618      	mov	r0, r3
 800a594:	3718      	adds	r7, #24
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	24000a6c 	.word	0x24000a6c
 800a5a0:	24000f48 	.word	0x24000f48
 800a5a4:	24000a70 	.word	0x24000a70

0800a5a8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b08a      	sub	sp, #40	@ 0x28
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	603b      	str	r3, [r7, #0]
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d10b      	bne.n	800a5da <xTaskGenericNotify+0x32>
	__asm volatile
 800a5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c6:	f383 8811 	msr	BASEPRI, r3
 800a5ca:	f3bf 8f6f 	isb	sy
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	61bb      	str	r3, [r7, #24]
}
 800a5d4:	bf00      	nop
 800a5d6:	bf00      	nop
 800a5d8:	e7fd      	b.n	800a5d6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a5de:	f7fe fb8b 	bl	8008cf8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d003      	beq.n	800a5f0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a5e8:	6a3b      	ldr	r3, [r7, #32]
 800a5ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a5f0:	6a3b      	ldr	r3, [r7, #32]
 800a5f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a5f6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a5f8:	6a3b      	ldr	r3, [r7, #32]
 800a5fa:	2202      	movs	r2, #2
 800a5fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 800a600:	79fb      	ldrb	r3, [r7, #7]
 800a602:	2b04      	cmp	r3, #4
 800a604:	d827      	bhi.n	800a656 <xTaskGenericNotify+0xae>
 800a606:	a201      	add	r2, pc, #4	@ (adr r2, 800a60c <xTaskGenericNotify+0x64>)
 800a608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a60c:	0800a679 	.word	0x0800a679
 800a610:	0800a621 	.word	0x0800a621
 800a614:	0800a62f 	.word	0x0800a62f
 800a618:	0800a63b 	.word	0x0800a63b
 800a61c:	0800a643 	.word	0x0800a643
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a620:	6a3b      	ldr	r3, [r7, #32]
 800a622:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	431a      	orrs	r2, r3
 800a628:	6a3b      	ldr	r3, [r7, #32]
 800a62a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800a62c:	e027      	b.n	800a67e <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a62e:	6a3b      	ldr	r3, [r7, #32]
 800a630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a632:	1c5a      	adds	r2, r3, #1
 800a634:	6a3b      	ldr	r3, [r7, #32]
 800a636:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800a638:	e021      	b.n	800a67e <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a63a:	6a3b      	ldr	r3, [r7, #32]
 800a63c:	68ba      	ldr	r2, [r7, #8]
 800a63e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800a640:	e01d      	b.n	800a67e <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a642:	7ffb      	ldrb	r3, [r7, #31]
 800a644:	2b02      	cmp	r3, #2
 800a646:	d003      	beq.n	800a650 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a648:	6a3b      	ldr	r3, [r7, #32]
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a64e:	e016      	b.n	800a67e <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 800a650:	2300      	movs	r3, #0
 800a652:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800a654:	e013      	b.n	800a67e <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a656:	6a3b      	ldr	r3, [r7, #32]
 800a658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a65a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a65e:	d00d      	beq.n	800a67c <xTaskGenericNotify+0xd4>
	__asm volatile
 800a660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a664:	f383 8811 	msr	BASEPRI, r3
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	617b      	str	r3, [r7, #20]
}
 800a672:	bf00      	nop
 800a674:	bf00      	nop
 800a676:	e7fd      	b.n	800a674 <xTaskGenericNotify+0xcc>
					break;
 800a678:	bf00      	nop
 800a67a:	e000      	b.n	800a67e <xTaskGenericNotify+0xd6>

					break;
 800a67c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a67e:	7ffb      	ldrb	r3, [r7, #31]
 800a680:	2b01      	cmp	r3, #1
 800a682:	d13b      	bne.n	800a6fc <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a684:	6a3b      	ldr	r3, [r7, #32]
 800a686:	3304      	adds	r3, #4
 800a688:	4618      	mov	r0, r3
 800a68a:	f7fe f9db 	bl	8008a44 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a68e:	6a3b      	ldr	r3, [r7, #32]
 800a690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a692:	4b1e      	ldr	r3, [pc, #120]	@ (800a70c <xTaskGenericNotify+0x164>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	429a      	cmp	r2, r3
 800a698:	d903      	bls.n	800a6a2 <xTaskGenericNotify+0xfa>
 800a69a:	6a3b      	ldr	r3, [r7, #32]
 800a69c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a69e:	4a1b      	ldr	r2, [pc, #108]	@ (800a70c <xTaskGenericNotify+0x164>)
 800a6a0:	6013      	str	r3, [r2, #0]
 800a6a2:	6a3b      	ldr	r3, [r7, #32]
 800a6a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	4413      	add	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4a18      	ldr	r2, [pc, #96]	@ (800a710 <xTaskGenericNotify+0x168>)
 800a6b0:	441a      	add	r2, r3
 800a6b2:	6a3b      	ldr	r3, [r7, #32]
 800a6b4:	3304      	adds	r3, #4
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	4610      	mov	r0, r2
 800a6ba:	f7fe f966 	bl	800898a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a6be:	6a3b      	ldr	r3, [r7, #32]
 800a6c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00b      	beq.n	800a6de <xTaskGenericNotify+0x136>
	__asm volatile
 800a6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ca:	f383 8811 	msr	BASEPRI, r3
 800a6ce:	f3bf 8f6f 	isb	sy
 800a6d2:	f3bf 8f4f 	dsb	sy
 800a6d6:	613b      	str	r3, [r7, #16]
}
 800a6d8:	bf00      	nop
 800a6da:	bf00      	nop
 800a6dc:	e7fd      	b.n	800a6da <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a6de:	6a3b      	ldr	r3, [r7, #32]
 800a6e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a714 <xTaskGenericNotify+0x16c>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d907      	bls.n	800a6fc <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a6ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a718 <xTaskGenericNotify+0x170>)
 800a6ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6f2:	601a      	str	r2, [r3, #0]
 800a6f4:	f3bf 8f4f 	dsb	sy
 800a6f8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a6fc:	f7fe fb2e 	bl	8008d5c <vPortExitCritical>

		return xReturn;
 800a700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800a702:	4618      	mov	r0, r3
 800a704:	3728      	adds	r7, #40	@ 0x28
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	24000f48 	.word	0x24000f48
 800a710:	24000a70 	.word	0x24000a70
 800a714:	24000a6c 	.word	0x24000a6c
 800a718:	e000ed04 	.word	0xe000ed04

0800a71c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a726:	4b21      	ldr	r3, [pc, #132]	@ (800a7ac <prvAddCurrentTaskToDelayedList+0x90>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a72c:	4b20      	ldr	r3, [pc, #128]	@ (800a7b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	3304      	adds	r3, #4
 800a732:	4618      	mov	r0, r3
 800a734:	f7fe f986 	bl	8008a44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a73e:	d10a      	bne.n	800a756 <prvAddCurrentTaskToDelayedList+0x3a>
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d007      	beq.n	800a756 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a746:	4b1a      	ldr	r3, [pc, #104]	@ (800a7b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	3304      	adds	r3, #4
 800a74c:	4619      	mov	r1, r3
 800a74e:	4819      	ldr	r0, [pc, #100]	@ (800a7b4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a750:	f7fe f91b 	bl	800898a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a754:	e026      	b.n	800a7a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a756:	68fa      	ldr	r2, [r7, #12]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4413      	add	r3, r2
 800a75c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a75e:	4b14      	ldr	r3, [pc, #80]	@ (800a7b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	68ba      	ldr	r2, [r7, #8]
 800a764:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a766:	68ba      	ldr	r2, [r7, #8]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d209      	bcs.n	800a782 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a76e:	4b12      	ldr	r3, [pc, #72]	@ (800a7b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	4b0f      	ldr	r3, [pc, #60]	@ (800a7b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	3304      	adds	r3, #4
 800a778:	4619      	mov	r1, r3
 800a77a:	4610      	mov	r0, r2
 800a77c:	f7fe f929 	bl	80089d2 <vListInsert>
}
 800a780:	e010      	b.n	800a7a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a782:	4b0e      	ldr	r3, [pc, #56]	@ (800a7bc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	4b0a      	ldr	r3, [pc, #40]	@ (800a7b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	3304      	adds	r3, #4
 800a78c:	4619      	mov	r1, r3
 800a78e:	4610      	mov	r0, r2
 800a790:	f7fe f91f 	bl	80089d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a794:	4b0a      	ldr	r3, [pc, #40]	@ (800a7c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	68ba      	ldr	r2, [r7, #8]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d202      	bcs.n	800a7a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a79e:	4a08      	ldr	r2, [pc, #32]	@ (800a7c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	6013      	str	r3, [r2, #0]
}
 800a7a4:	bf00      	nop
 800a7a6:	3710      	adds	r7, #16
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	24000f44 	.word	0x24000f44
 800a7b0:	24000a6c 	.word	0x24000a6c
 800a7b4:	24000f2c 	.word	0x24000f2c
 800a7b8:	24000efc 	.word	0x24000efc
 800a7bc:	24000ef8 	.word	0x24000ef8
 800a7c0:	24000f60 	.word	0x24000f60

0800a7c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b08a      	sub	sp, #40	@ 0x28
 800a7c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a7ce:	f000 fb13 	bl	800adf8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a7d2:	4b1d      	ldr	r3, [pc, #116]	@ (800a848 <xTimerCreateTimerTask+0x84>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d021      	beq.n	800a81e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a7e2:	1d3a      	adds	r2, r7, #4
 800a7e4:	f107 0108 	add.w	r1, r7, #8
 800a7e8:	f107 030c 	add.w	r3, r7, #12
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f7fd ffc7 	bl	8008780 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a7f2:	6879      	ldr	r1, [r7, #4]
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	68fa      	ldr	r2, [r7, #12]
 800a7f8:	9202      	str	r2, [sp, #8]
 800a7fa:	9301      	str	r3, [sp, #4]
 800a7fc:	2302      	movs	r3, #2
 800a7fe:	9300      	str	r3, [sp, #0]
 800a800:	2300      	movs	r3, #0
 800a802:	460a      	mov	r2, r1
 800a804:	4911      	ldr	r1, [pc, #68]	@ (800a84c <xTimerCreateTimerTask+0x88>)
 800a806:	4812      	ldr	r0, [pc, #72]	@ (800a850 <xTimerCreateTimerTask+0x8c>)
 800a808:	f7ff f892 	bl	8009930 <xTaskCreateStatic>
 800a80c:	4603      	mov	r3, r0
 800a80e:	4a11      	ldr	r2, [pc, #68]	@ (800a854 <xTimerCreateTimerTask+0x90>)
 800a810:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a812:	4b10      	ldr	r3, [pc, #64]	@ (800a854 <xTimerCreateTimerTask+0x90>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d001      	beq.n	800a81e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a81a:	2301      	movs	r3, #1
 800a81c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d10b      	bne.n	800a83c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a828:	f383 8811 	msr	BASEPRI, r3
 800a82c:	f3bf 8f6f 	isb	sy
 800a830:	f3bf 8f4f 	dsb	sy
 800a834:	613b      	str	r3, [r7, #16]
}
 800a836:	bf00      	nop
 800a838:	bf00      	nop
 800a83a:	e7fd      	b.n	800a838 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a83c:	697b      	ldr	r3, [r7, #20]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3718      	adds	r7, #24
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	24000f9c 	.word	0x24000f9c
 800a84c:	0800be54 	.word	0x0800be54
 800a850:	0800a991 	.word	0x0800a991
 800a854:	24000fa0 	.word	0x24000fa0

0800a858 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b08a      	sub	sp, #40	@ 0x28
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
 800a864:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a866:	2300      	movs	r3, #0
 800a868:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d10b      	bne.n	800a888 <xTimerGenericCommand+0x30>
	__asm volatile
 800a870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a874:	f383 8811 	msr	BASEPRI, r3
 800a878:	f3bf 8f6f 	isb	sy
 800a87c:	f3bf 8f4f 	dsb	sy
 800a880:	623b      	str	r3, [r7, #32]
}
 800a882:	bf00      	nop
 800a884:	bf00      	nop
 800a886:	e7fd      	b.n	800a884 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a888:	4b19      	ldr	r3, [pc, #100]	@ (800a8f0 <xTimerGenericCommand+0x98>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d02a      	beq.n	800a8e6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	2b05      	cmp	r3, #5
 800a8a0:	dc18      	bgt.n	800a8d4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a8a2:	f7ff fdf3 	bl	800a48c <xTaskGetSchedulerState>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d109      	bne.n	800a8c0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a8ac:	4b10      	ldr	r3, [pc, #64]	@ (800a8f0 <xTimerGenericCommand+0x98>)
 800a8ae:	6818      	ldr	r0, [r3, #0]
 800a8b0:	f107 0110 	add.w	r1, r7, #16
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8b8:	f7fe fc4a 	bl	8009150 <xQueueGenericSend>
 800a8bc:	6278      	str	r0, [r7, #36]	@ 0x24
 800a8be:	e012      	b.n	800a8e6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a8c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a8f0 <xTimerGenericCommand+0x98>)
 800a8c2:	6818      	ldr	r0, [r3, #0]
 800a8c4:	f107 0110 	add.w	r1, r7, #16
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f7fe fc40 	bl	8009150 <xQueueGenericSend>
 800a8d0:	6278      	str	r0, [r7, #36]	@ 0x24
 800a8d2:	e008      	b.n	800a8e6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a8d4:	4b06      	ldr	r3, [pc, #24]	@ (800a8f0 <xTimerGenericCommand+0x98>)
 800a8d6:	6818      	ldr	r0, [r3, #0]
 800a8d8:	f107 0110 	add.w	r1, r7, #16
 800a8dc:	2300      	movs	r3, #0
 800a8de:	683a      	ldr	r2, [r7, #0]
 800a8e0:	f7fe fd38 	bl	8009354 <xQueueGenericSendFromISR>
 800a8e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3728      	adds	r7, #40	@ 0x28
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	24000f9c 	.word	0x24000f9c

0800a8f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b088      	sub	sp, #32
 800a8f8:	af02      	add	r7, sp, #8
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8fe:	4b23      	ldr	r3, [pc, #140]	@ (800a98c <prvProcessExpiredTimer+0x98>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	68db      	ldr	r3, [r3, #12]
 800a904:	68db      	ldr	r3, [r3, #12]
 800a906:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	3304      	adds	r3, #4
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7fe f899 	bl	8008a44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a918:	f003 0304 	and.w	r3, r3, #4
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d023      	beq.n	800a968 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	699a      	ldr	r2, [r3, #24]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	18d1      	adds	r1, r2, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	683a      	ldr	r2, [r7, #0]
 800a92c:	6978      	ldr	r0, [r7, #20]
 800a92e:	f000 f8d5 	bl	800aadc <prvInsertTimerInActiveList>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d020      	beq.n	800a97a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a938:	2300      	movs	r3, #0
 800a93a:	9300      	str	r3, [sp, #0]
 800a93c:	2300      	movs	r3, #0
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	2100      	movs	r1, #0
 800a942:	6978      	ldr	r0, [r7, #20]
 800a944:	f7ff ff88 	bl	800a858 <xTimerGenericCommand>
 800a948:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d114      	bne.n	800a97a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a954:	f383 8811 	msr	BASEPRI, r3
 800a958:	f3bf 8f6f 	isb	sy
 800a95c:	f3bf 8f4f 	dsb	sy
 800a960:	60fb      	str	r3, [r7, #12]
}
 800a962:	bf00      	nop
 800a964:	bf00      	nop
 800a966:	e7fd      	b.n	800a964 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a96e:	f023 0301 	bic.w	r3, r3, #1
 800a972:	b2da      	uxtb	r2, r3
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	6a1b      	ldr	r3, [r3, #32]
 800a97e:	6978      	ldr	r0, [r7, #20]
 800a980:	4798      	blx	r3
}
 800a982:	bf00      	nop
 800a984:	3718      	adds	r7, #24
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	24000f94 	.word	0x24000f94

0800a990 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a998:	f107 0308 	add.w	r3, r7, #8
 800a99c:	4618      	mov	r0, r3
 800a99e:	f000 f859 	bl	800aa54 <prvGetNextExpireTime>
 800a9a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f000 f805 	bl	800a9b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a9ae:	f000 f8d7 	bl	800ab60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a9b2:	bf00      	nop
 800a9b4:	e7f0      	b.n	800a998 <prvTimerTask+0x8>
	...

0800a9b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a9c2:	f7ff f97d 	bl	8009cc0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9c6:	f107 0308 	add.w	r3, r7, #8
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f000 f866 	bl	800aa9c <prvSampleTimeNow>
 800a9d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d130      	bne.n	800aa3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d10a      	bne.n	800a9f4 <prvProcessTimerOrBlockTask+0x3c>
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d806      	bhi.n	800a9f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a9e6:	f7ff f979 	bl	8009cdc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a9ea:	68f9      	ldr	r1, [r7, #12]
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f7ff ff81 	bl	800a8f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a9f2:	e024      	b.n	800aa3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d008      	beq.n	800aa0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a9fa:	4b13      	ldr	r3, [pc, #76]	@ (800aa48 <prvProcessTimerOrBlockTask+0x90>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d101      	bne.n	800aa08 <prvProcessTimerOrBlockTask+0x50>
 800aa04:	2301      	movs	r3, #1
 800aa06:	e000      	b.n	800aa0a <prvProcessTimerOrBlockTask+0x52>
 800aa08:	2300      	movs	r3, #0
 800aa0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aa0c:	4b0f      	ldr	r3, [pc, #60]	@ (800aa4c <prvProcessTimerOrBlockTask+0x94>)
 800aa0e:	6818      	ldr	r0, [r3, #0]
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	1ad3      	subs	r3, r2, r3
 800aa16:	683a      	ldr	r2, [r7, #0]
 800aa18:	4619      	mov	r1, r3
 800aa1a:	f7fe ff55 	bl	80098c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aa1e:	f7ff f95d 	bl	8009cdc <xTaskResumeAll>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d10a      	bne.n	800aa3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aa28:	4b09      	ldr	r3, [pc, #36]	@ (800aa50 <prvProcessTimerOrBlockTask+0x98>)
 800aa2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa2e:	601a      	str	r2, [r3, #0]
 800aa30:	f3bf 8f4f 	dsb	sy
 800aa34:	f3bf 8f6f 	isb	sy
}
 800aa38:	e001      	b.n	800aa3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aa3a:	f7ff f94f 	bl	8009cdc <xTaskResumeAll>
}
 800aa3e:	bf00      	nop
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	24000f98 	.word	0x24000f98
 800aa4c:	24000f9c 	.word	0x24000f9c
 800aa50:	e000ed04 	.word	0xe000ed04

0800aa54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aa5c:	4b0e      	ldr	r3, [pc, #56]	@ (800aa98 <prvGetNextExpireTime+0x44>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d101      	bne.n	800aa6a <prvGetNextExpireTime+0x16>
 800aa66:	2201      	movs	r2, #1
 800aa68:	e000      	b.n	800aa6c <prvGetNextExpireTime+0x18>
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d105      	bne.n	800aa84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa78:	4b07      	ldr	r3, [pc, #28]	@ (800aa98 <prvGetNextExpireTime+0x44>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	60fb      	str	r3, [r7, #12]
 800aa82:	e001      	b.n	800aa88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aa84:	2300      	movs	r3, #0
 800aa86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aa88:	68fb      	ldr	r3, [r7, #12]
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3714      	adds	r7, #20
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	24000f94 	.word	0x24000f94

0800aa9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aaa4:	f7ff f9b8 	bl	8009e18 <xTaskGetTickCount>
 800aaa8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aaaa:	4b0b      	ldr	r3, [pc, #44]	@ (800aad8 <prvSampleTimeNow+0x3c>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d205      	bcs.n	800aac0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aab4:	f000 f93a 	bl	800ad2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	601a      	str	r2, [r3, #0]
 800aabe:	e002      	b.n	800aac6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aac6:	4a04      	ldr	r2, [pc, #16]	@ (800aad8 <prvSampleTimeNow+0x3c>)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aacc:	68fb      	ldr	r3, [r7, #12]
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3710      	adds	r7, #16
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	24000fa4 	.word	0x24000fa4

0800aadc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b086      	sub	sp, #24
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	607a      	str	r2, [r7, #4]
 800aae8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aaea:	2300      	movs	r3, #0
 800aaec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	68ba      	ldr	r2, [r7, #8]
 800aaf2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aafa:	68ba      	ldr	r2, [r7, #8]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d812      	bhi.n	800ab28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	1ad2      	subs	r2, r2, r3
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	699b      	ldr	r3, [r3, #24]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d302      	bcc.n	800ab16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ab10:	2301      	movs	r3, #1
 800ab12:	617b      	str	r3, [r7, #20]
 800ab14:	e01b      	b.n	800ab4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ab16:	4b10      	ldr	r3, [pc, #64]	@ (800ab58 <prvInsertTimerInActiveList+0x7c>)
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	4619      	mov	r1, r3
 800ab20:	4610      	mov	r0, r2
 800ab22:	f7fd ff56 	bl	80089d2 <vListInsert>
 800ab26:	e012      	b.n	800ab4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d206      	bcs.n	800ab3e <prvInsertTimerInActiveList+0x62>
 800ab30:	68ba      	ldr	r2, [r7, #8]
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d302      	bcc.n	800ab3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	617b      	str	r3, [r7, #20]
 800ab3c:	e007      	b.n	800ab4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab3e:	4b07      	ldr	r3, [pc, #28]	@ (800ab5c <prvInsertTimerInActiveList+0x80>)
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	3304      	adds	r3, #4
 800ab46:	4619      	mov	r1, r3
 800ab48:	4610      	mov	r0, r2
 800ab4a:	f7fd ff42 	bl	80089d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ab4e:	697b      	ldr	r3, [r7, #20]
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3718      	adds	r7, #24
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	24000f98 	.word	0x24000f98
 800ab5c:	24000f94 	.word	0x24000f94

0800ab60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b08e      	sub	sp, #56	@ 0x38
 800ab64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab66:	e0ce      	b.n	800ad06 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	da19      	bge.n	800aba2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ab6e:	1d3b      	adds	r3, r7, #4
 800ab70:	3304      	adds	r3, #4
 800ab72:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ab74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d10b      	bne.n	800ab92 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ab7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab7e:	f383 8811 	msr	BASEPRI, r3
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	61fb      	str	r3, [r7, #28]
}
 800ab8c:	bf00      	nop
 800ab8e:	bf00      	nop
 800ab90:	e7fd      	b.n	800ab8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ab92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab98:	6850      	ldr	r0, [r2, #4]
 800ab9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab9c:	6892      	ldr	r2, [r2, #8]
 800ab9e:	4611      	mov	r1, r2
 800aba0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f2c0 80ae 	blt.w	800ad06 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800abae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d004      	beq.n	800abc0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb8:	3304      	adds	r3, #4
 800abba:	4618      	mov	r0, r3
 800abbc:	f7fd ff42 	bl	8008a44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800abc0:	463b      	mov	r3, r7
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7ff ff6a 	bl	800aa9c <prvSampleTimeNow>
 800abc8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2b09      	cmp	r3, #9
 800abce:	f200 8097 	bhi.w	800ad00 <prvProcessReceivedCommands+0x1a0>
 800abd2:	a201      	add	r2, pc, #4	@ (adr r2, 800abd8 <prvProcessReceivedCommands+0x78>)
 800abd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd8:	0800ac01 	.word	0x0800ac01
 800abdc:	0800ac01 	.word	0x0800ac01
 800abe0:	0800ac01 	.word	0x0800ac01
 800abe4:	0800ac77 	.word	0x0800ac77
 800abe8:	0800ac8b 	.word	0x0800ac8b
 800abec:	0800acd7 	.word	0x0800acd7
 800abf0:	0800ac01 	.word	0x0800ac01
 800abf4:	0800ac01 	.word	0x0800ac01
 800abf8:	0800ac77 	.word	0x0800ac77
 800abfc:	0800ac8b 	.word	0x0800ac8b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac06:	f043 0301 	orr.w	r3, r3, #1
 800ac0a:	b2da      	uxtb	r2, r3
 800ac0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac16:	699b      	ldr	r3, [r3, #24]
 800ac18:	18d1      	adds	r1, r2, r3
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac20:	f7ff ff5c 	bl	800aadc <prvInsertTimerInActiveList>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d06c      	beq.n	800ad04 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac2c:	6a1b      	ldr	r3, [r3, #32]
 800ac2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac38:	f003 0304 	and.w	r3, r3, #4
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d061      	beq.n	800ad04 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ac40:	68ba      	ldr	r2, [r7, #8]
 800ac42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac44:	699b      	ldr	r3, [r3, #24]
 800ac46:	441a      	add	r2, r3
 800ac48:	2300      	movs	r3, #0
 800ac4a:	9300      	str	r3, [sp, #0]
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	2100      	movs	r1, #0
 800ac50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac52:	f7ff fe01 	bl	800a858 <xTimerGenericCommand>
 800ac56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ac58:	6a3b      	ldr	r3, [r7, #32]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d152      	bne.n	800ad04 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ac5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	61bb      	str	r3, [r7, #24]
}
 800ac70:	bf00      	nop
 800ac72:	bf00      	nop
 800ac74:	e7fd      	b.n	800ac72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac7c:	f023 0301 	bic.w	r3, r3, #1
 800ac80:	b2da      	uxtb	r2, r3
 800ac82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ac88:	e03d      	b.n	800ad06 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac90:	f043 0301 	orr.w	r3, r3, #1
 800ac94:	b2da      	uxtb	r2, r3
 800ac96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d10b      	bne.n	800acc2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800acaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acae:	f383 8811 	msr	BASEPRI, r3
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	617b      	str	r3, [r7, #20]
}
 800acbc:	bf00      	nop
 800acbe:	bf00      	nop
 800acc0:	e7fd      	b.n	800acbe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800acc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acc4:	699a      	ldr	r2, [r3, #24]
 800acc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc8:	18d1      	adds	r1, r2, r3
 800acca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800accc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800acd0:	f7ff ff04 	bl	800aadc <prvInsertTimerInActiveList>
					break;
 800acd4:	e017      	b.n	800ad06 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800acd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800acdc:	f003 0302 	and.w	r3, r3, #2
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d103      	bne.n	800acec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ace4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ace6:	f7fd fd65 	bl	80087b4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800acea:	e00c      	b.n	800ad06 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800acec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800acf2:	f023 0301 	bic.w	r3, r3, #1
 800acf6:	b2da      	uxtb	r2, r3
 800acf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800acfe:	e002      	b.n	800ad06 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ad00:	bf00      	nop
 800ad02:	e000      	b.n	800ad06 <prvProcessReceivedCommands+0x1a6>
					break;
 800ad04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad06:	4b08      	ldr	r3, [pc, #32]	@ (800ad28 <prvProcessReceivedCommands+0x1c8>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	1d39      	adds	r1, r7, #4
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7fe fbbe 	bl	8009490 <xQueueReceive>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	f47f af26 	bne.w	800ab68 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ad1c:	bf00      	nop
 800ad1e:	bf00      	nop
 800ad20:	3730      	adds	r7, #48	@ 0x30
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	24000f9c 	.word	0x24000f9c

0800ad2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b088      	sub	sp, #32
 800ad30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad32:	e049      	b.n	800adc8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad34:	4b2e      	ldr	r3, [pc, #184]	@ (800adf0 <prvSwitchTimerLists+0xc4>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad3e:	4b2c      	ldr	r3, [pc, #176]	@ (800adf0 <prvSwitchTimerLists+0xc4>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	3304      	adds	r3, #4
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7fd fe79 	bl	8008a44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	6a1b      	ldr	r3, [r3, #32]
 800ad56:	68f8      	ldr	r0, [r7, #12]
 800ad58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad60:	f003 0304 	and.w	r3, r3, #4
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d02f      	beq.n	800adc8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	699b      	ldr	r3, [r3, #24]
 800ad6c:	693a      	ldr	r2, [r7, #16]
 800ad6e:	4413      	add	r3, r2
 800ad70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ad72:	68ba      	ldr	r2, [r7, #8]
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d90e      	bls.n	800ad98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	68ba      	ldr	r2, [r7, #8]
 800ad7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	68fa      	ldr	r2, [r7, #12]
 800ad84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad86:	4b1a      	ldr	r3, [pc, #104]	@ (800adf0 <prvSwitchTimerLists+0xc4>)
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	3304      	adds	r3, #4
 800ad8e:	4619      	mov	r1, r3
 800ad90:	4610      	mov	r0, r2
 800ad92:	f7fd fe1e 	bl	80089d2 <vListInsert>
 800ad96:	e017      	b.n	800adc8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad98:	2300      	movs	r3, #0
 800ad9a:	9300      	str	r3, [sp, #0]
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	693a      	ldr	r2, [r7, #16]
 800ada0:	2100      	movs	r1, #0
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	f7ff fd58 	bl	800a858 <xTimerGenericCommand>
 800ada8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d10b      	bne.n	800adc8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800adb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	603b      	str	r3, [r7, #0]
}
 800adc2:	bf00      	nop
 800adc4:	bf00      	nop
 800adc6:	e7fd      	b.n	800adc4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800adc8:	4b09      	ldr	r3, [pc, #36]	@ (800adf0 <prvSwitchTimerLists+0xc4>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d1b0      	bne.n	800ad34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800add2:	4b07      	ldr	r3, [pc, #28]	@ (800adf0 <prvSwitchTimerLists+0xc4>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800add8:	4b06      	ldr	r3, [pc, #24]	@ (800adf4 <prvSwitchTimerLists+0xc8>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a04      	ldr	r2, [pc, #16]	@ (800adf0 <prvSwitchTimerLists+0xc4>)
 800adde:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ade0:	4a04      	ldr	r2, [pc, #16]	@ (800adf4 <prvSwitchTimerLists+0xc8>)
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	6013      	str	r3, [r2, #0]
}
 800ade6:	bf00      	nop
 800ade8:	3718      	adds	r7, #24
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	24000f94 	.word	0x24000f94
 800adf4:	24000f98 	.word	0x24000f98

0800adf8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800adfe:	f7fd ff7b 	bl	8008cf8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ae02:	4b15      	ldr	r3, [pc, #84]	@ (800ae58 <prvCheckForValidListAndQueue+0x60>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d120      	bne.n	800ae4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ae0a:	4814      	ldr	r0, [pc, #80]	@ (800ae5c <prvCheckForValidListAndQueue+0x64>)
 800ae0c:	f7fd fd90 	bl	8008930 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ae10:	4813      	ldr	r0, [pc, #76]	@ (800ae60 <prvCheckForValidListAndQueue+0x68>)
 800ae12:	f7fd fd8d 	bl	8008930 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ae16:	4b13      	ldr	r3, [pc, #76]	@ (800ae64 <prvCheckForValidListAndQueue+0x6c>)
 800ae18:	4a10      	ldr	r2, [pc, #64]	@ (800ae5c <prvCheckForValidListAndQueue+0x64>)
 800ae1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ae1c:	4b12      	ldr	r3, [pc, #72]	@ (800ae68 <prvCheckForValidListAndQueue+0x70>)
 800ae1e:	4a10      	ldr	r2, [pc, #64]	@ (800ae60 <prvCheckForValidListAndQueue+0x68>)
 800ae20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ae22:	2300      	movs	r3, #0
 800ae24:	9300      	str	r3, [sp, #0]
 800ae26:	4b11      	ldr	r3, [pc, #68]	@ (800ae6c <prvCheckForValidListAndQueue+0x74>)
 800ae28:	4a11      	ldr	r2, [pc, #68]	@ (800ae70 <prvCheckForValidListAndQueue+0x78>)
 800ae2a:	2110      	movs	r1, #16
 800ae2c:	200a      	movs	r0, #10
 800ae2e:	f7fe f8ef 	bl	8009010 <xQueueGenericCreateStatic>
 800ae32:	4603      	mov	r3, r0
 800ae34:	4a08      	ldr	r2, [pc, #32]	@ (800ae58 <prvCheckForValidListAndQueue+0x60>)
 800ae36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ae38:	4b07      	ldr	r3, [pc, #28]	@ (800ae58 <prvCheckForValidListAndQueue+0x60>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d005      	beq.n	800ae4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ae40:	4b05      	ldr	r3, [pc, #20]	@ (800ae58 <prvCheckForValidListAndQueue+0x60>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	490b      	ldr	r1, [pc, #44]	@ (800ae74 <prvCheckForValidListAndQueue+0x7c>)
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7fe fd14 	bl	8009874 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae4c:	f7fd ff86 	bl	8008d5c <vPortExitCritical>
}
 800ae50:	bf00      	nop
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	24000f9c 	.word	0x24000f9c
 800ae5c:	24000f6c 	.word	0x24000f6c
 800ae60:	24000f80 	.word	0x24000f80
 800ae64:	24000f94 	.word	0x24000f94
 800ae68:	24000f98 	.word	0x24000f98
 800ae6c:	24001048 	.word	0x24001048
 800ae70:	24000fa8 	.word	0x24000fa8
 800ae74:	0800be5c 	.word	0x0800be5c

0800ae78 <std>:
 800ae78:	2300      	movs	r3, #0
 800ae7a:	b510      	push	{r4, lr}
 800ae7c:	4604      	mov	r4, r0
 800ae7e:	e9c0 3300 	strd	r3, r3, [r0]
 800ae82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae86:	6083      	str	r3, [r0, #8]
 800ae88:	8181      	strh	r1, [r0, #12]
 800ae8a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ae8c:	81c2      	strh	r2, [r0, #14]
 800ae8e:	6183      	str	r3, [r0, #24]
 800ae90:	4619      	mov	r1, r3
 800ae92:	2208      	movs	r2, #8
 800ae94:	305c      	adds	r0, #92	@ 0x5c
 800ae96:	f000 f9f9 	bl	800b28c <memset>
 800ae9a:	4b0d      	ldr	r3, [pc, #52]	@ (800aed0 <std+0x58>)
 800ae9c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ae9e:	4b0d      	ldr	r3, [pc, #52]	@ (800aed4 <std+0x5c>)
 800aea0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aea2:	4b0d      	ldr	r3, [pc, #52]	@ (800aed8 <std+0x60>)
 800aea4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aea6:	4b0d      	ldr	r3, [pc, #52]	@ (800aedc <std+0x64>)
 800aea8:	6323      	str	r3, [r4, #48]	@ 0x30
 800aeaa:	4b0d      	ldr	r3, [pc, #52]	@ (800aee0 <std+0x68>)
 800aeac:	6224      	str	r4, [r4, #32]
 800aeae:	429c      	cmp	r4, r3
 800aeb0:	d006      	beq.n	800aec0 <std+0x48>
 800aeb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aeb6:	4294      	cmp	r4, r2
 800aeb8:	d002      	beq.n	800aec0 <std+0x48>
 800aeba:	33d0      	adds	r3, #208	@ 0xd0
 800aebc:	429c      	cmp	r4, r3
 800aebe:	d105      	bne.n	800aecc <std+0x54>
 800aec0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aec8:	f000 ba58 	b.w	800b37c <__retarget_lock_init_recursive>
 800aecc:	bd10      	pop	{r4, pc}
 800aece:	bf00      	nop
 800aed0:	0800b0dd 	.word	0x0800b0dd
 800aed4:	0800b0ff 	.word	0x0800b0ff
 800aed8:	0800b137 	.word	0x0800b137
 800aedc:	0800b15b 	.word	0x0800b15b
 800aee0:	24001098 	.word	0x24001098

0800aee4 <stdio_exit_handler>:
 800aee4:	4a02      	ldr	r2, [pc, #8]	@ (800aef0 <stdio_exit_handler+0xc>)
 800aee6:	4903      	ldr	r1, [pc, #12]	@ (800aef4 <stdio_exit_handler+0x10>)
 800aee8:	4803      	ldr	r0, [pc, #12]	@ (800aef8 <stdio_exit_handler+0x14>)
 800aeea:	f000 b869 	b.w	800afc0 <_fwalk_sglue>
 800aeee:	bf00      	nop
 800aef0:	24000014 	.word	0x24000014
 800aef4:	0800bc35 	.word	0x0800bc35
 800aef8:	24000024 	.word	0x24000024

0800aefc <cleanup_stdio>:
 800aefc:	6841      	ldr	r1, [r0, #4]
 800aefe:	4b0c      	ldr	r3, [pc, #48]	@ (800af30 <cleanup_stdio+0x34>)
 800af00:	4299      	cmp	r1, r3
 800af02:	b510      	push	{r4, lr}
 800af04:	4604      	mov	r4, r0
 800af06:	d001      	beq.n	800af0c <cleanup_stdio+0x10>
 800af08:	f000 fe94 	bl	800bc34 <_fflush_r>
 800af0c:	68a1      	ldr	r1, [r4, #8]
 800af0e:	4b09      	ldr	r3, [pc, #36]	@ (800af34 <cleanup_stdio+0x38>)
 800af10:	4299      	cmp	r1, r3
 800af12:	d002      	beq.n	800af1a <cleanup_stdio+0x1e>
 800af14:	4620      	mov	r0, r4
 800af16:	f000 fe8d 	bl	800bc34 <_fflush_r>
 800af1a:	68e1      	ldr	r1, [r4, #12]
 800af1c:	4b06      	ldr	r3, [pc, #24]	@ (800af38 <cleanup_stdio+0x3c>)
 800af1e:	4299      	cmp	r1, r3
 800af20:	d004      	beq.n	800af2c <cleanup_stdio+0x30>
 800af22:	4620      	mov	r0, r4
 800af24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af28:	f000 be84 	b.w	800bc34 <_fflush_r>
 800af2c:	bd10      	pop	{r4, pc}
 800af2e:	bf00      	nop
 800af30:	24001098 	.word	0x24001098
 800af34:	24001100 	.word	0x24001100
 800af38:	24001168 	.word	0x24001168

0800af3c <global_stdio_init.part.0>:
 800af3c:	b510      	push	{r4, lr}
 800af3e:	4b0b      	ldr	r3, [pc, #44]	@ (800af6c <global_stdio_init.part.0+0x30>)
 800af40:	4c0b      	ldr	r4, [pc, #44]	@ (800af70 <global_stdio_init.part.0+0x34>)
 800af42:	4a0c      	ldr	r2, [pc, #48]	@ (800af74 <global_stdio_init.part.0+0x38>)
 800af44:	601a      	str	r2, [r3, #0]
 800af46:	4620      	mov	r0, r4
 800af48:	2200      	movs	r2, #0
 800af4a:	2104      	movs	r1, #4
 800af4c:	f7ff ff94 	bl	800ae78 <std>
 800af50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800af54:	2201      	movs	r2, #1
 800af56:	2109      	movs	r1, #9
 800af58:	f7ff ff8e 	bl	800ae78 <std>
 800af5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800af60:	2202      	movs	r2, #2
 800af62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af66:	2112      	movs	r1, #18
 800af68:	f7ff bf86 	b.w	800ae78 <std>
 800af6c:	240011d0 	.word	0x240011d0
 800af70:	24001098 	.word	0x24001098
 800af74:	0800aee5 	.word	0x0800aee5

0800af78 <__sfp_lock_acquire>:
 800af78:	4801      	ldr	r0, [pc, #4]	@ (800af80 <__sfp_lock_acquire+0x8>)
 800af7a:	f000 ba00 	b.w	800b37e <__retarget_lock_acquire_recursive>
 800af7e:	bf00      	nop
 800af80:	240011d9 	.word	0x240011d9

0800af84 <__sfp_lock_release>:
 800af84:	4801      	ldr	r0, [pc, #4]	@ (800af8c <__sfp_lock_release+0x8>)
 800af86:	f000 b9fb 	b.w	800b380 <__retarget_lock_release_recursive>
 800af8a:	bf00      	nop
 800af8c:	240011d9 	.word	0x240011d9

0800af90 <__sinit>:
 800af90:	b510      	push	{r4, lr}
 800af92:	4604      	mov	r4, r0
 800af94:	f7ff fff0 	bl	800af78 <__sfp_lock_acquire>
 800af98:	6a23      	ldr	r3, [r4, #32]
 800af9a:	b11b      	cbz	r3, 800afa4 <__sinit+0x14>
 800af9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afa0:	f7ff bff0 	b.w	800af84 <__sfp_lock_release>
 800afa4:	4b04      	ldr	r3, [pc, #16]	@ (800afb8 <__sinit+0x28>)
 800afa6:	6223      	str	r3, [r4, #32]
 800afa8:	4b04      	ldr	r3, [pc, #16]	@ (800afbc <__sinit+0x2c>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d1f5      	bne.n	800af9c <__sinit+0xc>
 800afb0:	f7ff ffc4 	bl	800af3c <global_stdio_init.part.0>
 800afb4:	e7f2      	b.n	800af9c <__sinit+0xc>
 800afb6:	bf00      	nop
 800afb8:	0800aefd 	.word	0x0800aefd
 800afbc:	240011d0 	.word	0x240011d0

0800afc0 <_fwalk_sglue>:
 800afc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afc4:	4607      	mov	r7, r0
 800afc6:	4688      	mov	r8, r1
 800afc8:	4614      	mov	r4, r2
 800afca:	2600      	movs	r6, #0
 800afcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afd0:	f1b9 0901 	subs.w	r9, r9, #1
 800afd4:	d505      	bpl.n	800afe2 <_fwalk_sglue+0x22>
 800afd6:	6824      	ldr	r4, [r4, #0]
 800afd8:	2c00      	cmp	r4, #0
 800afda:	d1f7      	bne.n	800afcc <_fwalk_sglue+0xc>
 800afdc:	4630      	mov	r0, r6
 800afde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afe2:	89ab      	ldrh	r3, [r5, #12]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d907      	bls.n	800aff8 <_fwalk_sglue+0x38>
 800afe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afec:	3301      	adds	r3, #1
 800afee:	d003      	beq.n	800aff8 <_fwalk_sglue+0x38>
 800aff0:	4629      	mov	r1, r5
 800aff2:	4638      	mov	r0, r7
 800aff4:	47c0      	blx	r8
 800aff6:	4306      	orrs	r6, r0
 800aff8:	3568      	adds	r5, #104	@ 0x68
 800affa:	e7e9      	b.n	800afd0 <_fwalk_sglue+0x10>

0800affc <iprintf>:
 800affc:	b40f      	push	{r0, r1, r2, r3}
 800affe:	b507      	push	{r0, r1, r2, lr}
 800b000:	4906      	ldr	r1, [pc, #24]	@ (800b01c <iprintf+0x20>)
 800b002:	ab04      	add	r3, sp, #16
 800b004:	6808      	ldr	r0, [r1, #0]
 800b006:	f853 2b04 	ldr.w	r2, [r3], #4
 800b00a:	6881      	ldr	r1, [r0, #8]
 800b00c:	9301      	str	r3, [sp, #4]
 800b00e:	f000 fae9 	bl	800b5e4 <_vfiprintf_r>
 800b012:	b003      	add	sp, #12
 800b014:	f85d eb04 	ldr.w	lr, [sp], #4
 800b018:	b004      	add	sp, #16
 800b01a:	4770      	bx	lr
 800b01c:	24000020 	.word	0x24000020

0800b020 <_puts_r>:
 800b020:	6a03      	ldr	r3, [r0, #32]
 800b022:	b570      	push	{r4, r5, r6, lr}
 800b024:	6884      	ldr	r4, [r0, #8]
 800b026:	4605      	mov	r5, r0
 800b028:	460e      	mov	r6, r1
 800b02a:	b90b      	cbnz	r3, 800b030 <_puts_r+0x10>
 800b02c:	f7ff ffb0 	bl	800af90 <__sinit>
 800b030:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b032:	07db      	lsls	r3, r3, #31
 800b034:	d405      	bmi.n	800b042 <_puts_r+0x22>
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	0598      	lsls	r0, r3, #22
 800b03a:	d402      	bmi.n	800b042 <_puts_r+0x22>
 800b03c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b03e:	f000 f99e 	bl	800b37e <__retarget_lock_acquire_recursive>
 800b042:	89a3      	ldrh	r3, [r4, #12]
 800b044:	0719      	lsls	r1, r3, #28
 800b046:	d502      	bpl.n	800b04e <_puts_r+0x2e>
 800b048:	6923      	ldr	r3, [r4, #16]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d135      	bne.n	800b0ba <_puts_r+0x9a>
 800b04e:	4621      	mov	r1, r4
 800b050:	4628      	mov	r0, r5
 800b052:	f000 f8c5 	bl	800b1e0 <__swsetup_r>
 800b056:	b380      	cbz	r0, 800b0ba <_puts_r+0x9a>
 800b058:	f04f 35ff 	mov.w	r5, #4294967295
 800b05c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b05e:	07da      	lsls	r2, r3, #31
 800b060:	d405      	bmi.n	800b06e <_puts_r+0x4e>
 800b062:	89a3      	ldrh	r3, [r4, #12]
 800b064:	059b      	lsls	r3, r3, #22
 800b066:	d402      	bmi.n	800b06e <_puts_r+0x4e>
 800b068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b06a:	f000 f989 	bl	800b380 <__retarget_lock_release_recursive>
 800b06e:	4628      	mov	r0, r5
 800b070:	bd70      	pop	{r4, r5, r6, pc}
 800b072:	2b00      	cmp	r3, #0
 800b074:	da04      	bge.n	800b080 <_puts_r+0x60>
 800b076:	69a2      	ldr	r2, [r4, #24]
 800b078:	429a      	cmp	r2, r3
 800b07a:	dc17      	bgt.n	800b0ac <_puts_r+0x8c>
 800b07c:	290a      	cmp	r1, #10
 800b07e:	d015      	beq.n	800b0ac <_puts_r+0x8c>
 800b080:	6823      	ldr	r3, [r4, #0]
 800b082:	1c5a      	adds	r2, r3, #1
 800b084:	6022      	str	r2, [r4, #0]
 800b086:	7019      	strb	r1, [r3, #0]
 800b088:	68a3      	ldr	r3, [r4, #8]
 800b08a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b08e:	3b01      	subs	r3, #1
 800b090:	60a3      	str	r3, [r4, #8]
 800b092:	2900      	cmp	r1, #0
 800b094:	d1ed      	bne.n	800b072 <_puts_r+0x52>
 800b096:	2b00      	cmp	r3, #0
 800b098:	da11      	bge.n	800b0be <_puts_r+0x9e>
 800b09a:	4622      	mov	r2, r4
 800b09c:	210a      	movs	r1, #10
 800b09e:	4628      	mov	r0, r5
 800b0a0:	f000 f85f 	bl	800b162 <__swbuf_r>
 800b0a4:	3001      	adds	r0, #1
 800b0a6:	d0d7      	beq.n	800b058 <_puts_r+0x38>
 800b0a8:	250a      	movs	r5, #10
 800b0aa:	e7d7      	b.n	800b05c <_puts_r+0x3c>
 800b0ac:	4622      	mov	r2, r4
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	f000 f857 	bl	800b162 <__swbuf_r>
 800b0b4:	3001      	adds	r0, #1
 800b0b6:	d1e7      	bne.n	800b088 <_puts_r+0x68>
 800b0b8:	e7ce      	b.n	800b058 <_puts_r+0x38>
 800b0ba:	3e01      	subs	r6, #1
 800b0bc:	e7e4      	b.n	800b088 <_puts_r+0x68>
 800b0be:	6823      	ldr	r3, [r4, #0]
 800b0c0:	1c5a      	adds	r2, r3, #1
 800b0c2:	6022      	str	r2, [r4, #0]
 800b0c4:	220a      	movs	r2, #10
 800b0c6:	701a      	strb	r2, [r3, #0]
 800b0c8:	e7ee      	b.n	800b0a8 <_puts_r+0x88>
	...

0800b0cc <puts>:
 800b0cc:	4b02      	ldr	r3, [pc, #8]	@ (800b0d8 <puts+0xc>)
 800b0ce:	4601      	mov	r1, r0
 800b0d0:	6818      	ldr	r0, [r3, #0]
 800b0d2:	f7ff bfa5 	b.w	800b020 <_puts_r>
 800b0d6:	bf00      	nop
 800b0d8:	24000020 	.word	0x24000020

0800b0dc <__sread>:
 800b0dc:	b510      	push	{r4, lr}
 800b0de:	460c      	mov	r4, r1
 800b0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0e4:	f000 f8fc 	bl	800b2e0 <_read_r>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	bfab      	itete	ge
 800b0ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b0ee:	89a3      	ldrhlt	r3, [r4, #12]
 800b0f0:	181b      	addge	r3, r3, r0
 800b0f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b0f6:	bfac      	ite	ge
 800b0f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b0fa:	81a3      	strhlt	r3, [r4, #12]
 800b0fc:	bd10      	pop	{r4, pc}

0800b0fe <__swrite>:
 800b0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b102:	461f      	mov	r7, r3
 800b104:	898b      	ldrh	r3, [r1, #12]
 800b106:	05db      	lsls	r3, r3, #23
 800b108:	4605      	mov	r5, r0
 800b10a:	460c      	mov	r4, r1
 800b10c:	4616      	mov	r6, r2
 800b10e:	d505      	bpl.n	800b11c <__swrite+0x1e>
 800b110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b114:	2302      	movs	r3, #2
 800b116:	2200      	movs	r2, #0
 800b118:	f000 f8d0 	bl	800b2bc <_lseek_r>
 800b11c:	89a3      	ldrh	r3, [r4, #12]
 800b11e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b122:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b126:	81a3      	strh	r3, [r4, #12]
 800b128:	4632      	mov	r2, r6
 800b12a:	463b      	mov	r3, r7
 800b12c:	4628      	mov	r0, r5
 800b12e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b132:	f000 b8e7 	b.w	800b304 <_write_r>

0800b136 <__sseek>:
 800b136:	b510      	push	{r4, lr}
 800b138:	460c      	mov	r4, r1
 800b13a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b13e:	f000 f8bd 	bl	800b2bc <_lseek_r>
 800b142:	1c43      	adds	r3, r0, #1
 800b144:	89a3      	ldrh	r3, [r4, #12]
 800b146:	bf15      	itete	ne
 800b148:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b14a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b14e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b152:	81a3      	strheq	r3, [r4, #12]
 800b154:	bf18      	it	ne
 800b156:	81a3      	strhne	r3, [r4, #12]
 800b158:	bd10      	pop	{r4, pc}

0800b15a <__sclose>:
 800b15a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b15e:	f000 b89d 	b.w	800b29c <_close_r>

0800b162 <__swbuf_r>:
 800b162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b164:	460e      	mov	r6, r1
 800b166:	4614      	mov	r4, r2
 800b168:	4605      	mov	r5, r0
 800b16a:	b118      	cbz	r0, 800b174 <__swbuf_r+0x12>
 800b16c:	6a03      	ldr	r3, [r0, #32]
 800b16e:	b90b      	cbnz	r3, 800b174 <__swbuf_r+0x12>
 800b170:	f7ff ff0e 	bl	800af90 <__sinit>
 800b174:	69a3      	ldr	r3, [r4, #24]
 800b176:	60a3      	str	r3, [r4, #8]
 800b178:	89a3      	ldrh	r3, [r4, #12]
 800b17a:	071a      	lsls	r2, r3, #28
 800b17c:	d501      	bpl.n	800b182 <__swbuf_r+0x20>
 800b17e:	6923      	ldr	r3, [r4, #16]
 800b180:	b943      	cbnz	r3, 800b194 <__swbuf_r+0x32>
 800b182:	4621      	mov	r1, r4
 800b184:	4628      	mov	r0, r5
 800b186:	f000 f82b 	bl	800b1e0 <__swsetup_r>
 800b18a:	b118      	cbz	r0, 800b194 <__swbuf_r+0x32>
 800b18c:	f04f 37ff 	mov.w	r7, #4294967295
 800b190:	4638      	mov	r0, r7
 800b192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b194:	6823      	ldr	r3, [r4, #0]
 800b196:	6922      	ldr	r2, [r4, #16]
 800b198:	1a98      	subs	r0, r3, r2
 800b19a:	6963      	ldr	r3, [r4, #20]
 800b19c:	b2f6      	uxtb	r6, r6
 800b19e:	4283      	cmp	r3, r0
 800b1a0:	4637      	mov	r7, r6
 800b1a2:	dc05      	bgt.n	800b1b0 <__swbuf_r+0x4e>
 800b1a4:	4621      	mov	r1, r4
 800b1a6:	4628      	mov	r0, r5
 800b1a8:	f000 fd44 	bl	800bc34 <_fflush_r>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d1ed      	bne.n	800b18c <__swbuf_r+0x2a>
 800b1b0:	68a3      	ldr	r3, [r4, #8]
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	60a3      	str	r3, [r4, #8]
 800b1b6:	6823      	ldr	r3, [r4, #0]
 800b1b8:	1c5a      	adds	r2, r3, #1
 800b1ba:	6022      	str	r2, [r4, #0]
 800b1bc:	701e      	strb	r6, [r3, #0]
 800b1be:	6962      	ldr	r2, [r4, #20]
 800b1c0:	1c43      	adds	r3, r0, #1
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d004      	beq.n	800b1d0 <__swbuf_r+0x6e>
 800b1c6:	89a3      	ldrh	r3, [r4, #12]
 800b1c8:	07db      	lsls	r3, r3, #31
 800b1ca:	d5e1      	bpl.n	800b190 <__swbuf_r+0x2e>
 800b1cc:	2e0a      	cmp	r6, #10
 800b1ce:	d1df      	bne.n	800b190 <__swbuf_r+0x2e>
 800b1d0:	4621      	mov	r1, r4
 800b1d2:	4628      	mov	r0, r5
 800b1d4:	f000 fd2e 	bl	800bc34 <_fflush_r>
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	d0d9      	beq.n	800b190 <__swbuf_r+0x2e>
 800b1dc:	e7d6      	b.n	800b18c <__swbuf_r+0x2a>
	...

0800b1e0 <__swsetup_r>:
 800b1e0:	b538      	push	{r3, r4, r5, lr}
 800b1e2:	4b29      	ldr	r3, [pc, #164]	@ (800b288 <__swsetup_r+0xa8>)
 800b1e4:	4605      	mov	r5, r0
 800b1e6:	6818      	ldr	r0, [r3, #0]
 800b1e8:	460c      	mov	r4, r1
 800b1ea:	b118      	cbz	r0, 800b1f4 <__swsetup_r+0x14>
 800b1ec:	6a03      	ldr	r3, [r0, #32]
 800b1ee:	b90b      	cbnz	r3, 800b1f4 <__swsetup_r+0x14>
 800b1f0:	f7ff fece 	bl	800af90 <__sinit>
 800b1f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1f8:	0719      	lsls	r1, r3, #28
 800b1fa:	d422      	bmi.n	800b242 <__swsetup_r+0x62>
 800b1fc:	06da      	lsls	r2, r3, #27
 800b1fe:	d407      	bmi.n	800b210 <__swsetup_r+0x30>
 800b200:	2209      	movs	r2, #9
 800b202:	602a      	str	r2, [r5, #0]
 800b204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b208:	81a3      	strh	r3, [r4, #12]
 800b20a:	f04f 30ff 	mov.w	r0, #4294967295
 800b20e:	e033      	b.n	800b278 <__swsetup_r+0x98>
 800b210:	0758      	lsls	r0, r3, #29
 800b212:	d512      	bpl.n	800b23a <__swsetup_r+0x5a>
 800b214:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b216:	b141      	cbz	r1, 800b22a <__swsetup_r+0x4a>
 800b218:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b21c:	4299      	cmp	r1, r3
 800b21e:	d002      	beq.n	800b226 <__swsetup_r+0x46>
 800b220:	4628      	mov	r0, r5
 800b222:	f000 f8bd 	bl	800b3a0 <_free_r>
 800b226:	2300      	movs	r3, #0
 800b228:	6363      	str	r3, [r4, #52]	@ 0x34
 800b22a:	89a3      	ldrh	r3, [r4, #12]
 800b22c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b230:	81a3      	strh	r3, [r4, #12]
 800b232:	2300      	movs	r3, #0
 800b234:	6063      	str	r3, [r4, #4]
 800b236:	6923      	ldr	r3, [r4, #16]
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	89a3      	ldrh	r3, [r4, #12]
 800b23c:	f043 0308 	orr.w	r3, r3, #8
 800b240:	81a3      	strh	r3, [r4, #12]
 800b242:	6923      	ldr	r3, [r4, #16]
 800b244:	b94b      	cbnz	r3, 800b25a <__swsetup_r+0x7a>
 800b246:	89a3      	ldrh	r3, [r4, #12]
 800b248:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b24c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b250:	d003      	beq.n	800b25a <__swsetup_r+0x7a>
 800b252:	4621      	mov	r1, r4
 800b254:	4628      	mov	r0, r5
 800b256:	f000 fd3b 	bl	800bcd0 <__smakebuf_r>
 800b25a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b25e:	f013 0201 	ands.w	r2, r3, #1
 800b262:	d00a      	beq.n	800b27a <__swsetup_r+0x9a>
 800b264:	2200      	movs	r2, #0
 800b266:	60a2      	str	r2, [r4, #8]
 800b268:	6962      	ldr	r2, [r4, #20]
 800b26a:	4252      	negs	r2, r2
 800b26c:	61a2      	str	r2, [r4, #24]
 800b26e:	6922      	ldr	r2, [r4, #16]
 800b270:	b942      	cbnz	r2, 800b284 <__swsetup_r+0xa4>
 800b272:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b276:	d1c5      	bne.n	800b204 <__swsetup_r+0x24>
 800b278:	bd38      	pop	{r3, r4, r5, pc}
 800b27a:	0799      	lsls	r1, r3, #30
 800b27c:	bf58      	it	pl
 800b27e:	6962      	ldrpl	r2, [r4, #20]
 800b280:	60a2      	str	r2, [r4, #8]
 800b282:	e7f4      	b.n	800b26e <__swsetup_r+0x8e>
 800b284:	2000      	movs	r0, #0
 800b286:	e7f7      	b.n	800b278 <__swsetup_r+0x98>
 800b288:	24000020 	.word	0x24000020

0800b28c <memset>:
 800b28c:	4402      	add	r2, r0
 800b28e:	4603      	mov	r3, r0
 800b290:	4293      	cmp	r3, r2
 800b292:	d100      	bne.n	800b296 <memset+0xa>
 800b294:	4770      	bx	lr
 800b296:	f803 1b01 	strb.w	r1, [r3], #1
 800b29a:	e7f9      	b.n	800b290 <memset+0x4>

0800b29c <_close_r>:
 800b29c:	b538      	push	{r3, r4, r5, lr}
 800b29e:	4d06      	ldr	r5, [pc, #24]	@ (800b2b8 <_close_r+0x1c>)
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	4608      	mov	r0, r1
 800b2a6:	602b      	str	r3, [r5, #0]
 800b2a8:	f7f6 fe33 	bl	8001f12 <_close>
 800b2ac:	1c43      	adds	r3, r0, #1
 800b2ae:	d102      	bne.n	800b2b6 <_close_r+0x1a>
 800b2b0:	682b      	ldr	r3, [r5, #0]
 800b2b2:	b103      	cbz	r3, 800b2b6 <_close_r+0x1a>
 800b2b4:	6023      	str	r3, [r4, #0]
 800b2b6:	bd38      	pop	{r3, r4, r5, pc}
 800b2b8:	240011d4 	.word	0x240011d4

0800b2bc <_lseek_r>:
 800b2bc:	b538      	push	{r3, r4, r5, lr}
 800b2be:	4d07      	ldr	r5, [pc, #28]	@ (800b2dc <_lseek_r+0x20>)
 800b2c0:	4604      	mov	r4, r0
 800b2c2:	4608      	mov	r0, r1
 800b2c4:	4611      	mov	r1, r2
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	602a      	str	r2, [r5, #0]
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	f7f6 fe48 	bl	8001f60 <_lseek>
 800b2d0:	1c43      	adds	r3, r0, #1
 800b2d2:	d102      	bne.n	800b2da <_lseek_r+0x1e>
 800b2d4:	682b      	ldr	r3, [r5, #0]
 800b2d6:	b103      	cbz	r3, 800b2da <_lseek_r+0x1e>
 800b2d8:	6023      	str	r3, [r4, #0]
 800b2da:	bd38      	pop	{r3, r4, r5, pc}
 800b2dc:	240011d4 	.word	0x240011d4

0800b2e0 <_read_r>:
 800b2e0:	b538      	push	{r3, r4, r5, lr}
 800b2e2:	4d07      	ldr	r5, [pc, #28]	@ (800b300 <_read_r+0x20>)
 800b2e4:	4604      	mov	r4, r0
 800b2e6:	4608      	mov	r0, r1
 800b2e8:	4611      	mov	r1, r2
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	602a      	str	r2, [r5, #0]
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	f7f6 fdd6 	bl	8001ea0 <_read>
 800b2f4:	1c43      	adds	r3, r0, #1
 800b2f6:	d102      	bne.n	800b2fe <_read_r+0x1e>
 800b2f8:	682b      	ldr	r3, [r5, #0]
 800b2fa:	b103      	cbz	r3, 800b2fe <_read_r+0x1e>
 800b2fc:	6023      	str	r3, [r4, #0]
 800b2fe:	bd38      	pop	{r3, r4, r5, pc}
 800b300:	240011d4 	.word	0x240011d4

0800b304 <_write_r>:
 800b304:	b538      	push	{r3, r4, r5, lr}
 800b306:	4d07      	ldr	r5, [pc, #28]	@ (800b324 <_write_r+0x20>)
 800b308:	4604      	mov	r4, r0
 800b30a:	4608      	mov	r0, r1
 800b30c:	4611      	mov	r1, r2
 800b30e:	2200      	movs	r2, #0
 800b310:	602a      	str	r2, [r5, #0]
 800b312:	461a      	mov	r2, r3
 800b314:	f7f6 fde1 	bl	8001eda <_write>
 800b318:	1c43      	adds	r3, r0, #1
 800b31a:	d102      	bne.n	800b322 <_write_r+0x1e>
 800b31c:	682b      	ldr	r3, [r5, #0]
 800b31e:	b103      	cbz	r3, 800b322 <_write_r+0x1e>
 800b320:	6023      	str	r3, [r4, #0]
 800b322:	bd38      	pop	{r3, r4, r5, pc}
 800b324:	240011d4 	.word	0x240011d4

0800b328 <__errno>:
 800b328:	4b01      	ldr	r3, [pc, #4]	@ (800b330 <__errno+0x8>)
 800b32a:	6818      	ldr	r0, [r3, #0]
 800b32c:	4770      	bx	lr
 800b32e:	bf00      	nop
 800b330:	24000020 	.word	0x24000020

0800b334 <__libc_init_array>:
 800b334:	b570      	push	{r4, r5, r6, lr}
 800b336:	4d0d      	ldr	r5, [pc, #52]	@ (800b36c <__libc_init_array+0x38>)
 800b338:	4c0d      	ldr	r4, [pc, #52]	@ (800b370 <__libc_init_array+0x3c>)
 800b33a:	1b64      	subs	r4, r4, r5
 800b33c:	10a4      	asrs	r4, r4, #2
 800b33e:	2600      	movs	r6, #0
 800b340:	42a6      	cmp	r6, r4
 800b342:	d109      	bne.n	800b358 <__libc_init_array+0x24>
 800b344:	4d0b      	ldr	r5, [pc, #44]	@ (800b374 <__libc_init_array+0x40>)
 800b346:	4c0c      	ldr	r4, [pc, #48]	@ (800b378 <__libc_init_array+0x44>)
 800b348:	f000 fd30 	bl	800bdac <_init>
 800b34c:	1b64      	subs	r4, r4, r5
 800b34e:	10a4      	asrs	r4, r4, #2
 800b350:	2600      	movs	r6, #0
 800b352:	42a6      	cmp	r6, r4
 800b354:	d105      	bne.n	800b362 <__libc_init_array+0x2e>
 800b356:	bd70      	pop	{r4, r5, r6, pc}
 800b358:	f855 3b04 	ldr.w	r3, [r5], #4
 800b35c:	4798      	blx	r3
 800b35e:	3601      	adds	r6, #1
 800b360:	e7ee      	b.n	800b340 <__libc_init_array+0xc>
 800b362:	f855 3b04 	ldr.w	r3, [r5], #4
 800b366:	4798      	blx	r3
 800b368:	3601      	adds	r6, #1
 800b36a:	e7f2      	b.n	800b352 <__libc_init_array+0x1e>
 800b36c:	0800dedc 	.word	0x0800dedc
 800b370:	0800dedc 	.word	0x0800dedc
 800b374:	0800dedc 	.word	0x0800dedc
 800b378:	0800dee0 	.word	0x0800dee0

0800b37c <__retarget_lock_init_recursive>:
 800b37c:	4770      	bx	lr

0800b37e <__retarget_lock_acquire_recursive>:
 800b37e:	4770      	bx	lr

0800b380 <__retarget_lock_release_recursive>:
 800b380:	4770      	bx	lr

0800b382 <memcpy>:
 800b382:	440a      	add	r2, r1
 800b384:	4291      	cmp	r1, r2
 800b386:	f100 33ff 	add.w	r3, r0, #4294967295
 800b38a:	d100      	bne.n	800b38e <memcpy+0xc>
 800b38c:	4770      	bx	lr
 800b38e:	b510      	push	{r4, lr}
 800b390:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b394:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b398:	4291      	cmp	r1, r2
 800b39a:	d1f9      	bne.n	800b390 <memcpy+0xe>
 800b39c:	bd10      	pop	{r4, pc}
	...

0800b3a0 <_free_r>:
 800b3a0:	b538      	push	{r3, r4, r5, lr}
 800b3a2:	4605      	mov	r5, r0
 800b3a4:	2900      	cmp	r1, #0
 800b3a6:	d041      	beq.n	800b42c <_free_r+0x8c>
 800b3a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3ac:	1f0c      	subs	r4, r1, #4
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	bfb8      	it	lt
 800b3b2:	18e4      	addlt	r4, r4, r3
 800b3b4:	f000 f8e0 	bl	800b578 <__malloc_lock>
 800b3b8:	4a1d      	ldr	r2, [pc, #116]	@ (800b430 <_free_r+0x90>)
 800b3ba:	6813      	ldr	r3, [r2, #0]
 800b3bc:	b933      	cbnz	r3, 800b3cc <_free_r+0x2c>
 800b3be:	6063      	str	r3, [r4, #4]
 800b3c0:	6014      	str	r4, [r2, #0]
 800b3c2:	4628      	mov	r0, r5
 800b3c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3c8:	f000 b8dc 	b.w	800b584 <__malloc_unlock>
 800b3cc:	42a3      	cmp	r3, r4
 800b3ce:	d908      	bls.n	800b3e2 <_free_r+0x42>
 800b3d0:	6820      	ldr	r0, [r4, #0]
 800b3d2:	1821      	adds	r1, r4, r0
 800b3d4:	428b      	cmp	r3, r1
 800b3d6:	bf01      	itttt	eq
 800b3d8:	6819      	ldreq	r1, [r3, #0]
 800b3da:	685b      	ldreq	r3, [r3, #4]
 800b3dc:	1809      	addeq	r1, r1, r0
 800b3de:	6021      	streq	r1, [r4, #0]
 800b3e0:	e7ed      	b.n	800b3be <_free_r+0x1e>
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	b10b      	cbz	r3, 800b3ec <_free_r+0x4c>
 800b3e8:	42a3      	cmp	r3, r4
 800b3ea:	d9fa      	bls.n	800b3e2 <_free_r+0x42>
 800b3ec:	6811      	ldr	r1, [r2, #0]
 800b3ee:	1850      	adds	r0, r2, r1
 800b3f0:	42a0      	cmp	r0, r4
 800b3f2:	d10b      	bne.n	800b40c <_free_r+0x6c>
 800b3f4:	6820      	ldr	r0, [r4, #0]
 800b3f6:	4401      	add	r1, r0
 800b3f8:	1850      	adds	r0, r2, r1
 800b3fa:	4283      	cmp	r3, r0
 800b3fc:	6011      	str	r1, [r2, #0]
 800b3fe:	d1e0      	bne.n	800b3c2 <_free_r+0x22>
 800b400:	6818      	ldr	r0, [r3, #0]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	6053      	str	r3, [r2, #4]
 800b406:	4408      	add	r0, r1
 800b408:	6010      	str	r0, [r2, #0]
 800b40a:	e7da      	b.n	800b3c2 <_free_r+0x22>
 800b40c:	d902      	bls.n	800b414 <_free_r+0x74>
 800b40e:	230c      	movs	r3, #12
 800b410:	602b      	str	r3, [r5, #0]
 800b412:	e7d6      	b.n	800b3c2 <_free_r+0x22>
 800b414:	6820      	ldr	r0, [r4, #0]
 800b416:	1821      	adds	r1, r4, r0
 800b418:	428b      	cmp	r3, r1
 800b41a:	bf04      	itt	eq
 800b41c:	6819      	ldreq	r1, [r3, #0]
 800b41e:	685b      	ldreq	r3, [r3, #4]
 800b420:	6063      	str	r3, [r4, #4]
 800b422:	bf04      	itt	eq
 800b424:	1809      	addeq	r1, r1, r0
 800b426:	6021      	streq	r1, [r4, #0]
 800b428:	6054      	str	r4, [r2, #4]
 800b42a:	e7ca      	b.n	800b3c2 <_free_r+0x22>
 800b42c:	bd38      	pop	{r3, r4, r5, pc}
 800b42e:	bf00      	nop
 800b430:	240011e0 	.word	0x240011e0

0800b434 <sbrk_aligned>:
 800b434:	b570      	push	{r4, r5, r6, lr}
 800b436:	4e0f      	ldr	r6, [pc, #60]	@ (800b474 <sbrk_aligned+0x40>)
 800b438:	460c      	mov	r4, r1
 800b43a:	6831      	ldr	r1, [r6, #0]
 800b43c:	4605      	mov	r5, r0
 800b43e:	b911      	cbnz	r1, 800b446 <sbrk_aligned+0x12>
 800b440:	f000 fca4 	bl	800bd8c <_sbrk_r>
 800b444:	6030      	str	r0, [r6, #0]
 800b446:	4621      	mov	r1, r4
 800b448:	4628      	mov	r0, r5
 800b44a:	f000 fc9f 	bl	800bd8c <_sbrk_r>
 800b44e:	1c43      	adds	r3, r0, #1
 800b450:	d103      	bne.n	800b45a <sbrk_aligned+0x26>
 800b452:	f04f 34ff 	mov.w	r4, #4294967295
 800b456:	4620      	mov	r0, r4
 800b458:	bd70      	pop	{r4, r5, r6, pc}
 800b45a:	1cc4      	adds	r4, r0, #3
 800b45c:	f024 0403 	bic.w	r4, r4, #3
 800b460:	42a0      	cmp	r0, r4
 800b462:	d0f8      	beq.n	800b456 <sbrk_aligned+0x22>
 800b464:	1a21      	subs	r1, r4, r0
 800b466:	4628      	mov	r0, r5
 800b468:	f000 fc90 	bl	800bd8c <_sbrk_r>
 800b46c:	3001      	adds	r0, #1
 800b46e:	d1f2      	bne.n	800b456 <sbrk_aligned+0x22>
 800b470:	e7ef      	b.n	800b452 <sbrk_aligned+0x1e>
 800b472:	bf00      	nop
 800b474:	240011dc 	.word	0x240011dc

0800b478 <_malloc_r>:
 800b478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b47c:	1ccd      	adds	r5, r1, #3
 800b47e:	f025 0503 	bic.w	r5, r5, #3
 800b482:	3508      	adds	r5, #8
 800b484:	2d0c      	cmp	r5, #12
 800b486:	bf38      	it	cc
 800b488:	250c      	movcc	r5, #12
 800b48a:	2d00      	cmp	r5, #0
 800b48c:	4606      	mov	r6, r0
 800b48e:	db01      	blt.n	800b494 <_malloc_r+0x1c>
 800b490:	42a9      	cmp	r1, r5
 800b492:	d904      	bls.n	800b49e <_malloc_r+0x26>
 800b494:	230c      	movs	r3, #12
 800b496:	6033      	str	r3, [r6, #0]
 800b498:	2000      	movs	r0, #0
 800b49a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b49e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b574 <_malloc_r+0xfc>
 800b4a2:	f000 f869 	bl	800b578 <__malloc_lock>
 800b4a6:	f8d8 3000 	ldr.w	r3, [r8]
 800b4aa:	461c      	mov	r4, r3
 800b4ac:	bb44      	cbnz	r4, 800b500 <_malloc_r+0x88>
 800b4ae:	4629      	mov	r1, r5
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	f7ff ffbf 	bl	800b434 <sbrk_aligned>
 800b4b6:	1c43      	adds	r3, r0, #1
 800b4b8:	4604      	mov	r4, r0
 800b4ba:	d158      	bne.n	800b56e <_malloc_r+0xf6>
 800b4bc:	f8d8 4000 	ldr.w	r4, [r8]
 800b4c0:	4627      	mov	r7, r4
 800b4c2:	2f00      	cmp	r7, #0
 800b4c4:	d143      	bne.n	800b54e <_malloc_r+0xd6>
 800b4c6:	2c00      	cmp	r4, #0
 800b4c8:	d04b      	beq.n	800b562 <_malloc_r+0xea>
 800b4ca:	6823      	ldr	r3, [r4, #0]
 800b4cc:	4639      	mov	r1, r7
 800b4ce:	4630      	mov	r0, r6
 800b4d0:	eb04 0903 	add.w	r9, r4, r3
 800b4d4:	f000 fc5a 	bl	800bd8c <_sbrk_r>
 800b4d8:	4581      	cmp	r9, r0
 800b4da:	d142      	bne.n	800b562 <_malloc_r+0xea>
 800b4dc:	6821      	ldr	r1, [r4, #0]
 800b4de:	1a6d      	subs	r5, r5, r1
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	f7ff ffa6 	bl	800b434 <sbrk_aligned>
 800b4e8:	3001      	adds	r0, #1
 800b4ea:	d03a      	beq.n	800b562 <_malloc_r+0xea>
 800b4ec:	6823      	ldr	r3, [r4, #0]
 800b4ee:	442b      	add	r3, r5
 800b4f0:	6023      	str	r3, [r4, #0]
 800b4f2:	f8d8 3000 	ldr.w	r3, [r8]
 800b4f6:	685a      	ldr	r2, [r3, #4]
 800b4f8:	bb62      	cbnz	r2, 800b554 <_malloc_r+0xdc>
 800b4fa:	f8c8 7000 	str.w	r7, [r8]
 800b4fe:	e00f      	b.n	800b520 <_malloc_r+0xa8>
 800b500:	6822      	ldr	r2, [r4, #0]
 800b502:	1b52      	subs	r2, r2, r5
 800b504:	d420      	bmi.n	800b548 <_malloc_r+0xd0>
 800b506:	2a0b      	cmp	r2, #11
 800b508:	d917      	bls.n	800b53a <_malloc_r+0xc2>
 800b50a:	1961      	adds	r1, r4, r5
 800b50c:	42a3      	cmp	r3, r4
 800b50e:	6025      	str	r5, [r4, #0]
 800b510:	bf18      	it	ne
 800b512:	6059      	strne	r1, [r3, #4]
 800b514:	6863      	ldr	r3, [r4, #4]
 800b516:	bf08      	it	eq
 800b518:	f8c8 1000 	streq.w	r1, [r8]
 800b51c:	5162      	str	r2, [r4, r5]
 800b51e:	604b      	str	r3, [r1, #4]
 800b520:	4630      	mov	r0, r6
 800b522:	f000 f82f 	bl	800b584 <__malloc_unlock>
 800b526:	f104 000b 	add.w	r0, r4, #11
 800b52a:	1d23      	adds	r3, r4, #4
 800b52c:	f020 0007 	bic.w	r0, r0, #7
 800b530:	1ac2      	subs	r2, r0, r3
 800b532:	bf1c      	itt	ne
 800b534:	1a1b      	subne	r3, r3, r0
 800b536:	50a3      	strne	r3, [r4, r2]
 800b538:	e7af      	b.n	800b49a <_malloc_r+0x22>
 800b53a:	6862      	ldr	r2, [r4, #4]
 800b53c:	42a3      	cmp	r3, r4
 800b53e:	bf0c      	ite	eq
 800b540:	f8c8 2000 	streq.w	r2, [r8]
 800b544:	605a      	strne	r2, [r3, #4]
 800b546:	e7eb      	b.n	800b520 <_malloc_r+0xa8>
 800b548:	4623      	mov	r3, r4
 800b54a:	6864      	ldr	r4, [r4, #4]
 800b54c:	e7ae      	b.n	800b4ac <_malloc_r+0x34>
 800b54e:	463c      	mov	r4, r7
 800b550:	687f      	ldr	r7, [r7, #4]
 800b552:	e7b6      	b.n	800b4c2 <_malloc_r+0x4a>
 800b554:	461a      	mov	r2, r3
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	42a3      	cmp	r3, r4
 800b55a:	d1fb      	bne.n	800b554 <_malloc_r+0xdc>
 800b55c:	2300      	movs	r3, #0
 800b55e:	6053      	str	r3, [r2, #4]
 800b560:	e7de      	b.n	800b520 <_malloc_r+0xa8>
 800b562:	230c      	movs	r3, #12
 800b564:	6033      	str	r3, [r6, #0]
 800b566:	4630      	mov	r0, r6
 800b568:	f000 f80c 	bl	800b584 <__malloc_unlock>
 800b56c:	e794      	b.n	800b498 <_malloc_r+0x20>
 800b56e:	6005      	str	r5, [r0, #0]
 800b570:	e7d6      	b.n	800b520 <_malloc_r+0xa8>
 800b572:	bf00      	nop
 800b574:	240011e0 	.word	0x240011e0

0800b578 <__malloc_lock>:
 800b578:	4801      	ldr	r0, [pc, #4]	@ (800b580 <__malloc_lock+0x8>)
 800b57a:	f7ff bf00 	b.w	800b37e <__retarget_lock_acquire_recursive>
 800b57e:	bf00      	nop
 800b580:	240011d8 	.word	0x240011d8

0800b584 <__malloc_unlock>:
 800b584:	4801      	ldr	r0, [pc, #4]	@ (800b58c <__malloc_unlock+0x8>)
 800b586:	f7ff befb 	b.w	800b380 <__retarget_lock_release_recursive>
 800b58a:	bf00      	nop
 800b58c:	240011d8 	.word	0x240011d8

0800b590 <__sfputc_r>:
 800b590:	6893      	ldr	r3, [r2, #8]
 800b592:	3b01      	subs	r3, #1
 800b594:	2b00      	cmp	r3, #0
 800b596:	b410      	push	{r4}
 800b598:	6093      	str	r3, [r2, #8]
 800b59a:	da08      	bge.n	800b5ae <__sfputc_r+0x1e>
 800b59c:	6994      	ldr	r4, [r2, #24]
 800b59e:	42a3      	cmp	r3, r4
 800b5a0:	db01      	blt.n	800b5a6 <__sfputc_r+0x16>
 800b5a2:	290a      	cmp	r1, #10
 800b5a4:	d103      	bne.n	800b5ae <__sfputc_r+0x1e>
 800b5a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5aa:	f7ff bdda 	b.w	800b162 <__swbuf_r>
 800b5ae:	6813      	ldr	r3, [r2, #0]
 800b5b0:	1c58      	adds	r0, r3, #1
 800b5b2:	6010      	str	r0, [r2, #0]
 800b5b4:	7019      	strb	r1, [r3, #0]
 800b5b6:	4608      	mov	r0, r1
 800b5b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5bc:	4770      	bx	lr

0800b5be <__sfputs_r>:
 800b5be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c0:	4606      	mov	r6, r0
 800b5c2:	460f      	mov	r7, r1
 800b5c4:	4614      	mov	r4, r2
 800b5c6:	18d5      	adds	r5, r2, r3
 800b5c8:	42ac      	cmp	r4, r5
 800b5ca:	d101      	bne.n	800b5d0 <__sfputs_r+0x12>
 800b5cc:	2000      	movs	r0, #0
 800b5ce:	e007      	b.n	800b5e0 <__sfputs_r+0x22>
 800b5d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5d4:	463a      	mov	r2, r7
 800b5d6:	4630      	mov	r0, r6
 800b5d8:	f7ff ffda 	bl	800b590 <__sfputc_r>
 800b5dc:	1c43      	adds	r3, r0, #1
 800b5de:	d1f3      	bne.n	800b5c8 <__sfputs_r+0xa>
 800b5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b5e4 <_vfiprintf_r>:
 800b5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e8:	460d      	mov	r5, r1
 800b5ea:	b09d      	sub	sp, #116	@ 0x74
 800b5ec:	4614      	mov	r4, r2
 800b5ee:	4698      	mov	r8, r3
 800b5f0:	4606      	mov	r6, r0
 800b5f2:	b118      	cbz	r0, 800b5fc <_vfiprintf_r+0x18>
 800b5f4:	6a03      	ldr	r3, [r0, #32]
 800b5f6:	b90b      	cbnz	r3, 800b5fc <_vfiprintf_r+0x18>
 800b5f8:	f7ff fcca 	bl	800af90 <__sinit>
 800b5fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5fe:	07d9      	lsls	r1, r3, #31
 800b600:	d405      	bmi.n	800b60e <_vfiprintf_r+0x2a>
 800b602:	89ab      	ldrh	r3, [r5, #12]
 800b604:	059a      	lsls	r2, r3, #22
 800b606:	d402      	bmi.n	800b60e <_vfiprintf_r+0x2a>
 800b608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b60a:	f7ff feb8 	bl	800b37e <__retarget_lock_acquire_recursive>
 800b60e:	89ab      	ldrh	r3, [r5, #12]
 800b610:	071b      	lsls	r3, r3, #28
 800b612:	d501      	bpl.n	800b618 <_vfiprintf_r+0x34>
 800b614:	692b      	ldr	r3, [r5, #16]
 800b616:	b99b      	cbnz	r3, 800b640 <_vfiprintf_r+0x5c>
 800b618:	4629      	mov	r1, r5
 800b61a:	4630      	mov	r0, r6
 800b61c:	f7ff fde0 	bl	800b1e0 <__swsetup_r>
 800b620:	b170      	cbz	r0, 800b640 <_vfiprintf_r+0x5c>
 800b622:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b624:	07dc      	lsls	r4, r3, #31
 800b626:	d504      	bpl.n	800b632 <_vfiprintf_r+0x4e>
 800b628:	f04f 30ff 	mov.w	r0, #4294967295
 800b62c:	b01d      	add	sp, #116	@ 0x74
 800b62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b632:	89ab      	ldrh	r3, [r5, #12]
 800b634:	0598      	lsls	r0, r3, #22
 800b636:	d4f7      	bmi.n	800b628 <_vfiprintf_r+0x44>
 800b638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b63a:	f7ff fea1 	bl	800b380 <__retarget_lock_release_recursive>
 800b63e:	e7f3      	b.n	800b628 <_vfiprintf_r+0x44>
 800b640:	2300      	movs	r3, #0
 800b642:	9309      	str	r3, [sp, #36]	@ 0x24
 800b644:	2320      	movs	r3, #32
 800b646:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b64a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b64e:	2330      	movs	r3, #48	@ 0x30
 800b650:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b800 <_vfiprintf_r+0x21c>
 800b654:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b658:	f04f 0901 	mov.w	r9, #1
 800b65c:	4623      	mov	r3, r4
 800b65e:	469a      	mov	sl, r3
 800b660:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b664:	b10a      	cbz	r2, 800b66a <_vfiprintf_r+0x86>
 800b666:	2a25      	cmp	r2, #37	@ 0x25
 800b668:	d1f9      	bne.n	800b65e <_vfiprintf_r+0x7a>
 800b66a:	ebba 0b04 	subs.w	fp, sl, r4
 800b66e:	d00b      	beq.n	800b688 <_vfiprintf_r+0xa4>
 800b670:	465b      	mov	r3, fp
 800b672:	4622      	mov	r2, r4
 800b674:	4629      	mov	r1, r5
 800b676:	4630      	mov	r0, r6
 800b678:	f7ff ffa1 	bl	800b5be <__sfputs_r>
 800b67c:	3001      	adds	r0, #1
 800b67e:	f000 80a7 	beq.w	800b7d0 <_vfiprintf_r+0x1ec>
 800b682:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b684:	445a      	add	r2, fp
 800b686:	9209      	str	r2, [sp, #36]	@ 0x24
 800b688:	f89a 3000 	ldrb.w	r3, [sl]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	f000 809f 	beq.w	800b7d0 <_vfiprintf_r+0x1ec>
 800b692:	2300      	movs	r3, #0
 800b694:	f04f 32ff 	mov.w	r2, #4294967295
 800b698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b69c:	f10a 0a01 	add.w	sl, sl, #1
 800b6a0:	9304      	str	r3, [sp, #16]
 800b6a2:	9307      	str	r3, [sp, #28]
 800b6a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b6a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b6aa:	4654      	mov	r4, sl
 800b6ac:	2205      	movs	r2, #5
 800b6ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6b2:	4853      	ldr	r0, [pc, #332]	@ (800b800 <_vfiprintf_r+0x21c>)
 800b6b4:	f7f4 fe14 	bl	80002e0 <memchr>
 800b6b8:	9a04      	ldr	r2, [sp, #16]
 800b6ba:	b9d8      	cbnz	r0, 800b6f4 <_vfiprintf_r+0x110>
 800b6bc:	06d1      	lsls	r1, r2, #27
 800b6be:	bf44      	itt	mi
 800b6c0:	2320      	movmi	r3, #32
 800b6c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6c6:	0713      	lsls	r3, r2, #28
 800b6c8:	bf44      	itt	mi
 800b6ca:	232b      	movmi	r3, #43	@ 0x2b
 800b6cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6d0:	f89a 3000 	ldrb.w	r3, [sl]
 800b6d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6d6:	d015      	beq.n	800b704 <_vfiprintf_r+0x120>
 800b6d8:	9a07      	ldr	r2, [sp, #28]
 800b6da:	4654      	mov	r4, sl
 800b6dc:	2000      	movs	r0, #0
 800b6de:	f04f 0c0a 	mov.w	ip, #10
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6e8:	3b30      	subs	r3, #48	@ 0x30
 800b6ea:	2b09      	cmp	r3, #9
 800b6ec:	d94b      	bls.n	800b786 <_vfiprintf_r+0x1a2>
 800b6ee:	b1b0      	cbz	r0, 800b71e <_vfiprintf_r+0x13a>
 800b6f0:	9207      	str	r2, [sp, #28]
 800b6f2:	e014      	b.n	800b71e <_vfiprintf_r+0x13a>
 800b6f4:	eba0 0308 	sub.w	r3, r0, r8
 800b6f8:	fa09 f303 	lsl.w	r3, r9, r3
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	9304      	str	r3, [sp, #16]
 800b700:	46a2      	mov	sl, r4
 800b702:	e7d2      	b.n	800b6aa <_vfiprintf_r+0xc6>
 800b704:	9b03      	ldr	r3, [sp, #12]
 800b706:	1d19      	adds	r1, r3, #4
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	9103      	str	r1, [sp, #12]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	bfbb      	ittet	lt
 800b710:	425b      	neglt	r3, r3
 800b712:	f042 0202 	orrlt.w	r2, r2, #2
 800b716:	9307      	strge	r3, [sp, #28]
 800b718:	9307      	strlt	r3, [sp, #28]
 800b71a:	bfb8      	it	lt
 800b71c:	9204      	strlt	r2, [sp, #16]
 800b71e:	7823      	ldrb	r3, [r4, #0]
 800b720:	2b2e      	cmp	r3, #46	@ 0x2e
 800b722:	d10a      	bne.n	800b73a <_vfiprintf_r+0x156>
 800b724:	7863      	ldrb	r3, [r4, #1]
 800b726:	2b2a      	cmp	r3, #42	@ 0x2a
 800b728:	d132      	bne.n	800b790 <_vfiprintf_r+0x1ac>
 800b72a:	9b03      	ldr	r3, [sp, #12]
 800b72c:	1d1a      	adds	r2, r3, #4
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	9203      	str	r2, [sp, #12]
 800b732:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b736:	3402      	adds	r4, #2
 800b738:	9305      	str	r3, [sp, #20]
 800b73a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b810 <_vfiprintf_r+0x22c>
 800b73e:	7821      	ldrb	r1, [r4, #0]
 800b740:	2203      	movs	r2, #3
 800b742:	4650      	mov	r0, sl
 800b744:	f7f4 fdcc 	bl	80002e0 <memchr>
 800b748:	b138      	cbz	r0, 800b75a <_vfiprintf_r+0x176>
 800b74a:	9b04      	ldr	r3, [sp, #16]
 800b74c:	eba0 000a 	sub.w	r0, r0, sl
 800b750:	2240      	movs	r2, #64	@ 0x40
 800b752:	4082      	lsls	r2, r0
 800b754:	4313      	orrs	r3, r2
 800b756:	3401      	adds	r4, #1
 800b758:	9304      	str	r3, [sp, #16]
 800b75a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b75e:	4829      	ldr	r0, [pc, #164]	@ (800b804 <_vfiprintf_r+0x220>)
 800b760:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b764:	2206      	movs	r2, #6
 800b766:	f7f4 fdbb 	bl	80002e0 <memchr>
 800b76a:	2800      	cmp	r0, #0
 800b76c:	d03f      	beq.n	800b7ee <_vfiprintf_r+0x20a>
 800b76e:	4b26      	ldr	r3, [pc, #152]	@ (800b808 <_vfiprintf_r+0x224>)
 800b770:	bb1b      	cbnz	r3, 800b7ba <_vfiprintf_r+0x1d6>
 800b772:	9b03      	ldr	r3, [sp, #12]
 800b774:	3307      	adds	r3, #7
 800b776:	f023 0307 	bic.w	r3, r3, #7
 800b77a:	3308      	adds	r3, #8
 800b77c:	9303      	str	r3, [sp, #12]
 800b77e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b780:	443b      	add	r3, r7
 800b782:	9309      	str	r3, [sp, #36]	@ 0x24
 800b784:	e76a      	b.n	800b65c <_vfiprintf_r+0x78>
 800b786:	fb0c 3202 	mla	r2, ip, r2, r3
 800b78a:	460c      	mov	r4, r1
 800b78c:	2001      	movs	r0, #1
 800b78e:	e7a8      	b.n	800b6e2 <_vfiprintf_r+0xfe>
 800b790:	2300      	movs	r3, #0
 800b792:	3401      	adds	r4, #1
 800b794:	9305      	str	r3, [sp, #20]
 800b796:	4619      	mov	r1, r3
 800b798:	f04f 0c0a 	mov.w	ip, #10
 800b79c:	4620      	mov	r0, r4
 800b79e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7a2:	3a30      	subs	r2, #48	@ 0x30
 800b7a4:	2a09      	cmp	r2, #9
 800b7a6:	d903      	bls.n	800b7b0 <_vfiprintf_r+0x1cc>
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d0c6      	beq.n	800b73a <_vfiprintf_r+0x156>
 800b7ac:	9105      	str	r1, [sp, #20]
 800b7ae:	e7c4      	b.n	800b73a <_vfiprintf_r+0x156>
 800b7b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e7f0      	b.n	800b79c <_vfiprintf_r+0x1b8>
 800b7ba:	ab03      	add	r3, sp, #12
 800b7bc:	9300      	str	r3, [sp, #0]
 800b7be:	462a      	mov	r2, r5
 800b7c0:	4b12      	ldr	r3, [pc, #72]	@ (800b80c <_vfiprintf_r+0x228>)
 800b7c2:	a904      	add	r1, sp, #16
 800b7c4:	4630      	mov	r0, r6
 800b7c6:	f3af 8000 	nop.w
 800b7ca:	4607      	mov	r7, r0
 800b7cc:	1c78      	adds	r0, r7, #1
 800b7ce:	d1d6      	bne.n	800b77e <_vfiprintf_r+0x19a>
 800b7d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7d2:	07d9      	lsls	r1, r3, #31
 800b7d4:	d405      	bmi.n	800b7e2 <_vfiprintf_r+0x1fe>
 800b7d6:	89ab      	ldrh	r3, [r5, #12]
 800b7d8:	059a      	lsls	r2, r3, #22
 800b7da:	d402      	bmi.n	800b7e2 <_vfiprintf_r+0x1fe>
 800b7dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7de:	f7ff fdcf 	bl	800b380 <__retarget_lock_release_recursive>
 800b7e2:	89ab      	ldrh	r3, [r5, #12]
 800b7e4:	065b      	lsls	r3, r3, #25
 800b7e6:	f53f af1f 	bmi.w	800b628 <_vfiprintf_r+0x44>
 800b7ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b7ec:	e71e      	b.n	800b62c <_vfiprintf_r+0x48>
 800b7ee:	ab03      	add	r3, sp, #12
 800b7f0:	9300      	str	r3, [sp, #0]
 800b7f2:	462a      	mov	r2, r5
 800b7f4:	4b05      	ldr	r3, [pc, #20]	@ (800b80c <_vfiprintf_r+0x228>)
 800b7f6:	a904      	add	r1, sp, #16
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	f000 f879 	bl	800b8f0 <_printf_i>
 800b7fe:	e7e4      	b.n	800b7ca <_vfiprintf_r+0x1e6>
 800b800:	0800dea0 	.word	0x0800dea0
 800b804:	0800deaa 	.word	0x0800deaa
 800b808:	00000000 	.word	0x00000000
 800b80c:	0800b5bf 	.word	0x0800b5bf
 800b810:	0800dea6 	.word	0x0800dea6

0800b814 <_printf_common>:
 800b814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b818:	4616      	mov	r6, r2
 800b81a:	4698      	mov	r8, r3
 800b81c:	688a      	ldr	r2, [r1, #8]
 800b81e:	690b      	ldr	r3, [r1, #16]
 800b820:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b824:	4293      	cmp	r3, r2
 800b826:	bfb8      	it	lt
 800b828:	4613      	movlt	r3, r2
 800b82a:	6033      	str	r3, [r6, #0]
 800b82c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b830:	4607      	mov	r7, r0
 800b832:	460c      	mov	r4, r1
 800b834:	b10a      	cbz	r2, 800b83a <_printf_common+0x26>
 800b836:	3301      	adds	r3, #1
 800b838:	6033      	str	r3, [r6, #0]
 800b83a:	6823      	ldr	r3, [r4, #0]
 800b83c:	0699      	lsls	r1, r3, #26
 800b83e:	bf42      	ittt	mi
 800b840:	6833      	ldrmi	r3, [r6, #0]
 800b842:	3302      	addmi	r3, #2
 800b844:	6033      	strmi	r3, [r6, #0]
 800b846:	6825      	ldr	r5, [r4, #0]
 800b848:	f015 0506 	ands.w	r5, r5, #6
 800b84c:	d106      	bne.n	800b85c <_printf_common+0x48>
 800b84e:	f104 0a19 	add.w	sl, r4, #25
 800b852:	68e3      	ldr	r3, [r4, #12]
 800b854:	6832      	ldr	r2, [r6, #0]
 800b856:	1a9b      	subs	r3, r3, r2
 800b858:	42ab      	cmp	r3, r5
 800b85a:	dc26      	bgt.n	800b8aa <_printf_common+0x96>
 800b85c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b860:	6822      	ldr	r2, [r4, #0]
 800b862:	3b00      	subs	r3, #0
 800b864:	bf18      	it	ne
 800b866:	2301      	movne	r3, #1
 800b868:	0692      	lsls	r2, r2, #26
 800b86a:	d42b      	bmi.n	800b8c4 <_printf_common+0xb0>
 800b86c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b870:	4641      	mov	r1, r8
 800b872:	4638      	mov	r0, r7
 800b874:	47c8      	blx	r9
 800b876:	3001      	adds	r0, #1
 800b878:	d01e      	beq.n	800b8b8 <_printf_common+0xa4>
 800b87a:	6823      	ldr	r3, [r4, #0]
 800b87c:	6922      	ldr	r2, [r4, #16]
 800b87e:	f003 0306 	and.w	r3, r3, #6
 800b882:	2b04      	cmp	r3, #4
 800b884:	bf02      	ittt	eq
 800b886:	68e5      	ldreq	r5, [r4, #12]
 800b888:	6833      	ldreq	r3, [r6, #0]
 800b88a:	1aed      	subeq	r5, r5, r3
 800b88c:	68a3      	ldr	r3, [r4, #8]
 800b88e:	bf0c      	ite	eq
 800b890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b894:	2500      	movne	r5, #0
 800b896:	4293      	cmp	r3, r2
 800b898:	bfc4      	itt	gt
 800b89a:	1a9b      	subgt	r3, r3, r2
 800b89c:	18ed      	addgt	r5, r5, r3
 800b89e:	2600      	movs	r6, #0
 800b8a0:	341a      	adds	r4, #26
 800b8a2:	42b5      	cmp	r5, r6
 800b8a4:	d11a      	bne.n	800b8dc <_printf_common+0xc8>
 800b8a6:	2000      	movs	r0, #0
 800b8a8:	e008      	b.n	800b8bc <_printf_common+0xa8>
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	4652      	mov	r2, sl
 800b8ae:	4641      	mov	r1, r8
 800b8b0:	4638      	mov	r0, r7
 800b8b2:	47c8      	blx	r9
 800b8b4:	3001      	adds	r0, #1
 800b8b6:	d103      	bne.n	800b8c0 <_printf_common+0xac>
 800b8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8c0:	3501      	adds	r5, #1
 800b8c2:	e7c6      	b.n	800b852 <_printf_common+0x3e>
 800b8c4:	18e1      	adds	r1, r4, r3
 800b8c6:	1c5a      	adds	r2, r3, #1
 800b8c8:	2030      	movs	r0, #48	@ 0x30
 800b8ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b8ce:	4422      	add	r2, r4
 800b8d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b8d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b8d8:	3302      	adds	r3, #2
 800b8da:	e7c7      	b.n	800b86c <_printf_common+0x58>
 800b8dc:	2301      	movs	r3, #1
 800b8de:	4622      	mov	r2, r4
 800b8e0:	4641      	mov	r1, r8
 800b8e2:	4638      	mov	r0, r7
 800b8e4:	47c8      	blx	r9
 800b8e6:	3001      	adds	r0, #1
 800b8e8:	d0e6      	beq.n	800b8b8 <_printf_common+0xa4>
 800b8ea:	3601      	adds	r6, #1
 800b8ec:	e7d9      	b.n	800b8a2 <_printf_common+0x8e>
	...

0800b8f0 <_printf_i>:
 800b8f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8f4:	7e0f      	ldrb	r7, [r1, #24]
 800b8f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b8f8:	2f78      	cmp	r7, #120	@ 0x78
 800b8fa:	4691      	mov	r9, r2
 800b8fc:	4680      	mov	r8, r0
 800b8fe:	460c      	mov	r4, r1
 800b900:	469a      	mov	sl, r3
 800b902:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b906:	d807      	bhi.n	800b918 <_printf_i+0x28>
 800b908:	2f62      	cmp	r7, #98	@ 0x62
 800b90a:	d80a      	bhi.n	800b922 <_printf_i+0x32>
 800b90c:	2f00      	cmp	r7, #0
 800b90e:	f000 80d1 	beq.w	800bab4 <_printf_i+0x1c4>
 800b912:	2f58      	cmp	r7, #88	@ 0x58
 800b914:	f000 80b8 	beq.w	800ba88 <_printf_i+0x198>
 800b918:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b91c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b920:	e03a      	b.n	800b998 <_printf_i+0xa8>
 800b922:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b926:	2b15      	cmp	r3, #21
 800b928:	d8f6      	bhi.n	800b918 <_printf_i+0x28>
 800b92a:	a101      	add	r1, pc, #4	@ (adr r1, 800b930 <_printf_i+0x40>)
 800b92c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b930:	0800b989 	.word	0x0800b989
 800b934:	0800b99d 	.word	0x0800b99d
 800b938:	0800b919 	.word	0x0800b919
 800b93c:	0800b919 	.word	0x0800b919
 800b940:	0800b919 	.word	0x0800b919
 800b944:	0800b919 	.word	0x0800b919
 800b948:	0800b99d 	.word	0x0800b99d
 800b94c:	0800b919 	.word	0x0800b919
 800b950:	0800b919 	.word	0x0800b919
 800b954:	0800b919 	.word	0x0800b919
 800b958:	0800b919 	.word	0x0800b919
 800b95c:	0800ba9b 	.word	0x0800ba9b
 800b960:	0800b9c7 	.word	0x0800b9c7
 800b964:	0800ba55 	.word	0x0800ba55
 800b968:	0800b919 	.word	0x0800b919
 800b96c:	0800b919 	.word	0x0800b919
 800b970:	0800babd 	.word	0x0800babd
 800b974:	0800b919 	.word	0x0800b919
 800b978:	0800b9c7 	.word	0x0800b9c7
 800b97c:	0800b919 	.word	0x0800b919
 800b980:	0800b919 	.word	0x0800b919
 800b984:	0800ba5d 	.word	0x0800ba5d
 800b988:	6833      	ldr	r3, [r6, #0]
 800b98a:	1d1a      	adds	r2, r3, #4
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	6032      	str	r2, [r6, #0]
 800b990:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b994:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b998:	2301      	movs	r3, #1
 800b99a:	e09c      	b.n	800bad6 <_printf_i+0x1e6>
 800b99c:	6833      	ldr	r3, [r6, #0]
 800b99e:	6820      	ldr	r0, [r4, #0]
 800b9a0:	1d19      	adds	r1, r3, #4
 800b9a2:	6031      	str	r1, [r6, #0]
 800b9a4:	0606      	lsls	r6, r0, #24
 800b9a6:	d501      	bpl.n	800b9ac <_printf_i+0xbc>
 800b9a8:	681d      	ldr	r5, [r3, #0]
 800b9aa:	e003      	b.n	800b9b4 <_printf_i+0xc4>
 800b9ac:	0645      	lsls	r5, r0, #25
 800b9ae:	d5fb      	bpl.n	800b9a8 <_printf_i+0xb8>
 800b9b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b9b4:	2d00      	cmp	r5, #0
 800b9b6:	da03      	bge.n	800b9c0 <_printf_i+0xd0>
 800b9b8:	232d      	movs	r3, #45	@ 0x2d
 800b9ba:	426d      	negs	r5, r5
 800b9bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9c0:	4858      	ldr	r0, [pc, #352]	@ (800bb24 <_printf_i+0x234>)
 800b9c2:	230a      	movs	r3, #10
 800b9c4:	e011      	b.n	800b9ea <_printf_i+0xfa>
 800b9c6:	6821      	ldr	r1, [r4, #0]
 800b9c8:	6833      	ldr	r3, [r6, #0]
 800b9ca:	0608      	lsls	r0, r1, #24
 800b9cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b9d0:	d402      	bmi.n	800b9d8 <_printf_i+0xe8>
 800b9d2:	0649      	lsls	r1, r1, #25
 800b9d4:	bf48      	it	mi
 800b9d6:	b2ad      	uxthmi	r5, r5
 800b9d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b9da:	4852      	ldr	r0, [pc, #328]	@ (800bb24 <_printf_i+0x234>)
 800b9dc:	6033      	str	r3, [r6, #0]
 800b9de:	bf14      	ite	ne
 800b9e0:	230a      	movne	r3, #10
 800b9e2:	2308      	moveq	r3, #8
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b9ea:	6866      	ldr	r6, [r4, #4]
 800b9ec:	60a6      	str	r6, [r4, #8]
 800b9ee:	2e00      	cmp	r6, #0
 800b9f0:	db05      	blt.n	800b9fe <_printf_i+0x10e>
 800b9f2:	6821      	ldr	r1, [r4, #0]
 800b9f4:	432e      	orrs	r6, r5
 800b9f6:	f021 0104 	bic.w	r1, r1, #4
 800b9fa:	6021      	str	r1, [r4, #0]
 800b9fc:	d04b      	beq.n	800ba96 <_printf_i+0x1a6>
 800b9fe:	4616      	mov	r6, r2
 800ba00:	fbb5 f1f3 	udiv	r1, r5, r3
 800ba04:	fb03 5711 	mls	r7, r3, r1, r5
 800ba08:	5dc7      	ldrb	r7, [r0, r7]
 800ba0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ba0e:	462f      	mov	r7, r5
 800ba10:	42bb      	cmp	r3, r7
 800ba12:	460d      	mov	r5, r1
 800ba14:	d9f4      	bls.n	800ba00 <_printf_i+0x110>
 800ba16:	2b08      	cmp	r3, #8
 800ba18:	d10b      	bne.n	800ba32 <_printf_i+0x142>
 800ba1a:	6823      	ldr	r3, [r4, #0]
 800ba1c:	07df      	lsls	r7, r3, #31
 800ba1e:	d508      	bpl.n	800ba32 <_printf_i+0x142>
 800ba20:	6923      	ldr	r3, [r4, #16]
 800ba22:	6861      	ldr	r1, [r4, #4]
 800ba24:	4299      	cmp	r1, r3
 800ba26:	bfde      	ittt	le
 800ba28:	2330      	movle	r3, #48	@ 0x30
 800ba2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ba32:	1b92      	subs	r2, r2, r6
 800ba34:	6122      	str	r2, [r4, #16]
 800ba36:	f8cd a000 	str.w	sl, [sp]
 800ba3a:	464b      	mov	r3, r9
 800ba3c:	aa03      	add	r2, sp, #12
 800ba3e:	4621      	mov	r1, r4
 800ba40:	4640      	mov	r0, r8
 800ba42:	f7ff fee7 	bl	800b814 <_printf_common>
 800ba46:	3001      	adds	r0, #1
 800ba48:	d14a      	bne.n	800bae0 <_printf_i+0x1f0>
 800ba4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba4e:	b004      	add	sp, #16
 800ba50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba54:	6823      	ldr	r3, [r4, #0]
 800ba56:	f043 0320 	orr.w	r3, r3, #32
 800ba5a:	6023      	str	r3, [r4, #0]
 800ba5c:	4832      	ldr	r0, [pc, #200]	@ (800bb28 <_printf_i+0x238>)
 800ba5e:	2778      	movs	r7, #120	@ 0x78
 800ba60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba64:	6823      	ldr	r3, [r4, #0]
 800ba66:	6831      	ldr	r1, [r6, #0]
 800ba68:	061f      	lsls	r7, r3, #24
 800ba6a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba6e:	d402      	bmi.n	800ba76 <_printf_i+0x186>
 800ba70:	065f      	lsls	r7, r3, #25
 800ba72:	bf48      	it	mi
 800ba74:	b2ad      	uxthmi	r5, r5
 800ba76:	6031      	str	r1, [r6, #0]
 800ba78:	07d9      	lsls	r1, r3, #31
 800ba7a:	bf44      	itt	mi
 800ba7c:	f043 0320 	orrmi.w	r3, r3, #32
 800ba80:	6023      	strmi	r3, [r4, #0]
 800ba82:	b11d      	cbz	r5, 800ba8c <_printf_i+0x19c>
 800ba84:	2310      	movs	r3, #16
 800ba86:	e7ad      	b.n	800b9e4 <_printf_i+0xf4>
 800ba88:	4826      	ldr	r0, [pc, #152]	@ (800bb24 <_printf_i+0x234>)
 800ba8a:	e7e9      	b.n	800ba60 <_printf_i+0x170>
 800ba8c:	6823      	ldr	r3, [r4, #0]
 800ba8e:	f023 0320 	bic.w	r3, r3, #32
 800ba92:	6023      	str	r3, [r4, #0]
 800ba94:	e7f6      	b.n	800ba84 <_printf_i+0x194>
 800ba96:	4616      	mov	r6, r2
 800ba98:	e7bd      	b.n	800ba16 <_printf_i+0x126>
 800ba9a:	6833      	ldr	r3, [r6, #0]
 800ba9c:	6825      	ldr	r5, [r4, #0]
 800ba9e:	6961      	ldr	r1, [r4, #20]
 800baa0:	1d18      	adds	r0, r3, #4
 800baa2:	6030      	str	r0, [r6, #0]
 800baa4:	062e      	lsls	r6, r5, #24
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	d501      	bpl.n	800baae <_printf_i+0x1be>
 800baaa:	6019      	str	r1, [r3, #0]
 800baac:	e002      	b.n	800bab4 <_printf_i+0x1c4>
 800baae:	0668      	lsls	r0, r5, #25
 800bab0:	d5fb      	bpl.n	800baaa <_printf_i+0x1ba>
 800bab2:	8019      	strh	r1, [r3, #0]
 800bab4:	2300      	movs	r3, #0
 800bab6:	6123      	str	r3, [r4, #16]
 800bab8:	4616      	mov	r6, r2
 800baba:	e7bc      	b.n	800ba36 <_printf_i+0x146>
 800babc:	6833      	ldr	r3, [r6, #0]
 800babe:	1d1a      	adds	r2, r3, #4
 800bac0:	6032      	str	r2, [r6, #0]
 800bac2:	681e      	ldr	r6, [r3, #0]
 800bac4:	6862      	ldr	r2, [r4, #4]
 800bac6:	2100      	movs	r1, #0
 800bac8:	4630      	mov	r0, r6
 800baca:	f7f4 fc09 	bl	80002e0 <memchr>
 800bace:	b108      	cbz	r0, 800bad4 <_printf_i+0x1e4>
 800bad0:	1b80      	subs	r0, r0, r6
 800bad2:	6060      	str	r0, [r4, #4]
 800bad4:	6863      	ldr	r3, [r4, #4]
 800bad6:	6123      	str	r3, [r4, #16]
 800bad8:	2300      	movs	r3, #0
 800bada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bade:	e7aa      	b.n	800ba36 <_printf_i+0x146>
 800bae0:	6923      	ldr	r3, [r4, #16]
 800bae2:	4632      	mov	r2, r6
 800bae4:	4649      	mov	r1, r9
 800bae6:	4640      	mov	r0, r8
 800bae8:	47d0      	blx	sl
 800baea:	3001      	adds	r0, #1
 800baec:	d0ad      	beq.n	800ba4a <_printf_i+0x15a>
 800baee:	6823      	ldr	r3, [r4, #0]
 800baf0:	079b      	lsls	r3, r3, #30
 800baf2:	d413      	bmi.n	800bb1c <_printf_i+0x22c>
 800baf4:	68e0      	ldr	r0, [r4, #12]
 800baf6:	9b03      	ldr	r3, [sp, #12]
 800baf8:	4298      	cmp	r0, r3
 800bafa:	bfb8      	it	lt
 800bafc:	4618      	movlt	r0, r3
 800bafe:	e7a6      	b.n	800ba4e <_printf_i+0x15e>
 800bb00:	2301      	movs	r3, #1
 800bb02:	4632      	mov	r2, r6
 800bb04:	4649      	mov	r1, r9
 800bb06:	4640      	mov	r0, r8
 800bb08:	47d0      	blx	sl
 800bb0a:	3001      	adds	r0, #1
 800bb0c:	d09d      	beq.n	800ba4a <_printf_i+0x15a>
 800bb0e:	3501      	adds	r5, #1
 800bb10:	68e3      	ldr	r3, [r4, #12]
 800bb12:	9903      	ldr	r1, [sp, #12]
 800bb14:	1a5b      	subs	r3, r3, r1
 800bb16:	42ab      	cmp	r3, r5
 800bb18:	dcf2      	bgt.n	800bb00 <_printf_i+0x210>
 800bb1a:	e7eb      	b.n	800baf4 <_printf_i+0x204>
 800bb1c:	2500      	movs	r5, #0
 800bb1e:	f104 0619 	add.w	r6, r4, #25
 800bb22:	e7f5      	b.n	800bb10 <_printf_i+0x220>
 800bb24:	0800deb1 	.word	0x0800deb1
 800bb28:	0800dec2 	.word	0x0800dec2

0800bb2c <__sflush_r>:
 800bb2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb34:	0716      	lsls	r6, r2, #28
 800bb36:	4605      	mov	r5, r0
 800bb38:	460c      	mov	r4, r1
 800bb3a:	d454      	bmi.n	800bbe6 <__sflush_r+0xba>
 800bb3c:	684b      	ldr	r3, [r1, #4]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	dc02      	bgt.n	800bb48 <__sflush_r+0x1c>
 800bb42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	dd48      	ble.n	800bbda <__sflush_r+0xae>
 800bb48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb4a:	2e00      	cmp	r6, #0
 800bb4c:	d045      	beq.n	800bbda <__sflush_r+0xae>
 800bb4e:	2300      	movs	r3, #0
 800bb50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bb54:	682f      	ldr	r7, [r5, #0]
 800bb56:	6a21      	ldr	r1, [r4, #32]
 800bb58:	602b      	str	r3, [r5, #0]
 800bb5a:	d030      	beq.n	800bbbe <__sflush_r+0x92>
 800bb5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb5e:	89a3      	ldrh	r3, [r4, #12]
 800bb60:	0759      	lsls	r1, r3, #29
 800bb62:	d505      	bpl.n	800bb70 <__sflush_r+0x44>
 800bb64:	6863      	ldr	r3, [r4, #4]
 800bb66:	1ad2      	subs	r2, r2, r3
 800bb68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb6a:	b10b      	cbz	r3, 800bb70 <__sflush_r+0x44>
 800bb6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb6e:	1ad2      	subs	r2, r2, r3
 800bb70:	2300      	movs	r3, #0
 800bb72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb74:	6a21      	ldr	r1, [r4, #32]
 800bb76:	4628      	mov	r0, r5
 800bb78:	47b0      	blx	r6
 800bb7a:	1c43      	adds	r3, r0, #1
 800bb7c:	89a3      	ldrh	r3, [r4, #12]
 800bb7e:	d106      	bne.n	800bb8e <__sflush_r+0x62>
 800bb80:	6829      	ldr	r1, [r5, #0]
 800bb82:	291d      	cmp	r1, #29
 800bb84:	d82b      	bhi.n	800bbde <__sflush_r+0xb2>
 800bb86:	4a2a      	ldr	r2, [pc, #168]	@ (800bc30 <__sflush_r+0x104>)
 800bb88:	40ca      	lsrs	r2, r1
 800bb8a:	07d6      	lsls	r6, r2, #31
 800bb8c:	d527      	bpl.n	800bbde <__sflush_r+0xb2>
 800bb8e:	2200      	movs	r2, #0
 800bb90:	6062      	str	r2, [r4, #4]
 800bb92:	04d9      	lsls	r1, r3, #19
 800bb94:	6922      	ldr	r2, [r4, #16]
 800bb96:	6022      	str	r2, [r4, #0]
 800bb98:	d504      	bpl.n	800bba4 <__sflush_r+0x78>
 800bb9a:	1c42      	adds	r2, r0, #1
 800bb9c:	d101      	bne.n	800bba2 <__sflush_r+0x76>
 800bb9e:	682b      	ldr	r3, [r5, #0]
 800bba0:	b903      	cbnz	r3, 800bba4 <__sflush_r+0x78>
 800bba2:	6560      	str	r0, [r4, #84]	@ 0x54
 800bba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bba6:	602f      	str	r7, [r5, #0]
 800bba8:	b1b9      	cbz	r1, 800bbda <__sflush_r+0xae>
 800bbaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbae:	4299      	cmp	r1, r3
 800bbb0:	d002      	beq.n	800bbb8 <__sflush_r+0x8c>
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	f7ff fbf4 	bl	800b3a0 <_free_r>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbbc:	e00d      	b.n	800bbda <__sflush_r+0xae>
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	47b0      	blx	r6
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	1c50      	adds	r0, r2, #1
 800bbc8:	d1c9      	bne.n	800bb5e <__sflush_r+0x32>
 800bbca:	682b      	ldr	r3, [r5, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d0c6      	beq.n	800bb5e <__sflush_r+0x32>
 800bbd0:	2b1d      	cmp	r3, #29
 800bbd2:	d001      	beq.n	800bbd8 <__sflush_r+0xac>
 800bbd4:	2b16      	cmp	r3, #22
 800bbd6:	d11e      	bne.n	800bc16 <__sflush_r+0xea>
 800bbd8:	602f      	str	r7, [r5, #0]
 800bbda:	2000      	movs	r0, #0
 800bbdc:	e022      	b.n	800bc24 <__sflush_r+0xf8>
 800bbde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbe2:	b21b      	sxth	r3, r3
 800bbe4:	e01b      	b.n	800bc1e <__sflush_r+0xf2>
 800bbe6:	690f      	ldr	r7, [r1, #16]
 800bbe8:	2f00      	cmp	r7, #0
 800bbea:	d0f6      	beq.n	800bbda <__sflush_r+0xae>
 800bbec:	0793      	lsls	r3, r2, #30
 800bbee:	680e      	ldr	r6, [r1, #0]
 800bbf0:	bf08      	it	eq
 800bbf2:	694b      	ldreq	r3, [r1, #20]
 800bbf4:	600f      	str	r7, [r1, #0]
 800bbf6:	bf18      	it	ne
 800bbf8:	2300      	movne	r3, #0
 800bbfa:	eba6 0807 	sub.w	r8, r6, r7
 800bbfe:	608b      	str	r3, [r1, #8]
 800bc00:	f1b8 0f00 	cmp.w	r8, #0
 800bc04:	dde9      	ble.n	800bbda <__sflush_r+0xae>
 800bc06:	6a21      	ldr	r1, [r4, #32]
 800bc08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bc0a:	4643      	mov	r3, r8
 800bc0c:	463a      	mov	r2, r7
 800bc0e:	4628      	mov	r0, r5
 800bc10:	47b0      	blx	r6
 800bc12:	2800      	cmp	r0, #0
 800bc14:	dc08      	bgt.n	800bc28 <__sflush_r+0xfc>
 800bc16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc1e:	81a3      	strh	r3, [r4, #12]
 800bc20:	f04f 30ff 	mov.w	r0, #4294967295
 800bc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc28:	4407      	add	r7, r0
 800bc2a:	eba8 0800 	sub.w	r8, r8, r0
 800bc2e:	e7e7      	b.n	800bc00 <__sflush_r+0xd4>
 800bc30:	20400001 	.word	0x20400001

0800bc34 <_fflush_r>:
 800bc34:	b538      	push	{r3, r4, r5, lr}
 800bc36:	690b      	ldr	r3, [r1, #16]
 800bc38:	4605      	mov	r5, r0
 800bc3a:	460c      	mov	r4, r1
 800bc3c:	b913      	cbnz	r3, 800bc44 <_fflush_r+0x10>
 800bc3e:	2500      	movs	r5, #0
 800bc40:	4628      	mov	r0, r5
 800bc42:	bd38      	pop	{r3, r4, r5, pc}
 800bc44:	b118      	cbz	r0, 800bc4e <_fflush_r+0x1a>
 800bc46:	6a03      	ldr	r3, [r0, #32]
 800bc48:	b90b      	cbnz	r3, 800bc4e <_fflush_r+0x1a>
 800bc4a:	f7ff f9a1 	bl	800af90 <__sinit>
 800bc4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d0f3      	beq.n	800bc3e <_fflush_r+0xa>
 800bc56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bc58:	07d0      	lsls	r0, r2, #31
 800bc5a:	d404      	bmi.n	800bc66 <_fflush_r+0x32>
 800bc5c:	0599      	lsls	r1, r3, #22
 800bc5e:	d402      	bmi.n	800bc66 <_fflush_r+0x32>
 800bc60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc62:	f7ff fb8c 	bl	800b37e <__retarget_lock_acquire_recursive>
 800bc66:	4628      	mov	r0, r5
 800bc68:	4621      	mov	r1, r4
 800bc6a:	f7ff ff5f 	bl	800bb2c <__sflush_r>
 800bc6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc70:	07da      	lsls	r2, r3, #31
 800bc72:	4605      	mov	r5, r0
 800bc74:	d4e4      	bmi.n	800bc40 <_fflush_r+0xc>
 800bc76:	89a3      	ldrh	r3, [r4, #12]
 800bc78:	059b      	lsls	r3, r3, #22
 800bc7a:	d4e1      	bmi.n	800bc40 <_fflush_r+0xc>
 800bc7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc7e:	f7ff fb7f 	bl	800b380 <__retarget_lock_release_recursive>
 800bc82:	e7dd      	b.n	800bc40 <_fflush_r+0xc>

0800bc84 <__swhatbuf_r>:
 800bc84:	b570      	push	{r4, r5, r6, lr}
 800bc86:	460c      	mov	r4, r1
 800bc88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc8c:	2900      	cmp	r1, #0
 800bc8e:	b096      	sub	sp, #88	@ 0x58
 800bc90:	4615      	mov	r5, r2
 800bc92:	461e      	mov	r6, r3
 800bc94:	da0d      	bge.n	800bcb2 <__swhatbuf_r+0x2e>
 800bc96:	89a3      	ldrh	r3, [r4, #12]
 800bc98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bc9c:	f04f 0100 	mov.w	r1, #0
 800bca0:	bf14      	ite	ne
 800bca2:	2340      	movne	r3, #64	@ 0x40
 800bca4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bca8:	2000      	movs	r0, #0
 800bcaa:	6031      	str	r1, [r6, #0]
 800bcac:	602b      	str	r3, [r5, #0]
 800bcae:	b016      	add	sp, #88	@ 0x58
 800bcb0:	bd70      	pop	{r4, r5, r6, pc}
 800bcb2:	466a      	mov	r2, sp
 800bcb4:	f000 f848 	bl	800bd48 <_fstat_r>
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	dbec      	blt.n	800bc96 <__swhatbuf_r+0x12>
 800bcbc:	9901      	ldr	r1, [sp, #4]
 800bcbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bcc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bcc6:	4259      	negs	r1, r3
 800bcc8:	4159      	adcs	r1, r3
 800bcca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bcce:	e7eb      	b.n	800bca8 <__swhatbuf_r+0x24>

0800bcd0 <__smakebuf_r>:
 800bcd0:	898b      	ldrh	r3, [r1, #12]
 800bcd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcd4:	079d      	lsls	r5, r3, #30
 800bcd6:	4606      	mov	r6, r0
 800bcd8:	460c      	mov	r4, r1
 800bcda:	d507      	bpl.n	800bcec <__smakebuf_r+0x1c>
 800bcdc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bce0:	6023      	str	r3, [r4, #0]
 800bce2:	6123      	str	r3, [r4, #16]
 800bce4:	2301      	movs	r3, #1
 800bce6:	6163      	str	r3, [r4, #20]
 800bce8:	b003      	add	sp, #12
 800bcea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcec:	ab01      	add	r3, sp, #4
 800bcee:	466a      	mov	r2, sp
 800bcf0:	f7ff ffc8 	bl	800bc84 <__swhatbuf_r>
 800bcf4:	9f00      	ldr	r7, [sp, #0]
 800bcf6:	4605      	mov	r5, r0
 800bcf8:	4639      	mov	r1, r7
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	f7ff fbbc 	bl	800b478 <_malloc_r>
 800bd00:	b948      	cbnz	r0, 800bd16 <__smakebuf_r+0x46>
 800bd02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd06:	059a      	lsls	r2, r3, #22
 800bd08:	d4ee      	bmi.n	800bce8 <__smakebuf_r+0x18>
 800bd0a:	f023 0303 	bic.w	r3, r3, #3
 800bd0e:	f043 0302 	orr.w	r3, r3, #2
 800bd12:	81a3      	strh	r3, [r4, #12]
 800bd14:	e7e2      	b.n	800bcdc <__smakebuf_r+0xc>
 800bd16:	89a3      	ldrh	r3, [r4, #12]
 800bd18:	6020      	str	r0, [r4, #0]
 800bd1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd1e:	81a3      	strh	r3, [r4, #12]
 800bd20:	9b01      	ldr	r3, [sp, #4]
 800bd22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bd26:	b15b      	cbz	r3, 800bd40 <__smakebuf_r+0x70>
 800bd28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	f000 f81d 	bl	800bd6c <_isatty_r>
 800bd32:	b128      	cbz	r0, 800bd40 <__smakebuf_r+0x70>
 800bd34:	89a3      	ldrh	r3, [r4, #12]
 800bd36:	f023 0303 	bic.w	r3, r3, #3
 800bd3a:	f043 0301 	orr.w	r3, r3, #1
 800bd3e:	81a3      	strh	r3, [r4, #12]
 800bd40:	89a3      	ldrh	r3, [r4, #12]
 800bd42:	431d      	orrs	r5, r3
 800bd44:	81a5      	strh	r5, [r4, #12]
 800bd46:	e7cf      	b.n	800bce8 <__smakebuf_r+0x18>

0800bd48 <_fstat_r>:
 800bd48:	b538      	push	{r3, r4, r5, lr}
 800bd4a:	4d07      	ldr	r5, [pc, #28]	@ (800bd68 <_fstat_r+0x20>)
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	4604      	mov	r4, r0
 800bd50:	4608      	mov	r0, r1
 800bd52:	4611      	mov	r1, r2
 800bd54:	602b      	str	r3, [r5, #0]
 800bd56:	f7f6 f8e8 	bl	8001f2a <_fstat>
 800bd5a:	1c43      	adds	r3, r0, #1
 800bd5c:	d102      	bne.n	800bd64 <_fstat_r+0x1c>
 800bd5e:	682b      	ldr	r3, [r5, #0]
 800bd60:	b103      	cbz	r3, 800bd64 <_fstat_r+0x1c>
 800bd62:	6023      	str	r3, [r4, #0]
 800bd64:	bd38      	pop	{r3, r4, r5, pc}
 800bd66:	bf00      	nop
 800bd68:	240011d4 	.word	0x240011d4

0800bd6c <_isatty_r>:
 800bd6c:	b538      	push	{r3, r4, r5, lr}
 800bd6e:	4d06      	ldr	r5, [pc, #24]	@ (800bd88 <_isatty_r+0x1c>)
 800bd70:	2300      	movs	r3, #0
 800bd72:	4604      	mov	r4, r0
 800bd74:	4608      	mov	r0, r1
 800bd76:	602b      	str	r3, [r5, #0]
 800bd78:	f7f6 f8e7 	bl	8001f4a <_isatty>
 800bd7c:	1c43      	adds	r3, r0, #1
 800bd7e:	d102      	bne.n	800bd86 <_isatty_r+0x1a>
 800bd80:	682b      	ldr	r3, [r5, #0]
 800bd82:	b103      	cbz	r3, 800bd86 <_isatty_r+0x1a>
 800bd84:	6023      	str	r3, [r4, #0]
 800bd86:	bd38      	pop	{r3, r4, r5, pc}
 800bd88:	240011d4 	.word	0x240011d4

0800bd8c <_sbrk_r>:
 800bd8c:	b538      	push	{r3, r4, r5, lr}
 800bd8e:	4d06      	ldr	r5, [pc, #24]	@ (800bda8 <_sbrk_r+0x1c>)
 800bd90:	2300      	movs	r3, #0
 800bd92:	4604      	mov	r4, r0
 800bd94:	4608      	mov	r0, r1
 800bd96:	602b      	str	r3, [r5, #0]
 800bd98:	f7f6 f8f0 	bl	8001f7c <_sbrk>
 800bd9c:	1c43      	adds	r3, r0, #1
 800bd9e:	d102      	bne.n	800bda6 <_sbrk_r+0x1a>
 800bda0:	682b      	ldr	r3, [r5, #0]
 800bda2:	b103      	cbz	r3, 800bda6 <_sbrk_r+0x1a>
 800bda4:	6023      	str	r3, [r4, #0]
 800bda6:	bd38      	pop	{r3, r4, r5, pc}
 800bda8:	240011d4 	.word	0x240011d4

0800bdac <_init>:
 800bdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdae:	bf00      	nop
 800bdb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdb2:	bc08      	pop	{r3}
 800bdb4:	469e      	mov	lr, r3
 800bdb6:	4770      	bx	lr

0800bdb8 <_fini>:
 800bdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdba:	bf00      	nop
 800bdbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdbe:	bc08      	pop	{r3}
 800bdc0:	469e      	mov	lr, r3
 800bdc2:	4770      	bx	lr
