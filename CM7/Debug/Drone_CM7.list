
Drone_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a448  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  0800a6e8  0800a6e8  0000b6e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9e8  0800a9e8  0000c070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a9e8  0800a9e8  0000b9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9f0  0800a9f0  0000c070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9f0  0800a9f0  0000b9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a9f4  0800a9f4  0000b9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  24000000  0800a9f8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a4  24000070  0800aa68  0000c070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000914  0800aa68  0000c914  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022bf0  00000000  00000000  0000c09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000452d  00000000  00000000  0002ec8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b00  00000000  00000000  000331c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014de  00000000  00000000  00034cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00046149  00000000  00000000  0003619e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022997  00000000  00000000  0007c2e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bbeb9  00000000  00000000  0009ec7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0025ab37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007920  00000000  00000000  0025ab7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0026249c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a6d0 	.word	0x0800a6d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	0800a6d0 	.word	0x0800a6d0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CriticalErrorHandler>:
    if (fromMax == fromMin)
        return toMin;
    return toMin + ((v - fromMin) / (fromMax - fromMin)) * (toMax - toMin);
}

void CriticalErrorHandler (void) {
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	bf00      	nop
    __disable_irq ();
    while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <CriticalErrorHandler+0x8>

080006b8 <__assert_func>:
        ;
}

void __assert_func (const char* file, int line, const char* func, const char* failedexpr) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
 80006c4:	603b      	str	r3, [r7, #0]
    __BKPT (1);
 80006c6:	be01      	bkpt	0x0001
    // asm volatile ("bkpt 1");
    CriticalErrorHandler ();
 80006c8:	f7ff fff0 	bl	80006ac <CriticalErrorHandler>
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <FlightContextUpdateIMUData>:

/*
 * \brief IMU collects it accel and gyro data in millimeters and
 * millidegrees. This is converted to meters and degrees
 */
void FlightContextUpdateIMUData (FlightContext* pContext, Vec3 accel, Vec3 gyro) {
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	4638      	mov	r0, r7
 80006de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    pContext->imuUnFilteredAccel.x = ((float)accel.x) / 1000.0f;
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	ee07 3a90 	vmov	s15, r3
 80006e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006ec:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8000780 <FlightContextUpdateIMUData+0xac>
 80006f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	edc3 7a00 	vstr	s15, [r3]
    pContext->imuUnFilteredAccel.y = ((float)accel.y) / 1000.0f;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	ee07 3a90 	vmov	s15, r3
 8000700:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000704:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000780 <FlightContextUpdateIMUData+0xac>
 8000708:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	edc3 7a01 	vstr	s15, [r3, #4]
    pContext->imuUnFilteredAccel.z = ((float)accel.z) / 1000.0f;
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	ee07 3a90 	vmov	s15, r3
 8000718:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800071c:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000780 <FlightContextUpdateIMUData+0xac>
 8000720:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	edc3 7a02 	vstr	s15, [r3, #8]

    pContext->imuUnFilteredGyro.x = ((float)gyro.x) / 1000.0f;
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	ee07 3a90 	vmov	s15, r3
 8000730:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000734:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000780 <FlightContextUpdateIMUData+0xac>
 8000738:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	edc3 7a03 	vstr	s15, [r3, #12]
    pContext->imuUnFilteredGyro.y = ((float)gyro.y) / 1000.0f;
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	ee07 3a90 	vmov	s15, r3
 8000748:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800074c:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8000780 <FlightContextUpdateIMUData+0xac>
 8000750:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	edc3 7a04 	vstr	s15, [r3, #16]
    pContext->imuUnFilteredGyro.z = ((float)gyro.z) / 1000.0f;
 800075a:	6a3b      	ldr	r3, [r7, #32]
 800075c:	ee07 3a90 	vmov	s15, r3
 8000760:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000764:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8000780 <FlightContextUpdateIMUData+0xac>
 8000768:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	447a0000 	.word	0x447a0000

08000784 <__io_putchar>:
UART_HandleTypeDef* pUART;

static STATUS_TYPE LoggerSyncUARTTaskHandler (void);
static STATUS_TYPE LoggerWriteToUART (RingBuff volatile* pBuff);

PUTCHAR_PROTOTYPE {
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    if (HAL_GetCurrentCPUID () == CM7_CPUID) {
 800078c:	f002 f926 	bl	80029dc <HAL_GetCurrentCPUID>
 8000790:	4603      	mov	r3, r0
 8000792:	2b03      	cmp	r3, #3
 8000794:	d11e      	bne.n	80007d4 <__io_putchar+0x50>
        RingBuffWrite (pCM7RingBuf, (void*)&ch, 1);
 8000796:	4b23      	ldr	r3, [pc, #140]	@ (8000824 <__io_putchar+0xa0>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	1d39      	adds	r1, r7, #4
 800079c:	2201      	movs	r2, #1
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f9e0 	bl	8000b64 <RingBuffWrite>
        ASSERT (RingBuffIsValid (pCM7RingBuf) == 1);
 80007a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000824 <__io_putchar+0xa0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 f9b3 	bl	8000b14 <RingBuffIsValid>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d005      	beq.n	80007c0 <__io_putchar+0x3c>
 80007b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000828 <__io_putchar+0xa4>)
 80007b6:	4a1d      	ldr	r2, [pc, #116]	@ (800082c <__io_putchar+0xa8>)
 80007b8:	211a      	movs	r1, #26
 80007ba:	481d      	ldr	r0, [pc, #116]	@ (8000830 <__io_putchar+0xac>)
 80007bc:	f7ff ff7c 	bl	80006b8 <__assert_func>
        if ((char)ch == '\n') {
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b0a      	cmp	r3, #10
 80007c6:	d127      	bne.n	8000818 <__io_putchar+0x94>
            LoggerWriteToUART (pCM7RingBuf);
 80007c8:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <__io_putchar+0xa0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f871 	bl	80008b4 <LoggerWriteToUART>
 80007d2:	e021      	b.n	8000818 <__io_putchar+0x94>
        }
    } else {
        RingBuffWrite (pCM4RingBuf, (void*)&ch, 1);
 80007d4:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <__io_putchar+0xb0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	1d39      	adds	r1, r7, #4
 80007da:	2201      	movs	r2, #1
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 f9c1 	bl	8000b64 <RingBuffWrite>
        ASSERT (RingBuffIsValid (pCM4RingBuf) == 1);
 80007e2:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <__io_putchar+0xb0>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f994 	bl	8000b14 <RingBuffIsValid>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d005      	beq.n	80007fe <__io_putchar+0x7a>
 80007f2:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <__io_putchar+0xb4>)
 80007f4:	4a0d      	ldr	r2, [pc, #52]	@ (800082c <__io_putchar+0xa8>)
 80007f6:	2120      	movs	r1, #32
 80007f8:	480d      	ldr	r0, [pc, #52]	@ (8000830 <__io_putchar+0xac>)
 80007fa:	f7ff ff5d 	bl	80006b8 <__assert_func>
        if ((char)ch == '\n') {
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b0a      	cmp	r3, #10
 8000804:	d108      	bne.n	8000818 <__io_putchar+0x94>
            /*
             * CM4 sends signal to CM7 to send CM4's ring buffer to the UART interface
             */
            uint32_t taskID = SYNC_TASKID_UART_OUT;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
            SyncMailBoxWriteNotify (MAILBOX_CM7_ID, (uint8_t*)&taskID, sizeof (uint32_t));
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2204      	movs	r2, #4
 8000810:	4619      	mov	r1, r3
 8000812:	2001      	movs	r0, #1
 8000814:	f000 ffdb 	bl	80017ce <SyncMailBoxWriteNotify>
        }
    }
    return ch;
 8000818:	687b      	ldr	r3, [r7, #4]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	24000090 	.word	0x24000090
 8000828:	0800a6e8 	.word	0x0800a6e8
 800082c:	0800a96c 	.word	0x0800a96c
 8000830:	0800a710 	.word	0x0800a710
 8000834:	2400008c 	.word	0x2400008c
 8000838:	0800a758 	.word	0x0800a758

0800083c <LoggerInit>:

STATUS_TYPE LoggerInit (UART_HandleTypeDef* pUART_) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
    pUART = NULL;
 8000844:	4b15      	ldr	r3, [pc, #84]	@ (800089c <LoggerInit+0x60>)
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
    if (HAL_GetCurrentCPUID () == CM7_CPUID && pUART_ != NULL) {
 800084a:	f002 f8c7 	bl	80029dc <HAL_GetCurrentCPUID>
 800084e:	4603      	mov	r3, r0
 8000850:	2b03      	cmp	r3, #3
 8000852:	d105      	bne.n	8000860 <LoggerInit+0x24>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d002      	beq.n	8000860 <LoggerInit+0x24>
        pUART = pUART_;
 800085a:	4a10      	ldr	r2, [pc, #64]	@ (800089c <LoggerInit+0x60>)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6013      	str	r3, [r2, #0]
    /*
     * Local variables are not shared among the cores.
     * So each ring buffer pointer needs to be inited for each core
     */
    pCM4RingBuf =
    RingBuffCreate ((void*)MEM_SHARED_CM4_UART_RINGBUFF_START, MEM_SHARED_CM4_UART_RINGBUFF_TOTAL_LEN);
 8000860:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000864:	480e      	ldr	r0, [pc, #56]	@ (80008a0 <LoggerInit+0x64>)
 8000866:	f000 f925 	bl	8000ab4 <RingBuffCreate>
 800086a:	4603      	mov	r3, r0
    pCM4RingBuf =
 800086c:	4a0d      	ldr	r2, [pc, #52]	@ (80008a4 <LoggerInit+0x68>)
 800086e:	6013      	str	r3, [r2, #0]
    pCM7RingBuf =
    RingBuffCreate ((void*)MEM_SHARED_CM7_UART_RINGBUFF_START, MEM_SHARED_CM7_UART_RINGBUFF_TOTAL_LEN);
 8000870:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000874:	480c      	ldr	r0, [pc, #48]	@ (80008a8 <LoggerInit+0x6c>)
 8000876:	f000 f91d 	bl	8000ab4 <RingBuffCreate>
 800087a:	4603      	mov	r3, r0
    pCM7RingBuf =
 800087c:	4a0b      	ldr	r2, [pc, #44]	@ (80008ac <LoggerInit+0x70>)
 800087e:	6013      	str	r3, [r2, #0]

    if (SyncRegisterHandler (LoggerSyncUARTTaskHandler, SYNC_TASKID_UART_OUT) != 1) {
 8000880:	2100      	movs	r1, #0
 8000882:	480b      	ldr	r0, [pc, #44]	@ (80008b0 <LoggerInit+0x74>)
 8000884:	f000 fff8 	bl	8001878 <SyncRegisterHandler>
 8000888:	4603      	mov	r3, r0
 800088a:	2b01      	cmp	r3, #1
 800088c:	d001      	beq.n	8000892 <LoggerInit+0x56>
        return eSTATUS_FAILURE;
 800088e:	2301      	movs	r3, #1
 8000890:	e000      	b.n	8000894 <LoggerInit+0x58>
    }

    return eSTATUS_SUCCESS;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	24000094 	.word	0x24000094
 80008a0:	38000008 	.word	0x38000008
 80008a4:	2400008c 	.word	0x2400008c
 80008a8:	38000128 	.word	0x38000128
 80008ac:	24000090 	.word	0x24000090
 80008b0:	08000905 	.word	0x08000905

080008b4 <LoggerWriteToUART>:

static STATUS_TYPE LoggerWriteToUART (RingBuff volatile* pRingBuf) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
    uint32_t len         = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
    void* pBufToTransmit = NULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]

send:
    len = RingBuffGetLinearBlockReadLength (pRingBuf);
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f000 fa89 	bl	8000ddc <RingBuffGetLinearBlockReadLength>
 80008ca:	60f8      	str	r0, [r7, #12]
    if (len > 0) {
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d011      	beq.n	80008f6 <LoggerWriteToUART+0x42>
        pBufToTransmit = RingBuffGetLinearBlockReadAddress (pRingBuf);
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f000 fa58 	bl	8000d88 <RingBuffGetLinearBlockReadAddress>
 80008d8:	60b8      	str	r0, [r7, #8]
        HAL_UART_Transmit (pUART, pBufToTransmit, len, 1000);
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <LoggerWriteToUART+0x4c>)
 80008dc:	6818      	ldr	r0, [r3, #0]
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008e6:	68b9      	ldr	r1, [r7, #8]
 80008e8:	f007 fb08 	bl	8007efc <HAL_UART_Transmit>
        RingBuffSkip (pRingBuf, len);
 80008ec:	68f9      	ldr	r1, [r7, #12]
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f000 fab6 	bl	8000e60 <RingBuffSkip>
        /* Check for anything in the overflow buffer */
        goto send;
 80008f4:	e7e6      	b.n	80008c4 <LoggerWriteToUART+0x10>
    }
    return eSTATUS_SUCCESS;
 80008f6:	2300      	movs	r3, #0
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	24000094 	.word	0x24000094

08000904 <LoggerSyncUARTTaskHandler>:

static STATUS_TYPE LoggerSyncUARTTaskHandler (void) {
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
    if (HAL_GetCurrentCPUID () == CM7_CPUID) {
 8000908:	f002 f868 	bl	80029dc <HAL_GetCurrentCPUID>
 800090c:	4603      	mov	r3, r0
 800090e:	2b03      	cmp	r3, #3
 8000910:	d104      	bne.n	800091c <LoggerSyncUARTTaskHandler+0x18>
        LoggerWriteToUART (pCM4RingBuf);
 8000912:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <LoggerSyncUARTTaskHandler+0x20>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ffcc 	bl	80008b4 <LoggerWriteToUART>
    }
    return eSTATUS_SUCCESS;
 800091c:	2300      	movs	r3, #0
 800091e:	4618      	mov	r0, r3
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	2400008c 	.word	0x2400008c

08000928 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit (void) {
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 800092c:	4b49      	ldr	r3, [pc, #292]	@ (8000a54 <SystemInit+0x12c>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000932:	4a48      	ldr	r2, [pc, #288]	@ (8000a54 <SystemInit+0x12c>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
    SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800093c:	4b45      	ldr	r3, [pc, #276]	@ (8000a54 <SystemInit+0x12c>)
 800093e:	691b      	ldr	r3, [r3, #16]
 8000940:	4a44      	ldr	r2, [pc, #272]	@ (8000a54 <SystemInit+0x12c>)
 8000942:	f043 0310 	orr.w	r3, r3, #16
 8000946:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
    /* Reset the RCC clock configuration to the default reset state ------------*/
    /* Increasing the CPU frequency */
    if (FLASH_LATENCY_DEFAULT > (READ_BIT ((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8000948:	4b43      	ldr	r3, [pc, #268]	@ (8000a58 <SystemInit+0x130>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f003 030f 	and.w	r3, r3, #15
 8000950:	2b06      	cmp	r3, #6
 8000952:	d807      	bhi.n	8000964 <SystemInit+0x3c>
        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
        MODIFY_REG (FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000954:	4b40      	ldr	r3, [pc, #256]	@ (8000a58 <SystemInit+0x130>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f023 030f 	bic.w	r3, r3, #15
 800095c:	4a3e      	ldr	r2, [pc, #248]	@ (8000a58 <SystemInit+0x130>)
 800095e:	f043 0307 	orr.w	r3, r3, #7
 8000962:	6013      	str	r3, [r2, #0]
    }

    /* Set HSION bit */
    RCC->CR |= RCC_CR_HSION;
 8000964:	4b3d      	ldr	r3, [pc, #244]	@ (8000a5c <SystemInit+0x134>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a3c      	ldr	r2, [pc, #240]	@ (8000a5c <SystemInit+0x134>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	6013      	str	r3, [r2, #0]

    /* Reset CFGR register */
    RCC->CFGR = 0x00000000;
 8000970:	4b3a      	ldr	r3, [pc, #232]	@ (8000a5c <SystemInit+0x134>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]

    /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
    RCC->CR &= 0xEAF6ED7FU;
 8000976:	4b39      	ldr	r3, [pc, #228]	@ (8000a5c <SystemInit+0x134>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	4938      	ldr	r1, [pc, #224]	@ (8000a5c <SystemInit+0x134>)
 800097c:	4b38      	ldr	r3, [pc, #224]	@ (8000a60 <SystemInit+0x138>)
 800097e:	4013      	ands	r3, r2
 8000980:	600b      	str	r3, [r1, #0]

    /* Decreasing the number of wait states because of lower CPU frequency */
    if (FLASH_LATENCY_DEFAULT < (READ_BIT ((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8000982:	4b35      	ldr	r3, [pc, #212]	@ (8000a58 <SystemInit+0x130>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f003 0308 	and.w	r3, r3, #8
 800098a:	2b00      	cmp	r3, #0
 800098c:	d007      	beq.n	800099e <SystemInit+0x76>
        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
        MODIFY_REG (FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800098e:	4b32      	ldr	r3, [pc, #200]	@ (8000a58 <SystemInit+0x130>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f023 030f 	bic.w	r3, r3, #15
 8000996:	4a30      	ldr	r2, [pc, #192]	@ (8000a58 <SystemInit+0x130>)
 8000998:	f043 0307 	orr.w	r3, r3, #7
 800099c:	6013      	str	r3, [r2, #0]
    }

    /* Reset D1CFGR register */
    RCC->D1CFGR = 0x00000000;
 800099e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a5c <SystemInit+0x134>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]

    /* Reset D2CFGR register */
    RCC->D2CFGR = 0x00000000;
 80009a4:	4b2d      	ldr	r3, [pc, #180]	@ (8000a5c <SystemInit+0x134>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]

    /* Reset D3CFGR register */
    RCC->D3CFGR = 0x00000000;
 80009aa:	4b2c      	ldr	r3, [pc, #176]	@ (8000a5c <SystemInit+0x134>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]

    /* Reset PLLCKSELR register */
    RCC->PLLCKSELR = 0x02020200;
 80009b0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a5c <SystemInit+0x134>)
 80009b2:	4a2c      	ldr	r2, [pc, #176]	@ (8000a64 <SystemInit+0x13c>)
 80009b4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset PLLCFGR register */
    RCC->PLLCFGR = 0x01FF0000;
 80009b6:	4b29      	ldr	r3, [pc, #164]	@ (8000a5c <SystemInit+0x134>)
 80009b8:	4a2b      	ldr	r2, [pc, #172]	@ (8000a68 <SystemInit+0x140>)
 80009ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Reset PLL1DIVR register */
    RCC->PLL1DIVR = 0x01010280;
 80009bc:	4b27      	ldr	r3, [pc, #156]	@ (8000a5c <SystemInit+0x134>)
 80009be:	4a2b      	ldr	r2, [pc, #172]	@ (8000a6c <SystemInit+0x144>)
 80009c0:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Reset PLL1FRACR register */
    RCC->PLL1FRACR = 0x00000000;
 80009c2:	4b26      	ldr	r3, [pc, #152]	@ (8000a5c <SystemInit+0x134>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Reset PLL2DIVR register */
    RCC->PLL2DIVR = 0x01010280;
 80009c8:	4b24      	ldr	r3, [pc, #144]	@ (8000a5c <SystemInit+0x134>)
 80009ca:	4a28      	ldr	r2, [pc, #160]	@ (8000a6c <SystemInit+0x144>)
 80009cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Reset PLL2FRACR register */

    RCC->PLL2FRACR = 0x00000000;
 80009ce:	4b23      	ldr	r3, [pc, #140]	@ (8000a5c <SystemInit+0x134>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Reset PLL3DIVR register */
    RCC->PLL3DIVR = 0x01010280;
 80009d4:	4b21      	ldr	r3, [pc, #132]	@ (8000a5c <SystemInit+0x134>)
 80009d6:	4a25      	ldr	r2, [pc, #148]	@ (8000a6c <SystemInit+0x144>)
 80009d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Reset PLL3FRACR register */
    RCC->PLL3FRACR = 0x00000000;
 80009da:	4b20      	ldr	r3, [pc, #128]	@ (8000a5c <SystemInit+0x134>)
 80009dc:	2200      	movs	r2, #0
 80009de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Reset HSEBYP bit */
    RCC->CR &= 0xFFFBFFFFU;
 80009e0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a5c <SystemInit+0x134>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a5c <SystemInit+0x134>)
 80009e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80009ea:	6013      	str	r3, [r2, #0]

    /* Disable all interrupts */
    RCC->CIER = 0x00000000;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <SystemInit+0x134>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Enable CortexM7 HSEM EXTI line (line 78)*/
    EXTI_D2->EMR3 |= 0x4000UL;
 80009f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <SystemInit+0x148>)
 80009f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a70 <SystemInit+0x148>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009fc:	6253      	str	r3, [r2, #36]	@ 0x24

    if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80009fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000a74 <SystemInit+0x14c>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <SystemInit+0x150>)
 8000a04:	4013      	ands	r3, r2
 8000a06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a0a:	d202      	bcs.n	8000a12 <SystemInit+0xea>
        /* if stm32h7 revY*/
        /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
        *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <SystemInit+0x154>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	601a      	str	r2, [r3, #0]
    SCB->VTOR = VECT_TAB_BASE_ADDRESS |
                VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
    if (READ_BIT (RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U) {
 8000a12:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <SystemInit+0x134>)
 8000a14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d113      	bne.n	8000a48 <SystemInit+0x120>
        /* Enable the FMC interface clock */
        SET_BIT (RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000a20:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <SystemInit+0x134>)
 8000a22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a26:	4a0d      	ldr	r2, [pc, #52]	@ (8000a5c <SystemInit+0x134>)
 8000a28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a2c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
        /*
         * Disable the FMC bank1 (enabled after reset).
         * This, prevents CPU speculation access on this bank which blocks the use of FMC during
         * 24us. During this time the others FMC master (such as LTDC) cannot use it!
         */
        FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a30:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <SystemInit+0x158>)
 8000a32:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000a36:	601a      	str	r2, [r3, #0]

        /* Disable the FMC interface clock */
        CLEAR_BIT (RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000a38:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <SystemInit+0x134>)
 8000a3a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a3e:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <SystemInit+0x134>)
 8000a40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a44:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00
 8000a58:	52002000 	.word	0x52002000
 8000a5c:	58024400 	.word	0x58024400
 8000a60:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a64:	02020200 	.word	0x02020200
 8000a68:	01ff0000 	.word	0x01ff0000
 8000a6c:	01010280 	.word	0x01010280
 8000a70:	580000c0 	.word	0x580000c0
 8000a74:	5c001000 	.word	0x5c001000
 8000a78:	ffff0000 	.word	0xffff0000
 8000a7c:	51008108 	.word	0x51008108
 8000a80:	52004000 	.word	0x52004000

08000a84 <ExitRun0Mode>:
 *         that the power supply configuration is stable.
 *
 * @param  None
 * @retval None
 */
void ExitRun0Mode (void) {
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
    /* Wait till voltage level flag is set */
    while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U) {
    }
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
    /* Exit Run* mode */
    PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000a88:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <ExitRun0Mode+0x2c>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	4a08      	ldr	r2, [pc, #32]	@ (8000ab0 <ExitRun0Mode+0x2c>)
 8000a8e:	f023 0302 	bic.w	r3, r3, #2
 8000a92:	60d3      	str	r3, [r2, #12]
    /* Wait till voltage level flag is set */
    while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U) {
 8000a94:	bf00      	nop
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <ExitRun0Mode+0x2c>)
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d0f9      	beq.n	8000a96 <ExitRun0Mode+0x12>
    while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U) {
    }
#else
    /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000aa2:	bf00      	nop
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	58024800 	.word	0x58024800

08000ab4 <RingBuffCreate>:
 * \param[in]       buff: Buffer handle
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
RINGBUFF_VOLATILE RingBuff* RingBuffCreate (void* pBuff, size_t size) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
    if (pBuff == NULL || size == 0 || size < (sizeof (RingBuff) + 1)) {
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d005      	beq.n	8000ad0 <RingBuffCreate+0x1c>
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d002      	beq.n	8000ad0 <RingBuffCreate+0x1c>
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	2b20      	cmp	r3, #32
 8000ace:	d801      	bhi.n	8000ad4 <RingBuffCreate+0x20>
        return NULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e017      	b.n	8000b04 <RingBuffCreate+0x50>
    }

    RINGBUFF_VOLATILE RingBuff* pRingBuf = (RingBuff*)pBuff;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	60fb      	str	r3, [r7, #12]
    BUF_MEMSET ((void*)pRingBuf, 0x00, sizeof (RingBuff));
 8000ad8:	2220      	movs	r2, #32
 8000ada:	2100      	movs	r1, #0
 8000adc:	68f8      	ldr	r0, [r7, #12]
 8000ade:	f009 f867 	bl	8009bb0 <memset>

    pRingBuf->size = size - sizeof (RingBuff);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	f1a3 0220 	sub.w	r2, r3, #32
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	609a      	str	r2, [r3, #8]
    pRingBuf->buff = ((uint8_t*)((uintptr_t)pBuff) + sizeof (RingBuff));
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f103 0220 	add.w	r2, r3, #32
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	605a      	str	r2, [r3, #4]

    pRingBuf->magic1 = 0xDEADBEEF;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4a04      	ldr	r2, [pc, #16]	@ (8000b0c <RingBuffCreate+0x58>)
 8000afa:	601a      	str	r2, [r3, #0]
    pRingBuf->magic2 = ~0xDEADBEEF;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4a04      	ldr	r2, [pc, #16]	@ (8000b10 <RingBuffCreate+0x5c>)
 8000b00:	619a      	str	r2, [r3, #24]

    return pRingBuf;
 8000b02:	68fb      	ldr	r3, [r7, #12]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	deadbeef 	.word	0xdeadbeef
 8000b10:	21524110 	.word	0x21524110

08000b14 <RingBuffIsValid>:
/**
 * \brief           Check if ringbuff is initialized and ready to use
 * \param[in]       buff: Buffer handle
 * \return          `1` if ready, `0` otherwise
 */
STATUS_TYPE RingBuffIsValid (RINGBUFF_VOLATILE RingBuff* buff) {
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
    return BUF_IS_VALID (buff);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d013      	beq.n	8000b4a <RingBuffIsValid+0x36>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a0d      	ldr	r2, [pc, #52]	@ (8000b5c <RingBuffIsValid+0x48>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d10e      	bne.n	8000b4a <RingBuffIsValid+0x36>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	4a0b      	ldr	r2, [pc, #44]	@ (8000b60 <RingBuffIsValid+0x4c>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d109      	bne.n	8000b4a <RingBuffIsValid+0x36>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d005      	beq.n	8000b4a <RingBuffIsValid+0x36>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <RingBuffIsValid+0x36>
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <RingBuffIsValid+0x38>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	b2db      	uxtb	r3, r3
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	deadbeef 	.word	0xdeadbeef
 8000b60:	21524110 	.word	0x21524110

08000b64 <RingBuffWrite>:
 * \param[in]       btw: Number of bytes to write
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was
 * no enough memory available to copy full data array
 */
size_t RingBuffWrite (RINGBUFF_VOLATILE RingBuff* buff, const void* data, size_t btw) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID (buff) || data == NULL || btw == 0) {
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d017      	beq.n	8000baa <RingBuffWrite+0x46>
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a3b      	ldr	r2, [pc, #236]	@ (8000c6c <RingBuffWrite+0x108>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d112      	bne.n	8000baa <RingBuffWrite+0x46>
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a39      	ldr	r2, [pc, #228]	@ (8000c70 <RingBuffWrite+0x10c>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d10d      	bne.n	8000baa <RingBuffWrite+0x46>
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d009      	beq.n	8000baa <RingBuffWrite+0x46>
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d005      	beq.n	8000baa <RingBuffWrite+0x46>
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <RingBuffWrite+0x46>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d101      	bne.n	8000bae <RingBuffWrite+0x4a>
        return 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e059      	b.n	8000c62 <RingBuffWrite+0xfe>
    }

    /* Calculate maximum number of bytes available to write */
    free = RingBuffGetFree (buff);
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f000 f860 	bl	8000c74 <RingBuffGetFree>
 8000bb4:	61b8      	str	r0, [r7, #24]
    btw  = BUF_MIN (free, btw);
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	bf28      	it	cs
 8000bbe:	4613      	movcs	r3, r2
 8000bc0:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d101      	bne.n	8000bcc <RingBuffWrite+0x68>
        return 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e04a      	b.n	8000c62 <RingBuffWrite+0xfe>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN (buff->size - buff->w, btw);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d905      	bls.n	8000be8 <RingBuffWrite+0x84>
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	691b      	ldr	r3, [r3, #16]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	e000      	b.n	8000bea <RingBuffWrite+0x86>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY (&buff->buff[buff->w], d, tocopy);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	69f9      	ldr	r1, [r7, #28]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f009 f853 	bl	8009ca6 <memcpy>
    buff->w += tocopy;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	691a      	ldr	r2, [r3, #16]
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	441a      	add	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
    btw -= tocopy;
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d00b      	beq.n	8000c32 <RingBuffWrite+0xce>
        BUF_MEMCPY (buff->buff, &d[tocopy], btw);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	6858      	ldr	r0, [r3, #4]
 8000c1e:	69fa      	ldr	r2, [r7, #28]
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	4413      	add	r3, r2
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4619      	mov	r1, r3
 8000c28:	f009 f83d 	bl	8009ca6 <memcpy>
        buff->w = btw;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	611a      	str	r2, [r3, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	691a      	ldr	r2, [r3, #16]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d302      	bcc.n	8000c44 <RingBuffWrite+0xe0>
        buff->w = 0;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
    }
    BUF_SEND_EVT (buff, RINGBUFF_EVT_WRITE, tocopy + btw);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d007      	beq.n	8000c5c <RingBuffWrite+0xf8>
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	6979      	ldr	r1, [r7, #20]
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	440a      	add	r2, r1
 8000c56:	2101      	movs	r1, #1
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	4798      	blx	r3
    return tocopy + btw;
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3720      	adds	r7, #32
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	deadbeef 	.word	0xdeadbeef
 8000c70:	21524110 	.word	0x21524110

08000c74 <RingBuffGetFree>:
/**
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t RingBuffGetFree (RINGBUFF_VOLATILE RingBuff* buff) {
 8000c74:	b480      	push	{r7}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID (buff)) {
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d011      	beq.n	8000ca6 <RingBuffGetFree+0x32>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf8 <RingBuffGetFree+0x84>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d10c      	bne.n	8000ca6 <RingBuffGetFree+0x32>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a1a      	ldr	r2, [pc, #104]	@ (8000cfc <RingBuffGetFree+0x88>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d107      	bne.n	8000ca6 <RingBuffGetFree+0x32>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <RingBuffGetFree+0x32>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d101      	bne.n	8000caa <RingBuffGetFree+0x36>
        return 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e01f      	b.n	8000cea <RingBuffGetFree+0x76>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	691b      	ldr	r3, [r3, #16]
 8000cae:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d103      	bne.n	8000cc6 <RingBuffGetFree+0x52>
        size = buff->size;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	e00f      	b.n	8000ce6 <RingBuffGetFree+0x72>
    } else if (r > w) {
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d904      	bls.n	8000cd8 <RingBuffGetFree+0x64>
        size = r - w;
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	e006      	b.n	8000ce6 <RingBuffGetFree+0x72>
    } else {
        size = buff->size - (w - r);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	68f9      	ldr	r1, [r7, #12]
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	4413      	add	r3, r2
 8000ce4:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3b01      	subs	r3, #1
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	371c      	adds	r7, #28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	deadbeef 	.word	0xdeadbeef
 8000cfc:	21524110 	.word	0x21524110

08000d00 <RingBuffGetFull>:
/**
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t RingBuffGetFull (RINGBUFF_VOLATILE RingBuff* buff) {
 8000d00:	b480      	push	{r7}
 8000d02:	b087      	sub	sp, #28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID (buff)) {
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d011      	beq.n	8000d32 <RingBuffGetFull+0x32>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a1b      	ldr	r2, [pc, #108]	@ (8000d80 <RingBuffGetFull+0x80>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d10c      	bne.n	8000d32 <RingBuffGetFull+0x32>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a19      	ldr	r2, [pc, #100]	@ (8000d84 <RingBuffGetFull+0x84>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d107      	bne.n	8000d32 <RingBuffGetFull+0x32>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <RingBuffGetFull+0x32>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <RingBuffGetFull+0x36>
        return 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e01d      	b.n	8000d72 <RingBuffGetFull+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	691b      	ldr	r3, [r3, #16]
 8000d3a:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d102      	bne.n	8000d50 <RingBuffGetFull+0x50>
        size = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	e00f      	b.n	8000d70 <RingBuffGetFull+0x70>
    } else if (w > r) {
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d904      	bls.n	8000d62 <RingBuffGetFull+0x62>
        size = w - r;
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	e006      	b.n	8000d70 <RingBuffGetFull+0x70>
    } else {
        size = buff->size - (r - w);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	6939      	ldr	r1, [r7, #16]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	1acb      	subs	r3, r1, r3
 8000d6c:	4413      	add	r3, r2
 8000d6e:	617b      	str	r3, [r7, #20]
    }
    return size;
 8000d70:	697b      	ldr	r3, [r7, #20]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	371c      	adds	r7, #28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	deadbeef 	.word	0xdeadbeef
 8000d84:	21524110 	.word	0x21524110

08000d88 <RingBuffGetLinearBlockReadAddress>:
/**
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void* RingBuffGetLinearBlockReadAddress (RINGBUFF_VOLATILE RingBuff* buff) {
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID (buff)) {
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d011      	beq.n	8000dba <RingBuffGetLinearBlockReadAddress+0x32>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd4 <RingBuffGetLinearBlockReadAddress+0x4c>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d10c      	bne.n	8000dba <RingBuffGetLinearBlockReadAddress+0x32>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd8 <RingBuffGetLinearBlockReadAddress+0x50>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d107      	bne.n	8000dba <RingBuffGetLinearBlockReadAddress+0x32>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <RingBuffGetLinearBlockReadAddress+0x32>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d101      	bne.n	8000dbe <RingBuffGetLinearBlockReadAddress+0x36>
        return NULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e004      	b.n	8000dc8 <RingBuffGetLinearBlockReadAddress+0x40>
    }
    return &buff->buff[buff->r];
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	4413      	add	r3, r2
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	deadbeef 	.word	0xdeadbeef
 8000dd8:	21524110 	.word	0x21524110

08000ddc <RingBuffGetLinearBlockReadLength>:
/**
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t RingBuffGetLinearBlockReadLength (RINGBUFF_VOLATILE RingBuff* buff) {
 8000ddc:	b480      	push	{r7}
 8000dde:	b087      	sub	sp, #28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID (buff)) {
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d011      	beq.n	8000e0e <RingBuffGetLinearBlockReadLength+0x32>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a1a      	ldr	r2, [pc, #104]	@ (8000e58 <RingBuffGetLinearBlockReadLength+0x7c>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d10c      	bne.n	8000e0e <RingBuffGetLinearBlockReadLength+0x32>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a18      	ldr	r2, [pc, #96]	@ (8000e5c <RingBuffGetLinearBlockReadLength+0x80>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d107      	bne.n	8000e0e <RingBuffGetLinearBlockReadLength+0x32>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <RingBuffGetLinearBlockReadLength+0x32>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <RingBuffGetLinearBlockReadLength+0x36>
        return 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e01b      	b.n	8000e4a <RingBuffGetLinearBlockReadLength+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	691b      	ldr	r3, [r3, #16]
 8000e16:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d904      	bls.n	8000e30 <RingBuffGetLinearBlockReadLength+0x54>
        len = w - r;
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	e00b      	b.n	8000e48 <RingBuffGetLinearBlockReadLength+0x6c>
    } else if (r > w) {
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d905      	bls.n	8000e44 <RingBuffGetLinearBlockReadLength+0x68>
        len = buff->size - r;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	e001      	b.n	8000e48 <RingBuffGetLinearBlockReadLength+0x6c>
    } else {
        len = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
    }
    return len;
 8000e48:	697b      	ldr	r3, [r7, #20]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	371c      	adds	r7, #28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	deadbeef 	.word	0xdeadbeef
 8000e5c:	21524110 	.word	0x21524110

08000e60 <RingBuffSkip>:
 * \note            Useful at the end of streaming transfer such as DMA
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t RingBuffSkip (RINGBUFF_VOLATILE RingBuff* buff, size_t len) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID (buff) || len == 0) {
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d014      	beq.n	8000e9a <RingBuffSkip+0x3a>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a20      	ldr	r2, [pc, #128]	@ (8000ef8 <RingBuffSkip+0x98>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d10f      	bne.n	8000e9a <RingBuffSkip+0x3a>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8000efc <RingBuffSkip+0x9c>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d10a      	bne.n	8000e9a <RingBuffSkip+0x3a>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d006      	beq.n	8000e9a <RingBuffSkip+0x3a>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <RingBuffSkip+0x3a>
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <RingBuffSkip+0x3e>
        return 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e027      	b.n	8000eee <RingBuffSkip+0x8e>
    }

    full = RingBuffGetFull (buff); /* Get buffer used length */
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ff2e 	bl	8000d00 <RingBuffGetFull>
 8000ea4:	60f8      	str	r0, [r7, #12]
    len  = BUF_MIN (len, full);    /* Calculate max skip */
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	bf28      	it	cs
 8000eae:	4613      	movcs	r3, r2
 8000eb0:	603b      	str	r3, [r7, #0]
    buff->r += len;                /* Advance read pointer */
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	441a      	add	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {   /* Subtract possible overflow */
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d306      	bcc.n	8000ed8 <RingBuffSkip+0x78>
        buff->r -= buff->size;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	68d2      	ldr	r2, [r2, #12]
 8000ed2:	1ad2      	subs	r2, r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT (buff, RINGBUFF_EVT_READ, len);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d005      	beq.n	8000eec <RingBuffSkip+0x8c>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	4798      	blx	r3
    return len;
 8000eec:	683b      	ldr	r3, [r7, #0]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	deadbeef 	.word	0xdeadbeef
 8000efc:	21524110 	.word	0x21524110

08000f00 <IMUReadReg>:
#include "sensors/imu/bmixxx.h"
#include <string.h>

#define BIT_ISSET(v, bit) ((v & bit) == 1)

STATUS_TYPE IMUReadReg (IMU const* pIMU, uint8_t reg, uint8_t* pBuf, uint32_t len) {
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b091      	sub	sp, #68	@ 0x44
 8000f04:	af02      	add	r7, sp, #8
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	72fb      	strb	r3, [r7, #11]
    uint8_t pTx[16] = { 0 };
 8000f10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
    // set read mask for register address
    pTx[0] = BMI3_SPI_RD_MASK | reg;
 8000f1e:	7afb      	ldrb	r3, [r7, #11]
 8000f20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    uint8_t pRx[16] = { 0 };
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
    // status = HAL_SPI_Transmit(pIMUSPIRef, pTemp, 1, 100);

    // set NSS high
    // HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

    if (len + pIMU->nDummyBytes > 16) {
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	2b10      	cmp	r3, #16
 8000f42:	d901      	bls.n	8000f48 <IMUReadReg+0x48>
        return eSTATUS_FAILURE;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e034      	b.n	8000fb2 <IMUReadReg+0xb2>
    }

    HAL_StatusTypeDef status =
    HAL_SPI_TransmitReceive (pIMU->pSPI, pTx, pRx, len + pIMU->nDummyBytes, 100);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	4413      	add	r3, r2
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	f107 0214 	add.w	r2, r7, #20
 8000f5e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000f62:	2464      	movs	r4, #100	@ 0x64
 8000f64:	9400      	str	r4, [sp, #0]
 8000f66:	f005 f9ad 	bl	80062c4 <HAL_SPI_TransmitReceive>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (status != HAL_OK) {
 8000f70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d011      	beq.n	8000f9c <IMUReadReg+0x9c>
        LOG_ERROR ("HAL failed to transmit to IMU");
 8000f78:	4810      	ldr	r0, [pc, #64]	@ (8000fbc <IMUReadReg+0xbc>)
 8000f7a:	f008 fcd1 	bl	8009920 <iprintf>
 8000f7e:	4810      	ldr	r0, [pc, #64]	@ (8000fc0 <IMUReadReg+0xc0>)
 8000f80:	f008 fcce 	bl	8009920 <iprintf>
 8000f84:	211d      	movs	r1, #29
 8000f86:	480f      	ldr	r0, [pc, #60]	@ (8000fc4 <IMUReadReg+0xc4>)
 8000f88:	f008 fcca 	bl	8009920 <iprintf>
 8000f8c:	480e      	ldr	r0, [pc, #56]	@ (8000fc8 <IMUReadReg+0xc8>)
 8000f8e:	f008 fcc7 	bl	8009920 <iprintf>
 8000f92:	480e      	ldr	r0, [pc, #56]	@ (8000fcc <IMUReadReg+0xcc>)
 8000f94:	f008 fd2c 	bl	80099f0 <puts>
        return eSTATUS_FAILURE;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e00a      	b.n	8000fb2 <IMUReadReg+0xb2>
    }
    // The first nDummyBytes are dummy bytes
    memcpy (pBuf, &pRx[pIMU->nDummyBytes], len);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fa0:	f107 0214 	add.w	r2, r7, #20
 8000fa4:	4413      	add	r3, r2
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f008 fe7b 	bl	8009ca6 <memcpy>
    // LOG_INFO("Successful read from IMU");
    return eSTATUS_SUCCESS;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	373c      	adds	r7, #60	@ 0x3c
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd90      	pop	{r4, r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	0800a780 	.word	0x0800a780
 8000fc0:	0800a78c 	.word	0x0800a78c
 8000fc4:	0800a7e0 	.word	0x0800a7e0
 8000fc8:	0800a7e8 	.word	0x0800a7e8
 8000fcc:	0800a808 	.word	0x0800a808

08000fd0 <IMUWriteReg>:

STATUS_TYPE IMUWriteReg (IMU const* pIMU, uint8_t reg, uint8_t* pBuf, uint32_t len) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	@ 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	72fb      	strb	r3, [r7, #11]
    uint8_t pTx[16];
    memset (pTx, 0, sizeof (pTx));
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2210      	movs	r2, #16
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f008 fde1 	bl	8009bb0 <memset>

    if (len + 1 > 16) {
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	2b10      	cmp	r3, #16
 8000ff4:	d901      	bls.n	8000ffa <IMUWriteReg+0x2a>
        return eSTATUS_FAILURE;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e031      	b.n	800105e <IMUWriteReg+0x8e>
    }

    pTx[0] = reg | BMI3_SPI_WR_MASK;
 8000ffa:	7afb      	ldrb	r3, [r7, #11]
 8000ffc:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8001000:	b2db      	uxtb	r3, r3
 8001002:	753b      	strb	r3, [r7, #20]
    memcpy (&pTx[1], (void*)pBuf, len);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	3301      	adds	r3, #1
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	4618      	mov	r0, r3
 8001010:	f008 fe49 	bl	8009ca6 <memcpy>

    HAL_StatusTypeDef status = HAL_SPI_Transmit (pIMU->pSPI, pTx, len + 1, 100);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	3301      	adds	r3, #1
 800101e:	b29a      	uxth	r2, r3
 8001020:	f107 0114 	add.w	r1, r7, #20
 8001024:	2364      	movs	r3, #100	@ 0x64
 8001026:	f004 ff5f 	bl	8005ee8 <HAL_SPI_Transmit>
 800102a:	4603      	mov	r3, r0
 800102c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (status != HAL_OK) {
 8001030:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001034:	2b00      	cmp	r3, #0
 8001036:	d011      	beq.n	800105c <IMUWriteReg+0x8c>
        LOG_ERROR ("HAL failed to transmit to IMU");
 8001038:	480b      	ldr	r0, [pc, #44]	@ (8001068 <IMUWriteReg+0x98>)
 800103a:	f008 fc71 	bl	8009920 <iprintf>
 800103e:	480b      	ldr	r0, [pc, #44]	@ (800106c <IMUWriteReg+0x9c>)
 8001040:	f008 fc6e 	bl	8009920 <iprintf>
 8001044:	2134      	movs	r1, #52	@ 0x34
 8001046:	480a      	ldr	r0, [pc, #40]	@ (8001070 <IMUWriteReg+0xa0>)
 8001048:	f008 fc6a 	bl	8009920 <iprintf>
 800104c:	4809      	ldr	r0, [pc, #36]	@ (8001074 <IMUWriteReg+0xa4>)
 800104e:	f008 fc67 	bl	8009920 <iprintf>
 8001052:	4809      	ldr	r0, [pc, #36]	@ (8001078 <IMUWriteReg+0xa8>)
 8001054:	f008 fccc 	bl	80099f0 <puts>
        return eSTATUS_FAILURE;
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <IMUWriteReg+0x8e>
    }

    // LOG_INFO("Successful write to IMU");
    return eSTATUS_SUCCESS;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3728      	adds	r7, #40	@ 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	0800a780 	.word	0x0800a780
 800106c:	0800a78c 	.word	0x0800a78c
 8001070:	0800a7e0 	.word	0x0800a7e0
 8001074:	0800a7e8 	.word	0x0800a7e8
 8001078:	0800a808 	.word	0x0800a808

0800107c <IMU2CPUInterruptHandler>:
    // pOutputVel->z = curVel.z + ((az * dt) / 1000);

    return eSTATUS_SUCCESS;
}

STATUS_TYPE IMU2CPUInterruptHandler (IMU* pIMU, Vec3* pOutputAccel, Vec3* pOutputGyro) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
    if (pIMU == NULL || pIMU->pSPI == NULL || pOutputAccel == NULL || pOutputGyro == NULL) {
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d009      	beq.n	80010a2 <IMU2CPUInterruptHandler+0x26>
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d005      	beq.n	80010a2 <IMU2CPUInterruptHandler+0x26>
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d002      	beq.n	80010a2 <IMU2CPUInterruptHandler+0x26>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d111      	bne.n	80010c6 <IMU2CPUInterruptHandler+0x4a>
        LOG_ERROR ("Invalid arguments");
 80010a2:	4821      	ldr	r0, [pc, #132]	@ (8001128 <IMU2CPUInterruptHandler+0xac>)
 80010a4:	f008 fc3c 	bl	8009920 <iprintf>
 80010a8:	4820      	ldr	r0, [pc, #128]	@ (800112c <IMU2CPUInterruptHandler+0xb0>)
 80010aa:	f008 fc39 	bl	8009920 <iprintf>
 80010ae:	2190      	movs	r1, #144	@ 0x90
 80010b0:	481f      	ldr	r0, [pc, #124]	@ (8001130 <IMU2CPUInterruptHandler+0xb4>)
 80010b2:	f008 fc35 	bl	8009920 <iprintf>
 80010b6:	481f      	ldr	r0, [pc, #124]	@ (8001134 <IMU2CPUInterruptHandler+0xb8>)
 80010b8:	f008 fc32 	bl	8009920 <iprintf>
 80010bc:	481e      	ldr	r0, [pc, #120]	@ (8001138 <IMU2CPUInterruptHandler+0xbc>)
 80010be:	f008 fc97 	bl	80099f0 <puts>
        return eSTATUS_FAILURE;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e02c      	b.n	8001120 <IMU2CPUInterruptHandler+0xa4>
    }

    // read both status registers
    uint8_t pBuf[2]    = { 0, 0 };
 80010c6:	2300      	movs	r3, #0
 80010c8:	823b      	strh	r3, [r7, #16]
    STATUS_TYPE status = IMUReadReg (pIMU, BMI3_REG_INT_STATUS_INT1, pBuf, 2);
 80010ca:	f107 0210 	add.w	r2, r7, #16
 80010ce:	2302      	movs	r3, #2
 80010d0:	210d      	movs	r1, #13
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f7ff ff14 	bl	8000f00 <IMUReadReg>
 80010d8:	4603      	mov	r3, r0
 80010da:	75fb      	strb	r3, [r7, #23]

    if (status != eSTATUS_SUCCESS) {
 80010dc:	7dfb      	ldrb	r3, [r7, #23]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <IMU2CPUInterruptHandler+0x6a>
        return eSTATUS_FAILURE;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e01c      	b.n	8001120 <IMU2CPUInterruptHandler+0xa4>
    }

    uint16_t intStatus1 = ((uint16_t)pBuf[1]) << 8 | (uint16_t)pBuf[0];
 80010e6:	7c7b      	ldrb	r3, [r7, #17]
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	7c3b      	ldrb	r3, [r7, #16]
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	82bb      	strh	r3, [r7, #20]
        status |= IMUUpdateGyro (pIMU, *pOutputGyro, pOutputGyro);
    /* check if temperature data is ready */
    if (BIT_ISSET (intStatus1, (11 << 1)))
        ;

    if (status != eSTATUS_SUCCESS)
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00f      	beq.n	800111e <IMU2CPUInterruptHandler+0xa2>
        LOG_ERROR ("Failed to update IMU position data");
 80010fe:	480a      	ldr	r0, [pc, #40]	@ (8001128 <IMU2CPUInterruptHandler+0xac>)
 8001100:	f008 fc0e 	bl	8009920 <iprintf>
 8001104:	4809      	ldr	r0, [pc, #36]	@ (800112c <IMU2CPUInterruptHandler+0xb0>)
 8001106:	f008 fc0b 	bl	8009920 <iprintf>
 800110a:	21b0      	movs	r1, #176	@ 0xb0
 800110c:	4808      	ldr	r0, [pc, #32]	@ (8001130 <IMU2CPUInterruptHandler+0xb4>)
 800110e:	f008 fc07 	bl	8009920 <iprintf>
 8001112:	480a      	ldr	r0, [pc, #40]	@ (800113c <IMU2CPUInterruptHandler+0xc0>)
 8001114:	f008 fc04 	bl	8009920 <iprintf>
 8001118:	4807      	ldr	r0, [pc, #28]	@ (8001138 <IMU2CPUInterruptHandler+0xbc>)
 800111a:	f008 fc69 	bl	80099f0 <puts>

    return status;
 800111e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	0800a780 	.word	0x0800a780
 800112c:	0800a78c 	.word	0x0800a78c
 8001130:	0800a7e0 	.word	0x0800a7e0
 8001134:	0800a80c 	.word	0x0800a80c
 8001138:	0800a808 	.word	0x0800a808
 800113c:	0800a820 	.word	0x0800a820

08001140 <IMUSoftReset>:

STATUS_TYPE IMUSoftReset (IMU* pIMU) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	@ 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
    /* Send soft reset command to BMI323 */
    uint8_t cmdBuffer[2] = { 0 };
 8001148:	2300      	movs	r3, #0
 800114a:	843b      	strh	r3, [r7, #32]
    cmdBuffer[0] = (uint8_t)(BMI3_CMD_SOFT_RESET & BMI3_SET_LOW_BYTE);
 800114c:	23af      	movs	r3, #175	@ 0xaf
 800114e:	f887 3020 	strb.w	r3, [r7, #32]
    cmdBuffer[1] = (uint8_t)((BMI3_CMD_SOFT_RESET & BMI3_SET_HIGH_BYTE) >> 8);
 8001152:	23de      	movs	r3, #222	@ 0xde
 8001154:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    STATUS_TYPE status = IMUWriteReg (pIMU, BMI3_REG_CMD, cmdBuffer, 2);
 8001158:	f107 0220 	add.w	r2, r7, #32
 800115c:	2302      	movs	r3, #2
 800115e:	217e      	movs	r1, #126	@ 0x7e
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff35 	bl	8000fd0 <IMUWriteReg>
 8001166:	4603      	mov	r3, r0
 8001168:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Perform dummy read to switch from I3C/I2C to SPI */
    if (status == eSTATUS_SUCCESS) {
 800116c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10b      	bne.n	800118c <IMUSoftReset+0x4c>
        uint8_t dummyBytes[2] = { 0 };
 8001174:	2300      	movs	r3, #0
 8001176:	83bb      	strh	r3, [r7, #28]
        status = IMUReadReg (pIMU, BMI3_REG_CHIP_ID, dummyBytes, 2);
 8001178:	f107 021c 	add.w	r2, r7, #28
 800117c:	2302      	movs	r3, #2
 800117e:	2100      	movs	r1, #0
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff febd 	bl	8000f00 <IMUReadReg>
 8001186:	4603      	mov	r3, r0
 8001188:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable feature engine */
    if (status == eSTATUS_SUCCESS) {
 800118c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001190:	2b00      	cmp	r3, #0
 8001192:	d10c      	bne.n	80011ae <IMUSoftReset+0x6e>
        uint8_t featureData[2] = { 0x2c, 0x01 };
 8001194:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001198:	833b      	strh	r3, [r7, #24]
        status = IMUWriteReg (pIMU, BMI3_REG_FEATURE_IO2, featureData, 2);
 800119a:	f107 0218 	add.w	r2, r7, #24
 800119e:	2302      	movs	r3, #2
 80011a0:	2112      	movs	r1, #18
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff14 	bl	8000fd0 <IMUWriteReg>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable feature status bit */
    if (status == eSTATUS_SUCCESS) {
 80011ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10b      	bne.n	80011ce <IMUSoftReset+0x8e>
        uint8_t featureIOStatus[2] = { BMI3_ENABLE, 0 };
 80011b6:	2301      	movs	r3, #1
 80011b8:	82bb      	strh	r3, [r7, #20]
        status = IMUWriteReg (pIMU, BMI3_REG_FEATURE_IO_STATUS, featureIOStatus, 2);
 80011ba:	f107 0214 	add.w	r2, r7, #20
 80011be:	2302      	movs	r3, #2
 80011c0:	2114      	movs	r1, #20
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ff04 	bl	8000fd0 <IMUWriteReg>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable feature engine bit */
    if (status == eSTATUS_SUCCESS) {
 80011ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10b      	bne.n	80011ee <IMUSoftReset+0xae>
        uint8_t featureEngine[2] = { BMI3_ENABLE, 0 };
 80011d6:	2301      	movs	r3, #1
 80011d8:	823b      	strh	r3, [r7, #16]
        status = IMUWriteReg (pIMU, BMI3_REG_FEATURE_CTRL, featureEngine, 2);
 80011da:	f107 0210 	add.w	r2, r7, #16
 80011de:	2302      	movs	r3, #2
 80011e0:	2140      	movs	r1, #64	@ 0x40
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff fef4 	bl	8000fd0 <IMUWriteReg>
 80011e8:	4603      	mov	r3, r0
 80011ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if (status == eSTATUS_SUCCESS) {
 80011ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d126      	bne.n	8001244 <IMUSoftReset+0x104>
        int16_t loop       = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
        uint8_t regData[2] = { 0 };
 80011fa:	2300      	movs	r3, #0
 80011fc:	81bb      	strh	r3, [r7, #12]

        while (loop++ <= 10) {
 80011fe:	e019      	b.n	8001234 <IMUSoftReset+0xf4>
            HAL_Delay (100);
 8001200:	2064      	movs	r0, #100	@ 0x64
 8001202:	f001 fadb 	bl	80027bc <HAL_Delay>
            status = IMUReadReg (pIMU, BMI3_REG_FEATURE_IO1, regData, 2);
 8001206:	f107 020c 	add.w	r2, r7, #12
 800120a:	2302      	movs	r3, #2
 800120c:	2111      	movs	r1, #17
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff fe76 	bl	8000f00 <IMUReadReg>
 8001214:	4603      	mov	r3, r0
 8001216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if (status == eSTATUS_SUCCESS) {
 800121a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800121e:	2b00      	cmp	r3, #0
 8001220:	d108      	bne.n	8001234 <IMUSoftReset+0xf4>
                if (regData[0] & BMI3_FEATURE_ENGINE_ENABLE_MASK) {
 8001222:	7b3b      	ldrb	r3, [r7, #12]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <IMUSoftReset+0xf4>
                    status = eSTATUS_SUCCESS;
 800122c:	2300      	movs	r3, #0
 800122e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    break;
 8001232:	e007      	b.n	8001244 <IMUSoftReset+0x104>
        while (loop++ <= 10) {
 8001234:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001238:	b29a      	uxth	r2, r3
 800123a:	3201      	adds	r2, #1
 800123c:	b292      	uxth	r2, r2
 800123e:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8001240:	2b0a      	cmp	r3, #10
 8001242:	dddd      	ble.n	8001200 <IMUSoftReset+0xc0>
                }
            }
        }
    }

    return status;
 8001244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001248:	4618      	mov	r0, r3
 800124a:	3728      	adds	r7, #40	@ 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <IMUSetupInterrupts>:

STATUS_TYPE IMUSetupInterrupts (IMU const* pIMU) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
    uint8_t pRegData[4] = { 0 };
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
    uint16_t temp       = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	82bb      	strh	r3, [r7, #20]
    /* Map all enabled interrupts to pin INT1 */
    uint8_t enable = BMI3_INT1, disable = BMI3_INT_NONE;
 8001260:	2301      	movs	r3, #1
 8001262:	74fb      	strb	r3, [r7, #19]
 8001264:	2300      	movs	r3, #0
 8001266:	74bb      	strb	r3, [r7, #18]
    STATUS_TYPE status = IMUReadReg (pIMU, BMI3_REG_INT_MAP1, pRegData, 4);
 8001268:	f107 020c 	add.w	r2, r7, #12
 800126c:	2304      	movs	r3, #4
 800126e:	213a      	movs	r1, #58	@ 0x3a
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff fe45 	bl	8000f00 <IMUReadReg>
 8001276:	4603      	mov	r3, r0
 8001278:	75fb      	strb	r3, [r7, #23]

    if (status == eSTATUS_SUCCESS) {
 800127a:	7dfb      	ldrb	r3, [r7, #23]
 800127c:	2b00      	cmp	r3, #0
 800127e:	f040 8101 	bne.w	8001484 <IMUSetupInterrupts+0x234>
        pRegData[0] = BMI3_SET_BIT_POS0 (pRegData[0], BMI3_NO_MOTION_OUT, disable);
 8001282:	7b3b      	ldrb	r3, [r7, #12]
 8001284:	b25b      	sxtb	r3, r3
 8001286:	f023 0303 	bic.w	r3, r3, #3
 800128a:	b25a      	sxtb	r2, r3
 800128c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	b25b      	sxtb	r3, r3
 8001296:	4313      	orrs	r3, r2
 8001298:	b25b      	sxtb	r3, r3
 800129a:	b2db      	uxtb	r3, r3
 800129c:	733b      	strb	r3, [r7, #12]
        pRegData[0] = BMI3_SET_BITS (pRegData[0], BMI3_ANY_MOTION_OUT, disable);
 800129e:	7b3b      	ldrb	r3, [r7, #12]
 80012a0:	b25b      	sxtb	r3, r3
 80012a2:	f023 030c 	bic.w	r3, r3, #12
 80012a6:	b25a      	sxtb	r2, r3
 80012a8:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	f003 030c 	and.w	r3, r3, #12
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	733b      	strb	r3, [r7, #12]
        pRegData[0] = BMI3_SET_BITS (pRegData[0], BMI3_FLAT_OUT, disable);
 80012be:	7b3b      	ldrb	r3, [r7, #12]
 80012c0:	b25b      	sxtb	r3, r3
 80012c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80012c6:	b25a      	sxtb	r2, r3
 80012c8:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	4313      	orrs	r3, r2
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	733b      	strb	r3, [r7, #12]
        pRegData[0] = BMI3_SET_BITS (pRegData[0], BMI3_ORIENTATION_OUT, disable);
 80012de:	7b3b      	ldrb	r3, [r7, #12]
 80012e0:	b25b      	sxtb	r3, r3
 80012e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80012e6:	b25a      	sxtb	r2, r3
 80012e8:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80012ec:	019b      	lsls	r3, r3, #6
 80012ee:	b25b      	sxtb	r3, r3
 80012f0:	4313      	orrs	r3, r2
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	733b      	strb	r3, [r7, #12]

        temp = (uint16_t)(pRegData[1]) << 8;
 80012f8:	7b7b      	ldrb	r3, [r7, #13]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	82bb      	strh	r3, [r7, #20]
        temp = BMI3_SET_BITS (temp, BMI3_STEP_DETECTOR_OUT, disable);
 80012fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001302:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001306:	b21a      	sxth	r2, r3
 8001308:	7cbb      	ldrb	r3, [r7, #18]
 800130a:	b21b      	sxth	r3, r3
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	b21b      	sxth	r3, r3
 8001310:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b21b      	sxth	r3, r3
 800131a:	82bb      	strh	r3, [r7, #20]
        temp = BMI3_SET_BITS (temp, BMI3_STEP_COUNTER_OUT, disable);
 800131c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001320:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001324:	b21a      	sxth	r2, r3
 8001326:	7cbb      	ldrb	r3, [r7, #18]
 8001328:	b21b      	sxth	r3, r3
 800132a:	029b      	lsls	r3, r3, #10
 800132c:	b21b      	sxth	r3, r3
 800132e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001332:	b21b      	sxth	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b21b      	sxth	r3, r3
 8001338:	82bb      	strh	r3, [r7, #20]
        temp = BMI3_SET_BITS (temp, BMI3_SIG_MOTION_OUT, disable);
 800133a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800133e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001342:	b21a      	sxth	r2, r3
 8001344:	7cbb      	ldrb	r3, [r7, #18]
 8001346:	b21b      	sxth	r3, r3
 8001348:	031b      	lsls	r3, r3, #12
 800134a:	b21b      	sxth	r3, r3
 800134c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001350:	b21b      	sxth	r3, r3
 8001352:	4313      	orrs	r3, r2
 8001354:	b21b      	sxth	r3, r3
 8001356:	82bb      	strh	r3, [r7, #20]
        temp = BMI3_SET_BITS (temp, BMI3_TILT_OUT, disable);
 8001358:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800135c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001360:	b21a      	sxth	r2, r3
 8001362:	7cbb      	ldrb	r3, [r7, #18]
 8001364:	b21b      	sxth	r3, r3
 8001366:	039b      	lsls	r3, r3, #14
 8001368:	b21b      	sxth	r3, r3
 800136a:	4313      	orrs	r3, r2
 800136c:	b21b      	sxth	r3, r3
 800136e:	82bb      	strh	r3, [r7, #20]
        pRegData[1] = (uint8_t)(temp >> 8);
 8001370:	8abb      	ldrh	r3, [r7, #20]
 8001372:	0a1b      	lsrs	r3, r3, #8
 8001374:	b29b      	uxth	r3, r3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	737b      	strb	r3, [r7, #13]

        pRegData[2] = BMI3_SET_BIT_POS0 (pRegData[2], BMI3_TAP_OUT, disable);
 800137a:	7bbb      	ldrb	r3, [r7, #14]
 800137c:	b25b      	sxtb	r3, r3
 800137e:	f023 0303 	bic.w	r3, r3, #3
 8001382:	b25a      	sxtb	r2, r3
 8001384:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	b25b      	sxtb	r3, r3
 800138e:	4313      	orrs	r3, r2
 8001390:	b25b      	sxtb	r3, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	73bb      	strb	r3, [r7, #14]
        pRegData[2] = BMI3_SET_BITS (pRegData[2], BMI3_I3C_OUT, disable);
 8001396:	7bbb      	ldrb	r3, [r7, #14]
 8001398:	b25b      	sxtb	r3, r3
 800139a:	f023 030c 	bic.w	r3, r3, #12
 800139e:	b25a      	sxtb	r2, r3
 80013a0:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	f003 030c 	and.w	r3, r3, #12
 80013ac:	b25b      	sxtb	r3, r3
 80013ae:	4313      	orrs	r3, r2
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	73bb      	strb	r3, [r7, #14]
        pRegData[2] = BMI3_SET_BITS (pRegData[2], BMI3_ERR_STATUS, disable);
 80013b6:	7bbb      	ldrb	r3, [r7, #14]
 80013b8:	b25b      	sxtb	r3, r3
 80013ba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80013be:	b25a      	sxtb	r2, r3
 80013c0:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80013cc:	b25b      	sxtb	r3, r3
 80013ce:	4313      	orrs	r3, r2
 80013d0:	b25b      	sxtb	r3, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	73bb      	strb	r3, [r7, #14]
        pRegData[2] = BMI3_SET_BITS (pRegData[2], BMI3_TEMP_DRDY_INT, enable);
 80013d6:	7bbb      	ldrb	r3, [r7, #14]
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013de:	b25a      	sxtb	r2, r3
 80013e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80013e4:	019b      	lsls	r3, r3, #6
 80013e6:	b25b      	sxtb	r3, r3
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b25b      	sxtb	r3, r3
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	73bb      	strb	r3, [r7, #14]

        temp = (uint16_t)(pRegData[3]) << 8;
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	82bb      	strh	r3, [r7, #20]
        temp = BMI3_SET_BITS (temp, BMI3_GYR_DRDY_INT, enable);
 80013f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80013fe:	b21a      	sxth	r2, r3
 8001400:	7cfb      	ldrb	r3, [r7, #19]
 8001402:	b21b      	sxth	r3, r3
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	b21b      	sxth	r3, r3
 8001408:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800140c:	b21b      	sxth	r3, r3
 800140e:	4313      	orrs	r3, r2
 8001410:	b21b      	sxth	r3, r3
 8001412:	82bb      	strh	r3, [r7, #20]
        temp = BMI3_SET_BITS (temp, BMI3_ACC_DRDY_INT, enable);
 8001414:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001418:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800141c:	b21a      	sxth	r2, r3
 800141e:	7cfb      	ldrb	r3, [r7, #19]
 8001420:	b21b      	sxth	r3, r3
 8001422:	029b      	lsls	r3, r3, #10
 8001424:	b21b      	sxth	r3, r3
 8001426:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800142a:	b21b      	sxth	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b21b      	sxth	r3, r3
 8001430:	82bb      	strh	r3, [r7, #20]
        temp = BMI3_SET_BITS (temp, BMI3_FIFO_WATERMARK_INT, disable);
 8001432:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001436:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800143a:	b21a      	sxth	r2, r3
 800143c:	7cbb      	ldrb	r3, [r7, #18]
 800143e:	b21b      	sxth	r3, r3
 8001440:	031b      	lsls	r3, r3, #12
 8001442:	b21b      	sxth	r3, r3
 8001444:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001448:	b21b      	sxth	r3, r3
 800144a:	4313      	orrs	r3, r2
 800144c:	b21b      	sxth	r3, r3
 800144e:	82bb      	strh	r3, [r7, #20]
        temp = BMI3_SET_BITS (temp, BMI3_FIFO_FULL_INT, disable);
 8001450:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001454:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001458:	b21a      	sxth	r2, r3
 800145a:	7cbb      	ldrb	r3, [r7, #18]
 800145c:	b21b      	sxth	r3, r3
 800145e:	039b      	lsls	r3, r3, #14
 8001460:	b21b      	sxth	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	b21b      	sxth	r3, r3
 8001466:	82bb      	strh	r3, [r7, #20]
        pRegData[3] = (uint8_t)(temp >> 8);
 8001468:	8abb      	ldrh	r3, [r7, #20]
 800146a:	0a1b      	lsrs	r3, r3, #8
 800146c:	b29b      	uxth	r3, r3
 800146e:	b2db      	uxtb	r3, r3
 8001470:	73fb      	strb	r3, [r7, #15]

        status = IMUWriteReg (pIMU, BMI3_REG_INT_MAP1, pRegData, 4);
 8001472:	f107 020c 	add.w	r2, r7, #12
 8001476:	2304      	movs	r3, #4
 8001478:	213a      	movs	r1, #58	@ 0x3a
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fda8 	bl	8000fd0 <IMUWriteReg>
 8001480:	4603      	mov	r3, r0
 8001482:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 8001484:	7dfb      	ldrb	r3, [r7, #23]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <IMUInit>:
IMU* pIMU,
SPI_HandleTypeDef* pSPI,
IMU_ACC_RANGE accRange,
IMU_ACC_ODR accODR,
IMU_GYRO_RANGE gyroRange,
IMU_GYRO_ODR gyroODR) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b08c      	sub	sp, #48	@ 0x30
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	4611      	mov	r1, r2
 800149c:	461a      	mov	r2, r3
 800149e:	460b      	mov	r3, r1
 80014a0:	71fb      	strb	r3, [r7, #7]
 80014a2:	4613      	mov	r3, r2
 80014a4:	71bb      	strb	r3, [r7, #6]
    memset (pIMU, 0, sizeof (IMU));
 80014a6:	223c      	movs	r2, #60	@ 0x3c
 80014a8:	2100      	movs	r1, #0
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f008 fb80 	bl	8009bb0 <memset>
    pIMU->pSPI                 = pSPI;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	601a      	str	r2, [r3, #0]
    pIMU->accRange             = accRange;
 80014b6:	79fa      	ldrb	r2, [r7, #7]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	625a      	str	r2, [r3, #36]	@ 0x24
    pIMU->accODR               = accODR;
 80014bc:	79ba      	ldrb	r2, [r7, #6]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	629a      	str	r2, [r3, #40]	@ 0x28
    pIMU->gyroRange            = gyroRange;
 80014c2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    pIMU->gyroODR              = gyroODR;
 80014ca:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	631a      	str	r2, [r3, #48]	@ 0x30
    pIMU->msLastAccUpdateTime  = HAL_GetTick ();
 80014d2:	f001 f967 	bl	80027a4 <HAL_GetTick>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	61da      	str	r2, [r3, #28]
    pIMU->msLastGyroUpdateTime = HAL_GetTick ();
 80014de:	f001 f961 	bl	80027a4 <HAL_GetTick>
 80014e2:	4603      	mov	r3, r0
 80014e4:	461a      	mov	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	621a      	str	r2, [r3, #32]
    /* SPI reads have 1 dummy byte at the beginning */
    pIMU->nDummyBytes = 1;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2201      	movs	r2, #1
 80014ee:	635a      	str	r2, [r3, #52]	@ 0x34
    pIMU->magic       = IMU_MAGIC;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4a94      	ldr	r2, [pc, #592]	@ (8001744 <IMUInit+0x2b4>)
 80014f4:	639a      	str	r2, [r3, #56]	@ 0x38

    STATUS_TYPE status = IMUSoftReset (pIMU);
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f7ff fe22 	bl	8001140 <IMUSoftReset>
 80014fc:	4603      	mov	r3, r0
 80014fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status != eSTATUS_SUCCESS) {
 8001502:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001506:	2b00      	cmp	r3, #0
 8001508:	d013      	beq.n	8001532 <IMUInit+0xa2>
        LOG_ERROR ("Failed to soft reset IMU");
 800150a:	488f      	ldr	r0, [pc, #572]	@ (8001748 <IMUInit+0x2b8>)
 800150c:	f008 fa08 	bl	8009920 <iprintf>
 8001510:	488e      	ldr	r0, [pc, #568]	@ (800174c <IMUInit+0x2bc>)
 8001512:	f008 fa05 	bl	8009920 <iprintf>
 8001516:	f240 1123 	movw	r1, #291	@ 0x123
 800151a:	488d      	ldr	r0, [pc, #564]	@ (8001750 <IMUInit+0x2c0>)
 800151c:	f008 fa00 	bl	8009920 <iprintf>
 8001520:	488c      	ldr	r0, [pc, #560]	@ (8001754 <IMUInit+0x2c4>)
 8001522:	f008 f9fd 	bl	8009920 <iprintf>
 8001526:	488c      	ldr	r0, [pc, #560]	@ (8001758 <IMUInit+0x2c8>)
 8001528:	f008 fa62 	bl	80099f0 <puts>
        return status;
 800152c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001530:	e103      	b.n	800173a <IMUInit+0x2aa>
    }

    uint8_t pChipID[2] = { 0 };
 8001532:	2300      	movs	r3, #0
 8001534:	833b      	strh	r3, [r7, #24]
    status             = IMUReadReg (pIMU, BMI3_REG_CHIP_ID, pChipID, 2);
 8001536:	f107 0218 	add.w	r2, r7, #24
 800153a:	2302      	movs	r3, #2
 800153c:	2100      	movs	r1, #0
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f7ff fcde 	bl	8000f00 <IMUReadReg>
 8001544:	4603      	mov	r3, r0
 8001546:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (pChipID != BMI323_CHIP_ID) {
 800154a:	f107 0318 	add.w	r3, r7, #24
 800154e:	2b43      	cmp	r3, #67	@ 0x43
 8001550:	d014      	beq.n	800157c <IMUInit+0xec>
        LOG_ERROR ("Failed to find BMI323. Chip ID [%X] is incorrect", pChipID[0]);
 8001552:	487d      	ldr	r0, [pc, #500]	@ (8001748 <IMUInit+0x2b8>)
 8001554:	f008 f9e4 	bl	8009920 <iprintf>
 8001558:	487c      	ldr	r0, [pc, #496]	@ (800174c <IMUInit+0x2bc>)
 800155a:	f008 f9e1 	bl	8009920 <iprintf>
 800155e:	f44f 7195 	mov.w	r1, #298	@ 0x12a
 8001562:	487b      	ldr	r0, [pc, #492]	@ (8001750 <IMUInit+0x2c0>)
 8001564:	f008 f9dc 	bl	8009920 <iprintf>
 8001568:	7e3b      	ldrb	r3, [r7, #24]
 800156a:	4619      	mov	r1, r3
 800156c:	487b      	ldr	r0, [pc, #492]	@ (800175c <IMUInit+0x2cc>)
 800156e:	f008 f9d7 	bl	8009920 <iprintf>
 8001572:	4879      	ldr	r0, [pc, #484]	@ (8001758 <IMUInit+0x2c8>)
 8001574:	f008 fa3c 	bl	80099f0 <puts>
        return eSTATUS_FAILURE;
 8001578:	2301      	movs	r3, #1
 800157a:	e0de      	b.n	800173a <IMUInit+0x2aa>
    }

    /* Enable acc, gyro, and temperature - data ready interrupts for pin INT1 */
    status = IMUSetupInterrupts (pIMU);
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f7ff fe67 	bl	8001250 <IMUSetupInterrupts>
 8001582:	4603      	mov	r3, r0
 8001584:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status != eSTATUS_SUCCESS) {
 8001588:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800158c:	2b00      	cmp	r3, #0
 800158e:	d012      	beq.n	80015b6 <IMUInit+0x126>
        LOG_ERROR ("Failed to setup IMU interrupts");
 8001590:	486d      	ldr	r0, [pc, #436]	@ (8001748 <IMUInit+0x2b8>)
 8001592:	f008 f9c5 	bl	8009920 <iprintf>
 8001596:	486d      	ldr	r0, [pc, #436]	@ (800174c <IMUInit+0x2bc>)
 8001598:	f008 f9c2 	bl	8009920 <iprintf>
 800159c:	f240 1131 	movw	r1, #305	@ 0x131
 80015a0:	486b      	ldr	r0, [pc, #428]	@ (8001750 <IMUInit+0x2c0>)
 80015a2:	f008 f9bd 	bl	8009920 <iprintf>
 80015a6:	486e      	ldr	r0, [pc, #440]	@ (8001760 <IMUInit+0x2d0>)
 80015a8:	f008 f9ba 	bl	8009920 <iprintf>
 80015ac:	486a      	ldr	r0, [pc, #424]	@ (8001758 <IMUInit+0x2c8>)
 80015ae:	f008 fa1f 	bl	80099f0 <puts>
        return eSTATUS_FAILURE;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e0c1      	b.n	800173a <IMUInit+0x2aa>
    }

    /* Configure Accelerometer */
    {

        uint8_t pRegData[2] = { 0 };
 80015b6:	2300      	movs	r3, #0
 80015b8:	82bb      	strh	r3, [r7, #20]
        uint16_t odr, range, bwp, avgNum, accMode;
        odr = BMI3_SET_BIT_POS0 (pRegData[0], BMI3_ACC_ODR, pIMU->accODR);
 80015ba:	7d3b      	ldrb	r3, [r7, #20]
 80015bc:	f023 030f 	bic.w	r3, r3, #15
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	f003 030f 	and.w	r3, r3, #15
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        /* Set accelerometer range */
        range = BMI3_SET_BITS (pRegData[0], BMI3_ACC_RANGE, pIMU->accRange);
 80015d2:	7d3b      	ldrb	r3, [r7, #20]
 80015d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80015d8:	b29a      	uxth	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015de:	b29b      	uxth	r3, r3
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	857b      	strh	r3, [r7, #42]	@ 0x2a
        /* The Accel bandwidth coefficient defines the 3 dB cutoff frequency in relation to the ODR. */
        bwp = BMI3_SET_BITS (pRegData[0], BMI3_ACC_BW, 0x01);
 80015ee:	7d3b      	ldrb	r3, [r7, #20]
 80015f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	853b      	strh	r3, [r7, #40]	@ 0x28
        *  0b011     avg_8   Averaging of 8 samples
        *  0b100     avg_16  Averaging of 16 samples
        *  0b101     avg_32  Averaging of 32 samples
        *  0b110     avg_64  Averaging of 64 samples
        */
        avgNum = BMI3_SET_BITS (pRegData[1], BMI3_ACC_AVG_NUM, BMI3_ACC_AVG64);
 80015f8:	7d7b      	ldrb	r3, [r7, #21]
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8001600:	b21b      	sxth	r3, r3
 8001602:	84fb      	strh	r3, [r7, #38]	@ 0x26
        /* Enable the accel mode where averaging of samples
         * will be done based on above set bandwidth and ODR.
         * Note : By default accel is disabled. The accel will get enable by selecting the mode.
         */
        accMode = BMI3_SET_BITS (pRegData[1], BMI3_ACC_MODE, BMI3_ACC_MODE_NORMAL);
 8001604:	7d7b      	ldrb	r3, [r7, #21]
 8001606:	b21b      	sxth	r3, r3
 8001608:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800160c:	b21b      	sxth	r3, r3
 800160e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        pRegData[0] = (uint8_t)(odr | range | bwp);
 8001610:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001612:	b2da      	uxtb	r2, r3
 8001614:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001616:	b2db      	uxtb	r3, r3
 8001618:	4313      	orrs	r3, r2
 800161a:	b2da      	uxtb	r2, r3
 800161c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800161e:	b2db      	uxtb	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	b2db      	uxtb	r3, r3
 8001624:	753b      	strb	r3, [r7, #20]
        pRegData[1] = (uint8_t)((avgNum | accMode) >> 8);
 8001626:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001628:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800162a:	4313      	orrs	r3, r2
 800162c:	b29b      	uxth	r3, r3
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	b29b      	uxth	r3, r3
 8001632:	b2db      	uxtb	r3, r3
 8001634:	757b      	strb	r3, [r7, #21]
        status      = IMUWriteReg (pIMU, BMI3_REG_ACC_CONF, pRegData, 2);
 8001636:	f107 0214 	add.w	r2, r7, #20
 800163a:	2302      	movs	r3, #2
 800163c:	2120      	movs	r1, #32
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f7ff fcc6 	bl	8000fd0 <IMUWriteReg>
 8001644:	4603      	mov	r3, r0
 8001646:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (status != eSTATUS_SUCCESS) {
 800164a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800164e:	2b00      	cmp	r3, #0
 8001650:	d012      	beq.n	8001678 <IMUInit+0x1e8>
            LOG_ERROR ("Failed to configure IMU accelerometer");
 8001652:	483d      	ldr	r0, [pc, #244]	@ (8001748 <IMUInit+0x2b8>)
 8001654:	f008 f964 	bl	8009920 <iprintf>
 8001658:	483c      	ldr	r0, [pc, #240]	@ (800174c <IMUInit+0x2bc>)
 800165a:	f008 f961 	bl	8009920 <iprintf>
 800165e:	f240 1153 	movw	r1, #339	@ 0x153
 8001662:	483b      	ldr	r0, [pc, #236]	@ (8001750 <IMUInit+0x2c0>)
 8001664:	f008 f95c 	bl	8009920 <iprintf>
 8001668:	483e      	ldr	r0, [pc, #248]	@ (8001764 <IMUInit+0x2d4>)
 800166a:	f008 f959 	bl	8009920 <iprintf>
 800166e:	483a      	ldr	r0, [pc, #232]	@ (8001758 <IMUInit+0x2c8>)
 8001670:	f008 f9be 	bl	80099f0 <puts>
            return eSTATUS_FAILURE;
 8001674:	2301      	movs	r3, #1
 8001676:	e060      	b.n	800173a <IMUInit+0x2aa>
        }
    }

    /* Configure Gyro */
    {
        uint8_t pRegData[2] = { 0 };
 8001678:	2300      	movs	r3, #0
 800167a:	823b      	strh	r3, [r7, #16]
        uint16_t odr, range, bwp, avgNum, accMode;
        /* Output Data Rate. By default ODR is set as 100Hz for gyro. */
        odr = BMI3_SET_BIT_POS0 (pRegData[0], BMI3_GYR_ODR, pIMU->gyroODR);
 800167c:	7c3b      	ldrb	r3, [r7, #16]
 800167e:	f023 030f 	bic.w	r3, r3, #15
 8001682:	b29a      	uxth	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001688:	b29b      	uxth	r3, r3
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	b29b      	uxth	r3, r3
 8001690:	4313      	orrs	r3, r2
 8001692:	847b      	strh	r3, [r7, #34]	@ 0x22
        /* Gyroscope Angular Rate Measurement Range. By default the range is 2000dps. */
        range = BMI3_SET_BITS (pRegData[0], BMI3_GYR_RANGE, pIMU->gyroRange);
 8001694:	7c3b      	ldrb	r3, [r7, #16]
 8001696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800169a:	b29a      	uxth	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	4313      	orrs	r3, r2
 80016ae:	843b      	strh	r3, [r7, #32]
        /*  The Gyroscope bandwidth coefficient defines the 3 dB cutoff
         * frequency in relation to the ODR Value   Name      Description
         *    0   odr_half   BW = gyr_odr/2
         *    1  odr_quarter BW = gyr_odr/4
         */
        bwp = BMI3_SET_BITS (pRegData[0], BMI3_GYR_BW, BMI3_GYR_BW_ODR_HALF);
 80016b0:	7c3b      	ldrb	r3, [r7, #16]
 80016b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80016b6:	83fb      	strh	r3, [r7, #30]
        *  0b011     avg_8   Averaging of 8 samples
        *  0b100     avg_16  Averaging of 16 samples
        *  0b101     avg_32  Averaging of 32 samples
        *  0b110     avg_64  Averaging of 64 samples
        */
        avgNum = BMI3_SET_BITS (pRegData[1], BMI3_ACC_AVG_NUM, BMI3_GYR_AVG32);
 80016b8:	7c7b      	ldrb	r3, [r7, #17]
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	83bb      	strh	r3, [r7, #28]
        /* Enable the gyro mode where averaging of samples
         * will be done based on above set bandwidth and ODR.
         * Note : By default gyro is disabled. The gyro will get enable by selecting the mode.
         */
        accMode = BMI3_SET_BITS (pRegData[1], BMI3_ACC_MODE, BMI3_GYR_MODE_NORMAL);
 80016c4:	7c7b      	ldrb	r3, [r7, #17]
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	837b      	strh	r3, [r7, #26]
        pRegData[0] = (uint8_t)(odr | range | bwp);
 80016d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	8c3b      	ldrh	r3, [r7, #32]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	4313      	orrs	r3, r2
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	8bfb      	ldrh	r3, [r7, #30]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	4313      	orrs	r3, r2
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	743b      	strb	r3, [r7, #16]
        pRegData[1] = (uint8_t)((avgNum | accMode) >> 8);
 80016e6:	8bba      	ldrh	r2, [r7, #28]
 80016e8:	8b7b      	ldrh	r3, [r7, #26]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	0a1b      	lsrs	r3, r3, #8
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	747b      	strb	r3, [r7, #17]
        status      = IMUWriteReg (pIMU, BMI3_REG_GYR_CONF, pRegData, 2);
 80016f6:	f107 0210 	add.w	r2, r7, #16
 80016fa:	2302      	movs	r3, #2
 80016fc:	2121      	movs	r1, #33	@ 0x21
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f7ff fc66 	bl	8000fd0 <IMUWriteReg>
 8001704:	4603      	mov	r3, r0
 8001706:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (status != eSTATUS_SUCCESS) {
 800170a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800170e:	2b00      	cmp	r3, #0
 8001710:	d012      	beq.n	8001738 <IMUInit+0x2a8>
            LOG_ERROR ("Failed to configure IMU gyroscope");
 8001712:	480d      	ldr	r0, [pc, #52]	@ (8001748 <IMUInit+0x2b8>)
 8001714:	f008 f904 	bl	8009920 <iprintf>
 8001718:	480c      	ldr	r0, [pc, #48]	@ (800174c <IMUInit+0x2bc>)
 800171a:	f008 f901 	bl	8009920 <iprintf>
 800171e:	f44f 71bd 	mov.w	r1, #378	@ 0x17a
 8001722:	480b      	ldr	r0, [pc, #44]	@ (8001750 <IMUInit+0x2c0>)
 8001724:	f008 f8fc 	bl	8009920 <iprintf>
 8001728:	480f      	ldr	r0, [pc, #60]	@ (8001768 <IMUInit+0x2d8>)
 800172a:	f008 f8f9 	bl	8009920 <iprintf>
 800172e:	480a      	ldr	r0, [pc, #40]	@ (8001758 <IMUInit+0x2c8>)
 8001730:	f008 f95e 	bl	80099f0 <puts>
            return eSTATUS_FAILURE;
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <IMUInit+0x2aa>
    // // interrupts will NOT be cleared automatically. Have to be cleared by the
    // // the host reading the int status registers
    // pBuffer[0] = 1;
    // status = IMUWriteReg(pIMU, BMI2_INT_LATCH_ADDR, pBuffer, 1);

    return eSTATUS_SUCCESS;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3730      	adds	r7, #48	@ 0x30
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	fafaafaf 	.word	0xfafaafaf
 8001748:	0800a780 	.word	0x0800a780
 800174c:	0800a78c 	.word	0x0800a78c
 8001750:	0800a7e0 	.word	0x0800a7e0
 8001754:	0800a844 	.word	0x0800a844
 8001758:	0800a808 	.word	0x0800a808
 800175c:	0800a860 	.word	0x0800a860
 8001760:	0800a894 	.word	0x0800a894
 8001764:	0800a8b4 	.word	0x0800a8b4
 8001768:	0800a8dc 	.word	0x0800a8dc

0800176c <SyncMailBoxGet>:
#include "mem/mem.h"
#include "sync/mailbox.h"

static uint8_t volatile* SyncMailBoxGet (uint32_t mbID);

static uint8_t volatile* SyncMailBoxGet (uint32_t mbID) {
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
    uint8_t volatile* pMB = NULL;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
    if (mbID == MAILBOX_CM7_ID)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d103      	bne.n	8001786 <SyncMailBoxGet+0x1a>
        pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM7_START;
 800177e:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	e001      	b.n	800178a <SyncMailBoxGet+0x1e>
    else
        pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM4_START;
 8001786:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <SyncMailBoxGet+0x2c>)
 8001788:	60fb      	str	r3, [r7, #12]
    return pMB;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	38000004 	.word	0x38000004

0800179c <SyncMailBoxWrite>:

STATUS_TYPE SyncMailBoxWrite (uint32_t mbID, uint8_t* pBuffer, uint32_t len) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
    if (len > MEM_SHARED_MAILBOX_LEN)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d901      	bls.n	80017b2 <SyncMailBoxWrite+0x16>
        return eSTATUS_FAILURE;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e009      	b.n	80017c6 <SyncMailBoxWrite+0x2a>
    uint8_t volatile* pMB = SyncMailBoxGet (mbID);
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f7ff ffda 	bl	800176c <SyncMailBoxGet>
 80017b8:	6178      	str	r0, [r7, #20]
    memcpy ((void*)pMB, (void*)pBuffer, len);
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	68b9      	ldr	r1, [r7, #8]
 80017be:	6978      	ldr	r0, [r7, #20]
 80017c0:	f008 fa71 	bl	8009ca6 <memcpy>
    return eSTATUS_SUCCESS;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <SyncMailBoxWriteNotify>:

STATUS_TYPE SyncMailBoxWriteNotify (uint32_t mbID, uint8_t* pBuffer, uint32_t len) {
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	60f8      	str	r0, [r7, #12]
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
    STATUS_TYPE status = SyncMailBoxWrite (mbID, pBuffer, len);
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	68b9      	ldr	r1, [r7, #8]
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f7ff ffdc 	bl	800179c <SyncMailBoxWrite>
 80017e4:	4603      	mov	r3, r0
 80017e6:	75fb      	strb	r3, [r7, #23]
    if (status != eSTATUS_SUCCESS)
 80017e8:	7dfb      	ldrb	r3, [r7, #23]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <SyncMailBoxWriteNotify+0x24>
        return eSTATUS_FAILURE;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e003      	b.n	80017fa <SyncMailBoxWriteNotify+0x2c>
    asm volatile("dsb");
 80017f2:	f3bf 8f4f 	dsb	sy
    asm volatile("sev");
 80017f6:	bf40      	sev
    return eSTATUS_SUCCESS;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <SyncMailBoxRead>:

STATUS_TYPE SyncMailBoxRead (uint32_t mbID, uint8_t* pBuffer, uint32_t len) {
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
    if (len > MEM_SHARED_MAILBOX_LEN)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b04      	cmp	r3, #4
 8001812:	d901      	bls.n	8001818 <SyncMailBoxRead+0x16>
        return eSTATUS_FAILURE;
 8001814:	2301      	movs	r3, #1
 8001816:	e009      	b.n	800182c <SyncMailBoxRead+0x2a>
    uint8_t volatile* pMB = SyncMailBoxGet (mbID);
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f7ff ffa7 	bl	800176c <SyncMailBoxGet>
 800181e:	6178      	str	r0, [r7, #20]
    memcpy ((void*)pBuffer, (void*)pMB, len);
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6979      	ldr	r1, [r7, #20]
 8001824:	68b8      	ldr	r0, [r7, #8]
 8001826:	f008 fa3e 	bl	8009ca6 <memcpy>
    return eSTATUS_SUCCESS;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <SyncGetTaskHandler>:

#define NUM_TASK_TYPES 2

task_handler_fn_t handlers[NUM_TASK_TYPES];

task_handler_fn_t SyncGetTaskHandler (uint32_t taskID) {
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
    if (taskID > NUM_TASK_TYPES)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <SyncGetTaskHandler+0x12>
        return NULL;
 8001842:	2300      	movs	r3, #0
 8001844:	e003      	b.n	800184e <SyncGetTaskHandler+0x1a>
    return handlers[taskID];
 8001846:	4a05      	ldr	r2, [pc, #20]	@ (800185c <SyncGetTaskHandler+0x28>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	24000098 	.word	0x24000098

08001860 <SyncInit>:

/*
 * \brief Each core needs to call SyncInit
 */
STATUS_TYPE SyncInit (void) {
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
    memset (handlers, 0, sizeof (handlers));
 8001864:	2208      	movs	r2, #8
 8001866:	2100      	movs	r1, #0
 8001868:	4802      	ldr	r0, [pc, #8]	@ (8001874 <SyncInit+0x14>)
 800186a:	f008 f9a1 	bl	8009bb0 <memset>
    return eSTATUS_SUCCESS;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	bd80      	pop	{r7, pc}
 8001874:	24000098 	.word	0x24000098

08001878 <SyncRegisterHandler>:

STATUS_TYPE SyncRegisterHandler (task_handler_fn_t fn, uint32_t taskID) {
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
    if (taskID > NUM_TASK_TYPES)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <SyncRegisterHandler+0x14>
        return eSTATUS_FAILURE;
 8001888:	2301      	movs	r3, #1
 800188a:	e005      	b.n	8001898 <SyncRegisterHandler+0x20>
    handlers[taskID] = fn;
 800188c:	4905      	ldr	r1, [pc, #20]	@ (80018a4 <SyncRegisterHandler+0x2c>)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return eSTATUS_SUCCESS;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	24000098 	.word	0x24000098

080018a8 <CM7_SEV_IRQHandler>:
 * \brief A SEV instruction was executed by CM7
 * and the SEV IRQ handler for CM4 was called.
 * This function was originally defined in CM4/Core/Src/stm32h7xx_it.c
 * by the code generator but I moved it here.
 */
void CM7_SEV_IRQHandler (void) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
    // CPUID == CM4
    uint32_t taskID = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead (MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof (uint32_t));
 80018b2:	463b      	mov	r3, r7
 80018b4:	2204      	movs	r2, #4
 80018b6:	4619      	mov	r1, r3
 80018b8:	2000      	movs	r0, #0
 80018ba:	f7ff ffa2 	bl	8001802 <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler (taskID);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ffb7 	bl	8001834 <SyncGetTaskHandler>
 80018c6:	6078      	str	r0, [r7, #4]
    if (fn != NULL) {
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <CM7_SEV_IRQHandler+0x2a>
        fn ();
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4798      	blx	r3
    }
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <CM4_SEV_IRQHandler>:
 * \brief A sev instruction was executed by CM4
 * and the SEV IRQ handler for CM7 was called.
 * This function was originally defined in CM7/Core/Src/stm32h7xx_it.c
 * by the code generator but I moved it here.
 */
void CM4_SEV_IRQHandler (void) {
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
    // CPUID == CM7
    uint32_t taskID = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead (MAILBOX_CM7_ID, (uint8_t*)&taskID, sizeof (uint32_t));
 80018e4:	463b      	mov	r3, r7
 80018e6:	2204      	movs	r2, #4
 80018e8:	4619      	mov	r1, r3
 80018ea:	2001      	movs	r0, #1
 80018ec:	f7ff ff89 	bl	8001802 <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler (taskID);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ff9e 	bl	8001834 <SyncGetTaskHandler>
 80018f8:	6078      	str	r0, [r7, #4]
    if (fn != NULL) {
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <CM4_SEV_IRQHandler+0x2a>
        fn ();
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4798      	blx	r3
    }
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_GPIO_EXTI_Callback>:
FlightContext gFlightContext;
FilterMadgwickContext gFilterMadgwickContext;
PIDContext gPIDAngleContext;
TaskHandle_t gpTaskMotionControlUpdate;

void HAL_GPIO_EXTI_Callback (uint16_t gpioPin) {
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b08d      	sub	sp, #52	@ 0x34
 8001910:	af04      	add	r7, sp, #16
 8001912:	4603      	mov	r3, r0
 8001914:	80fb      	strh	r3, [r7, #6]
    if (gpioPin == IMU_INT_Pin) {
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	2b80      	cmp	r3, #128	@ 0x80
 800191a:	d122      	bne.n	8001962 <HAL_GPIO_EXTI_Callback+0x56>
        Vec3 accel, gyro;
        if (IMU2CPUInterruptHandler (&gIMU, &accel, &gyro) != eSTATUS_SUCCESS) {
 800191c:	f107 0208 	add.w	r2, r7, #8
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	4619      	mov	r1, r3
 8001926:	4811      	ldr	r0, [pc, #68]	@ (800196c <HAL_GPIO_EXTI_Callback+0x60>)
 8001928:	f7ff fba8 	bl	800107c <IMU2CPUInterruptHandler>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d017      	beq.n	8001962 <HAL_GPIO_EXTI_Callback+0x56>
            FlightContextUpdateIMUData (&gFlightContext, accel, gyro);
 8001932:	466c      	mov	r4, sp
 8001934:	f107 0308 	add.w	r3, r7, #8
 8001938:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800193c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001946:	480a      	ldr	r0, [pc, #40]	@ (8001970 <HAL_GPIO_EXTI_Callback+0x64>)
 8001948:	f7fe fec4 	bl	80006d4 <FlightContextUpdateIMUData>
            if (gpTaskMotionControlUpdate != NULL)
 800194c:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <HAL_GPIO_EXTI_Callback+0x68>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d006      	beq.n	8001962 <HAL_GPIO_EXTI_Callback+0x56>
                xTaskNotifyGive (gpTaskMotionControlUpdate);
 8001954:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <HAL_GPIO_EXTI_Callback+0x68>)
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	2300      	movs	r3, #0
 800195a:	2202      	movs	r2, #2
 800195c:	2100      	movs	r1, #0
 800195e:	f007 fe63 	bl	8009628 <xTaskGenericNotify>
        }
    }
}
 8001962:	bf00      	nop
 8001964:	3724      	adds	r7, #36	@ 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	bf00      	nop
 800196c:	24000254 	.word	0x24000254
 8001970:	24000290 	.word	0x24000290
 8001974:	240002e4 	.word	0x240002e4

08001978 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main (void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af02      	add	r7, sp, #8
    /* USER CODE END Boot_Mode_Sequence_0 */

    /* USER CODE BEGIN Boot_Mode_Sequence_1 */

    /* Wait until CPU2 boots and enters in stop mode or timeout*/
    while (__HAL_RCC_GET_FLAG (RCC_FLAG_D2CKRDY) != RESET) {
 800197e:	e000      	b.n	8001982 <main+0xa>
        asm volatile("NOP");
 8001980:	bf00      	nop
    while (__HAL_RCC_GET_FLAG (RCC_FLAG_D2CKRDY) != RESET) {
 8001982:	4b3f      	ldr	r3, [pc, #252]	@ (8001a80 <main+0x108>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f8      	bne.n	8001980 <main+0x8>

    /* USER CODE END Boot_Mode_Sequence_1 */
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init ();
 800198e:	f000 feb9 	bl	8002704 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config ();
 8001992:	f000 f88b 	bl	8001aac <SystemClock_Config>
    /* USER CODE BEGIN Boot_Mode_Sequence_2 */

    MX_GPIO_Init ();
 8001996:	f000 faab 	bl	8001ef0 <MX_GPIO_Init>
    MX_USART1_UART_Init ();
 800199a:	f000 fa5d 	bl	8001e58 <MX_USART1_UART_Init>
    MX_SPI2_Init ();
 800199e:	f000 f90b 	bl	8001bb8 <MX_SPI2_Init>
    MX_TIM8_Init ();
 80019a2:	f000 f95f 	bl	8001c64 <MX_TIM8_Init>
    MX_TIM13_Init ();
 80019a6:	f000 fa09 	bl	8001dbc <MX_TIM13_Init>

    if (SyncInit () != eSTATUS_SUCCESS || LoggerInit (&huart1) != eSTATUS_SUCCESS) {
 80019aa:	f7ff ff59 	bl	8001860 <SyncInit>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d105      	bne.n	80019c0 <main+0x48>
 80019b4:	4833      	ldr	r0, [pc, #204]	@ (8001a84 <main+0x10c>)
 80019b6:	f7fe ff41 	bl	800083c <LoggerInit>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <main+0x4c>
        CriticalErrorHandler ();
 80019c0:	f7fe fe74 	bl	80006ac <CriticalErrorHandler>
    }

    /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of HSEM notification */

    /*HW semaphore Clock enable*/
    __HAL_RCC_HSEM_CLK_ENABLE ();
 80019c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a80 <main+0x108>)
 80019c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ca:	4a2d      	ldr	r2, [pc, #180]	@ (8001a80 <main+0x108>)
 80019cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a80 <main+0x108>)
 80019d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
    // /*Take HSEM */
    HAL_HSEM_FastTake (HSEM_ID_0);
 80019e2:	2000      	movs	r0, #0
 80019e4:	f001 f9d6 	bl	8002d94 <HAL_HSEM_FastTake>
    // /*Release HSEM in order to notify the CPU2(CM4)*/
    HAL_HSEM_Release (HSEM_ID_0, 0);
 80019e8:	2100      	movs	r1, #0
 80019ea:	2000      	movs	r0, #0
 80019ec:	f001 f9ec 	bl	8002dc8 <HAL_HSEM_Release>
    // /* wait until CPU2 wakes up from stop mode */
    while (__HAL_RCC_GET_FLAG (RCC_FLAG_D2CKRDY) == RESET) {
 80019f0:	e000      	b.n	80019f4 <main+0x7c>
        asm volatile("NOP");
 80019f2:	bf00      	nop
    while (__HAL_RCC_GET_FLAG (RCC_FLAG_D2CKRDY) == RESET) {
 80019f4:	4b22      	ldr	r3, [pc, #136]	@ (8001a80 <main+0x108>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f8      	beq.n	80019f2 <main+0x7a>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init ();
 8001a00:	f000 fa76 	bl	8001ef0 <MX_GPIO_Init>
    MX_USART1_UART_Init ();
 8001a04:	f000 fa28 	bl	8001e58 <MX_USART1_UART_Init>
    MX_SPI2_Init ();
 8001a08:	f000 f8d6 	bl	8001bb8 <MX_SPI2_Init>
    MX_TIM8_Init ();
 8001a0c:	f000 f92a 	bl	8001c64 <MX_TIM8_Init>
    MX_TIM13_Init ();
 8001a10:	f000 f9d4 	bl	8001dbc <MX_TIM13_Init>

    // PIDInit(&gPIDAngleContext);
    // FilterMadgwickInit(&gFilterMadgwickContext);

    STATUS_TYPE imuStatus =
    IMUInit (&gIMU, &hspi2, IMU_ACC_RANGE_4G, IMU_ACC_ODR_100, IMU_GYRO_RANGE_250, IMU_GYRO_ODR_100);
 8001a14:	2308      	movs	r3, #8
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	2301      	movs	r3, #1
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	2201      	movs	r2, #1
 8001a20:	4919      	ldr	r1, [pc, #100]	@ (8001a88 <main+0x110>)
 8001a22:	481a      	ldr	r0, [pc, #104]	@ (8001a8c <main+0x114>)
 8001a24:	f7ff fd34 	bl	8001490 <IMUInit>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	71fb      	strb	r3, [r7, #7]

    if (imuStatus != eSTATUS_SUCCESS) {
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00f      	beq.n	8001a52 <main+0xda>
        LOG_ERROR ("CM7 failed to init IMU");
 8001a32:	4817      	ldr	r0, [pc, #92]	@ (8001a90 <main+0x118>)
 8001a34:	f007 ff74 	bl	8009920 <iprintf>
 8001a38:	4816      	ldr	r0, [pc, #88]	@ (8001a94 <main+0x11c>)
 8001a3a:	f007 ff71 	bl	8009920 <iprintf>
 8001a3e:	21f1      	movs	r1, #241	@ 0xf1
 8001a40:	4815      	ldr	r0, [pc, #84]	@ (8001a98 <main+0x120>)
 8001a42:	f007 ff6d 	bl	8009920 <iprintf>
 8001a46:	4815      	ldr	r0, [pc, #84]	@ (8001a9c <main+0x124>)
 8001a48:	f007 ff6a 	bl	8009920 <iprintf>
 8001a4c:	4814      	ldr	r0, [pc, #80]	@ (8001aa0 <main+0x128>)
 8001a4e:	f007 ffcf 	bl	80099f0 <puts>
    }

    while (1) {
        /* USER CODE END WHILE */
        HAL_Delay (5000);
 8001a52:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001a56:	f000 feb1 	bl	80027bc <HAL_Delay>
        LOG_INFO ("Hello from CM7");
 8001a5a:	4812      	ldr	r0, [pc, #72]	@ (8001aa4 <main+0x12c>)
 8001a5c:	f007 ff60 	bl	8009920 <iprintf>
 8001a60:	480c      	ldr	r0, [pc, #48]	@ (8001a94 <main+0x11c>)
 8001a62:	f007 ff5d 	bl	8009920 <iprintf>
 8001a66:	21f7      	movs	r1, #247	@ 0xf7
 8001a68:	480b      	ldr	r0, [pc, #44]	@ (8001a98 <main+0x120>)
 8001a6a:	f007 ff59 	bl	8009920 <iprintf>
 8001a6e:	480e      	ldr	r0, [pc, #56]	@ (8001aa8 <main+0x130>)
 8001a70:	f007 ff56 	bl	8009920 <iprintf>
 8001a74:	480a      	ldr	r0, [pc, #40]	@ (8001aa0 <main+0x128>)
 8001a76:	f007 ffbb 	bl	80099f0 <puts>
        HAL_Delay (5000);
 8001a7a:	bf00      	nop
 8001a7c:	e7e9      	b.n	8001a52 <main+0xda>
 8001a7e:	bf00      	nop
 8001a80:	58024400 	.word	0x58024400
 8001a84:	240001c0 	.word	0x240001c0
 8001a88:	240000a0 	.word	0x240000a0
 8001a8c:	24000254 	.word	0x24000254
 8001a90:	0800a90c 	.word	0x0800a90c
 8001a94:	0800a918 	.word	0x0800a918
 8001a98:	0800a92c 	.word	0x0800a92c
 8001a9c:	0800a934 	.word	0x0800a934
 8001aa0:	0800a94c 	.word	0x0800a94c
 8001aa4:	0800a950 	.word	0x0800a950
 8001aa8:	0800a95c 	.word	0x0800a95c

08001aac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config (void) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b09c      	sub	sp, #112	@ 0x70
 8001ab0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ab6:	224c      	movs	r2, #76	@ 0x4c
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f008 f878 	bl	8009bb0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f008 f872 	bl	8009bb0 <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply (PWR_DIRECT_SMPS_SUPPLY);
 8001acc:	2004      	movs	r0, #4
 8001ace:	f001 f98f 	bl	8002df0 <HAL_PWREx_ConfigSupply>

    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG (PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	4b36      	ldr	r3, [pc, #216]	@ (8001bb0 <SystemClock_Config+0x104>)
 8001ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ada:	4a35      	ldr	r2, [pc, #212]	@ (8001bb0 <SystemClock_Config+0x104>)
 8001adc:	f023 0301 	bic.w	r3, r3, #1
 8001ae0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001ae2:	4b33      	ldr	r3, [pc, #204]	@ (8001bb0 <SystemClock_Config+0x104>)
 8001ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	4b31      	ldr	r3, [pc, #196]	@ (8001bb4 <SystemClock_Config+0x108>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a30      	ldr	r2, [pc, #192]	@ (8001bb4 <SystemClock_Config+0x108>)
 8001af2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb4 <SystemClock_Config+0x108>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	683b      	ldr	r3, [r7, #0]

    while (!__HAL_PWR_GET_FLAG (PWR_FLAG_VOSRDY)) {
 8001b04:	bf00      	nop
 8001b06:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb4 <SystemClock_Config+0x108>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b12:	d1f8      	bne.n	8001b06 <SystemClock_Config+0x5a>
    }

    /** Initializes the RCC Oscillators according to the specified
     * parameters in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType =
 8001b14:	230b      	movs	r3, #11
 8001b16:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState            = RCC_HSE_ON;
 8001b18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSIState            = RCC_HSI_DIV1;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b22:	2340      	movs	r3, #64	@ 0x40
 8001b24:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.LSIState            = RCC_LSI_ON;
 8001b26:	2301      	movs	r3, #1
 8001b28:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSE;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLM            = 5;
 8001b32:	2305      	movs	r3, #5
 8001b34:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLN            = 48;
 8001b36:	2330      	movs	r3, #48	@ 0x30
 8001b38:	657b      	str	r3, [r7, #84]	@ 0x54
    RCC_OscInitStruct.PLL.PLLP            = 2;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	65bb      	str	r3, [r7, #88]	@ 0x58
    RCC_OscInitStruct.PLL.PLLQ            = 5;
 8001b3e:	2305      	movs	r3, #5
 8001b40:	65fb      	str	r3, [r7, #92]	@ 0x5c
    RCC_OscInitStruct.PLL.PLLR            = 2;
 8001b42:	2302      	movs	r3, #2
 8001b44:	663b      	str	r3, [r7, #96]	@ 0x60
    RCC_OscInitStruct.PLL.PLLRGE          = RCC_PLL1VCIRANGE_2;
 8001b46:	2308      	movs	r3, #8
 8001b48:	667b      	str	r3, [r7, #100]	@ 0x64
    RCC_OscInitStruct.PLL.PLLVCOSEL       = RCC_PLL1VCOWIDE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	66bb      	str	r3, [r7, #104]	@ 0x68
    RCC_OscInitStruct.PLL.PLLFRACN        = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK) {
 8001b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b56:	4618      	mov	r0, r3
 8001b58:	f001 f9a4 	bl	8002ea4 <HAL_RCC_OscConfig>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <SystemClock_Config+0xba>
        Error_Handler ();
 8001b62:	f000 fa5d 	bl	8002020 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType =
 8001b66:	233f      	movs	r3, #63	@ 0x3f
 8001b68:	607b      	str	r3, [r7, #4]
    RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
    RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSI;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKDivider  = RCC_SYSCLK_DIV1;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_HCLK_DIV1;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]

    if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f001 fde4 	bl	8003758 <HAL_RCC_ClockConfig>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <SystemClock_Config+0xee>
        Error_Handler ();
 8001b96:	f000 fa43 	bl	8002020 <Error_Handler>
    }
    HAL_RCC_MCOConfig (RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001b9a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f001 ff8f 	bl	8003ac4 <HAL_RCC_MCOConfig>
}
 8001ba6:	bf00      	nop
 8001ba8:	3770      	adds	r7, #112	@ 0x70
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	58000400 	.word	0x58000400
 8001bb4:	58024800 	.word	0x58024800

08001bb8 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init (void) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI2_Init 1 */

    /* USER CODE END SPI2_Init 1 */
    /* SPI2 parameter configuration*/
    hspi2.Instance                        = SPI2;
 8001bbc:	4b27      	ldr	r3, [pc, #156]	@ (8001c5c <MX_SPI2_Init+0xa4>)
 8001bbe:	4a28      	ldr	r2, [pc, #160]	@ (8001c60 <MX_SPI2_Init+0xa8>)
 8001bc0:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode                       = SPI_MODE_MASTER;
 8001bc2:	4b26      	ldr	r3, [pc, #152]	@ (8001c5c <MX_SPI2_Init+0xa4>)
 8001bc4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001bc8:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction                  = SPI_DIRECTION_2LINES;
 8001bca:	4b24      	ldr	r3, [pc, #144]	@ (8001c5c <MX_SPI2_Init+0xa4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize                   = SPI_DATASIZE_8BIT;
 8001bd0:	4b22      	ldr	r3, [pc, #136]	@ (8001c5c <MX_SPI2_Init+0xa4>)
 8001bd2:	2207      	movs	r2, #7
 8001bd4:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity                = SPI_POLARITY_LOW;
 8001bd6:	4b21      	ldr	r3, [pc, #132]	@ (8001c5c <MX_SPI2_Init+0xa4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase                   = SPI_PHASE_1EDGE;
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c5c <MX_SPI2_Init+0xa4>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS                        = SPI_NSS_HARD_OUTPUT;
 8001be2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c5c <MX_SPI2_Init+0xa4>)
 8001be4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001be8:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler          = SPI_BAUDRATEPRESCALER_8;
 8001bea:	4b1c      	ldr	r3, [pc, #112]	@ (8001c5c <MX_SPI2_Init+0xa4>)
 8001bec:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001bf0:	61da      	str	r2, [r3, #28]
    hspi2.Init.FirstBit                   = SPI_FIRSTBIT_MSB;
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c5c <MX_SPI2_Init+0xa4>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode                     = SPI_TIMODE_DISABLE;
 8001bf8:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <MX_SPI2_Init+0xa4>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi2.Init.CRCCalculation             = SPI_CRCCALCULATION_DISABLE;
 8001bfe:	4b17      	ldr	r3, [pc, #92]	@ (8001c5c <MX_SPI2_Init+0xa4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi2.Init.CRCPolynomial              = 0x0;
 8001c04:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <MX_SPI2_Init+0xa4>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi2.Init.NSSPMode                   = SPI_NSS_PULSE_ENABLE;
 8001c0a:	4b14      	ldr	r3, [pc, #80]	@ (8001c5c <MX_SPI2_Init+0xa4>)
 8001c0c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c10:	635a      	str	r2, [r3, #52]	@ 0x34
    hspi2.Init.NSSPolarity                = SPI_NSS_POLARITY_LOW;
 8001c12:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <MX_SPI2_Init+0xa4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi2.Init.FifoThreshold              = SPI_FIFO_THRESHOLD_01DATA;
 8001c18:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <MX_SPI2_Init+0xa4>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <MX_SPI2_Init+0xa4>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c24:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <MX_SPI2_Init+0xa4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi2.Init.MasterSSIdleness           = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <MX_SPI2_Init+0xa4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	649a      	str	r2, [r3, #72]	@ 0x48
    hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001c30:	4b0a      	ldr	r3, [pc, #40]	@ (8001c5c <MX_SPI2_Init+0xa4>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001c36:	4b09      	ldr	r3, [pc, #36]	@ (8001c5c <MX_SPI2_Init+0xa4>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi2.Init.MasterKeepIOState      = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <MX_SPI2_Init+0xa4>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	655a      	str	r2, [r3, #84]	@ 0x54
    hspi2.Init.IOSwap                 = SPI_IO_SWAP_DISABLE;
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <MX_SPI2_Init+0xa4>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	659a      	str	r2, [r3, #88]	@ 0x58
    if (HAL_SPI_Init (&hspi2) != HAL_OK) {
 8001c48:	4804      	ldr	r0, [pc, #16]	@ (8001c5c <MX_SPI2_Init+0xa4>)
 8001c4a:	f004 f829 	bl	8005ca0 <HAL_SPI_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_SPI2_Init+0xa0>
        Error_Handler ();
 8001c54:	f000 f9e4 	bl	8002020 <Error_Handler>
    }
    /* USER CODE BEGIN SPI2_Init 2 */

    /* USER CODE END SPI2_Init 2 */
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	240000a0 	.word	0x240000a0
 8001c60:	40003800 	.word	0x40003800

08001c64 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init (void) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b09a      	sub	sp, #104	@ 0x68
 8001c68:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM8_Init 0 */

    /* USER CODE END TIM8_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig           = { 0 };
 8001c6a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig               = { 0 };
 8001c78:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC                        = { 0 };
 8001c84:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
 8001c94:	615a      	str	r2, [r3, #20]
 8001c96:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	222c      	movs	r2, #44	@ 0x2c
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f007 ff86 	bl	8009bb0 <memset>

    /* USER CODE BEGIN TIM8_Init 1 */

    /* USER CODE END TIM8_Init 1 */
    htim8.Instance               = TIM8;
 8001ca4:	4b43      	ldr	r3, [pc, #268]	@ (8001db4 <MX_TIM8_Init+0x150>)
 8001ca6:	4a44      	ldr	r2, [pc, #272]	@ (8001db8 <MX_TIM8_Init+0x154>)
 8001ca8:	601a      	str	r2, [r3, #0]
    htim8.Init.Prescaler         = 0;
 8001caa:	4b42      	ldr	r3, [pc, #264]	@ (8001db4 <MX_TIM8_Init+0x150>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	605a      	str	r2, [r3, #4]
    htim8.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8001cb0:	4b40      	ldr	r3, [pc, #256]	@ (8001db4 <MX_TIM8_Init+0x150>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
    htim8.Init.Period            = 65535;
 8001cb6:	4b3f      	ldr	r3, [pc, #252]	@ (8001db4 <MX_TIM8_Init+0x150>)
 8001cb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cbc:	60da      	str	r2, [r3, #12]
    htim8.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8001cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8001db4 <MX_TIM8_Init+0x150>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
    htim8.Init.RepetitionCounter = 0;
 8001cc4:	4b3b      	ldr	r3, [pc, #236]	@ (8001db4 <MX_TIM8_Init+0x150>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	615a      	str	r2, [r3, #20]
    htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cca:	4b3a      	ldr	r3, [pc, #232]	@ (8001db4 <MX_TIM8_Init+0x150>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init (&htim8) != HAL_OK) {
 8001cd0:	4838      	ldr	r0, [pc, #224]	@ (8001db4 <MX_TIM8_Init+0x150>)
 8001cd2:	f004 ff1a 	bl	8006b0a <HAL_TIM_Base_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM8_Init+0x7c>
        Error_Handler ();
 8001cdc:	f000 f9a0 	bl	8002020 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ce4:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_TIM_ConfigClockSource (&htim8, &sClockSourceConfig) != HAL_OK) {
 8001ce6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001cea:	4619      	mov	r1, r3
 8001cec:	4831      	ldr	r0, [pc, #196]	@ (8001db4 <MX_TIM8_Init+0x150>)
 8001cee:	f005 fa57 	bl	80071a0 <HAL_TIM_ConfigClockSource>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM8_Init+0x98>
        Error_Handler ();
 8001cf8:	f000 f992 	bl	8002020 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init (&htim8) != HAL_OK) {
 8001cfc:	482d      	ldr	r0, [pc, #180]	@ (8001db4 <MX_TIM8_Init+0x150>)
 8001cfe:	f004 ffd3 	bl	8006ca8 <HAL_TIM_PWM_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM8_Init+0xa8>
        Error_Handler ();
 8001d08:	f000 f98a 	bl	8002020 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger  = TIM_TRGO_RESET;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d10:	2300      	movs	r3, #0
 8001d12:	653b      	str	r3, [r7, #80]	@ 0x50
    sMasterConfig.MasterSlaveMode      = TIM_MASTERSLAVEMODE_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_TIMEx_MasterConfigSynchronization (&htim8, &sMasterConfig) != HAL_OK) {
 8001d18:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4825      	ldr	r0, [pc, #148]	@ (8001db4 <MX_TIM8_Init+0x150>)
 8001d20:	f005 ff72 	bl	8007c08 <HAL_TIMEx_MasterConfigSynchronization>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM8_Init+0xca>
        Error_Handler ();
 8001d2a:	f000 f979 	bl	8002020 <Error_Handler>
    }
    sConfigOC.OCMode       = TIM_OCMODE_PWM1;
 8001d2e:	2360      	movs	r3, #96	@ 0x60
 8001d30:	633b      	str	r3, [r7, #48]	@ 0x30
    sConfigOC.Pulse        = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	637b      	str	r3, [r7, #52]	@ 0x34
    sConfigOC.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8001d36:	2300      	movs	r3, #0
 8001d38:	63bb      	str	r3, [r7, #56]	@ 0x38
    sConfigOC.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sConfigOC.OCFastMode   = TIM_OCFAST_DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	643b      	str	r3, [r7, #64]	@ 0x40
    sConfigOC.OCIdleState  = TIM_OCIDLESTATE_RESET;
 8001d42:	2300      	movs	r3, #0
 8001d44:	647b      	str	r3, [r7, #68]	@ 0x44
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_TIM_PWM_ConfigChannel (&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001d4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d4e:	2200      	movs	r2, #0
 8001d50:	4619      	mov	r1, r3
 8001d52:	4818      	ldr	r0, [pc, #96]	@ (8001db4 <MX_TIM8_Init+0x150>)
 8001d54:	f005 f910 	bl	8006f78 <HAL_TIM_PWM_ConfigChannel>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM8_Init+0xfe>
        Error_Handler ();
 8001d5e:	f000 f95f 	bl	8002020 <Error_Handler>
    }
    sBreakDeadTimeConfig.OffStateRunMode  = TIM_OSSR_DISABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.LockLevel        = TIM_LOCKLEVEL_OFF;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.DeadTime         = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakState       = TIM_BREAK_DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakPolarity    = TIM_BREAKPOLARITY_HIGH;
 8001d76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d7a:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.BreakFilter      = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.Break2State      = TIM_BREAK2_DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2Polarity   = TIM_BREAK2POLARITY_HIGH;
 8001d84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
    sBreakDeadTimeConfig.Break2Filter     = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    sBreakDeadTimeConfig.AutomaticOutput  = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_TIMEx_ConfigBreakDeadTime (&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	4619      	mov	r1, r3
 8001d96:	4807      	ldr	r0, [pc, #28]	@ (8001db4 <MX_TIM8_Init+0x150>)
 8001d98:	f005 ffc4 	bl	8007d24 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM8_Init+0x142>
        Error_Handler ();
 8001da2:	f000 f93d 	bl	8002020 <Error_Handler>
    }
    /* USER CODE BEGIN TIM8_Init 2 */

    /* USER CODE END TIM8_Init 2 */
    HAL_TIM_MspPostInit (&htim8);
 8001da6:	4803      	ldr	r0, [pc, #12]	@ (8001db4 <MX_TIM8_Init+0x150>)
 8001da8:	f000 fa54 	bl	8002254 <HAL_TIM_MspPostInit>
}
 8001dac:	bf00      	nop
 8001dae:	3768      	adds	r7, #104	@ 0x68
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	24000128 	.word	0x24000128
 8001db8:	40010400 	.word	0x40010400

08001dbc <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init (void) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM13_Init 0 */

    /* USER CODE END TIM13_Init 0 */

    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
 8001dd0:	615a      	str	r2, [r3, #20]
 8001dd2:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM13_Init 1 */

    /* USER CODE END TIM13_Init 1 */
    htim13.Instance               = TIM13;
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e50 <MX_TIM13_Init+0x94>)
 8001dd6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e54 <MX_TIM13_Init+0x98>)
 8001dd8:	601a      	str	r2, [r3, #0]
    htim13.Init.Prescaler         = 0;
 8001dda:	4b1d      	ldr	r3, [pc, #116]	@ (8001e50 <MX_TIM13_Init+0x94>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	605a      	str	r2, [r3, #4]
    htim13.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8001de0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e50 <MX_TIM13_Init+0x94>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
    htim13.Init.Period            = 65535;
 8001de6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e50 <MX_TIM13_Init+0x94>)
 8001de8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dec:	60da      	str	r2, [r3, #12]
    htim13.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8001dee:	4b18      	ldr	r3, [pc, #96]	@ (8001e50 <MX_TIM13_Init+0x94>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
    htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df4:	4b16      	ldr	r3, [pc, #88]	@ (8001e50 <MX_TIM13_Init+0x94>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init (&htim13) != HAL_OK) {
 8001dfa:	4815      	ldr	r0, [pc, #84]	@ (8001e50 <MX_TIM13_Init+0x94>)
 8001dfc:	f004 fe85 	bl	8006b0a <HAL_TIM_Base_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM13_Init+0x4e>
        Error_Handler ();
 8001e06:	f000 f90b 	bl	8002020 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init (&htim13) != HAL_OK) {
 8001e0a:	4811      	ldr	r0, [pc, #68]	@ (8001e50 <MX_TIM13_Init+0x94>)
 8001e0c:	f004 ff4c 	bl	8006ca8 <HAL_TIM_PWM_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM13_Init+0x5e>
        Error_Handler ();
 8001e16:	f000 f903 	bl	8002020 <Error_Handler>
    }
    sConfigOC.OCMode     = TIM_OCMODE_PWM1;
 8001e1a:	2360      	movs	r3, #96	@ 0x60
 8001e1c:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse      = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel (&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4807      	ldr	r0, [pc, #28]	@ (8001e50 <MX_TIM13_Init+0x94>)
 8001e32:	f005 f8a1 	bl	8006f78 <HAL_TIM_PWM_ConfigChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM13_Init+0x84>
        Error_Handler ();
 8001e3c:	f000 f8f0 	bl	8002020 <Error_Handler>
    }
    /* USER CODE BEGIN TIM13_Init 2 */

    /* USER CODE END TIM13_Init 2 */
    HAL_TIM_MspPostInit (&htim13);
 8001e40:	4803      	ldr	r0, [pc, #12]	@ (8001e50 <MX_TIM13_Init+0x94>)
 8001e42:	f000 fa07 	bl	8002254 <HAL_TIM_MspPostInit>
}
 8001e46:	bf00      	nop
 8001e48:	3720      	adds	r7, #32
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	24000174 	.word	0x24000174
 8001e54:	40001c00 	.word	0x40001c00

08001e58 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init (void) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance                    = USART1;
 8001e5c:	4b22      	ldr	r3, [pc, #136]	@ (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001e5e:	4a23      	ldr	r2, [pc, #140]	@ (8001eec <MX_USART1_UART_Init+0x94>)
 8001e60:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate               = 115200;
 8001e62:	4b21      	ldr	r3, [pc, #132]	@ (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001e64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e68:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength             = UART_WORDLENGTH_8B;
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits               = UART_STOPBITS_1;
 8001e70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity                 = UART_PARITY_NONE;
 8001e76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode                   = UART_MODE_TX_RX;
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001e7e:	220c      	movs	r2, #12
 8001e80:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl              = UART_HWCONTROL_NONE;
 8001e82:	4b19      	ldr	r3, [pc, #100]	@ (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling           = UART_OVERSAMPLING_16;
 8001e88:	4b17      	ldr	r3, [pc, #92]	@ (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling         = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]
    huart1.Init.ClockPrescaler         = UART_PRESCALER_DIV1;
 8001e94:	4b14      	ldr	r3, [pc, #80]	@ (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	625a      	str	r2, [r3, #36]	@ 0x24
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e9a:	4b13      	ldr	r3, [pc, #76]	@ (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_UART_Init (&huart1) != HAL_OK) {
 8001ea0:	4811      	ldr	r0, [pc, #68]	@ (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001ea2:	f005 ffdb 	bl	8007e5c <HAL_UART_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_USART1_UART_Init+0x58>
        Error_Handler ();
 8001eac:	f000 f8b8 	bl	8002020 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold (&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	480d      	ldr	r0, [pc, #52]	@ (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001eb4:	f007 f871 	bl	8008f9a <HAL_UARTEx_SetTxFifoThreshold>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_USART1_UART_Init+0x6a>
        Error_Handler ();
 8001ebe:	f000 f8af 	bl	8002020 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold (&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4808      	ldr	r0, [pc, #32]	@ (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001ec6:	f007 f8a6 	bl	8009016 <HAL_UARTEx_SetRxFifoThreshold>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_USART1_UART_Init+0x7c>
        Error_Handler ();
 8001ed0:	f000 f8a6 	bl	8002020 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode (&huart1) != HAL_OK) {
 8001ed4:	4804      	ldr	r0, [pc, #16]	@ (8001ee8 <MX_USART1_UART_Init+0x90>)
 8001ed6:	f007 f827 	bl	8008f28 <HAL_UARTEx_DisableFifoMode>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_USART1_UART_Init+0x8c>
        Error_Handler ();
 8001ee0:	f000 f89e 	bl	8002020 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */
}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	240001c0 	.word	0x240001c0
 8001eec:	40011000 	.word	0x40011000

08001ef0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init (void) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	@ 0x28
 8001ef4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001ef6:	f107 0314 	add.w	r3, r7, #20
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]
 8001f04:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */

    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE ();
 8001f06:	4b3a      	ldr	r3, [pc, #232]	@ (8001ff0 <MX_GPIO_Init+0x100>)
 8001f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f0c:	4a38      	ldr	r2, [pc, #224]	@ (8001ff0 <MX_GPIO_Init+0x100>)
 8001f0e:	f043 0304 	orr.w	r3, r3, #4
 8001f12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f16:	4b36      	ldr	r3, [pc, #216]	@ (8001ff0 <MX_GPIO_Init+0x100>)
 8001f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE ();
 8001f24:	4b32      	ldr	r3, [pc, #200]	@ (8001ff0 <MX_GPIO_Init+0x100>)
 8001f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f2a:	4a31      	ldr	r2, [pc, #196]	@ (8001ff0 <MX_GPIO_Init+0x100>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f34:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff0 <MX_GPIO_Init+0x100>)
 8001f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE ();
 8001f42:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff0 <MX_GPIO_Init+0x100>)
 8001f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f48:	4a29      	ldr	r2, [pc, #164]	@ (8001ff0 <MX_GPIO_Init+0x100>)
 8001f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f52:	4b27      	ldr	r3, [pc, #156]	@ (8001ff0 <MX_GPIO_Init+0x100>)
 8001f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE ();
 8001f60:	4b23      	ldr	r3, [pc, #140]	@ (8001ff0 <MX_GPIO_Init+0x100>)
 8001f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f66:	4a22      	ldr	r2, [pc, #136]	@ (8001ff0 <MX_GPIO_Init+0x100>)
 8001f68:	f043 0320 	orr.w	r3, r3, #32
 8001f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f70:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff0 <MX_GPIO_Init+0x100>)
 8001f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f76:	f003 0320 	and.w	r3, r3, #32
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE ();
 8001f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff0 <MX_GPIO_Init+0x100>)
 8001f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f84:	4a1a      	ldr	r2, [pc, #104]	@ (8001ff0 <MX_GPIO_Init+0x100>)
 8001f86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f8e:	4b18      	ldr	r3, [pc, #96]	@ (8001ff0 <MX_GPIO_Init+0x100>)
 8001f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin : CEC_CK_MCO1_Pin */
    GPIO_InitStruct.Pin       = CEC_CK_MCO1_Pin;
 8001f9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8001faa:	2300      	movs	r3, #0
 8001fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init (CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	480e      	ldr	r0, [pc, #56]	@ (8001ff4 <MX_GPIO_Init+0x104>)
 8001fba:	f000 fd21 	bl	8002a00 <HAL_GPIO_Init>

    /*Configure GPIO pin : IMU_INT_Pin */
    GPIO_InitStruct.Pin  = IMU_INT_Pin;
 8001fbe:	2380      	movs	r3, #128	@ 0x80
 8001fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fc2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init (IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4809      	ldr	r0, [pc, #36]	@ (8001ff8 <MX_GPIO_Init+0x108>)
 8001fd4:	f000 fd14 	bl	8002a00 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority (IMU_INT_EXTI_IRQn, 5, 0);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2105      	movs	r1, #5
 8001fdc:	2017      	movs	r0, #23
 8001fde:	f000 fcd5 	bl	800298c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ (IMU_INT_EXTI_IRQn);
 8001fe2:	2017      	movs	r0, #23
 8001fe4:	f000 fcec 	bl	80029c0 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */

    /* USER CODE END MX_GPIO_Init_2 */
}
 8001fe8:	bf00      	nop
 8001fea:	3728      	adds	r7, #40	@ 0x28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	58024400 	.word	0x58024400
 8001ff4:	58020000 	.word	0x58020000
 8001ff8:	58020800 	.word	0x58020800

08001ffc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to
 * increment a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef* htim) {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM4) {
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a04      	ldr	r2, [pc, #16]	@ (800201c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d101      	bne.n	8002012 <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick ();
 800200e:	f000 fbb5 	bl	800277c <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40000800 	.word	0x40000800

08002020 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler (void) {
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002024:	b672      	cpsid	i
}
 8002026:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq ();
    while (1) {
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <Error_Handler+0x8>

0800202c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002032:	4b10      	ldr	r3, [pc, #64]	@ (8002074 <HAL_MspInit+0x48>)
 8002034:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002038:	4a0e      	ldr	r2, [pc, #56]	@ (8002074 <HAL_MspInit+0x48>)
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002042:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <HAL_MspInit+0x48>)
 8002044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002050:	2200      	movs	r2, #0
 8002052:	210f      	movs	r1, #15
 8002054:	f06f 0001 	mvn.w	r0, #1
 8002058:	f000 fc98 	bl	800298c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 5, 0);
 800205c:	2200      	movs	r2, #0
 800205e:	2105      	movs	r1, #5
 8002060:	2041      	movs	r0, #65	@ 0x41
 8002062:	f000 fc93 	bl	800298c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 8002066:	2041      	movs	r0, #65	@ 0x41
 8002068:	f000 fcaa 	bl	80029c0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	58024400 	.word	0x58024400

08002078 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b0be      	sub	sp, #248	@ 0xf8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002090:	f107 0318 	add.w	r3, r7, #24
 8002094:	22c8      	movs	r2, #200	@ 0xc8
 8002096:	2100      	movs	r1, #0
 8002098:	4618      	mov	r0, r3
 800209a:	f007 fd89 	bl	8009bb0 <memset>
  if(hspi->Instance==SPI2)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a38      	ldr	r2, [pc, #224]	@ (8002184 <HAL_SPI_MspInit+0x10c>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d169      	bne.n	800217c <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80020a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020b8:	f107 0318 	add.w	r3, r7, #24
 80020bc:	4618      	mov	r0, r3
 80020be:	f001 ff83 	bl	8003fc8 <HAL_RCCEx_PeriphCLKConfig>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80020c8:	f7ff ffaa 	bl	8002020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002188 <HAL_SPI_MspInit+0x110>)
 80020ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002188 <HAL_SPI_MspInit+0x110>)
 80020d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80020dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002188 <HAL_SPI_MspInit+0x110>)
 80020de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ea:	4b27      	ldr	r3, [pc, #156]	@ (8002188 <HAL_SPI_MspInit+0x110>)
 80020ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f0:	4a25      	ldr	r2, [pc, #148]	@ (8002188 <HAL_SPI_MspInit+0x110>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020fa:	4b23      	ldr	r3, [pc, #140]	@ (8002188 <HAL_SPI_MspInit+0x110>)
 80020fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002108:	4b1f      	ldr	r3, [pc, #124]	@ (8002188 <HAL_SPI_MspInit+0x110>)
 800210a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800210e:	4a1e      	ldr	r2, [pc, #120]	@ (8002188 <HAL_SPI_MspInit+0x110>)
 8002110:	f043 0304 	orr.w	r3, r3, #4
 8002114:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002118:	4b1b      	ldr	r3, [pc, #108]	@ (8002188 <HAL_SPI_MspInit+0x110>)
 800211a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_NSS_Pin;
 8002126:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800212a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213a:	2300      	movs	r3, #0
 800213c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002140:	2305      	movs	r3, #5
 8002142:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800214a:	4619      	mov	r1, r3
 800214c:	480f      	ldr	r0, [pc, #60]	@ (800218c <HAL_SPI_MspInit+0x114>)
 800214e:	f000 fc57 	bl	8002a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_3_Pin|PMOD_2_Pin;
 8002152:	230c      	movs	r3, #12
 8002154:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002164:	2300      	movs	r3, #0
 8002166:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800216a:	2305      	movs	r3, #5
 800216c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002170:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002174:	4619      	mov	r1, r3
 8002176:	4806      	ldr	r0, [pc, #24]	@ (8002190 <HAL_SPI_MspInit+0x118>)
 8002178:	f000 fc42 	bl	8002a00 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 800217c:	bf00      	nop
 800217e:	37f8      	adds	r7, #248	@ 0xf8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40003800 	.word	0x40003800
 8002188:	58024400 	.word	0x58024400
 800218c:	58020000 	.word	0x58020000
 8002190:	58020800 	.word	0x58020800

08002194 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	@ 0x28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM8)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a24      	ldr	r2, [pc, #144]	@ (8002244 <HAL_TIM_Base_MspInit+0xb0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d12e      	bne.n	8002214 <HAL_TIM_Base_MspInit+0x80>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80021b6:	4b24      	ldr	r3, [pc, #144]	@ (8002248 <HAL_TIM_Base_MspInit+0xb4>)
 80021b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021bc:	4a22      	ldr	r2, [pc, #136]	@ (8002248 <HAL_TIM_Base_MspInit+0xb4>)
 80021be:	f043 0302 	orr.w	r3, r3, #2
 80021c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021c6:	4b20      	ldr	r3, [pc, #128]	@ (8002248 <HAL_TIM_Base_MspInit+0xb4>)
 80021c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80021d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002248 <HAL_TIM_Base_MspInit+0xb4>)
 80021d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021da:	4a1b      	ldr	r2, [pc, #108]	@ (8002248 <HAL_TIM_Base_MspInit+0xb4>)
 80021dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021e4:	4b18      	ldr	r3, [pc, #96]	@ (8002248 <HAL_TIM_Base_MspInit+0xb4>)
 80021e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 80021f2:	2340      	movs	r3, #64	@ 0x40
 80021f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002202:	2303      	movs	r3, #3
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	4619      	mov	r1, r3
 800220c:	480f      	ldr	r0, [pc, #60]	@ (800224c <HAL_TIM_Base_MspInit+0xb8>)
 800220e:	f000 fbf7 	bl	8002a00 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM13_MspInit 1 */

    /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002212:	e013      	b.n	800223c <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM13)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a0d      	ldr	r2, [pc, #52]	@ (8002250 <HAL_TIM_Base_MspInit+0xbc>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d10e      	bne.n	800223c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800221e:	4b0a      	ldr	r3, [pc, #40]	@ (8002248 <HAL_TIM_Base_MspInit+0xb4>)
 8002220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002224:	4a08      	ldr	r2, [pc, #32]	@ (8002248 <HAL_TIM_Base_MspInit+0xb4>)
 8002226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800222a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800222e:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <HAL_TIM_Base_MspInit+0xb4>)
 8002230:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002234:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	68bb      	ldr	r3, [r7, #8]
}
 800223c:	bf00      	nop
 800223e:	3728      	adds	r7, #40	@ 0x28
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40010400 	.word	0x40010400
 8002248:	58024400 	.word	0x58024400
 800224c:	58022400 	.word	0x58022400
 8002250:	40001c00 	.word	0x40001c00

08002254 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	@ 0x28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a35      	ldr	r2, [pc, #212]	@ (8002348 <HAL_TIM_MspPostInit+0xf4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d13e      	bne.n	80022f4 <HAL_TIM_MspPostInit+0xa0>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002276:	4b35      	ldr	r3, [pc, #212]	@ (800234c <HAL_TIM_MspPostInit+0xf8>)
 8002278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800227c:	4a33      	ldr	r2, [pc, #204]	@ (800234c <HAL_TIM_MspPostInit+0xf8>)
 800227e:	f043 0304 	orr.w	r3, r3, #4
 8002282:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002286:	4b31      	ldr	r3, [pc, #196]	@ (800234c <HAL_TIM_MspPostInit+0xf8>)
 8002288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002294:	4b2d      	ldr	r3, [pc, #180]	@ (800234c <HAL_TIM_MspPostInit+0xf8>)
 8002296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800229a:	4a2c      	ldr	r2, [pc, #176]	@ (800234c <HAL_TIM_MspPostInit+0xf8>)
 800229c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022a4:	4b29      	ldr	r3, [pc, #164]	@ (800234c <HAL_TIM_MspPostInit+0xf8>)
 80022a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PJ7     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022b2:	2340      	movs	r3, #64	@ 0x40
 80022b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2300      	movs	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80022c2:	2303      	movs	r3, #3
 80022c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	4619      	mov	r1, r3
 80022cc:	4820      	ldr	r0, [pc, #128]	@ (8002350 <HAL_TIM_MspPostInit+0xfc>)
 80022ce:	f000 fb97 	bl	8002a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 80022d2:	2380      	movs	r3, #128	@ 0x80
 80022d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2300      	movs	r3, #0
 80022e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80022e2:	2303      	movs	r3, #3
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80022e6:	f107 0314 	add.w	r3, r7, #20
 80022ea:	4619      	mov	r1, r3
 80022ec:	4819      	ldr	r0, [pc, #100]	@ (8002354 <HAL_TIM_MspPostInit+0x100>)
 80022ee:	f000 fb87 	bl	8002a00 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM13_MspPostInit 1 */

    /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80022f2:	e024      	b.n	800233e <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM13)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a17      	ldr	r2, [pc, #92]	@ (8002358 <HAL_TIM_MspPostInit+0x104>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d11f      	bne.n	800233e <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022fe:	4b13      	ldr	r3, [pc, #76]	@ (800234c <HAL_TIM_MspPostInit+0xf8>)
 8002300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002304:	4a11      	ldr	r2, [pc, #68]	@ (800234c <HAL_TIM_MspPostInit+0xf8>)
 8002306:	f043 0320 	orr.w	r3, r3, #32
 800230a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800230e:	4b0f      	ldr	r3, [pc, #60]	@ (800234c <HAL_TIM_MspPostInit+0xf8>)
 8002310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 800231c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800232e:	2309      	movs	r3, #9
 8002330:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	4619      	mov	r1, r3
 8002338:	4808      	ldr	r0, [pc, #32]	@ (800235c <HAL_TIM_MspPostInit+0x108>)
 800233a:	f000 fb61 	bl	8002a00 <HAL_GPIO_Init>
}
 800233e:	bf00      	nop
 8002340:	3728      	adds	r7, #40	@ 0x28
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40010400 	.word	0x40010400
 800234c:	58024400 	.word	0x58024400
 8002350:	58020800 	.word	0x58020800
 8002354:	58022400 	.word	0x58022400
 8002358:	40001c00 	.word	0x40001c00
 800235c:	58021400 	.word	0x58021400

08002360 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b0bc      	sub	sp, #240	@ 0xf0
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002378:	f107 0310 	add.w	r3, r7, #16
 800237c:	22c8      	movs	r2, #200	@ 0xc8
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f007 fc15 	bl	8009bb0 <memset>
  if(huart->Instance==USART1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a27      	ldr	r2, [pc, #156]	@ (8002428 <HAL_UART_MspInit+0xc8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d146      	bne.n	800241e <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002390:	f04f 0201 	mov.w	r2, #1
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800239c:	2300      	movs	r3, #0
 800239e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023a2:	f107 0310 	add.w	r3, r7, #16
 80023a6:	4618      	mov	r0, r3
 80023a8:	f001 fe0e 	bl	8003fc8 <HAL_RCCEx_PeriphCLKConfig>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80023b2:	f7ff fe35 	bl	8002020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023b6:	4b1d      	ldr	r3, [pc, #116]	@ (800242c <HAL_UART_MspInit+0xcc>)
 80023b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023bc:	4a1b      	ldr	r2, [pc, #108]	@ (800242c <HAL_UART_MspInit+0xcc>)
 80023be:	f043 0310 	orr.w	r3, r3, #16
 80023c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023c6:	4b19      	ldr	r3, [pc, #100]	@ (800242c <HAL_UART_MspInit+0xcc>)
 80023c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d4:	4b15      	ldr	r3, [pc, #84]	@ (800242c <HAL_UART_MspInit+0xcc>)
 80023d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023da:	4a14      	ldr	r2, [pc, #80]	@ (800242c <HAL_UART_MspInit+0xcc>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023e4:	4b11      	ldr	r3, [pc, #68]	@ (800242c <HAL_UART_MspInit+0xcc>)
 80023e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80023f2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80023f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fa:	2302      	movs	r3, #2
 80023fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002406:	2300      	movs	r3, #0
 8002408:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800240c:	2307      	movs	r3, #7
 800240e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002412:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002416:	4619      	mov	r1, r3
 8002418:	4805      	ldr	r0, [pc, #20]	@ (8002430 <HAL_UART_MspInit+0xd0>)
 800241a:	f000 faf1 	bl	8002a00 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800241e:	bf00      	nop
 8002420:	37f0      	adds	r7, #240	@ 0xf0
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40011000 	.word	0x40011000
 800242c:	58024400 	.word	0x58024400
 8002430:	58020000 	.word	0x58020000

08002434 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b090      	sub	sp, #64	@ 0x40
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b0f      	cmp	r3, #15
 8002440:	d827      	bhi.n	8002492 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8002442:	2200      	movs	r2, #0
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	201e      	movs	r0, #30
 8002448:	f000 faa0 	bl	800298c <HAL_NVIC_SetPriority>

     /* Enable the TIM4 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800244c:	201e      	movs	r0, #30
 800244e:	f000 fab7 	bl	80029c0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8002452:	4a29      	ldr	r2, [pc, #164]	@ (80024f8 <HAL_InitTick+0xc4>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002458:	4b28      	ldr	r3, [pc, #160]	@ (80024fc <HAL_InitTick+0xc8>)
 800245a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800245e:	4a27      	ldr	r2, [pc, #156]	@ (80024fc <HAL_InitTick+0xc8>)
 8002460:	f043 0304 	orr.w	r3, r3, #4
 8002464:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002468:	4b24      	ldr	r3, [pc, #144]	@ (80024fc <HAL_InitTick+0xc8>)
 800246a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002476:	f107 0210 	add.w	r2, r7, #16
 800247a:	f107 0314 	add.w	r3, r7, #20
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f001 fd5f 	bl	8003f44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002488:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800248a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800248c:	2b00      	cmp	r3, #0
 800248e:	d106      	bne.n	800249e <HAL_InitTick+0x6a>
 8002490:	e001      	b.n	8002496 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e02b      	b.n	80024ee <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002496:	f001 fd29 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 800249a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800249c:	e004      	b.n	80024a8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800249e:	f001 fd25 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 80024a2:	4603      	mov	r3, r0
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024aa:	4a15      	ldr	r2, [pc, #84]	@ (8002500 <HAL_InitTick+0xcc>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	0c9b      	lsrs	r3, r3, #18
 80024b2:	3b01      	subs	r3, #1
 80024b4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80024b6:	4b13      	ldr	r3, [pc, #76]	@ (8002504 <HAL_InitTick+0xd0>)
 80024b8:	4a13      	ldr	r2, [pc, #76]	@ (8002508 <HAL_InitTick+0xd4>)
 80024ba:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80024bc:	4b11      	ldr	r3, [pc, #68]	@ (8002504 <HAL_InitTick+0xd0>)
 80024be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80024c2:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80024c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002504 <HAL_InitTick+0xd0>)
 80024c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024c8:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80024ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002504 <HAL_InitTick+0xd0>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002504 <HAL_InitTick+0xd0>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80024d6:	480b      	ldr	r0, [pc, #44]	@ (8002504 <HAL_InitTick+0xd0>)
 80024d8:	f004 fb17 	bl	8006b0a <HAL_TIM_Base_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d104      	bne.n	80024ec <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80024e2:	4808      	ldr	r0, [pc, #32]	@ (8002504 <HAL_InitTick+0xd0>)
 80024e4:	f004 fb68 	bl	8006bb8 <HAL_TIM_Base_Start_IT>
 80024e8:	4603      	mov	r3, r0
 80024ea:	e000      	b.n	80024ee <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3740      	adds	r7, #64	@ 0x40
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	24000008 	.word	0x24000008
 80024fc:	58024400 	.word	0x58024400
 8002500:	431bde83 	.word	0x431bde83
 8002504:	240002e8 	.word	0x240002e8
 8002508:	40000800 	.word	0x40000800

0800250c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002510:	bf00      	nop
 8002512:	e7fd      	b.n	8002510 <NMI_Handler+0x4>

08002514 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002518:	bf00      	nop
 800251a:	e7fd      	b.n	8002518 <HardFault_Handler+0x4>

0800251c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002520:	bf00      	nop
 8002522:	e7fd      	b.n	8002520 <MemManage_Handler+0x4>

08002524 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <BusFault_Handler+0x4>

0800252c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <UsageFault_Handler+0x4>

08002534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8002546:	2080      	movs	r0, #128	@ 0x80
 8002548:	f000 fc0a 	bl	8002d60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800254c:	bf00      	nop
 800254e:	bd80      	pop	{r7, pc}

08002550 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002554:	4802      	ldr	r0, [pc, #8]	@ (8002560 <TIM4_IRQHandler+0x10>)
 8002556:	f004 fc08 	bl	8006d6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	240002e8 	.word	0x240002e8

08002564 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	e00a      	b.n	800258c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002576:	f3af 8000 	nop.w
 800257a:	4601      	mov	r1, r0
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	60ba      	str	r2, [r7, #8]
 8002582:	b2ca      	uxtb	r2, r1
 8002584:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	3301      	adds	r3, #1
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	429a      	cmp	r2, r3
 8002592:	dbf0      	blt.n	8002576 <_read+0x12>
  }

  return len;
 8002594:	687b      	ldr	r3, [r7, #4]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b086      	sub	sp, #24
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	e009      	b.n	80025c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	60ba      	str	r2, [r7, #8]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe f8e3 	bl	8000784 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3301      	adds	r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	dbf1      	blt.n	80025b0 <_write+0x12>
  }
  return len;
 80025cc:	687b      	ldr	r3, [r7, #4]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <_close>:

int _close(int file)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025fe:	605a      	str	r2, [r3, #4]
  return 0;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <_isatty>:

int _isatty(int file)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002616:	2301      	movs	r3, #1
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002648:	4a14      	ldr	r2, [pc, #80]	@ (800269c <_sbrk+0x5c>)
 800264a:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <_sbrk+0x60>)
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002654:	4b13      	ldr	r3, [pc, #76]	@ (80026a4 <_sbrk+0x64>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d102      	bne.n	8002662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800265c:	4b11      	ldr	r3, [pc, #68]	@ (80026a4 <_sbrk+0x64>)
 800265e:	4a12      	ldr	r2, [pc, #72]	@ (80026a8 <_sbrk+0x68>)
 8002660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002662:	4b10      	ldr	r3, [pc, #64]	@ (80026a4 <_sbrk+0x64>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	429a      	cmp	r2, r3
 800266e:	d207      	bcs.n	8002680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002670:	f007 faec 	bl	8009c4c <__errno>
 8002674:	4603      	mov	r3, r0
 8002676:	220c      	movs	r2, #12
 8002678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800267a:	f04f 33ff 	mov.w	r3, #4294967295
 800267e:	e009      	b.n	8002694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002680:	4b08      	ldr	r3, [pc, #32]	@ (80026a4 <_sbrk+0x64>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002686:	4b07      	ldr	r3, [pc, #28]	@ (80026a4 <_sbrk+0x64>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	4a05      	ldr	r2, [pc, #20]	@ (80026a4 <_sbrk+0x64>)
 8002690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002692:	68fb      	ldr	r3, [r7, #12]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	24080000 	.word	0x24080000
 80026a0:	00000400 	.word	0x00000400
 80026a4:	24000334 	.word	0x24000334
 80026a8:	24000918 	.word	0x24000918

080026ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80026ac:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80026e8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80026b0:	f7fe f9e8 	bl	8000a84 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80026b4:	f7fe f938 	bl	8000928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026b8:	480c      	ldr	r0, [pc, #48]	@ (80026ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026ba:	490d      	ldr	r1, [pc, #52]	@ (80026f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026bc:	4a0d      	ldr	r2, [pc, #52]	@ (80026f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c0:	e002      	b.n	80026c8 <LoopCopyDataInit>

080026c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026c6:	3304      	adds	r3, #4

080026c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026cc:	d3f9      	bcc.n	80026c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ce:	4a0a      	ldr	r2, [pc, #40]	@ (80026f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026d0:	4c0a      	ldr	r4, [pc, #40]	@ (80026fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80026d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d4:	e001      	b.n	80026da <LoopFillZerobss>

080026d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d8:	3204      	adds	r2, #4

080026da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026dc:	d3fb      	bcc.n	80026d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026de:	f007 fabb 	bl	8009c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026e2:	f7ff f949 	bl	8001978 <main>
  bx  lr
 80026e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026e8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80026ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80026f0:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 80026f4:	0800a9f8 	.word	0x0800a9f8
  ldr r2, =_sbss
 80026f8:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 80026fc:	24000914 	.word	0x24000914

08002700 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002700:	e7fe      	b.n	8002700 <ADC3_IRQHandler>
	...

08002704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800270a:	2003      	movs	r0, #3
 800270c:	f000 f933 	bl	8002976 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002710:	f001 fa42 	bl	8003b98 <HAL_RCC_GetSysClockFreq>
 8002714:	4602      	mov	r2, r0
 8002716:	4b15      	ldr	r3, [pc, #84]	@ (800276c <HAL_Init+0x68>)
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	0a1b      	lsrs	r3, r3, #8
 800271c:	f003 030f 	and.w	r3, r3, #15
 8002720:	4913      	ldr	r1, [pc, #76]	@ (8002770 <HAL_Init+0x6c>)
 8002722:	5ccb      	ldrb	r3, [r1, r3]
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
 800272c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800272e:	4b0f      	ldr	r3, [pc, #60]	@ (800276c <HAL_Init+0x68>)
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	4a0e      	ldr	r2, [pc, #56]	@ (8002770 <HAL_Init+0x6c>)
 8002738:	5cd3      	ldrb	r3, [r2, r3]
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
 8002744:	4a0b      	ldr	r2, [pc, #44]	@ (8002774 <HAL_Init+0x70>)
 8002746:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002748:	4a0b      	ldr	r2, [pc, #44]	@ (8002778 <HAL_Init+0x74>)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800274e:	200f      	movs	r0, #15
 8002750:	f7ff fe70 	bl	8002434 <HAL_InitTick>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e002      	b.n	8002764 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800275e:	f7ff fc65 	bl	800202c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	58024400 	.word	0x58024400
 8002770:	0800a97c 	.word	0x0800a97c
 8002774:	24000004 	.word	0x24000004
 8002778:	24000000 	.word	0x24000000

0800277c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002780:	4b06      	ldr	r3, [pc, #24]	@ (800279c <HAL_IncTick+0x20>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <HAL_IncTick+0x24>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4413      	add	r3, r2
 800278c:	4a04      	ldr	r2, [pc, #16]	@ (80027a0 <HAL_IncTick+0x24>)
 800278e:	6013      	str	r3, [r2, #0]
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	2400000c 	.word	0x2400000c
 80027a0:	24000338 	.word	0x24000338

080027a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return uwTick;
 80027a8:	4b03      	ldr	r3, [pc, #12]	@ (80027b8 <HAL_GetTick+0x14>)
 80027aa:	681b      	ldr	r3, [r3, #0]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	24000338 	.word	0x24000338

080027bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c4:	f7ff ffee 	bl	80027a4 <HAL_GetTick>
 80027c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d4:	d005      	beq.n	80027e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002800 <HAL_Delay+0x44>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4413      	add	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027e2:	bf00      	nop
 80027e4:	f7ff ffde 	bl	80027a4 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d8f7      	bhi.n	80027e4 <HAL_Delay+0x28>
  {
  }
}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	2400000c 	.word	0x2400000c

08002804 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002808:	4b03      	ldr	r3, [pc, #12]	@ (8002818 <HAL_GetREVID+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	0c1b      	lsrs	r3, r3, #16
}
 800280e:	4618      	mov	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	5c001000 	.word	0x5c001000

0800281c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800282c:	4b0b      	ldr	r3, [pc, #44]	@ (800285c <__NVIC_SetPriorityGrouping+0x40>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002838:	4013      	ands	r3, r2
 800283a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002844:	4b06      	ldr	r3, [pc, #24]	@ (8002860 <__NVIC_SetPriorityGrouping+0x44>)
 8002846:	4313      	orrs	r3, r2
 8002848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800284a:	4a04      	ldr	r2, [pc, #16]	@ (800285c <__NVIC_SetPriorityGrouping+0x40>)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	60d3      	str	r3, [r2, #12]
}
 8002850:	bf00      	nop
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00
 8002860:	05fa0000 	.word	0x05fa0000

08002864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002868:	4b04      	ldr	r3, [pc, #16]	@ (800287c <__NVIC_GetPriorityGrouping+0x18>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	f003 0307 	and.w	r3, r3, #7
}
 8002872:	4618      	mov	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800288a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800288e:	2b00      	cmp	r3, #0
 8002890:	db0b      	blt.n	80028aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	f003 021f 	and.w	r2, r3, #31
 8002898:	4907      	ldr	r1, [pc, #28]	@ (80028b8 <__NVIC_EnableIRQ+0x38>)
 800289a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	2001      	movs	r0, #1
 80028a2:	fa00 f202 	lsl.w	r2, r0, r2
 80028a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	e000e100 	.word	0xe000e100

080028bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	6039      	str	r1, [r7, #0]
 80028c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	db0a      	blt.n	80028e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	490c      	ldr	r1, [pc, #48]	@ (8002908 <__NVIC_SetPriority+0x4c>)
 80028d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028da:	0112      	lsls	r2, r2, #4
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	440b      	add	r3, r1
 80028e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e4:	e00a      	b.n	80028fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	4908      	ldr	r1, [pc, #32]	@ (800290c <__NVIC_SetPriority+0x50>)
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	3b04      	subs	r3, #4
 80028f4:	0112      	lsls	r2, r2, #4
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	440b      	add	r3, r1
 80028fa:	761a      	strb	r2, [r3, #24]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000e100 	.word	0xe000e100
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002910:	b480      	push	{r7}
 8002912:	b089      	sub	sp, #36	@ 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f1c3 0307 	rsb	r3, r3, #7
 800292a:	2b04      	cmp	r3, #4
 800292c:	bf28      	it	cs
 800292e:	2304      	movcs	r3, #4
 8002930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3304      	adds	r3, #4
 8002936:	2b06      	cmp	r3, #6
 8002938:	d902      	bls.n	8002940 <NVIC_EncodePriority+0x30>
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3b03      	subs	r3, #3
 800293e:	e000      	b.n	8002942 <NVIC_EncodePriority+0x32>
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	f04f 32ff 	mov.w	r2, #4294967295
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43da      	mvns	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	401a      	ands	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002958:	f04f 31ff 	mov.w	r1, #4294967295
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa01 f303 	lsl.w	r3, r1, r3
 8002962:	43d9      	mvns	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002968:	4313      	orrs	r3, r2
         );
}
 800296a:	4618      	mov	r0, r3
 800296c:	3724      	adds	r7, #36	@ 0x24
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff ff4c 	bl	800281c <__NVIC_SetPriorityGrouping>
}
 8002984:	bf00      	nop
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800299a:	f7ff ff63 	bl	8002864 <__NVIC_GetPriorityGrouping>
 800299e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	68b9      	ldr	r1, [r7, #8]
 80029a4:	6978      	ldr	r0, [r7, #20]
 80029a6:	f7ff ffb3 	bl	8002910 <NVIC_EncodePriority>
 80029aa:	4602      	mov	r2, r0
 80029ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff ff82 	bl	80028bc <__NVIC_SetPriority>
}
 80029b8:	bf00      	nop
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff ff56 	bl	8002880 <__NVIC_EnableIRQ>
}
 80029d4:	bf00      	nop
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80029e0:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_GetCurrentCPUID+0x20>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029e8:	2b70      	cmp	r3, #112	@ 0x70
 80029ea:	d101      	bne.n	80029f0 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e000      	b.n	80029f2 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 80029f0:	2301      	movs	r3, #1
  }
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	@ 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002a0e:	4b89      	ldr	r3, [pc, #548]	@ (8002c34 <HAL_GPIO_Init+0x234>)
 8002a10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a12:	e194      	b.n	8002d3e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	2101      	movs	r1, #1
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 8186 	beq.w	8002d38 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d005      	beq.n	8002a44 <HAL_GPIO_Init+0x44>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d130      	bne.n	8002aa6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2203      	movs	r2, #3
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	091b      	lsrs	r3, r3, #4
 8002a90:	f003 0201 	and.w	r2, r3, #1
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d017      	beq.n	8002ae2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	2203      	movs	r2, #3
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d123      	bne.n	8002b36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	08da      	lsrs	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3208      	adds	r2, #8
 8002af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	220f      	movs	r2, #15
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	691a      	ldr	r2, [r3, #16]
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	08da      	lsrs	r2, r3, #3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3208      	adds	r2, #8
 8002b30:	69b9      	ldr	r1, [r7, #24]
 8002b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	2203      	movs	r2, #3
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43db      	mvns	r3, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 0203 	and.w	r2, r3, #3
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 80e0 	beq.w	8002d38 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b78:	4b2f      	ldr	r3, [pc, #188]	@ (8002c38 <HAL_GPIO_Init+0x238>)
 8002b7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002b7e:	4a2e      	ldr	r2, [pc, #184]	@ (8002c38 <HAL_GPIO_Init+0x238>)
 8002b80:	f043 0302 	orr.w	r3, r3, #2
 8002b84:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002b88:	4b2b      	ldr	r3, [pc, #172]	@ (8002c38 <HAL_GPIO_Init+0x238>)
 8002b8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b96:	4a29      	ldr	r2, [pc, #164]	@ (8002c3c <HAL_GPIO_Init+0x23c>)
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	089b      	lsrs	r3, r3, #2
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	220f      	movs	r2, #15
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a20      	ldr	r2, [pc, #128]	@ (8002c40 <HAL_GPIO_Init+0x240>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d052      	beq.n	8002c68 <HAL_GPIO_Init+0x268>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c44 <HAL_GPIO_Init+0x244>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d031      	beq.n	8002c2e <HAL_GPIO_Init+0x22e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a1e      	ldr	r2, [pc, #120]	@ (8002c48 <HAL_GPIO_Init+0x248>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d02b      	beq.n	8002c2a <HAL_GPIO_Init+0x22a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c4c <HAL_GPIO_Init+0x24c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d025      	beq.n	8002c26 <HAL_GPIO_Init+0x226>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8002c50 <HAL_GPIO_Init+0x250>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d01f      	beq.n	8002c22 <HAL_GPIO_Init+0x222>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c54 <HAL_GPIO_Init+0x254>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d019      	beq.n	8002c1e <HAL_GPIO_Init+0x21e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a1a      	ldr	r2, [pc, #104]	@ (8002c58 <HAL_GPIO_Init+0x258>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d013      	beq.n	8002c1a <HAL_GPIO_Init+0x21a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a19      	ldr	r2, [pc, #100]	@ (8002c5c <HAL_GPIO_Init+0x25c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00d      	beq.n	8002c16 <HAL_GPIO_Init+0x216>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a18      	ldr	r2, [pc, #96]	@ (8002c60 <HAL_GPIO_Init+0x260>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d007      	beq.n	8002c12 <HAL_GPIO_Init+0x212>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a17      	ldr	r2, [pc, #92]	@ (8002c64 <HAL_GPIO_Init+0x264>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d101      	bne.n	8002c0e <HAL_GPIO_Init+0x20e>
 8002c0a:	2309      	movs	r3, #9
 8002c0c:	e02d      	b.n	8002c6a <HAL_GPIO_Init+0x26a>
 8002c0e:	230a      	movs	r3, #10
 8002c10:	e02b      	b.n	8002c6a <HAL_GPIO_Init+0x26a>
 8002c12:	2308      	movs	r3, #8
 8002c14:	e029      	b.n	8002c6a <HAL_GPIO_Init+0x26a>
 8002c16:	2307      	movs	r3, #7
 8002c18:	e027      	b.n	8002c6a <HAL_GPIO_Init+0x26a>
 8002c1a:	2306      	movs	r3, #6
 8002c1c:	e025      	b.n	8002c6a <HAL_GPIO_Init+0x26a>
 8002c1e:	2305      	movs	r3, #5
 8002c20:	e023      	b.n	8002c6a <HAL_GPIO_Init+0x26a>
 8002c22:	2304      	movs	r3, #4
 8002c24:	e021      	b.n	8002c6a <HAL_GPIO_Init+0x26a>
 8002c26:	2303      	movs	r3, #3
 8002c28:	e01f      	b.n	8002c6a <HAL_GPIO_Init+0x26a>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e01d      	b.n	8002c6a <HAL_GPIO_Init+0x26a>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e01b      	b.n	8002c6a <HAL_GPIO_Init+0x26a>
 8002c32:	bf00      	nop
 8002c34:	58000080 	.word	0x58000080
 8002c38:	58024400 	.word	0x58024400
 8002c3c:	58000400 	.word	0x58000400
 8002c40:	58020000 	.word	0x58020000
 8002c44:	58020400 	.word	0x58020400
 8002c48:	58020800 	.word	0x58020800
 8002c4c:	58020c00 	.word	0x58020c00
 8002c50:	58021000 	.word	0x58021000
 8002c54:	58021400 	.word	0x58021400
 8002c58:	58021800 	.word	0x58021800
 8002c5c:	58021c00 	.word	0x58021c00
 8002c60:	58022000 	.word	0x58022000
 8002c64:	58022400 	.word	0x58022400
 8002c68:	2300      	movs	r3, #0
 8002c6a:	69fa      	ldr	r2, [r7, #28]
 8002c6c:	f002 0203 	and.w	r2, r2, #3
 8002c70:	0092      	lsls	r2, r2, #2
 8002c72:	4093      	lsls	r3, r2
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c7a:	4938      	ldr	r1, [pc, #224]	@ (8002d5c <HAL_GPIO_Init+0x35c>)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	3302      	adds	r3, #2
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002cae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002cb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002cdc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	fa22 f303 	lsr.w	r3, r2, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f47f ae63 	bne.w	8002a14 <HAL_GPIO_Init+0x14>
  }
}
 8002d4e:	bf00      	nop
 8002d50:	bf00      	nop
 8002d52:	3724      	adds	r7, #36	@ 0x24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	58000400 	.word	0x58000400

08002d60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002d72:	88fb      	ldrh	r3, [r7, #6]
 8002d74:	4013      	ands	r3, r2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d008      	beq.n	8002d8c <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe fdc0 	bl	800190c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002d9c:	4a08      	ldr	r2, [pc, #32]	@ (8002dc0 <HAL_HSEM_FastTake+0x2c>)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3320      	adds	r3, #32
 8002da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da6:	4a07      	ldr	r2, [pc, #28]	@ (8002dc4 <HAL_HSEM_FastTake+0x30>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d101      	bne.n	8002db0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	e000      	b.n	8002db2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	58026400 	.word	0x58026400
 8002dc4:	80000300 	.word	0x80000300

08002dc8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002dd2:	4906      	ldr	r1, [pc, #24]	@ (8002dec <HAL_HSEM_Release+0x24>)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	58026400 	.word	0x58026400

08002df0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002df8:	4b29      	ldr	r3, [pc, #164]	@ (8002ea0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	2b06      	cmp	r3, #6
 8002e02:	d00a      	beq.n	8002e1a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e04:	4b26      	ldr	r3, [pc, #152]	@ (8002ea0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d001      	beq.n	8002e16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e040      	b.n	8002e98 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e03e      	b.n	8002e98 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e1a:	4b21      	ldr	r3, [pc, #132]	@ (8002ea0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002e22:	491f      	ldr	r1, [pc, #124]	@ (8002ea0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002e2a:	f7ff fcbb 	bl	80027a4 <HAL_GetTick>
 8002e2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e30:	e009      	b.n	8002e46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e32:	f7ff fcb7 	bl	80027a4 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e40:	d901      	bls.n	8002e46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e028      	b.n	8002e98 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e46:	4b16      	ldr	r3, [pc, #88]	@ (8002ea0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e52:	d1ee      	bne.n	8002e32 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b1e      	cmp	r3, #30
 8002e58:	d008      	beq.n	8002e6c <HAL_PWREx_ConfigSupply+0x7c>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e5e:	d005      	beq.n	8002e6c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b1d      	cmp	r3, #29
 8002e64:	d002      	beq.n	8002e6c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b2d      	cmp	r3, #45	@ 0x2d
 8002e6a:	d114      	bne.n	8002e96 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002e6c:	f7ff fc9a 	bl	80027a4 <HAL_GetTick>
 8002e70:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e72:	e009      	b.n	8002e88 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e74:	f7ff fc96 	bl	80027a4 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e82:	d901      	bls.n	8002e88 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e007      	b.n	8002e98 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e88:	4b05      	ldr	r3, [pc, #20]	@ (8002ea0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e94:	d1ee      	bne.n	8002e74 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	58024800 	.word	0x58024800

08002ea4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08c      	sub	sp, #48	@ 0x30
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d102      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	f000 bc48 	b.w	8003748 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 8088 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ec6:	4b99      	ldr	r3, [pc, #612]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ed0:	4b96      	ldr	r3, [pc, #600]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed8:	2b10      	cmp	r3, #16
 8002eda:	d007      	beq.n	8002eec <HAL_RCC_OscConfig+0x48>
 8002edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ede:	2b18      	cmp	r3, #24
 8002ee0:	d111      	bne.n	8002f06 <HAL_RCC_OscConfig+0x62>
 8002ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d10c      	bne.n	8002f06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eec:	4b8f      	ldr	r3, [pc, #572]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d06d      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x130>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d169      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	f000 bc21 	b.w	8003748 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCC_OscConfig+0x7a>
 8002f10:	4b86      	ldr	r3, [pc, #536]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a85      	ldr	r2, [pc, #532]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8002f16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	e02e      	b.n	8002f7c <HAL_RCC_OscConfig+0xd8>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x9c>
 8002f26:	4b81      	ldr	r3, [pc, #516]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a80      	ldr	r2, [pc, #512]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8002f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b7e      	ldr	r3, [pc, #504]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a7d      	ldr	r2, [pc, #500]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8002f38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e01d      	b.n	8002f7c <HAL_RCC_OscConfig+0xd8>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0xc0>
 8002f4a:	4b78      	ldr	r3, [pc, #480]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a77      	ldr	r2, [pc, #476]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8002f50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	4b75      	ldr	r3, [pc, #468]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a74      	ldr	r2, [pc, #464]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e00b      	b.n	8002f7c <HAL_RCC_OscConfig+0xd8>
 8002f64:	4b71      	ldr	r3, [pc, #452]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a70      	ldr	r2, [pc, #448]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8002f6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	4b6e      	ldr	r3, [pc, #440]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a6d      	ldr	r2, [pc, #436]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8002f76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d013      	beq.n	8002fac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7ff fc0e 	bl	80027a4 <HAL_GetTick>
 8002f88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7ff fc0a 	bl	80027a4 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	@ 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e3d4      	b.n	8003748 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f9e:	4b63      	ldr	r3, [pc, #396]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0xe8>
 8002faa:	e014      	b.n	8002fd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7ff fbfa 	bl	80027a4 <HAL_GetTick>
 8002fb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7ff fbf6 	bl	80027a4 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	@ 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e3c0      	b.n	8003748 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fc6:	4b59      	ldr	r3, [pc, #356]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x110>
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 80ca 	beq.w	8003178 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fe4:	4b51      	ldr	r3, [pc, #324]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fee:	4b4f      	ldr	r3, [pc, #316]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d007      	beq.n	800300a <HAL_RCC_OscConfig+0x166>
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	2b18      	cmp	r3, #24
 8002ffe:	d156      	bne.n	80030ae <HAL_RCC_OscConfig+0x20a>
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d151      	bne.n	80030ae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800300a:	4b48      	ldr	r3, [pc, #288]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_RCC_OscConfig+0x17e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e392      	b.n	8003748 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003022:	4b42      	ldr	r3, [pc, #264]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 0219 	bic.w	r2, r3, #25
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	493f      	ldr	r1, [pc, #252]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8003030:	4313      	orrs	r3, r2
 8003032:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7ff fbb6 	bl	80027a4 <HAL_GetTick>
 8003038:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303c:	f7ff fbb2 	bl	80027a4 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e37c      	b.n	8003748 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800304e:	4b37      	ldr	r3, [pc, #220]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305a:	f7ff fbd3 	bl	8002804 <HAL_GetREVID>
 800305e:	4603      	mov	r3, r0
 8003060:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003064:	4293      	cmp	r3, r2
 8003066:	d817      	bhi.n	8003098 <HAL_RCC_OscConfig+0x1f4>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	2b40      	cmp	r3, #64	@ 0x40
 800306e:	d108      	bne.n	8003082 <HAL_RCC_OscConfig+0x1de>
 8003070:	4b2e      	ldr	r3, [pc, #184]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003078:	4a2c      	ldr	r2, [pc, #176]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 800307a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800307e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003080:	e07a      	b.n	8003178 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003082:	4b2a      	ldr	r3, [pc, #168]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	031b      	lsls	r3, r3, #12
 8003090:	4926      	ldr	r1, [pc, #152]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8003092:	4313      	orrs	r3, r2
 8003094:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003096:	e06f      	b.n	8003178 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003098:	4b24      	ldr	r3, [pc, #144]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	061b      	lsls	r3, r3, #24
 80030a6:	4921      	ldr	r1, [pc, #132]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030ac:	e064      	b.n	8003178 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d047      	beq.n	8003146 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030b6:	4b1d      	ldr	r3, [pc, #116]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 0219 	bic.w	r2, r3, #25
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	491a      	ldr	r1, [pc, #104]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7ff fb6c 	bl	80027a4 <HAL_GetTick>
 80030cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d0:	f7ff fb68 	bl	80027a4 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e332      	b.n	8003748 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030e2:	4b12      	ldr	r3, [pc, #72]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ee:	f7ff fb89 	bl	8002804 <HAL_GetREVID>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d819      	bhi.n	8003130 <HAL_RCC_OscConfig+0x28c>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	2b40      	cmp	r3, #64	@ 0x40
 8003102:	d108      	bne.n	8003116 <HAL_RCC_OscConfig+0x272>
 8003104:	4b09      	ldr	r3, [pc, #36]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800310c:	4a07      	ldr	r2, [pc, #28]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 800310e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003112:	6053      	str	r3, [r2, #4]
 8003114:	e030      	b.n	8003178 <HAL_RCC_OscConfig+0x2d4>
 8003116:	4b05      	ldr	r3, [pc, #20]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	031b      	lsls	r3, r3, #12
 8003124:	4901      	ldr	r1, [pc, #4]	@ (800312c <HAL_RCC_OscConfig+0x288>)
 8003126:	4313      	orrs	r3, r2
 8003128:	604b      	str	r3, [r1, #4]
 800312a:	e025      	b.n	8003178 <HAL_RCC_OscConfig+0x2d4>
 800312c:	58024400 	.word	0x58024400
 8003130:	4b9a      	ldr	r3, [pc, #616]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	061b      	lsls	r3, r3, #24
 800313e:	4997      	ldr	r1, [pc, #604]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 8003140:	4313      	orrs	r3, r2
 8003142:	604b      	str	r3, [r1, #4]
 8003144:	e018      	b.n	8003178 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003146:	4b95      	ldr	r3, [pc, #596]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a94      	ldr	r2, [pc, #592]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 800314c:	f023 0301 	bic.w	r3, r3, #1
 8003150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003152:	f7ff fb27 	bl	80027a4 <HAL_GetTick>
 8003156:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315a:	f7ff fb23 	bl	80027a4 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e2ed      	b.n	8003748 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800316c:	4b8b      	ldr	r3, [pc, #556]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1f0      	bne.n	800315a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 80a9 	beq.w	80032d8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003186:	4b85      	ldr	r3, [pc, #532]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800318e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003190:	4b82      	ldr	r3, [pc, #520]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 8003192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003194:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	2b08      	cmp	r3, #8
 800319a:	d007      	beq.n	80031ac <HAL_RCC_OscConfig+0x308>
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	2b18      	cmp	r3, #24
 80031a0:	d13a      	bne.n	8003218 <HAL_RCC_OscConfig+0x374>
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d135      	bne.n	8003218 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031ac:	4b7b      	ldr	r3, [pc, #492]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_RCC_OscConfig+0x320>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	2b80      	cmp	r3, #128	@ 0x80
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e2c1      	b.n	8003748 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031c4:	f7ff fb1e 	bl	8002804 <HAL_GetREVID>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f241 0203 	movw	r2, #4099	@ 0x1003
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d817      	bhi.n	8003202 <HAL_RCC_OscConfig+0x35e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	2b20      	cmp	r3, #32
 80031d8:	d108      	bne.n	80031ec <HAL_RCC_OscConfig+0x348>
 80031da:	4b70      	ldr	r3, [pc, #448]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80031e2:	4a6e      	ldr	r2, [pc, #440]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 80031e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80031e8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031ea:	e075      	b.n	80032d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031ec:	4b6b      	ldr	r3, [pc, #428]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	069b      	lsls	r3, r3, #26
 80031fa:	4968      	ldr	r1, [pc, #416]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003200:	e06a      	b.n	80032d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003202:	4b66      	ldr	r3, [pc, #408]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	061b      	lsls	r3, r3, #24
 8003210:	4962      	ldr	r1, [pc, #392]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 8003212:	4313      	orrs	r3, r2
 8003214:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003216:	e05f      	b.n	80032d8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d042      	beq.n	80032a6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003220:	4b5e      	ldr	r3, [pc, #376]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a5d      	ldr	r2, [pc, #372]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 8003226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800322a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322c:	f7ff faba 	bl	80027a4 <HAL_GetTick>
 8003230:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003234:	f7ff fab6 	bl	80027a4 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e280      	b.n	8003748 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003246:	4b55      	ldr	r3, [pc, #340]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0f0      	beq.n	8003234 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003252:	f7ff fad7 	bl	8002804 <HAL_GetREVID>
 8003256:	4603      	mov	r3, r0
 8003258:	f241 0203 	movw	r2, #4099	@ 0x1003
 800325c:	4293      	cmp	r3, r2
 800325e:	d817      	bhi.n	8003290 <HAL_RCC_OscConfig+0x3ec>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	2b20      	cmp	r3, #32
 8003266:	d108      	bne.n	800327a <HAL_RCC_OscConfig+0x3d6>
 8003268:	4b4c      	ldr	r3, [pc, #304]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003270:	4a4a      	ldr	r2, [pc, #296]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 8003272:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003276:	6053      	str	r3, [r2, #4]
 8003278:	e02e      	b.n	80032d8 <HAL_RCC_OscConfig+0x434>
 800327a:	4b48      	ldr	r3, [pc, #288]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	069b      	lsls	r3, r3, #26
 8003288:	4944      	ldr	r1, [pc, #272]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 800328a:	4313      	orrs	r3, r2
 800328c:	604b      	str	r3, [r1, #4]
 800328e:	e023      	b.n	80032d8 <HAL_RCC_OscConfig+0x434>
 8003290:	4b42      	ldr	r3, [pc, #264]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	061b      	lsls	r3, r3, #24
 800329e:	493f      	ldr	r1, [pc, #252]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60cb      	str	r3, [r1, #12]
 80032a4:	e018      	b.n	80032d8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80032a6:	4b3d      	ldr	r3, [pc, #244]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a3c      	ldr	r2, [pc, #240]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 80032ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b2:	f7ff fa77 	bl	80027a4 <HAL_GetTick>
 80032b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80032ba:	f7ff fa73 	bl	80027a4 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e23d      	b.n	8003748 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032cc:	4b33      	ldr	r3, [pc, #204]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f0      	bne.n	80032ba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d036      	beq.n	8003352 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d019      	beq.n	8003320 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ec:	4b2b      	ldr	r3, [pc, #172]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 80032ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032f0:	4a2a      	ldr	r2, [pc, #168]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f8:	f7ff fa54 	bl	80027a4 <HAL_GetTick>
 80032fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003300:	f7ff fa50 	bl	80027a4 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e21a      	b.n	8003748 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003312:	4b22      	ldr	r3, [pc, #136]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 8003314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0f0      	beq.n	8003300 <HAL_RCC_OscConfig+0x45c>
 800331e:	e018      	b.n	8003352 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003320:	4b1e      	ldr	r3, [pc, #120]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 8003322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003324:	4a1d      	ldr	r2, [pc, #116]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 8003326:	f023 0301 	bic.w	r3, r3, #1
 800332a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332c:	f7ff fa3a 	bl	80027a4 <HAL_GetTick>
 8003330:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003334:	f7ff fa36 	bl	80027a4 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e200      	b.n	8003748 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003346:	4b15      	ldr	r3, [pc, #84]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 8003348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b00      	cmp	r3, #0
 800335c:	d039      	beq.n	80033d2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d01c      	beq.n	80033a0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003366:	4b0d      	ldr	r3, [pc, #52]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a0c      	ldr	r2, [pc, #48]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 800336c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003370:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003372:	f7ff fa17 	bl	80027a4 <HAL_GetTick>
 8003376:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800337a:	f7ff fa13 	bl	80027a4 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e1dd      	b.n	8003748 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800338c:	4b03      	ldr	r3, [pc, #12]	@ (800339c <HAL_RCC_OscConfig+0x4f8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x4d6>
 8003398:	e01b      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
 800339a:	bf00      	nop
 800339c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033a0:	4b9b      	ldr	r3, [pc, #620]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a9a      	ldr	r2, [pc, #616]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 80033a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80033ac:	f7ff f9fa 	bl	80027a4 <HAL_GetTick>
 80033b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033b4:	f7ff f9f6 	bl	80027a4 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e1c0      	b.n	8003748 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033c6:	4b92      	ldr	r3, [pc, #584]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8081 	beq.w	80034e2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033e0:	4b8c      	ldr	r3, [pc, #560]	@ (8003614 <HAL_RCC_OscConfig+0x770>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a8b      	ldr	r2, [pc, #556]	@ (8003614 <HAL_RCC_OscConfig+0x770>)
 80033e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033ec:	f7ff f9da 	bl	80027a4 <HAL_GetTick>
 80033f0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f4:	f7ff f9d6 	bl	80027a4 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b64      	cmp	r3, #100	@ 0x64
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e1a0      	b.n	8003748 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003406:	4b83      	ldr	r3, [pc, #524]	@ (8003614 <HAL_RCC_OscConfig+0x770>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0f0      	beq.n	80033f4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d106      	bne.n	8003428 <HAL_RCC_OscConfig+0x584>
 800341a:	4b7d      	ldr	r3, [pc, #500]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341e:	4a7c      	ldr	r2, [pc, #496]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	6713      	str	r3, [r2, #112]	@ 0x70
 8003426:	e02d      	b.n	8003484 <HAL_RCC_OscConfig+0x5e0>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10c      	bne.n	800344a <HAL_RCC_OscConfig+0x5a6>
 8003430:	4b77      	ldr	r3, [pc, #476]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 8003432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003434:	4a76      	ldr	r2, [pc, #472]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 8003436:	f023 0301 	bic.w	r3, r3, #1
 800343a:	6713      	str	r3, [r2, #112]	@ 0x70
 800343c:	4b74      	ldr	r3, [pc, #464]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 800343e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003440:	4a73      	ldr	r2, [pc, #460]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 8003442:	f023 0304 	bic.w	r3, r3, #4
 8003446:	6713      	str	r3, [r2, #112]	@ 0x70
 8003448:	e01c      	b.n	8003484 <HAL_RCC_OscConfig+0x5e0>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b05      	cmp	r3, #5
 8003450:	d10c      	bne.n	800346c <HAL_RCC_OscConfig+0x5c8>
 8003452:	4b6f      	ldr	r3, [pc, #444]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003456:	4a6e      	ldr	r2, [pc, #440]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 8003458:	f043 0304 	orr.w	r3, r3, #4
 800345c:	6713      	str	r3, [r2, #112]	@ 0x70
 800345e:	4b6c      	ldr	r3, [pc, #432]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003462:	4a6b      	ldr	r2, [pc, #428]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	6713      	str	r3, [r2, #112]	@ 0x70
 800346a:	e00b      	b.n	8003484 <HAL_RCC_OscConfig+0x5e0>
 800346c:	4b68      	ldr	r3, [pc, #416]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 800346e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003470:	4a67      	ldr	r2, [pc, #412]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 8003472:	f023 0301 	bic.w	r3, r3, #1
 8003476:	6713      	str	r3, [r2, #112]	@ 0x70
 8003478:	4b65      	ldr	r3, [pc, #404]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 800347a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800347c:	4a64      	ldr	r2, [pc, #400]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 800347e:	f023 0304 	bic.w	r3, r3, #4
 8003482:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d015      	beq.n	80034b8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348c:	f7ff f98a 	bl	80027a4 <HAL_GetTick>
 8003490:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003492:	e00a      	b.n	80034aa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003494:	f7ff f986 	bl	80027a4 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e14e      	b.n	8003748 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034aa:	4b59      	ldr	r3, [pc, #356]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 80034ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0ee      	beq.n	8003494 <HAL_RCC_OscConfig+0x5f0>
 80034b6:	e014      	b.n	80034e2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b8:	f7ff f974 	bl	80027a4 <HAL_GetTick>
 80034bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c0:	f7ff f970 	bl	80027a4 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e138      	b.n	8003748 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1ee      	bne.n	80034c0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 812d 	beq.w	8003746 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80034ec:	4b48      	ldr	r3, [pc, #288]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034f4:	2b18      	cmp	r3, #24
 80034f6:	f000 80bd 	beq.w	8003674 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fe:	2b02      	cmp	r3, #2
 8003500:	f040 809e 	bne.w	8003640 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003504:	4b42      	ldr	r3, [pc, #264]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a41      	ldr	r2, [pc, #260]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 800350a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800350e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7ff f948 	bl	80027a4 <HAL_GetTick>
 8003514:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003518:	f7ff f944 	bl	80027a4 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e10e      	b.n	8003748 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800352a:	4b39      	ldr	r3, [pc, #228]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003536:	4b36      	ldr	r3, [pc, #216]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 8003538:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800353a:	4b37      	ldr	r3, [pc, #220]	@ (8003618 <HAL_RCC_OscConfig+0x774>)
 800353c:	4013      	ands	r3, r2
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003546:	0112      	lsls	r2, r2, #4
 8003548:	430a      	orrs	r2, r1
 800354a:	4931      	ldr	r1, [pc, #196]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 800354c:	4313      	orrs	r3, r2
 800354e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003554:	3b01      	subs	r3, #1
 8003556:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800355e:	3b01      	subs	r3, #1
 8003560:	025b      	lsls	r3, r3, #9
 8003562:	b29b      	uxth	r3, r3
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356a:	3b01      	subs	r3, #1
 800356c:	041b      	lsls	r3, r3, #16
 800356e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003578:	3b01      	subs	r3, #1
 800357a:	061b      	lsls	r3, r3, #24
 800357c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003580:	4923      	ldr	r1, [pc, #140]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 8003582:	4313      	orrs	r3, r2
 8003584:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003586:	4b22      	ldr	r3, [pc, #136]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 8003588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358a:	4a21      	ldr	r2, [pc, #132]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 800358c:	f023 0301 	bic.w	r3, r3, #1
 8003590:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003592:	4b1f      	ldr	r3, [pc, #124]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 8003594:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003596:	4b21      	ldr	r3, [pc, #132]	@ (800361c <HAL_RCC_OscConfig+0x778>)
 8003598:	4013      	ands	r3, r2
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800359e:	00d2      	lsls	r2, r2, #3
 80035a0:	491b      	ldr	r1, [pc, #108]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80035a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 80035a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035aa:	f023 020c 	bic.w	r2, r3, #12
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	4917      	ldr	r1, [pc, #92]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80035b8:	4b15      	ldr	r3, [pc, #84]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 80035ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035bc:	f023 0202 	bic.w	r2, r3, #2
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c4:	4912      	ldr	r1, [pc, #72]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80035ca:	4b11      	ldr	r3, [pc, #68]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 80035cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ce:	4a10      	ldr	r2, [pc, #64]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 80035d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 80035d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035da:	4a0d      	ldr	r2, [pc, #52]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 80035dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80035e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 80035e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 80035e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80035ee:	4b08      	ldr	r3, [pc, #32]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 80035f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f2:	4a07      	ldr	r2, [pc, #28]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 80035f4:	f043 0301 	orr.w	r3, r3, #1
 80035f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035fa:	4b05      	ldr	r3, [pc, #20]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a04      	ldr	r2, [pc, #16]	@ (8003610 <HAL_RCC_OscConfig+0x76c>)
 8003600:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003606:	f7ff f8cd 	bl	80027a4 <HAL_GetTick>
 800360a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800360c:	e011      	b.n	8003632 <HAL_RCC_OscConfig+0x78e>
 800360e:	bf00      	nop
 8003610:	58024400 	.word	0x58024400
 8003614:	58024800 	.word	0x58024800
 8003618:	fffffc0c 	.word	0xfffffc0c
 800361c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003620:	f7ff f8c0 	bl	80027a4 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e08a      	b.n	8003748 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003632:	4b47      	ldr	r3, [pc, #284]	@ (8003750 <HAL_RCC_OscConfig+0x8ac>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f0      	beq.n	8003620 <HAL_RCC_OscConfig+0x77c>
 800363e:	e082      	b.n	8003746 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003640:	4b43      	ldr	r3, [pc, #268]	@ (8003750 <HAL_RCC_OscConfig+0x8ac>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a42      	ldr	r2, [pc, #264]	@ (8003750 <HAL_RCC_OscConfig+0x8ac>)
 8003646:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800364a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364c:	f7ff f8aa 	bl	80027a4 <HAL_GetTick>
 8003650:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003654:	f7ff f8a6 	bl	80027a4 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e070      	b.n	8003748 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003666:	4b3a      	ldr	r3, [pc, #232]	@ (8003750 <HAL_RCC_OscConfig+0x8ac>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f0      	bne.n	8003654 <HAL_RCC_OscConfig+0x7b0>
 8003672:	e068      	b.n	8003746 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003674:	4b36      	ldr	r3, [pc, #216]	@ (8003750 <HAL_RCC_OscConfig+0x8ac>)
 8003676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003678:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800367a:	4b35      	ldr	r3, [pc, #212]	@ (8003750 <HAL_RCC_OscConfig+0x8ac>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003684:	2b01      	cmp	r3, #1
 8003686:	d031      	beq.n	80036ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f003 0203 	and.w	r2, r3, #3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003692:	429a      	cmp	r2, r3
 8003694:	d12a      	bne.n	80036ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d122      	bne.n	80036ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d11a      	bne.n	80036ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	0a5b      	lsrs	r3, r3, #9
 80036ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d111      	bne.n	80036ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	0c1b      	lsrs	r3, r3, #16
 80036cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d108      	bne.n	80036ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	0e1b      	lsrs	r3, r3, #24
 80036de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e02b      	b.n	8003748 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80036f0:	4b17      	ldr	r3, [pc, #92]	@ (8003750 <HAL_RCC_OscConfig+0x8ac>)
 80036f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f4:	08db      	lsrs	r3, r3, #3
 80036f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036fa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	429a      	cmp	r2, r3
 8003704:	d01f      	beq.n	8003746 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003706:	4b12      	ldr	r3, [pc, #72]	@ (8003750 <HAL_RCC_OscConfig+0x8ac>)
 8003708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370a:	4a11      	ldr	r2, [pc, #68]	@ (8003750 <HAL_RCC_OscConfig+0x8ac>)
 800370c:	f023 0301 	bic.w	r3, r3, #1
 8003710:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003712:	f7ff f847 	bl	80027a4 <HAL_GetTick>
 8003716:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003718:	bf00      	nop
 800371a:	f7ff f843 	bl	80027a4 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003722:	4293      	cmp	r3, r2
 8003724:	d0f9      	beq.n	800371a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003726:	4b0a      	ldr	r3, [pc, #40]	@ (8003750 <HAL_RCC_OscConfig+0x8ac>)
 8003728:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800372a:	4b0a      	ldr	r3, [pc, #40]	@ (8003754 <HAL_RCC_OscConfig+0x8b0>)
 800372c:	4013      	ands	r3, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003732:	00d2      	lsls	r2, r2, #3
 8003734:	4906      	ldr	r1, [pc, #24]	@ (8003750 <HAL_RCC_OscConfig+0x8ac>)
 8003736:	4313      	orrs	r3, r2
 8003738:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800373a:	4b05      	ldr	r3, [pc, #20]	@ (8003750 <HAL_RCC_OscConfig+0x8ac>)
 800373c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373e:	4a04      	ldr	r2, [pc, #16]	@ (8003750 <HAL_RCC_OscConfig+0x8ac>)
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3730      	adds	r7, #48	@ 0x30
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	58024400 	.word	0x58024400
 8003754:	ffff0007 	.word	0xffff0007

08003758 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e19c      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800376c:	4b8a      	ldr	r3, [pc, #552]	@ (8003998 <HAL_RCC_ClockConfig+0x240>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 030f 	and.w	r3, r3, #15
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d910      	bls.n	800379c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377a:	4b87      	ldr	r3, [pc, #540]	@ (8003998 <HAL_RCC_ClockConfig+0x240>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f023 020f 	bic.w	r2, r3, #15
 8003782:	4985      	ldr	r1, [pc, #532]	@ (8003998 <HAL_RCC_ClockConfig+0x240>)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	4313      	orrs	r3, r2
 8003788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800378a:	4b83      	ldr	r3, [pc, #524]	@ (8003998 <HAL_RCC_ClockConfig+0x240>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	429a      	cmp	r2, r3
 8003796:	d001      	beq.n	800379c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e184      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d010      	beq.n	80037ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	4b7b      	ldr	r3, [pc, #492]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d908      	bls.n	80037ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80037b8:	4b78      	ldr	r3, [pc, #480]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	4975      	ldr	r1, [pc, #468]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d010      	beq.n	80037f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695a      	ldr	r2, [r3, #20]
 80037da:	4b70      	ldr	r3, [pc, #448]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d908      	bls.n	80037f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80037e6:	4b6d      	ldr	r3, [pc, #436]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	496a      	ldr	r1, [pc, #424]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b00      	cmp	r3, #0
 8003802:	d010      	beq.n	8003826 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699a      	ldr	r2, [r3, #24]
 8003808:	4b64      	ldr	r3, [pc, #400]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003810:	429a      	cmp	r2, r3
 8003812:	d908      	bls.n	8003826 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003814:	4b61      	ldr	r3, [pc, #388]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	495e      	ldr	r1, [pc, #376]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 8003822:	4313      	orrs	r3, r2
 8003824:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d010      	beq.n	8003854 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69da      	ldr	r2, [r3, #28]
 8003836:	4b59      	ldr	r3, [pc, #356]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800383e:	429a      	cmp	r2, r3
 8003840:	d908      	bls.n	8003854 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003842:	4b56      	ldr	r3, [pc, #344]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	4953      	ldr	r1, [pc, #332]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 8003850:	4313      	orrs	r3, r2
 8003852:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d010      	beq.n	8003882 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	4b4d      	ldr	r3, [pc, #308]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	429a      	cmp	r2, r3
 800386e:	d908      	bls.n	8003882 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003870:	4b4a      	ldr	r3, [pc, #296]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	f023 020f 	bic.w	r2, r3, #15
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4947      	ldr	r1, [pc, #284]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 800387e:	4313      	orrs	r3, r2
 8003880:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d055      	beq.n	800393a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800388e:	4b43      	ldr	r3, [pc, #268]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	4940      	ldr	r1, [pc, #256]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 800389c:	4313      	orrs	r3, r2
 800389e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d107      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038a8:	4b3c      	ldr	r3, [pc, #240]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d121      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0f6      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d107      	bne.n	80038d0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038c0:	4b36      	ldr	r3, [pc, #216]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d115      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0ea      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d107      	bne.n	80038e8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038d8:	4b30      	ldr	r3, [pc, #192]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d109      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0de      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038e8:	4b2c      	ldr	r3, [pc, #176]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0d6      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038f8:	4b28      	ldr	r3, [pc, #160]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f023 0207 	bic.w	r2, r3, #7
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	4925      	ldr	r1, [pc, #148]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 8003906:	4313      	orrs	r3, r2
 8003908:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800390a:	f7fe ff4b 	bl	80027a4 <HAL_GetTick>
 800390e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003910:	e00a      	b.n	8003928 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003912:	f7fe ff47 	bl	80027a4 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003920:	4293      	cmp	r3, r2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e0be      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003928:	4b1c      	ldr	r3, [pc, #112]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	429a      	cmp	r2, r3
 8003938:	d1eb      	bne.n	8003912 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d010      	beq.n	8003968 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	4b14      	ldr	r3, [pc, #80]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	429a      	cmp	r2, r3
 8003954:	d208      	bcs.n	8003968 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003956:	4b11      	ldr	r3, [pc, #68]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	f023 020f 	bic.w	r2, r3, #15
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	490e      	ldr	r1, [pc, #56]	@ (800399c <HAL_RCC_ClockConfig+0x244>)
 8003964:	4313      	orrs	r3, r2
 8003966:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003968:	4b0b      	ldr	r3, [pc, #44]	@ (8003998 <HAL_RCC_ClockConfig+0x240>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d214      	bcs.n	80039a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003976:	4b08      	ldr	r3, [pc, #32]	@ (8003998 <HAL_RCC_ClockConfig+0x240>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f023 020f 	bic.w	r2, r3, #15
 800397e:	4906      	ldr	r1, [pc, #24]	@ (8003998 <HAL_RCC_ClockConfig+0x240>)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	4313      	orrs	r3, r2
 8003984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003986:	4b04      	ldr	r3, [pc, #16]	@ (8003998 <HAL_RCC_ClockConfig+0x240>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d005      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e086      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x34e>
 8003998:	52002000 	.word	0x52002000
 800399c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d010      	beq.n	80039ce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	4b3f      	ldr	r3, [pc, #252]	@ (8003ab0 <HAL_RCC_ClockConfig+0x358>)
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d208      	bcs.n	80039ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039bc:	4b3c      	ldr	r3, [pc, #240]	@ (8003ab0 <HAL_RCC_ClockConfig+0x358>)
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	4939      	ldr	r1, [pc, #228]	@ (8003ab0 <HAL_RCC_ClockConfig+0x358>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d010      	beq.n	80039fc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695a      	ldr	r2, [r3, #20]
 80039de:	4b34      	ldr	r3, [pc, #208]	@ (8003ab0 <HAL_RCC_ClockConfig+0x358>)
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d208      	bcs.n	80039fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80039ea:	4b31      	ldr	r3, [pc, #196]	@ (8003ab0 <HAL_RCC_ClockConfig+0x358>)
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	492e      	ldr	r1, [pc, #184]	@ (8003ab0 <HAL_RCC_ClockConfig+0x358>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0310 	and.w	r3, r3, #16
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d010      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699a      	ldr	r2, [r3, #24]
 8003a0c:	4b28      	ldr	r3, [pc, #160]	@ (8003ab0 <HAL_RCC_ClockConfig+0x358>)
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d208      	bcs.n	8003a2a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a18:	4b25      	ldr	r3, [pc, #148]	@ (8003ab0 <HAL_RCC_ClockConfig+0x358>)
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	4922      	ldr	r1, [pc, #136]	@ (8003ab0 <HAL_RCC_ClockConfig+0x358>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d010      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69da      	ldr	r2, [r3, #28]
 8003a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab0 <HAL_RCC_ClockConfig+0x358>)
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d208      	bcs.n	8003a58 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003a46:	4b1a      	ldr	r3, [pc, #104]	@ (8003ab0 <HAL_RCC_ClockConfig+0x358>)
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	4917      	ldr	r1, [pc, #92]	@ (8003ab0 <HAL_RCC_ClockConfig+0x358>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a58:	f000 f89e 	bl	8003b98 <HAL_RCC_GetSysClockFreq>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	4b14      	ldr	r3, [pc, #80]	@ (8003ab0 <HAL_RCC_ClockConfig+0x358>)
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	0a1b      	lsrs	r3, r3, #8
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	4912      	ldr	r1, [pc, #72]	@ (8003ab4 <HAL_RCC_ClockConfig+0x35c>)
 8003a6a:	5ccb      	ldrb	r3, [r1, r3]
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
 8003a74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a76:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab0 <HAL_RCC_ClockConfig+0x358>)
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	4a0d      	ldr	r2, [pc, #52]	@ (8003ab4 <HAL_RCC_ClockConfig+0x35c>)
 8003a80:	5cd3      	ldrb	r3, [r2, r3]
 8003a82:	f003 031f 	and.w	r3, r3, #31
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab8 <HAL_RCC_ClockConfig+0x360>)
 8003a8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a90:	4a0a      	ldr	r2, [pc, #40]	@ (8003abc <HAL_RCC_ClockConfig+0x364>)
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003a96:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac0 <HAL_RCC_ClockConfig+0x368>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe fcca 	bl	8002434 <HAL_InitTick>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	58024400 	.word	0x58024400
 8003ab4:	0800a97c 	.word	0x0800a97c
 8003ab8:	24000004 	.word	0x24000004
 8003abc:	24000000 	.word	0x24000000
 8003ac0:	24000008 	.word	0x24000008

08003ac4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08c      	sub	sp, #48	@ 0x30
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d12a      	bne.n	8003b2c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8003b8c <HAL_RCC_MCOConfig+0xc8>)
 8003ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003adc:	4a2b      	ldr	r2, [pc, #172]	@ (8003b8c <HAL_RCC_MCOConfig+0xc8>)
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003ae6:	4b29      	ldr	r3, [pc, #164]	@ (8003b8c <HAL_RCC_MCOConfig+0xc8>)
 8003ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003af4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afa:	2302      	movs	r3, #2
 8003afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003afe:	2303      	movs	r3, #3
 8003b00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003b06:	2300      	movs	r3, #0
 8003b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003b0a:	f107 031c 	add.w	r3, r7, #28
 8003b0e:	4619      	mov	r1, r3
 8003b10:	481f      	ldr	r0, [pc, #124]	@ (8003b90 <HAL_RCC_MCOConfig+0xcc>)
 8003b12:	f7fe ff75 	bl	8002a00 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003b16:	4b1d      	ldr	r3, [pc, #116]	@ (8003b8c <HAL_RCC_MCOConfig+0xc8>)
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8003b1e:	68b9      	ldr	r1, [r7, #8]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	430b      	orrs	r3, r1
 8003b24:	4919      	ldr	r1, [pc, #100]	@ (8003b8c <HAL_RCC_MCOConfig+0xc8>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8003b2a:	e02a      	b.n	8003b82 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8003b2c:	4b17      	ldr	r3, [pc, #92]	@ (8003b8c <HAL_RCC_MCOConfig+0xc8>)
 8003b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b32:	4a16      	ldr	r2, [pc, #88]	@ (8003b8c <HAL_RCC_MCOConfig+0xc8>)
 8003b34:	f043 0304 	orr.w	r3, r3, #4
 8003b38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b3c:	4b13      	ldr	r3, [pc, #76]	@ (8003b8c <HAL_RCC_MCOConfig+0xc8>)
 8003b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003b4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b50:	2302      	movs	r3, #2
 8003b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b54:	2303      	movs	r3, #3
 8003b56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003b60:	f107 031c 	add.w	r3, r7, #28
 8003b64:	4619      	mov	r1, r3
 8003b66:	480b      	ldr	r0, [pc, #44]	@ (8003b94 <HAL_RCC_MCOConfig+0xd0>)
 8003b68:	f7fe ff4a 	bl	8002a00 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003b6c:	4b07      	ldr	r3, [pc, #28]	@ (8003b8c <HAL_RCC_MCOConfig+0xc8>)
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	01d9      	lsls	r1, r3, #7
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	430b      	orrs	r3, r1
 8003b7c:	4903      	ldr	r1, [pc, #12]	@ (8003b8c <HAL_RCC_MCOConfig+0xc8>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	610b      	str	r3, [r1, #16]
}
 8003b82:	bf00      	nop
 8003b84:	3730      	adds	r7, #48	@ 0x30
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	58024400 	.word	0x58024400
 8003b90:	58020000 	.word	0x58020000
 8003b94:	58020800 	.word	0x58020800

08003b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b089      	sub	sp, #36	@ 0x24
 8003b9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b9e:	4bb3      	ldr	r3, [pc, #716]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ba6:	2b18      	cmp	r3, #24
 8003ba8:	f200 8155 	bhi.w	8003e56 <HAL_RCC_GetSysClockFreq+0x2be>
 8003bac:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb2:	bf00      	nop
 8003bb4:	08003c19 	.word	0x08003c19
 8003bb8:	08003e57 	.word	0x08003e57
 8003bbc:	08003e57 	.word	0x08003e57
 8003bc0:	08003e57 	.word	0x08003e57
 8003bc4:	08003e57 	.word	0x08003e57
 8003bc8:	08003e57 	.word	0x08003e57
 8003bcc:	08003e57 	.word	0x08003e57
 8003bd0:	08003e57 	.word	0x08003e57
 8003bd4:	08003c3f 	.word	0x08003c3f
 8003bd8:	08003e57 	.word	0x08003e57
 8003bdc:	08003e57 	.word	0x08003e57
 8003be0:	08003e57 	.word	0x08003e57
 8003be4:	08003e57 	.word	0x08003e57
 8003be8:	08003e57 	.word	0x08003e57
 8003bec:	08003e57 	.word	0x08003e57
 8003bf0:	08003e57 	.word	0x08003e57
 8003bf4:	08003c45 	.word	0x08003c45
 8003bf8:	08003e57 	.word	0x08003e57
 8003bfc:	08003e57 	.word	0x08003e57
 8003c00:	08003e57 	.word	0x08003e57
 8003c04:	08003e57 	.word	0x08003e57
 8003c08:	08003e57 	.word	0x08003e57
 8003c0c:	08003e57 	.word	0x08003e57
 8003c10:	08003e57 	.word	0x08003e57
 8003c14:	08003c4b 	.word	0x08003c4b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c18:	4b94      	ldr	r3, [pc, #592]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d009      	beq.n	8003c38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c24:	4b91      	ldr	r3, [pc, #580]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	08db      	lsrs	r3, r3, #3
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	4a90      	ldr	r2, [pc, #576]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c30:	fa22 f303 	lsr.w	r3, r2, r3
 8003c34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003c36:	e111      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003c38:	4b8d      	ldr	r3, [pc, #564]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c3a:	61bb      	str	r3, [r7, #24]
      break;
 8003c3c:	e10e      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003c3e:	4b8d      	ldr	r3, [pc, #564]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c40:	61bb      	str	r3, [r7, #24]
      break;
 8003c42:	e10b      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003c44:	4b8c      	ldr	r3, [pc, #560]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003c46:	61bb      	str	r3, [r7, #24]
      break;
 8003c48:	e108      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c4a:	4b88      	ldr	r3, [pc, #544]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003c54:	4b85      	ldr	r3, [pc, #532]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c58:	091b      	lsrs	r3, r3, #4
 8003c5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c5e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c60:	4b82      	ldr	r3, [pc, #520]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003c6a:	4b80      	ldr	r3, [pc, #512]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c6e:	08db      	lsrs	r3, r3, #3
 8003c70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	fb02 f303 	mul.w	r3, r2, r3
 8003c7a:	ee07 3a90 	vmov	s15, r3
 8003c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c82:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 80e1 	beq.w	8003e50 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	f000 8083 	beq.w	8003d9c <HAL_RCC_GetSysClockFreq+0x204>
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	f200 80a1 	bhi.w	8003de0 <HAL_RCC_GetSysClockFreq+0x248>
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <HAL_RCC_GetSysClockFreq+0x114>
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d056      	beq.n	8003d58 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003caa:	e099      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cac:	4b6f      	ldr	r3, [pc, #444]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d02d      	beq.n	8003d14 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cb8:	4b6c      	ldr	r3, [pc, #432]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	08db      	lsrs	r3, r3, #3
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	4a6b      	ldr	r2, [pc, #428]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	ee07 3a90 	vmov	s15, r3
 8003cd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	ee07 3a90 	vmov	s15, r3
 8003cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ce2:	4b62      	ldr	r3, [pc, #392]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cea:	ee07 3a90 	vmov	s15, r3
 8003cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cf6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003e7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d0e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003d12:	e087      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	ee07 3a90 	vmov	s15, r3
 8003d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d1e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003e80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d26:	4b51      	ldr	r3, [pc, #324]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d2e:	ee07 3a90 	vmov	s15, r3
 8003d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d36:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d3a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003e7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d56:	e065      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	ee07 3a90 	vmov	s15, r3
 8003d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d62:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003e84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d6a:	4b40      	ldr	r3, [pc, #256]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d72:	ee07 3a90 	vmov	s15, r3
 8003d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d7e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003e7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d9a:	e043      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	ee07 3a90 	vmov	s15, r3
 8003da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003e88 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dae:	4b2f      	ldr	r3, [pc, #188]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db6:	ee07 3a90 	vmov	s15, r3
 8003dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dc2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003e7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003dde:	e021      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003e84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003df2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e02:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e06:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003e7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e22:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003e24:	4b11      	ldr	r3, [pc, #68]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e28:	0a5b      	lsrs	r3, r3, #9
 8003e2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e2e:	3301      	adds	r3, #1
 8003e30:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	ee07 3a90 	vmov	s15, r3
 8003e38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e48:	ee17 3a90 	vmov	r3, s15
 8003e4c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003e4e:	e005      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61bb      	str	r3, [r7, #24]
      break;
 8003e54:	e002      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003e56:	4b07      	ldr	r3, [pc, #28]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e58:	61bb      	str	r3, [r7, #24]
      break;
 8003e5a:	bf00      	nop
  }

  return sysclockfreq;
 8003e5c:	69bb      	ldr	r3, [r7, #24]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3724      	adds	r7, #36	@ 0x24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	58024400 	.word	0x58024400
 8003e70:	03d09000 	.word	0x03d09000
 8003e74:	003d0900 	.word	0x003d0900
 8003e78:	017d7840 	.word	0x017d7840
 8003e7c:	46000000 	.word	0x46000000
 8003e80:	4c742400 	.word	0x4c742400
 8003e84:	4a742400 	.word	0x4a742400
 8003e88:	4bbebc20 	.word	0x4bbebc20

08003e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003e92:	f7ff fe81 	bl	8003b98 <HAL_RCC_GetSysClockFreq>
 8003e96:	4602      	mov	r2, r0
 8003e98:	4b10      	ldr	r3, [pc, #64]	@ (8003edc <HAL_RCC_GetHCLKFreq+0x50>)
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	0a1b      	lsrs	r3, r3, #8
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	490f      	ldr	r1, [pc, #60]	@ (8003ee0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003ea4:	5ccb      	ldrb	r3, [r1, r3]
 8003ea6:	f003 031f 	and.w	r3, r3, #31
 8003eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8003eae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8003edc <HAL_RCC_GetHCLKFreq+0x50>)
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	4a09      	ldr	r2, [pc, #36]	@ (8003ee0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003eba:	5cd3      	ldrb	r3, [r2, r3]
 8003ebc:	f003 031f 	and.w	r3, r3, #31
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec6:	4a07      	ldr	r2, [pc, #28]	@ (8003ee4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ec8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003eca:	4a07      	ldr	r2, [pc, #28]	@ (8003ee8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003ed0:	4b04      	ldr	r3, [pc, #16]	@ (8003ee4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	58024400 	.word	0x58024400
 8003ee0:	0800a97c 	.word	0x0800a97c
 8003ee4:	24000004 	.word	0x24000004
 8003ee8:	24000000 	.word	0x24000000

08003eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003ef0:	f7ff ffcc 	bl	8003e8c <HAL_RCC_GetHCLKFreq>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	4b06      	ldr	r3, [pc, #24]	@ (8003f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	091b      	lsrs	r3, r3, #4
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	4904      	ldr	r1, [pc, #16]	@ (8003f14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f02:	5ccb      	ldrb	r3, [r1, r3]
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	58024400 	.word	0x58024400
 8003f14:	0800a97c 	.word	0x0800a97c

08003f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003f1c:	f7ff ffb6 	bl	8003e8c <HAL_RCC_GetHCLKFreq>
 8003f20:	4602      	mov	r2, r0
 8003f22:	4b06      	ldr	r3, [pc, #24]	@ (8003f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	0a1b      	lsrs	r3, r3, #8
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	4904      	ldr	r1, [pc, #16]	@ (8003f40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f2e:	5ccb      	ldrb	r3, [r1, r3]
 8003f30:	f003 031f 	and.w	r3, r3, #31
 8003f34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	58024400 	.word	0x58024400
 8003f40:	0800a97c 	.word	0x0800a97c

08003f44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	223f      	movs	r2, #63	@ 0x3f
 8003f52:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f54:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc0 <HAL_RCC_GetClockConfig+0x7c>)
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	f003 0207 	and.w	r2, r3, #7
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003f60:	4b17      	ldr	r3, [pc, #92]	@ (8003fc0 <HAL_RCC_GetClockConfig+0x7c>)
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003f6c:	4b14      	ldr	r3, [pc, #80]	@ (8003fc0 <HAL_RCC_GetClockConfig+0x7c>)
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	f003 020f 	and.w	r2, r3, #15
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003f78:	4b11      	ldr	r3, [pc, #68]	@ (8003fc0 <HAL_RCC_GetClockConfig+0x7c>)
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003f84:	4b0e      	ldr	r3, [pc, #56]	@ (8003fc0 <HAL_RCC_GetClockConfig+0x7c>)
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003f90:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc0 <HAL_RCC_GetClockConfig+0x7c>)
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003f9c:	4b08      	ldr	r3, [pc, #32]	@ (8003fc0 <HAL_RCC_GetClockConfig+0x7c>)
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003fa8:	4b06      	ldr	r3, [pc, #24]	@ (8003fc4 <HAL_RCC_GetClockConfig+0x80>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 020f 	and.w	r2, r3, #15
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	601a      	str	r2, [r3, #0]
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	58024400 	.word	0x58024400
 8003fc4:	52002000 	.word	0x52002000

08003fc8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fcc:	b0cc      	sub	sp, #304	@ 0x130
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fe0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003fec:	2500      	movs	r5, #0
 8003fee:	ea54 0305 	orrs.w	r3, r4, r5
 8003ff2:	d049      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003ff4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ff8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ffa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ffe:	d02f      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004000:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004004:	d828      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004006:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800400a:	d01a      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800400c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004010:	d822      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004016:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800401a:	d007      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800401c:	e01c      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800401e:	4bb8      	ldr	r3, [pc, #736]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004022:	4ab7      	ldr	r2, [pc, #732]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004024:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004028:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800402a:	e01a      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800402c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004030:	3308      	adds	r3, #8
 8004032:	2102      	movs	r1, #2
 8004034:	4618      	mov	r0, r3
 8004036:	f001 fccf 	bl	80059d8 <RCCEx_PLL2_Config>
 800403a:	4603      	mov	r3, r0
 800403c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004040:	e00f      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004042:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004046:	3328      	adds	r3, #40	@ 0x28
 8004048:	2102      	movs	r1, #2
 800404a:	4618      	mov	r0, r3
 800404c:	f001 fd76 	bl	8005b3c <RCCEx_PLL3_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004056:	e004      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800405e:	e000      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004062:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10a      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800406a:	4ba5      	ldr	r3, [pc, #660]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800406c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800406e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004072:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004078:	4aa1      	ldr	r2, [pc, #644]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800407a:	430b      	orrs	r3, r1
 800407c:	6513      	str	r3, [r2, #80]	@ 0x50
 800407e:	e003      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004080:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004084:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004088:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004094:	f04f 0900 	mov.w	r9, #0
 8004098:	ea58 0309 	orrs.w	r3, r8, r9
 800409c:	d047      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800409e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d82a      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 80040a8:	a201      	add	r2, pc, #4	@ (adr r2, 80040b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80040aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ae:	bf00      	nop
 80040b0:	080040c5 	.word	0x080040c5
 80040b4:	080040d3 	.word	0x080040d3
 80040b8:	080040e9 	.word	0x080040e9
 80040bc:	08004107 	.word	0x08004107
 80040c0:	08004107 	.word	0x08004107
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040c4:	4b8e      	ldr	r3, [pc, #568]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c8:	4a8d      	ldr	r2, [pc, #564]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040d0:	e01a      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040d6:	3308      	adds	r3, #8
 80040d8:	2100      	movs	r1, #0
 80040da:	4618      	mov	r0, r3
 80040dc:	f001 fc7c 	bl	80059d8 <RCCEx_PLL2_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040e6:	e00f      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040ec:	3328      	adds	r3, #40	@ 0x28
 80040ee:	2100      	movs	r1, #0
 80040f0:	4618      	mov	r0, r3
 80040f2:	f001 fd23 	bl	8005b3c <RCCEx_PLL3_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040fc:	e004      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004104:	e000      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004106:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004108:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004110:	4b7b      	ldr	r3, [pc, #492]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004114:	f023 0107 	bic.w	r1, r3, #7
 8004118:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800411c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800411e:	4a78      	ldr	r2, [pc, #480]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004120:	430b      	orrs	r3, r1
 8004122:	6513      	str	r3, [r2, #80]	@ 0x50
 8004124:	e003      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004126:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800412a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800412e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004136:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800413a:	f04f 0b00 	mov.w	fp, #0
 800413e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004142:	d04c      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004144:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800414a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800414e:	d030      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004150:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004154:	d829      	bhi.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004156:	2bc0      	cmp	r3, #192	@ 0xc0
 8004158:	d02d      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800415a:	2bc0      	cmp	r3, #192	@ 0xc0
 800415c:	d825      	bhi.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800415e:	2b80      	cmp	r3, #128	@ 0x80
 8004160:	d018      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004162:	2b80      	cmp	r3, #128	@ 0x80
 8004164:	d821      	bhi.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800416a:	2b40      	cmp	r3, #64	@ 0x40
 800416c:	d007      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800416e:	e01c      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004170:	4b63      	ldr	r3, [pc, #396]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004174:	4a62      	ldr	r2, [pc, #392]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004176:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800417a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800417c:	e01c      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800417e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004182:	3308      	adds	r3, #8
 8004184:	2100      	movs	r1, #0
 8004186:	4618      	mov	r0, r3
 8004188:	f001 fc26 	bl	80059d8 <RCCEx_PLL2_Config>
 800418c:	4603      	mov	r3, r0
 800418e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004192:	e011      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004194:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004198:	3328      	adds	r3, #40	@ 0x28
 800419a:	2100      	movs	r1, #0
 800419c:	4618      	mov	r0, r3
 800419e:	f001 fccd 	bl	8005b3c <RCCEx_PLL3_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80041a8:	e006      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80041b0:	e002      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80041b2:	bf00      	nop
 80041b4:	e000      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80041b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10a      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80041c0:	4b4f      	ldr	r3, [pc, #316]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041c4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80041c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ce:	4a4c      	ldr	r2, [pc, #304]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041d0:	430b      	orrs	r3, r1
 80041d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80041d4:	e003      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80041da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80041de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80041ea:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80041ee:	2300      	movs	r3, #0
 80041f0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80041f4:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80041f8:	460b      	mov	r3, r1
 80041fa:	4313      	orrs	r3, r2
 80041fc:	d053      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80041fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004202:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004206:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800420a:	d035      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800420c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004210:	d82e      	bhi.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004212:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004216:	d031      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004218:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800421c:	d828      	bhi.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800421e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004222:	d01a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004224:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004228:	d822      	bhi.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800422e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004232:	d007      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004234:	e01c      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004236:	4b32      	ldr	r3, [pc, #200]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423a:	4a31      	ldr	r2, [pc, #196]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800423c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004240:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004242:	e01c      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004244:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004248:	3308      	adds	r3, #8
 800424a:	2100      	movs	r1, #0
 800424c:	4618      	mov	r0, r3
 800424e:	f001 fbc3 	bl	80059d8 <RCCEx_PLL2_Config>
 8004252:	4603      	mov	r3, r0
 8004254:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004258:	e011      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800425a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800425e:	3328      	adds	r3, #40	@ 0x28
 8004260:	2100      	movs	r1, #0
 8004262:	4618      	mov	r0, r3
 8004264:	f001 fc6a 	bl	8005b3c <RCCEx_PLL3_Config>
 8004268:	4603      	mov	r3, r0
 800426a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800426e:	e006      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004276:	e002      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004278:	bf00      	nop
 800427a:	e000      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800427c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800427e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10b      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004286:	4b1e      	ldr	r3, [pc, #120]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800428a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800428e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004292:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004296:	4a1a      	ldr	r2, [pc, #104]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004298:	430b      	orrs	r3, r1
 800429a:	6593      	str	r3, [r2, #88]	@ 0x58
 800429c:	e003      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80042a2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80042a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ae:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80042b2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80042b6:	2300      	movs	r3, #0
 80042b8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80042bc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80042c0:	460b      	mov	r3, r1
 80042c2:	4313      	orrs	r3, r2
 80042c4:	d056      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80042c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80042ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042d2:	d038      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80042d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042d8:	d831      	bhi.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80042da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042de:	d034      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80042e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042e4:	d82b      	bhi.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80042e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042ea:	d01d      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80042ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042f0:	d825      	bhi.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d006      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80042f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042fa:	d00a      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80042fc:	e01f      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80042fe:	bf00      	nop
 8004300:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004304:	4ba2      	ldr	r3, [pc, #648]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004308:	4aa1      	ldr	r2, [pc, #644]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800430a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800430e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004310:	e01c      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004312:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004316:	3308      	adds	r3, #8
 8004318:	2100      	movs	r1, #0
 800431a:	4618      	mov	r0, r3
 800431c:	f001 fb5c 	bl	80059d8 <RCCEx_PLL2_Config>
 8004320:	4603      	mov	r3, r0
 8004322:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004326:	e011      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004328:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800432c:	3328      	adds	r3, #40	@ 0x28
 800432e:	2100      	movs	r1, #0
 8004330:	4618      	mov	r0, r3
 8004332:	f001 fc03 	bl	8005b3c <RCCEx_PLL3_Config>
 8004336:	4603      	mov	r3, r0
 8004338:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800433c:	e006      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004344:	e002      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004346:	bf00      	nop
 8004348:	e000      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800434a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800434c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10b      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004354:	4b8e      	ldr	r3, [pc, #568]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004358:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800435c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004360:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004364:	4a8a      	ldr	r2, [pc, #552]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004366:	430b      	orrs	r3, r1
 8004368:	6593      	str	r3, [r2, #88]	@ 0x58
 800436a:	e003      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800436c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004370:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004374:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004380:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004384:	2300      	movs	r3, #0
 8004386:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800438a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800438e:	460b      	mov	r3, r1
 8004390:	4313      	orrs	r3, r2
 8004392:	d03a      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004394:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800439a:	2b30      	cmp	r3, #48	@ 0x30
 800439c:	d01f      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x416>
 800439e:	2b30      	cmp	r3, #48	@ 0x30
 80043a0:	d819      	bhi.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80043a2:	2b20      	cmp	r3, #32
 80043a4:	d00c      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80043a6:	2b20      	cmp	r3, #32
 80043a8:	d815      	bhi.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d019      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80043ae:	2b10      	cmp	r3, #16
 80043b0:	d111      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b2:	4b77      	ldr	r3, [pc, #476]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b6:	4a76      	ldr	r2, [pc, #472]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80043be:	e011      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043c4:	3308      	adds	r3, #8
 80043c6:	2102      	movs	r1, #2
 80043c8:	4618      	mov	r0, r3
 80043ca:	f001 fb05 	bl	80059d8 <RCCEx_PLL2_Config>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80043d4:	e006      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80043dc:	e002      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80043de:	bf00      	nop
 80043e0:	e000      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80043e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10a      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80043ec:	4b68      	ldr	r3, [pc, #416]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043f0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80043f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043fa:	4a65      	ldr	r2, [pc, #404]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043fc:	430b      	orrs	r3, r1
 80043fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004400:	e003      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004402:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004406:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800440a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800440e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004412:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004416:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800441a:	2300      	movs	r3, #0
 800441c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004420:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004424:	460b      	mov	r3, r1
 8004426:	4313      	orrs	r3, r2
 8004428:	d051      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800442a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800442e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004430:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004434:	d035      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004436:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800443a:	d82e      	bhi.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800443c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004440:	d031      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004442:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004446:	d828      	bhi.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004448:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800444c:	d01a      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800444e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004452:	d822      	bhi.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004458:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800445c:	d007      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800445e:	e01c      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004460:	4b4b      	ldr	r3, [pc, #300]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004464:	4a4a      	ldr	r2, [pc, #296]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004466:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800446a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800446c:	e01c      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800446e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004472:	3308      	adds	r3, #8
 8004474:	2100      	movs	r1, #0
 8004476:	4618      	mov	r0, r3
 8004478:	f001 faae 	bl	80059d8 <RCCEx_PLL2_Config>
 800447c:	4603      	mov	r3, r0
 800447e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004482:	e011      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004484:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004488:	3328      	adds	r3, #40	@ 0x28
 800448a:	2100      	movs	r1, #0
 800448c:	4618      	mov	r0, r3
 800448e:	f001 fb55 	bl	8005b3c <RCCEx_PLL3_Config>
 8004492:	4603      	mov	r3, r0
 8004494:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004498:	e006      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80044a0:	e002      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80044a2:	bf00      	nop
 80044a4:	e000      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80044a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10a      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80044b0:	4b37      	ldr	r3, [pc, #220]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80044b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044be:	4a34      	ldr	r2, [pc, #208]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044c0:	430b      	orrs	r3, r1
 80044c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80044c4:	e003      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80044ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80044ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80044da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80044de:	2300      	movs	r3, #0
 80044e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80044e4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4313      	orrs	r3, r2
 80044ec:	d056      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80044ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044f8:	d033      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80044fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044fe:	d82c      	bhi.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004500:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004504:	d02f      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004506:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800450a:	d826      	bhi.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800450c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004510:	d02b      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004512:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004516:	d820      	bhi.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004518:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800451c:	d012      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800451e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004522:	d81a      	bhi.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004524:	2b00      	cmp	r3, #0
 8004526:	d022      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800452c:	d115      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800452e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004532:	3308      	adds	r3, #8
 8004534:	2101      	movs	r1, #1
 8004536:	4618      	mov	r0, r3
 8004538:	f001 fa4e 	bl	80059d8 <RCCEx_PLL2_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004542:	e015      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004544:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004548:	3328      	adds	r3, #40	@ 0x28
 800454a:	2101      	movs	r1, #1
 800454c:	4618      	mov	r0, r3
 800454e:	f001 faf5 	bl	8005b3c <RCCEx_PLL3_Config>
 8004552:	4603      	mov	r3, r0
 8004554:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004558:	e00a      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004560:	e006      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004562:	bf00      	nop
 8004564:	e004      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004566:	bf00      	nop
 8004568:	e002      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800456a:	bf00      	nop
 800456c:	e000      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800456e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004570:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10d      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004578:	4b05      	ldr	r3, [pc, #20]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800457a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800457c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004580:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004584:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004586:	4a02      	ldr	r2, [pc, #8]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004588:	430b      	orrs	r3, r1
 800458a:	6513      	str	r3, [r2, #80]	@ 0x50
 800458c:	e006      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800458e:	bf00      	nop
 8004590:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004594:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004598:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800459c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80045a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045ac:	2300      	movs	r3, #0
 80045ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80045b2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80045b6:	460b      	mov	r3, r1
 80045b8:	4313      	orrs	r3, r2
 80045ba:	d055      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80045bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80045c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045c8:	d033      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80045ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045ce:	d82c      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80045d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045d4:	d02f      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80045d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045da:	d826      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80045dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045e0:	d02b      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80045e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045e6:	d820      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80045e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045ec:	d012      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80045ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045f2:	d81a      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d022      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80045f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045fc:	d115      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004602:	3308      	adds	r3, #8
 8004604:	2101      	movs	r1, #1
 8004606:	4618      	mov	r0, r3
 8004608:	f001 f9e6 	bl	80059d8 <RCCEx_PLL2_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004612:	e015      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004614:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004618:	3328      	adds	r3, #40	@ 0x28
 800461a:	2101      	movs	r1, #1
 800461c:	4618      	mov	r0, r3
 800461e:	f001 fa8d 	bl	8005b3c <RCCEx_PLL3_Config>
 8004622:	4603      	mov	r3, r0
 8004624:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004628:	e00a      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004630:	e006      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004632:	bf00      	nop
 8004634:	e004      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004636:	bf00      	nop
 8004638:	e002      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800463a:	bf00      	nop
 800463c:	e000      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800463e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004640:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10b      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004648:	4bb6      	ldr	r3, [pc, #728]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800464a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800464c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004650:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004654:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004658:	4ab2      	ldr	r2, [pc, #712]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800465a:	430b      	orrs	r3, r1
 800465c:	6593      	str	r3, [r2, #88]	@ 0x58
 800465e:	e003      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004660:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004664:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004668:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004674:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004678:	2300      	movs	r3, #0
 800467a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800467e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004682:	460b      	mov	r3, r1
 8004684:	4313      	orrs	r3, r2
 8004686:	d02a      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8004688:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800468c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800468e:	2b00      	cmp	r3, #0
 8004690:	d011      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8004692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004696:	d10a      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004698:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800469c:	3308      	adds	r3, #8
 800469e:	2101      	movs	r1, #1
 80046a0:	4618      	mov	r0, r3
 80046a2:	f001 f999 	bl	80059d8 <RCCEx_PLL2_Config>
 80046a6:	4603      	mov	r3, r0
 80046a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80046ac:	e004      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80046b4:	e000      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80046b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10a      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80046c0:	4b98      	ldr	r3, [pc, #608]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80046c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046c4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80046c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ce:	4a95      	ldr	r2, [pc, #596]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80046d0:	430b      	orrs	r3, r1
 80046d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046d4:	e003      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80046ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046ee:	2300      	movs	r3, #0
 80046f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80046f4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046f8:	460b      	mov	r3, r1
 80046fa:	4313      	orrs	r3, r2
 80046fc:	d037      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80046fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004704:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004708:	d00e      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800470a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800470e:	d816      	bhi.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x776>
 8004710:	2b00      	cmp	r3, #0
 8004712:	d018      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004714:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004718:	d111      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800471a:	4b82      	ldr	r3, [pc, #520]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800471c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471e:	4a81      	ldr	r2, [pc, #516]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004724:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004726:	e00f      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004728:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800472c:	3308      	adds	r3, #8
 800472e:	2101      	movs	r1, #1
 8004730:	4618      	mov	r0, r3
 8004732:	f001 f951 	bl	80059d8 <RCCEx_PLL2_Config>
 8004736:	4603      	mov	r3, r0
 8004738:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800473c:	e004      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004744:	e000      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8004746:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004748:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10a      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004750:	4b74      	ldr	r3, [pc, #464]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004754:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004758:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800475c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800475e:	4a71      	ldr	r2, [pc, #452]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004760:	430b      	orrs	r3, r1
 8004762:	6513      	str	r3, [r2, #80]	@ 0x50
 8004764:	e003      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004766:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800476a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800476e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004776:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800477a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800477e:	2300      	movs	r3, #0
 8004780:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004784:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004788:	460b      	mov	r3, r1
 800478a:	4313      	orrs	r3, r2
 800478c:	d03a      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800478e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004794:	2b03      	cmp	r3, #3
 8004796:	d81d      	bhi.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8004798:	a201      	add	r2, pc, #4	@ (adr r2, 80047a0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800479a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479e:	bf00      	nop
 80047a0:	080047dd 	.word	0x080047dd
 80047a4:	080047b1 	.word	0x080047b1
 80047a8:	080047bf 	.word	0x080047bf
 80047ac:	080047dd 	.word	0x080047dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047b0:	4b5c      	ldr	r3, [pc, #368]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80047b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b4:	4a5b      	ldr	r2, [pc, #364]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80047b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80047bc:	e00f      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047c2:	3308      	adds	r3, #8
 80047c4:	2102      	movs	r1, #2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f001 f906 	bl	80059d8 <RCCEx_PLL2_Config>
 80047cc:	4603      	mov	r3, r0
 80047ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80047d2:	e004      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80047da:	e000      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80047dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10a      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80047e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80047e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ea:	f023 0103 	bic.w	r1, r3, #3
 80047ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047f4:	4a4b      	ldr	r2, [pc, #300]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80047f6:	430b      	orrs	r3, r1
 80047f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047fa:	e003      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004800:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004804:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004810:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004814:	2300      	movs	r3, #0
 8004816:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800481a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800481e:	460b      	mov	r3, r1
 8004820:	4313      	orrs	r3, r2
 8004822:	f000 80a0 	beq.w	8004966 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004826:	4b40      	ldr	r3, [pc, #256]	@ (8004928 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a3f      	ldr	r2, [pc, #252]	@ (8004928 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800482c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004830:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004832:	f7fd ffb7 	bl	80027a4 <HAL_GetTick>
 8004836:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800483a:	e00b      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800483c:	f7fd ffb2 	bl	80027a4 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b64      	cmp	r3, #100	@ 0x64
 800484a:	d903      	bls.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004852:	e005      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004854:	4b34      	ldr	r3, [pc, #208]	@ (8004928 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0ed      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8004860:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004864:	2b00      	cmp	r3, #0
 8004866:	d17a      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004868:	4b2e      	ldr	r3, [pc, #184]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800486a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800486c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004870:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004874:	4053      	eors	r3, r2
 8004876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800487a:	2b00      	cmp	r3, #0
 800487c:	d015      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800487e:	4b29      	ldr	r3, [pc, #164]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004882:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004886:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800488a:	4b26      	ldr	r3, [pc, #152]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800488c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488e:	4a25      	ldr	r2, [pc, #148]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004894:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004896:	4b23      	ldr	r3, [pc, #140]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489a:	4a22      	ldr	r2, [pc, #136]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800489c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048a0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80048a2:	4a20      	ldr	r2, [pc, #128]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80048a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80048a8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80048aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80048b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048b6:	d118      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b8:	f7fd ff74 	bl	80027a4 <HAL_GetTick>
 80048bc:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048c0:	e00d      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c2:	f7fd ff6f 	bl	80027a4 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80048cc:	1ad2      	subs	r2, r2, r3
 80048ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d903      	bls.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 80048dc:	e005      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048de:	4b11      	ldr	r3, [pc, #68]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80048e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0eb      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 80048ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d130      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80048fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004902:	d115      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8004904:	4b07      	ldr	r3, [pc, #28]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800490c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004910:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004914:	091a      	lsrs	r2, r3, #4
 8004916:	4b05      	ldr	r3, [pc, #20]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004918:	4013      	ands	r3, r2
 800491a:	4a02      	ldr	r2, [pc, #8]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800491c:	430b      	orrs	r3, r1
 800491e:	6113      	str	r3, [r2, #16]
 8004920:	e00c      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x974>
 8004922:	bf00      	nop
 8004924:	58024400 	.word	0x58024400
 8004928:	58024800 	.word	0x58024800
 800492c:	00ffffcf 	.word	0x00ffffcf
 8004930:	4bd4      	ldr	r3, [pc, #848]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	4ad3      	ldr	r2, [pc, #844]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004936:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800493a:	6113      	str	r3, [r2, #16]
 800493c:	4bd1      	ldr	r3, [pc, #836]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800493e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004940:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004944:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800494c:	4acd      	ldr	r2, [pc, #820]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800494e:	430b      	orrs	r3, r1
 8004950:	6713      	str	r3, [r2, #112]	@ 0x70
 8004952:	e008      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004954:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004958:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 800495c:	e003      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004962:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004966:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800496a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496e:	f002 0301 	and.w	r3, r2, #1
 8004972:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004976:	2300      	movs	r3, #0
 8004978:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800497c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004980:	460b      	mov	r3, r1
 8004982:	4313      	orrs	r3, r2
 8004984:	f000 808b 	beq.w	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004988:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800498c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004990:	2b28      	cmp	r3, #40	@ 0x28
 8004992:	d86b      	bhi.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004994:	a201      	add	r2, pc, #4	@ (adr r2, 800499c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8004996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499a:	bf00      	nop
 800499c:	08004a75 	.word	0x08004a75
 80049a0:	08004a6d 	.word	0x08004a6d
 80049a4:	08004a6d 	.word	0x08004a6d
 80049a8:	08004a6d 	.word	0x08004a6d
 80049ac:	08004a6d 	.word	0x08004a6d
 80049b0:	08004a6d 	.word	0x08004a6d
 80049b4:	08004a6d 	.word	0x08004a6d
 80049b8:	08004a6d 	.word	0x08004a6d
 80049bc:	08004a41 	.word	0x08004a41
 80049c0:	08004a6d 	.word	0x08004a6d
 80049c4:	08004a6d 	.word	0x08004a6d
 80049c8:	08004a6d 	.word	0x08004a6d
 80049cc:	08004a6d 	.word	0x08004a6d
 80049d0:	08004a6d 	.word	0x08004a6d
 80049d4:	08004a6d 	.word	0x08004a6d
 80049d8:	08004a6d 	.word	0x08004a6d
 80049dc:	08004a57 	.word	0x08004a57
 80049e0:	08004a6d 	.word	0x08004a6d
 80049e4:	08004a6d 	.word	0x08004a6d
 80049e8:	08004a6d 	.word	0x08004a6d
 80049ec:	08004a6d 	.word	0x08004a6d
 80049f0:	08004a6d 	.word	0x08004a6d
 80049f4:	08004a6d 	.word	0x08004a6d
 80049f8:	08004a6d 	.word	0x08004a6d
 80049fc:	08004a75 	.word	0x08004a75
 8004a00:	08004a6d 	.word	0x08004a6d
 8004a04:	08004a6d 	.word	0x08004a6d
 8004a08:	08004a6d 	.word	0x08004a6d
 8004a0c:	08004a6d 	.word	0x08004a6d
 8004a10:	08004a6d 	.word	0x08004a6d
 8004a14:	08004a6d 	.word	0x08004a6d
 8004a18:	08004a6d 	.word	0x08004a6d
 8004a1c:	08004a75 	.word	0x08004a75
 8004a20:	08004a6d 	.word	0x08004a6d
 8004a24:	08004a6d 	.word	0x08004a6d
 8004a28:	08004a6d 	.word	0x08004a6d
 8004a2c:	08004a6d 	.word	0x08004a6d
 8004a30:	08004a6d 	.word	0x08004a6d
 8004a34:	08004a6d 	.word	0x08004a6d
 8004a38:	08004a6d 	.word	0x08004a6d
 8004a3c:	08004a75 	.word	0x08004a75
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a44:	3308      	adds	r3, #8
 8004a46:	2101      	movs	r1, #1
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 ffc5 	bl	80059d8 <RCCEx_PLL2_Config>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a54:	e00f      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a5a:	3328      	adds	r3, #40	@ 0x28
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f001 f86c 	bl	8005b3c <RCCEx_PLL3_Config>
 8004a64:	4603      	mov	r3, r0
 8004a66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a6a:	e004      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004a72:	e000      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8004a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a76:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10b      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004a7e:	4b81      	ldr	r3, [pc, #516]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a82:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004a86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a8e:	4a7d      	ldr	r2, [pc, #500]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004a90:	430b      	orrs	r3, r1
 8004a92:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a94:	e003      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a96:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004a9a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004a9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa6:	f002 0302 	and.w	r3, r2, #2
 8004aaa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004aae:	2300      	movs	r3, #0
 8004ab0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004ab4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4313      	orrs	r3, r2
 8004abc:	d042      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004abe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ac2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ac4:	2b05      	cmp	r3, #5
 8004ac6:	d825      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8004ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8004aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ace:	bf00      	nop
 8004ad0:	08004b1d 	.word	0x08004b1d
 8004ad4:	08004ae9 	.word	0x08004ae9
 8004ad8:	08004aff 	.word	0x08004aff
 8004adc:	08004b1d 	.word	0x08004b1d
 8004ae0:	08004b1d 	.word	0x08004b1d
 8004ae4:	08004b1d 	.word	0x08004b1d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ae8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004aec:	3308      	adds	r3, #8
 8004aee:	2101      	movs	r1, #1
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 ff71 	bl	80059d8 <RCCEx_PLL2_Config>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004afc:	e00f      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004afe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b02:	3328      	adds	r3, #40	@ 0x28
 8004b04:	2101      	movs	r1, #1
 8004b06:	4618      	mov	r0, r3
 8004b08:	f001 f818 	bl	8005b3c <RCCEx_PLL3_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b12:	e004      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004b1a:	e000      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8004b1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10a      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004b26:	4b57      	ldr	r3, [pc, #348]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2a:	f023 0107 	bic.w	r1, r3, #7
 8004b2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b34:	4a53      	ldr	r2, [pc, #332]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004b36:	430b      	orrs	r3, r1
 8004b38:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b3a:	e003      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b3c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b40:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4c:	f002 0304 	and.w	r3, r2, #4
 8004b50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b54:	2300      	movs	r3, #0
 8004b56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b5a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4313      	orrs	r3, r2
 8004b62:	d044      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004b64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b6c:	2b05      	cmp	r3, #5
 8004b6e:	d825      	bhi.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8004b70:	a201      	add	r2, pc, #4	@ (adr r2, 8004b78 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8004b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b76:	bf00      	nop
 8004b78:	08004bc5 	.word	0x08004bc5
 8004b7c:	08004b91 	.word	0x08004b91
 8004b80:	08004ba7 	.word	0x08004ba7
 8004b84:	08004bc5 	.word	0x08004bc5
 8004b88:	08004bc5 	.word	0x08004bc5
 8004b8c:	08004bc5 	.word	0x08004bc5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b94:	3308      	adds	r3, #8
 8004b96:	2101      	movs	r1, #1
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 ff1d 	bl	80059d8 <RCCEx_PLL2_Config>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004ba4:	e00f      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ba6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004baa:	3328      	adds	r3, #40	@ 0x28
 8004bac:	2101      	movs	r1, #1
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 ffc4 	bl	8005b3c <RCCEx_PLL3_Config>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004bba:	e004      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004bc2:	e000      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8004bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10b      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bce:	4b2d      	ldr	r3, [pc, #180]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd2:	f023 0107 	bic.w	r1, r3, #7
 8004bd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bde:	4a29      	ldr	r2, [pc, #164]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004be0:	430b      	orrs	r3, r1
 8004be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004be4:	e003      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004bea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	f002 0320 	and.w	r3, r2, #32
 8004bfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	d057      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004c0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c1a:	d035      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8004c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c20:	d82c      	bhi.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c26:	d031      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8004c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c2c:	d826      	bhi.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004c2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c32:	d02d      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8004c34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c38:	d820      	bhi.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004c3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c3e:	d012      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8004c40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c44:	d81a      	bhi.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d024      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8004c4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c4e:	d115      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c54:	3308      	adds	r3, #8
 8004c56:	2100      	movs	r1, #0
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 febd 	bl	80059d8 <RCCEx_PLL2_Config>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c64:	e017      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c6a:	3328      	adds	r3, #40	@ 0x28
 8004c6c:	2102      	movs	r1, #2
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 ff64 	bl	8005b3c <RCCEx_PLL3_Config>
 8004c74:	4603      	mov	r3, r0
 8004c76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c7a:	e00c      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004c82:	e008      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8004c84:	58024400 	.word	0x58024400
        break;
 8004c88:	bf00      	nop
 8004c8a:	e004      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004c8c:	bf00      	nop
 8004c8e:	e002      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004c90:	bf00      	nop
 8004c92:	e000      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c96:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10b      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c9e:	4bc2      	ldr	r3, [pc, #776]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004ca6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cae:	4abe      	ldr	r2, [pc, #760]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	6553      	str	r3, [r2, #84]	@ 0x54
 8004cb4:	e003      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004cba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004cbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004cca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004cce:	2300      	movs	r3, #0
 8004cd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004cd4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	d055      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004cde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ce2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ce6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004cea:	d033      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8004cec:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004cf0:	d82c      	bhi.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf6:	d02f      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8004cf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cfc:	d826      	bhi.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004cfe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d02:	d02b      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8004d04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d08:	d820      	bhi.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004d0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d0e:	d012      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8004d10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d14:	d81a      	bhi.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d022      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8004d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d1e:	d115      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d24:	3308      	adds	r3, #8
 8004d26:	2100      	movs	r1, #0
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fe55 	bl	80059d8 <RCCEx_PLL2_Config>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d34:	e015      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d3a:	3328      	adds	r3, #40	@ 0x28
 8004d3c:	2102      	movs	r1, #2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 fefc 	bl	8005b3c <RCCEx_PLL3_Config>
 8004d44:	4603      	mov	r3, r0
 8004d46:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d4a:	e00a      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004d52:	e006      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004d54:	bf00      	nop
 8004d56:	e004      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004d58:	bf00      	nop
 8004d5a:	e002      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004d5c:	bf00      	nop
 8004d5e:	e000      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10b      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d6a:	4b8f      	ldr	r3, [pc, #572]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d6e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004d72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004d7a:	4a8b      	ldr	r2, [pc, #556]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d80:	e003      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d86:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004d8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d92:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004d96:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004da0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004da4:	460b      	mov	r3, r1
 8004da6:	4313      	orrs	r3, r2
 8004da8:	d055      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004daa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004dae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004db2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004db6:	d033      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004db8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004dbc:	d82c      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004dbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dc2:	d02f      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004dc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dc8:	d826      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004dca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004dce:	d02b      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004dd0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004dd4:	d820      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004dd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dda:	d012      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8004ddc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004de0:	d81a      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d022      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8004de6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dea:	d115      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004df0:	3308      	adds	r3, #8
 8004df2:	2100      	movs	r1, #0
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 fdef 	bl	80059d8 <RCCEx_PLL2_Config>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e00:	e015      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e06:	3328      	adds	r3, #40	@ 0x28
 8004e08:	2102      	movs	r1, #2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 fe96 	bl	8005b3c <RCCEx_PLL3_Config>
 8004e10:	4603      	mov	r3, r0
 8004e12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e16:	e00a      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004e1e:	e006      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004e20:	bf00      	nop
 8004e22:	e004      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004e24:	bf00      	nop
 8004e26:	e002      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004e28:	bf00      	nop
 8004e2a:	e000      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10b      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004e36:	4b5c      	ldr	r3, [pc, #368]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e3a:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004e3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e46:	4a58      	ldr	r2, [pc, #352]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e4c:	e003      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e4e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e52:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004e56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5e:	f002 0308 	and.w	r3, r2, #8
 8004e62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e66:	2300      	movs	r3, #0
 8004e68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e6c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004e70:	460b      	mov	r3, r1
 8004e72:	4313      	orrs	r3, r2
 8004e74:	d01e      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004e76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e82:	d10c      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e88:	3328      	adds	r3, #40	@ 0x28
 8004e8a:	2102      	movs	r1, #2
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 fe55 	bl	8005b3c <RCCEx_PLL3_Config>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004e9e:	4b42      	ldr	r3, [pc, #264]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ea6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eae:	4a3e      	ldr	r2, [pc, #248]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004eb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebc:	f002 0310 	and.w	r3, r2, #16
 8004ec0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004eca:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	d01e      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004ed4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ed8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004edc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ee0:	d10c      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ee2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ee6:	3328      	adds	r3, #40	@ 0x28
 8004ee8:	2102      	movs	r1, #2
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fe26 	bl	8005b3c <RCCEx_PLL3_Config>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d002      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004efc:	4b2a      	ldr	r3, [pc, #168]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f00:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f0c:	4a26      	ldr	r2, [pc, #152]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f0e:	430b      	orrs	r3, r1
 8004f10:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004f1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f22:	2300      	movs	r3, #0
 8004f24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f28:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	d040      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004f32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004f3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f3e:	d022      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8004f40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f44:	d81b      	bhi.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8004f4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f4e:	d00b      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8004f50:	e015      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f56:	3308      	adds	r3, #8
 8004f58:	2100      	movs	r1, #0
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fd3c 	bl	80059d8 <RCCEx_PLL2_Config>
 8004f60:	4603      	mov	r3, r0
 8004f62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f66:	e00f      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f6c:	3328      	adds	r3, #40	@ 0x28
 8004f6e:	2102      	movs	r1, #2
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 fde3 	bl	8005b3c <RCCEx_PLL3_Config>
 8004f76:	4603      	mov	r3, r0
 8004f78:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f7c:	e004      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004f84:	e000      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8004f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f88:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10d      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f90:	4b05      	ldr	r3, [pc, #20]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f94:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004f98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004fa0:	4a01      	ldr	r2, [pc, #4]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004fa2:	430b      	orrs	r3, r1
 8004fa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fa6:	e005      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004fa8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004fb0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbc:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004fc0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004fc6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	d03b      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004fdc:	d01f      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8004fde:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004fe2:	d818      	bhi.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8004fe4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fe8:	d003      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8004fea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fee:	d007      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8004ff0:	e011      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ff2:	4b64      	ldr	r3, [pc, #400]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff6:	4a63      	ldr	r2, [pc, #396]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004ffe:	e00f      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005000:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005004:	3328      	adds	r3, #40	@ 0x28
 8005006:	2101      	movs	r1, #1
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fd97 	bl	8005b3c <RCCEx_PLL3_Config>
 800500e:	4603      	mov	r3, r0
 8005010:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005014:	e004      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800501c:	e000      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800501e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005020:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10b      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005028:	4b56      	ldr	r3, [pc, #344]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800502a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800502c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005030:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005034:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005038:	4a52      	ldr	r2, [pc, #328]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800503a:	430b      	orrs	r3, r1
 800503c:	6553      	str	r3, [r2, #84]	@ 0x54
 800503e:	e003      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005040:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005044:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005048:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005054:	673b      	str	r3, [r7, #112]	@ 0x70
 8005056:	2300      	movs	r3, #0
 8005058:	677b      	str	r3, [r7, #116]	@ 0x74
 800505a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800505e:	460b      	mov	r3, r1
 8005060:	4313      	orrs	r3, r2
 8005062:	d031      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005064:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800506e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005072:	d007      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005074:	e011      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005076:	4b43      	ldr	r3, [pc, #268]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507a:	4a42      	ldr	r2, [pc, #264]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800507c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005080:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005082:	e00e      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005084:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005088:	3308      	adds	r3, #8
 800508a:	2102      	movs	r1, #2
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fca3 	bl	80059d8 <RCCEx_PLL2_Config>
 8005092:	4603      	mov	r3, r0
 8005094:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005098:	e003      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80050a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10a      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80050aa:	4b36      	ldr	r3, [pc, #216]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80050ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80050b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b8:	4a32      	ldr	r2, [pc, #200]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80050ba:	430b      	orrs	r3, r1
 80050bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050be:	e003      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80050c4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80050c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80050d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050d6:	2300      	movs	r3, #0
 80050d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050da:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80050de:	460b      	mov	r3, r1
 80050e0:	4313      	orrs	r3, r2
 80050e2:	d00c      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80050e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050e8:	3328      	adds	r3, #40	@ 0x28
 80050ea:	2102      	movs	r1, #2
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 fd25 	bl	8005b3c <RCCEx_PLL3_Config>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d002      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80050fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005106:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800510a:	663b      	str	r3, [r7, #96]	@ 0x60
 800510c:	2300      	movs	r3, #0
 800510e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005110:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005114:	460b      	mov	r3, r1
 8005116:	4313      	orrs	r3, r2
 8005118:	d03a      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800511a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800511e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005122:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005126:	d018      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8005128:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800512c:	d811      	bhi.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800512e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005132:	d014      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8005134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005138:	d80b      	bhi.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800513a:	2b00      	cmp	r3, #0
 800513c:	d011      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800513e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005142:	d106      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005144:	4b0f      	ldr	r3, [pc, #60]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005148:	4a0e      	ldr	r2, [pc, #56]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800514a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800514e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005150:	e008      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005158:	e004      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800515a:	bf00      	nop
 800515c:	e002      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800515e:	bf00      	nop
 8005160:	e000      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005164:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10d      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800516c:	4b05      	ldr	r3, [pc, #20]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800516e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005170:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005174:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800517c:	4a01      	ldr	r2, [pc, #4]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800517e:	430b      	orrs	r3, r1
 8005180:	6553      	str	r3, [r2, #84]	@ 0x54
 8005182:	e005      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8005184:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005188:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800518c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005190:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005198:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800519c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800519e:	2300      	movs	r3, #0
 80051a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80051a6:	460b      	mov	r3, r1
 80051a8:	4313      	orrs	r3, r2
 80051aa:	d009      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051ac:	4baa      	ldr	r3, [pc, #680]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80051ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80051b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051ba:	4aa7      	ldr	r2, [pc, #668]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80051bc:	430b      	orrs	r3, r1
 80051be:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80051c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80051cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80051ce:	2300      	movs	r3, #0
 80051d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80051d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80051d6:	460b      	mov	r3, r1
 80051d8:	4313      	orrs	r3, r2
 80051da:	d00a      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80051dc:	4b9e      	ldr	r3, [pc, #632]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80051e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80051ec:	4a9a      	ldr	r2, [pc, #616]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80051ee:	430b      	orrs	r3, r1
 80051f0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80051fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005200:	2300      	movs	r3, #0
 8005202:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005204:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005208:	460b      	mov	r3, r1
 800520a:	4313      	orrs	r3, r2
 800520c:	d009      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800520e:	4b92      	ldr	r3, [pc, #584]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005212:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005216:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800521a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800521c:	4a8e      	ldr	r2, [pc, #568]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800521e:	430b      	orrs	r3, r1
 8005220:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005222:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800522e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005230:	2300      	movs	r3, #0
 8005232:	647b      	str	r3, [r7, #68]	@ 0x44
 8005234:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005238:	460b      	mov	r3, r1
 800523a:	4313      	orrs	r3, r2
 800523c:	d00e      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800523e:	4b86      	ldr	r3, [pc, #536]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	4a85      	ldr	r2, [pc, #532]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005244:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005248:	6113      	str	r3, [r2, #16]
 800524a:	4b83      	ldr	r3, [pc, #524]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800524c:	6919      	ldr	r1, [r3, #16]
 800524e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005252:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005256:	4a80      	ldr	r2, [pc, #512]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005258:	430b      	orrs	r3, r1
 800525a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800525c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005268:	63bb      	str	r3, [r7, #56]	@ 0x38
 800526a:	2300      	movs	r3, #0
 800526c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800526e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005272:	460b      	mov	r3, r1
 8005274:	4313      	orrs	r3, r2
 8005276:	d009      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005278:	4b77      	ldr	r3, [pc, #476]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800527a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800527c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005280:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005286:	4a74      	ldr	r2, [pc, #464]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005288:	430b      	orrs	r3, r1
 800528a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800528c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005294:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005298:	633b      	str	r3, [r7, #48]	@ 0x30
 800529a:	2300      	movs	r3, #0
 800529c:	637b      	str	r3, [r7, #52]	@ 0x34
 800529e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80052a2:	460b      	mov	r3, r1
 80052a4:	4313      	orrs	r3, r2
 80052a6:	d00a      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052a8:	4b6b      	ldr	r3, [pc, #428]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80052aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ac:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80052b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b8:	4a67      	ldr	r2, [pc, #412]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80052ba:	430b      	orrs	r3, r1
 80052bc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80052be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c6:	2100      	movs	r1, #0
 80052c8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052d0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80052d4:	460b      	mov	r3, r1
 80052d6:	4313      	orrs	r3, r2
 80052d8:	d011      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052de:	3308      	adds	r3, #8
 80052e0:	2100      	movs	r1, #0
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fb78 	bl	80059d8 <RCCEx_PLL2_Config>
 80052e8:	4603      	mov	r3, r0
 80052ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80052ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80052fa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80052fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005306:	2100      	movs	r1, #0
 8005308:	6239      	str	r1, [r7, #32]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005310:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005314:	460b      	mov	r3, r1
 8005316:	4313      	orrs	r3, r2
 8005318:	d011      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800531a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800531e:	3308      	adds	r3, #8
 8005320:	2101      	movs	r1, #1
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fb58 	bl	80059d8 <RCCEx_PLL2_Config>
 8005328:	4603      	mov	r3, r0
 800532a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800532e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005336:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800533a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800533e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005346:	2100      	movs	r1, #0
 8005348:	61b9      	str	r1, [r7, #24]
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	61fb      	str	r3, [r7, #28]
 8005350:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005354:	460b      	mov	r3, r1
 8005356:	4313      	orrs	r3, r2
 8005358:	d011      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800535a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800535e:	3308      	adds	r3, #8
 8005360:	2102      	movs	r1, #2
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fb38 	bl	80059d8 <RCCEx_PLL2_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800536e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005376:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800537a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800537e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	2100      	movs	r1, #0
 8005388:	6139      	str	r1, [r7, #16]
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005394:	460b      	mov	r3, r1
 8005396:	4313      	orrs	r3, r2
 8005398:	d011      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800539a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800539e:	3328      	adds	r3, #40	@ 0x28
 80053a0:	2100      	movs	r1, #0
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 fbca 	bl	8005b3c <RCCEx_PLL3_Config>
 80053a8:	4603      	mov	r3, r0
 80053aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80053ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053ba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80053be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c6:	2100      	movs	r1, #0
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	f003 0310 	and.w	r3, r3, #16
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80053d4:	460b      	mov	r3, r1
 80053d6:	4313      	orrs	r3, r2
 80053d8:	d011      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053de:	3328      	adds	r3, #40	@ 0x28
 80053e0:	2101      	movs	r1, #1
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fbaa 	bl	8005b3c <RCCEx_PLL3_Config>
 80053e8:	4603      	mov	r3, r0
 80053ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80053ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053fa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80053fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005406:	2100      	movs	r1, #0
 8005408:	6039      	str	r1, [r7, #0]
 800540a:	f003 0320 	and.w	r3, r3, #32
 800540e:	607b      	str	r3, [r7, #4]
 8005410:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005414:	460b      	mov	r3, r1
 8005416:	4313      	orrs	r3, r2
 8005418:	d011      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800541a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800541e:	3328      	adds	r3, #40	@ 0x28
 8005420:	2102      	movs	r1, #2
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fb8a 	bl	8005b3c <RCCEx_PLL3_Config>
 8005428:	4603      	mov	r3, r0
 800542a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800542e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005436:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800543a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 800543e:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8005446:	2300      	movs	r3, #0
 8005448:	e000      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
}
 800544c:	4618      	mov	r0, r3
 800544e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005452:	46bd      	mov	sp, r7
 8005454:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005458:	58024400 	.word	0x58024400

0800545c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005460:	f7fe fd14 	bl	8003e8c <HAL_RCC_GetHCLKFreq>
 8005464:	4602      	mov	r2, r0
 8005466:	4b06      	ldr	r3, [pc, #24]	@ (8005480 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	091b      	lsrs	r3, r3, #4
 800546c:	f003 0307 	and.w	r3, r3, #7
 8005470:	4904      	ldr	r1, [pc, #16]	@ (8005484 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005472:	5ccb      	ldrb	r3, [r1, r3]
 8005474:	f003 031f 	and.w	r3, r3, #31
 8005478:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800547c:	4618      	mov	r0, r3
 800547e:	bd80      	pop	{r7, pc}
 8005480:	58024400 	.word	0x58024400
 8005484:	0800a97c 	.word	0x0800a97c

08005488 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005488:	b480      	push	{r7}
 800548a:	b089      	sub	sp, #36	@ 0x24
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005490:	4ba1      	ldr	r3, [pc, #644]	@ (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005494:	f003 0303 	and.w	r3, r3, #3
 8005498:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800549a:	4b9f      	ldr	r3, [pc, #636]	@ (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800549c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800549e:	0b1b      	lsrs	r3, r3, #12
 80054a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80054a6:	4b9c      	ldr	r3, [pc, #624]	@ (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054aa:	091b      	lsrs	r3, r3, #4
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80054b2:	4b99      	ldr	r3, [pc, #612]	@ (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b6:	08db      	lsrs	r3, r3, #3
 80054b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	fb02 f303 	mul.w	r3, r2, r3
 80054c2:	ee07 3a90 	vmov	s15, r3
 80054c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 8111 	beq.w	80056f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b02      	cmp	r3, #2
 80054da:	f000 8083 	beq.w	80055e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	f200 80a1 	bhi.w	8005628 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d056      	beq.n	80055a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80054f2:	e099      	b.n	8005628 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054f4:	4b88      	ldr	r3, [pc, #544]	@ (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d02d      	beq.n	800555c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005500:	4b85      	ldr	r3, [pc, #532]	@ (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	08db      	lsrs	r3, r3, #3
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	4a84      	ldr	r2, [pc, #528]	@ (800571c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800550c:	fa22 f303 	lsr.w	r3, r2, r3
 8005510:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	ee07 3a90 	vmov	s15, r3
 8005518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	ee07 3a90 	vmov	s15, r3
 8005522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800552a:	4b7b      	ldr	r3, [pc, #492]	@ (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800552c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800552e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005532:	ee07 3a90 	vmov	s15, r3
 8005536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800553a:	ed97 6a03 	vldr	s12, [r7, #12]
 800553e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005720 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800554a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800554e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005556:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800555a:	e087      	b.n	800566c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	ee07 3a90 	vmov	s15, r3
 8005562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005566:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005724 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800556a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800556e:	4b6a      	ldr	r3, [pc, #424]	@ (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005576:	ee07 3a90 	vmov	s15, r3
 800557a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800557e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005582:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005720 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800558a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800558e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800559a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800559e:	e065      	b.n	800566c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	ee07 3a90 	vmov	s15, r3
 80055a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80055ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055b2:	4b59      	ldr	r3, [pc, #356]	@ (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ba:	ee07 3a90 	vmov	s15, r3
 80055be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005720 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055e2:	e043      	b.n	800566c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	ee07 3a90 	vmov	s15, r3
 80055ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800572c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80055f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055f6:	4b48      	ldr	r3, [pc, #288]	@ (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005606:	ed97 6a03 	vldr	s12, [r7, #12]
 800560a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005720 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800560e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005616:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800561a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800561e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005622:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005626:	e021      	b.n	800566c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005632:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800563a:	4b37      	ldr	r3, [pc, #220]	@ (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800563c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800564a:	ed97 6a03 	vldr	s12, [r7, #12]
 800564e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005720 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800565a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800565e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005666:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800566a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800566c:	4b2a      	ldr	r3, [pc, #168]	@ (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800566e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005670:	0a5b      	lsrs	r3, r3, #9
 8005672:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005676:	ee07 3a90 	vmov	s15, r3
 800567a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005682:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005686:	edd7 6a07 	vldr	s13, [r7, #28]
 800568a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800568e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005692:	ee17 2a90 	vmov	r2, s15
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800569a:	4b1f      	ldr	r3, [pc, #124]	@ (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800569c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569e:	0c1b      	lsrs	r3, r3, #16
 80056a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056a4:	ee07 3a90 	vmov	s15, r3
 80056a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80056b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056c0:	ee17 2a90 	vmov	r2, s15
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80056c8:	4b13      	ldr	r3, [pc, #76]	@ (8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056cc:	0e1b      	lsrs	r3, r3, #24
 80056ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056d2:	ee07 3a90 	vmov	s15, r3
 80056d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80056e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056ee:	ee17 2a90 	vmov	r2, s15
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80056f6:	e008      	b.n	800570a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	609a      	str	r2, [r3, #8]
}
 800570a:	bf00      	nop
 800570c:	3724      	adds	r7, #36	@ 0x24
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	58024400 	.word	0x58024400
 800571c:	03d09000 	.word	0x03d09000
 8005720:	46000000 	.word	0x46000000
 8005724:	4c742400 	.word	0x4c742400
 8005728:	4a742400 	.word	0x4a742400
 800572c:	4bbebc20 	.word	0x4bbebc20

08005730 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005730:	b480      	push	{r7}
 8005732:	b089      	sub	sp, #36	@ 0x24
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005738:	4ba1      	ldr	r3, [pc, #644]	@ (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800573a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800573c:	f003 0303 	and.w	r3, r3, #3
 8005740:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005742:	4b9f      	ldr	r3, [pc, #636]	@ (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005746:	0d1b      	lsrs	r3, r3, #20
 8005748:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800574c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800574e:	4b9c      	ldr	r3, [pc, #624]	@ (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005752:	0a1b      	lsrs	r3, r3, #8
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800575a:	4b99      	ldr	r3, [pc, #612]	@ (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800575c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800575e:	08db      	lsrs	r3, r3, #3
 8005760:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	fb02 f303 	mul.w	r3, r2, r3
 800576a:	ee07 3a90 	vmov	s15, r3
 800576e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005772:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 8111 	beq.w	80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	2b02      	cmp	r3, #2
 8005782:	f000 8083 	beq.w	800588c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	2b02      	cmp	r3, #2
 800578a:	f200 80a1 	bhi.w	80058d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d056      	beq.n	8005848 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800579a:	e099      	b.n	80058d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800579c:	4b88      	ldr	r3, [pc, #544]	@ (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d02d      	beq.n	8005804 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057a8:	4b85      	ldr	r3, [pc, #532]	@ (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	08db      	lsrs	r3, r3, #3
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	4a84      	ldr	r2, [pc, #528]	@ (80059c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80057b4:	fa22 f303 	lsr.w	r3, r2, r3
 80057b8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	ee07 3a90 	vmov	s15, r3
 80057c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057d2:	4b7b      	ldr	r3, [pc, #492]	@ (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057da:	ee07 3a90 	vmov	s15, r3
 80057de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80059c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005802:	e087      	b.n	8005914 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	ee07 3a90 	vmov	s15, r3
 800580a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800580e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80059cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005816:	4b6a      	ldr	r3, [pc, #424]	@ (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005826:	ed97 6a03 	vldr	s12, [r7, #12]
 800582a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80059c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800582e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800583a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800583e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005842:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005846:	e065      	b.n	8005914 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	ee07 3a90 	vmov	s15, r3
 800584e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005852:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80059d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800585a:	4b59      	ldr	r3, [pc, #356]	@ (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800585c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005862:	ee07 3a90 	vmov	s15, r3
 8005866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800586a:	ed97 6a03 	vldr	s12, [r7, #12]
 800586e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80059c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800587a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800587e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005886:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800588a:	e043      	b.n	8005914 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	ee07 3a90 	vmov	s15, r3
 8005892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005896:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80059d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800589a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800589e:	4b48      	ldr	r3, [pc, #288]	@ (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80058b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80059c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058ce:	e021      	b.n	8005914 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	ee07 3a90 	vmov	s15, r3
 80058d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80059d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80058de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058e2:	4b37      	ldr	r3, [pc, #220]	@ (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80058f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80059c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800590a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005912:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005914:	4b2a      	ldr	r3, [pc, #168]	@ (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005918:	0a5b      	lsrs	r3, r3, #9
 800591a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005926:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800592a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800592e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800593a:	ee17 2a90 	vmov	r2, s15
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005942:	4b1f      	ldr	r3, [pc, #124]	@ (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005946:	0c1b      	lsrs	r3, r3, #16
 8005948:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800594c:	ee07 3a90 	vmov	s15, r3
 8005950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005954:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005958:	ee37 7a87 	vadd.f32	s14, s15, s14
 800595c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005968:	ee17 2a90 	vmov	r2, s15
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005970:	4b13      	ldr	r3, [pc, #76]	@ (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005974:	0e1b      	lsrs	r3, r3, #24
 8005976:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800597a:	ee07 3a90 	vmov	s15, r3
 800597e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005982:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005986:	ee37 7a87 	vadd.f32	s14, s15, s14
 800598a:	edd7 6a07 	vldr	s13, [r7, #28]
 800598e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005996:	ee17 2a90 	vmov	r2, s15
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800599e:	e008      	b.n	80059b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	609a      	str	r2, [r3, #8]
}
 80059b2:	bf00      	nop
 80059b4:	3724      	adds	r7, #36	@ 0x24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	58024400 	.word	0x58024400
 80059c4:	03d09000 	.word	0x03d09000
 80059c8:	46000000 	.word	0x46000000
 80059cc:	4c742400 	.word	0x4c742400
 80059d0:	4a742400 	.word	0x4a742400
 80059d4:	4bbebc20 	.word	0x4bbebc20

080059d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059e6:	4b53      	ldr	r3, [pc, #332]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 80059e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ea:	f003 0303 	and.w	r3, r3, #3
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	d101      	bne.n	80059f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e099      	b.n	8005b2a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80059f6:	4b4f      	ldr	r3, [pc, #316]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a4e      	ldr	r2, [pc, #312]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 80059fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a02:	f7fc fecf 	bl	80027a4 <HAL_GetTick>
 8005a06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a08:	e008      	b.n	8005a1c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a0a:	f7fc fecb 	bl	80027a4 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e086      	b.n	8005b2a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a1c:	4b45      	ldr	r3, [pc, #276]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1f0      	bne.n	8005a0a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005a28:	4b42      	ldr	r3, [pc, #264]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	031b      	lsls	r3, r3, #12
 8005a36:	493f      	ldr	r1, [pc, #252]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	628b      	str	r3, [r1, #40]	@ 0x28
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	3b01      	subs	r3, #1
 8005a42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	025b      	lsls	r3, r3, #9
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	431a      	orrs	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	041b      	lsls	r3, r3, #16
 8005a5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	3b01      	subs	r3, #1
 8005a66:	061b      	lsls	r3, r3, #24
 8005a68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005a6c:	4931      	ldr	r1, [pc, #196]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005a72:	4b30      	ldr	r3, [pc, #192]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a76:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	492d      	ldr	r1, [pc, #180]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005a84:	4b2b      	ldr	r3, [pc, #172]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a88:	f023 0220 	bic.w	r2, r3, #32
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	4928      	ldr	r1, [pc, #160]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005a96:	4b27      	ldr	r3, [pc, #156]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9a:	4a26      	ldr	r2, [pc, #152]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005a9c:	f023 0310 	bic.w	r3, r3, #16
 8005aa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005aa2:	4b24      	ldr	r3, [pc, #144]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005aa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005aa6:	4b24      	ldr	r3, [pc, #144]	@ (8005b38 <RCCEx_PLL2_Config+0x160>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	69d2      	ldr	r2, [r2, #28]
 8005aae:	00d2      	lsls	r2, r2, #3
 8005ab0:	4920      	ldr	r1, [pc, #128]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aba:	4a1e      	ldr	r2, [pc, #120]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005abc:	f043 0310 	orr.w	r3, r3, #16
 8005ac0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d106      	bne.n	8005ad6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005acc:	4a19      	ldr	r2, [pc, #100]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005ace:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ad2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005ad4:	e00f      	b.n	8005af6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d106      	bne.n	8005aea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005adc:	4b15      	ldr	r3, [pc, #84]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae0:	4a14      	ldr	r2, [pc, #80]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005ae2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ae6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005ae8:	e005      	b.n	8005af6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005aea:	4b12      	ldr	r3, [pc, #72]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aee:	4a11      	ldr	r2, [pc, #68]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005af0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005af4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005af6:	4b0f      	ldr	r3, [pc, #60]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a0e      	ldr	r2, [pc, #56]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005afc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b02:	f7fc fe4f 	bl	80027a4 <HAL_GetTick>
 8005b06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b08:	e008      	b.n	8005b1c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005b0a:	f7fc fe4b 	bl	80027a4 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d901      	bls.n	8005b1c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e006      	b.n	8005b2a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b1c:	4b05      	ldr	r3, [pc, #20]	@ (8005b34 <RCCEx_PLL2_Config+0x15c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0f0      	beq.n	8005b0a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	58024400 	.word	0x58024400
 8005b38:	ffff0007 	.word	0xffff0007

08005b3c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b46:	2300      	movs	r3, #0
 8005b48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b4a:	4b53      	ldr	r3, [pc, #332]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d101      	bne.n	8005b5a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e099      	b.n	8005c8e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005b5a:	4b4f      	ldr	r3, [pc, #316]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a4e      	ldr	r2, [pc, #312]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005b60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b66:	f7fc fe1d 	bl	80027a4 <HAL_GetTick>
 8005b6a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b6c:	e008      	b.n	8005b80 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b6e:	f7fc fe19 	bl	80027a4 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d901      	bls.n	8005b80 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e086      	b.n	8005c8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b80:	4b45      	ldr	r3, [pc, #276]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1f0      	bne.n	8005b6e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005b8c:	4b42      	ldr	r3, [pc, #264]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b90:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	051b      	lsls	r3, r3, #20
 8005b9a:	493f      	ldr	r1, [pc, #252]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	025b      	lsls	r3, r3, #9
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	041b      	lsls	r3, r3, #16
 8005bbe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	061b      	lsls	r3, r3, #24
 8005bcc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005bd0:	4931      	ldr	r1, [pc, #196]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005bd6:	4b30      	ldr	r3, [pc, #192]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bda:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	492d      	ldr	r1, [pc, #180]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005be8:	4b2b      	ldr	r3, [pc, #172]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	4928      	ldr	r1, [pc, #160]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005bfa:	4b27      	ldr	r3, [pc, #156]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfe:	4a26      	ldr	r2, [pc, #152]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005c06:	4b24      	ldr	r3, [pc, #144]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c0a:	4b24      	ldr	r3, [pc, #144]	@ (8005c9c <RCCEx_PLL3_Config+0x160>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	69d2      	ldr	r2, [r2, #28]
 8005c12:	00d2      	lsls	r2, r2, #3
 8005c14:	4920      	ldr	r1, [pc, #128]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1e:	4a1e      	ldr	r2, [pc, #120]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d106      	bne.n	8005c3a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c30:	4a19      	ldr	r2, [pc, #100]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005c36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005c38:	e00f      	b.n	8005c5a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d106      	bne.n	8005c4e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005c40:	4b15      	ldr	r3, [pc, #84]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c44:	4a14      	ldr	r2, [pc, #80]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005c4c:	e005      	b.n	8005c5a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005c4e:	4b12      	ldr	r3, [pc, #72]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c52:	4a11      	ldr	r2, [pc, #68]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a0e      	ldr	r2, [pc, #56]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c66:	f7fc fd9d 	bl	80027a4 <HAL_GetTick>
 8005c6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c6c:	e008      	b.n	8005c80 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c6e:	f7fc fd99 	bl	80027a4 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d901      	bls.n	8005c80 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e006      	b.n	8005c8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c80:	4b05      	ldr	r3, [pc, #20]	@ (8005c98 <RCCEx_PLL3_Config+0x15c>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d0f0      	beq.n	8005c6e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	58024400 	.word	0x58024400
 8005c9c:	ffff0007 	.word	0xffff0007

08005ca0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e10f      	b.n	8005ed2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a87      	ldr	r2, [pc, #540]	@ (8005edc <HAL_SPI_Init+0x23c>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00f      	beq.n	8005ce2 <HAL_SPI_Init+0x42>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a86      	ldr	r2, [pc, #536]	@ (8005ee0 <HAL_SPI_Init+0x240>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d00a      	beq.n	8005ce2 <HAL_SPI_Init+0x42>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a84      	ldr	r2, [pc, #528]	@ (8005ee4 <HAL_SPI_Init+0x244>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d005      	beq.n	8005ce2 <HAL_SPI_Init+0x42>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	2b0f      	cmp	r3, #15
 8005cdc:	d901      	bls.n	8005ce2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e0f7      	b.n	8005ed2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fef6 	bl	8006ad4 <SPI_GetPacketSize>
 8005ce8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a7b      	ldr	r2, [pc, #492]	@ (8005edc <HAL_SPI_Init+0x23c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d00c      	beq.n	8005d0e <HAL_SPI_Init+0x6e>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a79      	ldr	r2, [pc, #484]	@ (8005ee0 <HAL_SPI_Init+0x240>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d007      	beq.n	8005d0e <HAL_SPI_Init+0x6e>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a78      	ldr	r2, [pc, #480]	@ (8005ee4 <HAL_SPI_Init+0x244>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d002      	beq.n	8005d0e <HAL_SPI_Init+0x6e>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b08      	cmp	r3, #8
 8005d0c:	d811      	bhi.n	8005d32 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005d12:	4a72      	ldr	r2, [pc, #456]	@ (8005edc <HAL_SPI_Init+0x23c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d009      	beq.n	8005d2c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a70      	ldr	r2, [pc, #448]	@ (8005ee0 <HAL_SPI_Init+0x240>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d004      	beq.n	8005d2c <HAL_SPI_Init+0x8c>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a6f      	ldr	r2, [pc, #444]	@ (8005ee4 <HAL_SPI_Init+0x244>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d104      	bne.n	8005d36 <HAL_SPI_Init+0x96>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2b10      	cmp	r3, #16
 8005d30:	d901      	bls.n	8005d36 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e0cd      	b.n	8005ed2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d106      	bne.n	8005d50 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7fc f994 	bl	8002078 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f022 0201 	bic.w	r2, r2, #1
 8005d66:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005d72:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d7c:	d119      	bne.n	8005db2 <HAL_SPI_Init+0x112>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d86:	d103      	bne.n	8005d90 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d008      	beq.n	8005da2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10c      	bne.n	8005db2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005d9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005da0:	d107      	bne.n	8005db2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005db0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00f      	beq.n	8005dde <HAL_SPI_Init+0x13e>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	2b06      	cmp	r3, #6
 8005dc4:	d90b      	bls.n	8005dde <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	e007      	b.n	8005dee <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005dec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	69da      	ldr	r2, [r3, #28]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df6:	431a      	orrs	r2, r3
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e00:	ea42 0103 	orr.w	r1, r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68da      	ldr	r2, [r3, #12]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	431a      	orrs	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	431a      	orrs	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e4e:	ea42 0103 	orr.w	r1, r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d113      	bne.n	8005e8e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e78:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e8c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0201 	bic.w	r2, r2, #1
 8005e9c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	40013000 	.word	0x40013000
 8005ee0:	40003800 	.word	0x40003800
 8005ee4:	40003c00 	.word	0x40003c00

08005ee8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b088      	sub	sp, #32
 8005eec:	af02      	add	r7, sp, #8
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	603b      	str	r3, [r7, #0]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3320      	adds	r3, #32
 8005efe:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f00:	f7fc fc50 	bl	80027a4 <HAL_GetTick>
 8005f04:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d001      	beq.n	8005f16 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005f12:	2302      	movs	r3, #2
 8005f14:	e1d1      	b.n	80062ba <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d002      	beq.n	8005f22 <HAL_SPI_Transmit+0x3a>
 8005f1c:	88fb      	ldrh	r3, [r7, #6]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e1c9      	b.n	80062ba <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d101      	bne.n	8005f34 <HAL_SPI_Transmit+0x4c>
 8005f30:	2302      	movs	r3, #2
 8005f32:	e1c2      	b.n	80062ba <HAL_SPI_Transmit+0x3d2>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2203      	movs	r2, #3
 8005f40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	88fa      	ldrh	r2, [r7, #6]
 8005f56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	88fa      	ldrh	r2, [r7, #6]
 8005f5e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005f8c:	d108      	bne.n	8005fa0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	e009      	b.n	8005fb4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005fb2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	4b96      	ldr	r3, [pc, #600]	@ (8006214 <HAL_SPI_Transmit+0x32c>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	88f9      	ldrh	r1, [r7, #6]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	6812      	ldr	r2, [r2, #0]
 8005fc4:	430b      	orrs	r3, r1
 8005fc6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0201 	orr.w	r2, r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fe0:	d107      	bne.n	8005ff2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ff0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	2b0f      	cmp	r3, #15
 8005ff8:	d947      	bls.n	800608a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005ffa:	e03f      	b.n	800607c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b02      	cmp	r3, #2
 8006008:	d114      	bne.n	8006034 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6812      	ldr	r2, [r2, #0]
 8006014:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800601a:	1d1a      	adds	r2, r3, #4
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006026:	b29b      	uxth	r3, r3
 8006028:	3b01      	subs	r3, #1
 800602a:	b29a      	uxth	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006032:	e023      	b.n	800607c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006034:	f7fc fbb6 	bl	80027a4 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	d803      	bhi.n	800604c <HAL_SPI_Transmit+0x164>
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604a:	d102      	bne.n	8006052 <HAL_SPI_Transmit+0x16a>
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d114      	bne.n	800607c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 fc70 	bl	8006938 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800605e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e11e      	b.n	80062ba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1b9      	bne.n	8005ffc <HAL_SPI_Transmit+0x114>
 8006088:	e0f1      	b.n	800626e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	2b07      	cmp	r3, #7
 8006090:	f240 80e6 	bls.w	8006260 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006094:	e05d      	b.n	8006152 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d132      	bne.n	800610a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d918      	bls.n	80060e2 <HAL_SPI_Transmit+0x1fa>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d014      	beq.n	80060e2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6812      	ldr	r2, [r2, #0]
 80060c2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060c8:	1d1a      	adds	r2, r3, #4
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	3b02      	subs	r3, #2
 80060d8:	b29a      	uxth	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80060e0:	e037      	b.n	8006152 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e6:	881a      	ldrh	r2, [r3, #0]
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060f0:	1c9a      	adds	r2, r3, #2
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	3b01      	subs	r3, #1
 8006100:	b29a      	uxth	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006108:	e023      	b.n	8006152 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800610a:	f7fc fb4b 	bl	80027a4 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	429a      	cmp	r2, r3
 8006118:	d803      	bhi.n	8006122 <HAL_SPI_Transmit+0x23a>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006120:	d102      	bne.n	8006128 <HAL_SPI_Transmit+0x240>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d114      	bne.n	8006152 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 fc05 	bl	8006938 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006134:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e0b3      	b.n	80062ba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006158:	b29b      	uxth	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d19b      	bne.n	8006096 <HAL_SPI_Transmit+0x1ae>
 800615e:	e086      	b.n	800626e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b02      	cmp	r3, #2
 800616c:	d154      	bne.n	8006218 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006174:	b29b      	uxth	r3, r3
 8006176:	2b03      	cmp	r3, #3
 8006178:	d918      	bls.n	80061ac <HAL_SPI_Transmit+0x2c4>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800617e:	2b40      	cmp	r3, #64	@ 0x40
 8006180:	d914      	bls.n	80061ac <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6812      	ldr	r2, [r2, #0]
 800618c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006192:	1d1a      	adds	r2, r3, #4
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b04      	subs	r3, #4
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80061aa:	e059      	b.n	8006260 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d917      	bls.n	80061e8 <HAL_SPI_Transmit+0x300>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d013      	beq.n	80061e8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061c4:	881a      	ldrh	r2, [r3, #0]
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061ce:	1c9a      	adds	r2, r3, #2
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80061da:	b29b      	uxth	r3, r3
 80061dc:	3b02      	subs	r3, #2
 80061de:	b29a      	uxth	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80061e6:	e03b      	b.n	8006260 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3320      	adds	r3, #32
 80061f2:	7812      	ldrb	r2, [r2, #0]
 80061f4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061fa:	1c5a      	adds	r2, r3, #1
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006206:	b29b      	uxth	r3, r3
 8006208:	3b01      	subs	r3, #1
 800620a:	b29a      	uxth	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006212:	e025      	b.n	8006260 <HAL_SPI_Transmit+0x378>
 8006214:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006218:	f7fc fac4 	bl	80027a4 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	429a      	cmp	r2, r3
 8006226:	d803      	bhi.n	8006230 <HAL_SPI_Transmit+0x348>
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622e:	d102      	bne.n	8006236 <HAL_SPI_Transmit+0x34e>
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d114      	bne.n	8006260 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f000 fb7e 	bl	8006938 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006242:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e02c      	b.n	80062ba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006266:	b29b      	uxth	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	f47f af79 	bne.w	8006160 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2200      	movs	r2, #0
 8006276:	2108      	movs	r1, #8
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f000 fbfd 	bl	8006a78 <SPI_WaitOnFlagUntilTimeout>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d007      	beq.n	8006294 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800628a:	f043 0220 	orr.w	r2, r3, #32
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 fb4f 	bl	8006938 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e000      	b.n	80062ba <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80062b8:	2300      	movs	r3, #0
  }
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop

080062c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08e      	sub	sp, #56	@ 0x38
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3320      	adds	r3, #32
 80062d8:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3330      	adds	r3, #48	@ 0x30
 80062e0:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e6:	095b      	lsrs	r3, r3, #5
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	3301      	adds	r3, #1
 80062ec:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062ee:	f7fc fa59 	bl	80027a4 <HAL_GetTick>
 80062f2:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80062f4:	887b      	ldrh	r3, [r7, #2]
 80062f6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80062f8:	887b      	ldrh	r3, [r7, #2]
 80062fa:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b01      	cmp	r3, #1
 8006306:	d001      	beq.n	800630c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8006308:	2302      	movs	r3, #2
 800630a:	e310      	b.n	800692e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <HAL_SPI_TransmitReceive+0x5a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <HAL_SPI_TransmitReceive+0x5a>
 8006318:	887b      	ldrh	r3, [r7, #2]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e305      	b.n	800692e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_SPI_TransmitReceive+0x6c>
 800632c:	2302      	movs	r3, #2
 800632e:	e2fe      	b.n	800692e <HAL_SPI_TransmitReceive+0x66a>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2205      	movs	r2, #5
 800633c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	887a      	ldrh	r2, [r7, #2]
 8006352:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	887a      	ldrh	r2, [r7, #2]
 800635a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	887a      	ldrh	r2, [r7, #2]
 8006368:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	887a      	ldrh	r2, [r7, #2]
 8006370:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68da      	ldr	r2, [r3, #12]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800638e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a70      	ldr	r2, [pc, #448]	@ (8006558 <HAL_SPI_TransmitReceive+0x294>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d009      	beq.n	80063ae <HAL_SPI_TransmitReceive+0xea>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a6f      	ldr	r2, [pc, #444]	@ (800655c <HAL_SPI_TransmitReceive+0x298>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d004      	beq.n	80063ae <HAL_SPI_TransmitReceive+0xea>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a6d      	ldr	r2, [pc, #436]	@ (8006560 <HAL_SPI_TransmitReceive+0x29c>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d102      	bne.n	80063b4 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80063ae:	2310      	movs	r3, #16
 80063b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063b2:	e001      	b.n	80063b8 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80063b4:	2308      	movs	r3, #8
 80063b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	4b69      	ldr	r3, [pc, #420]	@ (8006564 <HAL_SPI_TransmitReceive+0x2a0>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	8879      	ldrh	r1, [r7, #2]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	6812      	ldr	r2, [r2, #0]
 80063c8:	430b      	orrs	r3, r1
 80063ca:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0201 	orr.w	r2, r2, #1
 80063da:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063e4:	d107      	bne.n	80063f6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	2b0f      	cmp	r3, #15
 80063fc:	f240 80a2 	bls.w	8006544 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8006400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006402:	089b      	lsrs	r3, r3, #2
 8006404:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006406:	e094      	b.n	8006532 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	2b02      	cmp	r3, #2
 8006414:	d120      	bne.n	8006458 <HAL_SPI_TransmitReceive+0x194>
 8006416:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01d      	beq.n	8006458 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800641c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800641e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006422:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006424:	429a      	cmp	r2, r3
 8006426:	d217      	bcs.n	8006458 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6812      	ldr	r2, [r2, #0]
 8006432:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006438:	1d1a      	adds	r2, r3, #4
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006444:	b29b      	uxth	r3, r3
 8006446:	3b01      	subs	r3, #1
 8006448:	b29a      	uxth	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006456:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006460:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006462:	2b00      	cmp	r3, #0
 8006464:	d065      	beq.n	8006532 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	2b01      	cmp	r3, #1
 8006472:	d118      	bne.n	80064a6 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800647c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800647e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006484:	1d1a      	adds	r2, r3, #4
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006490:	b29b      	uxth	r3, r3
 8006492:	3b01      	subs	r3, #1
 8006494:	b29a      	uxth	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064a2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80064a4:	e045      	b.n	8006532 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80064a6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80064a8:	8bfb      	ldrh	r3, [r7, #30]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d21d      	bcs.n	80064ea <HAL_SPI_TransmitReceive+0x226>
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d018      	beq.n	80064ea <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80064c2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064c8:	1d1a      	adds	r2, r3, #4
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	3b01      	subs	r3, #1
 80064d8:	b29a      	uxth	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064e6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80064e8:	e023      	b.n	8006532 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064ea:	f7fc f95b 	bl	80027a4 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d803      	bhi.n	8006502 <HAL_SPI_TransmitReceive+0x23e>
 80064fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006500:	d102      	bne.n	8006508 <HAL_SPI_TransmitReceive+0x244>
 8006502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006504:	2b00      	cmp	r3, #0
 8006506:	d114      	bne.n	8006532 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 fa15 	bl	8006938 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006514:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e1fd      	b.n	800692e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006532:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006534:	2b00      	cmp	r3, #0
 8006536:	f47f af67 	bne.w	8006408 <HAL_SPI_TransmitReceive+0x144>
 800653a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800653c:	2b00      	cmp	r3, #0
 800653e:	f47f af63 	bne.w	8006408 <HAL_SPI_TransmitReceive+0x144>
 8006542:	e1ce      	b.n	80068e2 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	2b07      	cmp	r3, #7
 800654a:	f240 81c2 	bls.w	80068d2 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800654e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006550:	085b      	lsrs	r3, r3, #1
 8006552:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006554:	e0c9      	b.n	80066ea <HAL_SPI_TransmitReceive+0x426>
 8006556:	bf00      	nop
 8006558:	40013000 	.word	0x40013000
 800655c:	40003800 	.word	0x40003800
 8006560:	40003c00 	.word	0x40003c00
 8006564:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b02      	cmp	r3, #2
 8006574:	d11f      	bne.n	80065b6 <HAL_SPI_TransmitReceive+0x2f2>
 8006576:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01c      	beq.n	80065b6 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800657c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800657e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006582:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006584:	429a      	cmp	r2, r3
 8006586:	d216      	bcs.n	80065b6 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800658c:	881a      	ldrh	r2, [r3, #0]
 800658e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006590:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006596:	1c9a      	adds	r2, r3, #2
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80065b4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80065be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 8092 	beq.w	80066ea <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d118      	bne.n	8006606 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065d8:	6a3a      	ldr	r2, [r7, #32]
 80065da:	8812      	ldrh	r2, [r2, #0]
 80065dc:	b292      	uxth	r2, r2
 80065de:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065e4:	1c9a      	adds	r2, r3, #2
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	3b01      	subs	r3, #1
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006602:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006604:	e071      	b.n	80066ea <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006606:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006608:	8bfb      	ldrh	r3, [r7, #30]
 800660a:	429a      	cmp	r2, r3
 800660c:	d228      	bcs.n	8006660 <HAL_SPI_TransmitReceive+0x39c>
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d023      	beq.n	8006660 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800661c:	6a3a      	ldr	r2, [r7, #32]
 800661e:	8812      	ldrh	r2, [r2, #0]
 8006620:	b292      	uxth	r2, r2
 8006622:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006628:	1c9a      	adds	r2, r3, #2
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006632:	6a3a      	ldr	r2, [r7, #32]
 8006634:	8812      	ldrh	r2, [r2, #0]
 8006636:	b292      	uxth	r2, r2
 8006638:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800663e:	1c9a      	adds	r2, r3, #2
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800664a:	b29b      	uxth	r3, r3
 800664c:	3b02      	subs	r3, #2
 800664e:	b29a      	uxth	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800665c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800665e:	e044      	b.n	80066ea <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006660:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006662:	2b01      	cmp	r3, #1
 8006664:	d11d      	bne.n	80066a2 <HAL_SPI_TransmitReceive+0x3de>
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d018      	beq.n	80066a2 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006674:	6a3a      	ldr	r2, [r7, #32]
 8006676:	8812      	ldrh	r2, [r2, #0]
 8006678:	b292      	uxth	r2, r2
 800667a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006680:	1c9a      	adds	r2, r3, #2
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800668c:	b29b      	uxth	r3, r3
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800669e:	853b      	strh	r3, [r7, #40]	@ 0x28
 80066a0:	e023      	b.n	80066ea <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066a2:	f7fc f87f 	bl	80027a4 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d803      	bhi.n	80066ba <HAL_SPI_TransmitReceive+0x3f6>
 80066b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b8:	d102      	bne.n	80066c0 <HAL_SPI_TransmitReceive+0x3fc>
 80066ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d114      	bne.n	80066ea <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f000 f939 	bl	8006938 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e121      	b.n	800692e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80066ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f47f af3b 	bne.w	8006568 <HAL_SPI_TransmitReceive+0x2a4>
 80066f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f47f af37 	bne.w	8006568 <HAL_SPI_TransmitReceive+0x2a4>
 80066fa:	e0f2      	b.n	80068e2 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b02      	cmp	r3, #2
 8006708:	d121      	bne.n	800674e <HAL_SPI_TransmitReceive+0x48a>
 800670a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01e      	beq.n	800674e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006710:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006712:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006716:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006718:	429a      	cmp	r2, r3
 800671a:	d218      	bcs.n	800674e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	3320      	adds	r3, #32
 8006726:	7812      	ldrb	r2, [r2, #0]
 8006728:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800672e:	1c5a      	adds	r2, r3, #1
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800673a:	b29b      	uxth	r3, r3
 800673c:	3b01      	subs	r3, #1
 800673e:	b29a      	uxth	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800674c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006756:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 80ba 	beq.w	80068d2 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b01      	cmp	r3, #1
 800676a:	d11b      	bne.n	80067a4 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006778:	7812      	ldrb	r2, [r2, #0]
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800678e:	b29b      	uxth	r3, r3
 8006790:	3b01      	subs	r3, #1
 8006792:	b29a      	uxth	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80067a0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80067a2:	e096      	b.n	80068d2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80067a4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80067a6:	8bfb      	ldrh	r3, [r7, #30]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d24a      	bcs.n	8006842 <HAL_SPI_TransmitReceive+0x57e>
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d045      	beq.n	8006842 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067c2:	7812      	ldrb	r2, [r2, #0]
 80067c4:	b2d2      	uxtb	r2, r2
 80067c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067de:	7812      	ldrb	r2, [r2, #0]
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067e8:	1c5a      	adds	r2, r3, #1
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067fa:	7812      	ldrb	r2, [r2, #0]
 80067fc:	b2d2      	uxtb	r2, r2
 80067fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006816:	7812      	ldrb	r2, [r2, #0]
 8006818:	b2d2      	uxtb	r2, r2
 800681a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800682c:	b29b      	uxth	r3, r3
 800682e:	3b04      	subs	r3, #4
 8006830:	b29a      	uxth	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800683e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006840:	e047      	b.n	80068d2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006842:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006844:	2b03      	cmp	r3, #3
 8006846:	d820      	bhi.n	800688a <HAL_SPI_TransmitReceive+0x5c6>
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d01b      	beq.n	800688a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800685e:	7812      	ldrb	r2, [r2, #0]
 8006860:	b2d2      	uxtb	r2, r2
 8006862:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006868:	1c5a      	adds	r2, r3, #1
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006874:	b29b      	uxth	r3, r3
 8006876:	3b01      	subs	r3, #1
 8006878:	b29a      	uxth	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006886:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006888:	e023      	b.n	80068d2 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800688a:	f7fb ff8b 	bl	80027a4 <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006896:	429a      	cmp	r2, r3
 8006898:	d803      	bhi.n	80068a2 <HAL_SPI_TransmitReceive+0x5de>
 800689a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800689c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a0:	d102      	bne.n	80068a8 <HAL_SPI_TransmitReceive+0x5e4>
 80068a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d114      	bne.n	80068d2 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 f845 	bl	8006938 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e02d      	b.n	800692e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80068d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f47f af11 	bne.w	80066fc <HAL_SPI_TransmitReceive+0x438>
 80068da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f47f af0d 	bne.w	80066fc <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e8:	2200      	movs	r2, #0
 80068ea:	2108      	movs	r1, #8
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f000 f8c3 	bl	8006a78 <SPI_WaitOnFlagUntilTimeout>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d007      	beq.n	8006908 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068fe:	f043 0220 	orr.w	r2, r3, #32
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 f815 	bl	8006938 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e000      	b.n	800692e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800692c:	2300      	movs	r3, #0
  }
}
 800692e:	4618      	mov	r0, r3
 8006930:	3730      	adds	r7, #48	@ 0x30
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop

08006938 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	699a      	ldr	r2, [r3, #24]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f042 0208 	orr.w	r2, r2, #8
 8006956:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	699a      	ldr	r2, [r3, #24]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0210 	orr.w	r2, r2, #16
 8006966:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f022 0201 	bic.w	r2, r2, #1
 8006976:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6919      	ldr	r1, [r3, #16]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	4b3c      	ldr	r3, [pc, #240]	@ (8006a74 <SPI_CloseTransfer+0x13c>)
 8006984:	400b      	ands	r3, r1
 8006986:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689a      	ldr	r2, [r3, #8]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006996:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b04      	cmp	r3, #4
 80069a2:	d014      	beq.n	80069ce <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f003 0320 	and.w	r3, r3, #32
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00f      	beq.n	80069ce <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	699a      	ldr	r2, [r3, #24]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f042 0220 	orr.w	r2, r2, #32
 80069cc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b03      	cmp	r3, #3
 80069d8:	d014      	beq.n	8006a04 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00f      	beq.n	8006a04 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069ea:	f043 0204 	orr.w	r2, r3, #4
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699a      	ldr	r2, [r3, #24]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a02:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00f      	beq.n	8006a2e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a14:	f043 0201 	orr.w	r2, r3, #1
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	699a      	ldr	r2, [r3, #24]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a2c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00f      	beq.n	8006a58 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a3e:	f043 0208 	orr.w	r2, r3, #8
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	699a      	ldr	r2, [r3, #24]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a56:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006a68:	bf00      	nop
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	fffffc90 	.word	0xfffffc90

08006a78 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	603b      	str	r3, [r7, #0]
 8006a84:	4613      	mov	r3, r2
 8006a86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006a88:	e010      	b.n	8006aac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a8a:	f7fb fe8b 	bl	80027a4 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d803      	bhi.n	8006aa2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa0:	d102      	bne.n	8006aa8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e00f      	b.n	8006acc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	695a      	ldr	r2, [r3, #20]
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	68ba      	ldr	r2, [r7, #8]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	bf0c      	ite	eq
 8006abc:	2301      	moveq	r3, #1
 8006abe:	2300      	movne	r3, #0
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	79fb      	ldrb	r3, [r7, #7]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d0df      	beq.n	8006a8a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae0:	095b      	lsrs	r3, r3, #5
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	3301      	adds	r3, #1
 8006aec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	3307      	adds	r3, #7
 8006af2:	08db      	lsrs	r3, r3, #3
 8006af4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	fb02 f303 	mul.w	r3, r2, r3
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b082      	sub	sp, #8
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e049      	b.n	8006bb0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d106      	bne.n	8006b36 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7fb fb2f 	bl	8002194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2202      	movs	r2, #2
 8006b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	3304      	adds	r3, #4
 8006b46:	4619      	mov	r1, r3
 8006b48:	4610      	mov	r0, r2
 8006b4a:	f000 fc49 	bl	80073e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d001      	beq.n	8006bd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e054      	b.n	8006c7a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68da      	ldr	r2, [r3, #12]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f042 0201 	orr.w	r2, r2, #1
 8006be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a26      	ldr	r2, [pc, #152]	@ (8006c88 <HAL_TIM_Base_Start_IT+0xd0>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d022      	beq.n	8006c38 <HAL_TIM_Base_Start_IT+0x80>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bfa:	d01d      	beq.n	8006c38 <HAL_TIM_Base_Start_IT+0x80>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a22      	ldr	r2, [pc, #136]	@ (8006c8c <HAL_TIM_Base_Start_IT+0xd4>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d018      	beq.n	8006c38 <HAL_TIM_Base_Start_IT+0x80>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a21      	ldr	r2, [pc, #132]	@ (8006c90 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d013      	beq.n	8006c38 <HAL_TIM_Base_Start_IT+0x80>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a1f      	ldr	r2, [pc, #124]	@ (8006c94 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d00e      	beq.n	8006c38 <HAL_TIM_Base_Start_IT+0x80>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a1e      	ldr	r2, [pc, #120]	@ (8006c98 <HAL_TIM_Base_Start_IT+0xe0>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d009      	beq.n	8006c38 <HAL_TIM_Base_Start_IT+0x80>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a1c      	ldr	r2, [pc, #112]	@ (8006c9c <HAL_TIM_Base_Start_IT+0xe4>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d004      	beq.n	8006c38 <HAL_TIM_Base_Start_IT+0x80>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a1b      	ldr	r2, [pc, #108]	@ (8006ca0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d115      	bne.n	8006c64 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689a      	ldr	r2, [r3, #8]
 8006c3e:	4b19      	ldr	r3, [pc, #100]	@ (8006ca4 <HAL_TIM_Base_Start_IT+0xec>)
 8006c40:	4013      	ands	r3, r2
 8006c42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b06      	cmp	r3, #6
 8006c48:	d015      	beq.n	8006c76 <HAL_TIM_Base_Start_IT+0xbe>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c50:	d011      	beq.n	8006c76 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f042 0201 	orr.w	r2, r2, #1
 8006c60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c62:	e008      	b.n	8006c76 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f042 0201 	orr.w	r2, r2, #1
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	e000      	b.n	8006c78 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	40010000 	.word	0x40010000
 8006c8c:	40000400 	.word	0x40000400
 8006c90:	40000800 	.word	0x40000800
 8006c94:	40000c00 	.word	0x40000c00
 8006c98:	40010400 	.word	0x40010400
 8006c9c:	40001800 	.word	0x40001800
 8006ca0:	40014000 	.word	0x40014000
 8006ca4:	00010007 	.word	0x00010007

08006ca8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e049      	b.n	8006d4e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d106      	bne.n	8006cd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f841 	bl	8006d56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3304      	adds	r3, #4
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	4610      	mov	r0, r2
 8006ce8:	f000 fb7a 	bl	80073e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d5e:	bf00      	nop
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d020      	beq.n	8006dce <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d01b      	beq.n	8006dce <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f06f 0202 	mvn.w	r2, #2
 8006d9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	f003 0303 	and.w	r3, r3, #3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 faf5 	bl	80073a4 <HAL_TIM_IC_CaptureCallback>
 8006dba:	e005      	b.n	8006dc8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fae7 	bl	8007390 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 faf8 	bl	80073b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d020      	beq.n	8006e1a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d01b      	beq.n	8006e1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f06f 0204 	mvn.w	r2, #4
 8006dea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2202      	movs	r2, #2
 8006df0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d003      	beq.n	8006e08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 facf 	bl	80073a4 <HAL_TIM_IC_CaptureCallback>
 8006e06:	e005      	b.n	8006e14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fac1 	bl	8007390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fad2 	bl	80073b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f003 0308 	and.w	r3, r3, #8
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d020      	beq.n	8006e66 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f003 0308 	and.w	r3, r3, #8
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d01b      	beq.n	8006e66 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f06f 0208 	mvn.w	r2, #8
 8006e36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2204      	movs	r2, #4
 8006e3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	f003 0303 	and.w	r3, r3, #3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 faa9 	bl	80073a4 <HAL_TIM_IC_CaptureCallback>
 8006e52:	e005      	b.n	8006e60 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fa9b 	bl	8007390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 faac 	bl	80073b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	f003 0310 	and.w	r3, r3, #16
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d020      	beq.n	8006eb2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f003 0310 	and.w	r3, r3, #16
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d01b      	beq.n	8006eb2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f06f 0210 	mvn.w	r2, #16
 8006e82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2208      	movs	r2, #8
 8006e88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d003      	beq.n	8006ea0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fa83 	bl	80073a4 <HAL_TIM_IC_CaptureCallback>
 8006e9e:	e005      	b.n	8006eac <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fa75 	bl	8007390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fa86 	bl	80073b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00c      	beq.n	8006ed6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d007      	beq.n	8006ed6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f06f 0201 	mvn.w	r2, #1
 8006ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7fb f893 	bl	8001ffc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d104      	bne.n	8006eea <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00c      	beq.n	8006f04 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d007      	beq.n	8006f04 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 ff98 	bl	8007e34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00c      	beq.n	8006f28 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d007      	beq.n	8006f28 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 ff90 	bl	8007e48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00c      	beq.n	8006f4c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d007      	beq.n	8006f4c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fa40 	bl	80073cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f003 0320 	and.w	r3, r3, #32
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00c      	beq.n	8006f70 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f003 0320 	and.w	r3, r3, #32
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d007      	beq.n	8006f70 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f06f 0220 	mvn.w	r2, #32
 8006f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 ff58 	bl	8007e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f70:	bf00      	nop
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d101      	bne.n	8006f96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f92:	2302      	movs	r3, #2
 8006f94:	e0ff      	b.n	8007196 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2b14      	cmp	r3, #20
 8006fa2:	f200 80f0 	bhi.w	8007186 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fac:	08007001 	.word	0x08007001
 8006fb0:	08007187 	.word	0x08007187
 8006fb4:	08007187 	.word	0x08007187
 8006fb8:	08007187 	.word	0x08007187
 8006fbc:	08007041 	.word	0x08007041
 8006fc0:	08007187 	.word	0x08007187
 8006fc4:	08007187 	.word	0x08007187
 8006fc8:	08007187 	.word	0x08007187
 8006fcc:	08007083 	.word	0x08007083
 8006fd0:	08007187 	.word	0x08007187
 8006fd4:	08007187 	.word	0x08007187
 8006fd8:	08007187 	.word	0x08007187
 8006fdc:	080070c3 	.word	0x080070c3
 8006fe0:	08007187 	.word	0x08007187
 8006fe4:	08007187 	.word	0x08007187
 8006fe8:	08007187 	.word	0x08007187
 8006fec:	08007105 	.word	0x08007105
 8006ff0:	08007187 	.word	0x08007187
 8006ff4:	08007187 	.word	0x08007187
 8006ff8:	08007187 	.word	0x08007187
 8006ffc:	08007145 	.word	0x08007145
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68b9      	ldr	r1, [r7, #8]
 8007006:	4618      	mov	r0, r3
 8007008:	f000 fa8a 	bl	8007520 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	699a      	ldr	r2, [r3, #24]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 0208 	orr.w	r2, r2, #8
 800701a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	699a      	ldr	r2, [r3, #24]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f022 0204 	bic.w	r2, r2, #4
 800702a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6999      	ldr	r1, [r3, #24]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	691a      	ldr	r2, [r3, #16]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	430a      	orrs	r2, r1
 800703c:	619a      	str	r2, [r3, #24]
      break;
 800703e:	e0a5      	b.n	800718c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68b9      	ldr	r1, [r7, #8]
 8007046:	4618      	mov	r0, r3
 8007048:	f000 fafa 	bl	8007640 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	699a      	ldr	r2, [r3, #24]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800705a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	699a      	ldr	r2, [r3, #24]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800706a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6999      	ldr	r1, [r3, #24]
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	021a      	lsls	r2, r3, #8
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	430a      	orrs	r2, r1
 800707e:	619a      	str	r2, [r3, #24]
      break;
 8007080:	e084      	b.n	800718c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68b9      	ldr	r1, [r7, #8]
 8007088:	4618      	mov	r0, r3
 800708a:	f000 fb63 	bl	8007754 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	69da      	ldr	r2, [r3, #28]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f042 0208 	orr.w	r2, r2, #8
 800709c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	69da      	ldr	r2, [r3, #28]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f022 0204 	bic.w	r2, r2, #4
 80070ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	69d9      	ldr	r1, [r3, #28]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	691a      	ldr	r2, [r3, #16]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	430a      	orrs	r2, r1
 80070be:	61da      	str	r2, [r3, #28]
      break;
 80070c0:	e064      	b.n	800718c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68b9      	ldr	r1, [r7, #8]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f000 fbcb 	bl	8007864 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	69da      	ldr	r2, [r3, #28]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	69da      	ldr	r2, [r3, #28]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	69d9      	ldr	r1, [r3, #28]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	021a      	lsls	r2, r3, #8
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	61da      	str	r2, [r3, #28]
      break;
 8007102:	e043      	b.n	800718c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68b9      	ldr	r1, [r7, #8]
 800710a:	4618      	mov	r0, r3
 800710c:	f000 fc14 	bl	8007938 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f042 0208 	orr.w	r2, r2, #8
 800711e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f022 0204 	bic.w	r2, r2, #4
 800712e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	691a      	ldr	r2, [r3, #16]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	430a      	orrs	r2, r1
 8007140:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007142:	e023      	b.n	800718c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68b9      	ldr	r1, [r7, #8]
 800714a:	4618      	mov	r0, r3
 800714c:	f000 fc58 	bl	8007a00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800715e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800716e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	021a      	lsls	r2, r3, #8
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	430a      	orrs	r2, r1
 8007182:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007184:	e002      	b.n	800718c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	75fb      	strb	r3, [r7, #23]
      break;
 800718a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007194:	7dfb      	ldrb	r3, [r7, #23]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3718      	adds	r7, #24
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop

080071a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d101      	bne.n	80071bc <HAL_TIM_ConfigClockSource+0x1c>
 80071b8:	2302      	movs	r3, #2
 80071ba:	e0dc      	b.n	8007376 <HAL_TIM_ConfigClockSource+0x1d6>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2202      	movs	r2, #2
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	4b6a      	ldr	r3, [pc, #424]	@ (8007380 <HAL_TIM_ConfigClockSource+0x1e0>)
 80071d8:	4013      	ands	r3, r2
 80071da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a64      	ldr	r2, [pc, #400]	@ (8007384 <HAL_TIM_ConfigClockSource+0x1e4>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	f000 80a9 	beq.w	800734a <HAL_TIM_ConfigClockSource+0x1aa>
 80071f8:	4a62      	ldr	r2, [pc, #392]	@ (8007384 <HAL_TIM_ConfigClockSource+0x1e4>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	f200 80ae 	bhi.w	800735c <HAL_TIM_ConfigClockSource+0x1bc>
 8007200:	4a61      	ldr	r2, [pc, #388]	@ (8007388 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007202:	4293      	cmp	r3, r2
 8007204:	f000 80a1 	beq.w	800734a <HAL_TIM_ConfigClockSource+0x1aa>
 8007208:	4a5f      	ldr	r2, [pc, #380]	@ (8007388 <HAL_TIM_ConfigClockSource+0x1e8>)
 800720a:	4293      	cmp	r3, r2
 800720c:	f200 80a6 	bhi.w	800735c <HAL_TIM_ConfigClockSource+0x1bc>
 8007210:	4a5e      	ldr	r2, [pc, #376]	@ (800738c <HAL_TIM_ConfigClockSource+0x1ec>)
 8007212:	4293      	cmp	r3, r2
 8007214:	f000 8099 	beq.w	800734a <HAL_TIM_ConfigClockSource+0x1aa>
 8007218:	4a5c      	ldr	r2, [pc, #368]	@ (800738c <HAL_TIM_ConfigClockSource+0x1ec>)
 800721a:	4293      	cmp	r3, r2
 800721c:	f200 809e 	bhi.w	800735c <HAL_TIM_ConfigClockSource+0x1bc>
 8007220:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007224:	f000 8091 	beq.w	800734a <HAL_TIM_ConfigClockSource+0x1aa>
 8007228:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800722c:	f200 8096 	bhi.w	800735c <HAL_TIM_ConfigClockSource+0x1bc>
 8007230:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007234:	f000 8089 	beq.w	800734a <HAL_TIM_ConfigClockSource+0x1aa>
 8007238:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800723c:	f200 808e 	bhi.w	800735c <HAL_TIM_ConfigClockSource+0x1bc>
 8007240:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007244:	d03e      	beq.n	80072c4 <HAL_TIM_ConfigClockSource+0x124>
 8007246:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800724a:	f200 8087 	bhi.w	800735c <HAL_TIM_ConfigClockSource+0x1bc>
 800724e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007252:	f000 8086 	beq.w	8007362 <HAL_TIM_ConfigClockSource+0x1c2>
 8007256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800725a:	d87f      	bhi.n	800735c <HAL_TIM_ConfigClockSource+0x1bc>
 800725c:	2b70      	cmp	r3, #112	@ 0x70
 800725e:	d01a      	beq.n	8007296 <HAL_TIM_ConfigClockSource+0xf6>
 8007260:	2b70      	cmp	r3, #112	@ 0x70
 8007262:	d87b      	bhi.n	800735c <HAL_TIM_ConfigClockSource+0x1bc>
 8007264:	2b60      	cmp	r3, #96	@ 0x60
 8007266:	d050      	beq.n	800730a <HAL_TIM_ConfigClockSource+0x16a>
 8007268:	2b60      	cmp	r3, #96	@ 0x60
 800726a:	d877      	bhi.n	800735c <HAL_TIM_ConfigClockSource+0x1bc>
 800726c:	2b50      	cmp	r3, #80	@ 0x50
 800726e:	d03c      	beq.n	80072ea <HAL_TIM_ConfigClockSource+0x14a>
 8007270:	2b50      	cmp	r3, #80	@ 0x50
 8007272:	d873      	bhi.n	800735c <HAL_TIM_ConfigClockSource+0x1bc>
 8007274:	2b40      	cmp	r3, #64	@ 0x40
 8007276:	d058      	beq.n	800732a <HAL_TIM_ConfigClockSource+0x18a>
 8007278:	2b40      	cmp	r3, #64	@ 0x40
 800727a:	d86f      	bhi.n	800735c <HAL_TIM_ConfigClockSource+0x1bc>
 800727c:	2b30      	cmp	r3, #48	@ 0x30
 800727e:	d064      	beq.n	800734a <HAL_TIM_ConfigClockSource+0x1aa>
 8007280:	2b30      	cmp	r3, #48	@ 0x30
 8007282:	d86b      	bhi.n	800735c <HAL_TIM_ConfigClockSource+0x1bc>
 8007284:	2b20      	cmp	r3, #32
 8007286:	d060      	beq.n	800734a <HAL_TIM_ConfigClockSource+0x1aa>
 8007288:	2b20      	cmp	r3, #32
 800728a:	d867      	bhi.n	800735c <HAL_TIM_ConfigClockSource+0x1bc>
 800728c:	2b00      	cmp	r3, #0
 800728e:	d05c      	beq.n	800734a <HAL_TIM_ConfigClockSource+0x1aa>
 8007290:	2b10      	cmp	r3, #16
 8007292:	d05a      	beq.n	800734a <HAL_TIM_ConfigClockSource+0x1aa>
 8007294:	e062      	b.n	800735c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80072a6:	f000 fc8f 	bl	8007bc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80072b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	609a      	str	r2, [r3, #8]
      break;
 80072c2:	e04f      	b.n	8007364 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80072d4:	f000 fc78 	bl	8007bc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689a      	ldr	r2, [r3, #8]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80072e6:	609a      	str	r2, [r3, #8]
      break;
 80072e8:	e03c      	b.n	8007364 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072f6:	461a      	mov	r2, r3
 80072f8:	f000 fbe8 	bl	8007acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2150      	movs	r1, #80	@ 0x50
 8007302:	4618      	mov	r0, r3
 8007304:	f000 fc42 	bl	8007b8c <TIM_ITRx_SetConfig>
      break;
 8007308:	e02c      	b.n	8007364 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007316:	461a      	mov	r2, r3
 8007318:	f000 fc07 	bl	8007b2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2160      	movs	r1, #96	@ 0x60
 8007322:	4618      	mov	r0, r3
 8007324:	f000 fc32 	bl	8007b8c <TIM_ITRx_SetConfig>
      break;
 8007328:	e01c      	b.n	8007364 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007336:	461a      	mov	r2, r3
 8007338:	f000 fbc8 	bl	8007acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2140      	movs	r1, #64	@ 0x40
 8007342:	4618      	mov	r0, r3
 8007344:	f000 fc22 	bl	8007b8c <TIM_ITRx_SetConfig>
      break;
 8007348:	e00c      	b.n	8007364 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4619      	mov	r1, r3
 8007354:	4610      	mov	r0, r2
 8007356:	f000 fc19 	bl	8007b8c <TIM_ITRx_SetConfig>
      break;
 800735a:	e003      	b.n	8007364 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	73fb      	strb	r3, [r7, #15]
      break;
 8007360:	e000      	b.n	8007364 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007362:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007374:	7bfb      	ldrb	r3, [r7, #15]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	ffceff88 	.word	0xffceff88
 8007384:	00100040 	.word	0x00100040
 8007388:	00100030 	.word	0x00100030
 800738c:	00100020 	.word	0x00100020

08007390 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a43      	ldr	r2, [pc, #268]	@ (8007500 <TIM_Base_SetConfig+0x120>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d013      	beq.n	8007420 <TIM_Base_SetConfig+0x40>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073fe:	d00f      	beq.n	8007420 <TIM_Base_SetConfig+0x40>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a40      	ldr	r2, [pc, #256]	@ (8007504 <TIM_Base_SetConfig+0x124>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d00b      	beq.n	8007420 <TIM_Base_SetConfig+0x40>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a3f      	ldr	r2, [pc, #252]	@ (8007508 <TIM_Base_SetConfig+0x128>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d007      	beq.n	8007420 <TIM_Base_SetConfig+0x40>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a3e      	ldr	r2, [pc, #248]	@ (800750c <TIM_Base_SetConfig+0x12c>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d003      	beq.n	8007420 <TIM_Base_SetConfig+0x40>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a3d      	ldr	r2, [pc, #244]	@ (8007510 <TIM_Base_SetConfig+0x130>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d108      	bne.n	8007432 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	4313      	orrs	r3, r2
 8007430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a32      	ldr	r2, [pc, #200]	@ (8007500 <TIM_Base_SetConfig+0x120>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d01f      	beq.n	800747a <TIM_Base_SetConfig+0x9a>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007440:	d01b      	beq.n	800747a <TIM_Base_SetConfig+0x9a>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a2f      	ldr	r2, [pc, #188]	@ (8007504 <TIM_Base_SetConfig+0x124>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d017      	beq.n	800747a <TIM_Base_SetConfig+0x9a>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a2e      	ldr	r2, [pc, #184]	@ (8007508 <TIM_Base_SetConfig+0x128>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d013      	beq.n	800747a <TIM_Base_SetConfig+0x9a>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a2d      	ldr	r2, [pc, #180]	@ (800750c <TIM_Base_SetConfig+0x12c>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d00f      	beq.n	800747a <TIM_Base_SetConfig+0x9a>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a2c      	ldr	r2, [pc, #176]	@ (8007510 <TIM_Base_SetConfig+0x130>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d00b      	beq.n	800747a <TIM_Base_SetConfig+0x9a>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a2b      	ldr	r2, [pc, #172]	@ (8007514 <TIM_Base_SetConfig+0x134>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d007      	beq.n	800747a <TIM_Base_SetConfig+0x9a>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a2a      	ldr	r2, [pc, #168]	@ (8007518 <TIM_Base_SetConfig+0x138>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d003      	beq.n	800747a <TIM_Base_SetConfig+0x9a>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a29      	ldr	r2, [pc, #164]	@ (800751c <TIM_Base_SetConfig+0x13c>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d108      	bne.n	800748c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	4313      	orrs	r3, r2
 800748a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	4313      	orrs	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	689a      	ldr	r2, [r3, #8]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a14      	ldr	r2, [pc, #80]	@ (8007500 <TIM_Base_SetConfig+0x120>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d00f      	beq.n	80074d2 <TIM_Base_SetConfig+0xf2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a16      	ldr	r2, [pc, #88]	@ (8007510 <TIM_Base_SetConfig+0x130>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d00b      	beq.n	80074d2 <TIM_Base_SetConfig+0xf2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a15      	ldr	r2, [pc, #84]	@ (8007514 <TIM_Base_SetConfig+0x134>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d007      	beq.n	80074d2 <TIM_Base_SetConfig+0xf2>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a14      	ldr	r2, [pc, #80]	@ (8007518 <TIM_Base_SetConfig+0x138>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d003      	beq.n	80074d2 <TIM_Base_SetConfig+0xf2>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a13      	ldr	r2, [pc, #76]	@ (800751c <TIM_Base_SetConfig+0x13c>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d103      	bne.n	80074da <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	691a      	ldr	r2, [r3, #16]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f043 0204 	orr.w	r2, r3, #4
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	601a      	str	r2, [r3, #0]
}
 80074f2:	bf00      	nop
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	40010000 	.word	0x40010000
 8007504:	40000400 	.word	0x40000400
 8007508:	40000800 	.word	0x40000800
 800750c:	40000c00 	.word	0x40000c00
 8007510:	40010400 	.word	0x40010400
 8007514:	40014000 	.word	0x40014000
 8007518:	40014400 	.word	0x40014400
 800751c:	40014800 	.word	0x40014800

08007520 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a1b      	ldr	r3, [r3, #32]
 8007534:	f023 0201 	bic.w	r2, r3, #1
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	4b37      	ldr	r3, [pc, #220]	@ (8007628 <TIM_OC1_SetConfig+0x108>)
 800754c:	4013      	ands	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 0303 	bic.w	r3, r3, #3
 8007556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	4313      	orrs	r3, r2
 8007560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f023 0302 	bic.w	r3, r3, #2
 8007568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	4313      	orrs	r3, r2
 8007572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a2d      	ldr	r2, [pc, #180]	@ (800762c <TIM_OC1_SetConfig+0x10c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d00f      	beq.n	800759c <TIM_OC1_SetConfig+0x7c>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a2c      	ldr	r2, [pc, #176]	@ (8007630 <TIM_OC1_SetConfig+0x110>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d00b      	beq.n	800759c <TIM_OC1_SetConfig+0x7c>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a2b      	ldr	r2, [pc, #172]	@ (8007634 <TIM_OC1_SetConfig+0x114>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d007      	beq.n	800759c <TIM_OC1_SetConfig+0x7c>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a2a      	ldr	r2, [pc, #168]	@ (8007638 <TIM_OC1_SetConfig+0x118>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d003      	beq.n	800759c <TIM_OC1_SetConfig+0x7c>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a29      	ldr	r2, [pc, #164]	@ (800763c <TIM_OC1_SetConfig+0x11c>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d10c      	bne.n	80075b6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	f023 0308 	bic.w	r3, r3, #8
 80075a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f023 0304 	bic.w	r3, r3, #4
 80075b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a1c      	ldr	r2, [pc, #112]	@ (800762c <TIM_OC1_SetConfig+0x10c>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d00f      	beq.n	80075de <TIM_OC1_SetConfig+0xbe>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007630 <TIM_OC1_SetConfig+0x110>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d00b      	beq.n	80075de <TIM_OC1_SetConfig+0xbe>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a1a      	ldr	r2, [pc, #104]	@ (8007634 <TIM_OC1_SetConfig+0x114>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d007      	beq.n	80075de <TIM_OC1_SetConfig+0xbe>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a19      	ldr	r2, [pc, #100]	@ (8007638 <TIM_OC1_SetConfig+0x118>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d003      	beq.n	80075de <TIM_OC1_SetConfig+0xbe>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a18      	ldr	r2, [pc, #96]	@ (800763c <TIM_OC1_SetConfig+0x11c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d111      	bne.n	8007602 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	4313      	orrs	r3, r2
 8007600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	621a      	str	r2, [r3, #32]
}
 800761c:	bf00      	nop
 800761e:	371c      	adds	r7, #28
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	fffeff8f 	.word	0xfffeff8f
 800762c:	40010000 	.word	0x40010000
 8007630:	40010400 	.word	0x40010400
 8007634:	40014000 	.word	0x40014000
 8007638:	40014400 	.word	0x40014400
 800763c:	40014800 	.word	0x40014800

08007640 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007640:	b480      	push	{r7}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a1b      	ldr	r3, [r3, #32]
 8007654:	f023 0210 	bic.w	r2, r3, #16
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	4b34      	ldr	r3, [pc, #208]	@ (800773c <TIM_OC2_SetConfig+0xfc>)
 800766c:	4013      	ands	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	021b      	lsls	r3, r3, #8
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	4313      	orrs	r3, r2
 8007682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f023 0320 	bic.w	r3, r3, #32
 800768a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	011b      	lsls	r3, r3, #4
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	4313      	orrs	r3, r2
 8007696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a29      	ldr	r2, [pc, #164]	@ (8007740 <TIM_OC2_SetConfig+0x100>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d003      	beq.n	80076a8 <TIM_OC2_SetConfig+0x68>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a28      	ldr	r2, [pc, #160]	@ (8007744 <TIM_OC2_SetConfig+0x104>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d10d      	bne.n	80076c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	011b      	lsls	r3, r3, #4
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a1e      	ldr	r2, [pc, #120]	@ (8007740 <TIM_OC2_SetConfig+0x100>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d00f      	beq.n	80076ec <TIM_OC2_SetConfig+0xac>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a1d      	ldr	r2, [pc, #116]	@ (8007744 <TIM_OC2_SetConfig+0x104>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d00b      	beq.n	80076ec <TIM_OC2_SetConfig+0xac>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a1c      	ldr	r2, [pc, #112]	@ (8007748 <TIM_OC2_SetConfig+0x108>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d007      	beq.n	80076ec <TIM_OC2_SetConfig+0xac>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a1b      	ldr	r2, [pc, #108]	@ (800774c <TIM_OC2_SetConfig+0x10c>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d003      	beq.n	80076ec <TIM_OC2_SetConfig+0xac>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a1a      	ldr	r2, [pc, #104]	@ (8007750 <TIM_OC2_SetConfig+0x110>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d113      	bne.n	8007714 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	4313      	orrs	r3, r2
 8007706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	4313      	orrs	r3, r2
 8007712:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	621a      	str	r2, [r3, #32]
}
 800772e:	bf00      	nop
 8007730:	371c      	adds	r7, #28
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	feff8fff 	.word	0xfeff8fff
 8007740:	40010000 	.word	0x40010000
 8007744:	40010400 	.word	0x40010400
 8007748:	40014000 	.word	0x40014000
 800774c:	40014400 	.word	0x40014400
 8007750:	40014800 	.word	0x40014800

08007754 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007754:	b480      	push	{r7}
 8007756:	b087      	sub	sp, #28
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	4b33      	ldr	r3, [pc, #204]	@ (800784c <TIM_OC3_SetConfig+0xf8>)
 8007780:	4013      	ands	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f023 0303 	bic.w	r3, r3, #3
 800778a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	4313      	orrs	r3, r2
 8007794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800779c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	021b      	lsls	r3, r3, #8
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a28      	ldr	r2, [pc, #160]	@ (8007850 <TIM_OC3_SetConfig+0xfc>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d003      	beq.n	80077ba <TIM_OC3_SetConfig+0x66>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a27      	ldr	r2, [pc, #156]	@ (8007854 <TIM_OC3_SetConfig+0x100>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d10d      	bne.n	80077d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80077c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	021b      	lsls	r3, r3, #8
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007850 <TIM_OC3_SetConfig+0xfc>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d00f      	beq.n	80077fe <TIM_OC3_SetConfig+0xaa>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a1c      	ldr	r2, [pc, #112]	@ (8007854 <TIM_OC3_SetConfig+0x100>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00b      	beq.n	80077fe <TIM_OC3_SetConfig+0xaa>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a1b      	ldr	r2, [pc, #108]	@ (8007858 <TIM_OC3_SetConfig+0x104>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d007      	beq.n	80077fe <TIM_OC3_SetConfig+0xaa>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a1a      	ldr	r2, [pc, #104]	@ (800785c <TIM_OC3_SetConfig+0x108>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d003      	beq.n	80077fe <TIM_OC3_SetConfig+0xaa>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a19      	ldr	r2, [pc, #100]	@ (8007860 <TIM_OC3_SetConfig+0x10c>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d113      	bne.n	8007826 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800780c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	4313      	orrs	r3, r2
 8007818:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	011b      	lsls	r3, r3, #4
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	4313      	orrs	r3, r2
 8007824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	621a      	str	r2, [r3, #32]
}
 8007840:	bf00      	nop
 8007842:	371c      	adds	r7, #28
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	fffeff8f 	.word	0xfffeff8f
 8007850:	40010000 	.word	0x40010000
 8007854:	40010400 	.word	0x40010400
 8007858:	40014000 	.word	0x40014000
 800785c:	40014400 	.word	0x40014400
 8007860:	40014800 	.word	0x40014800

08007864 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a1b      	ldr	r3, [r3, #32]
 8007878:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	4b24      	ldr	r3, [pc, #144]	@ (8007920 <TIM_OC4_SetConfig+0xbc>)
 8007890:	4013      	ands	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800789a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	021b      	lsls	r3, r3, #8
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80078ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	031b      	lsls	r3, r3, #12
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a19      	ldr	r2, [pc, #100]	@ (8007924 <TIM_OC4_SetConfig+0xc0>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d00f      	beq.n	80078e4 <TIM_OC4_SetConfig+0x80>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a18      	ldr	r2, [pc, #96]	@ (8007928 <TIM_OC4_SetConfig+0xc4>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d00b      	beq.n	80078e4 <TIM_OC4_SetConfig+0x80>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a17      	ldr	r2, [pc, #92]	@ (800792c <TIM_OC4_SetConfig+0xc8>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d007      	beq.n	80078e4 <TIM_OC4_SetConfig+0x80>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a16      	ldr	r2, [pc, #88]	@ (8007930 <TIM_OC4_SetConfig+0xcc>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d003      	beq.n	80078e4 <TIM_OC4_SetConfig+0x80>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a15      	ldr	r2, [pc, #84]	@ (8007934 <TIM_OC4_SetConfig+0xd0>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d109      	bne.n	80078f8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	019b      	lsls	r3, r3, #6
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	621a      	str	r2, [r3, #32]
}
 8007912:	bf00      	nop
 8007914:	371c      	adds	r7, #28
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	feff8fff 	.word	0xfeff8fff
 8007924:	40010000 	.word	0x40010000
 8007928:	40010400 	.word	0x40010400
 800792c:	40014000 	.word	0x40014000
 8007930:	40014400 	.word	0x40014400
 8007934:	40014800 	.word	0x40014800

08007938 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007938:	b480      	push	{r7}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800795e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	4b21      	ldr	r3, [pc, #132]	@ (80079e8 <TIM_OC5_SetConfig+0xb0>)
 8007964:	4013      	ands	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	4313      	orrs	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007978:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	041b      	lsls	r3, r3, #16
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	4313      	orrs	r3, r2
 8007984:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a18      	ldr	r2, [pc, #96]	@ (80079ec <TIM_OC5_SetConfig+0xb4>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d00f      	beq.n	80079ae <TIM_OC5_SetConfig+0x76>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a17      	ldr	r2, [pc, #92]	@ (80079f0 <TIM_OC5_SetConfig+0xb8>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d00b      	beq.n	80079ae <TIM_OC5_SetConfig+0x76>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a16      	ldr	r2, [pc, #88]	@ (80079f4 <TIM_OC5_SetConfig+0xbc>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d007      	beq.n	80079ae <TIM_OC5_SetConfig+0x76>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a15      	ldr	r2, [pc, #84]	@ (80079f8 <TIM_OC5_SetConfig+0xc0>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d003      	beq.n	80079ae <TIM_OC5_SetConfig+0x76>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a14      	ldr	r2, [pc, #80]	@ (80079fc <TIM_OC5_SetConfig+0xc4>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d109      	bne.n	80079c2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	021b      	lsls	r3, r3, #8
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	4313      	orrs	r3, r2
 80079c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	621a      	str	r2, [r3, #32]
}
 80079dc:	bf00      	nop
 80079de:	371c      	adds	r7, #28
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr
 80079e8:	fffeff8f 	.word	0xfffeff8f
 80079ec:	40010000 	.word	0x40010000
 80079f0:	40010400 	.word	0x40010400
 80079f4:	40014000 	.word	0x40014000
 80079f8:	40014400 	.word	0x40014400
 80079fc:	40014800 	.word	0x40014800

08007a00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b087      	sub	sp, #28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a1b      	ldr	r3, [r3, #32]
 8007a14:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	4b22      	ldr	r3, [pc, #136]	@ (8007ab4 <TIM_OC6_SetConfig+0xb4>)
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	021b      	lsls	r3, r3, #8
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	051b      	lsls	r3, r3, #20
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a19      	ldr	r2, [pc, #100]	@ (8007ab8 <TIM_OC6_SetConfig+0xb8>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d00f      	beq.n	8007a78 <TIM_OC6_SetConfig+0x78>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a18      	ldr	r2, [pc, #96]	@ (8007abc <TIM_OC6_SetConfig+0xbc>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d00b      	beq.n	8007a78 <TIM_OC6_SetConfig+0x78>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a17      	ldr	r2, [pc, #92]	@ (8007ac0 <TIM_OC6_SetConfig+0xc0>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d007      	beq.n	8007a78 <TIM_OC6_SetConfig+0x78>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a16      	ldr	r2, [pc, #88]	@ (8007ac4 <TIM_OC6_SetConfig+0xc4>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d003      	beq.n	8007a78 <TIM_OC6_SetConfig+0x78>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a15      	ldr	r2, [pc, #84]	@ (8007ac8 <TIM_OC6_SetConfig+0xc8>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d109      	bne.n	8007a8c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	695b      	ldr	r3, [r3, #20]
 8007a84:	029b      	lsls	r3, r3, #10
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	621a      	str	r2, [r3, #32]
}
 8007aa6:	bf00      	nop
 8007aa8:	371c      	adds	r7, #28
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	feff8fff 	.word	0xfeff8fff
 8007ab8:	40010000 	.word	0x40010000
 8007abc:	40010400 	.word	0x40010400
 8007ac0:	40014000 	.word	0x40014000
 8007ac4:	40014400 	.word	0x40014400
 8007ac8:	40014800 	.word	0x40014800

08007acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	f023 0201 	bic.w	r2, r3, #1
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	011b      	lsls	r3, r3, #4
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f023 030a 	bic.w	r3, r3, #10
 8007b08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	621a      	str	r2, [r3, #32]
}
 8007b1e:	bf00      	nop
 8007b20:	371c      	adds	r7, #28
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b087      	sub	sp, #28
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	60f8      	str	r0, [r7, #12]
 8007b32:	60b9      	str	r1, [r7, #8]
 8007b34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6a1b      	ldr	r3, [r3, #32]
 8007b40:	f023 0210 	bic.w	r2, r3, #16
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	031b      	lsls	r3, r3, #12
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007b66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	621a      	str	r2, [r3, #32]
}
 8007b7e:	bf00      	nop
 8007b80:	371c      	adds	r7, #28
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
	...

08007b8c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	4b09      	ldr	r3, [pc, #36]	@ (8007bc4 <TIM_ITRx_SetConfig+0x38>)
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	f043 0307 	orr.w	r3, r3, #7
 8007bae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	609a      	str	r2, [r3, #8]
}
 8007bb6:	bf00      	nop
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	ffcfff8f 	.word	0xffcfff8f

08007bc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
 8007bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007be2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	021a      	lsls	r2, r3, #8
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	431a      	orrs	r2, r3
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	609a      	str	r2, [r3, #8]
}
 8007bfc:	bf00      	nop
 8007bfe:	371c      	adds	r7, #28
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d101      	bne.n	8007c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	e06d      	b.n	8007cfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a30      	ldr	r2, [pc, #192]	@ (8007d08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d004      	beq.n	8007c54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a2f      	ldr	r2, [pc, #188]	@ (8007d0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d108      	bne.n	8007c66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007c5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a20      	ldr	r2, [pc, #128]	@ (8007d08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d022      	beq.n	8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c92:	d01d      	beq.n	8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a1d      	ldr	r2, [pc, #116]	@ (8007d10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d018      	beq.n	8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8007d14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d013      	beq.n	8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a1a      	ldr	r2, [pc, #104]	@ (8007d18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d00e      	beq.n	8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a15      	ldr	r2, [pc, #84]	@ (8007d0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d009      	beq.n	8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a16      	ldr	r2, [pc, #88]	@ (8007d1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d004      	beq.n	8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a15      	ldr	r2, [pc, #84]	@ (8007d20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d10c      	bne.n	8007cea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3714      	adds	r7, #20
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	40010000 	.word	0x40010000
 8007d0c:	40010400 	.word	0x40010400
 8007d10:	40000400 	.word	0x40000400
 8007d14:	40000800 	.word	0x40000800
 8007d18:	40000c00 	.word	0x40000c00
 8007d1c:	40001800 	.word	0x40001800
 8007d20:	40014000 	.word	0x40014000

08007d24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d101      	bne.n	8007d40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e065      	b.n	8007e0c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da6:	4313      	orrs	r3, r2
 8007da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	041b      	lsls	r3, r3, #16
 8007db6:	4313      	orrs	r3, r2
 8007db8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a16      	ldr	r2, [pc, #88]	@ (8007e18 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d004      	beq.n	8007dce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a14      	ldr	r2, [pc, #80]	@ (8007e1c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d115      	bne.n	8007dfa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd8:	051b      	lsls	r3, r3, #20
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	40010000 	.word	0x40010000
 8007e1c:	40010400 	.word	0x40010400

08007e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d101      	bne.n	8007e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e042      	b.n	8007ef4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d106      	bne.n	8007e86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f7fa fa6d 	bl	8002360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2224      	movs	r2, #36	@ 0x24
 8007e8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f022 0201 	bic.w	r2, r2, #1
 8007e9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d002      	beq.n	8007eac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fe1e 	bl	8008ae8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f8b3 	bl	8008018 <UART_SetConfig>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d101      	bne.n	8007ebc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e01b      	b.n	8007ef4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685a      	ldr	r2, [r3, #4]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007eca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	689a      	ldr	r2, [r3, #8]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007eda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f042 0201 	orr.w	r2, r2, #1
 8007eea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fe9d 	bl	8008c2c <UART_CheckIdleState>
 8007ef2:	4603      	mov	r3, r0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b08a      	sub	sp, #40	@ 0x28
 8007f00:	af02      	add	r7, sp, #8
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	603b      	str	r3, [r7, #0]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f12:	2b20      	cmp	r3, #32
 8007f14:	d17b      	bne.n	800800e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d002      	beq.n	8007f22 <HAL_UART_Transmit+0x26>
 8007f1c:	88fb      	ldrh	r3, [r7, #6]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e074      	b.n	8008010 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2221      	movs	r2, #33	@ 0x21
 8007f32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f36:	f7fa fc35 	bl	80027a4 <HAL_GetTick>
 8007f3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	88fa      	ldrh	r2, [r7, #6]
 8007f40:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	88fa      	ldrh	r2, [r7, #6]
 8007f48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f54:	d108      	bne.n	8007f68 <HAL_UART_Transmit+0x6c>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d104      	bne.n	8007f68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	61bb      	str	r3, [r7, #24]
 8007f66:	e003      	b.n	8007f70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f70:	e030      	b.n	8007fd4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	2180      	movs	r1, #128	@ 0x80
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f000 feff 	bl	8008d80 <UART_WaitOnFlagUntilTimeout>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d005      	beq.n	8007f94 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e03d      	b.n	8008010 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10b      	bne.n	8007fb2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	881b      	ldrh	r3, [r3, #0]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fa8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	3302      	adds	r3, #2
 8007fae:	61bb      	str	r3, [r7, #24]
 8007fb0:	e007      	b.n	8007fc2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	781a      	ldrb	r2, [r3, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1c8      	bne.n	8007f72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	2140      	movs	r1, #64	@ 0x40
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f000 fec8 	bl	8008d80 <UART_WaitOnFlagUntilTimeout>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d005      	beq.n	8008002 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e006      	b.n	8008010 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2220      	movs	r2, #32
 8008006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	e000      	b.n	8008010 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800800e:	2302      	movs	r3, #2
  }
}
 8008010:	4618      	mov	r0, r3
 8008012:	3720      	adds	r7, #32
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800801c:	b092      	sub	sp, #72	@ 0x48
 800801e:	af00      	add	r7, sp, #0
 8008020:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	431a      	orrs	r2, r3
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	431a      	orrs	r2, r3
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	69db      	ldr	r3, [r3, #28]
 800803c:	4313      	orrs	r3, r2
 800803e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	4bbe      	ldr	r3, [pc, #760]	@ (8008340 <UART_SetConfig+0x328>)
 8008048:	4013      	ands	r3, r2
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	6812      	ldr	r2, [r2, #0]
 800804e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008050:	430b      	orrs	r3, r1
 8008052:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	68da      	ldr	r2, [r3, #12]
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	430a      	orrs	r2, r1
 8008068:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4ab3      	ldr	r2, [pc, #716]	@ (8008344 <UART_SetConfig+0x32c>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d004      	beq.n	8008084 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008080:	4313      	orrs	r3, r2
 8008082:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	689a      	ldr	r2, [r3, #8]
 800808a:	4baf      	ldr	r3, [pc, #700]	@ (8008348 <UART_SetConfig+0x330>)
 800808c:	4013      	ands	r3, r2
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	6812      	ldr	r2, [r2, #0]
 8008092:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008094:	430b      	orrs	r3, r1
 8008096:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800809e:	f023 010f 	bic.w	r1, r3, #15
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4aa6      	ldr	r2, [pc, #664]	@ (800834c <UART_SetConfig+0x334>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d177      	bne.n	80081a8 <UART_SetConfig+0x190>
 80080b8:	4ba5      	ldr	r3, [pc, #660]	@ (8008350 <UART_SetConfig+0x338>)
 80080ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080c0:	2b28      	cmp	r3, #40	@ 0x28
 80080c2:	d86d      	bhi.n	80081a0 <UART_SetConfig+0x188>
 80080c4:	a201      	add	r2, pc, #4	@ (adr r2, 80080cc <UART_SetConfig+0xb4>)
 80080c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ca:	bf00      	nop
 80080cc:	08008171 	.word	0x08008171
 80080d0:	080081a1 	.word	0x080081a1
 80080d4:	080081a1 	.word	0x080081a1
 80080d8:	080081a1 	.word	0x080081a1
 80080dc:	080081a1 	.word	0x080081a1
 80080e0:	080081a1 	.word	0x080081a1
 80080e4:	080081a1 	.word	0x080081a1
 80080e8:	080081a1 	.word	0x080081a1
 80080ec:	08008179 	.word	0x08008179
 80080f0:	080081a1 	.word	0x080081a1
 80080f4:	080081a1 	.word	0x080081a1
 80080f8:	080081a1 	.word	0x080081a1
 80080fc:	080081a1 	.word	0x080081a1
 8008100:	080081a1 	.word	0x080081a1
 8008104:	080081a1 	.word	0x080081a1
 8008108:	080081a1 	.word	0x080081a1
 800810c:	08008181 	.word	0x08008181
 8008110:	080081a1 	.word	0x080081a1
 8008114:	080081a1 	.word	0x080081a1
 8008118:	080081a1 	.word	0x080081a1
 800811c:	080081a1 	.word	0x080081a1
 8008120:	080081a1 	.word	0x080081a1
 8008124:	080081a1 	.word	0x080081a1
 8008128:	080081a1 	.word	0x080081a1
 800812c:	08008189 	.word	0x08008189
 8008130:	080081a1 	.word	0x080081a1
 8008134:	080081a1 	.word	0x080081a1
 8008138:	080081a1 	.word	0x080081a1
 800813c:	080081a1 	.word	0x080081a1
 8008140:	080081a1 	.word	0x080081a1
 8008144:	080081a1 	.word	0x080081a1
 8008148:	080081a1 	.word	0x080081a1
 800814c:	08008191 	.word	0x08008191
 8008150:	080081a1 	.word	0x080081a1
 8008154:	080081a1 	.word	0x080081a1
 8008158:	080081a1 	.word	0x080081a1
 800815c:	080081a1 	.word	0x080081a1
 8008160:	080081a1 	.word	0x080081a1
 8008164:	080081a1 	.word	0x080081a1
 8008168:	080081a1 	.word	0x080081a1
 800816c:	08008199 	.word	0x08008199
 8008170:	2301      	movs	r3, #1
 8008172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008176:	e222      	b.n	80085be <UART_SetConfig+0x5a6>
 8008178:	2304      	movs	r3, #4
 800817a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800817e:	e21e      	b.n	80085be <UART_SetConfig+0x5a6>
 8008180:	2308      	movs	r3, #8
 8008182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008186:	e21a      	b.n	80085be <UART_SetConfig+0x5a6>
 8008188:	2310      	movs	r3, #16
 800818a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800818e:	e216      	b.n	80085be <UART_SetConfig+0x5a6>
 8008190:	2320      	movs	r3, #32
 8008192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008196:	e212      	b.n	80085be <UART_SetConfig+0x5a6>
 8008198:	2340      	movs	r3, #64	@ 0x40
 800819a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800819e:	e20e      	b.n	80085be <UART_SetConfig+0x5a6>
 80081a0:	2380      	movs	r3, #128	@ 0x80
 80081a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081a6:	e20a      	b.n	80085be <UART_SetConfig+0x5a6>
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a69      	ldr	r2, [pc, #420]	@ (8008354 <UART_SetConfig+0x33c>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d130      	bne.n	8008214 <UART_SetConfig+0x1fc>
 80081b2:	4b67      	ldr	r3, [pc, #412]	@ (8008350 <UART_SetConfig+0x338>)
 80081b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081b6:	f003 0307 	and.w	r3, r3, #7
 80081ba:	2b05      	cmp	r3, #5
 80081bc:	d826      	bhi.n	800820c <UART_SetConfig+0x1f4>
 80081be:	a201      	add	r2, pc, #4	@ (adr r2, 80081c4 <UART_SetConfig+0x1ac>)
 80081c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c4:	080081dd 	.word	0x080081dd
 80081c8:	080081e5 	.word	0x080081e5
 80081cc:	080081ed 	.word	0x080081ed
 80081d0:	080081f5 	.word	0x080081f5
 80081d4:	080081fd 	.word	0x080081fd
 80081d8:	08008205 	.word	0x08008205
 80081dc:	2300      	movs	r3, #0
 80081de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081e2:	e1ec      	b.n	80085be <UART_SetConfig+0x5a6>
 80081e4:	2304      	movs	r3, #4
 80081e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ea:	e1e8      	b.n	80085be <UART_SetConfig+0x5a6>
 80081ec:	2308      	movs	r3, #8
 80081ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081f2:	e1e4      	b.n	80085be <UART_SetConfig+0x5a6>
 80081f4:	2310      	movs	r3, #16
 80081f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081fa:	e1e0      	b.n	80085be <UART_SetConfig+0x5a6>
 80081fc:	2320      	movs	r3, #32
 80081fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008202:	e1dc      	b.n	80085be <UART_SetConfig+0x5a6>
 8008204:	2340      	movs	r3, #64	@ 0x40
 8008206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800820a:	e1d8      	b.n	80085be <UART_SetConfig+0x5a6>
 800820c:	2380      	movs	r3, #128	@ 0x80
 800820e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008212:	e1d4      	b.n	80085be <UART_SetConfig+0x5a6>
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a4f      	ldr	r2, [pc, #316]	@ (8008358 <UART_SetConfig+0x340>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d130      	bne.n	8008280 <UART_SetConfig+0x268>
 800821e:	4b4c      	ldr	r3, [pc, #304]	@ (8008350 <UART_SetConfig+0x338>)
 8008220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008222:	f003 0307 	and.w	r3, r3, #7
 8008226:	2b05      	cmp	r3, #5
 8008228:	d826      	bhi.n	8008278 <UART_SetConfig+0x260>
 800822a:	a201      	add	r2, pc, #4	@ (adr r2, 8008230 <UART_SetConfig+0x218>)
 800822c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008230:	08008249 	.word	0x08008249
 8008234:	08008251 	.word	0x08008251
 8008238:	08008259 	.word	0x08008259
 800823c:	08008261 	.word	0x08008261
 8008240:	08008269 	.word	0x08008269
 8008244:	08008271 	.word	0x08008271
 8008248:	2300      	movs	r3, #0
 800824a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800824e:	e1b6      	b.n	80085be <UART_SetConfig+0x5a6>
 8008250:	2304      	movs	r3, #4
 8008252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008256:	e1b2      	b.n	80085be <UART_SetConfig+0x5a6>
 8008258:	2308      	movs	r3, #8
 800825a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800825e:	e1ae      	b.n	80085be <UART_SetConfig+0x5a6>
 8008260:	2310      	movs	r3, #16
 8008262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008266:	e1aa      	b.n	80085be <UART_SetConfig+0x5a6>
 8008268:	2320      	movs	r3, #32
 800826a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800826e:	e1a6      	b.n	80085be <UART_SetConfig+0x5a6>
 8008270:	2340      	movs	r3, #64	@ 0x40
 8008272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008276:	e1a2      	b.n	80085be <UART_SetConfig+0x5a6>
 8008278:	2380      	movs	r3, #128	@ 0x80
 800827a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800827e:	e19e      	b.n	80085be <UART_SetConfig+0x5a6>
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a35      	ldr	r2, [pc, #212]	@ (800835c <UART_SetConfig+0x344>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d130      	bne.n	80082ec <UART_SetConfig+0x2d4>
 800828a:	4b31      	ldr	r3, [pc, #196]	@ (8008350 <UART_SetConfig+0x338>)
 800828c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800828e:	f003 0307 	and.w	r3, r3, #7
 8008292:	2b05      	cmp	r3, #5
 8008294:	d826      	bhi.n	80082e4 <UART_SetConfig+0x2cc>
 8008296:	a201      	add	r2, pc, #4	@ (adr r2, 800829c <UART_SetConfig+0x284>)
 8008298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829c:	080082b5 	.word	0x080082b5
 80082a0:	080082bd 	.word	0x080082bd
 80082a4:	080082c5 	.word	0x080082c5
 80082a8:	080082cd 	.word	0x080082cd
 80082ac:	080082d5 	.word	0x080082d5
 80082b0:	080082dd 	.word	0x080082dd
 80082b4:	2300      	movs	r3, #0
 80082b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ba:	e180      	b.n	80085be <UART_SetConfig+0x5a6>
 80082bc:	2304      	movs	r3, #4
 80082be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082c2:	e17c      	b.n	80085be <UART_SetConfig+0x5a6>
 80082c4:	2308      	movs	r3, #8
 80082c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ca:	e178      	b.n	80085be <UART_SetConfig+0x5a6>
 80082cc:	2310      	movs	r3, #16
 80082ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d2:	e174      	b.n	80085be <UART_SetConfig+0x5a6>
 80082d4:	2320      	movs	r3, #32
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082da:	e170      	b.n	80085be <UART_SetConfig+0x5a6>
 80082dc:	2340      	movs	r3, #64	@ 0x40
 80082de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082e2:	e16c      	b.n	80085be <UART_SetConfig+0x5a6>
 80082e4:	2380      	movs	r3, #128	@ 0x80
 80082e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ea:	e168      	b.n	80085be <UART_SetConfig+0x5a6>
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a1b      	ldr	r2, [pc, #108]	@ (8008360 <UART_SetConfig+0x348>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d142      	bne.n	800837c <UART_SetConfig+0x364>
 80082f6:	4b16      	ldr	r3, [pc, #88]	@ (8008350 <UART_SetConfig+0x338>)
 80082f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082fa:	f003 0307 	and.w	r3, r3, #7
 80082fe:	2b05      	cmp	r3, #5
 8008300:	d838      	bhi.n	8008374 <UART_SetConfig+0x35c>
 8008302:	a201      	add	r2, pc, #4	@ (adr r2, 8008308 <UART_SetConfig+0x2f0>)
 8008304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008308:	08008321 	.word	0x08008321
 800830c:	08008329 	.word	0x08008329
 8008310:	08008331 	.word	0x08008331
 8008314:	08008339 	.word	0x08008339
 8008318:	08008365 	.word	0x08008365
 800831c:	0800836d 	.word	0x0800836d
 8008320:	2300      	movs	r3, #0
 8008322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008326:	e14a      	b.n	80085be <UART_SetConfig+0x5a6>
 8008328:	2304      	movs	r3, #4
 800832a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800832e:	e146      	b.n	80085be <UART_SetConfig+0x5a6>
 8008330:	2308      	movs	r3, #8
 8008332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008336:	e142      	b.n	80085be <UART_SetConfig+0x5a6>
 8008338:	2310      	movs	r3, #16
 800833a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800833e:	e13e      	b.n	80085be <UART_SetConfig+0x5a6>
 8008340:	cfff69f3 	.word	0xcfff69f3
 8008344:	58000c00 	.word	0x58000c00
 8008348:	11fff4ff 	.word	0x11fff4ff
 800834c:	40011000 	.word	0x40011000
 8008350:	58024400 	.word	0x58024400
 8008354:	40004400 	.word	0x40004400
 8008358:	40004800 	.word	0x40004800
 800835c:	40004c00 	.word	0x40004c00
 8008360:	40005000 	.word	0x40005000
 8008364:	2320      	movs	r3, #32
 8008366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800836a:	e128      	b.n	80085be <UART_SetConfig+0x5a6>
 800836c:	2340      	movs	r3, #64	@ 0x40
 800836e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008372:	e124      	b.n	80085be <UART_SetConfig+0x5a6>
 8008374:	2380      	movs	r3, #128	@ 0x80
 8008376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800837a:	e120      	b.n	80085be <UART_SetConfig+0x5a6>
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4acb      	ldr	r2, [pc, #812]	@ (80086b0 <UART_SetConfig+0x698>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d176      	bne.n	8008474 <UART_SetConfig+0x45c>
 8008386:	4bcb      	ldr	r3, [pc, #812]	@ (80086b4 <UART_SetConfig+0x69c>)
 8008388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800838a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800838e:	2b28      	cmp	r3, #40	@ 0x28
 8008390:	d86c      	bhi.n	800846c <UART_SetConfig+0x454>
 8008392:	a201      	add	r2, pc, #4	@ (adr r2, 8008398 <UART_SetConfig+0x380>)
 8008394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008398:	0800843d 	.word	0x0800843d
 800839c:	0800846d 	.word	0x0800846d
 80083a0:	0800846d 	.word	0x0800846d
 80083a4:	0800846d 	.word	0x0800846d
 80083a8:	0800846d 	.word	0x0800846d
 80083ac:	0800846d 	.word	0x0800846d
 80083b0:	0800846d 	.word	0x0800846d
 80083b4:	0800846d 	.word	0x0800846d
 80083b8:	08008445 	.word	0x08008445
 80083bc:	0800846d 	.word	0x0800846d
 80083c0:	0800846d 	.word	0x0800846d
 80083c4:	0800846d 	.word	0x0800846d
 80083c8:	0800846d 	.word	0x0800846d
 80083cc:	0800846d 	.word	0x0800846d
 80083d0:	0800846d 	.word	0x0800846d
 80083d4:	0800846d 	.word	0x0800846d
 80083d8:	0800844d 	.word	0x0800844d
 80083dc:	0800846d 	.word	0x0800846d
 80083e0:	0800846d 	.word	0x0800846d
 80083e4:	0800846d 	.word	0x0800846d
 80083e8:	0800846d 	.word	0x0800846d
 80083ec:	0800846d 	.word	0x0800846d
 80083f0:	0800846d 	.word	0x0800846d
 80083f4:	0800846d 	.word	0x0800846d
 80083f8:	08008455 	.word	0x08008455
 80083fc:	0800846d 	.word	0x0800846d
 8008400:	0800846d 	.word	0x0800846d
 8008404:	0800846d 	.word	0x0800846d
 8008408:	0800846d 	.word	0x0800846d
 800840c:	0800846d 	.word	0x0800846d
 8008410:	0800846d 	.word	0x0800846d
 8008414:	0800846d 	.word	0x0800846d
 8008418:	0800845d 	.word	0x0800845d
 800841c:	0800846d 	.word	0x0800846d
 8008420:	0800846d 	.word	0x0800846d
 8008424:	0800846d 	.word	0x0800846d
 8008428:	0800846d 	.word	0x0800846d
 800842c:	0800846d 	.word	0x0800846d
 8008430:	0800846d 	.word	0x0800846d
 8008434:	0800846d 	.word	0x0800846d
 8008438:	08008465 	.word	0x08008465
 800843c:	2301      	movs	r3, #1
 800843e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008442:	e0bc      	b.n	80085be <UART_SetConfig+0x5a6>
 8008444:	2304      	movs	r3, #4
 8008446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800844a:	e0b8      	b.n	80085be <UART_SetConfig+0x5a6>
 800844c:	2308      	movs	r3, #8
 800844e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008452:	e0b4      	b.n	80085be <UART_SetConfig+0x5a6>
 8008454:	2310      	movs	r3, #16
 8008456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800845a:	e0b0      	b.n	80085be <UART_SetConfig+0x5a6>
 800845c:	2320      	movs	r3, #32
 800845e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008462:	e0ac      	b.n	80085be <UART_SetConfig+0x5a6>
 8008464:	2340      	movs	r3, #64	@ 0x40
 8008466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800846a:	e0a8      	b.n	80085be <UART_SetConfig+0x5a6>
 800846c:	2380      	movs	r3, #128	@ 0x80
 800846e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008472:	e0a4      	b.n	80085be <UART_SetConfig+0x5a6>
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a8f      	ldr	r2, [pc, #572]	@ (80086b8 <UART_SetConfig+0x6a0>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d130      	bne.n	80084e0 <UART_SetConfig+0x4c8>
 800847e:	4b8d      	ldr	r3, [pc, #564]	@ (80086b4 <UART_SetConfig+0x69c>)
 8008480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008482:	f003 0307 	and.w	r3, r3, #7
 8008486:	2b05      	cmp	r3, #5
 8008488:	d826      	bhi.n	80084d8 <UART_SetConfig+0x4c0>
 800848a:	a201      	add	r2, pc, #4	@ (adr r2, 8008490 <UART_SetConfig+0x478>)
 800848c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008490:	080084a9 	.word	0x080084a9
 8008494:	080084b1 	.word	0x080084b1
 8008498:	080084b9 	.word	0x080084b9
 800849c:	080084c1 	.word	0x080084c1
 80084a0:	080084c9 	.word	0x080084c9
 80084a4:	080084d1 	.word	0x080084d1
 80084a8:	2300      	movs	r3, #0
 80084aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ae:	e086      	b.n	80085be <UART_SetConfig+0x5a6>
 80084b0:	2304      	movs	r3, #4
 80084b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084b6:	e082      	b.n	80085be <UART_SetConfig+0x5a6>
 80084b8:	2308      	movs	r3, #8
 80084ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084be:	e07e      	b.n	80085be <UART_SetConfig+0x5a6>
 80084c0:	2310      	movs	r3, #16
 80084c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084c6:	e07a      	b.n	80085be <UART_SetConfig+0x5a6>
 80084c8:	2320      	movs	r3, #32
 80084ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ce:	e076      	b.n	80085be <UART_SetConfig+0x5a6>
 80084d0:	2340      	movs	r3, #64	@ 0x40
 80084d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084d6:	e072      	b.n	80085be <UART_SetConfig+0x5a6>
 80084d8:	2380      	movs	r3, #128	@ 0x80
 80084da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084de:	e06e      	b.n	80085be <UART_SetConfig+0x5a6>
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a75      	ldr	r2, [pc, #468]	@ (80086bc <UART_SetConfig+0x6a4>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d130      	bne.n	800854c <UART_SetConfig+0x534>
 80084ea:	4b72      	ldr	r3, [pc, #456]	@ (80086b4 <UART_SetConfig+0x69c>)
 80084ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084ee:	f003 0307 	and.w	r3, r3, #7
 80084f2:	2b05      	cmp	r3, #5
 80084f4:	d826      	bhi.n	8008544 <UART_SetConfig+0x52c>
 80084f6:	a201      	add	r2, pc, #4	@ (adr r2, 80084fc <UART_SetConfig+0x4e4>)
 80084f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fc:	08008515 	.word	0x08008515
 8008500:	0800851d 	.word	0x0800851d
 8008504:	08008525 	.word	0x08008525
 8008508:	0800852d 	.word	0x0800852d
 800850c:	08008535 	.word	0x08008535
 8008510:	0800853d 	.word	0x0800853d
 8008514:	2300      	movs	r3, #0
 8008516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800851a:	e050      	b.n	80085be <UART_SetConfig+0x5a6>
 800851c:	2304      	movs	r3, #4
 800851e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008522:	e04c      	b.n	80085be <UART_SetConfig+0x5a6>
 8008524:	2308      	movs	r3, #8
 8008526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800852a:	e048      	b.n	80085be <UART_SetConfig+0x5a6>
 800852c:	2310      	movs	r3, #16
 800852e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008532:	e044      	b.n	80085be <UART_SetConfig+0x5a6>
 8008534:	2320      	movs	r3, #32
 8008536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800853a:	e040      	b.n	80085be <UART_SetConfig+0x5a6>
 800853c:	2340      	movs	r3, #64	@ 0x40
 800853e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008542:	e03c      	b.n	80085be <UART_SetConfig+0x5a6>
 8008544:	2380      	movs	r3, #128	@ 0x80
 8008546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800854a:	e038      	b.n	80085be <UART_SetConfig+0x5a6>
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a5b      	ldr	r2, [pc, #364]	@ (80086c0 <UART_SetConfig+0x6a8>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d130      	bne.n	80085b8 <UART_SetConfig+0x5a0>
 8008556:	4b57      	ldr	r3, [pc, #348]	@ (80086b4 <UART_SetConfig+0x69c>)
 8008558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800855a:	f003 0307 	and.w	r3, r3, #7
 800855e:	2b05      	cmp	r3, #5
 8008560:	d826      	bhi.n	80085b0 <UART_SetConfig+0x598>
 8008562:	a201      	add	r2, pc, #4	@ (adr r2, 8008568 <UART_SetConfig+0x550>)
 8008564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008568:	08008581 	.word	0x08008581
 800856c:	08008589 	.word	0x08008589
 8008570:	08008591 	.word	0x08008591
 8008574:	08008599 	.word	0x08008599
 8008578:	080085a1 	.word	0x080085a1
 800857c:	080085a9 	.word	0x080085a9
 8008580:	2302      	movs	r3, #2
 8008582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008586:	e01a      	b.n	80085be <UART_SetConfig+0x5a6>
 8008588:	2304      	movs	r3, #4
 800858a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800858e:	e016      	b.n	80085be <UART_SetConfig+0x5a6>
 8008590:	2308      	movs	r3, #8
 8008592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008596:	e012      	b.n	80085be <UART_SetConfig+0x5a6>
 8008598:	2310      	movs	r3, #16
 800859a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800859e:	e00e      	b.n	80085be <UART_SetConfig+0x5a6>
 80085a0:	2320      	movs	r3, #32
 80085a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085a6:	e00a      	b.n	80085be <UART_SetConfig+0x5a6>
 80085a8:	2340      	movs	r3, #64	@ 0x40
 80085aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ae:	e006      	b.n	80085be <UART_SetConfig+0x5a6>
 80085b0:	2380      	movs	r3, #128	@ 0x80
 80085b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085b6:	e002      	b.n	80085be <UART_SetConfig+0x5a6>
 80085b8:	2380      	movs	r3, #128	@ 0x80
 80085ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a3f      	ldr	r2, [pc, #252]	@ (80086c0 <UART_SetConfig+0x6a8>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	f040 80f8 	bne.w	80087ba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80085ce:	2b20      	cmp	r3, #32
 80085d0:	dc46      	bgt.n	8008660 <UART_SetConfig+0x648>
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	f2c0 8082 	blt.w	80086dc <UART_SetConfig+0x6c4>
 80085d8:	3b02      	subs	r3, #2
 80085da:	2b1e      	cmp	r3, #30
 80085dc:	d87e      	bhi.n	80086dc <UART_SetConfig+0x6c4>
 80085de:	a201      	add	r2, pc, #4	@ (adr r2, 80085e4 <UART_SetConfig+0x5cc>)
 80085e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e4:	08008667 	.word	0x08008667
 80085e8:	080086dd 	.word	0x080086dd
 80085ec:	0800866f 	.word	0x0800866f
 80085f0:	080086dd 	.word	0x080086dd
 80085f4:	080086dd 	.word	0x080086dd
 80085f8:	080086dd 	.word	0x080086dd
 80085fc:	0800867f 	.word	0x0800867f
 8008600:	080086dd 	.word	0x080086dd
 8008604:	080086dd 	.word	0x080086dd
 8008608:	080086dd 	.word	0x080086dd
 800860c:	080086dd 	.word	0x080086dd
 8008610:	080086dd 	.word	0x080086dd
 8008614:	080086dd 	.word	0x080086dd
 8008618:	080086dd 	.word	0x080086dd
 800861c:	0800868f 	.word	0x0800868f
 8008620:	080086dd 	.word	0x080086dd
 8008624:	080086dd 	.word	0x080086dd
 8008628:	080086dd 	.word	0x080086dd
 800862c:	080086dd 	.word	0x080086dd
 8008630:	080086dd 	.word	0x080086dd
 8008634:	080086dd 	.word	0x080086dd
 8008638:	080086dd 	.word	0x080086dd
 800863c:	080086dd 	.word	0x080086dd
 8008640:	080086dd 	.word	0x080086dd
 8008644:	080086dd 	.word	0x080086dd
 8008648:	080086dd 	.word	0x080086dd
 800864c:	080086dd 	.word	0x080086dd
 8008650:	080086dd 	.word	0x080086dd
 8008654:	080086dd 	.word	0x080086dd
 8008658:	080086dd 	.word	0x080086dd
 800865c:	080086cf 	.word	0x080086cf
 8008660:	2b40      	cmp	r3, #64	@ 0x40
 8008662:	d037      	beq.n	80086d4 <UART_SetConfig+0x6bc>
 8008664:	e03a      	b.n	80086dc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008666:	f7fc fef9 	bl	800545c <HAL_RCCEx_GetD3PCLK1Freq>
 800866a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800866c:	e03c      	b.n	80086e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800866e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008672:	4618      	mov	r0, r3
 8008674:	f7fc ff08 	bl	8005488 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800867c:	e034      	b.n	80086e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800867e:	f107 0318 	add.w	r3, r7, #24
 8008682:	4618      	mov	r0, r3
 8008684:	f7fd f854 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800868c:	e02c      	b.n	80086e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800868e:	4b09      	ldr	r3, [pc, #36]	@ (80086b4 <UART_SetConfig+0x69c>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0320 	and.w	r3, r3, #32
 8008696:	2b00      	cmp	r3, #0
 8008698:	d016      	beq.n	80086c8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800869a:	4b06      	ldr	r3, [pc, #24]	@ (80086b4 <UART_SetConfig+0x69c>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	08db      	lsrs	r3, r3, #3
 80086a0:	f003 0303 	and.w	r3, r3, #3
 80086a4:	4a07      	ldr	r2, [pc, #28]	@ (80086c4 <UART_SetConfig+0x6ac>)
 80086a6:	fa22 f303 	lsr.w	r3, r2, r3
 80086aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086ac:	e01c      	b.n	80086e8 <UART_SetConfig+0x6d0>
 80086ae:	bf00      	nop
 80086b0:	40011400 	.word	0x40011400
 80086b4:	58024400 	.word	0x58024400
 80086b8:	40007800 	.word	0x40007800
 80086bc:	40007c00 	.word	0x40007c00
 80086c0:	58000c00 	.word	0x58000c00
 80086c4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80086c8:	4b9d      	ldr	r3, [pc, #628]	@ (8008940 <UART_SetConfig+0x928>)
 80086ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086cc:	e00c      	b.n	80086e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80086ce:	4b9d      	ldr	r3, [pc, #628]	@ (8008944 <UART_SetConfig+0x92c>)
 80086d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086d2:	e009      	b.n	80086e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086da:	e005      	b.n	80086e8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80086e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80086e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 81de 	beq.w	8008aac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f4:	4a94      	ldr	r2, [pc, #592]	@ (8008948 <UART_SetConfig+0x930>)
 80086f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086fa:	461a      	mov	r2, r3
 80086fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8008702:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	685a      	ldr	r2, [r3, #4]
 8008708:	4613      	mov	r3, r2
 800870a:	005b      	lsls	r3, r3, #1
 800870c:	4413      	add	r3, r2
 800870e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008710:	429a      	cmp	r2, r3
 8008712:	d305      	bcc.n	8008720 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800871a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800871c:	429a      	cmp	r2, r3
 800871e:	d903      	bls.n	8008728 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008726:	e1c1      	b.n	8008aac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800872a:	2200      	movs	r2, #0
 800872c:	60bb      	str	r3, [r7, #8]
 800872e:	60fa      	str	r2, [r7, #12]
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008734:	4a84      	ldr	r2, [pc, #528]	@ (8008948 <UART_SetConfig+0x930>)
 8008736:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800873a:	b29b      	uxth	r3, r3
 800873c:	2200      	movs	r2, #0
 800873e:	603b      	str	r3, [r7, #0]
 8008740:	607a      	str	r2, [r7, #4]
 8008742:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008746:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800874a:	f7f7 fe19 	bl	8000380 <__aeabi_uldivmod>
 800874e:	4602      	mov	r2, r0
 8008750:	460b      	mov	r3, r1
 8008752:	4610      	mov	r0, r2
 8008754:	4619      	mov	r1, r3
 8008756:	f04f 0200 	mov.w	r2, #0
 800875a:	f04f 0300 	mov.w	r3, #0
 800875e:	020b      	lsls	r3, r1, #8
 8008760:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008764:	0202      	lsls	r2, r0, #8
 8008766:	6979      	ldr	r1, [r7, #20]
 8008768:	6849      	ldr	r1, [r1, #4]
 800876a:	0849      	lsrs	r1, r1, #1
 800876c:	2000      	movs	r0, #0
 800876e:	460c      	mov	r4, r1
 8008770:	4605      	mov	r5, r0
 8008772:	eb12 0804 	adds.w	r8, r2, r4
 8008776:	eb43 0905 	adc.w	r9, r3, r5
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	469a      	mov	sl, r3
 8008782:	4693      	mov	fp, r2
 8008784:	4652      	mov	r2, sl
 8008786:	465b      	mov	r3, fp
 8008788:	4640      	mov	r0, r8
 800878a:	4649      	mov	r1, r9
 800878c:	f7f7 fdf8 	bl	8000380 <__aeabi_uldivmod>
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	4613      	mov	r3, r2
 8008796:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800879e:	d308      	bcc.n	80087b2 <UART_SetConfig+0x79a>
 80087a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087a6:	d204      	bcs.n	80087b2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087ae:	60da      	str	r2, [r3, #12]
 80087b0:	e17c      	b.n	8008aac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80087b8:	e178      	b.n	8008aac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	69db      	ldr	r3, [r3, #28]
 80087be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087c2:	f040 80c5 	bne.w	8008950 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80087c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80087ca:	2b20      	cmp	r3, #32
 80087cc:	dc48      	bgt.n	8008860 <UART_SetConfig+0x848>
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	db7b      	blt.n	80088ca <UART_SetConfig+0x8b2>
 80087d2:	2b20      	cmp	r3, #32
 80087d4:	d879      	bhi.n	80088ca <UART_SetConfig+0x8b2>
 80087d6:	a201      	add	r2, pc, #4	@ (adr r2, 80087dc <UART_SetConfig+0x7c4>)
 80087d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087dc:	08008867 	.word	0x08008867
 80087e0:	0800886f 	.word	0x0800886f
 80087e4:	080088cb 	.word	0x080088cb
 80087e8:	080088cb 	.word	0x080088cb
 80087ec:	08008877 	.word	0x08008877
 80087f0:	080088cb 	.word	0x080088cb
 80087f4:	080088cb 	.word	0x080088cb
 80087f8:	080088cb 	.word	0x080088cb
 80087fc:	08008887 	.word	0x08008887
 8008800:	080088cb 	.word	0x080088cb
 8008804:	080088cb 	.word	0x080088cb
 8008808:	080088cb 	.word	0x080088cb
 800880c:	080088cb 	.word	0x080088cb
 8008810:	080088cb 	.word	0x080088cb
 8008814:	080088cb 	.word	0x080088cb
 8008818:	080088cb 	.word	0x080088cb
 800881c:	08008897 	.word	0x08008897
 8008820:	080088cb 	.word	0x080088cb
 8008824:	080088cb 	.word	0x080088cb
 8008828:	080088cb 	.word	0x080088cb
 800882c:	080088cb 	.word	0x080088cb
 8008830:	080088cb 	.word	0x080088cb
 8008834:	080088cb 	.word	0x080088cb
 8008838:	080088cb 	.word	0x080088cb
 800883c:	080088cb 	.word	0x080088cb
 8008840:	080088cb 	.word	0x080088cb
 8008844:	080088cb 	.word	0x080088cb
 8008848:	080088cb 	.word	0x080088cb
 800884c:	080088cb 	.word	0x080088cb
 8008850:	080088cb 	.word	0x080088cb
 8008854:	080088cb 	.word	0x080088cb
 8008858:	080088cb 	.word	0x080088cb
 800885c:	080088bd 	.word	0x080088bd
 8008860:	2b40      	cmp	r3, #64	@ 0x40
 8008862:	d02e      	beq.n	80088c2 <UART_SetConfig+0x8aa>
 8008864:	e031      	b.n	80088ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008866:	f7fb fb41 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 800886a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800886c:	e033      	b.n	80088d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800886e:	f7fb fb53 	bl	8003f18 <HAL_RCC_GetPCLK2Freq>
 8008872:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008874:	e02f      	b.n	80088d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800887a:	4618      	mov	r0, r3
 800887c:	f7fc fe04 	bl	8005488 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008884:	e027      	b.n	80088d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008886:	f107 0318 	add.w	r3, r7, #24
 800888a:	4618      	mov	r0, r3
 800888c:	f7fc ff50 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008894:	e01f      	b.n	80088d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008896:	4b2d      	ldr	r3, [pc, #180]	@ (800894c <UART_SetConfig+0x934>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 0320 	and.w	r3, r3, #32
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d009      	beq.n	80088b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80088a2:	4b2a      	ldr	r3, [pc, #168]	@ (800894c <UART_SetConfig+0x934>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	08db      	lsrs	r3, r3, #3
 80088a8:	f003 0303 	and.w	r3, r3, #3
 80088ac:	4a24      	ldr	r2, [pc, #144]	@ (8008940 <UART_SetConfig+0x928>)
 80088ae:	fa22 f303 	lsr.w	r3, r2, r3
 80088b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088b4:	e00f      	b.n	80088d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80088b6:	4b22      	ldr	r3, [pc, #136]	@ (8008940 <UART_SetConfig+0x928>)
 80088b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088ba:	e00c      	b.n	80088d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80088bc:	4b21      	ldr	r3, [pc, #132]	@ (8008944 <UART_SetConfig+0x92c>)
 80088be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088c0:	e009      	b.n	80088d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088c8:	e005      	b.n	80088d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80088ca:	2300      	movs	r3, #0
 80088cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80088d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 80e7 	beq.w	8008aac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088e2:	4a19      	ldr	r2, [pc, #100]	@ (8008948 <UART_SetConfig+0x930>)
 80088e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088e8:	461a      	mov	r2, r3
 80088ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80088f0:	005a      	lsls	r2, r3, #1
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	085b      	lsrs	r3, r3, #1
 80088f8:	441a      	add	r2, r3
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008902:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008906:	2b0f      	cmp	r3, #15
 8008908:	d916      	bls.n	8008938 <UART_SetConfig+0x920>
 800890a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008910:	d212      	bcs.n	8008938 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008914:	b29b      	uxth	r3, r3
 8008916:	f023 030f 	bic.w	r3, r3, #15
 800891a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800891c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800891e:	085b      	lsrs	r3, r3, #1
 8008920:	b29b      	uxth	r3, r3
 8008922:	f003 0307 	and.w	r3, r3, #7
 8008926:	b29a      	uxth	r2, r3
 8008928:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800892a:	4313      	orrs	r3, r2
 800892c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008934:	60da      	str	r2, [r3, #12]
 8008936:	e0b9      	b.n	8008aac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800893e:	e0b5      	b.n	8008aac <UART_SetConfig+0xa94>
 8008940:	03d09000 	.word	0x03d09000
 8008944:	003d0900 	.word	0x003d0900
 8008948:	0800a98c 	.word	0x0800a98c
 800894c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008950:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008954:	2b20      	cmp	r3, #32
 8008956:	dc49      	bgt.n	80089ec <UART_SetConfig+0x9d4>
 8008958:	2b00      	cmp	r3, #0
 800895a:	db7c      	blt.n	8008a56 <UART_SetConfig+0xa3e>
 800895c:	2b20      	cmp	r3, #32
 800895e:	d87a      	bhi.n	8008a56 <UART_SetConfig+0xa3e>
 8008960:	a201      	add	r2, pc, #4	@ (adr r2, 8008968 <UART_SetConfig+0x950>)
 8008962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008966:	bf00      	nop
 8008968:	080089f3 	.word	0x080089f3
 800896c:	080089fb 	.word	0x080089fb
 8008970:	08008a57 	.word	0x08008a57
 8008974:	08008a57 	.word	0x08008a57
 8008978:	08008a03 	.word	0x08008a03
 800897c:	08008a57 	.word	0x08008a57
 8008980:	08008a57 	.word	0x08008a57
 8008984:	08008a57 	.word	0x08008a57
 8008988:	08008a13 	.word	0x08008a13
 800898c:	08008a57 	.word	0x08008a57
 8008990:	08008a57 	.word	0x08008a57
 8008994:	08008a57 	.word	0x08008a57
 8008998:	08008a57 	.word	0x08008a57
 800899c:	08008a57 	.word	0x08008a57
 80089a0:	08008a57 	.word	0x08008a57
 80089a4:	08008a57 	.word	0x08008a57
 80089a8:	08008a23 	.word	0x08008a23
 80089ac:	08008a57 	.word	0x08008a57
 80089b0:	08008a57 	.word	0x08008a57
 80089b4:	08008a57 	.word	0x08008a57
 80089b8:	08008a57 	.word	0x08008a57
 80089bc:	08008a57 	.word	0x08008a57
 80089c0:	08008a57 	.word	0x08008a57
 80089c4:	08008a57 	.word	0x08008a57
 80089c8:	08008a57 	.word	0x08008a57
 80089cc:	08008a57 	.word	0x08008a57
 80089d0:	08008a57 	.word	0x08008a57
 80089d4:	08008a57 	.word	0x08008a57
 80089d8:	08008a57 	.word	0x08008a57
 80089dc:	08008a57 	.word	0x08008a57
 80089e0:	08008a57 	.word	0x08008a57
 80089e4:	08008a57 	.word	0x08008a57
 80089e8:	08008a49 	.word	0x08008a49
 80089ec:	2b40      	cmp	r3, #64	@ 0x40
 80089ee:	d02e      	beq.n	8008a4e <UART_SetConfig+0xa36>
 80089f0:	e031      	b.n	8008a56 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089f2:	f7fb fa7b 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 80089f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80089f8:	e033      	b.n	8008a62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089fa:	f7fb fa8d 	bl	8003f18 <HAL_RCC_GetPCLK2Freq>
 80089fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a00:	e02f      	b.n	8008a62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7fc fd3e 	bl	8005488 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a10:	e027      	b.n	8008a62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a12:	f107 0318 	add.w	r3, r7, #24
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fc fe8a 	bl	8005730 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a20:	e01f      	b.n	8008a62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a22:	4b2d      	ldr	r3, [pc, #180]	@ (8008ad8 <UART_SetConfig+0xac0>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 0320 	and.w	r3, r3, #32
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d009      	beq.n	8008a42 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8008ad8 <UART_SetConfig+0xac0>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	08db      	lsrs	r3, r3, #3
 8008a34:	f003 0303 	and.w	r3, r3, #3
 8008a38:	4a28      	ldr	r2, [pc, #160]	@ (8008adc <UART_SetConfig+0xac4>)
 8008a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a40:	e00f      	b.n	8008a62 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008a42:	4b26      	ldr	r3, [pc, #152]	@ (8008adc <UART_SetConfig+0xac4>)
 8008a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a46:	e00c      	b.n	8008a62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a48:	4b25      	ldr	r3, [pc, #148]	@ (8008ae0 <UART_SetConfig+0xac8>)
 8008a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a4c:	e009      	b.n	8008a62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a54:	e005      	b.n	8008a62 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008a56:	2300      	movs	r3, #0
 8008a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008a60:	bf00      	nop
    }

    if (pclk != 0U)
 8008a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d021      	beq.n	8008aac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ae4 <UART_SetConfig+0xacc>)
 8008a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a72:	461a      	mov	r2, r3
 8008a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a76:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	085b      	lsrs	r3, r3, #1
 8008a80:	441a      	add	r2, r3
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a8e:	2b0f      	cmp	r3, #15
 8008a90:	d909      	bls.n	8008aa6 <UART_SetConfig+0xa8e>
 8008a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a98:	d205      	bcs.n	8008aa6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	60da      	str	r2, [r3, #12]
 8008aa4:	e002      	b.n	8008aac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008ac8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3748      	adds	r7, #72	@ 0x48
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ad6:	bf00      	nop
 8008ad8:	58024400 	.word	0x58024400
 8008adc:	03d09000 	.word	0x03d09000
 8008ae0:	003d0900 	.word	0x003d0900
 8008ae4:	0800a98c 	.word	0x0800a98c

08008ae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af4:	f003 0308 	and.w	r3, r3, #8
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00a      	beq.n	8008b12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00a      	beq.n	8008b34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	430a      	orrs	r2, r1
 8008b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b38:	f003 0302 	and.w	r3, r3, #2
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00a      	beq.n	8008b56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	430a      	orrs	r2, r1
 8008b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b5a:	f003 0304 	and.w	r3, r3, #4
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00a      	beq.n	8008b78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	430a      	orrs	r2, r1
 8008b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b7c:	f003 0310 	and.w	r3, r3, #16
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00a      	beq.n	8008b9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	430a      	orrs	r2, r1
 8008b98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b9e:	f003 0320 	and.w	r3, r3, #32
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00a      	beq.n	8008bbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d01a      	beq.n	8008bfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	430a      	orrs	r2, r1
 8008bdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008be2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008be6:	d10a      	bne.n	8008bfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	430a      	orrs	r2, r1
 8008bfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00a      	beq.n	8008c20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	430a      	orrs	r2, r1
 8008c1e:	605a      	str	r2, [r3, #4]
  }
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b098      	sub	sp, #96	@ 0x60
 8008c30:	af02      	add	r7, sp, #8
 8008c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c3c:	f7f9 fdb2 	bl	80027a4 <HAL_GetTick>
 8008c40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f003 0308 	and.w	r3, r3, #8
 8008c4c:	2b08      	cmp	r3, #8
 8008c4e:	d12f      	bne.n	8008cb0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f88e 	bl	8008d80 <UART_WaitOnFlagUntilTimeout>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d022      	beq.n	8008cb0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c72:	e853 3f00 	ldrex	r3, [r3]
 8008c76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	461a      	mov	r2, r3
 8008c86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c88:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c8a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c90:	e841 2300 	strex	r3, r2, [r1]
 8008c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1e6      	bne.n	8008c6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2220      	movs	r2, #32
 8008ca0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cac:	2303      	movs	r3, #3
 8008cae:	e063      	b.n	8008d78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 0304 	and.w	r3, r3, #4
 8008cba:	2b04      	cmp	r3, #4
 8008cbc:	d149      	bne.n	8008d52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cbe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f857 	bl	8008d80 <UART_WaitOnFlagUntilTimeout>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d03c      	beq.n	8008d52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce0:	e853 3f00 	ldrex	r3, [r3]
 8008ce4:	623b      	str	r3, [r7, #32]
   return(result);
 8008ce6:	6a3b      	ldr	r3, [r7, #32]
 8008ce8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cf6:	633b      	str	r3, [r7, #48]	@ 0x30
 8008cf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cfe:	e841 2300 	strex	r3, r2, [r1]
 8008d02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1e6      	bne.n	8008cd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3308      	adds	r3, #8
 8008d10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	e853 3f00 	ldrex	r3, [r3]
 8008d18:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f023 0301 	bic.w	r3, r3, #1
 8008d20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	3308      	adds	r3, #8
 8008d28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d2a:	61fa      	str	r2, [r7, #28]
 8008d2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2e:	69b9      	ldr	r1, [r7, #24]
 8008d30:	69fa      	ldr	r2, [r7, #28]
 8008d32:	e841 2300 	strex	r3, r2, [r1]
 8008d36:	617b      	str	r3, [r7, #20]
   return(result);
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1e5      	bne.n	8008d0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2220      	movs	r2, #32
 8008d42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e012      	b.n	8008d78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2220      	movs	r2, #32
 8008d56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2220      	movs	r2, #32
 8008d5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3758      	adds	r7, #88	@ 0x58
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	603b      	str	r3, [r7, #0]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d90:	e04f      	b.n	8008e32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d98:	d04b      	beq.n	8008e32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d9a:	f7f9 fd03 	bl	80027a4 <HAL_GetTick>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	69ba      	ldr	r2, [r7, #24]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d302      	bcc.n	8008db0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d101      	bne.n	8008db4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e04e      	b.n	8008e52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0304 	and.w	r3, r3, #4
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d037      	beq.n	8008e32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	2b80      	cmp	r3, #128	@ 0x80
 8008dc6:	d034      	beq.n	8008e32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	2b40      	cmp	r3, #64	@ 0x40
 8008dcc:	d031      	beq.n	8008e32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	69db      	ldr	r3, [r3, #28]
 8008dd4:	f003 0308 	and.w	r3, r3, #8
 8008dd8:	2b08      	cmp	r3, #8
 8008dda:	d110      	bne.n	8008dfe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2208      	movs	r2, #8
 8008de2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f000 f839 	bl	8008e5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2208      	movs	r2, #8
 8008dee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e029      	b.n	8008e52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	69db      	ldr	r3, [r3, #28]
 8008e04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e0c:	d111      	bne.n	8008e32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f000 f81f 	bl	8008e5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2220      	movs	r2, #32
 8008e22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	e00f      	b.n	8008e52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	69da      	ldr	r2, [r3, #28]
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	bf0c      	ite	eq
 8008e42:	2301      	moveq	r3, #1
 8008e44:	2300      	movne	r3, #0
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	461a      	mov	r2, r3
 8008e4a:	79fb      	ldrb	r3, [r7, #7]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d0a0      	beq.n	8008d92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
	...

08008e5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b095      	sub	sp, #84	@ 0x54
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e6c:	e853 3f00 	ldrex	r3, [r3]
 8008e70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e82:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e84:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e8a:	e841 2300 	strex	r3, r2, [r1]
 8008e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1e6      	bne.n	8008e64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3308      	adds	r3, #8
 8008e9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	e853 3f00 	ldrex	r3, [r3]
 8008ea4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ea6:	69fa      	ldr	r2, [r7, #28]
 8008ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8008f24 <UART_EndRxTransfer+0xc8>)
 8008eaa:	4013      	ands	r3, r2
 8008eac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3308      	adds	r3, #8
 8008eb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008eb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ebc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ebe:	e841 2300 	strex	r3, r2, [r1]
 8008ec2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1e5      	bne.n	8008e96 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d118      	bne.n	8008f04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	e853 3f00 	ldrex	r3, [r3]
 8008ede:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	f023 0310 	bic.w	r3, r3, #16
 8008ee6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	461a      	mov	r2, r3
 8008eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ef0:	61bb      	str	r3, [r7, #24]
 8008ef2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef4:	6979      	ldr	r1, [r7, #20]
 8008ef6:	69ba      	ldr	r2, [r7, #24]
 8008ef8:	e841 2300 	strex	r3, r2, [r1]
 8008efc:	613b      	str	r3, [r7, #16]
   return(result);
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1e6      	bne.n	8008ed2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2220      	movs	r2, #32
 8008f08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008f18:	bf00      	nop
 8008f1a:	3754      	adds	r7, #84	@ 0x54
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr
 8008f24:	effffffe 	.word	0xeffffffe

08008f28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d101      	bne.n	8008f3e <HAL_UARTEx_DisableFifoMode+0x16>
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	e027      	b.n	8008f8e <HAL_UARTEx_DisableFifoMode+0x66>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2224      	movs	r2, #36	@ 0x24
 8008f4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f022 0201 	bic.w	r2, r2, #1
 8008f64:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008f6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2220      	movs	r2, #32
 8008f80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3714      	adds	r7, #20
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr

08008f9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d101      	bne.n	8008fb2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008fae:	2302      	movs	r3, #2
 8008fb0:	e02d      	b.n	800900e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2224      	movs	r2, #36	@ 0x24
 8008fbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f022 0201 	bic.w	r2, r2, #1
 8008fd8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	683a      	ldr	r2, [r7, #0]
 8008fea:	430a      	orrs	r2, r1
 8008fec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f850 	bl	8009094 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2220      	movs	r2, #32
 8009000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009026:	2b01      	cmp	r3, #1
 8009028:	d101      	bne.n	800902e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800902a:	2302      	movs	r3, #2
 800902c:	e02d      	b.n	800908a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2224      	movs	r2, #36	@ 0x24
 800903a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f022 0201 	bic.w	r2, r2, #1
 8009054:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	683a      	ldr	r2, [r7, #0]
 8009066:	430a      	orrs	r2, r1
 8009068:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 f812 	bl	8009094 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2220      	movs	r2, #32
 800907c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
	...

08009094 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d108      	bne.n	80090b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80090b4:	e031      	b.n	800911a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80090b6:	2310      	movs	r3, #16
 80090b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80090ba:	2310      	movs	r3, #16
 80090bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	0e5b      	lsrs	r3, r3, #25
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	f003 0307 	and.w	r3, r3, #7
 80090cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	0f5b      	lsrs	r3, r3, #29
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	f003 0307 	and.w	r3, r3, #7
 80090dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090de:	7bbb      	ldrb	r3, [r7, #14]
 80090e0:	7b3a      	ldrb	r2, [r7, #12]
 80090e2:	4911      	ldr	r1, [pc, #68]	@ (8009128 <UARTEx_SetNbDataToProcess+0x94>)
 80090e4:	5c8a      	ldrb	r2, [r1, r2]
 80090e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80090ea:	7b3a      	ldrb	r2, [r7, #12]
 80090ec:	490f      	ldr	r1, [pc, #60]	@ (800912c <UARTEx_SetNbDataToProcess+0x98>)
 80090ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090fc:	7bfb      	ldrb	r3, [r7, #15]
 80090fe:	7b7a      	ldrb	r2, [r7, #13]
 8009100:	4909      	ldr	r1, [pc, #36]	@ (8009128 <UARTEx_SetNbDataToProcess+0x94>)
 8009102:	5c8a      	ldrb	r2, [r1, r2]
 8009104:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009108:	7b7a      	ldrb	r2, [r7, #13]
 800910a:	4908      	ldr	r1, [pc, #32]	@ (800912c <UARTEx_SetNbDataToProcess+0x98>)
 800910c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800910e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009112:	b29a      	uxth	r2, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800911a:	bf00      	nop
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	0800a9a4 	.word	0x0800a9a4
 800912c:	0800a9ac 	.word	0x0800a9ac

08009130 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009130:	b580      	push	{r7, lr}
 8009132:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009134:	4b05      	ldr	r3, [pc, #20]	@ (800914c <SysTick_Handler+0x1c>)
 8009136:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009138:	f000 fa58 	bl	80095ec <xTaskGetSchedulerState>
 800913c:	4603      	mov	r3, r0
 800913e:	2b01      	cmp	r3, #1
 8009140:	d001      	beq.n	8009146 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009142:	f000 f8f9 	bl	8009338 <xPortSysTickHandler>
  }
}
 8009146:	bf00      	nop
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	e000e010 	.word	0xe000e010

08009150 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	689a      	ldr	r2, [r3, #8]
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	683a      	ldr	r2, [r7, #0]
 800917a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	1c5a      	adds	r2, r3, #1
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	601a      	str	r2, [r3, #0]
}
 800918c:	bf00      	nop
 800918e:	3714      	adds	r7, #20
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	6892      	ldr	r2, [r2, #8]
 80091ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	6852      	ldr	r2, [r2, #4]
 80091b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d103      	bne.n	80091cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	689a      	ldr	r2, [r3, #8]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	1e5a      	subs	r2, r3, #1
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	0000      	movs	r0, r0
	...

080091f0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80091f0:	4b07      	ldr	r3, [pc, #28]	@ (8009210 <pxCurrentTCBConst2>)
 80091f2:	6819      	ldr	r1, [r3, #0]
 80091f4:	6808      	ldr	r0, [r1, #0]
 80091f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091fa:	f380 8809 	msr	PSP, r0
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f04f 0000 	mov.w	r0, #0
 8009206:	f380 8811 	msr	BASEPRI, r0
 800920a:	4770      	bx	lr
 800920c:	f3af 8000 	nop.w

08009210 <pxCurrentTCBConst2>:
 8009210:	2400033c 	.word	0x2400033c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009214:	bf00      	nop
 8009216:	bf00      	nop

08009218 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800921e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009222:	f383 8811 	msr	BASEPRI, r3
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	f3bf 8f4f 	dsb	sy
 800922e:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009230:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009232:	4b10      	ldr	r3, [pc, #64]	@ (8009274 <vPortEnterCritical+0x5c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	3301      	adds	r3, #1
 8009238:	4a0e      	ldr	r2, [pc, #56]	@ (8009274 <vPortEnterCritical+0x5c>)
 800923a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800923c:	4b0d      	ldr	r3, [pc, #52]	@ (8009274 <vPortEnterCritical+0x5c>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d110      	bne.n	8009266 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009244:	4b0c      	ldr	r3, [pc, #48]	@ (8009278 <vPortEnterCritical+0x60>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	b2db      	uxtb	r3, r3
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00b      	beq.n	8009266 <vPortEnterCritical+0x4e>
	__asm volatile
 800924e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009252:	f383 8811 	msr	BASEPRI, r3
 8009256:	f3bf 8f6f 	isb	sy
 800925a:	f3bf 8f4f 	dsb	sy
 800925e:	603b      	str	r3, [r7, #0]
}
 8009260:	bf00      	nop
 8009262:	bf00      	nop
 8009264:	e7fd      	b.n	8009262 <vPortEnterCritical+0x4a>
	}
}
 8009266:	bf00      	nop
 8009268:	370c      	adds	r7, #12
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	24000010 	.word	0x24000010
 8009278:	e000ed04 	.word	0xe000ed04

0800927c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009282:	4b12      	ldr	r3, [pc, #72]	@ (80092cc <vPortExitCritical+0x50>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10b      	bne.n	80092a2 <vPortExitCritical+0x26>
	__asm volatile
 800928a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800928e:	f383 8811 	msr	BASEPRI, r3
 8009292:	f3bf 8f6f 	isb	sy
 8009296:	f3bf 8f4f 	dsb	sy
 800929a:	607b      	str	r3, [r7, #4]
}
 800929c:	bf00      	nop
 800929e:	bf00      	nop
 80092a0:	e7fd      	b.n	800929e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80092a2:	4b0a      	ldr	r3, [pc, #40]	@ (80092cc <vPortExitCritical+0x50>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	3b01      	subs	r3, #1
 80092a8:	4a08      	ldr	r2, [pc, #32]	@ (80092cc <vPortExitCritical+0x50>)
 80092aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80092ac:	4b07      	ldr	r3, [pc, #28]	@ (80092cc <vPortExitCritical+0x50>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d105      	bne.n	80092c0 <vPortExitCritical+0x44>
 80092b4:	2300      	movs	r3, #0
 80092b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80092be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80092c0:	bf00      	nop
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr
 80092cc:	24000010 	.word	0x24000010

080092d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80092d0:	f3ef 8009 	mrs	r0, PSP
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	4b15      	ldr	r3, [pc, #84]	@ (8009330 <pxCurrentTCBConst>)
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	f01e 0f10 	tst.w	lr, #16
 80092e0:	bf08      	it	eq
 80092e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80092e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ea:	6010      	str	r0, [r2, #0]
 80092ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80092f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80092f4:	f380 8811 	msr	BASEPRI, r0
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f000 f8f6 	bl	80094f0 <vTaskSwitchContext>
 8009304:	f04f 0000 	mov.w	r0, #0
 8009308:	f380 8811 	msr	BASEPRI, r0
 800930c:	bc09      	pop	{r0, r3}
 800930e:	6819      	ldr	r1, [r3, #0]
 8009310:	6808      	ldr	r0, [r1, #0]
 8009312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009316:	f01e 0f10 	tst.w	lr, #16
 800931a:	bf08      	it	eq
 800931c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009320:	f380 8809 	msr	PSP, r0
 8009324:	f3bf 8f6f 	isb	sy
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	f3af 8000 	nop.w

08009330 <pxCurrentTCBConst>:
 8009330:	2400033c 	.word	0x2400033c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009334:	bf00      	nop
 8009336:	bf00      	nop

08009338 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
	__asm volatile
 800933e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009342:	f383 8811 	msr	BASEPRI, r3
 8009346:	f3bf 8f6f 	isb	sy
 800934a:	f3bf 8f4f 	dsb	sy
 800934e:	607b      	str	r3, [r7, #4]
}
 8009350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009352:	f000 f813 	bl	800937c <xTaskIncrementTick>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d003      	beq.n	8009364 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800935c:	4b06      	ldr	r3, [pc, #24]	@ (8009378 <xPortSysTickHandler+0x40>)
 800935e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009362:	601a      	str	r2, [r3, #0]
 8009364:	2300      	movs	r3, #0
 8009366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	f383 8811 	msr	BASEPRI, r3
}
 800936e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009370:	bf00      	nop
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	e000ed04 	.word	0xe000ed04

0800937c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b086      	sub	sp, #24
 8009380:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009382:	2300      	movs	r3, #0
 8009384:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009386:	4b4f      	ldr	r3, [pc, #316]	@ (80094c4 <xTaskIncrementTick+0x148>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	f040 8090 	bne.w	80094b0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009390:	4b4d      	ldr	r3, [pc, #308]	@ (80094c8 <xTaskIncrementTick+0x14c>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3301      	adds	r3, #1
 8009396:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009398:	4a4b      	ldr	r2, [pc, #300]	@ (80094c8 <xTaskIncrementTick+0x14c>)
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d121      	bne.n	80093e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80093a4:	4b49      	ldr	r3, [pc, #292]	@ (80094cc <xTaskIncrementTick+0x150>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00b      	beq.n	80093c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80093ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b2:	f383 8811 	msr	BASEPRI, r3
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	603b      	str	r3, [r7, #0]
}
 80093c0:	bf00      	nop
 80093c2:	bf00      	nop
 80093c4:	e7fd      	b.n	80093c2 <xTaskIncrementTick+0x46>
 80093c6:	4b41      	ldr	r3, [pc, #260]	@ (80094cc <xTaskIncrementTick+0x150>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	60fb      	str	r3, [r7, #12]
 80093cc:	4b40      	ldr	r3, [pc, #256]	@ (80094d0 <xTaskIncrementTick+0x154>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a3e      	ldr	r2, [pc, #248]	@ (80094cc <xTaskIncrementTick+0x150>)
 80093d2:	6013      	str	r3, [r2, #0]
 80093d4:	4a3e      	ldr	r2, [pc, #248]	@ (80094d0 <xTaskIncrementTick+0x154>)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6013      	str	r3, [r2, #0]
 80093da:	4b3e      	ldr	r3, [pc, #248]	@ (80094d4 <xTaskIncrementTick+0x158>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3301      	adds	r3, #1
 80093e0:	4a3c      	ldr	r2, [pc, #240]	@ (80094d4 <xTaskIncrementTick+0x158>)
 80093e2:	6013      	str	r3, [r2, #0]
 80093e4:	f000 f8e2 	bl	80095ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80093e8:	4b3b      	ldr	r3, [pc, #236]	@ (80094d8 <xTaskIncrementTick+0x15c>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	693a      	ldr	r2, [r7, #16]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d349      	bcc.n	8009486 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093f2:	4b36      	ldr	r3, [pc, #216]	@ (80094cc <xTaskIncrementTick+0x150>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d104      	bne.n	8009406 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093fc:	4b36      	ldr	r3, [pc, #216]	@ (80094d8 <xTaskIncrementTick+0x15c>)
 80093fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009402:	601a      	str	r2, [r3, #0]
					break;
 8009404:	e03f      	b.n	8009486 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009406:	4b31      	ldr	r3, [pc, #196]	@ (80094cc <xTaskIncrementTick+0x150>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009416:	693a      	ldr	r2, [r7, #16]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	429a      	cmp	r2, r3
 800941c:	d203      	bcs.n	8009426 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800941e:	4a2e      	ldr	r2, [pc, #184]	@ (80094d8 <xTaskIncrementTick+0x15c>)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009424:	e02f      	b.n	8009486 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	3304      	adds	r3, #4
 800942a:	4618      	mov	r0, r3
 800942c:	f7ff feb4 	bl	8009198 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009434:	2b00      	cmp	r3, #0
 8009436:	d004      	beq.n	8009442 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	3318      	adds	r3, #24
 800943c:	4618      	mov	r0, r3
 800943e:	f7ff feab 	bl	8009198 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009446:	4b25      	ldr	r3, [pc, #148]	@ (80094dc <xTaskIncrementTick+0x160>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	429a      	cmp	r2, r3
 800944c:	d903      	bls.n	8009456 <xTaskIncrementTick+0xda>
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009452:	4a22      	ldr	r2, [pc, #136]	@ (80094dc <xTaskIncrementTick+0x160>)
 8009454:	6013      	str	r3, [r2, #0]
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800945a:	4613      	mov	r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4413      	add	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	4a1f      	ldr	r2, [pc, #124]	@ (80094e0 <xTaskIncrementTick+0x164>)
 8009464:	441a      	add	r2, r3
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	3304      	adds	r3, #4
 800946a:	4619      	mov	r1, r3
 800946c:	4610      	mov	r0, r2
 800946e:	f7ff fe6f 	bl	8009150 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009476:	4b1b      	ldr	r3, [pc, #108]	@ (80094e4 <xTaskIncrementTick+0x168>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800947c:	429a      	cmp	r2, r3
 800947e:	d3b8      	bcc.n	80093f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009480:	2301      	movs	r3, #1
 8009482:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009484:	e7b5      	b.n	80093f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009486:	4b17      	ldr	r3, [pc, #92]	@ (80094e4 <xTaskIncrementTick+0x168>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800948c:	4914      	ldr	r1, [pc, #80]	@ (80094e0 <xTaskIncrementTick+0x164>)
 800948e:	4613      	mov	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	440b      	add	r3, r1
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d901      	bls.n	80094a2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800949e:	2301      	movs	r3, #1
 80094a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80094a2:	4b11      	ldr	r3, [pc, #68]	@ (80094e8 <xTaskIncrementTick+0x16c>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d007      	beq.n	80094ba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80094aa:	2301      	movs	r3, #1
 80094ac:	617b      	str	r3, [r7, #20]
 80094ae:	e004      	b.n	80094ba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80094b0:	4b0e      	ldr	r3, [pc, #56]	@ (80094ec <xTaskIncrementTick+0x170>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	3301      	adds	r3, #1
 80094b6:	4a0d      	ldr	r2, [pc, #52]	@ (80094ec <xTaskIncrementTick+0x170>)
 80094b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80094ba:	697b      	ldr	r3, [r7, #20]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	240007c4 	.word	0x240007c4
 80094c8:	240007a8 	.word	0x240007a8
 80094cc:	240007a0 	.word	0x240007a0
 80094d0:	240007a4 	.word	0x240007a4
 80094d4:	240007bc 	.word	0x240007bc
 80094d8:	240007c0 	.word	0x240007c0
 80094dc:	240007ac 	.word	0x240007ac
 80094e0:	24000340 	.word	0x24000340
 80094e4:	2400033c 	.word	0x2400033c
 80094e8:	240007b8 	.word	0x240007b8
 80094ec:	240007b4 	.word	0x240007b4

080094f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80094f6:	4b28      	ldr	r3, [pc, #160]	@ (8009598 <vTaskSwitchContext+0xa8>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d003      	beq.n	8009506 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80094fe:	4b27      	ldr	r3, [pc, #156]	@ (800959c <vTaskSwitchContext+0xac>)
 8009500:	2201      	movs	r2, #1
 8009502:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009504:	e042      	b.n	800958c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009506:	4b25      	ldr	r3, [pc, #148]	@ (800959c <vTaskSwitchContext+0xac>)
 8009508:	2200      	movs	r2, #0
 800950a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800950c:	4b24      	ldr	r3, [pc, #144]	@ (80095a0 <vTaskSwitchContext+0xb0>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	60fb      	str	r3, [r7, #12]
 8009512:	e011      	b.n	8009538 <vTaskSwitchContext+0x48>
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d10b      	bne.n	8009532 <vTaskSwitchContext+0x42>
	__asm volatile
 800951a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800951e:	f383 8811 	msr	BASEPRI, r3
 8009522:	f3bf 8f6f 	isb	sy
 8009526:	f3bf 8f4f 	dsb	sy
 800952a:	607b      	str	r3, [r7, #4]
}
 800952c:	bf00      	nop
 800952e:	bf00      	nop
 8009530:	e7fd      	b.n	800952e <vTaskSwitchContext+0x3e>
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	3b01      	subs	r3, #1
 8009536:	60fb      	str	r3, [r7, #12]
 8009538:	491a      	ldr	r1, [pc, #104]	@ (80095a4 <vTaskSwitchContext+0xb4>)
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	4613      	mov	r3, r2
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4413      	add	r3, r2
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	440b      	add	r3, r1
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d0e3      	beq.n	8009514 <vTaskSwitchContext+0x24>
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	4613      	mov	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	4a13      	ldr	r2, [pc, #76]	@ (80095a4 <vTaskSwitchContext+0xb4>)
 8009558:	4413      	add	r3, r2
 800955a:	60bb      	str	r3, [r7, #8]
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	685a      	ldr	r2, [r3, #4]
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	605a      	str	r2, [r3, #4]
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	685a      	ldr	r2, [r3, #4]
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	3308      	adds	r3, #8
 800956e:	429a      	cmp	r2, r3
 8009570:	d104      	bne.n	800957c <vTaskSwitchContext+0x8c>
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	685a      	ldr	r2, [r3, #4]
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	605a      	str	r2, [r3, #4]
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	4a09      	ldr	r2, [pc, #36]	@ (80095a8 <vTaskSwitchContext+0xb8>)
 8009584:	6013      	str	r3, [r2, #0]
 8009586:	4a06      	ldr	r2, [pc, #24]	@ (80095a0 <vTaskSwitchContext+0xb0>)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6013      	str	r3, [r2, #0]
}
 800958c:	bf00      	nop
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	240007c4 	.word	0x240007c4
 800959c:	240007b8 	.word	0x240007b8
 80095a0:	240007ac 	.word	0x240007ac
 80095a4:	24000340 	.word	0x24000340
 80095a8:	2400033c 	.word	0x2400033c

080095ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095b2:	4b0c      	ldr	r3, [pc, #48]	@ (80095e4 <prvResetNextTaskUnblockTime+0x38>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d104      	bne.n	80095c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80095bc:	4b0a      	ldr	r3, [pc, #40]	@ (80095e8 <prvResetNextTaskUnblockTime+0x3c>)
 80095be:	f04f 32ff 	mov.w	r2, #4294967295
 80095c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80095c4:	e008      	b.n	80095d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095c6:	4b07      	ldr	r3, [pc, #28]	@ (80095e4 <prvResetNextTaskUnblockTime+0x38>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	4a04      	ldr	r2, [pc, #16]	@ (80095e8 <prvResetNextTaskUnblockTime+0x3c>)
 80095d6:	6013      	str	r3, [r2, #0]
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	240007a0 	.word	0x240007a0
 80095e8:	240007c0 	.word	0x240007c0

080095ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80095f2:	4b0b      	ldr	r3, [pc, #44]	@ (8009620 <xTaskGetSchedulerState+0x34>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d102      	bne.n	8009600 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80095fa:	2301      	movs	r3, #1
 80095fc:	607b      	str	r3, [r7, #4]
 80095fe:	e008      	b.n	8009612 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009600:	4b08      	ldr	r3, [pc, #32]	@ (8009624 <xTaskGetSchedulerState+0x38>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d102      	bne.n	800960e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009608:	2302      	movs	r3, #2
 800960a:	607b      	str	r3, [r7, #4]
 800960c:	e001      	b.n	8009612 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800960e:	2300      	movs	r3, #0
 8009610:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009612:	687b      	ldr	r3, [r7, #4]
	}
 8009614:	4618      	mov	r0, r3
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr
 8009620:	240007b0 	.word	0x240007b0
 8009624:	240007c4 	.word	0x240007c4

08009628 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009628:	b580      	push	{r7, lr}
 800962a:	b08a      	sub	sp, #40	@ 0x28
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	603b      	str	r3, [r7, #0]
 8009634:	4613      	mov	r3, r2
 8009636:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009638:	2301      	movs	r3, #1
 800963a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10b      	bne.n	800965a <xTaskGenericNotify+0x32>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	61bb      	str	r3, [r7, #24]
}
 8009654:	bf00      	nop
 8009656:	bf00      	nop
 8009658:	e7fd      	b.n	8009656 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800965e:	f7ff fddb 	bl	8009218 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d003      	beq.n	8009670 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009668:	6a3b      	ldr	r3, [r7, #32]
 800966a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009670:	6a3b      	ldr	r3, [r7, #32]
 8009672:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8009676:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009678:	6a3b      	ldr	r3, [r7, #32]
 800967a:	2202      	movs	r2, #2
 800967c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8009680:	79fb      	ldrb	r3, [r7, #7]
 8009682:	2b04      	cmp	r3, #4
 8009684:	d827      	bhi.n	80096d6 <xTaskGenericNotify+0xae>
 8009686:	a201      	add	r2, pc, #4	@ (adr r2, 800968c <xTaskGenericNotify+0x64>)
 8009688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800968c:	080096f9 	.word	0x080096f9
 8009690:	080096a1 	.word	0x080096a1
 8009694:	080096af 	.word	0x080096af
 8009698:	080096bb 	.word	0x080096bb
 800969c:	080096c3 	.word	0x080096c3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80096a0:	6a3b      	ldr	r3, [r7, #32]
 80096a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	431a      	orrs	r2, r3
 80096a8:	6a3b      	ldr	r3, [r7, #32]
 80096aa:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80096ac:	e027      	b.n	80096fe <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80096ae:	6a3b      	ldr	r3, [r7, #32]
 80096b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096b2:	1c5a      	adds	r2, r3, #1
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80096b8:	e021      	b.n	80096fe <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80096ba:	6a3b      	ldr	r3, [r7, #32]
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80096c0:	e01d      	b.n	80096fe <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80096c2:	7ffb      	ldrb	r3, [r7, #31]
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	d003      	beq.n	80096d0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80096c8:	6a3b      	ldr	r3, [r7, #32]
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80096ce:	e016      	b.n	80096fe <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 80096d0:	2300      	movs	r3, #0
 80096d2:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80096d4:	e013      	b.n	80096fe <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80096d6:	6a3b      	ldr	r3, [r7, #32]
 80096d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096de:	d00d      	beq.n	80096fc <xTaskGenericNotify+0xd4>
	__asm volatile
 80096e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	617b      	str	r3, [r7, #20]
}
 80096f2:	bf00      	nop
 80096f4:	bf00      	nop
 80096f6:	e7fd      	b.n	80096f4 <xTaskGenericNotify+0xcc>
					break;
 80096f8:	bf00      	nop
 80096fa:	e000      	b.n	80096fe <xTaskGenericNotify+0xd6>

					break;
 80096fc:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80096fe:	7ffb      	ldrb	r3, [r7, #31]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d13b      	bne.n	800977c <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009704:	6a3b      	ldr	r3, [r7, #32]
 8009706:	3304      	adds	r3, #4
 8009708:	4618      	mov	r0, r3
 800970a:	f7ff fd45 	bl	8009198 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800970e:	6a3b      	ldr	r3, [r7, #32]
 8009710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009712:	4b1e      	ldr	r3, [pc, #120]	@ (800978c <xTaskGenericNotify+0x164>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	429a      	cmp	r2, r3
 8009718:	d903      	bls.n	8009722 <xTaskGenericNotify+0xfa>
 800971a:	6a3b      	ldr	r3, [r7, #32]
 800971c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800971e:	4a1b      	ldr	r2, [pc, #108]	@ (800978c <xTaskGenericNotify+0x164>)
 8009720:	6013      	str	r3, [r2, #0]
 8009722:	6a3b      	ldr	r3, [r7, #32]
 8009724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009726:	4613      	mov	r3, r2
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4413      	add	r3, r2
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	4a18      	ldr	r2, [pc, #96]	@ (8009790 <xTaskGenericNotify+0x168>)
 8009730:	441a      	add	r2, r3
 8009732:	6a3b      	ldr	r3, [r7, #32]
 8009734:	3304      	adds	r3, #4
 8009736:	4619      	mov	r1, r3
 8009738:	4610      	mov	r0, r2
 800973a:	f7ff fd09 	bl	8009150 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800973e:	6a3b      	ldr	r3, [r7, #32]
 8009740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00b      	beq.n	800975e <xTaskGenericNotify+0x136>
	__asm volatile
 8009746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800974a:	f383 8811 	msr	BASEPRI, r3
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	613b      	str	r3, [r7, #16]
}
 8009758:	bf00      	nop
 800975a:	bf00      	nop
 800975c:	e7fd      	b.n	800975a <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800975e:	6a3b      	ldr	r3, [r7, #32]
 8009760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009762:	4b0c      	ldr	r3, [pc, #48]	@ (8009794 <xTaskGenericNotify+0x16c>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009768:	429a      	cmp	r2, r3
 800976a:	d907      	bls.n	800977c <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800976c:	4b0a      	ldr	r3, [pc, #40]	@ (8009798 <xTaskGenericNotify+0x170>)
 800976e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009772:	601a      	str	r2, [r3, #0]
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800977c:	f7ff fd7e 	bl	800927c <vPortExitCritical>

		return xReturn;
 8009780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8009782:	4618      	mov	r0, r3
 8009784:	3728      	adds	r7, #40	@ 0x28
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	240007ac 	.word	0x240007ac
 8009790:	24000340 	.word	0x24000340
 8009794:	2400033c 	.word	0x2400033c
 8009798:	e000ed04 	.word	0xe000ed04

0800979c <std>:
 800979c:	2300      	movs	r3, #0
 800979e:	b510      	push	{r4, lr}
 80097a0:	4604      	mov	r4, r0
 80097a2:	e9c0 3300 	strd	r3, r3, [r0]
 80097a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097aa:	6083      	str	r3, [r0, #8]
 80097ac:	8181      	strh	r1, [r0, #12]
 80097ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80097b0:	81c2      	strh	r2, [r0, #14]
 80097b2:	6183      	str	r3, [r0, #24]
 80097b4:	4619      	mov	r1, r3
 80097b6:	2208      	movs	r2, #8
 80097b8:	305c      	adds	r0, #92	@ 0x5c
 80097ba:	f000 f9f9 	bl	8009bb0 <memset>
 80097be:	4b0d      	ldr	r3, [pc, #52]	@ (80097f4 <std+0x58>)
 80097c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80097c2:	4b0d      	ldr	r3, [pc, #52]	@ (80097f8 <std+0x5c>)
 80097c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80097c6:	4b0d      	ldr	r3, [pc, #52]	@ (80097fc <std+0x60>)
 80097c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80097ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009800 <std+0x64>)
 80097cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80097ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009804 <std+0x68>)
 80097d0:	6224      	str	r4, [r4, #32]
 80097d2:	429c      	cmp	r4, r3
 80097d4:	d006      	beq.n	80097e4 <std+0x48>
 80097d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80097da:	4294      	cmp	r4, r2
 80097dc:	d002      	beq.n	80097e4 <std+0x48>
 80097de:	33d0      	adds	r3, #208	@ 0xd0
 80097e0:	429c      	cmp	r4, r3
 80097e2:	d105      	bne.n	80097f0 <std+0x54>
 80097e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80097e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097ec:	f000 ba58 	b.w	8009ca0 <__retarget_lock_init_recursive>
 80097f0:	bd10      	pop	{r4, pc}
 80097f2:	bf00      	nop
 80097f4:	08009a01 	.word	0x08009a01
 80097f8:	08009a23 	.word	0x08009a23
 80097fc:	08009a5b 	.word	0x08009a5b
 8009800:	08009a7f 	.word	0x08009a7f
 8009804:	240007c8 	.word	0x240007c8

08009808 <stdio_exit_handler>:
 8009808:	4a02      	ldr	r2, [pc, #8]	@ (8009814 <stdio_exit_handler+0xc>)
 800980a:	4903      	ldr	r1, [pc, #12]	@ (8009818 <stdio_exit_handler+0x10>)
 800980c:	4803      	ldr	r0, [pc, #12]	@ (800981c <stdio_exit_handler+0x14>)
 800980e:	f000 b869 	b.w	80098e4 <_fwalk_sglue>
 8009812:	bf00      	nop
 8009814:	24000014 	.word	0x24000014
 8009818:	0800a559 	.word	0x0800a559
 800981c:	24000024 	.word	0x24000024

08009820 <cleanup_stdio>:
 8009820:	6841      	ldr	r1, [r0, #4]
 8009822:	4b0c      	ldr	r3, [pc, #48]	@ (8009854 <cleanup_stdio+0x34>)
 8009824:	4299      	cmp	r1, r3
 8009826:	b510      	push	{r4, lr}
 8009828:	4604      	mov	r4, r0
 800982a:	d001      	beq.n	8009830 <cleanup_stdio+0x10>
 800982c:	f000 fe94 	bl	800a558 <_fflush_r>
 8009830:	68a1      	ldr	r1, [r4, #8]
 8009832:	4b09      	ldr	r3, [pc, #36]	@ (8009858 <cleanup_stdio+0x38>)
 8009834:	4299      	cmp	r1, r3
 8009836:	d002      	beq.n	800983e <cleanup_stdio+0x1e>
 8009838:	4620      	mov	r0, r4
 800983a:	f000 fe8d 	bl	800a558 <_fflush_r>
 800983e:	68e1      	ldr	r1, [r4, #12]
 8009840:	4b06      	ldr	r3, [pc, #24]	@ (800985c <cleanup_stdio+0x3c>)
 8009842:	4299      	cmp	r1, r3
 8009844:	d004      	beq.n	8009850 <cleanup_stdio+0x30>
 8009846:	4620      	mov	r0, r4
 8009848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800984c:	f000 be84 	b.w	800a558 <_fflush_r>
 8009850:	bd10      	pop	{r4, pc}
 8009852:	bf00      	nop
 8009854:	240007c8 	.word	0x240007c8
 8009858:	24000830 	.word	0x24000830
 800985c:	24000898 	.word	0x24000898

08009860 <global_stdio_init.part.0>:
 8009860:	b510      	push	{r4, lr}
 8009862:	4b0b      	ldr	r3, [pc, #44]	@ (8009890 <global_stdio_init.part.0+0x30>)
 8009864:	4c0b      	ldr	r4, [pc, #44]	@ (8009894 <global_stdio_init.part.0+0x34>)
 8009866:	4a0c      	ldr	r2, [pc, #48]	@ (8009898 <global_stdio_init.part.0+0x38>)
 8009868:	601a      	str	r2, [r3, #0]
 800986a:	4620      	mov	r0, r4
 800986c:	2200      	movs	r2, #0
 800986e:	2104      	movs	r1, #4
 8009870:	f7ff ff94 	bl	800979c <std>
 8009874:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009878:	2201      	movs	r2, #1
 800987a:	2109      	movs	r1, #9
 800987c:	f7ff ff8e 	bl	800979c <std>
 8009880:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009884:	2202      	movs	r2, #2
 8009886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800988a:	2112      	movs	r1, #18
 800988c:	f7ff bf86 	b.w	800979c <std>
 8009890:	24000900 	.word	0x24000900
 8009894:	240007c8 	.word	0x240007c8
 8009898:	08009809 	.word	0x08009809

0800989c <__sfp_lock_acquire>:
 800989c:	4801      	ldr	r0, [pc, #4]	@ (80098a4 <__sfp_lock_acquire+0x8>)
 800989e:	f000 ba00 	b.w	8009ca2 <__retarget_lock_acquire_recursive>
 80098a2:	bf00      	nop
 80098a4:	24000909 	.word	0x24000909

080098a8 <__sfp_lock_release>:
 80098a8:	4801      	ldr	r0, [pc, #4]	@ (80098b0 <__sfp_lock_release+0x8>)
 80098aa:	f000 b9fb 	b.w	8009ca4 <__retarget_lock_release_recursive>
 80098ae:	bf00      	nop
 80098b0:	24000909 	.word	0x24000909

080098b4 <__sinit>:
 80098b4:	b510      	push	{r4, lr}
 80098b6:	4604      	mov	r4, r0
 80098b8:	f7ff fff0 	bl	800989c <__sfp_lock_acquire>
 80098bc:	6a23      	ldr	r3, [r4, #32]
 80098be:	b11b      	cbz	r3, 80098c8 <__sinit+0x14>
 80098c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098c4:	f7ff bff0 	b.w	80098a8 <__sfp_lock_release>
 80098c8:	4b04      	ldr	r3, [pc, #16]	@ (80098dc <__sinit+0x28>)
 80098ca:	6223      	str	r3, [r4, #32]
 80098cc:	4b04      	ldr	r3, [pc, #16]	@ (80098e0 <__sinit+0x2c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1f5      	bne.n	80098c0 <__sinit+0xc>
 80098d4:	f7ff ffc4 	bl	8009860 <global_stdio_init.part.0>
 80098d8:	e7f2      	b.n	80098c0 <__sinit+0xc>
 80098da:	bf00      	nop
 80098dc:	08009821 	.word	0x08009821
 80098e0:	24000900 	.word	0x24000900

080098e4 <_fwalk_sglue>:
 80098e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098e8:	4607      	mov	r7, r0
 80098ea:	4688      	mov	r8, r1
 80098ec:	4614      	mov	r4, r2
 80098ee:	2600      	movs	r6, #0
 80098f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098f4:	f1b9 0901 	subs.w	r9, r9, #1
 80098f8:	d505      	bpl.n	8009906 <_fwalk_sglue+0x22>
 80098fa:	6824      	ldr	r4, [r4, #0]
 80098fc:	2c00      	cmp	r4, #0
 80098fe:	d1f7      	bne.n	80098f0 <_fwalk_sglue+0xc>
 8009900:	4630      	mov	r0, r6
 8009902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009906:	89ab      	ldrh	r3, [r5, #12]
 8009908:	2b01      	cmp	r3, #1
 800990a:	d907      	bls.n	800991c <_fwalk_sglue+0x38>
 800990c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009910:	3301      	adds	r3, #1
 8009912:	d003      	beq.n	800991c <_fwalk_sglue+0x38>
 8009914:	4629      	mov	r1, r5
 8009916:	4638      	mov	r0, r7
 8009918:	47c0      	blx	r8
 800991a:	4306      	orrs	r6, r0
 800991c:	3568      	adds	r5, #104	@ 0x68
 800991e:	e7e9      	b.n	80098f4 <_fwalk_sglue+0x10>

08009920 <iprintf>:
 8009920:	b40f      	push	{r0, r1, r2, r3}
 8009922:	b507      	push	{r0, r1, r2, lr}
 8009924:	4906      	ldr	r1, [pc, #24]	@ (8009940 <iprintf+0x20>)
 8009926:	ab04      	add	r3, sp, #16
 8009928:	6808      	ldr	r0, [r1, #0]
 800992a:	f853 2b04 	ldr.w	r2, [r3], #4
 800992e:	6881      	ldr	r1, [r0, #8]
 8009930:	9301      	str	r3, [sp, #4]
 8009932:	f000 fae9 	bl	8009f08 <_vfiprintf_r>
 8009936:	b003      	add	sp, #12
 8009938:	f85d eb04 	ldr.w	lr, [sp], #4
 800993c:	b004      	add	sp, #16
 800993e:	4770      	bx	lr
 8009940:	24000020 	.word	0x24000020

08009944 <_puts_r>:
 8009944:	6a03      	ldr	r3, [r0, #32]
 8009946:	b570      	push	{r4, r5, r6, lr}
 8009948:	6884      	ldr	r4, [r0, #8]
 800994a:	4605      	mov	r5, r0
 800994c:	460e      	mov	r6, r1
 800994e:	b90b      	cbnz	r3, 8009954 <_puts_r+0x10>
 8009950:	f7ff ffb0 	bl	80098b4 <__sinit>
 8009954:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009956:	07db      	lsls	r3, r3, #31
 8009958:	d405      	bmi.n	8009966 <_puts_r+0x22>
 800995a:	89a3      	ldrh	r3, [r4, #12]
 800995c:	0598      	lsls	r0, r3, #22
 800995e:	d402      	bmi.n	8009966 <_puts_r+0x22>
 8009960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009962:	f000 f99e 	bl	8009ca2 <__retarget_lock_acquire_recursive>
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	0719      	lsls	r1, r3, #28
 800996a:	d502      	bpl.n	8009972 <_puts_r+0x2e>
 800996c:	6923      	ldr	r3, [r4, #16]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d135      	bne.n	80099de <_puts_r+0x9a>
 8009972:	4621      	mov	r1, r4
 8009974:	4628      	mov	r0, r5
 8009976:	f000 f8c5 	bl	8009b04 <__swsetup_r>
 800997a:	b380      	cbz	r0, 80099de <_puts_r+0x9a>
 800997c:	f04f 35ff 	mov.w	r5, #4294967295
 8009980:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009982:	07da      	lsls	r2, r3, #31
 8009984:	d405      	bmi.n	8009992 <_puts_r+0x4e>
 8009986:	89a3      	ldrh	r3, [r4, #12]
 8009988:	059b      	lsls	r3, r3, #22
 800998a:	d402      	bmi.n	8009992 <_puts_r+0x4e>
 800998c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800998e:	f000 f989 	bl	8009ca4 <__retarget_lock_release_recursive>
 8009992:	4628      	mov	r0, r5
 8009994:	bd70      	pop	{r4, r5, r6, pc}
 8009996:	2b00      	cmp	r3, #0
 8009998:	da04      	bge.n	80099a4 <_puts_r+0x60>
 800999a:	69a2      	ldr	r2, [r4, #24]
 800999c:	429a      	cmp	r2, r3
 800999e:	dc17      	bgt.n	80099d0 <_puts_r+0x8c>
 80099a0:	290a      	cmp	r1, #10
 80099a2:	d015      	beq.n	80099d0 <_puts_r+0x8c>
 80099a4:	6823      	ldr	r3, [r4, #0]
 80099a6:	1c5a      	adds	r2, r3, #1
 80099a8:	6022      	str	r2, [r4, #0]
 80099aa:	7019      	strb	r1, [r3, #0]
 80099ac:	68a3      	ldr	r3, [r4, #8]
 80099ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80099b2:	3b01      	subs	r3, #1
 80099b4:	60a3      	str	r3, [r4, #8]
 80099b6:	2900      	cmp	r1, #0
 80099b8:	d1ed      	bne.n	8009996 <_puts_r+0x52>
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	da11      	bge.n	80099e2 <_puts_r+0x9e>
 80099be:	4622      	mov	r2, r4
 80099c0:	210a      	movs	r1, #10
 80099c2:	4628      	mov	r0, r5
 80099c4:	f000 f85f 	bl	8009a86 <__swbuf_r>
 80099c8:	3001      	adds	r0, #1
 80099ca:	d0d7      	beq.n	800997c <_puts_r+0x38>
 80099cc:	250a      	movs	r5, #10
 80099ce:	e7d7      	b.n	8009980 <_puts_r+0x3c>
 80099d0:	4622      	mov	r2, r4
 80099d2:	4628      	mov	r0, r5
 80099d4:	f000 f857 	bl	8009a86 <__swbuf_r>
 80099d8:	3001      	adds	r0, #1
 80099da:	d1e7      	bne.n	80099ac <_puts_r+0x68>
 80099dc:	e7ce      	b.n	800997c <_puts_r+0x38>
 80099de:	3e01      	subs	r6, #1
 80099e0:	e7e4      	b.n	80099ac <_puts_r+0x68>
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	1c5a      	adds	r2, r3, #1
 80099e6:	6022      	str	r2, [r4, #0]
 80099e8:	220a      	movs	r2, #10
 80099ea:	701a      	strb	r2, [r3, #0]
 80099ec:	e7ee      	b.n	80099cc <_puts_r+0x88>
	...

080099f0 <puts>:
 80099f0:	4b02      	ldr	r3, [pc, #8]	@ (80099fc <puts+0xc>)
 80099f2:	4601      	mov	r1, r0
 80099f4:	6818      	ldr	r0, [r3, #0]
 80099f6:	f7ff bfa5 	b.w	8009944 <_puts_r>
 80099fa:	bf00      	nop
 80099fc:	24000020 	.word	0x24000020

08009a00 <__sread>:
 8009a00:	b510      	push	{r4, lr}
 8009a02:	460c      	mov	r4, r1
 8009a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a08:	f000 f8fc 	bl	8009c04 <_read_r>
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	bfab      	itete	ge
 8009a10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009a12:	89a3      	ldrhlt	r3, [r4, #12]
 8009a14:	181b      	addge	r3, r3, r0
 8009a16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009a1a:	bfac      	ite	ge
 8009a1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009a1e:	81a3      	strhlt	r3, [r4, #12]
 8009a20:	bd10      	pop	{r4, pc}

08009a22 <__swrite>:
 8009a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a26:	461f      	mov	r7, r3
 8009a28:	898b      	ldrh	r3, [r1, #12]
 8009a2a:	05db      	lsls	r3, r3, #23
 8009a2c:	4605      	mov	r5, r0
 8009a2e:	460c      	mov	r4, r1
 8009a30:	4616      	mov	r6, r2
 8009a32:	d505      	bpl.n	8009a40 <__swrite+0x1e>
 8009a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a38:	2302      	movs	r3, #2
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f000 f8d0 	bl	8009be0 <_lseek_r>
 8009a40:	89a3      	ldrh	r3, [r4, #12]
 8009a42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a4a:	81a3      	strh	r3, [r4, #12]
 8009a4c:	4632      	mov	r2, r6
 8009a4e:	463b      	mov	r3, r7
 8009a50:	4628      	mov	r0, r5
 8009a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a56:	f000 b8e7 	b.w	8009c28 <_write_r>

08009a5a <__sseek>:
 8009a5a:	b510      	push	{r4, lr}
 8009a5c:	460c      	mov	r4, r1
 8009a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a62:	f000 f8bd 	bl	8009be0 <_lseek_r>
 8009a66:	1c43      	adds	r3, r0, #1
 8009a68:	89a3      	ldrh	r3, [r4, #12]
 8009a6a:	bf15      	itete	ne
 8009a6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009a6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009a72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009a76:	81a3      	strheq	r3, [r4, #12]
 8009a78:	bf18      	it	ne
 8009a7a:	81a3      	strhne	r3, [r4, #12]
 8009a7c:	bd10      	pop	{r4, pc}

08009a7e <__sclose>:
 8009a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a82:	f000 b89d 	b.w	8009bc0 <_close_r>

08009a86 <__swbuf_r>:
 8009a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a88:	460e      	mov	r6, r1
 8009a8a:	4614      	mov	r4, r2
 8009a8c:	4605      	mov	r5, r0
 8009a8e:	b118      	cbz	r0, 8009a98 <__swbuf_r+0x12>
 8009a90:	6a03      	ldr	r3, [r0, #32]
 8009a92:	b90b      	cbnz	r3, 8009a98 <__swbuf_r+0x12>
 8009a94:	f7ff ff0e 	bl	80098b4 <__sinit>
 8009a98:	69a3      	ldr	r3, [r4, #24]
 8009a9a:	60a3      	str	r3, [r4, #8]
 8009a9c:	89a3      	ldrh	r3, [r4, #12]
 8009a9e:	071a      	lsls	r2, r3, #28
 8009aa0:	d501      	bpl.n	8009aa6 <__swbuf_r+0x20>
 8009aa2:	6923      	ldr	r3, [r4, #16]
 8009aa4:	b943      	cbnz	r3, 8009ab8 <__swbuf_r+0x32>
 8009aa6:	4621      	mov	r1, r4
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	f000 f82b 	bl	8009b04 <__swsetup_r>
 8009aae:	b118      	cbz	r0, 8009ab8 <__swbuf_r+0x32>
 8009ab0:	f04f 37ff 	mov.w	r7, #4294967295
 8009ab4:	4638      	mov	r0, r7
 8009ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ab8:	6823      	ldr	r3, [r4, #0]
 8009aba:	6922      	ldr	r2, [r4, #16]
 8009abc:	1a98      	subs	r0, r3, r2
 8009abe:	6963      	ldr	r3, [r4, #20]
 8009ac0:	b2f6      	uxtb	r6, r6
 8009ac2:	4283      	cmp	r3, r0
 8009ac4:	4637      	mov	r7, r6
 8009ac6:	dc05      	bgt.n	8009ad4 <__swbuf_r+0x4e>
 8009ac8:	4621      	mov	r1, r4
 8009aca:	4628      	mov	r0, r5
 8009acc:	f000 fd44 	bl	800a558 <_fflush_r>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	d1ed      	bne.n	8009ab0 <__swbuf_r+0x2a>
 8009ad4:	68a3      	ldr	r3, [r4, #8]
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	60a3      	str	r3, [r4, #8]
 8009ada:	6823      	ldr	r3, [r4, #0]
 8009adc:	1c5a      	adds	r2, r3, #1
 8009ade:	6022      	str	r2, [r4, #0]
 8009ae0:	701e      	strb	r6, [r3, #0]
 8009ae2:	6962      	ldr	r2, [r4, #20]
 8009ae4:	1c43      	adds	r3, r0, #1
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d004      	beq.n	8009af4 <__swbuf_r+0x6e>
 8009aea:	89a3      	ldrh	r3, [r4, #12]
 8009aec:	07db      	lsls	r3, r3, #31
 8009aee:	d5e1      	bpl.n	8009ab4 <__swbuf_r+0x2e>
 8009af0:	2e0a      	cmp	r6, #10
 8009af2:	d1df      	bne.n	8009ab4 <__swbuf_r+0x2e>
 8009af4:	4621      	mov	r1, r4
 8009af6:	4628      	mov	r0, r5
 8009af8:	f000 fd2e 	bl	800a558 <_fflush_r>
 8009afc:	2800      	cmp	r0, #0
 8009afe:	d0d9      	beq.n	8009ab4 <__swbuf_r+0x2e>
 8009b00:	e7d6      	b.n	8009ab0 <__swbuf_r+0x2a>
	...

08009b04 <__swsetup_r>:
 8009b04:	b538      	push	{r3, r4, r5, lr}
 8009b06:	4b29      	ldr	r3, [pc, #164]	@ (8009bac <__swsetup_r+0xa8>)
 8009b08:	4605      	mov	r5, r0
 8009b0a:	6818      	ldr	r0, [r3, #0]
 8009b0c:	460c      	mov	r4, r1
 8009b0e:	b118      	cbz	r0, 8009b18 <__swsetup_r+0x14>
 8009b10:	6a03      	ldr	r3, [r0, #32]
 8009b12:	b90b      	cbnz	r3, 8009b18 <__swsetup_r+0x14>
 8009b14:	f7ff fece 	bl	80098b4 <__sinit>
 8009b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b1c:	0719      	lsls	r1, r3, #28
 8009b1e:	d422      	bmi.n	8009b66 <__swsetup_r+0x62>
 8009b20:	06da      	lsls	r2, r3, #27
 8009b22:	d407      	bmi.n	8009b34 <__swsetup_r+0x30>
 8009b24:	2209      	movs	r2, #9
 8009b26:	602a      	str	r2, [r5, #0]
 8009b28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b2c:	81a3      	strh	r3, [r4, #12]
 8009b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b32:	e033      	b.n	8009b9c <__swsetup_r+0x98>
 8009b34:	0758      	lsls	r0, r3, #29
 8009b36:	d512      	bpl.n	8009b5e <__swsetup_r+0x5a>
 8009b38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b3a:	b141      	cbz	r1, 8009b4e <__swsetup_r+0x4a>
 8009b3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b40:	4299      	cmp	r1, r3
 8009b42:	d002      	beq.n	8009b4a <__swsetup_r+0x46>
 8009b44:	4628      	mov	r0, r5
 8009b46:	f000 f8bd 	bl	8009cc4 <_free_r>
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b4e:	89a3      	ldrh	r3, [r4, #12]
 8009b50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009b54:	81a3      	strh	r3, [r4, #12]
 8009b56:	2300      	movs	r3, #0
 8009b58:	6063      	str	r3, [r4, #4]
 8009b5a:	6923      	ldr	r3, [r4, #16]
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	89a3      	ldrh	r3, [r4, #12]
 8009b60:	f043 0308 	orr.w	r3, r3, #8
 8009b64:	81a3      	strh	r3, [r4, #12]
 8009b66:	6923      	ldr	r3, [r4, #16]
 8009b68:	b94b      	cbnz	r3, 8009b7e <__swsetup_r+0x7a>
 8009b6a:	89a3      	ldrh	r3, [r4, #12]
 8009b6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009b70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b74:	d003      	beq.n	8009b7e <__swsetup_r+0x7a>
 8009b76:	4621      	mov	r1, r4
 8009b78:	4628      	mov	r0, r5
 8009b7a:	f000 fd3b 	bl	800a5f4 <__smakebuf_r>
 8009b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b82:	f013 0201 	ands.w	r2, r3, #1
 8009b86:	d00a      	beq.n	8009b9e <__swsetup_r+0x9a>
 8009b88:	2200      	movs	r2, #0
 8009b8a:	60a2      	str	r2, [r4, #8]
 8009b8c:	6962      	ldr	r2, [r4, #20]
 8009b8e:	4252      	negs	r2, r2
 8009b90:	61a2      	str	r2, [r4, #24]
 8009b92:	6922      	ldr	r2, [r4, #16]
 8009b94:	b942      	cbnz	r2, 8009ba8 <__swsetup_r+0xa4>
 8009b96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009b9a:	d1c5      	bne.n	8009b28 <__swsetup_r+0x24>
 8009b9c:	bd38      	pop	{r3, r4, r5, pc}
 8009b9e:	0799      	lsls	r1, r3, #30
 8009ba0:	bf58      	it	pl
 8009ba2:	6962      	ldrpl	r2, [r4, #20]
 8009ba4:	60a2      	str	r2, [r4, #8]
 8009ba6:	e7f4      	b.n	8009b92 <__swsetup_r+0x8e>
 8009ba8:	2000      	movs	r0, #0
 8009baa:	e7f7      	b.n	8009b9c <__swsetup_r+0x98>
 8009bac:	24000020 	.word	0x24000020

08009bb0 <memset>:
 8009bb0:	4402      	add	r2, r0
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d100      	bne.n	8009bba <memset+0xa>
 8009bb8:	4770      	bx	lr
 8009bba:	f803 1b01 	strb.w	r1, [r3], #1
 8009bbe:	e7f9      	b.n	8009bb4 <memset+0x4>

08009bc0 <_close_r>:
 8009bc0:	b538      	push	{r3, r4, r5, lr}
 8009bc2:	4d06      	ldr	r5, [pc, #24]	@ (8009bdc <_close_r+0x1c>)
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	4604      	mov	r4, r0
 8009bc8:	4608      	mov	r0, r1
 8009bca:	602b      	str	r3, [r5, #0]
 8009bcc:	f7f8 fd03 	bl	80025d6 <_close>
 8009bd0:	1c43      	adds	r3, r0, #1
 8009bd2:	d102      	bne.n	8009bda <_close_r+0x1a>
 8009bd4:	682b      	ldr	r3, [r5, #0]
 8009bd6:	b103      	cbz	r3, 8009bda <_close_r+0x1a>
 8009bd8:	6023      	str	r3, [r4, #0]
 8009bda:	bd38      	pop	{r3, r4, r5, pc}
 8009bdc:	24000904 	.word	0x24000904

08009be0 <_lseek_r>:
 8009be0:	b538      	push	{r3, r4, r5, lr}
 8009be2:	4d07      	ldr	r5, [pc, #28]	@ (8009c00 <_lseek_r+0x20>)
 8009be4:	4604      	mov	r4, r0
 8009be6:	4608      	mov	r0, r1
 8009be8:	4611      	mov	r1, r2
 8009bea:	2200      	movs	r2, #0
 8009bec:	602a      	str	r2, [r5, #0]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	f7f8 fd18 	bl	8002624 <_lseek>
 8009bf4:	1c43      	adds	r3, r0, #1
 8009bf6:	d102      	bne.n	8009bfe <_lseek_r+0x1e>
 8009bf8:	682b      	ldr	r3, [r5, #0]
 8009bfa:	b103      	cbz	r3, 8009bfe <_lseek_r+0x1e>
 8009bfc:	6023      	str	r3, [r4, #0]
 8009bfe:	bd38      	pop	{r3, r4, r5, pc}
 8009c00:	24000904 	.word	0x24000904

08009c04 <_read_r>:
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	4d07      	ldr	r5, [pc, #28]	@ (8009c24 <_read_r+0x20>)
 8009c08:	4604      	mov	r4, r0
 8009c0a:	4608      	mov	r0, r1
 8009c0c:	4611      	mov	r1, r2
 8009c0e:	2200      	movs	r2, #0
 8009c10:	602a      	str	r2, [r5, #0]
 8009c12:	461a      	mov	r2, r3
 8009c14:	f7f8 fca6 	bl	8002564 <_read>
 8009c18:	1c43      	adds	r3, r0, #1
 8009c1a:	d102      	bne.n	8009c22 <_read_r+0x1e>
 8009c1c:	682b      	ldr	r3, [r5, #0]
 8009c1e:	b103      	cbz	r3, 8009c22 <_read_r+0x1e>
 8009c20:	6023      	str	r3, [r4, #0]
 8009c22:	bd38      	pop	{r3, r4, r5, pc}
 8009c24:	24000904 	.word	0x24000904

08009c28 <_write_r>:
 8009c28:	b538      	push	{r3, r4, r5, lr}
 8009c2a:	4d07      	ldr	r5, [pc, #28]	@ (8009c48 <_write_r+0x20>)
 8009c2c:	4604      	mov	r4, r0
 8009c2e:	4608      	mov	r0, r1
 8009c30:	4611      	mov	r1, r2
 8009c32:	2200      	movs	r2, #0
 8009c34:	602a      	str	r2, [r5, #0]
 8009c36:	461a      	mov	r2, r3
 8009c38:	f7f8 fcb1 	bl	800259e <_write>
 8009c3c:	1c43      	adds	r3, r0, #1
 8009c3e:	d102      	bne.n	8009c46 <_write_r+0x1e>
 8009c40:	682b      	ldr	r3, [r5, #0]
 8009c42:	b103      	cbz	r3, 8009c46 <_write_r+0x1e>
 8009c44:	6023      	str	r3, [r4, #0]
 8009c46:	bd38      	pop	{r3, r4, r5, pc}
 8009c48:	24000904 	.word	0x24000904

08009c4c <__errno>:
 8009c4c:	4b01      	ldr	r3, [pc, #4]	@ (8009c54 <__errno+0x8>)
 8009c4e:	6818      	ldr	r0, [r3, #0]
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop
 8009c54:	24000020 	.word	0x24000020

08009c58 <__libc_init_array>:
 8009c58:	b570      	push	{r4, r5, r6, lr}
 8009c5a:	4d0d      	ldr	r5, [pc, #52]	@ (8009c90 <__libc_init_array+0x38>)
 8009c5c:	4c0d      	ldr	r4, [pc, #52]	@ (8009c94 <__libc_init_array+0x3c>)
 8009c5e:	1b64      	subs	r4, r4, r5
 8009c60:	10a4      	asrs	r4, r4, #2
 8009c62:	2600      	movs	r6, #0
 8009c64:	42a6      	cmp	r6, r4
 8009c66:	d109      	bne.n	8009c7c <__libc_init_array+0x24>
 8009c68:	4d0b      	ldr	r5, [pc, #44]	@ (8009c98 <__libc_init_array+0x40>)
 8009c6a:	4c0c      	ldr	r4, [pc, #48]	@ (8009c9c <__libc_init_array+0x44>)
 8009c6c:	f000 fd30 	bl	800a6d0 <_init>
 8009c70:	1b64      	subs	r4, r4, r5
 8009c72:	10a4      	asrs	r4, r4, #2
 8009c74:	2600      	movs	r6, #0
 8009c76:	42a6      	cmp	r6, r4
 8009c78:	d105      	bne.n	8009c86 <__libc_init_array+0x2e>
 8009c7a:	bd70      	pop	{r4, r5, r6, pc}
 8009c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c80:	4798      	blx	r3
 8009c82:	3601      	adds	r6, #1
 8009c84:	e7ee      	b.n	8009c64 <__libc_init_array+0xc>
 8009c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c8a:	4798      	blx	r3
 8009c8c:	3601      	adds	r6, #1
 8009c8e:	e7f2      	b.n	8009c76 <__libc_init_array+0x1e>
 8009c90:	0800a9f0 	.word	0x0800a9f0
 8009c94:	0800a9f0 	.word	0x0800a9f0
 8009c98:	0800a9f0 	.word	0x0800a9f0
 8009c9c:	0800a9f4 	.word	0x0800a9f4

08009ca0 <__retarget_lock_init_recursive>:
 8009ca0:	4770      	bx	lr

08009ca2 <__retarget_lock_acquire_recursive>:
 8009ca2:	4770      	bx	lr

08009ca4 <__retarget_lock_release_recursive>:
 8009ca4:	4770      	bx	lr

08009ca6 <memcpy>:
 8009ca6:	440a      	add	r2, r1
 8009ca8:	4291      	cmp	r1, r2
 8009caa:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cae:	d100      	bne.n	8009cb2 <memcpy+0xc>
 8009cb0:	4770      	bx	lr
 8009cb2:	b510      	push	{r4, lr}
 8009cb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cbc:	4291      	cmp	r1, r2
 8009cbe:	d1f9      	bne.n	8009cb4 <memcpy+0xe>
 8009cc0:	bd10      	pop	{r4, pc}
	...

08009cc4 <_free_r>:
 8009cc4:	b538      	push	{r3, r4, r5, lr}
 8009cc6:	4605      	mov	r5, r0
 8009cc8:	2900      	cmp	r1, #0
 8009cca:	d041      	beq.n	8009d50 <_free_r+0x8c>
 8009ccc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cd0:	1f0c      	subs	r4, r1, #4
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	bfb8      	it	lt
 8009cd6:	18e4      	addlt	r4, r4, r3
 8009cd8:	f000 f8e0 	bl	8009e9c <__malloc_lock>
 8009cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8009d54 <_free_r+0x90>)
 8009cde:	6813      	ldr	r3, [r2, #0]
 8009ce0:	b933      	cbnz	r3, 8009cf0 <_free_r+0x2c>
 8009ce2:	6063      	str	r3, [r4, #4]
 8009ce4:	6014      	str	r4, [r2, #0]
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cec:	f000 b8dc 	b.w	8009ea8 <__malloc_unlock>
 8009cf0:	42a3      	cmp	r3, r4
 8009cf2:	d908      	bls.n	8009d06 <_free_r+0x42>
 8009cf4:	6820      	ldr	r0, [r4, #0]
 8009cf6:	1821      	adds	r1, r4, r0
 8009cf8:	428b      	cmp	r3, r1
 8009cfa:	bf01      	itttt	eq
 8009cfc:	6819      	ldreq	r1, [r3, #0]
 8009cfe:	685b      	ldreq	r3, [r3, #4]
 8009d00:	1809      	addeq	r1, r1, r0
 8009d02:	6021      	streq	r1, [r4, #0]
 8009d04:	e7ed      	b.n	8009ce2 <_free_r+0x1e>
 8009d06:	461a      	mov	r2, r3
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	b10b      	cbz	r3, 8009d10 <_free_r+0x4c>
 8009d0c:	42a3      	cmp	r3, r4
 8009d0e:	d9fa      	bls.n	8009d06 <_free_r+0x42>
 8009d10:	6811      	ldr	r1, [r2, #0]
 8009d12:	1850      	adds	r0, r2, r1
 8009d14:	42a0      	cmp	r0, r4
 8009d16:	d10b      	bne.n	8009d30 <_free_r+0x6c>
 8009d18:	6820      	ldr	r0, [r4, #0]
 8009d1a:	4401      	add	r1, r0
 8009d1c:	1850      	adds	r0, r2, r1
 8009d1e:	4283      	cmp	r3, r0
 8009d20:	6011      	str	r1, [r2, #0]
 8009d22:	d1e0      	bne.n	8009ce6 <_free_r+0x22>
 8009d24:	6818      	ldr	r0, [r3, #0]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	6053      	str	r3, [r2, #4]
 8009d2a:	4408      	add	r0, r1
 8009d2c:	6010      	str	r0, [r2, #0]
 8009d2e:	e7da      	b.n	8009ce6 <_free_r+0x22>
 8009d30:	d902      	bls.n	8009d38 <_free_r+0x74>
 8009d32:	230c      	movs	r3, #12
 8009d34:	602b      	str	r3, [r5, #0]
 8009d36:	e7d6      	b.n	8009ce6 <_free_r+0x22>
 8009d38:	6820      	ldr	r0, [r4, #0]
 8009d3a:	1821      	adds	r1, r4, r0
 8009d3c:	428b      	cmp	r3, r1
 8009d3e:	bf04      	itt	eq
 8009d40:	6819      	ldreq	r1, [r3, #0]
 8009d42:	685b      	ldreq	r3, [r3, #4]
 8009d44:	6063      	str	r3, [r4, #4]
 8009d46:	bf04      	itt	eq
 8009d48:	1809      	addeq	r1, r1, r0
 8009d4a:	6021      	streq	r1, [r4, #0]
 8009d4c:	6054      	str	r4, [r2, #4]
 8009d4e:	e7ca      	b.n	8009ce6 <_free_r+0x22>
 8009d50:	bd38      	pop	{r3, r4, r5, pc}
 8009d52:	bf00      	nop
 8009d54:	24000910 	.word	0x24000910

08009d58 <sbrk_aligned>:
 8009d58:	b570      	push	{r4, r5, r6, lr}
 8009d5a:	4e0f      	ldr	r6, [pc, #60]	@ (8009d98 <sbrk_aligned+0x40>)
 8009d5c:	460c      	mov	r4, r1
 8009d5e:	6831      	ldr	r1, [r6, #0]
 8009d60:	4605      	mov	r5, r0
 8009d62:	b911      	cbnz	r1, 8009d6a <sbrk_aligned+0x12>
 8009d64:	f000 fca4 	bl	800a6b0 <_sbrk_r>
 8009d68:	6030      	str	r0, [r6, #0]
 8009d6a:	4621      	mov	r1, r4
 8009d6c:	4628      	mov	r0, r5
 8009d6e:	f000 fc9f 	bl	800a6b0 <_sbrk_r>
 8009d72:	1c43      	adds	r3, r0, #1
 8009d74:	d103      	bne.n	8009d7e <sbrk_aligned+0x26>
 8009d76:	f04f 34ff 	mov.w	r4, #4294967295
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	bd70      	pop	{r4, r5, r6, pc}
 8009d7e:	1cc4      	adds	r4, r0, #3
 8009d80:	f024 0403 	bic.w	r4, r4, #3
 8009d84:	42a0      	cmp	r0, r4
 8009d86:	d0f8      	beq.n	8009d7a <sbrk_aligned+0x22>
 8009d88:	1a21      	subs	r1, r4, r0
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	f000 fc90 	bl	800a6b0 <_sbrk_r>
 8009d90:	3001      	adds	r0, #1
 8009d92:	d1f2      	bne.n	8009d7a <sbrk_aligned+0x22>
 8009d94:	e7ef      	b.n	8009d76 <sbrk_aligned+0x1e>
 8009d96:	bf00      	nop
 8009d98:	2400090c 	.word	0x2400090c

08009d9c <_malloc_r>:
 8009d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009da0:	1ccd      	adds	r5, r1, #3
 8009da2:	f025 0503 	bic.w	r5, r5, #3
 8009da6:	3508      	adds	r5, #8
 8009da8:	2d0c      	cmp	r5, #12
 8009daa:	bf38      	it	cc
 8009dac:	250c      	movcc	r5, #12
 8009dae:	2d00      	cmp	r5, #0
 8009db0:	4606      	mov	r6, r0
 8009db2:	db01      	blt.n	8009db8 <_malloc_r+0x1c>
 8009db4:	42a9      	cmp	r1, r5
 8009db6:	d904      	bls.n	8009dc2 <_malloc_r+0x26>
 8009db8:	230c      	movs	r3, #12
 8009dba:	6033      	str	r3, [r6, #0]
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009e98 <_malloc_r+0xfc>
 8009dc6:	f000 f869 	bl	8009e9c <__malloc_lock>
 8009dca:	f8d8 3000 	ldr.w	r3, [r8]
 8009dce:	461c      	mov	r4, r3
 8009dd0:	bb44      	cbnz	r4, 8009e24 <_malloc_r+0x88>
 8009dd2:	4629      	mov	r1, r5
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	f7ff ffbf 	bl	8009d58 <sbrk_aligned>
 8009dda:	1c43      	adds	r3, r0, #1
 8009ddc:	4604      	mov	r4, r0
 8009dde:	d158      	bne.n	8009e92 <_malloc_r+0xf6>
 8009de0:	f8d8 4000 	ldr.w	r4, [r8]
 8009de4:	4627      	mov	r7, r4
 8009de6:	2f00      	cmp	r7, #0
 8009de8:	d143      	bne.n	8009e72 <_malloc_r+0xd6>
 8009dea:	2c00      	cmp	r4, #0
 8009dec:	d04b      	beq.n	8009e86 <_malloc_r+0xea>
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	4639      	mov	r1, r7
 8009df2:	4630      	mov	r0, r6
 8009df4:	eb04 0903 	add.w	r9, r4, r3
 8009df8:	f000 fc5a 	bl	800a6b0 <_sbrk_r>
 8009dfc:	4581      	cmp	r9, r0
 8009dfe:	d142      	bne.n	8009e86 <_malloc_r+0xea>
 8009e00:	6821      	ldr	r1, [r4, #0]
 8009e02:	1a6d      	subs	r5, r5, r1
 8009e04:	4629      	mov	r1, r5
 8009e06:	4630      	mov	r0, r6
 8009e08:	f7ff ffa6 	bl	8009d58 <sbrk_aligned>
 8009e0c:	3001      	adds	r0, #1
 8009e0e:	d03a      	beq.n	8009e86 <_malloc_r+0xea>
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	442b      	add	r3, r5
 8009e14:	6023      	str	r3, [r4, #0]
 8009e16:	f8d8 3000 	ldr.w	r3, [r8]
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	bb62      	cbnz	r2, 8009e78 <_malloc_r+0xdc>
 8009e1e:	f8c8 7000 	str.w	r7, [r8]
 8009e22:	e00f      	b.n	8009e44 <_malloc_r+0xa8>
 8009e24:	6822      	ldr	r2, [r4, #0]
 8009e26:	1b52      	subs	r2, r2, r5
 8009e28:	d420      	bmi.n	8009e6c <_malloc_r+0xd0>
 8009e2a:	2a0b      	cmp	r2, #11
 8009e2c:	d917      	bls.n	8009e5e <_malloc_r+0xc2>
 8009e2e:	1961      	adds	r1, r4, r5
 8009e30:	42a3      	cmp	r3, r4
 8009e32:	6025      	str	r5, [r4, #0]
 8009e34:	bf18      	it	ne
 8009e36:	6059      	strne	r1, [r3, #4]
 8009e38:	6863      	ldr	r3, [r4, #4]
 8009e3a:	bf08      	it	eq
 8009e3c:	f8c8 1000 	streq.w	r1, [r8]
 8009e40:	5162      	str	r2, [r4, r5]
 8009e42:	604b      	str	r3, [r1, #4]
 8009e44:	4630      	mov	r0, r6
 8009e46:	f000 f82f 	bl	8009ea8 <__malloc_unlock>
 8009e4a:	f104 000b 	add.w	r0, r4, #11
 8009e4e:	1d23      	adds	r3, r4, #4
 8009e50:	f020 0007 	bic.w	r0, r0, #7
 8009e54:	1ac2      	subs	r2, r0, r3
 8009e56:	bf1c      	itt	ne
 8009e58:	1a1b      	subne	r3, r3, r0
 8009e5a:	50a3      	strne	r3, [r4, r2]
 8009e5c:	e7af      	b.n	8009dbe <_malloc_r+0x22>
 8009e5e:	6862      	ldr	r2, [r4, #4]
 8009e60:	42a3      	cmp	r3, r4
 8009e62:	bf0c      	ite	eq
 8009e64:	f8c8 2000 	streq.w	r2, [r8]
 8009e68:	605a      	strne	r2, [r3, #4]
 8009e6a:	e7eb      	b.n	8009e44 <_malloc_r+0xa8>
 8009e6c:	4623      	mov	r3, r4
 8009e6e:	6864      	ldr	r4, [r4, #4]
 8009e70:	e7ae      	b.n	8009dd0 <_malloc_r+0x34>
 8009e72:	463c      	mov	r4, r7
 8009e74:	687f      	ldr	r7, [r7, #4]
 8009e76:	e7b6      	b.n	8009de6 <_malloc_r+0x4a>
 8009e78:	461a      	mov	r2, r3
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	42a3      	cmp	r3, r4
 8009e7e:	d1fb      	bne.n	8009e78 <_malloc_r+0xdc>
 8009e80:	2300      	movs	r3, #0
 8009e82:	6053      	str	r3, [r2, #4]
 8009e84:	e7de      	b.n	8009e44 <_malloc_r+0xa8>
 8009e86:	230c      	movs	r3, #12
 8009e88:	6033      	str	r3, [r6, #0]
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	f000 f80c 	bl	8009ea8 <__malloc_unlock>
 8009e90:	e794      	b.n	8009dbc <_malloc_r+0x20>
 8009e92:	6005      	str	r5, [r0, #0]
 8009e94:	e7d6      	b.n	8009e44 <_malloc_r+0xa8>
 8009e96:	bf00      	nop
 8009e98:	24000910 	.word	0x24000910

08009e9c <__malloc_lock>:
 8009e9c:	4801      	ldr	r0, [pc, #4]	@ (8009ea4 <__malloc_lock+0x8>)
 8009e9e:	f7ff bf00 	b.w	8009ca2 <__retarget_lock_acquire_recursive>
 8009ea2:	bf00      	nop
 8009ea4:	24000908 	.word	0x24000908

08009ea8 <__malloc_unlock>:
 8009ea8:	4801      	ldr	r0, [pc, #4]	@ (8009eb0 <__malloc_unlock+0x8>)
 8009eaa:	f7ff befb 	b.w	8009ca4 <__retarget_lock_release_recursive>
 8009eae:	bf00      	nop
 8009eb0:	24000908 	.word	0x24000908

08009eb4 <__sfputc_r>:
 8009eb4:	6893      	ldr	r3, [r2, #8]
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	b410      	push	{r4}
 8009ebc:	6093      	str	r3, [r2, #8]
 8009ebe:	da08      	bge.n	8009ed2 <__sfputc_r+0x1e>
 8009ec0:	6994      	ldr	r4, [r2, #24]
 8009ec2:	42a3      	cmp	r3, r4
 8009ec4:	db01      	blt.n	8009eca <__sfputc_r+0x16>
 8009ec6:	290a      	cmp	r1, #10
 8009ec8:	d103      	bne.n	8009ed2 <__sfputc_r+0x1e>
 8009eca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ece:	f7ff bdda 	b.w	8009a86 <__swbuf_r>
 8009ed2:	6813      	ldr	r3, [r2, #0]
 8009ed4:	1c58      	adds	r0, r3, #1
 8009ed6:	6010      	str	r0, [r2, #0]
 8009ed8:	7019      	strb	r1, [r3, #0]
 8009eda:	4608      	mov	r0, r1
 8009edc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ee0:	4770      	bx	lr

08009ee2 <__sfputs_r>:
 8009ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee4:	4606      	mov	r6, r0
 8009ee6:	460f      	mov	r7, r1
 8009ee8:	4614      	mov	r4, r2
 8009eea:	18d5      	adds	r5, r2, r3
 8009eec:	42ac      	cmp	r4, r5
 8009eee:	d101      	bne.n	8009ef4 <__sfputs_r+0x12>
 8009ef0:	2000      	movs	r0, #0
 8009ef2:	e007      	b.n	8009f04 <__sfputs_r+0x22>
 8009ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ef8:	463a      	mov	r2, r7
 8009efa:	4630      	mov	r0, r6
 8009efc:	f7ff ffda 	bl	8009eb4 <__sfputc_r>
 8009f00:	1c43      	adds	r3, r0, #1
 8009f02:	d1f3      	bne.n	8009eec <__sfputs_r+0xa>
 8009f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f08 <_vfiprintf_r>:
 8009f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f0c:	460d      	mov	r5, r1
 8009f0e:	b09d      	sub	sp, #116	@ 0x74
 8009f10:	4614      	mov	r4, r2
 8009f12:	4698      	mov	r8, r3
 8009f14:	4606      	mov	r6, r0
 8009f16:	b118      	cbz	r0, 8009f20 <_vfiprintf_r+0x18>
 8009f18:	6a03      	ldr	r3, [r0, #32]
 8009f1a:	b90b      	cbnz	r3, 8009f20 <_vfiprintf_r+0x18>
 8009f1c:	f7ff fcca 	bl	80098b4 <__sinit>
 8009f20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f22:	07d9      	lsls	r1, r3, #31
 8009f24:	d405      	bmi.n	8009f32 <_vfiprintf_r+0x2a>
 8009f26:	89ab      	ldrh	r3, [r5, #12]
 8009f28:	059a      	lsls	r2, r3, #22
 8009f2a:	d402      	bmi.n	8009f32 <_vfiprintf_r+0x2a>
 8009f2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f2e:	f7ff feb8 	bl	8009ca2 <__retarget_lock_acquire_recursive>
 8009f32:	89ab      	ldrh	r3, [r5, #12]
 8009f34:	071b      	lsls	r3, r3, #28
 8009f36:	d501      	bpl.n	8009f3c <_vfiprintf_r+0x34>
 8009f38:	692b      	ldr	r3, [r5, #16]
 8009f3a:	b99b      	cbnz	r3, 8009f64 <_vfiprintf_r+0x5c>
 8009f3c:	4629      	mov	r1, r5
 8009f3e:	4630      	mov	r0, r6
 8009f40:	f7ff fde0 	bl	8009b04 <__swsetup_r>
 8009f44:	b170      	cbz	r0, 8009f64 <_vfiprintf_r+0x5c>
 8009f46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f48:	07dc      	lsls	r4, r3, #31
 8009f4a:	d504      	bpl.n	8009f56 <_vfiprintf_r+0x4e>
 8009f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f50:	b01d      	add	sp, #116	@ 0x74
 8009f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f56:	89ab      	ldrh	r3, [r5, #12]
 8009f58:	0598      	lsls	r0, r3, #22
 8009f5a:	d4f7      	bmi.n	8009f4c <_vfiprintf_r+0x44>
 8009f5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f5e:	f7ff fea1 	bl	8009ca4 <__retarget_lock_release_recursive>
 8009f62:	e7f3      	b.n	8009f4c <_vfiprintf_r+0x44>
 8009f64:	2300      	movs	r3, #0
 8009f66:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f68:	2320      	movs	r3, #32
 8009f6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f72:	2330      	movs	r3, #48	@ 0x30
 8009f74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a124 <_vfiprintf_r+0x21c>
 8009f78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f7c:	f04f 0901 	mov.w	r9, #1
 8009f80:	4623      	mov	r3, r4
 8009f82:	469a      	mov	sl, r3
 8009f84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f88:	b10a      	cbz	r2, 8009f8e <_vfiprintf_r+0x86>
 8009f8a:	2a25      	cmp	r2, #37	@ 0x25
 8009f8c:	d1f9      	bne.n	8009f82 <_vfiprintf_r+0x7a>
 8009f8e:	ebba 0b04 	subs.w	fp, sl, r4
 8009f92:	d00b      	beq.n	8009fac <_vfiprintf_r+0xa4>
 8009f94:	465b      	mov	r3, fp
 8009f96:	4622      	mov	r2, r4
 8009f98:	4629      	mov	r1, r5
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	f7ff ffa1 	bl	8009ee2 <__sfputs_r>
 8009fa0:	3001      	adds	r0, #1
 8009fa2:	f000 80a7 	beq.w	800a0f4 <_vfiprintf_r+0x1ec>
 8009fa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fa8:	445a      	add	r2, fp
 8009faa:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fac:	f89a 3000 	ldrb.w	r3, [sl]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f000 809f 	beq.w	800a0f4 <_vfiprintf_r+0x1ec>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fc0:	f10a 0a01 	add.w	sl, sl, #1
 8009fc4:	9304      	str	r3, [sp, #16]
 8009fc6:	9307      	str	r3, [sp, #28]
 8009fc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fcc:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fce:	4654      	mov	r4, sl
 8009fd0:	2205      	movs	r2, #5
 8009fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fd6:	4853      	ldr	r0, [pc, #332]	@ (800a124 <_vfiprintf_r+0x21c>)
 8009fd8:	f7f6 f982 	bl	80002e0 <memchr>
 8009fdc:	9a04      	ldr	r2, [sp, #16]
 8009fde:	b9d8      	cbnz	r0, 800a018 <_vfiprintf_r+0x110>
 8009fe0:	06d1      	lsls	r1, r2, #27
 8009fe2:	bf44      	itt	mi
 8009fe4:	2320      	movmi	r3, #32
 8009fe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fea:	0713      	lsls	r3, r2, #28
 8009fec:	bf44      	itt	mi
 8009fee:	232b      	movmi	r3, #43	@ 0x2b
 8009ff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ff8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ffa:	d015      	beq.n	800a028 <_vfiprintf_r+0x120>
 8009ffc:	9a07      	ldr	r2, [sp, #28]
 8009ffe:	4654      	mov	r4, sl
 800a000:	2000      	movs	r0, #0
 800a002:	f04f 0c0a 	mov.w	ip, #10
 800a006:	4621      	mov	r1, r4
 800a008:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a00c:	3b30      	subs	r3, #48	@ 0x30
 800a00e:	2b09      	cmp	r3, #9
 800a010:	d94b      	bls.n	800a0aa <_vfiprintf_r+0x1a2>
 800a012:	b1b0      	cbz	r0, 800a042 <_vfiprintf_r+0x13a>
 800a014:	9207      	str	r2, [sp, #28]
 800a016:	e014      	b.n	800a042 <_vfiprintf_r+0x13a>
 800a018:	eba0 0308 	sub.w	r3, r0, r8
 800a01c:	fa09 f303 	lsl.w	r3, r9, r3
 800a020:	4313      	orrs	r3, r2
 800a022:	9304      	str	r3, [sp, #16]
 800a024:	46a2      	mov	sl, r4
 800a026:	e7d2      	b.n	8009fce <_vfiprintf_r+0xc6>
 800a028:	9b03      	ldr	r3, [sp, #12]
 800a02a:	1d19      	adds	r1, r3, #4
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	9103      	str	r1, [sp, #12]
 800a030:	2b00      	cmp	r3, #0
 800a032:	bfbb      	ittet	lt
 800a034:	425b      	neglt	r3, r3
 800a036:	f042 0202 	orrlt.w	r2, r2, #2
 800a03a:	9307      	strge	r3, [sp, #28]
 800a03c:	9307      	strlt	r3, [sp, #28]
 800a03e:	bfb8      	it	lt
 800a040:	9204      	strlt	r2, [sp, #16]
 800a042:	7823      	ldrb	r3, [r4, #0]
 800a044:	2b2e      	cmp	r3, #46	@ 0x2e
 800a046:	d10a      	bne.n	800a05e <_vfiprintf_r+0x156>
 800a048:	7863      	ldrb	r3, [r4, #1]
 800a04a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a04c:	d132      	bne.n	800a0b4 <_vfiprintf_r+0x1ac>
 800a04e:	9b03      	ldr	r3, [sp, #12]
 800a050:	1d1a      	adds	r2, r3, #4
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	9203      	str	r2, [sp, #12]
 800a056:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a05a:	3402      	adds	r4, #2
 800a05c:	9305      	str	r3, [sp, #20]
 800a05e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a134 <_vfiprintf_r+0x22c>
 800a062:	7821      	ldrb	r1, [r4, #0]
 800a064:	2203      	movs	r2, #3
 800a066:	4650      	mov	r0, sl
 800a068:	f7f6 f93a 	bl	80002e0 <memchr>
 800a06c:	b138      	cbz	r0, 800a07e <_vfiprintf_r+0x176>
 800a06e:	9b04      	ldr	r3, [sp, #16]
 800a070:	eba0 000a 	sub.w	r0, r0, sl
 800a074:	2240      	movs	r2, #64	@ 0x40
 800a076:	4082      	lsls	r2, r0
 800a078:	4313      	orrs	r3, r2
 800a07a:	3401      	adds	r4, #1
 800a07c:	9304      	str	r3, [sp, #16]
 800a07e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a082:	4829      	ldr	r0, [pc, #164]	@ (800a128 <_vfiprintf_r+0x220>)
 800a084:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a088:	2206      	movs	r2, #6
 800a08a:	f7f6 f929 	bl	80002e0 <memchr>
 800a08e:	2800      	cmp	r0, #0
 800a090:	d03f      	beq.n	800a112 <_vfiprintf_r+0x20a>
 800a092:	4b26      	ldr	r3, [pc, #152]	@ (800a12c <_vfiprintf_r+0x224>)
 800a094:	bb1b      	cbnz	r3, 800a0de <_vfiprintf_r+0x1d6>
 800a096:	9b03      	ldr	r3, [sp, #12]
 800a098:	3307      	adds	r3, #7
 800a09a:	f023 0307 	bic.w	r3, r3, #7
 800a09e:	3308      	adds	r3, #8
 800a0a0:	9303      	str	r3, [sp, #12]
 800a0a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0a4:	443b      	add	r3, r7
 800a0a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0a8:	e76a      	b.n	8009f80 <_vfiprintf_r+0x78>
 800a0aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0ae:	460c      	mov	r4, r1
 800a0b0:	2001      	movs	r0, #1
 800a0b2:	e7a8      	b.n	800a006 <_vfiprintf_r+0xfe>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	3401      	adds	r4, #1
 800a0b8:	9305      	str	r3, [sp, #20]
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	f04f 0c0a 	mov.w	ip, #10
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0c6:	3a30      	subs	r2, #48	@ 0x30
 800a0c8:	2a09      	cmp	r2, #9
 800a0ca:	d903      	bls.n	800a0d4 <_vfiprintf_r+0x1cc>
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d0c6      	beq.n	800a05e <_vfiprintf_r+0x156>
 800a0d0:	9105      	str	r1, [sp, #20]
 800a0d2:	e7c4      	b.n	800a05e <_vfiprintf_r+0x156>
 800a0d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0d8:	4604      	mov	r4, r0
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e7f0      	b.n	800a0c0 <_vfiprintf_r+0x1b8>
 800a0de:	ab03      	add	r3, sp, #12
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	462a      	mov	r2, r5
 800a0e4:	4b12      	ldr	r3, [pc, #72]	@ (800a130 <_vfiprintf_r+0x228>)
 800a0e6:	a904      	add	r1, sp, #16
 800a0e8:	4630      	mov	r0, r6
 800a0ea:	f3af 8000 	nop.w
 800a0ee:	4607      	mov	r7, r0
 800a0f0:	1c78      	adds	r0, r7, #1
 800a0f2:	d1d6      	bne.n	800a0a2 <_vfiprintf_r+0x19a>
 800a0f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0f6:	07d9      	lsls	r1, r3, #31
 800a0f8:	d405      	bmi.n	800a106 <_vfiprintf_r+0x1fe>
 800a0fa:	89ab      	ldrh	r3, [r5, #12]
 800a0fc:	059a      	lsls	r2, r3, #22
 800a0fe:	d402      	bmi.n	800a106 <_vfiprintf_r+0x1fe>
 800a100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a102:	f7ff fdcf 	bl	8009ca4 <__retarget_lock_release_recursive>
 800a106:	89ab      	ldrh	r3, [r5, #12]
 800a108:	065b      	lsls	r3, r3, #25
 800a10a:	f53f af1f 	bmi.w	8009f4c <_vfiprintf_r+0x44>
 800a10e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a110:	e71e      	b.n	8009f50 <_vfiprintf_r+0x48>
 800a112:	ab03      	add	r3, sp, #12
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	462a      	mov	r2, r5
 800a118:	4b05      	ldr	r3, [pc, #20]	@ (800a130 <_vfiprintf_r+0x228>)
 800a11a:	a904      	add	r1, sp, #16
 800a11c:	4630      	mov	r0, r6
 800a11e:	f000 f879 	bl	800a214 <_printf_i>
 800a122:	e7e4      	b.n	800a0ee <_vfiprintf_r+0x1e6>
 800a124:	0800a9b4 	.word	0x0800a9b4
 800a128:	0800a9be 	.word	0x0800a9be
 800a12c:	00000000 	.word	0x00000000
 800a130:	08009ee3 	.word	0x08009ee3
 800a134:	0800a9ba 	.word	0x0800a9ba

0800a138 <_printf_common>:
 800a138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a13c:	4616      	mov	r6, r2
 800a13e:	4698      	mov	r8, r3
 800a140:	688a      	ldr	r2, [r1, #8]
 800a142:	690b      	ldr	r3, [r1, #16]
 800a144:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a148:	4293      	cmp	r3, r2
 800a14a:	bfb8      	it	lt
 800a14c:	4613      	movlt	r3, r2
 800a14e:	6033      	str	r3, [r6, #0]
 800a150:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a154:	4607      	mov	r7, r0
 800a156:	460c      	mov	r4, r1
 800a158:	b10a      	cbz	r2, 800a15e <_printf_common+0x26>
 800a15a:	3301      	adds	r3, #1
 800a15c:	6033      	str	r3, [r6, #0]
 800a15e:	6823      	ldr	r3, [r4, #0]
 800a160:	0699      	lsls	r1, r3, #26
 800a162:	bf42      	ittt	mi
 800a164:	6833      	ldrmi	r3, [r6, #0]
 800a166:	3302      	addmi	r3, #2
 800a168:	6033      	strmi	r3, [r6, #0]
 800a16a:	6825      	ldr	r5, [r4, #0]
 800a16c:	f015 0506 	ands.w	r5, r5, #6
 800a170:	d106      	bne.n	800a180 <_printf_common+0x48>
 800a172:	f104 0a19 	add.w	sl, r4, #25
 800a176:	68e3      	ldr	r3, [r4, #12]
 800a178:	6832      	ldr	r2, [r6, #0]
 800a17a:	1a9b      	subs	r3, r3, r2
 800a17c:	42ab      	cmp	r3, r5
 800a17e:	dc26      	bgt.n	800a1ce <_printf_common+0x96>
 800a180:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a184:	6822      	ldr	r2, [r4, #0]
 800a186:	3b00      	subs	r3, #0
 800a188:	bf18      	it	ne
 800a18a:	2301      	movne	r3, #1
 800a18c:	0692      	lsls	r2, r2, #26
 800a18e:	d42b      	bmi.n	800a1e8 <_printf_common+0xb0>
 800a190:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a194:	4641      	mov	r1, r8
 800a196:	4638      	mov	r0, r7
 800a198:	47c8      	blx	r9
 800a19a:	3001      	adds	r0, #1
 800a19c:	d01e      	beq.n	800a1dc <_printf_common+0xa4>
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	6922      	ldr	r2, [r4, #16]
 800a1a2:	f003 0306 	and.w	r3, r3, #6
 800a1a6:	2b04      	cmp	r3, #4
 800a1a8:	bf02      	ittt	eq
 800a1aa:	68e5      	ldreq	r5, [r4, #12]
 800a1ac:	6833      	ldreq	r3, [r6, #0]
 800a1ae:	1aed      	subeq	r5, r5, r3
 800a1b0:	68a3      	ldr	r3, [r4, #8]
 800a1b2:	bf0c      	ite	eq
 800a1b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1b8:	2500      	movne	r5, #0
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	bfc4      	itt	gt
 800a1be:	1a9b      	subgt	r3, r3, r2
 800a1c0:	18ed      	addgt	r5, r5, r3
 800a1c2:	2600      	movs	r6, #0
 800a1c4:	341a      	adds	r4, #26
 800a1c6:	42b5      	cmp	r5, r6
 800a1c8:	d11a      	bne.n	800a200 <_printf_common+0xc8>
 800a1ca:	2000      	movs	r0, #0
 800a1cc:	e008      	b.n	800a1e0 <_printf_common+0xa8>
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	4652      	mov	r2, sl
 800a1d2:	4641      	mov	r1, r8
 800a1d4:	4638      	mov	r0, r7
 800a1d6:	47c8      	blx	r9
 800a1d8:	3001      	adds	r0, #1
 800a1da:	d103      	bne.n	800a1e4 <_printf_common+0xac>
 800a1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1e4:	3501      	adds	r5, #1
 800a1e6:	e7c6      	b.n	800a176 <_printf_common+0x3e>
 800a1e8:	18e1      	adds	r1, r4, r3
 800a1ea:	1c5a      	adds	r2, r3, #1
 800a1ec:	2030      	movs	r0, #48	@ 0x30
 800a1ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a1f2:	4422      	add	r2, r4
 800a1f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a1f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a1fc:	3302      	adds	r3, #2
 800a1fe:	e7c7      	b.n	800a190 <_printf_common+0x58>
 800a200:	2301      	movs	r3, #1
 800a202:	4622      	mov	r2, r4
 800a204:	4641      	mov	r1, r8
 800a206:	4638      	mov	r0, r7
 800a208:	47c8      	blx	r9
 800a20a:	3001      	adds	r0, #1
 800a20c:	d0e6      	beq.n	800a1dc <_printf_common+0xa4>
 800a20e:	3601      	adds	r6, #1
 800a210:	e7d9      	b.n	800a1c6 <_printf_common+0x8e>
	...

0800a214 <_printf_i>:
 800a214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a218:	7e0f      	ldrb	r7, [r1, #24]
 800a21a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a21c:	2f78      	cmp	r7, #120	@ 0x78
 800a21e:	4691      	mov	r9, r2
 800a220:	4680      	mov	r8, r0
 800a222:	460c      	mov	r4, r1
 800a224:	469a      	mov	sl, r3
 800a226:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a22a:	d807      	bhi.n	800a23c <_printf_i+0x28>
 800a22c:	2f62      	cmp	r7, #98	@ 0x62
 800a22e:	d80a      	bhi.n	800a246 <_printf_i+0x32>
 800a230:	2f00      	cmp	r7, #0
 800a232:	f000 80d1 	beq.w	800a3d8 <_printf_i+0x1c4>
 800a236:	2f58      	cmp	r7, #88	@ 0x58
 800a238:	f000 80b8 	beq.w	800a3ac <_printf_i+0x198>
 800a23c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a240:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a244:	e03a      	b.n	800a2bc <_printf_i+0xa8>
 800a246:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a24a:	2b15      	cmp	r3, #21
 800a24c:	d8f6      	bhi.n	800a23c <_printf_i+0x28>
 800a24e:	a101      	add	r1, pc, #4	@ (adr r1, 800a254 <_printf_i+0x40>)
 800a250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a254:	0800a2ad 	.word	0x0800a2ad
 800a258:	0800a2c1 	.word	0x0800a2c1
 800a25c:	0800a23d 	.word	0x0800a23d
 800a260:	0800a23d 	.word	0x0800a23d
 800a264:	0800a23d 	.word	0x0800a23d
 800a268:	0800a23d 	.word	0x0800a23d
 800a26c:	0800a2c1 	.word	0x0800a2c1
 800a270:	0800a23d 	.word	0x0800a23d
 800a274:	0800a23d 	.word	0x0800a23d
 800a278:	0800a23d 	.word	0x0800a23d
 800a27c:	0800a23d 	.word	0x0800a23d
 800a280:	0800a3bf 	.word	0x0800a3bf
 800a284:	0800a2eb 	.word	0x0800a2eb
 800a288:	0800a379 	.word	0x0800a379
 800a28c:	0800a23d 	.word	0x0800a23d
 800a290:	0800a23d 	.word	0x0800a23d
 800a294:	0800a3e1 	.word	0x0800a3e1
 800a298:	0800a23d 	.word	0x0800a23d
 800a29c:	0800a2eb 	.word	0x0800a2eb
 800a2a0:	0800a23d 	.word	0x0800a23d
 800a2a4:	0800a23d 	.word	0x0800a23d
 800a2a8:	0800a381 	.word	0x0800a381
 800a2ac:	6833      	ldr	r3, [r6, #0]
 800a2ae:	1d1a      	adds	r2, r3, #4
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	6032      	str	r2, [r6, #0]
 800a2b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e09c      	b.n	800a3fa <_printf_i+0x1e6>
 800a2c0:	6833      	ldr	r3, [r6, #0]
 800a2c2:	6820      	ldr	r0, [r4, #0]
 800a2c4:	1d19      	adds	r1, r3, #4
 800a2c6:	6031      	str	r1, [r6, #0]
 800a2c8:	0606      	lsls	r6, r0, #24
 800a2ca:	d501      	bpl.n	800a2d0 <_printf_i+0xbc>
 800a2cc:	681d      	ldr	r5, [r3, #0]
 800a2ce:	e003      	b.n	800a2d8 <_printf_i+0xc4>
 800a2d0:	0645      	lsls	r5, r0, #25
 800a2d2:	d5fb      	bpl.n	800a2cc <_printf_i+0xb8>
 800a2d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a2d8:	2d00      	cmp	r5, #0
 800a2da:	da03      	bge.n	800a2e4 <_printf_i+0xd0>
 800a2dc:	232d      	movs	r3, #45	@ 0x2d
 800a2de:	426d      	negs	r5, r5
 800a2e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2e4:	4858      	ldr	r0, [pc, #352]	@ (800a448 <_printf_i+0x234>)
 800a2e6:	230a      	movs	r3, #10
 800a2e8:	e011      	b.n	800a30e <_printf_i+0xfa>
 800a2ea:	6821      	ldr	r1, [r4, #0]
 800a2ec:	6833      	ldr	r3, [r6, #0]
 800a2ee:	0608      	lsls	r0, r1, #24
 800a2f0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a2f4:	d402      	bmi.n	800a2fc <_printf_i+0xe8>
 800a2f6:	0649      	lsls	r1, r1, #25
 800a2f8:	bf48      	it	mi
 800a2fa:	b2ad      	uxthmi	r5, r5
 800a2fc:	2f6f      	cmp	r7, #111	@ 0x6f
 800a2fe:	4852      	ldr	r0, [pc, #328]	@ (800a448 <_printf_i+0x234>)
 800a300:	6033      	str	r3, [r6, #0]
 800a302:	bf14      	ite	ne
 800a304:	230a      	movne	r3, #10
 800a306:	2308      	moveq	r3, #8
 800a308:	2100      	movs	r1, #0
 800a30a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a30e:	6866      	ldr	r6, [r4, #4]
 800a310:	60a6      	str	r6, [r4, #8]
 800a312:	2e00      	cmp	r6, #0
 800a314:	db05      	blt.n	800a322 <_printf_i+0x10e>
 800a316:	6821      	ldr	r1, [r4, #0]
 800a318:	432e      	orrs	r6, r5
 800a31a:	f021 0104 	bic.w	r1, r1, #4
 800a31e:	6021      	str	r1, [r4, #0]
 800a320:	d04b      	beq.n	800a3ba <_printf_i+0x1a6>
 800a322:	4616      	mov	r6, r2
 800a324:	fbb5 f1f3 	udiv	r1, r5, r3
 800a328:	fb03 5711 	mls	r7, r3, r1, r5
 800a32c:	5dc7      	ldrb	r7, [r0, r7]
 800a32e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a332:	462f      	mov	r7, r5
 800a334:	42bb      	cmp	r3, r7
 800a336:	460d      	mov	r5, r1
 800a338:	d9f4      	bls.n	800a324 <_printf_i+0x110>
 800a33a:	2b08      	cmp	r3, #8
 800a33c:	d10b      	bne.n	800a356 <_printf_i+0x142>
 800a33e:	6823      	ldr	r3, [r4, #0]
 800a340:	07df      	lsls	r7, r3, #31
 800a342:	d508      	bpl.n	800a356 <_printf_i+0x142>
 800a344:	6923      	ldr	r3, [r4, #16]
 800a346:	6861      	ldr	r1, [r4, #4]
 800a348:	4299      	cmp	r1, r3
 800a34a:	bfde      	ittt	le
 800a34c:	2330      	movle	r3, #48	@ 0x30
 800a34e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a352:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a356:	1b92      	subs	r2, r2, r6
 800a358:	6122      	str	r2, [r4, #16]
 800a35a:	f8cd a000 	str.w	sl, [sp]
 800a35e:	464b      	mov	r3, r9
 800a360:	aa03      	add	r2, sp, #12
 800a362:	4621      	mov	r1, r4
 800a364:	4640      	mov	r0, r8
 800a366:	f7ff fee7 	bl	800a138 <_printf_common>
 800a36a:	3001      	adds	r0, #1
 800a36c:	d14a      	bne.n	800a404 <_printf_i+0x1f0>
 800a36e:	f04f 30ff 	mov.w	r0, #4294967295
 800a372:	b004      	add	sp, #16
 800a374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a378:	6823      	ldr	r3, [r4, #0]
 800a37a:	f043 0320 	orr.w	r3, r3, #32
 800a37e:	6023      	str	r3, [r4, #0]
 800a380:	4832      	ldr	r0, [pc, #200]	@ (800a44c <_printf_i+0x238>)
 800a382:	2778      	movs	r7, #120	@ 0x78
 800a384:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a388:	6823      	ldr	r3, [r4, #0]
 800a38a:	6831      	ldr	r1, [r6, #0]
 800a38c:	061f      	lsls	r7, r3, #24
 800a38e:	f851 5b04 	ldr.w	r5, [r1], #4
 800a392:	d402      	bmi.n	800a39a <_printf_i+0x186>
 800a394:	065f      	lsls	r7, r3, #25
 800a396:	bf48      	it	mi
 800a398:	b2ad      	uxthmi	r5, r5
 800a39a:	6031      	str	r1, [r6, #0]
 800a39c:	07d9      	lsls	r1, r3, #31
 800a39e:	bf44      	itt	mi
 800a3a0:	f043 0320 	orrmi.w	r3, r3, #32
 800a3a4:	6023      	strmi	r3, [r4, #0]
 800a3a6:	b11d      	cbz	r5, 800a3b0 <_printf_i+0x19c>
 800a3a8:	2310      	movs	r3, #16
 800a3aa:	e7ad      	b.n	800a308 <_printf_i+0xf4>
 800a3ac:	4826      	ldr	r0, [pc, #152]	@ (800a448 <_printf_i+0x234>)
 800a3ae:	e7e9      	b.n	800a384 <_printf_i+0x170>
 800a3b0:	6823      	ldr	r3, [r4, #0]
 800a3b2:	f023 0320 	bic.w	r3, r3, #32
 800a3b6:	6023      	str	r3, [r4, #0]
 800a3b8:	e7f6      	b.n	800a3a8 <_printf_i+0x194>
 800a3ba:	4616      	mov	r6, r2
 800a3bc:	e7bd      	b.n	800a33a <_printf_i+0x126>
 800a3be:	6833      	ldr	r3, [r6, #0]
 800a3c0:	6825      	ldr	r5, [r4, #0]
 800a3c2:	6961      	ldr	r1, [r4, #20]
 800a3c4:	1d18      	adds	r0, r3, #4
 800a3c6:	6030      	str	r0, [r6, #0]
 800a3c8:	062e      	lsls	r6, r5, #24
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	d501      	bpl.n	800a3d2 <_printf_i+0x1be>
 800a3ce:	6019      	str	r1, [r3, #0]
 800a3d0:	e002      	b.n	800a3d8 <_printf_i+0x1c4>
 800a3d2:	0668      	lsls	r0, r5, #25
 800a3d4:	d5fb      	bpl.n	800a3ce <_printf_i+0x1ba>
 800a3d6:	8019      	strh	r1, [r3, #0]
 800a3d8:	2300      	movs	r3, #0
 800a3da:	6123      	str	r3, [r4, #16]
 800a3dc:	4616      	mov	r6, r2
 800a3de:	e7bc      	b.n	800a35a <_printf_i+0x146>
 800a3e0:	6833      	ldr	r3, [r6, #0]
 800a3e2:	1d1a      	adds	r2, r3, #4
 800a3e4:	6032      	str	r2, [r6, #0]
 800a3e6:	681e      	ldr	r6, [r3, #0]
 800a3e8:	6862      	ldr	r2, [r4, #4]
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	f7f5 ff77 	bl	80002e0 <memchr>
 800a3f2:	b108      	cbz	r0, 800a3f8 <_printf_i+0x1e4>
 800a3f4:	1b80      	subs	r0, r0, r6
 800a3f6:	6060      	str	r0, [r4, #4]
 800a3f8:	6863      	ldr	r3, [r4, #4]
 800a3fa:	6123      	str	r3, [r4, #16]
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a402:	e7aa      	b.n	800a35a <_printf_i+0x146>
 800a404:	6923      	ldr	r3, [r4, #16]
 800a406:	4632      	mov	r2, r6
 800a408:	4649      	mov	r1, r9
 800a40a:	4640      	mov	r0, r8
 800a40c:	47d0      	blx	sl
 800a40e:	3001      	adds	r0, #1
 800a410:	d0ad      	beq.n	800a36e <_printf_i+0x15a>
 800a412:	6823      	ldr	r3, [r4, #0]
 800a414:	079b      	lsls	r3, r3, #30
 800a416:	d413      	bmi.n	800a440 <_printf_i+0x22c>
 800a418:	68e0      	ldr	r0, [r4, #12]
 800a41a:	9b03      	ldr	r3, [sp, #12]
 800a41c:	4298      	cmp	r0, r3
 800a41e:	bfb8      	it	lt
 800a420:	4618      	movlt	r0, r3
 800a422:	e7a6      	b.n	800a372 <_printf_i+0x15e>
 800a424:	2301      	movs	r3, #1
 800a426:	4632      	mov	r2, r6
 800a428:	4649      	mov	r1, r9
 800a42a:	4640      	mov	r0, r8
 800a42c:	47d0      	blx	sl
 800a42e:	3001      	adds	r0, #1
 800a430:	d09d      	beq.n	800a36e <_printf_i+0x15a>
 800a432:	3501      	adds	r5, #1
 800a434:	68e3      	ldr	r3, [r4, #12]
 800a436:	9903      	ldr	r1, [sp, #12]
 800a438:	1a5b      	subs	r3, r3, r1
 800a43a:	42ab      	cmp	r3, r5
 800a43c:	dcf2      	bgt.n	800a424 <_printf_i+0x210>
 800a43e:	e7eb      	b.n	800a418 <_printf_i+0x204>
 800a440:	2500      	movs	r5, #0
 800a442:	f104 0619 	add.w	r6, r4, #25
 800a446:	e7f5      	b.n	800a434 <_printf_i+0x220>
 800a448:	0800a9c5 	.word	0x0800a9c5
 800a44c:	0800a9d6 	.word	0x0800a9d6

0800a450 <__sflush_r>:
 800a450:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a458:	0716      	lsls	r6, r2, #28
 800a45a:	4605      	mov	r5, r0
 800a45c:	460c      	mov	r4, r1
 800a45e:	d454      	bmi.n	800a50a <__sflush_r+0xba>
 800a460:	684b      	ldr	r3, [r1, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	dc02      	bgt.n	800a46c <__sflush_r+0x1c>
 800a466:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a468:	2b00      	cmp	r3, #0
 800a46a:	dd48      	ble.n	800a4fe <__sflush_r+0xae>
 800a46c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a46e:	2e00      	cmp	r6, #0
 800a470:	d045      	beq.n	800a4fe <__sflush_r+0xae>
 800a472:	2300      	movs	r3, #0
 800a474:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a478:	682f      	ldr	r7, [r5, #0]
 800a47a:	6a21      	ldr	r1, [r4, #32]
 800a47c:	602b      	str	r3, [r5, #0]
 800a47e:	d030      	beq.n	800a4e2 <__sflush_r+0x92>
 800a480:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a482:	89a3      	ldrh	r3, [r4, #12]
 800a484:	0759      	lsls	r1, r3, #29
 800a486:	d505      	bpl.n	800a494 <__sflush_r+0x44>
 800a488:	6863      	ldr	r3, [r4, #4]
 800a48a:	1ad2      	subs	r2, r2, r3
 800a48c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a48e:	b10b      	cbz	r3, 800a494 <__sflush_r+0x44>
 800a490:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a492:	1ad2      	subs	r2, r2, r3
 800a494:	2300      	movs	r3, #0
 800a496:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a498:	6a21      	ldr	r1, [r4, #32]
 800a49a:	4628      	mov	r0, r5
 800a49c:	47b0      	blx	r6
 800a49e:	1c43      	adds	r3, r0, #1
 800a4a0:	89a3      	ldrh	r3, [r4, #12]
 800a4a2:	d106      	bne.n	800a4b2 <__sflush_r+0x62>
 800a4a4:	6829      	ldr	r1, [r5, #0]
 800a4a6:	291d      	cmp	r1, #29
 800a4a8:	d82b      	bhi.n	800a502 <__sflush_r+0xb2>
 800a4aa:	4a2a      	ldr	r2, [pc, #168]	@ (800a554 <__sflush_r+0x104>)
 800a4ac:	40ca      	lsrs	r2, r1
 800a4ae:	07d6      	lsls	r6, r2, #31
 800a4b0:	d527      	bpl.n	800a502 <__sflush_r+0xb2>
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	6062      	str	r2, [r4, #4]
 800a4b6:	04d9      	lsls	r1, r3, #19
 800a4b8:	6922      	ldr	r2, [r4, #16]
 800a4ba:	6022      	str	r2, [r4, #0]
 800a4bc:	d504      	bpl.n	800a4c8 <__sflush_r+0x78>
 800a4be:	1c42      	adds	r2, r0, #1
 800a4c0:	d101      	bne.n	800a4c6 <__sflush_r+0x76>
 800a4c2:	682b      	ldr	r3, [r5, #0]
 800a4c4:	b903      	cbnz	r3, 800a4c8 <__sflush_r+0x78>
 800a4c6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a4c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4ca:	602f      	str	r7, [r5, #0]
 800a4cc:	b1b9      	cbz	r1, 800a4fe <__sflush_r+0xae>
 800a4ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4d2:	4299      	cmp	r1, r3
 800a4d4:	d002      	beq.n	800a4dc <__sflush_r+0x8c>
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	f7ff fbf4 	bl	8009cc4 <_free_r>
 800a4dc:	2300      	movs	r3, #0
 800a4de:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4e0:	e00d      	b.n	800a4fe <__sflush_r+0xae>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	47b0      	blx	r6
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	1c50      	adds	r0, r2, #1
 800a4ec:	d1c9      	bne.n	800a482 <__sflush_r+0x32>
 800a4ee:	682b      	ldr	r3, [r5, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d0c6      	beq.n	800a482 <__sflush_r+0x32>
 800a4f4:	2b1d      	cmp	r3, #29
 800a4f6:	d001      	beq.n	800a4fc <__sflush_r+0xac>
 800a4f8:	2b16      	cmp	r3, #22
 800a4fa:	d11e      	bne.n	800a53a <__sflush_r+0xea>
 800a4fc:	602f      	str	r7, [r5, #0]
 800a4fe:	2000      	movs	r0, #0
 800a500:	e022      	b.n	800a548 <__sflush_r+0xf8>
 800a502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a506:	b21b      	sxth	r3, r3
 800a508:	e01b      	b.n	800a542 <__sflush_r+0xf2>
 800a50a:	690f      	ldr	r7, [r1, #16]
 800a50c:	2f00      	cmp	r7, #0
 800a50e:	d0f6      	beq.n	800a4fe <__sflush_r+0xae>
 800a510:	0793      	lsls	r3, r2, #30
 800a512:	680e      	ldr	r6, [r1, #0]
 800a514:	bf08      	it	eq
 800a516:	694b      	ldreq	r3, [r1, #20]
 800a518:	600f      	str	r7, [r1, #0]
 800a51a:	bf18      	it	ne
 800a51c:	2300      	movne	r3, #0
 800a51e:	eba6 0807 	sub.w	r8, r6, r7
 800a522:	608b      	str	r3, [r1, #8]
 800a524:	f1b8 0f00 	cmp.w	r8, #0
 800a528:	dde9      	ble.n	800a4fe <__sflush_r+0xae>
 800a52a:	6a21      	ldr	r1, [r4, #32]
 800a52c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a52e:	4643      	mov	r3, r8
 800a530:	463a      	mov	r2, r7
 800a532:	4628      	mov	r0, r5
 800a534:	47b0      	blx	r6
 800a536:	2800      	cmp	r0, #0
 800a538:	dc08      	bgt.n	800a54c <__sflush_r+0xfc>
 800a53a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a53e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a542:	81a3      	strh	r3, [r4, #12]
 800a544:	f04f 30ff 	mov.w	r0, #4294967295
 800a548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a54c:	4407      	add	r7, r0
 800a54e:	eba8 0800 	sub.w	r8, r8, r0
 800a552:	e7e7      	b.n	800a524 <__sflush_r+0xd4>
 800a554:	20400001 	.word	0x20400001

0800a558 <_fflush_r>:
 800a558:	b538      	push	{r3, r4, r5, lr}
 800a55a:	690b      	ldr	r3, [r1, #16]
 800a55c:	4605      	mov	r5, r0
 800a55e:	460c      	mov	r4, r1
 800a560:	b913      	cbnz	r3, 800a568 <_fflush_r+0x10>
 800a562:	2500      	movs	r5, #0
 800a564:	4628      	mov	r0, r5
 800a566:	bd38      	pop	{r3, r4, r5, pc}
 800a568:	b118      	cbz	r0, 800a572 <_fflush_r+0x1a>
 800a56a:	6a03      	ldr	r3, [r0, #32]
 800a56c:	b90b      	cbnz	r3, 800a572 <_fflush_r+0x1a>
 800a56e:	f7ff f9a1 	bl	80098b4 <__sinit>
 800a572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d0f3      	beq.n	800a562 <_fflush_r+0xa>
 800a57a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a57c:	07d0      	lsls	r0, r2, #31
 800a57e:	d404      	bmi.n	800a58a <_fflush_r+0x32>
 800a580:	0599      	lsls	r1, r3, #22
 800a582:	d402      	bmi.n	800a58a <_fflush_r+0x32>
 800a584:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a586:	f7ff fb8c 	bl	8009ca2 <__retarget_lock_acquire_recursive>
 800a58a:	4628      	mov	r0, r5
 800a58c:	4621      	mov	r1, r4
 800a58e:	f7ff ff5f 	bl	800a450 <__sflush_r>
 800a592:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a594:	07da      	lsls	r2, r3, #31
 800a596:	4605      	mov	r5, r0
 800a598:	d4e4      	bmi.n	800a564 <_fflush_r+0xc>
 800a59a:	89a3      	ldrh	r3, [r4, #12]
 800a59c:	059b      	lsls	r3, r3, #22
 800a59e:	d4e1      	bmi.n	800a564 <_fflush_r+0xc>
 800a5a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5a2:	f7ff fb7f 	bl	8009ca4 <__retarget_lock_release_recursive>
 800a5a6:	e7dd      	b.n	800a564 <_fflush_r+0xc>

0800a5a8 <__swhatbuf_r>:
 800a5a8:	b570      	push	{r4, r5, r6, lr}
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b0:	2900      	cmp	r1, #0
 800a5b2:	b096      	sub	sp, #88	@ 0x58
 800a5b4:	4615      	mov	r5, r2
 800a5b6:	461e      	mov	r6, r3
 800a5b8:	da0d      	bge.n	800a5d6 <__swhatbuf_r+0x2e>
 800a5ba:	89a3      	ldrh	r3, [r4, #12]
 800a5bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a5c0:	f04f 0100 	mov.w	r1, #0
 800a5c4:	bf14      	ite	ne
 800a5c6:	2340      	movne	r3, #64	@ 0x40
 800a5c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	6031      	str	r1, [r6, #0]
 800a5d0:	602b      	str	r3, [r5, #0]
 800a5d2:	b016      	add	sp, #88	@ 0x58
 800a5d4:	bd70      	pop	{r4, r5, r6, pc}
 800a5d6:	466a      	mov	r2, sp
 800a5d8:	f000 f848 	bl	800a66c <_fstat_r>
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	dbec      	blt.n	800a5ba <__swhatbuf_r+0x12>
 800a5e0:	9901      	ldr	r1, [sp, #4]
 800a5e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a5e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a5ea:	4259      	negs	r1, r3
 800a5ec:	4159      	adcs	r1, r3
 800a5ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5f2:	e7eb      	b.n	800a5cc <__swhatbuf_r+0x24>

0800a5f4 <__smakebuf_r>:
 800a5f4:	898b      	ldrh	r3, [r1, #12]
 800a5f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5f8:	079d      	lsls	r5, r3, #30
 800a5fa:	4606      	mov	r6, r0
 800a5fc:	460c      	mov	r4, r1
 800a5fe:	d507      	bpl.n	800a610 <__smakebuf_r+0x1c>
 800a600:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a604:	6023      	str	r3, [r4, #0]
 800a606:	6123      	str	r3, [r4, #16]
 800a608:	2301      	movs	r3, #1
 800a60a:	6163      	str	r3, [r4, #20]
 800a60c:	b003      	add	sp, #12
 800a60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a610:	ab01      	add	r3, sp, #4
 800a612:	466a      	mov	r2, sp
 800a614:	f7ff ffc8 	bl	800a5a8 <__swhatbuf_r>
 800a618:	9f00      	ldr	r7, [sp, #0]
 800a61a:	4605      	mov	r5, r0
 800a61c:	4639      	mov	r1, r7
 800a61e:	4630      	mov	r0, r6
 800a620:	f7ff fbbc 	bl	8009d9c <_malloc_r>
 800a624:	b948      	cbnz	r0, 800a63a <__smakebuf_r+0x46>
 800a626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a62a:	059a      	lsls	r2, r3, #22
 800a62c:	d4ee      	bmi.n	800a60c <__smakebuf_r+0x18>
 800a62e:	f023 0303 	bic.w	r3, r3, #3
 800a632:	f043 0302 	orr.w	r3, r3, #2
 800a636:	81a3      	strh	r3, [r4, #12]
 800a638:	e7e2      	b.n	800a600 <__smakebuf_r+0xc>
 800a63a:	89a3      	ldrh	r3, [r4, #12]
 800a63c:	6020      	str	r0, [r4, #0]
 800a63e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a642:	81a3      	strh	r3, [r4, #12]
 800a644:	9b01      	ldr	r3, [sp, #4]
 800a646:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a64a:	b15b      	cbz	r3, 800a664 <__smakebuf_r+0x70>
 800a64c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a650:	4630      	mov	r0, r6
 800a652:	f000 f81d 	bl	800a690 <_isatty_r>
 800a656:	b128      	cbz	r0, 800a664 <__smakebuf_r+0x70>
 800a658:	89a3      	ldrh	r3, [r4, #12]
 800a65a:	f023 0303 	bic.w	r3, r3, #3
 800a65e:	f043 0301 	orr.w	r3, r3, #1
 800a662:	81a3      	strh	r3, [r4, #12]
 800a664:	89a3      	ldrh	r3, [r4, #12]
 800a666:	431d      	orrs	r5, r3
 800a668:	81a5      	strh	r5, [r4, #12]
 800a66a:	e7cf      	b.n	800a60c <__smakebuf_r+0x18>

0800a66c <_fstat_r>:
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	4d07      	ldr	r5, [pc, #28]	@ (800a68c <_fstat_r+0x20>)
 800a670:	2300      	movs	r3, #0
 800a672:	4604      	mov	r4, r0
 800a674:	4608      	mov	r0, r1
 800a676:	4611      	mov	r1, r2
 800a678:	602b      	str	r3, [r5, #0]
 800a67a:	f7f7 ffb8 	bl	80025ee <_fstat>
 800a67e:	1c43      	adds	r3, r0, #1
 800a680:	d102      	bne.n	800a688 <_fstat_r+0x1c>
 800a682:	682b      	ldr	r3, [r5, #0]
 800a684:	b103      	cbz	r3, 800a688 <_fstat_r+0x1c>
 800a686:	6023      	str	r3, [r4, #0]
 800a688:	bd38      	pop	{r3, r4, r5, pc}
 800a68a:	bf00      	nop
 800a68c:	24000904 	.word	0x24000904

0800a690 <_isatty_r>:
 800a690:	b538      	push	{r3, r4, r5, lr}
 800a692:	4d06      	ldr	r5, [pc, #24]	@ (800a6ac <_isatty_r+0x1c>)
 800a694:	2300      	movs	r3, #0
 800a696:	4604      	mov	r4, r0
 800a698:	4608      	mov	r0, r1
 800a69a:	602b      	str	r3, [r5, #0]
 800a69c:	f7f7 ffb7 	bl	800260e <_isatty>
 800a6a0:	1c43      	adds	r3, r0, #1
 800a6a2:	d102      	bne.n	800a6aa <_isatty_r+0x1a>
 800a6a4:	682b      	ldr	r3, [r5, #0]
 800a6a6:	b103      	cbz	r3, 800a6aa <_isatty_r+0x1a>
 800a6a8:	6023      	str	r3, [r4, #0]
 800a6aa:	bd38      	pop	{r3, r4, r5, pc}
 800a6ac:	24000904 	.word	0x24000904

0800a6b0 <_sbrk_r>:
 800a6b0:	b538      	push	{r3, r4, r5, lr}
 800a6b2:	4d06      	ldr	r5, [pc, #24]	@ (800a6cc <_sbrk_r+0x1c>)
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	4608      	mov	r0, r1
 800a6ba:	602b      	str	r3, [r5, #0]
 800a6bc:	f7f7 ffc0 	bl	8002640 <_sbrk>
 800a6c0:	1c43      	adds	r3, r0, #1
 800a6c2:	d102      	bne.n	800a6ca <_sbrk_r+0x1a>
 800a6c4:	682b      	ldr	r3, [r5, #0]
 800a6c6:	b103      	cbz	r3, 800a6ca <_sbrk_r+0x1a>
 800a6c8:	6023      	str	r3, [r4, #0]
 800a6ca:	bd38      	pop	{r3, r4, r5, pc}
 800a6cc:	24000904 	.word	0x24000904

0800a6d0 <_init>:
 800a6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d2:	bf00      	nop
 800a6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6d6:	bc08      	pop	{r3}
 800a6d8:	469e      	mov	lr, r3
 800a6da:	4770      	bx	lr

0800a6dc <_fini>:
 800a6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6de:	bf00      	nop
 800a6e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6e2:	bc08      	pop	{r3}
 800a6e4:	469e      	mov	lr, r3
 800a6e6:	4770      	bx	lr
