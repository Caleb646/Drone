
Drone_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a468  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  0800a708  0800a708  0000b708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9fc  0800a9fc  0000c070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a9fc  0800a9fc  0000b9fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa04  0800aa04  0000c070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa04  0800aa04  0000ba04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa08  0800aa08  0000ba08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  24000000  0800aa0c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a4  24000070  0800aa7c  0000c070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000914  0800aa7c  0000c914  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000229d3  00000000  00000000  0000c09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004528  00000000  00000000  0002ea71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b00  00000000  00000000  00032fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014de  00000000  00000000  00034aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00046149  00000000  00000000  00035f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000229b1  00000000  00000000  0007c0c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bbe90  00000000  00000000  0009ea78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0025a908  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007920  00000000  00000000  0025a94c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0026226c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a6f0 	.word	0x0800a6f0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	0800a6f0 	.word	0x0800a6f0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CriticalErrorHandler>:
    if (fromMax == fromMin)
        return toMin;
    return toMin + ((v - fromMin) / (fromMax - fromMin)) * (toMax - toMin);
}

void CriticalErrorHandler (void) {
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	bf00      	nop
    __disable_irq ();
    while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <CriticalErrorHandler+0x8>

080006b8 <__assert_func>:
        ;
}

void __assert_func (const char* file, int line, const char* func, const char* failedexpr) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
 80006c4:	603b      	str	r3, [r7, #0]
    __BKPT (1);
 80006c6:	be01      	bkpt	0x0001
    // asm volatile ("bkpt 1");
    CriticalErrorHandler ();
 80006c8:	f7ff fff0 	bl	80006ac <CriticalErrorHandler>
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <FlightContextUpdateIMUData>:

/*
 * \brief IMU collects it accel and gyro data in millimeters and
 * millidegrees. This is converted to meters and degrees
 */
void FlightContextUpdateIMUData (FlightContext* pContext, Vec3 accel, Vec3 gyro) {
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	4638      	mov	r0, r7
 80006de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    pContext->imuUnFilteredAccel.x = ((float)accel.x) / 1000.0f;
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	ee07 3a90 	vmov	s15, r3
 80006e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006ec:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8000780 <FlightContextUpdateIMUData+0xac>
 80006f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	edc3 7a00 	vstr	s15, [r3]
    pContext->imuUnFilteredAccel.y = ((float)accel.y) / 1000.0f;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	ee07 3a90 	vmov	s15, r3
 8000700:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000704:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000780 <FlightContextUpdateIMUData+0xac>
 8000708:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	edc3 7a01 	vstr	s15, [r3, #4]
    pContext->imuUnFilteredAccel.z = ((float)accel.z) / 1000.0f;
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	ee07 3a90 	vmov	s15, r3
 8000718:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800071c:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000780 <FlightContextUpdateIMUData+0xac>
 8000720:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	edc3 7a02 	vstr	s15, [r3, #8]

    pContext->imuUnFilteredGyro.x = ((float)gyro.x) / 1000.0f;
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	ee07 3a90 	vmov	s15, r3
 8000730:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000734:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000780 <FlightContextUpdateIMUData+0xac>
 8000738:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	edc3 7a03 	vstr	s15, [r3, #12]
    pContext->imuUnFilteredGyro.y = ((float)gyro.y) / 1000.0f;
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	ee07 3a90 	vmov	s15, r3
 8000748:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800074c:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8000780 <FlightContextUpdateIMUData+0xac>
 8000750:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	edc3 7a04 	vstr	s15, [r3, #16]
    pContext->imuUnFilteredGyro.z = ((float)gyro.z) / 1000.0f;
 800075a:	6a3b      	ldr	r3, [r7, #32]
 800075c:	ee07 3a90 	vmov	s15, r3
 8000760:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000764:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8000780 <FlightContextUpdateIMUData+0xac>
 8000768:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	447a0000 	.word	0x447a0000

08000784 <__io_putchar>:
UART_HandleTypeDef* pUART;

static STATUS_TYPE LoggerSyncUARTTaskHandler (void);
static STATUS_TYPE LoggerWriteToUART (RingBuff volatile* pBuff);

PUTCHAR_PROTOTYPE {
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    if (HAL_GetCurrentCPUID () == CM7_CPUID) {
 800078c:	f002 f932 	bl	80029f4 <HAL_GetCurrentCPUID>
 8000790:	4603      	mov	r3, r0
 8000792:	2b03      	cmp	r3, #3
 8000794:	d11e      	bne.n	80007d4 <__io_putchar+0x50>
        RingBuffWrite (pCM7RingBuf, (void*)&ch, 1);
 8000796:	4b23      	ldr	r3, [pc, #140]	@ (8000824 <__io_putchar+0xa0>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	1d39      	adds	r1, r7, #4
 800079c:	2201      	movs	r2, #1
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f9e0 	bl	8000b64 <RingBuffWrite>
        ASSERT (RingBuffIsValid (pCM7RingBuf) == 1);
 80007a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000824 <__io_putchar+0xa0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 f9b3 	bl	8000b14 <RingBuffIsValid>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d005      	beq.n	80007c0 <__io_putchar+0x3c>
 80007b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000828 <__io_putchar+0xa4>)
 80007b6:	4a1d      	ldr	r2, [pc, #116]	@ (800082c <__io_putchar+0xa8>)
 80007b8:	211a      	movs	r1, #26
 80007ba:	481d      	ldr	r0, [pc, #116]	@ (8000830 <__io_putchar+0xac>)
 80007bc:	f7ff ff7c 	bl	80006b8 <__assert_func>
        if ((char)ch == '\n') {
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b0a      	cmp	r3, #10
 80007c6:	d127      	bne.n	8000818 <__io_putchar+0x94>
            LoggerWriteToUART (pCM7RingBuf);
 80007c8:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <__io_putchar+0xa0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f871 	bl	80008b4 <LoggerWriteToUART>
 80007d2:	e021      	b.n	8000818 <__io_putchar+0x94>
        }
    } else {
        RingBuffWrite (pCM4RingBuf, (void*)&ch, 1);
 80007d4:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <__io_putchar+0xb0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	1d39      	adds	r1, r7, #4
 80007da:	2201      	movs	r2, #1
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 f9c1 	bl	8000b64 <RingBuffWrite>
        ASSERT (RingBuffIsValid (pCM4RingBuf) == 1);
 80007e2:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <__io_putchar+0xb0>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f994 	bl	8000b14 <RingBuffIsValid>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d005      	beq.n	80007fe <__io_putchar+0x7a>
 80007f2:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <__io_putchar+0xb4>)
 80007f4:	4a0d      	ldr	r2, [pc, #52]	@ (800082c <__io_putchar+0xa8>)
 80007f6:	2120      	movs	r1, #32
 80007f8:	480d      	ldr	r0, [pc, #52]	@ (8000830 <__io_putchar+0xac>)
 80007fa:	f7ff ff5d 	bl	80006b8 <__assert_func>
        if ((char)ch == '\n') {
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b0a      	cmp	r3, #10
 8000804:	d108      	bne.n	8000818 <__io_putchar+0x94>
            /*
             * CM4 sends signal to CM7 to send CM4's ring buffer to the UART interface
             */
            uint32_t taskID = SYNC_TASKID_UART_OUT;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
            SyncMailBoxWriteNotify (MAILBOX_CM7_ID, (uint8_t*)&taskID, sizeof (uint32_t));
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2204      	movs	r2, #4
 8000810:	4619      	mov	r1, r3
 8000812:	2001      	movs	r0, #1
 8000814:	f000 ffdb 	bl	80017ce <SyncMailBoxWriteNotify>
        }
    }
    return ch;
 8000818:	687b      	ldr	r3, [r7, #4]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	24000090 	.word	0x24000090
 8000828:	0800a708 	.word	0x0800a708
 800082c:	0800a980 	.word	0x0800a980
 8000830:	0800a730 	.word	0x0800a730
 8000834:	2400008c 	.word	0x2400008c
 8000838:	0800a778 	.word	0x0800a778

0800083c <LoggerInit>:

STATUS_TYPE LoggerInit (UART_HandleTypeDef* pUART_) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
    pUART = NULL;
 8000844:	4b15      	ldr	r3, [pc, #84]	@ (800089c <LoggerInit+0x60>)
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
    if (HAL_GetCurrentCPUID () == CM7_CPUID && pUART_ != NULL) {
 800084a:	f002 f8d3 	bl	80029f4 <HAL_GetCurrentCPUID>
 800084e:	4603      	mov	r3, r0
 8000850:	2b03      	cmp	r3, #3
 8000852:	d105      	bne.n	8000860 <LoggerInit+0x24>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d002      	beq.n	8000860 <LoggerInit+0x24>
        pUART = pUART_;
 800085a:	4a10      	ldr	r2, [pc, #64]	@ (800089c <LoggerInit+0x60>)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6013      	str	r3, [r2, #0]
    /*
     * Local variables are not shared among the cores.
     * So each ring buffer pointer needs to be inited for each core
     */
    pCM4RingBuf =
    RingBuffCreate ((void*)MEM_SHARED_CM4_UART_RINGBUFF_START, MEM_SHARED_CM4_UART_RINGBUFF_TOTAL_LEN);
 8000860:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000864:	480e      	ldr	r0, [pc, #56]	@ (80008a0 <LoggerInit+0x64>)
 8000866:	f000 f925 	bl	8000ab4 <RingBuffCreate>
 800086a:	4603      	mov	r3, r0
    pCM4RingBuf =
 800086c:	4a0d      	ldr	r2, [pc, #52]	@ (80008a4 <LoggerInit+0x68>)
 800086e:	6013      	str	r3, [r2, #0]
    pCM7RingBuf =
    RingBuffCreate ((void*)MEM_SHARED_CM7_UART_RINGBUFF_START, MEM_SHARED_CM7_UART_RINGBUFF_TOTAL_LEN);
 8000870:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000874:	480c      	ldr	r0, [pc, #48]	@ (80008a8 <LoggerInit+0x6c>)
 8000876:	f000 f91d 	bl	8000ab4 <RingBuffCreate>
 800087a:	4603      	mov	r3, r0
    pCM7RingBuf =
 800087c:	4a0b      	ldr	r2, [pc, #44]	@ (80008ac <LoggerInit+0x70>)
 800087e:	6013      	str	r3, [r2, #0]

    if (SyncRegisterHandler (LoggerSyncUARTTaskHandler, SYNC_TASKID_UART_OUT) != eSTATUS_SUCCESS) {
 8000880:	2100      	movs	r1, #0
 8000882:	480b      	ldr	r0, [pc, #44]	@ (80008b0 <LoggerInit+0x74>)
 8000884:	f000 fff8 	bl	8001878 <SyncRegisterHandler>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <LoggerInit+0x56>
        return eSTATUS_FAILURE;
 800088e:	2301      	movs	r3, #1
 8000890:	e000      	b.n	8000894 <LoggerInit+0x58>
    }

    return eSTATUS_SUCCESS;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	24000094 	.word	0x24000094
 80008a0:	38000008 	.word	0x38000008
 80008a4:	2400008c 	.word	0x2400008c
 80008a8:	38000128 	.word	0x38000128
 80008ac:	24000090 	.word	0x24000090
 80008b0:	08000905 	.word	0x08000905

080008b4 <LoggerWriteToUART>:

static STATUS_TYPE LoggerWriteToUART (RingBuff volatile* pRingBuf) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
    uint32_t len         = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
    void* pBufToTransmit = NULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]

send:
    len = RingBuffGetLinearBlockReadLength (pRingBuf);
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f000 fa89 	bl	8000ddc <RingBuffGetLinearBlockReadLength>
 80008ca:	60f8      	str	r0, [r7, #12]
    if (len > 0) {
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d011      	beq.n	80008f6 <LoggerWriteToUART+0x42>
        pBufToTransmit = RingBuffGetLinearBlockReadAddress (pRingBuf);
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f000 fa58 	bl	8000d88 <RingBuffGetLinearBlockReadAddress>
 80008d8:	60b8      	str	r0, [r7, #8]
        HAL_UART_Transmit (pUART, pBufToTransmit, len, 1000);
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <LoggerWriteToUART+0x4c>)
 80008dc:	6818      	ldr	r0, [r3, #0]
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008e6:	68b9      	ldr	r1, [r7, #8]
 80008e8:	f007 fb14 	bl	8007f14 <HAL_UART_Transmit>
        RingBuffSkip (pRingBuf, len);
 80008ec:	68f9      	ldr	r1, [r7, #12]
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f000 fab6 	bl	8000e60 <RingBuffSkip>
        /* Check for anything in the overflow buffer */
        goto send;
 80008f4:	e7e6      	b.n	80008c4 <LoggerWriteToUART+0x10>
    }
    return eSTATUS_SUCCESS;
 80008f6:	2300      	movs	r3, #0
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	24000094 	.word	0x24000094

08000904 <LoggerSyncUARTTaskHandler>:

static STATUS_TYPE LoggerSyncUARTTaskHandler (void) {
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
    if (HAL_GetCurrentCPUID () == CM7_CPUID) {
 8000908:	f002 f874 	bl	80029f4 <HAL_GetCurrentCPUID>
 800090c:	4603      	mov	r3, r0
 800090e:	2b03      	cmp	r3, #3
 8000910:	d104      	bne.n	800091c <LoggerSyncUARTTaskHandler+0x18>
        LoggerWriteToUART (pCM4RingBuf);
 8000912:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <LoggerSyncUARTTaskHandler+0x20>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ffcc 	bl	80008b4 <LoggerWriteToUART>
    }
    return eSTATUS_SUCCESS;
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	2400008c 	.word	0x2400008c

08000928 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit (void) {
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 800092c:	4b49      	ldr	r3, [pc, #292]	@ (8000a54 <SystemInit+0x12c>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000932:	4a48      	ldr	r2, [pc, #288]	@ (8000a54 <SystemInit+0x12c>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
    SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800093c:	4b45      	ldr	r3, [pc, #276]	@ (8000a54 <SystemInit+0x12c>)
 800093e:	691b      	ldr	r3, [r3, #16]
 8000940:	4a44      	ldr	r2, [pc, #272]	@ (8000a54 <SystemInit+0x12c>)
 8000942:	f043 0310 	orr.w	r3, r3, #16
 8000946:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
    /* Reset the RCC clock configuration to the default reset state ------------*/
    /* Increasing the CPU frequency */
    if (FLASH_LATENCY_DEFAULT > (READ_BIT ((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8000948:	4b43      	ldr	r3, [pc, #268]	@ (8000a58 <SystemInit+0x130>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f003 030f 	and.w	r3, r3, #15
 8000950:	2b06      	cmp	r3, #6
 8000952:	d807      	bhi.n	8000964 <SystemInit+0x3c>
        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
        MODIFY_REG (FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000954:	4b40      	ldr	r3, [pc, #256]	@ (8000a58 <SystemInit+0x130>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f023 030f 	bic.w	r3, r3, #15
 800095c:	4a3e      	ldr	r2, [pc, #248]	@ (8000a58 <SystemInit+0x130>)
 800095e:	f043 0307 	orr.w	r3, r3, #7
 8000962:	6013      	str	r3, [r2, #0]
    }

    /* Set HSION bit */
    RCC->CR |= RCC_CR_HSION;
 8000964:	4b3d      	ldr	r3, [pc, #244]	@ (8000a5c <SystemInit+0x134>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a3c      	ldr	r2, [pc, #240]	@ (8000a5c <SystemInit+0x134>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	6013      	str	r3, [r2, #0]

    /* Reset CFGR register */
    RCC->CFGR = 0x00000000;
 8000970:	4b3a      	ldr	r3, [pc, #232]	@ (8000a5c <SystemInit+0x134>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]

    /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
    RCC->CR &= 0xEAF6ED7FU;
 8000976:	4b39      	ldr	r3, [pc, #228]	@ (8000a5c <SystemInit+0x134>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	4938      	ldr	r1, [pc, #224]	@ (8000a5c <SystemInit+0x134>)
 800097c:	4b38      	ldr	r3, [pc, #224]	@ (8000a60 <SystemInit+0x138>)
 800097e:	4013      	ands	r3, r2
 8000980:	600b      	str	r3, [r1, #0]

    /* Decreasing the number of wait states because of lower CPU frequency */
    if (FLASH_LATENCY_DEFAULT < (READ_BIT ((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8000982:	4b35      	ldr	r3, [pc, #212]	@ (8000a58 <SystemInit+0x130>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f003 0308 	and.w	r3, r3, #8
 800098a:	2b00      	cmp	r3, #0
 800098c:	d007      	beq.n	800099e <SystemInit+0x76>
        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
        MODIFY_REG (FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800098e:	4b32      	ldr	r3, [pc, #200]	@ (8000a58 <SystemInit+0x130>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f023 030f 	bic.w	r3, r3, #15
 8000996:	4a30      	ldr	r2, [pc, #192]	@ (8000a58 <SystemInit+0x130>)
 8000998:	f043 0307 	orr.w	r3, r3, #7
 800099c:	6013      	str	r3, [r2, #0]
    }

    /* Reset D1CFGR register */
    RCC->D1CFGR = 0x00000000;
 800099e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a5c <SystemInit+0x134>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]

    /* Reset D2CFGR register */
    RCC->D2CFGR = 0x00000000;
 80009a4:	4b2d      	ldr	r3, [pc, #180]	@ (8000a5c <SystemInit+0x134>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]

    /* Reset D3CFGR register */
    RCC->D3CFGR = 0x00000000;
 80009aa:	4b2c      	ldr	r3, [pc, #176]	@ (8000a5c <SystemInit+0x134>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]

    /* Reset PLLCKSELR register */
    RCC->PLLCKSELR = 0x02020200;
 80009b0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a5c <SystemInit+0x134>)
 80009b2:	4a2c      	ldr	r2, [pc, #176]	@ (8000a64 <SystemInit+0x13c>)
 80009b4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset PLLCFGR register */
    RCC->PLLCFGR = 0x01FF0000;
 80009b6:	4b29      	ldr	r3, [pc, #164]	@ (8000a5c <SystemInit+0x134>)
 80009b8:	4a2b      	ldr	r2, [pc, #172]	@ (8000a68 <SystemInit+0x140>)
 80009ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Reset PLL1DIVR register */
    RCC->PLL1DIVR = 0x01010280;
 80009bc:	4b27      	ldr	r3, [pc, #156]	@ (8000a5c <SystemInit+0x134>)
 80009be:	4a2b      	ldr	r2, [pc, #172]	@ (8000a6c <SystemInit+0x144>)
 80009c0:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Reset PLL1FRACR register */
    RCC->PLL1FRACR = 0x00000000;
 80009c2:	4b26      	ldr	r3, [pc, #152]	@ (8000a5c <SystemInit+0x134>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Reset PLL2DIVR register */
    RCC->PLL2DIVR = 0x01010280;
 80009c8:	4b24      	ldr	r3, [pc, #144]	@ (8000a5c <SystemInit+0x134>)
 80009ca:	4a28      	ldr	r2, [pc, #160]	@ (8000a6c <SystemInit+0x144>)
 80009cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Reset PLL2FRACR register */

    RCC->PLL2FRACR = 0x00000000;
 80009ce:	4b23      	ldr	r3, [pc, #140]	@ (8000a5c <SystemInit+0x134>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Reset PLL3DIVR register */
    RCC->PLL3DIVR = 0x01010280;
 80009d4:	4b21      	ldr	r3, [pc, #132]	@ (8000a5c <SystemInit+0x134>)
 80009d6:	4a25      	ldr	r2, [pc, #148]	@ (8000a6c <SystemInit+0x144>)
 80009d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Reset PLL3FRACR register */
    RCC->PLL3FRACR = 0x00000000;
 80009da:	4b20      	ldr	r3, [pc, #128]	@ (8000a5c <SystemInit+0x134>)
 80009dc:	2200      	movs	r2, #0
 80009de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Reset HSEBYP bit */
    RCC->CR &= 0xFFFBFFFFU;
 80009e0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a5c <SystemInit+0x134>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a5c <SystemInit+0x134>)
 80009e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80009ea:	6013      	str	r3, [r2, #0]

    /* Disable all interrupts */
    RCC->CIER = 0x00000000;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <SystemInit+0x134>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Enable CortexM7 HSEM EXTI line (line 78)*/
    EXTI_D2->EMR3 |= 0x4000UL;
 80009f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <SystemInit+0x148>)
 80009f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a70 <SystemInit+0x148>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009fc:	6253      	str	r3, [r2, #36]	@ 0x24

    if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80009fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000a74 <SystemInit+0x14c>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <SystemInit+0x150>)
 8000a04:	4013      	ands	r3, r2
 8000a06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a0a:	d202      	bcs.n	8000a12 <SystemInit+0xea>
        /* if stm32h7 revY*/
        /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
        *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <SystemInit+0x154>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	601a      	str	r2, [r3, #0]
    SCB->VTOR = VECT_TAB_BASE_ADDRESS |
                VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
    if (READ_BIT (RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U) {
 8000a12:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <SystemInit+0x134>)
 8000a14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d113      	bne.n	8000a48 <SystemInit+0x120>
        /* Enable the FMC interface clock */
        SET_BIT (RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000a20:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <SystemInit+0x134>)
 8000a22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a26:	4a0d      	ldr	r2, [pc, #52]	@ (8000a5c <SystemInit+0x134>)
 8000a28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a2c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
        /*
         * Disable the FMC bank1 (enabled after reset).
         * This, prevents CPU speculation access on this bank which blocks the use of FMC during
         * 24us. During this time the others FMC master (such as LTDC) cannot use it!
         */
        FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a30:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <SystemInit+0x158>)
 8000a32:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000a36:	601a      	str	r2, [r3, #0]

        /* Disable the FMC interface clock */
        CLEAR_BIT (RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000a38:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <SystemInit+0x134>)
 8000a3a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a3e:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <SystemInit+0x134>)
 8000a40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a44:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00
 8000a58:	52002000 	.word	0x52002000
 8000a5c:	58024400 	.word	0x58024400
 8000a60:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a64:	02020200 	.word	0x02020200
 8000a68:	01ff0000 	.word	0x01ff0000
 8000a6c:	01010280 	.word	0x01010280
 8000a70:	580000c0 	.word	0x580000c0
 8000a74:	5c001000 	.word	0x5c001000
 8000a78:	ffff0000 	.word	0xffff0000
 8000a7c:	51008108 	.word	0x51008108
 8000a80:	52004000 	.word	0x52004000

08000a84 <ExitRun0Mode>:
 *         that the power supply configuration is stable.
 *
 * @param  None
 * @retval None
 */
void ExitRun0Mode (void) {
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
    /* Wait till voltage level flag is set */
    while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U) {
    }
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
    /* Exit Run* mode */
    PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000a88:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <ExitRun0Mode+0x2c>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	4a08      	ldr	r2, [pc, #32]	@ (8000ab0 <ExitRun0Mode+0x2c>)
 8000a8e:	f023 0302 	bic.w	r3, r3, #2
 8000a92:	60d3      	str	r3, [r2, #12]
    /* Wait till voltage level flag is set */
    while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U) {
 8000a94:	bf00      	nop
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <ExitRun0Mode+0x2c>)
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d0f9      	beq.n	8000a96 <ExitRun0Mode+0x12>
    while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U) {
    }
#else
    /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000aa2:	bf00      	nop
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	58024800 	.word	0x58024800

08000ab4 <RingBuffCreate>:
 * \param[in]       buff: Buffer handle
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
RINGBUFF_VOLATILE RingBuff* RingBuffCreate (void* pBuff, size_t size) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
    if (pBuff == NULL || size == 0 || size < (sizeof (RingBuff) + 1)) {
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d005      	beq.n	8000ad0 <RingBuffCreate+0x1c>
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d002      	beq.n	8000ad0 <RingBuffCreate+0x1c>
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	2b20      	cmp	r3, #32
 8000ace:	d801      	bhi.n	8000ad4 <RingBuffCreate+0x20>
        return NULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e017      	b.n	8000b04 <RingBuffCreate+0x50>
    }

    RINGBUFF_VOLATILE RingBuff* pRingBuf = (RingBuff*)pBuff;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	60fb      	str	r3, [r7, #12]
    BUF_MEMSET ((void*)pRingBuf, 0x00, sizeof (RingBuff));
 8000ad8:	2220      	movs	r2, #32
 8000ada:	2100      	movs	r1, #0
 8000adc:	68f8      	ldr	r0, [r7, #12]
 8000ade:	f009 f877 	bl	8009bd0 <memset>

    pRingBuf->size = size - sizeof (RingBuff);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	f1a3 0220 	sub.w	r2, r3, #32
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	609a      	str	r2, [r3, #8]
    pRingBuf->buff = ((uint8_t*)((uintptr_t)pBuff) + sizeof (RingBuff));
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f103 0220 	add.w	r2, r3, #32
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	605a      	str	r2, [r3, #4]

    pRingBuf->magic1 = 0xDEADBEEF;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4a04      	ldr	r2, [pc, #16]	@ (8000b0c <RingBuffCreate+0x58>)
 8000afa:	601a      	str	r2, [r3, #0]
    pRingBuf->magic2 = ~0xDEADBEEF;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4a04      	ldr	r2, [pc, #16]	@ (8000b10 <RingBuffCreate+0x5c>)
 8000b00:	619a      	str	r2, [r3, #24]

    return pRingBuf;
 8000b02:	68fb      	ldr	r3, [r7, #12]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	deadbeef 	.word	0xdeadbeef
 8000b10:	21524110 	.word	0x21524110

08000b14 <RingBuffIsValid>:
/**
 * \brief           Check if ringbuff is initialized and ready to use
 * \param[in]       buff: Buffer handle
 * \return          `1` if ready, `0` otherwise
 */
STATUS_TYPE RingBuffIsValid (RINGBUFF_VOLATILE RingBuff* buff) {
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
    return BUF_IS_VALID (buff);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d013      	beq.n	8000b4a <RingBuffIsValid+0x36>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a0d      	ldr	r2, [pc, #52]	@ (8000b5c <RingBuffIsValid+0x48>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d10e      	bne.n	8000b4a <RingBuffIsValid+0x36>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	4a0b      	ldr	r2, [pc, #44]	@ (8000b60 <RingBuffIsValid+0x4c>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d109      	bne.n	8000b4a <RingBuffIsValid+0x36>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d005      	beq.n	8000b4a <RingBuffIsValid+0x36>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <RingBuffIsValid+0x36>
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <RingBuffIsValid+0x38>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	b2db      	uxtb	r3, r3
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	deadbeef 	.word	0xdeadbeef
 8000b60:	21524110 	.word	0x21524110

08000b64 <RingBuffWrite>:
 * \param[in]       btw: Number of bytes to write
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was
 * no enough memory available to copy full data array
 */
size_t RingBuffWrite (RINGBUFF_VOLATILE RingBuff* buff, const void* data, size_t btw) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID (buff) || data == NULL || btw == 0) {
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d017      	beq.n	8000baa <RingBuffWrite+0x46>
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a3b      	ldr	r2, [pc, #236]	@ (8000c6c <RingBuffWrite+0x108>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d112      	bne.n	8000baa <RingBuffWrite+0x46>
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a39      	ldr	r2, [pc, #228]	@ (8000c70 <RingBuffWrite+0x10c>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d10d      	bne.n	8000baa <RingBuffWrite+0x46>
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d009      	beq.n	8000baa <RingBuffWrite+0x46>
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d005      	beq.n	8000baa <RingBuffWrite+0x46>
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <RingBuffWrite+0x46>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d101      	bne.n	8000bae <RingBuffWrite+0x4a>
        return 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e059      	b.n	8000c62 <RingBuffWrite+0xfe>
    }

    /* Calculate maximum number of bytes available to write */
    free = RingBuffGetFree (buff);
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f000 f860 	bl	8000c74 <RingBuffGetFree>
 8000bb4:	61b8      	str	r0, [r7, #24]
    btw  = BUF_MIN (free, btw);
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	bf28      	it	cs
 8000bbe:	4613      	movcs	r3, r2
 8000bc0:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d101      	bne.n	8000bcc <RingBuffWrite+0x68>
        return 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e04a      	b.n	8000c62 <RingBuffWrite+0xfe>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN (buff->size - buff->w, btw);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d905      	bls.n	8000be8 <RingBuffWrite+0x84>
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	691b      	ldr	r3, [r3, #16]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	e000      	b.n	8000bea <RingBuffWrite+0x86>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY (&buff->buff[buff->w], d, tocopy);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	69f9      	ldr	r1, [r7, #28]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f009 f863 	bl	8009cc6 <memcpy>
    buff->w += tocopy;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	691a      	ldr	r2, [r3, #16]
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	441a      	add	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
    btw -= tocopy;
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d00b      	beq.n	8000c32 <RingBuffWrite+0xce>
        BUF_MEMCPY (buff->buff, &d[tocopy], btw);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	6858      	ldr	r0, [r3, #4]
 8000c1e:	69fa      	ldr	r2, [r7, #28]
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	4413      	add	r3, r2
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4619      	mov	r1, r3
 8000c28:	f009 f84d 	bl	8009cc6 <memcpy>
        buff->w = btw;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	611a      	str	r2, [r3, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	691a      	ldr	r2, [r3, #16]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d302      	bcc.n	8000c44 <RingBuffWrite+0xe0>
        buff->w = 0;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
    }
    BUF_SEND_EVT (buff, RINGBUFF_EVT_WRITE, tocopy + btw);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d007      	beq.n	8000c5c <RingBuffWrite+0xf8>
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	6979      	ldr	r1, [r7, #20]
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	440a      	add	r2, r1
 8000c56:	2101      	movs	r1, #1
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	4798      	blx	r3
    return tocopy + btw;
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3720      	adds	r7, #32
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	deadbeef 	.word	0xdeadbeef
 8000c70:	21524110 	.word	0x21524110

08000c74 <RingBuffGetFree>:
/**
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t RingBuffGetFree (RINGBUFF_VOLATILE RingBuff* buff) {
 8000c74:	b480      	push	{r7}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID (buff)) {
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d011      	beq.n	8000ca6 <RingBuffGetFree+0x32>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf8 <RingBuffGetFree+0x84>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d10c      	bne.n	8000ca6 <RingBuffGetFree+0x32>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a1a      	ldr	r2, [pc, #104]	@ (8000cfc <RingBuffGetFree+0x88>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d107      	bne.n	8000ca6 <RingBuffGetFree+0x32>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <RingBuffGetFree+0x32>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d101      	bne.n	8000caa <RingBuffGetFree+0x36>
        return 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e01f      	b.n	8000cea <RingBuffGetFree+0x76>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	691b      	ldr	r3, [r3, #16]
 8000cae:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d103      	bne.n	8000cc6 <RingBuffGetFree+0x52>
        size = buff->size;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	e00f      	b.n	8000ce6 <RingBuffGetFree+0x72>
    } else if (r > w) {
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d904      	bls.n	8000cd8 <RingBuffGetFree+0x64>
        size = r - w;
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	e006      	b.n	8000ce6 <RingBuffGetFree+0x72>
    } else {
        size = buff->size - (w - r);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	68f9      	ldr	r1, [r7, #12]
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	4413      	add	r3, r2
 8000ce4:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3b01      	subs	r3, #1
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	371c      	adds	r7, #28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	deadbeef 	.word	0xdeadbeef
 8000cfc:	21524110 	.word	0x21524110

08000d00 <RingBuffGetFull>:
/**
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t RingBuffGetFull (RINGBUFF_VOLATILE RingBuff* buff) {
 8000d00:	b480      	push	{r7}
 8000d02:	b087      	sub	sp, #28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID (buff)) {
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d011      	beq.n	8000d32 <RingBuffGetFull+0x32>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a1b      	ldr	r2, [pc, #108]	@ (8000d80 <RingBuffGetFull+0x80>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d10c      	bne.n	8000d32 <RingBuffGetFull+0x32>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a19      	ldr	r2, [pc, #100]	@ (8000d84 <RingBuffGetFull+0x84>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d107      	bne.n	8000d32 <RingBuffGetFull+0x32>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <RingBuffGetFull+0x32>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <RingBuffGetFull+0x36>
        return 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e01d      	b.n	8000d72 <RingBuffGetFull+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	691b      	ldr	r3, [r3, #16]
 8000d3a:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d102      	bne.n	8000d50 <RingBuffGetFull+0x50>
        size = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	e00f      	b.n	8000d70 <RingBuffGetFull+0x70>
    } else if (w > r) {
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d904      	bls.n	8000d62 <RingBuffGetFull+0x62>
        size = w - r;
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	e006      	b.n	8000d70 <RingBuffGetFull+0x70>
    } else {
        size = buff->size - (r - w);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	6939      	ldr	r1, [r7, #16]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	1acb      	subs	r3, r1, r3
 8000d6c:	4413      	add	r3, r2
 8000d6e:	617b      	str	r3, [r7, #20]
    }
    return size;
 8000d70:	697b      	ldr	r3, [r7, #20]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	371c      	adds	r7, #28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	deadbeef 	.word	0xdeadbeef
 8000d84:	21524110 	.word	0x21524110

08000d88 <RingBuffGetLinearBlockReadAddress>:
/**
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void* RingBuffGetLinearBlockReadAddress (RINGBUFF_VOLATILE RingBuff* buff) {
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID (buff)) {
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d011      	beq.n	8000dba <RingBuffGetLinearBlockReadAddress+0x32>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd4 <RingBuffGetLinearBlockReadAddress+0x4c>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d10c      	bne.n	8000dba <RingBuffGetLinearBlockReadAddress+0x32>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd8 <RingBuffGetLinearBlockReadAddress+0x50>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d107      	bne.n	8000dba <RingBuffGetLinearBlockReadAddress+0x32>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <RingBuffGetLinearBlockReadAddress+0x32>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d101      	bne.n	8000dbe <RingBuffGetLinearBlockReadAddress+0x36>
        return NULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e004      	b.n	8000dc8 <RingBuffGetLinearBlockReadAddress+0x40>
    }
    return &buff->buff[buff->r];
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	4413      	add	r3, r2
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	deadbeef 	.word	0xdeadbeef
 8000dd8:	21524110 	.word	0x21524110

08000ddc <RingBuffGetLinearBlockReadLength>:
/**
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t RingBuffGetLinearBlockReadLength (RINGBUFF_VOLATILE RingBuff* buff) {
 8000ddc:	b480      	push	{r7}
 8000dde:	b087      	sub	sp, #28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID (buff)) {
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d011      	beq.n	8000e0e <RingBuffGetLinearBlockReadLength+0x32>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a1a      	ldr	r2, [pc, #104]	@ (8000e58 <RingBuffGetLinearBlockReadLength+0x7c>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d10c      	bne.n	8000e0e <RingBuffGetLinearBlockReadLength+0x32>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a18      	ldr	r2, [pc, #96]	@ (8000e5c <RingBuffGetLinearBlockReadLength+0x80>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d107      	bne.n	8000e0e <RingBuffGetLinearBlockReadLength+0x32>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <RingBuffGetLinearBlockReadLength+0x32>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <RingBuffGetLinearBlockReadLength+0x36>
        return 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e01b      	b.n	8000e4a <RingBuffGetLinearBlockReadLength+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	691b      	ldr	r3, [r3, #16]
 8000e16:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d904      	bls.n	8000e30 <RingBuffGetLinearBlockReadLength+0x54>
        len = w - r;
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	e00b      	b.n	8000e48 <RingBuffGetLinearBlockReadLength+0x6c>
    } else if (r > w) {
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d905      	bls.n	8000e44 <RingBuffGetLinearBlockReadLength+0x68>
        len = buff->size - r;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	e001      	b.n	8000e48 <RingBuffGetLinearBlockReadLength+0x6c>
    } else {
        len = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
    }
    return len;
 8000e48:	697b      	ldr	r3, [r7, #20]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	371c      	adds	r7, #28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	deadbeef 	.word	0xdeadbeef
 8000e5c:	21524110 	.word	0x21524110

08000e60 <RingBuffSkip>:
 * \note            Useful at the end of streaming transfer such as DMA
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t RingBuffSkip (RINGBUFF_VOLATILE RingBuff* buff, size_t len) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID (buff) || len == 0) {
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d014      	beq.n	8000e9a <RingBuffSkip+0x3a>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a20      	ldr	r2, [pc, #128]	@ (8000ef8 <RingBuffSkip+0x98>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d10f      	bne.n	8000e9a <RingBuffSkip+0x3a>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8000efc <RingBuffSkip+0x9c>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d10a      	bne.n	8000e9a <RingBuffSkip+0x3a>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d006      	beq.n	8000e9a <RingBuffSkip+0x3a>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <RingBuffSkip+0x3a>
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <RingBuffSkip+0x3e>
        return 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e027      	b.n	8000eee <RingBuffSkip+0x8e>
    }

    full = RingBuffGetFull (buff); /* Get buffer used length */
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ff2e 	bl	8000d00 <RingBuffGetFull>
 8000ea4:	60f8      	str	r0, [r7, #12]
    len  = BUF_MIN (len, full);    /* Calculate max skip */
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	bf28      	it	cs
 8000eae:	4613      	movcs	r3, r2
 8000eb0:	603b      	str	r3, [r7, #0]
    buff->r += len;                /* Advance read pointer */
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	441a      	add	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {   /* Subtract possible overflow */
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d306      	bcc.n	8000ed8 <RingBuffSkip+0x78>
        buff->r -= buff->size;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	68d2      	ldr	r2, [r2, #12]
 8000ed2:	1ad2      	subs	r2, r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT (buff, RINGBUFF_EVT_READ, len);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d005      	beq.n	8000eec <RingBuffSkip+0x8c>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	4798      	blx	r3
    return len;
 8000eec:	683b      	ldr	r3, [r7, #0]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	deadbeef 	.word	0xdeadbeef
 8000efc:	21524110 	.word	0x21524110

08000f00 <IMUReadReg>:
#include "sensors/imu/bmixxx.h"
#include <string.h>

#define BIT_ISSET(v, bit) ((v & bit) == 1)

STATUS_TYPE IMUReadReg (IMU const* pIMU, uint8_t reg, uint8_t* pBuf, uint32_t len) {
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b091      	sub	sp, #68	@ 0x44
 8000f04:	af02      	add	r7, sp, #8
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	72fb      	strb	r3, [r7, #11]
    uint8_t pTx[16] = { 0 };
 8000f10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
    // set read mask for register address
    pTx[0] = BMI3_SPI_RD_MASK | reg;
 8000f1e:	7afb      	ldrb	r3, [r7, #11]
 8000f20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    uint8_t pRx[16] = { 0 };
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
    // status = HAL_SPI_Transmit(pIMUSPIRef, pTemp, 1, 100);

    // set NSS high
    // HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

    if (len + pIMU->nDummyBytes > 16) {
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	2b10      	cmp	r3, #16
 8000f42:	d901      	bls.n	8000f48 <IMUReadReg+0x48>
        return eSTATUS_FAILURE;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e034      	b.n	8000fb2 <IMUReadReg+0xb2>
    }

    HAL_StatusTypeDef status =
    HAL_SPI_TransmitReceive (pIMU->pSPI, pTx, pRx, len + pIMU->nDummyBytes, 100);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	4413      	add	r3, r2
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	f107 0214 	add.w	r2, r7, #20
 8000f5e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000f62:	2464      	movs	r4, #100	@ 0x64
 8000f64:	9400      	str	r4, [sp, #0]
 8000f66:	f005 f9b9 	bl	80062dc <HAL_SPI_TransmitReceive>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (status != HAL_OK) {
 8000f70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d011      	beq.n	8000f9c <IMUReadReg+0x9c>
        LOG_ERROR ("HAL failed to transmit to IMU");
 8000f78:	4810      	ldr	r0, [pc, #64]	@ (8000fbc <IMUReadReg+0xbc>)
 8000f7a:	f008 fce1 	bl	8009940 <iprintf>
 8000f7e:	4810      	ldr	r0, [pc, #64]	@ (8000fc0 <IMUReadReg+0xc0>)
 8000f80:	f008 fcde 	bl	8009940 <iprintf>
 8000f84:	211d      	movs	r1, #29
 8000f86:	480f      	ldr	r0, [pc, #60]	@ (8000fc4 <IMUReadReg+0xc4>)
 8000f88:	f008 fcda 	bl	8009940 <iprintf>
 8000f8c:	480e      	ldr	r0, [pc, #56]	@ (8000fc8 <IMUReadReg+0xc8>)
 8000f8e:	f008 fcd7 	bl	8009940 <iprintf>
 8000f92:	480e      	ldr	r0, [pc, #56]	@ (8000fcc <IMUReadReg+0xcc>)
 8000f94:	f008 fd3c 	bl	8009a10 <puts>
        return eSTATUS_FAILURE;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e00a      	b.n	8000fb2 <IMUReadReg+0xb2>
    }
    // The first nDummyBytes are dummy bytes
    memcpy (pBuf, &pRx[pIMU->nDummyBytes], len);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fa0:	f107 0214 	add.w	r2, r7, #20
 8000fa4:	4413      	add	r3, r2
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f008 fe8b 	bl	8009cc6 <memcpy>
    // LOG_INFO("Successful read from IMU");
    return eSTATUS_SUCCESS;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	373c      	adds	r7, #60	@ 0x3c
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd90      	pop	{r4, r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	0800a7a0 	.word	0x0800a7a0
 8000fc0:	0800a7ac 	.word	0x0800a7ac
 8000fc4:	0800a800 	.word	0x0800a800
 8000fc8:	0800a808 	.word	0x0800a808
 8000fcc:	0800a828 	.word	0x0800a828

08000fd0 <IMUWriteReg>:

STATUS_TYPE IMUWriteReg (IMU const* pIMU, uint8_t reg, uint8_t* pBuf, uint32_t len) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	@ 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	72fb      	strb	r3, [r7, #11]
    uint8_t pTx[16];
    memset (pTx, 0, sizeof (pTx));
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2210      	movs	r2, #16
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f008 fdf1 	bl	8009bd0 <memset>

    if (len + 1 > 16) {
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	2b10      	cmp	r3, #16
 8000ff4:	d901      	bls.n	8000ffa <IMUWriteReg+0x2a>
        return eSTATUS_FAILURE;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e031      	b.n	800105e <IMUWriteReg+0x8e>
    }

    pTx[0] = reg | BMI3_SPI_WR_MASK;
 8000ffa:	7afb      	ldrb	r3, [r7, #11]
 8000ffc:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8001000:	b2db      	uxtb	r3, r3
 8001002:	753b      	strb	r3, [r7, #20]
    memcpy (&pTx[1], (void*)pBuf, len);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	3301      	adds	r3, #1
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	4618      	mov	r0, r3
 8001010:	f008 fe59 	bl	8009cc6 <memcpy>

    HAL_StatusTypeDef status = HAL_SPI_Transmit (pIMU->pSPI, pTx, len + 1, 100);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	3301      	adds	r3, #1
 800101e:	b29a      	uxth	r2, r3
 8001020:	f107 0114 	add.w	r1, r7, #20
 8001024:	2364      	movs	r3, #100	@ 0x64
 8001026:	f004 ff6b 	bl	8005f00 <HAL_SPI_Transmit>
 800102a:	4603      	mov	r3, r0
 800102c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (status != HAL_OK) {
 8001030:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001034:	2b00      	cmp	r3, #0
 8001036:	d011      	beq.n	800105c <IMUWriteReg+0x8c>
        LOG_ERROR ("HAL failed to transmit to IMU");
 8001038:	480b      	ldr	r0, [pc, #44]	@ (8001068 <IMUWriteReg+0x98>)
 800103a:	f008 fc81 	bl	8009940 <iprintf>
 800103e:	480b      	ldr	r0, [pc, #44]	@ (800106c <IMUWriteReg+0x9c>)
 8001040:	f008 fc7e 	bl	8009940 <iprintf>
 8001044:	2134      	movs	r1, #52	@ 0x34
 8001046:	480a      	ldr	r0, [pc, #40]	@ (8001070 <IMUWriteReg+0xa0>)
 8001048:	f008 fc7a 	bl	8009940 <iprintf>
 800104c:	4809      	ldr	r0, [pc, #36]	@ (8001074 <IMUWriteReg+0xa4>)
 800104e:	f008 fc77 	bl	8009940 <iprintf>
 8001052:	4809      	ldr	r0, [pc, #36]	@ (8001078 <IMUWriteReg+0xa8>)
 8001054:	f008 fcdc 	bl	8009a10 <puts>
        return eSTATUS_FAILURE;
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <IMUWriteReg+0x8e>
    }

    // LOG_INFO("Successful write to IMU");
    return eSTATUS_SUCCESS;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3728      	adds	r7, #40	@ 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	0800a7a0 	.word	0x0800a7a0
 800106c:	0800a7ac 	.word	0x0800a7ac
 8001070:	0800a800 	.word	0x0800a800
 8001074:	0800a808 	.word	0x0800a808
 8001078:	0800a828 	.word	0x0800a828

0800107c <IMU2CPUInterruptHandler>:
    // pOutputVel->z = curVel.z + ((az * dt) / 1000);

    return eSTATUS_SUCCESS;
}

STATUS_TYPE IMU2CPUInterruptHandler (IMU* pIMU, Vec3* pOutputAccel, Vec3* pOutputGyro) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
    if (pIMU == NULL || pIMU->pSPI == NULL || pOutputAccel == NULL || pOutputGyro == NULL) {
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d009      	beq.n	80010a2 <IMU2CPUInterruptHandler+0x26>
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d005      	beq.n	80010a2 <IMU2CPUInterruptHandler+0x26>
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d002      	beq.n	80010a2 <IMU2CPUInterruptHandler+0x26>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d111      	bne.n	80010c6 <IMU2CPUInterruptHandler+0x4a>
        LOG_ERROR ("Invalid arguments");
 80010a2:	4821      	ldr	r0, [pc, #132]	@ (8001128 <IMU2CPUInterruptHandler+0xac>)
 80010a4:	f008 fc4c 	bl	8009940 <iprintf>
 80010a8:	4820      	ldr	r0, [pc, #128]	@ (800112c <IMU2CPUInterruptHandler+0xb0>)
 80010aa:	f008 fc49 	bl	8009940 <iprintf>
 80010ae:	2190      	movs	r1, #144	@ 0x90
 80010b0:	481f      	ldr	r0, [pc, #124]	@ (8001130 <IMU2CPUInterruptHandler+0xb4>)
 80010b2:	f008 fc45 	bl	8009940 <iprintf>
 80010b6:	481f      	ldr	r0, [pc, #124]	@ (8001134 <IMU2CPUInterruptHandler+0xb8>)
 80010b8:	f008 fc42 	bl	8009940 <iprintf>
 80010bc:	481e      	ldr	r0, [pc, #120]	@ (8001138 <IMU2CPUInterruptHandler+0xbc>)
 80010be:	f008 fca7 	bl	8009a10 <puts>
        return eSTATUS_FAILURE;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e02c      	b.n	8001120 <IMU2CPUInterruptHandler+0xa4>
    }

    // read both status registers
    uint8_t pBuf[2]    = { 0, 0 };
 80010c6:	2300      	movs	r3, #0
 80010c8:	823b      	strh	r3, [r7, #16]
    STATUS_TYPE status = IMUReadReg (pIMU, BMI3_REG_INT_STATUS_INT1, pBuf, 2);
 80010ca:	f107 0210 	add.w	r2, r7, #16
 80010ce:	2302      	movs	r3, #2
 80010d0:	210d      	movs	r1, #13
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f7ff ff14 	bl	8000f00 <IMUReadReg>
 80010d8:	4603      	mov	r3, r0
 80010da:	75fb      	strb	r3, [r7, #23]

    if (status != eSTATUS_SUCCESS) {
 80010dc:	7dfb      	ldrb	r3, [r7, #23]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <IMU2CPUInterruptHandler+0x6a>
        return eSTATUS_FAILURE;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e01c      	b.n	8001120 <IMU2CPUInterruptHandler+0xa4>
    }

    uint16_t intStatus1 = ((uint16_t)pBuf[1]) << 8 | (uint16_t)pBuf[0];
 80010e6:	7c7b      	ldrb	r3, [r7, #17]
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	7c3b      	ldrb	r3, [r7, #16]
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	82bb      	strh	r3, [r7, #20]
        status |= IMUUpdateGyro (pIMU, *pOutputGyro, pOutputGyro);
    /* check if temperature data is ready */
    if (BIT_ISSET (intStatus1, (11 << 1)))
        ;

    if (status != eSTATUS_SUCCESS)
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00f      	beq.n	800111e <IMU2CPUInterruptHandler+0xa2>
        LOG_ERROR ("Failed to update IMU position data");
 80010fe:	480a      	ldr	r0, [pc, #40]	@ (8001128 <IMU2CPUInterruptHandler+0xac>)
 8001100:	f008 fc1e 	bl	8009940 <iprintf>
 8001104:	4809      	ldr	r0, [pc, #36]	@ (800112c <IMU2CPUInterruptHandler+0xb0>)
 8001106:	f008 fc1b 	bl	8009940 <iprintf>
 800110a:	21b0      	movs	r1, #176	@ 0xb0
 800110c:	4808      	ldr	r0, [pc, #32]	@ (8001130 <IMU2CPUInterruptHandler+0xb4>)
 800110e:	f008 fc17 	bl	8009940 <iprintf>
 8001112:	480a      	ldr	r0, [pc, #40]	@ (800113c <IMU2CPUInterruptHandler+0xc0>)
 8001114:	f008 fc14 	bl	8009940 <iprintf>
 8001118:	4807      	ldr	r0, [pc, #28]	@ (8001138 <IMU2CPUInterruptHandler+0xbc>)
 800111a:	f008 fc79 	bl	8009a10 <puts>

    return status;
 800111e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	0800a7a0 	.word	0x0800a7a0
 800112c:	0800a7ac 	.word	0x0800a7ac
 8001130:	0800a800 	.word	0x0800a800
 8001134:	0800a82c 	.word	0x0800a82c
 8001138:	0800a828 	.word	0x0800a828
 800113c:	0800a840 	.word	0x0800a840

08001140 <IMUSoftReset>:

STATUS_TYPE IMUSoftReset (IMU* pIMU) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	@ 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
    /* Send soft reset command to BMI323 */
    uint8_t cmdBuffer[2] = { 0 };
 8001148:	2300      	movs	r3, #0
 800114a:	843b      	strh	r3, [r7, #32]
    cmdBuffer[0] = (uint8_t)(BMI3_CMD_SOFT_RESET & BMI3_SET_LOW_BYTE);
 800114c:	23af      	movs	r3, #175	@ 0xaf
 800114e:	f887 3020 	strb.w	r3, [r7, #32]
    cmdBuffer[1] = (uint8_t)((BMI3_CMD_SOFT_RESET & BMI3_SET_HIGH_BYTE) >> 8);
 8001152:	23de      	movs	r3, #222	@ 0xde
 8001154:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    STATUS_TYPE status = IMUWriteReg (pIMU, BMI3_REG_CMD, cmdBuffer, 2);
 8001158:	f107 0220 	add.w	r2, r7, #32
 800115c:	2302      	movs	r3, #2
 800115e:	217e      	movs	r1, #126	@ 0x7e
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff35 	bl	8000fd0 <IMUWriteReg>
 8001166:	4603      	mov	r3, r0
 8001168:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Perform dummy read to switch from I3C/I2C to SPI */
    if (status == eSTATUS_SUCCESS) {
 800116c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10b      	bne.n	800118c <IMUSoftReset+0x4c>
        uint8_t dummyBytes[2] = { 0 };
 8001174:	2300      	movs	r3, #0
 8001176:	83bb      	strh	r3, [r7, #28]
        status = IMUReadReg (pIMU, BMI3_REG_CHIP_ID, dummyBytes, 2);
 8001178:	f107 021c 	add.w	r2, r7, #28
 800117c:	2302      	movs	r3, #2
 800117e:	2100      	movs	r1, #0
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff febd 	bl	8000f00 <IMUReadReg>
 8001186:	4603      	mov	r3, r0
 8001188:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable feature engine */
    if (status == eSTATUS_SUCCESS) {
 800118c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001190:	2b00      	cmp	r3, #0
 8001192:	d10c      	bne.n	80011ae <IMUSoftReset+0x6e>
        uint8_t featureData[2] = { 0x2c, 0x01 };
 8001194:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001198:	833b      	strh	r3, [r7, #24]
        status = IMUWriteReg (pIMU, BMI3_REG_FEATURE_IO2, featureData, 2);
 800119a:	f107 0218 	add.w	r2, r7, #24
 800119e:	2302      	movs	r3, #2
 80011a0:	2112      	movs	r1, #18
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff14 	bl	8000fd0 <IMUWriteReg>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable feature status bit */
    if (status == eSTATUS_SUCCESS) {
 80011ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10b      	bne.n	80011ce <IMUSoftReset+0x8e>
        uint8_t featureIOStatus[2] = { BMI3_ENABLE, 0 };
 80011b6:	2301      	movs	r3, #1
 80011b8:	82bb      	strh	r3, [r7, #20]
        status = IMUWriteReg (pIMU, BMI3_REG_FEATURE_IO_STATUS, featureIOStatus, 2);
 80011ba:	f107 0214 	add.w	r2, r7, #20
 80011be:	2302      	movs	r3, #2
 80011c0:	2114      	movs	r1, #20
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ff04 	bl	8000fd0 <IMUWriteReg>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable feature engine bit */
    if (status == eSTATUS_SUCCESS) {
 80011ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10b      	bne.n	80011ee <IMUSoftReset+0xae>
        uint8_t featureEngine[2] = { BMI3_ENABLE, 0 };
 80011d6:	2301      	movs	r3, #1
 80011d8:	823b      	strh	r3, [r7, #16]
        status = IMUWriteReg (pIMU, BMI3_REG_FEATURE_CTRL, featureEngine, 2);
 80011da:	f107 0210 	add.w	r2, r7, #16
 80011de:	2302      	movs	r3, #2
 80011e0:	2140      	movs	r1, #64	@ 0x40
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff fef4 	bl	8000fd0 <IMUWriteReg>
 80011e8:	4603      	mov	r3, r0
 80011ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if (status == eSTATUS_SUCCESS) {
 80011ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d126      	bne.n	8001244 <IMUSoftReset+0x104>
        int16_t loop       = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
        uint8_t regData[2] = { 0 };
 80011fa:	2300      	movs	r3, #0
 80011fc:	81bb      	strh	r3, [r7, #12]

        while (loop++ <= 10) {
 80011fe:	e019      	b.n	8001234 <IMUSoftReset+0xf4>
            HAL_Delay (100);
 8001200:	2064      	movs	r0, #100	@ 0x64
 8001202:	f001 fae7 	bl	80027d4 <HAL_Delay>
            status = IMUReadReg (pIMU, BMI3_REG_FEATURE_IO1, regData, 2);
 8001206:	f107 020c 	add.w	r2, r7, #12
 800120a:	2302      	movs	r3, #2
 800120c:	2111      	movs	r1, #17
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff fe76 	bl	8000f00 <IMUReadReg>
 8001214:	4603      	mov	r3, r0
 8001216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if (status == eSTATUS_SUCCESS) {
 800121a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800121e:	2b00      	cmp	r3, #0
 8001220:	d108      	bne.n	8001234 <IMUSoftReset+0xf4>
                if (regData[0] & BMI3_FEATURE_ENGINE_ENABLE_MASK) {
 8001222:	7b3b      	ldrb	r3, [r7, #12]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <IMUSoftReset+0xf4>
                    status = eSTATUS_SUCCESS;
 800122c:	2300      	movs	r3, #0
 800122e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    break;
 8001232:	e007      	b.n	8001244 <IMUSoftReset+0x104>
        while (loop++ <= 10) {
 8001234:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001238:	b29a      	uxth	r2, r3
 800123a:	3201      	adds	r2, #1
 800123c:	b292      	uxth	r2, r2
 800123e:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8001240:	2b0a      	cmp	r3, #10
 8001242:	dddd      	ble.n	8001200 <IMUSoftReset+0xc0>
                }
            }
        }
    }

    return status;
 8001244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001248:	4618      	mov	r0, r3
 800124a:	3728      	adds	r7, #40	@ 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <IMUSetupInterrupts>:

STATUS_TYPE IMUSetupInterrupts (IMU const* pIMU) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
    uint8_t pRegData[4] = { 0 };
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
    uint16_t temp       = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	82bb      	strh	r3, [r7, #20]
    /* Map all enabled interrupts to pin INT1 */
    uint8_t enable = BMI3_INT1, disable = BMI3_INT_NONE;
 8001260:	2301      	movs	r3, #1
 8001262:	74fb      	strb	r3, [r7, #19]
 8001264:	2300      	movs	r3, #0
 8001266:	74bb      	strb	r3, [r7, #18]
    STATUS_TYPE status = IMUReadReg (pIMU, BMI3_REG_INT_MAP1, pRegData, 4);
 8001268:	f107 020c 	add.w	r2, r7, #12
 800126c:	2304      	movs	r3, #4
 800126e:	213a      	movs	r1, #58	@ 0x3a
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff fe45 	bl	8000f00 <IMUReadReg>
 8001276:	4603      	mov	r3, r0
 8001278:	75fb      	strb	r3, [r7, #23]

    if (status == eSTATUS_SUCCESS) {
 800127a:	7dfb      	ldrb	r3, [r7, #23]
 800127c:	2b00      	cmp	r3, #0
 800127e:	f040 8101 	bne.w	8001484 <IMUSetupInterrupts+0x234>
        pRegData[0] = BMI3_SET_BIT_POS0 (pRegData[0], BMI3_NO_MOTION_OUT, disable);
 8001282:	7b3b      	ldrb	r3, [r7, #12]
 8001284:	b25b      	sxtb	r3, r3
 8001286:	f023 0303 	bic.w	r3, r3, #3
 800128a:	b25a      	sxtb	r2, r3
 800128c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	b25b      	sxtb	r3, r3
 8001296:	4313      	orrs	r3, r2
 8001298:	b25b      	sxtb	r3, r3
 800129a:	b2db      	uxtb	r3, r3
 800129c:	733b      	strb	r3, [r7, #12]
        pRegData[0] = BMI3_SET_BITS (pRegData[0], BMI3_ANY_MOTION_OUT, disable);
 800129e:	7b3b      	ldrb	r3, [r7, #12]
 80012a0:	b25b      	sxtb	r3, r3
 80012a2:	f023 030c 	bic.w	r3, r3, #12
 80012a6:	b25a      	sxtb	r2, r3
 80012a8:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	f003 030c 	and.w	r3, r3, #12
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	733b      	strb	r3, [r7, #12]
        pRegData[0] = BMI3_SET_BITS (pRegData[0], BMI3_FLAT_OUT, disable);
 80012be:	7b3b      	ldrb	r3, [r7, #12]
 80012c0:	b25b      	sxtb	r3, r3
 80012c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80012c6:	b25a      	sxtb	r2, r3
 80012c8:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	4313      	orrs	r3, r2
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	733b      	strb	r3, [r7, #12]
        pRegData[0] = BMI3_SET_BITS (pRegData[0], BMI3_ORIENTATION_OUT, disable);
 80012de:	7b3b      	ldrb	r3, [r7, #12]
 80012e0:	b25b      	sxtb	r3, r3
 80012e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80012e6:	b25a      	sxtb	r2, r3
 80012e8:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80012ec:	019b      	lsls	r3, r3, #6
 80012ee:	b25b      	sxtb	r3, r3
 80012f0:	4313      	orrs	r3, r2
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	733b      	strb	r3, [r7, #12]

        temp = (uint16_t)(pRegData[1]) << 8;
 80012f8:	7b7b      	ldrb	r3, [r7, #13]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	82bb      	strh	r3, [r7, #20]
        temp = BMI3_SET_BITS (temp, BMI3_STEP_DETECTOR_OUT, disable);
 80012fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001302:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001306:	b21a      	sxth	r2, r3
 8001308:	7cbb      	ldrb	r3, [r7, #18]
 800130a:	b21b      	sxth	r3, r3
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	b21b      	sxth	r3, r3
 8001310:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b21b      	sxth	r3, r3
 800131a:	82bb      	strh	r3, [r7, #20]
        temp = BMI3_SET_BITS (temp, BMI3_STEP_COUNTER_OUT, disable);
 800131c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001320:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001324:	b21a      	sxth	r2, r3
 8001326:	7cbb      	ldrb	r3, [r7, #18]
 8001328:	b21b      	sxth	r3, r3
 800132a:	029b      	lsls	r3, r3, #10
 800132c:	b21b      	sxth	r3, r3
 800132e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001332:	b21b      	sxth	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b21b      	sxth	r3, r3
 8001338:	82bb      	strh	r3, [r7, #20]
        temp = BMI3_SET_BITS (temp, BMI3_SIG_MOTION_OUT, disable);
 800133a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800133e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001342:	b21a      	sxth	r2, r3
 8001344:	7cbb      	ldrb	r3, [r7, #18]
 8001346:	b21b      	sxth	r3, r3
 8001348:	031b      	lsls	r3, r3, #12
 800134a:	b21b      	sxth	r3, r3
 800134c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001350:	b21b      	sxth	r3, r3
 8001352:	4313      	orrs	r3, r2
 8001354:	b21b      	sxth	r3, r3
 8001356:	82bb      	strh	r3, [r7, #20]
        temp = BMI3_SET_BITS (temp, BMI3_TILT_OUT, disable);
 8001358:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800135c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001360:	b21a      	sxth	r2, r3
 8001362:	7cbb      	ldrb	r3, [r7, #18]
 8001364:	b21b      	sxth	r3, r3
 8001366:	039b      	lsls	r3, r3, #14
 8001368:	b21b      	sxth	r3, r3
 800136a:	4313      	orrs	r3, r2
 800136c:	b21b      	sxth	r3, r3
 800136e:	82bb      	strh	r3, [r7, #20]
        pRegData[1] = (uint8_t)(temp >> 8);
 8001370:	8abb      	ldrh	r3, [r7, #20]
 8001372:	0a1b      	lsrs	r3, r3, #8
 8001374:	b29b      	uxth	r3, r3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	737b      	strb	r3, [r7, #13]

        pRegData[2] = BMI3_SET_BIT_POS0 (pRegData[2], BMI3_TAP_OUT, disable);
 800137a:	7bbb      	ldrb	r3, [r7, #14]
 800137c:	b25b      	sxtb	r3, r3
 800137e:	f023 0303 	bic.w	r3, r3, #3
 8001382:	b25a      	sxtb	r2, r3
 8001384:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	b25b      	sxtb	r3, r3
 800138e:	4313      	orrs	r3, r2
 8001390:	b25b      	sxtb	r3, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	73bb      	strb	r3, [r7, #14]
        pRegData[2] = BMI3_SET_BITS (pRegData[2], BMI3_I3C_OUT, disable);
 8001396:	7bbb      	ldrb	r3, [r7, #14]
 8001398:	b25b      	sxtb	r3, r3
 800139a:	f023 030c 	bic.w	r3, r3, #12
 800139e:	b25a      	sxtb	r2, r3
 80013a0:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	f003 030c 	and.w	r3, r3, #12
 80013ac:	b25b      	sxtb	r3, r3
 80013ae:	4313      	orrs	r3, r2
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	73bb      	strb	r3, [r7, #14]
        pRegData[2] = BMI3_SET_BITS (pRegData[2], BMI3_ERR_STATUS, disable);
 80013b6:	7bbb      	ldrb	r3, [r7, #14]
 80013b8:	b25b      	sxtb	r3, r3
 80013ba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80013be:	b25a      	sxtb	r2, r3
 80013c0:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80013cc:	b25b      	sxtb	r3, r3
 80013ce:	4313      	orrs	r3, r2
 80013d0:	b25b      	sxtb	r3, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	73bb      	strb	r3, [r7, #14]
        pRegData[2] = BMI3_SET_BITS (pRegData[2], BMI3_TEMP_DRDY_INT, enable);
 80013d6:	7bbb      	ldrb	r3, [r7, #14]
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013de:	b25a      	sxtb	r2, r3
 80013e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80013e4:	019b      	lsls	r3, r3, #6
 80013e6:	b25b      	sxtb	r3, r3
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b25b      	sxtb	r3, r3
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	73bb      	strb	r3, [r7, #14]

        temp = (uint16_t)(pRegData[3]) << 8;
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	82bb      	strh	r3, [r7, #20]
        temp = BMI3_SET_BITS (temp, BMI3_GYR_DRDY_INT, enable);
 80013f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80013fe:	b21a      	sxth	r2, r3
 8001400:	7cfb      	ldrb	r3, [r7, #19]
 8001402:	b21b      	sxth	r3, r3
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	b21b      	sxth	r3, r3
 8001408:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800140c:	b21b      	sxth	r3, r3
 800140e:	4313      	orrs	r3, r2
 8001410:	b21b      	sxth	r3, r3
 8001412:	82bb      	strh	r3, [r7, #20]
        temp = BMI3_SET_BITS (temp, BMI3_ACC_DRDY_INT, enable);
 8001414:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001418:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800141c:	b21a      	sxth	r2, r3
 800141e:	7cfb      	ldrb	r3, [r7, #19]
 8001420:	b21b      	sxth	r3, r3
 8001422:	029b      	lsls	r3, r3, #10
 8001424:	b21b      	sxth	r3, r3
 8001426:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800142a:	b21b      	sxth	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b21b      	sxth	r3, r3
 8001430:	82bb      	strh	r3, [r7, #20]
        temp = BMI3_SET_BITS (temp, BMI3_FIFO_WATERMARK_INT, disable);
 8001432:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001436:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800143a:	b21a      	sxth	r2, r3
 800143c:	7cbb      	ldrb	r3, [r7, #18]
 800143e:	b21b      	sxth	r3, r3
 8001440:	031b      	lsls	r3, r3, #12
 8001442:	b21b      	sxth	r3, r3
 8001444:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001448:	b21b      	sxth	r3, r3
 800144a:	4313      	orrs	r3, r2
 800144c:	b21b      	sxth	r3, r3
 800144e:	82bb      	strh	r3, [r7, #20]
        temp = BMI3_SET_BITS (temp, BMI3_FIFO_FULL_INT, disable);
 8001450:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001454:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001458:	b21a      	sxth	r2, r3
 800145a:	7cbb      	ldrb	r3, [r7, #18]
 800145c:	b21b      	sxth	r3, r3
 800145e:	039b      	lsls	r3, r3, #14
 8001460:	b21b      	sxth	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	b21b      	sxth	r3, r3
 8001466:	82bb      	strh	r3, [r7, #20]
        pRegData[3] = (uint8_t)(temp >> 8);
 8001468:	8abb      	ldrh	r3, [r7, #20]
 800146a:	0a1b      	lsrs	r3, r3, #8
 800146c:	b29b      	uxth	r3, r3
 800146e:	b2db      	uxtb	r3, r3
 8001470:	73fb      	strb	r3, [r7, #15]

        status = IMUWriteReg (pIMU, BMI3_REG_INT_MAP1, pRegData, 4);
 8001472:	f107 020c 	add.w	r2, r7, #12
 8001476:	2304      	movs	r3, #4
 8001478:	213a      	movs	r1, #58	@ 0x3a
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fda8 	bl	8000fd0 <IMUWriteReg>
 8001480:	4603      	mov	r3, r0
 8001482:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 8001484:	7dfb      	ldrb	r3, [r7, #23]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <IMUInit>:
IMU* pIMU,
SPI_HandleTypeDef* pSPI,
IMU_ACC_RANGE accRange,
IMU_ACC_ODR accODR,
IMU_GYRO_RANGE gyroRange,
IMU_GYRO_ODR gyroODR) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b08c      	sub	sp, #48	@ 0x30
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	4611      	mov	r1, r2
 800149c:	461a      	mov	r2, r3
 800149e:	460b      	mov	r3, r1
 80014a0:	71fb      	strb	r3, [r7, #7]
 80014a2:	4613      	mov	r3, r2
 80014a4:	71bb      	strb	r3, [r7, #6]
    memset (pIMU, 0, sizeof (IMU));
 80014a6:	223c      	movs	r2, #60	@ 0x3c
 80014a8:	2100      	movs	r1, #0
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f008 fb90 	bl	8009bd0 <memset>
    pIMU->pSPI                 = pSPI;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	601a      	str	r2, [r3, #0]
    pIMU->accRange             = accRange;
 80014b6:	79fa      	ldrb	r2, [r7, #7]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	625a      	str	r2, [r3, #36]	@ 0x24
    pIMU->accODR               = accODR;
 80014bc:	79ba      	ldrb	r2, [r7, #6]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	629a      	str	r2, [r3, #40]	@ 0x28
    pIMU->gyroRange            = gyroRange;
 80014c2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    pIMU->gyroODR              = gyroODR;
 80014ca:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	631a      	str	r2, [r3, #48]	@ 0x30
    pIMU->msLastAccUpdateTime  = HAL_GetTick ();
 80014d2:	f001 f973 	bl	80027bc <HAL_GetTick>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	61da      	str	r2, [r3, #28]
    pIMU->msLastGyroUpdateTime = HAL_GetTick ();
 80014de:	f001 f96d 	bl	80027bc <HAL_GetTick>
 80014e2:	4603      	mov	r3, r0
 80014e4:	461a      	mov	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	621a      	str	r2, [r3, #32]
    /* SPI reads have 1 dummy byte at the beginning */
    pIMU->nDummyBytes = 1;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2201      	movs	r2, #1
 80014ee:	635a      	str	r2, [r3, #52]	@ 0x34
    pIMU->magic       = IMU_MAGIC;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4a94      	ldr	r2, [pc, #592]	@ (8001744 <IMUInit+0x2b4>)
 80014f4:	639a      	str	r2, [r3, #56]	@ 0x38

    STATUS_TYPE status = IMUSoftReset (pIMU);
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f7ff fe22 	bl	8001140 <IMUSoftReset>
 80014fc:	4603      	mov	r3, r0
 80014fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status != eSTATUS_SUCCESS) {
 8001502:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001506:	2b00      	cmp	r3, #0
 8001508:	d013      	beq.n	8001532 <IMUInit+0xa2>
        LOG_ERROR ("Failed to soft reset IMU");
 800150a:	488f      	ldr	r0, [pc, #572]	@ (8001748 <IMUInit+0x2b8>)
 800150c:	f008 fa18 	bl	8009940 <iprintf>
 8001510:	488e      	ldr	r0, [pc, #568]	@ (800174c <IMUInit+0x2bc>)
 8001512:	f008 fa15 	bl	8009940 <iprintf>
 8001516:	f240 1123 	movw	r1, #291	@ 0x123
 800151a:	488d      	ldr	r0, [pc, #564]	@ (8001750 <IMUInit+0x2c0>)
 800151c:	f008 fa10 	bl	8009940 <iprintf>
 8001520:	488c      	ldr	r0, [pc, #560]	@ (8001754 <IMUInit+0x2c4>)
 8001522:	f008 fa0d 	bl	8009940 <iprintf>
 8001526:	488c      	ldr	r0, [pc, #560]	@ (8001758 <IMUInit+0x2c8>)
 8001528:	f008 fa72 	bl	8009a10 <puts>
        return status;
 800152c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001530:	e103      	b.n	800173a <IMUInit+0x2aa>
    }

    uint8_t pChipID[2] = { 0 };
 8001532:	2300      	movs	r3, #0
 8001534:	833b      	strh	r3, [r7, #24]
    status             = IMUReadReg (pIMU, BMI3_REG_CHIP_ID, pChipID, 2);
 8001536:	f107 0218 	add.w	r2, r7, #24
 800153a:	2302      	movs	r3, #2
 800153c:	2100      	movs	r1, #0
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f7ff fcde 	bl	8000f00 <IMUReadReg>
 8001544:	4603      	mov	r3, r0
 8001546:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (pChipID != BMI323_CHIP_ID) {
 800154a:	f107 0318 	add.w	r3, r7, #24
 800154e:	2b43      	cmp	r3, #67	@ 0x43
 8001550:	d014      	beq.n	800157c <IMUInit+0xec>
        LOG_ERROR ("Failed to find BMI323. Chip ID [%X] is incorrect", pChipID[0]);
 8001552:	487d      	ldr	r0, [pc, #500]	@ (8001748 <IMUInit+0x2b8>)
 8001554:	f008 f9f4 	bl	8009940 <iprintf>
 8001558:	487c      	ldr	r0, [pc, #496]	@ (800174c <IMUInit+0x2bc>)
 800155a:	f008 f9f1 	bl	8009940 <iprintf>
 800155e:	f44f 7195 	mov.w	r1, #298	@ 0x12a
 8001562:	487b      	ldr	r0, [pc, #492]	@ (8001750 <IMUInit+0x2c0>)
 8001564:	f008 f9ec 	bl	8009940 <iprintf>
 8001568:	7e3b      	ldrb	r3, [r7, #24]
 800156a:	4619      	mov	r1, r3
 800156c:	487b      	ldr	r0, [pc, #492]	@ (800175c <IMUInit+0x2cc>)
 800156e:	f008 f9e7 	bl	8009940 <iprintf>
 8001572:	4879      	ldr	r0, [pc, #484]	@ (8001758 <IMUInit+0x2c8>)
 8001574:	f008 fa4c 	bl	8009a10 <puts>
        return eSTATUS_FAILURE;
 8001578:	2301      	movs	r3, #1
 800157a:	e0de      	b.n	800173a <IMUInit+0x2aa>
    }

    /* Enable acc, gyro, and temperature - data ready interrupts for pin INT1 */
    status = IMUSetupInterrupts (pIMU);
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f7ff fe67 	bl	8001250 <IMUSetupInterrupts>
 8001582:	4603      	mov	r3, r0
 8001584:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status != eSTATUS_SUCCESS) {
 8001588:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800158c:	2b00      	cmp	r3, #0
 800158e:	d012      	beq.n	80015b6 <IMUInit+0x126>
        LOG_ERROR ("Failed to setup IMU interrupts");
 8001590:	486d      	ldr	r0, [pc, #436]	@ (8001748 <IMUInit+0x2b8>)
 8001592:	f008 f9d5 	bl	8009940 <iprintf>
 8001596:	486d      	ldr	r0, [pc, #436]	@ (800174c <IMUInit+0x2bc>)
 8001598:	f008 f9d2 	bl	8009940 <iprintf>
 800159c:	f240 1131 	movw	r1, #305	@ 0x131
 80015a0:	486b      	ldr	r0, [pc, #428]	@ (8001750 <IMUInit+0x2c0>)
 80015a2:	f008 f9cd 	bl	8009940 <iprintf>
 80015a6:	486e      	ldr	r0, [pc, #440]	@ (8001760 <IMUInit+0x2d0>)
 80015a8:	f008 f9ca 	bl	8009940 <iprintf>
 80015ac:	486a      	ldr	r0, [pc, #424]	@ (8001758 <IMUInit+0x2c8>)
 80015ae:	f008 fa2f 	bl	8009a10 <puts>
        return eSTATUS_FAILURE;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e0c1      	b.n	800173a <IMUInit+0x2aa>
    }

    /* Configure Accelerometer */
    {

        uint8_t pRegData[2] = { 0 };
 80015b6:	2300      	movs	r3, #0
 80015b8:	82bb      	strh	r3, [r7, #20]
        uint16_t odr, range, bwp, avgNum, accMode;
        odr = BMI3_SET_BIT_POS0 (pRegData[0], BMI3_ACC_ODR, pIMU->accODR);
 80015ba:	7d3b      	ldrb	r3, [r7, #20]
 80015bc:	f023 030f 	bic.w	r3, r3, #15
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	f003 030f 	and.w	r3, r3, #15
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        /* Set accelerometer range */
        range = BMI3_SET_BITS (pRegData[0], BMI3_ACC_RANGE, pIMU->accRange);
 80015d2:	7d3b      	ldrb	r3, [r7, #20]
 80015d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80015d8:	b29a      	uxth	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015de:	b29b      	uxth	r3, r3
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	857b      	strh	r3, [r7, #42]	@ 0x2a
        /* The Accel bandwidth coefficient defines the 3 dB cutoff frequency in relation to the ODR. */
        bwp = BMI3_SET_BITS (pRegData[0], BMI3_ACC_BW, 0x01);
 80015ee:	7d3b      	ldrb	r3, [r7, #20]
 80015f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	853b      	strh	r3, [r7, #40]	@ 0x28
        *  0b011     avg_8   Averaging of 8 samples
        *  0b100     avg_16  Averaging of 16 samples
        *  0b101     avg_32  Averaging of 32 samples
        *  0b110     avg_64  Averaging of 64 samples
        */
        avgNum = BMI3_SET_BITS (pRegData[1], BMI3_ACC_AVG_NUM, BMI3_ACC_AVG64);
 80015f8:	7d7b      	ldrb	r3, [r7, #21]
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8001600:	b21b      	sxth	r3, r3
 8001602:	84fb      	strh	r3, [r7, #38]	@ 0x26
        /* Enable the accel mode where averaging of samples
         * will be done based on above set bandwidth and ODR.
         * Note : By default accel is disabled. The accel will get enable by selecting the mode.
         */
        accMode = BMI3_SET_BITS (pRegData[1], BMI3_ACC_MODE, BMI3_ACC_MODE_NORMAL);
 8001604:	7d7b      	ldrb	r3, [r7, #21]
 8001606:	b21b      	sxth	r3, r3
 8001608:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800160c:	b21b      	sxth	r3, r3
 800160e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        pRegData[0] = (uint8_t)(odr | range | bwp);
 8001610:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001612:	b2da      	uxtb	r2, r3
 8001614:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001616:	b2db      	uxtb	r3, r3
 8001618:	4313      	orrs	r3, r2
 800161a:	b2da      	uxtb	r2, r3
 800161c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800161e:	b2db      	uxtb	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	b2db      	uxtb	r3, r3
 8001624:	753b      	strb	r3, [r7, #20]
        pRegData[1] = (uint8_t)((avgNum | accMode) >> 8);
 8001626:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001628:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800162a:	4313      	orrs	r3, r2
 800162c:	b29b      	uxth	r3, r3
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	b29b      	uxth	r3, r3
 8001632:	b2db      	uxtb	r3, r3
 8001634:	757b      	strb	r3, [r7, #21]
        status      = IMUWriteReg (pIMU, BMI3_REG_ACC_CONF, pRegData, 2);
 8001636:	f107 0214 	add.w	r2, r7, #20
 800163a:	2302      	movs	r3, #2
 800163c:	2120      	movs	r1, #32
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f7ff fcc6 	bl	8000fd0 <IMUWriteReg>
 8001644:	4603      	mov	r3, r0
 8001646:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (status != eSTATUS_SUCCESS) {
 800164a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800164e:	2b00      	cmp	r3, #0
 8001650:	d012      	beq.n	8001678 <IMUInit+0x1e8>
            LOG_ERROR ("Failed to configure IMU accelerometer");
 8001652:	483d      	ldr	r0, [pc, #244]	@ (8001748 <IMUInit+0x2b8>)
 8001654:	f008 f974 	bl	8009940 <iprintf>
 8001658:	483c      	ldr	r0, [pc, #240]	@ (800174c <IMUInit+0x2bc>)
 800165a:	f008 f971 	bl	8009940 <iprintf>
 800165e:	f240 1153 	movw	r1, #339	@ 0x153
 8001662:	483b      	ldr	r0, [pc, #236]	@ (8001750 <IMUInit+0x2c0>)
 8001664:	f008 f96c 	bl	8009940 <iprintf>
 8001668:	483e      	ldr	r0, [pc, #248]	@ (8001764 <IMUInit+0x2d4>)
 800166a:	f008 f969 	bl	8009940 <iprintf>
 800166e:	483a      	ldr	r0, [pc, #232]	@ (8001758 <IMUInit+0x2c8>)
 8001670:	f008 f9ce 	bl	8009a10 <puts>
            return eSTATUS_FAILURE;
 8001674:	2301      	movs	r3, #1
 8001676:	e060      	b.n	800173a <IMUInit+0x2aa>
        }
    }

    /* Configure Gyro */
    {
        uint8_t pRegData[2] = { 0 };
 8001678:	2300      	movs	r3, #0
 800167a:	823b      	strh	r3, [r7, #16]
        uint16_t odr, range, bwp, avgNum, accMode;
        /* Output Data Rate. By default ODR is set as 100Hz for gyro. */
        odr = BMI3_SET_BIT_POS0 (pRegData[0], BMI3_GYR_ODR, pIMU->gyroODR);
 800167c:	7c3b      	ldrb	r3, [r7, #16]
 800167e:	f023 030f 	bic.w	r3, r3, #15
 8001682:	b29a      	uxth	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001688:	b29b      	uxth	r3, r3
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	b29b      	uxth	r3, r3
 8001690:	4313      	orrs	r3, r2
 8001692:	847b      	strh	r3, [r7, #34]	@ 0x22
        /* Gyroscope Angular Rate Measurement Range. By default the range is 2000dps. */
        range = BMI3_SET_BITS (pRegData[0], BMI3_GYR_RANGE, pIMU->gyroRange);
 8001694:	7c3b      	ldrb	r3, [r7, #16]
 8001696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800169a:	b29a      	uxth	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	4313      	orrs	r3, r2
 80016ae:	843b      	strh	r3, [r7, #32]
        /*  The Gyroscope bandwidth coefficient defines the 3 dB cutoff
         * frequency in relation to the ODR Value   Name      Description
         *    0   odr_half   BW = gyr_odr/2
         *    1  odr_quarter BW = gyr_odr/4
         */
        bwp = BMI3_SET_BITS (pRegData[0], BMI3_GYR_BW, BMI3_GYR_BW_ODR_HALF);
 80016b0:	7c3b      	ldrb	r3, [r7, #16]
 80016b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80016b6:	83fb      	strh	r3, [r7, #30]
        *  0b011     avg_8   Averaging of 8 samples
        *  0b100     avg_16  Averaging of 16 samples
        *  0b101     avg_32  Averaging of 32 samples
        *  0b110     avg_64  Averaging of 64 samples
        */
        avgNum = BMI3_SET_BITS (pRegData[1], BMI3_ACC_AVG_NUM, BMI3_GYR_AVG32);
 80016b8:	7c7b      	ldrb	r3, [r7, #17]
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	83bb      	strh	r3, [r7, #28]
        /* Enable the gyro mode where averaging of samples
         * will be done based on above set bandwidth and ODR.
         * Note : By default gyro is disabled. The gyro will get enable by selecting the mode.
         */
        accMode = BMI3_SET_BITS (pRegData[1], BMI3_ACC_MODE, BMI3_GYR_MODE_NORMAL);
 80016c4:	7c7b      	ldrb	r3, [r7, #17]
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	837b      	strh	r3, [r7, #26]
        pRegData[0] = (uint8_t)(odr | range | bwp);
 80016d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	8c3b      	ldrh	r3, [r7, #32]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	4313      	orrs	r3, r2
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	8bfb      	ldrh	r3, [r7, #30]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	4313      	orrs	r3, r2
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	743b      	strb	r3, [r7, #16]
        pRegData[1] = (uint8_t)((avgNum | accMode) >> 8);
 80016e6:	8bba      	ldrh	r2, [r7, #28]
 80016e8:	8b7b      	ldrh	r3, [r7, #26]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	0a1b      	lsrs	r3, r3, #8
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	747b      	strb	r3, [r7, #17]
        status      = IMUWriteReg (pIMU, BMI3_REG_GYR_CONF, pRegData, 2);
 80016f6:	f107 0210 	add.w	r2, r7, #16
 80016fa:	2302      	movs	r3, #2
 80016fc:	2121      	movs	r1, #33	@ 0x21
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f7ff fc66 	bl	8000fd0 <IMUWriteReg>
 8001704:	4603      	mov	r3, r0
 8001706:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (status != eSTATUS_SUCCESS) {
 800170a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800170e:	2b00      	cmp	r3, #0
 8001710:	d012      	beq.n	8001738 <IMUInit+0x2a8>
            LOG_ERROR ("Failed to configure IMU gyroscope");
 8001712:	480d      	ldr	r0, [pc, #52]	@ (8001748 <IMUInit+0x2b8>)
 8001714:	f008 f914 	bl	8009940 <iprintf>
 8001718:	480c      	ldr	r0, [pc, #48]	@ (800174c <IMUInit+0x2bc>)
 800171a:	f008 f911 	bl	8009940 <iprintf>
 800171e:	f44f 71bd 	mov.w	r1, #378	@ 0x17a
 8001722:	480b      	ldr	r0, [pc, #44]	@ (8001750 <IMUInit+0x2c0>)
 8001724:	f008 f90c 	bl	8009940 <iprintf>
 8001728:	480f      	ldr	r0, [pc, #60]	@ (8001768 <IMUInit+0x2d8>)
 800172a:	f008 f909 	bl	8009940 <iprintf>
 800172e:	480a      	ldr	r0, [pc, #40]	@ (8001758 <IMUInit+0x2c8>)
 8001730:	f008 f96e 	bl	8009a10 <puts>
            return eSTATUS_FAILURE;
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <IMUInit+0x2aa>
    // // interrupts will NOT be cleared automatically. Have to be cleared by the
    // // the host reading the int status registers
    // pBuffer[0] = 1;
    // status = IMUWriteReg(pIMU, BMI2_INT_LATCH_ADDR, pBuffer, 1);

    return eSTATUS_SUCCESS;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3730      	adds	r7, #48	@ 0x30
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	fafaafaf 	.word	0xfafaafaf
 8001748:	0800a7a0 	.word	0x0800a7a0
 800174c:	0800a7ac 	.word	0x0800a7ac
 8001750:	0800a800 	.word	0x0800a800
 8001754:	0800a864 	.word	0x0800a864
 8001758:	0800a828 	.word	0x0800a828
 800175c:	0800a880 	.word	0x0800a880
 8001760:	0800a8b4 	.word	0x0800a8b4
 8001764:	0800a8d4 	.word	0x0800a8d4
 8001768:	0800a8fc 	.word	0x0800a8fc

0800176c <SyncMailBoxGet>:
#include "mem/mem.h"
#include "sync/mailbox.h"

static uint8_t volatile* SyncMailBoxGet (uint32_t mbID);

static uint8_t volatile* SyncMailBoxGet (uint32_t mbID) {
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
    uint8_t volatile* pMB = NULL;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
    if (mbID == MAILBOX_CM7_ID)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d103      	bne.n	8001786 <SyncMailBoxGet+0x1a>
        pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM7_START;
 800177e:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	e001      	b.n	800178a <SyncMailBoxGet+0x1e>
    else
        pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM4_START;
 8001786:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <SyncMailBoxGet+0x2c>)
 8001788:	60fb      	str	r3, [r7, #12]
    return pMB;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	38000004 	.word	0x38000004

0800179c <SyncMailBoxWrite>:

STATUS_TYPE SyncMailBoxWrite (uint32_t mbID, uint8_t* pBuffer, uint32_t len) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
    if (len > MEM_SHARED_MAILBOX_LEN)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d901      	bls.n	80017b2 <SyncMailBoxWrite+0x16>
        return eSTATUS_FAILURE;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e009      	b.n	80017c6 <SyncMailBoxWrite+0x2a>
    uint8_t volatile* pMB = SyncMailBoxGet (mbID);
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f7ff ffda 	bl	800176c <SyncMailBoxGet>
 80017b8:	6178      	str	r0, [r7, #20]
    memcpy ((void*)pMB, (void*)pBuffer, len);
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	68b9      	ldr	r1, [r7, #8]
 80017be:	6978      	ldr	r0, [r7, #20]
 80017c0:	f008 fa81 	bl	8009cc6 <memcpy>
    return eSTATUS_SUCCESS;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <SyncMailBoxWriteNotify>:

STATUS_TYPE SyncMailBoxWriteNotify (uint32_t mbID, uint8_t* pBuffer, uint32_t len) {
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	60f8      	str	r0, [r7, #12]
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
    STATUS_TYPE status = SyncMailBoxWrite (mbID, pBuffer, len);
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	68b9      	ldr	r1, [r7, #8]
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f7ff ffdc 	bl	800179c <SyncMailBoxWrite>
 80017e4:	4603      	mov	r3, r0
 80017e6:	75fb      	strb	r3, [r7, #23]
    if (status != eSTATUS_SUCCESS)
 80017e8:	7dfb      	ldrb	r3, [r7, #23]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <SyncMailBoxWriteNotify+0x24>
        return eSTATUS_FAILURE;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e003      	b.n	80017fa <SyncMailBoxWriteNotify+0x2c>
    asm volatile("dsb");
 80017f2:	f3bf 8f4f 	dsb	sy
    asm volatile("sev");
 80017f6:	bf40      	sev
    return eSTATUS_SUCCESS;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <SyncMailBoxRead>:

STATUS_TYPE SyncMailBoxRead (uint32_t mbID, uint8_t* pBuffer, uint32_t len) {
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
    if (len > MEM_SHARED_MAILBOX_LEN)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b04      	cmp	r3, #4
 8001812:	d901      	bls.n	8001818 <SyncMailBoxRead+0x16>
        return eSTATUS_FAILURE;
 8001814:	2301      	movs	r3, #1
 8001816:	e009      	b.n	800182c <SyncMailBoxRead+0x2a>
    uint8_t volatile* pMB = SyncMailBoxGet (mbID);
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f7ff ffa7 	bl	800176c <SyncMailBoxGet>
 800181e:	6178      	str	r0, [r7, #20]
    memcpy ((void*)pBuffer, (void*)pMB, len);
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6979      	ldr	r1, [r7, #20]
 8001824:	68b8      	ldr	r0, [r7, #8]
 8001826:	f008 fa4e 	bl	8009cc6 <memcpy>
    return eSTATUS_SUCCESS;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <SyncGetTaskHandler>:

#define NUM_TASK_TYPES 2

task_handler_fn_t handlers[NUM_TASK_TYPES];

task_handler_fn_t SyncGetTaskHandler (uint32_t taskID) {
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
    if (taskID > NUM_TASK_TYPES)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <SyncGetTaskHandler+0x12>
        return NULL;
 8001842:	2300      	movs	r3, #0
 8001844:	e003      	b.n	800184e <SyncGetTaskHandler+0x1a>
    return handlers[taskID];
 8001846:	4a05      	ldr	r2, [pc, #20]	@ (800185c <SyncGetTaskHandler+0x28>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	24000098 	.word	0x24000098

08001860 <SyncInit>:

/*
 * \brief Each core needs to call SyncInit
 */
STATUS_TYPE SyncInit (void) {
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
    memset (handlers, 0, sizeof (handlers));
 8001864:	2208      	movs	r2, #8
 8001866:	2100      	movs	r1, #0
 8001868:	4802      	ldr	r0, [pc, #8]	@ (8001874 <SyncInit+0x14>)
 800186a:	f008 f9b1 	bl	8009bd0 <memset>
    return eSTATUS_SUCCESS;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	bd80      	pop	{r7, pc}
 8001874:	24000098 	.word	0x24000098

08001878 <SyncRegisterHandler>:

STATUS_TYPE SyncRegisterHandler (task_handler_fn_t fn, uint32_t taskID) {
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
    if (taskID > NUM_TASK_TYPES)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <SyncRegisterHandler+0x14>
        return eSTATUS_FAILURE;
 8001888:	2301      	movs	r3, #1
 800188a:	e005      	b.n	8001898 <SyncRegisterHandler+0x20>
    handlers[taskID] = fn;
 800188c:	4905      	ldr	r1, [pc, #20]	@ (80018a4 <SyncRegisterHandler+0x2c>)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return eSTATUS_SUCCESS;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	24000098 	.word	0x24000098

080018a8 <CM7_SEV_IRQHandler>:
 * \brief A SEV instruction was executed by CM7
 * and the SEV IRQ handler for CM4 was called.
 * This function was originally defined in CM4/Core/Src/stm32h7xx_it.c
 * by the code generator but I moved it here.
 */
void CM7_SEV_IRQHandler (void) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
    // CPUID == CM4
    uint32_t taskID = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead (MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof (uint32_t));
 80018b2:	463b      	mov	r3, r7
 80018b4:	2204      	movs	r2, #4
 80018b6:	4619      	mov	r1, r3
 80018b8:	2000      	movs	r0, #0
 80018ba:	f7ff ffa2 	bl	8001802 <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler (taskID);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ffb7 	bl	8001834 <SyncGetTaskHandler>
 80018c6:	6078      	str	r0, [r7, #4]
    if (fn != NULL) {
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <CM7_SEV_IRQHandler+0x2a>
        fn ();
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4798      	blx	r3
    }
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <CM4_SEV_IRQHandler>:
 * \brief A sev instruction was executed by CM4
 * and the SEV IRQ handler for CM7 was called.
 * This function was originally defined in CM7/Core/Src/stm32h7xx_it.c
 * by the code generator but I moved it here.
 */
void CM4_SEV_IRQHandler (void) {
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
    // CPUID == CM7
    uint32_t taskID = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead (MAILBOX_CM7_ID, (uint8_t*)&taskID, sizeof (uint32_t));
 80018e4:	463b      	mov	r3, r7
 80018e6:	2204      	movs	r2, #4
 80018e8:	4619      	mov	r1, r3
 80018ea:	2001      	movs	r0, #1
 80018ec:	f7ff ff89 	bl	8001802 <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler (taskID);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ff9e 	bl	8001834 <SyncGetTaskHandler>
 80018f8:	6078      	str	r0, [r7, #4]
    if (fn != NULL) {
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <CM4_SEV_IRQHandler+0x2a>
        fn ();
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4798      	blx	r3
    }
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_GPIO_EXTI_Callback>:
FlightContext gFlightContext;
FilterMadgwickContext gFilterMadgwickContext;
PIDContext gPIDAngleContext;
TaskHandle_t gpTaskMotionControlUpdate;

void HAL_GPIO_EXTI_Callback (uint16_t gpioPin) {
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b08d      	sub	sp, #52	@ 0x34
 8001910:	af04      	add	r7, sp, #16
 8001912:	4603      	mov	r3, r0
 8001914:	80fb      	strh	r3, [r7, #6]
    if (gpioPin == IMU_INT_Pin) {
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	2b80      	cmp	r3, #128	@ 0x80
 800191a:	d122      	bne.n	8001962 <HAL_GPIO_EXTI_Callback+0x56>
        Vec3 accel, gyro;
        if (IMU2CPUInterruptHandler (&gIMU, &accel, &gyro) != eSTATUS_SUCCESS) {
 800191c:	f107 0208 	add.w	r2, r7, #8
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	4619      	mov	r1, r3
 8001926:	4811      	ldr	r0, [pc, #68]	@ (800196c <HAL_GPIO_EXTI_Callback+0x60>)
 8001928:	f7ff fba8 	bl	800107c <IMU2CPUInterruptHandler>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d017      	beq.n	8001962 <HAL_GPIO_EXTI_Callback+0x56>
            FlightContextUpdateIMUData (&gFlightContext, accel, gyro);
 8001932:	466c      	mov	r4, sp
 8001934:	f107 0308 	add.w	r3, r7, #8
 8001938:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800193c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001946:	480a      	ldr	r0, [pc, #40]	@ (8001970 <HAL_GPIO_EXTI_Callback+0x64>)
 8001948:	f7fe fec4 	bl	80006d4 <FlightContextUpdateIMUData>
            if (gpTaskMotionControlUpdate != NULL)
 800194c:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <HAL_GPIO_EXTI_Callback+0x68>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d006      	beq.n	8001962 <HAL_GPIO_EXTI_Callback+0x56>
                xTaskNotifyGive (gpTaskMotionControlUpdate);
 8001954:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <HAL_GPIO_EXTI_Callback+0x68>)
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	2300      	movs	r3, #0
 800195a:	2202      	movs	r2, #2
 800195c:	2100      	movs	r1, #0
 800195e:	f007 fe73 	bl	8009648 <xTaskGenericNotify>
        }
    }
}
 8001962:	bf00      	nop
 8001964:	3724      	adds	r7, #36	@ 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	bf00      	nop
 800196c:	24000254 	.word	0x24000254
 8001970:	24000290 	.word	0x24000290
 8001974:	240002e4 	.word	0x240002e4

08001978 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main (void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af02      	add	r7, sp, #8
    /* USER CODE END Boot_Mode_Sequence_0 */

    /* USER CODE BEGIN Boot_Mode_Sequence_1 */

    /* Wait until CPU2 boots and enters in stop mode or timeout*/
    while (__HAL_RCC_GET_FLAG (RCC_FLAG_D2CKRDY) != RESET) {
 800197e:	e000      	b.n	8001982 <main+0xa>
        asm volatile("NOP");
 8001980:	bf00      	nop
    while (__HAL_RCC_GET_FLAG (RCC_FLAG_D2CKRDY) != RESET) {
 8001982:	4b45      	ldr	r3, [pc, #276]	@ (8001a98 <main+0x120>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f8      	bne.n	8001980 <main+0x8>

    /* USER CODE END Boot_Mode_Sequence_1 */
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init ();
 800198e:	f000 fec5 	bl	800271c <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config ();
 8001992:	f000 f897 	bl	8001ac4 <SystemClock_Config>
    /* USER CODE BEGIN Boot_Mode_Sequence_2 */

    MX_GPIO_Init ();
 8001996:	f000 fab7 	bl	8001f08 <MX_GPIO_Init>
    MX_USART1_UART_Init ();
 800199a:	f000 fa69 	bl	8001e70 <MX_USART1_UART_Init>
    MX_SPI2_Init ();
 800199e:	f000 f917 	bl	8001bd0 <MX_SPI2_Init>
    MX_TIM8_Init ();
 80019a2:	f000 f96b 	bl	8001c7c <MX_TIM8_Init>
    MX_TIM13_Init ();
 80019a6:	f000 fa15 	bl	8001dd4 <MX_TIM13_Init>

    if (SyncInit () != eSTATUS_SUCCESS || LoggerInit (&huart1) != eSTATUS_SUCCESS) {
 80019aa:	f7ff ff59 	bl	8001860 <SyncInit>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d105      	bne.n	80019c0 <main+0x48>
 80019b4:	4839      	ldr	r0, [pc, #228]	@ (8001a9c <main+0x124>)
 80019b6:	f7fe ff41 	bl	800083c <LoggerInit>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <main+0x4c>
        CriticalErrorHandler ();
 80019c0:	f7fe fe74 	bl	80006ac <CriticalErrorHandler>
    }

    /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of HSEM notification */

    /*HW semaphore Clock enable*/
    __HAL_RCC_HSEM_CLK_ENABLE ();
 80019c4:	4b34      	ldr	r3, [pc, #208]	@ (8001a98 <main+0x120>)
 80019c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ca:	4a33      	ldr	r2, [pc, #204]	@ (8001a98 <main+0x120>)
 80019cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019d4:	4b30      	ldr	r3, [pc, #192]	@ (8001a98 <main+0x120>)
 80019d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
    // /*Take HSEM */
    HAL_HSEM_FastTake (HSEM_ID_0);
 80019e2:	2000      	movs	r0, #0
 80019e4:	f001 f9e2 	bl	8002dac <HAL_HSEM_FastTake>
    // /*Release HSEM in order to notify the CPU2(CM4)*/
    HAL_HSEM_Release (HSEM_ID_0, 0);
 80019e8:	2100      	movs	r1, #0
 80019ea:	2000      	movs	r0, #0
 80019ec:	f001 f9f8 	bl	8002de0 <HAL_HSEM_Release>
    // /* wait until CPU2 wakes up from stop mode */
    while (__HAL_RCC_GET_FLAG (RCC_FLAG_D2CKRDY) == RESET) {
 80019f0:	e000      	b.n	80019f4 <main+0x7c>
        asm volatile("NOP");
 80019f2:	bf00      	nop
    while (__HAL_RCC_GET_FLAG (RCC_FLAG_D2CKRDY) == RESET) {
 80019f4:	4b28      	ldr	r3, [pc, #160]	@ (8001a98 <main+0x120>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f8      	beq.n	80019f2 <main+0x7a>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init ();
 8001a00:	f000 fa82 	bl	8001f08 <MX_GPIO_Init>
    MX_USART1_UART_Init ();
 8001a04:	f000 fa34 	bl	8001e70 <MX_USART1_UART_Init>
    MX_SPI2_Init ();
 8001a08:	f000 f8e2 	bl	8001bd0 <MX_SPI2_Init>
    MX_TIM8_Init ();
 8001a0c:	f000 f936 	bl	8001c7c <MX_TIM8_Init>
    MX_TIM13_Init ();
 8001a10:	f000 f9e0 	bl	8001dd4 <MX_TIM13_Init>

    // PIDInit(&gPIDAngleContext);
    // FilterMadgwickInit(&gFilterMadgwickContext);

    STATUS_TYPE imuStatus =
    IMUInit (&gIMU, &hspi2, IMU_ACC_RANGE_4G, IMU_ACC_ODR_100, IMU_GYRO_RANGE_250, IMU_GYRO_ODR_100);
 8001a14:	2308      	movs	r3, #8
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	2301      	movs	r3, #1
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	2201      	movs	r2, #1
 8001a20:	491f      	ldr	r1, [pc, #124]	@ (8001aa0 <main+0x128>)
 8001a22:	4820      	ldr	r0, [pc, #128]	@ (8001aa4 <main+0x12c>)
 8001a24:	f7ff fd34 	bl	8001490 <IMUInit>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	71fb      	strb	r3, [r7, #7]

    if (imuStatus != eSTATUS_SUCCESS) {
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00f      	beq.n	8001a52 <main+0xda>
        LOG_ERROR ("CM7 failed to init IMU");
 8001a32:	481d      	ldr	r0, [pc, #116]	@ (8001aa8 <main+0x130>)
 8001a34:	f007 ff84 	bl	8009940 <iprintf>
 8001a38:	481c      	ldr	r0, [pc, #112]	@ (8001aac <main+0x134>)
 8001a3a:	f007 ff81 	bl	8009940 <iprintf>
 8001a3e:	21f1      	movs	r1, #241	@ 0xf1
 8001a40:	481b      	ldr	r0, [pc, #108]	@ (8001ab0 <main+0x138>)
 8001a42:	f007 ff7d 	bl	8009940 <iprintf>
 8001a46:	481b      	ldr	r0, [pc, #108]	@ (8001ab4 <main+0x13c>)
 8001a48:	f007 ff7a 	bl	8009940 <iprintf>
 8001a4c:	481a      	ldr	r0, [pc, #104]	@ (8001ab8 <main+0x140>)
 8001a4e:	f007 ffdf 	bl	8009a10 <puts>
    }

    while (1) {
        /* USER CODE END WHILE */
        HAL_Delay (5000);
 8001a52:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001a56:	f000 febd 	bl	80027d4 <HAL_Delay>
        LOG_INFO ("Hello from CM7");
 8001a5a:	4818      	ldr	r0, [pc, #96]	@ (8001abc <main+0x144>)
 8001a5c:	f007 ff70 	bl	8009940 <iprintf>
 8001a60:	4812      	ldr	r0, [pc, #72]	@ (8001aac <main+0x134>)
 8001a62:	f007 ff6d 	bl	8009940 <iprintf>
 8001a66:	21f7      	movs	r1, #247	@ 0xf7
 8001a68:	4811      	ldr	r0, [pc, #68]	@ (8001ab0 <main+0x138>)
 8001a6a:	f007 ff69 	bl	8009940 <iprintf>
 8001a6e:	4814      	ldr	r0, [pc, #80]	@ (8001ac0 <main+0x148>)
 8001a70:	f007 ff66 	bl	8009940 <iprintf>
 8001a74:	4810      	ldr	r0, [pc, #64]	@ (8001ab8 <main+0x140>)
 8001a76:	f007 ffcb 	bl	8009a10 <puts>

        if (imuStatus != eSTATUS_SUCCESS) {
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0e8      	beq.n	8001a52 <main+0xda>
        	IMUInit (&gIMU, &hspi2, IMU_ACC_RANGE_4G, IMU_ACC_ODR_100, IMU_GYRO_RANGE_250, IMU_GYRO_ODR_100);
 8001a80:	2308      	movs	r3, #8
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	2301      	movs	r3, #1
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2308      	movs	r3, #8
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4904      	ldr	r1, [pc, #16]	@ (8001aa0 <main+0x128>)
 8001a8e:	4805      	ldr	r0, [pc, #20]	@ (8001aa4 <main+0x12c>)
 8001a90:	f7ff fcfe 	bl	8001490 <IMUInit>
        HAL_Delay (5000);
 8001a94:	e7dd      	b.n	8001a52 <main+0xda>
 8001a96:	bf00      	nop
 8001a98:	58024400 	.word	0x58024400
 8001a9c:	240001c0 	.word	0x240001c0
 8001aa0:	240000a0 	.word	0x240000a0
 8001aa4:	24000254 	.word	0x24000254
 8001aa8:	0800a920 	.word	0x0800a920
 8001aac:	0800a92c 	.word	0x0800a92c
 8001ab0:	0800a940 	.word	0x0800a940
 8001ab4:	0800a948 	.word	0x0800a948
 8001ab8:	0800a960 	.word	0x0800a960
 8001abc:	0800a964 	.word	0x0800a964
 8001ac0:	0800a970 	.word	0x0800a970

08001ac4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config (void) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b09c      	sub	sp, #112	@ 0x70
 8001ac8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001aca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ace:	224c      	movs	r2, #76	@ 0x4c
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f008 f87c 	bl	8009bd0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	2220      	movs	r2, #32
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f008 f876 	bl	8009bd0 <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply (PWR_DIRECT_SMPS_SUPPLY);
 8001ae4:	2004      	movs	r0, #4
 8001ae6:	f001 f98f 	bl	8002e08 <HAL_PWREx_ConfigSupply>

    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG (PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aea:	2300      	movs	r3, #0
 8001aec:	603b      	str	r3, [r7, #0]
 8001aee:	4b36      	ldr	r3, [pc, #216]	@ (8001bc8 <SystemClock_Config+0x104>)
 8001af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af2:	4a35      	ldr	r2, [pc, #212]	@ (8001bc8 <SystemClock_Config+0x104>)
 8001af4:	f023 0301 	bic.w	r3, r3, #1
 8001af8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001afa:	4b33      	ldr	r3, [pc, #204]	@ (8001bc8 <SystemClock_Config+0x104>)
 8001afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	603b      	str	r3, [r7, #0]
 8001b04:	4b31      	ldr	r3, [pc, #196]	@ (8001bcc <SystemClock_Config+0x108>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a30      	ldr	r2, [pc, #192]	@ (8001bcc <SystemClock_Config+0x108>)
 8001b0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b2e      	ldr	r3, [pc, #184]	@ (8001bcc <SystemClock_Config+0x108>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b18:	603b      	str	r3, [r7, #0]
 8001b1a:	683b      	ldr	r3, [r7, #0]

    while (!__HAL_PWR_GET_FLAG (PWR_FLAG_VOSRDY)) {
 8001b1c:	bf00      	nop
 8001b1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bcc <SystemClock_Config+0x108>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b2a:	d1f8      	bne.n	8001b1e <SystemClock_Config+0x5a>
    }

    /** Initializes the RCC Oscillators according to the specified
     * parameters in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType =
 8001b2c:	230b      	movs	r3, #11
 8001b2e:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState            = RCC_HSE_ON;
 8001b30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b34:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSIState            = RCC_HSI_DIV1;
 8001b36:	2301      	movs	r3, #1
 8001b38:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b3a:	2340      	movs	r3, #64	@ 0x40
 8001b3c:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.LSIState            = RCC_LSI_ON;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8001b42:	2302      	movs	r3, #2
 8001b44:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSE;
 8001b46:	2302      	movs	r3, #2
 8001b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLM            = 5;
 8001b4a:	2305      	movs	r3, #5
 8001b4c:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLN            = 48;
 8001b4e:	2330      	movs	r3, #48	@ 0x30
 8001b50:	657b      	str	r3, [r7, #84]	@ 0x54
    RCC_OscInitStruct.PLL.PLLP            = 2;
 8001b52:	2302      	movs	r3, #2
 8001b54:	65bb      	str	r3, [r7, #88]	@ 0x58
    RCC_OscInitStruct.PLL.PLLQ            = 5;
 8001b56:	2305      	movs	r3, #5
 8001b58:	65fb      	str	r3, [r7, #92]	@ 0x5c
    RCC_OscInitStruct.PLL.PLLR            = 2;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	663b      	str	r3, [r7, #96]	@ 0x60
    RCC_OscInitStruct.PLL.PLLRGE          = RCC_PLL1VCIRANGE_2;
 8001b5e:	2308      	movs	r3, #8
 8001b60:	667b      	str	r3, [r7, #100]	@ 0x64
    RCC_OscInitStruct.PLL.PLLVCOSEL       = RCC_PLL1VCOWIDE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	66bb      	str	r3, [r7, #104]	@ 0x68
    RCC_OscInitStruct.PLL.PLLFRACN        = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK) {
 8001b6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f001 f9a4 	bl	8002ebc <HAL_RCC_OscConfig>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <SystemClock_Config+0xba>
        Error_Handler ();
 8001b7a:	f000 fa5d 	bl	8002038 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType =
 8001b7e:	233f      	movs	r3, #63	@ 0x3f
 8001b80:	607b      	str	r3, [r7, #4]
    RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
    RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSI;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKDivider  = RCC_SYSCLK_DIV1;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_HCLK_DIV1;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	623b      	str	r3, [r7, #32]

    if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f001 fde4 	bl	8003770 <HAL_RCC_ClockConfig>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <SystemClock_Config+0xee>
        Error_Handler ();
 8001bae:	f000 fa43 	bl	8002038 <Error_Handler>
    }
    HAL_RCC_MCOConfig (RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001bb2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f001 ff8f 	bl	8003adc <HAL_RCC_MCOConfig>
}
 8001bbe:	bf00      	nop
 8001bc0:	3770      	adds	r7, #112	@ 0x70
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	58000400 	.word	0x58000400
 8001bcc:	58024800 	.word	0x58024800

08001bd0 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init (void) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI2_Init 1 */

    /* USER CODE END SPI2_Init 1 */
    /* SPI2 parameter configuration*/
    hspi2.Instance                        = SPI2;
 8001bd4:	4b27      	ldr	r3, [pc, #156]	@ (8001c74 <MX_SPI2_Init+0xa4>)
 8001bd6:	4a28      	ldr	r2, [pc, #160]	@ (8001c78 <MX_SPI2_Init+0xa8>)
 8001bd8:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode                       = SPI_MODE_MASTER;
 8001bda:	4b26      	ldr	r3, [pc, #152]	@ (8001c74 <MX_SPI2_Init+0xa4>)
 8001bdc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001be0:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction                  = SPI_DIRECTION_2LINES;
 8001be2:	4b24      	ldr	r3, [pc, #144]	@ (8001c74 <MX_SPI2_Init+0xa4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize                   = SPI_DATASIZE_8BIT;
 8001be8:	4b22      	ldr	r3, [pc, #136]	@ (8001c74 <MX_SPI2_Init+0xa4>)
 8001bea:	2207      	movs	r2, #7
 8001bec:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity                = SPI_POLARITY_LOW;
 8001bee:	4b21      	ldr	r3, [pc, #132]	@ (8001c74 <MX_SPI2_Init+0xa4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase                   = SPI_PHASE_1EDGE;
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c74 <MX_SPI2_Init+0xa4>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS                        = SPI_NSS_HARD_OUTPUT;
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001c74 <MX_SPI2_Init+0xa4>)
 8001bfc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001c00:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler          = SPI_BAUDRATEPRESCALER_8;
 8001c02:	4b1c      	ldr	r3, [pc, #112]	@ (8001c74 <MX_SPI2_Init+0xa4>)
 8001c04:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001c08:	61da      	str	r2, [r3, #28]
    hspi2.Init.FirstBit                   = SPI_FIRSTBIT_MSB;
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <MX_SPI2_Init+0xa4>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode                     = SPI_TIMODE_DISABLE;
 8001c10:	4b18      	ldr	r3, [pc, #96]	@ (8001c74 <MX_SPI2_Init+0xa4>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi2.Init.CRCCalculation             = SPI_CRCCALCULATION_DISABLE;
 8001c16:	4b17      	ldr	r3, [pc, #92]	@ (8001c74 <MX_SPI2_Init+0xa4>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi2.Init.CRCPolynomial              = 0x0;
 8001c1c:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <MX_SPI2_Init+0xa4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi2.Init.NSSPMode                   = SPI_NSS_PULSE_ENABLE;
 8001c22:	4b14      	ldr	r3, [pc, #80]	@ (8001c74 <MX_SPI2_Init+0xa4>)
 8001c24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c28:	635a      	str	r2, [r3, #52]	@ 0x34
    hspi2.Init.NSSPolarity                = SPI_NSS_POLARITY_LOW;
 8001c2a:	4b12      	ldr	r3, [pc, #72]	@ (8001c74 <MX_SPI2_Init+0xa4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi2.Init.FifoThreshold              = SPI_FIFO_THRESHOLD_01DATA;
 8001c30:	4b10      	ldr	r3, [pc, #64]	@ (8001c74 <MX_SPI2_Init+0xa4>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	63da      	str	r2, [r3, #60]	@ 0x3c
    hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c36:	4b0f      	ldr	r3, [pc, #60]	@ (8001c74 <MX_SPI2_Init+0xa4>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c74 <MX_SPI2_Init+0xa4>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi2.Init.MasterSSIdleness           = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001c42:	4b0c      	ldr	r3, [pc, #48]	@ (8001c74 <MX_SPI2_Init+0xa4>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	649a      	str	r2, [r3, #72]	@ 0x48
    hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001c48:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <MX_SPI2_Init+0xa4>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001c4e:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <MX_SPI2_Init+0xa4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi2.Init.MasterKeepIOState      = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001c54:	4b07      	ldr	r3, [pc, #28]	@ (8001c74 <MX_SPI2_Init+0xa4>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	655a      	str	r2, [r3, #84]	@ 0x54
    hspi2.Init.IOSwap                 = SPI_IO_SWAP_DISABLE;
 8001c5a:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <MX_SPI2_Init+0xa4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (HAL_SPI_Init (&hspi2) != HAL_OK) {
 8001c60:	4804      	ldr	r0, [pc, #16]	@ (8001c74 <MX_SPI2_Init+0xa4>)
 8001c62:	f004 f829 	bl	8005cb8 <HAL_SPI_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_SPI2_Init+0xa0>
        Error_Handler ();
 8001c6c:	f000 f9e4 	bl	8002038 <Error_Handler>
    }
    /* USER CODE BEGIN SPI2_Init 2 */

    /* USER CODE END SPI2_Init 2 */
}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	240000a0 	.word	0x240000a0
 8001c78:	40003800 	.word	0x40003800

08001c7c <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init (void) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b09a      	sub	sp, #104	@ 0x68
 8001c80:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM8_Init 0 */

    /* USER CODE END TIM8_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig           = { 0 };
 8001c82:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig               = { 0 };
 8001c90:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC                        = { 0 };
 8001c9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
 8001cac:	615a      	str	r2, [r3, #20]
 8001cae:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	222c      	movs	r2, #44	@ 0x2c
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f007 ff8a 	bl	8009bd0 <memset>

    /* USER CODE BEGIN TIM8_Init 1 */

    /* USER CODE END TIM8_Init 1 */
    htim8.Instance               = TIM8;
 8001cbc:	4b43      	ldr	r3, [pc, #268]	@ (8001dcc <MX_TIM8_Init+0x150>)
 8001cbe:	4a44      	ldr	r2, [pc, #272]	@ (8001dd0 <MX_TIM8_Init+0x154>)
 8001cc0:	601a      	str	r2, [r3, #0]
    htim8.Init.Prescaler         = 0;
 8001cc2:	4b42      	ldr	r3, [pc, #264]	@ (8001dcc <MX_TIM8_Init+0x150>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	605a      	str	r2, [r3, #4]
    htim8.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8001cc8:	4b40      	ldr	r3, [pc, #256]	@ (8001dcc <MX_TIM8_Init+0x150>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
    htim8.Init.Period            = 65535;
 8001cce:	4b3f      	ldr	r3, [pc, #252]	@ (8001dcc <MX_TIM8_Init+0x150>)
 8001cd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cd4:	60da      	str	r2, [r3, #12]
    htim8.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8001cd6:	4b3d      	ldr	r3, [pc, #244]	@ (8001dcc <MX_TIM8_Init+0x150>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
    htim8.Init.RepetitionCounter = 0;
 8001cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8001dcc <MX_TIM8_Init+0x150>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	615a      	str	r2, [r3, #20]
    htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce2:	4b3a      	ldr	r3, [pc, #232]	@ (8001dcc <MX_TIM8_Init+0x150>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init (&htim8) != HAL_OK) {
 8001ce8:	4838      	ldr	r0, [pc, #224]	@ (8001dcc <MX_TIM8_Init+0x150>)
 8001cea:	f004 ff1a 	bl	8006b22 <HAL_TIM_Base_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM8_Init+0x7c>
        Error_Handler ();
 8001cf4:	f000 f9a0 	bl	8002038 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cfc:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_TIM_ConfigClockSource (&htim8, &sClockSourceConfig) != HAL_OK) {
 8001cfe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001d02:	4619      	mov	r1, r3
 8001d04:	4831      	ldr	r0, [pc, #196]	@ (8001dcc <MX_TIM8_Init+0x150>)
 8001d06:	f005 fa57 	bl	80071b8 <HAL_TIM_ConfigClockSource>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM8_Init+0x98>
        Error_Handler ();
 8001d10:	f000 f992 	bl	8002038 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init (&htim8) != HAL_OK) {
 8001d14:	482d      	ldr	r0, [pc, #180]	@ (8001dcc <MX_TIM8_Init+0x150>)
 8001d16:	f004 ffd3 	bl	8006cc0 <HAL_TIM_PWM_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM8_Init+0xa8>
        Error_Handler ();
 8001d20:	f000 f98a 	bl	8002038 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger  = TIM_TRGO_RESET;
 8001d24:	2300      	movs	r3, #0
 8001d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	653b      	str	r3, [r7, #80]	@ 0x50
    sMasterConfig.MasterSlaveMode      = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_TIMEx_MasterConfigSynchronization (&htim8, &sMasterConfig) != HAL_OK) {
 8001d30:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d34:	4619      	mov	r1, r3
 8001d36:	4825      	ldr	r0, [pc, #148]	@ (8001dcc <MX_TIM8_Init+0x150>)
 8001d38:	f005 ff72 	bl	8007c20 <HAL_TIMEx_MasterConfigSynchronization>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM8_Init+0xca>
        Error_Handler ();
 8001d42:	f000 f979 	bl	8002038 <Error_Handler>
    }
    sConfigOC.OCMode       = TIM_OCMODE_PWM1;
 8001d46:	2360      	movs	r3, #96	@ 0x60
 8001d48:	633b      	str	r3, [r7, #48]	@ 0x30
    sConfigOC.Pulse        = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	637b      	str	r3, [r7, #52]	@ 0x34
    sConfigOC.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	63bb      	str	r3, [r7, #56]	@ 0x38
    sConfigOC.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8001d52:	2300      	movs	r3, #0
 8001d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sConfigOC.OCFastMode   = TIM_OCFAST_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	643b      	str	r3, [r7, #64]	@ 0x40
    sConfigOC.OCIdleState  = TIM_OCIDLESTATE_RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	647b      	str	r3, [r7, #68]	@ 0x44
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_TIM_PWM_ConfigChannel (&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001d62:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d66:	2200      	movs	r2, #0
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4818      	ldr	r0, [pc, #96]	@ (8001dcc <MX_TIM8_Init+0x150>)
 8001d6c:	f005 f910 	bl	8006f90 <HAL_TIM_PWM_ConfigChannel>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM8_Init+0xfe>
        Error_Handler ();
 8001d76:	f000 f95f 	bl	8002038 <Error_Handler>
    }
    sBreakDeadTimeConfig.OffStateRunMode  = TIM_OSSR_DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.LockLevel        = TIM_LOCKLEVEL_OFF;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.DeadTime         = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakState       = TIM_BREAK_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakPolarity    = TIM_BREAKPOLARITY_HIGH;
 8001d8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d92:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.BreakFilter      = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.Break2State      = TIM_BREAK2_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2Polarity   = TIM_BREAK2POLARITY_HIGH;
 8001d9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001da0:	627b      	str	r3, [r7, #36]	@ 0x24
    sBreakDeadTimeConfig.Break2Filter     = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	62bb      	str	r3, [r7, #40]	@ 0x28
    sBreakDeadTimeConfig.AutomaticOutput  = TIM_AUTOMATICOUTPUT_DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_TIMEx_ConfigBreakDeadTime (&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	4619      	mov	r1, r3
 8001dae:	4807      	ldr	r0, [pc, #28]	@ (8001dcc <MX_TIM8_Init+0x150>)
 8001db0:	f005 ffc4 	bl	8007d3c <HAL_TIMEx_ConfigBreakDeadTime>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM8_Init+0x142>
        Error_Handler ();
 8001dba:	f000 f93d 	bl	8002038 <Error_Handler>
    }
    /* USER CODE BEGIN TIM8_Init 2 */

    /* USER CODE END TIM8_Init 2 */
    HAL_TIM_MspPostInit (&htim8);
 8001dbe:	4803      	ldr	r0, [pc, #12]	@ (8001dcc <MX_TIM8_Init+0x150>)
 8001dc0:	f000 fa54 	bl	800226c <HAL_TIM_MspPostInit>
}
 8001dc4:	bf00      	nop
 8001dc6:	3768      	adds	r7, #104	@ 0x68
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	24000128 	.word	0x24000128
 8001dd0:	40010400 	.word	0x40010400

08001dd4 <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init (void) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM13_Init 0 */

    /* USER CODE END TIM13_Init 0 */

    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
 8001de8:	615a      	str	r2, [r3, #20]
 8001dea:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM13_Init 1 */

    /* USER CODE END TIM13_Init 1 */
    htim13.Instance               = TIM13;
 8001dec:	4b1e      	ldr	r3, [pc, #120]	@ (8001e68 <MX_TIM13_Init+0x94>)
 8001dee:	4a1f      	ldr	r2, [pc, #124]	@ (8001e6c <MX_TIM13_Init+0x98>)
 8001df0:	601a      	str	r2, [r3, #0]
    htim13.Init.Prescaler         = 0;
 8001df2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e68 <MX_TIM13_Init+0x94>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	605a      	str	r2, [r3, #4]
    htim13.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8001df8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e68 <MX_TIM13_Init+0x94>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
    htim13.Init.Period            = 65535;
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001e68 <MX_TIM13_Init+0x94>)
 8001e00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e04:	60da      	str	r2, [r3, #12]
    htim13.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8001e06:	4b18      	ldr	r3, [pc, #96]	@ (8001e68 <MX_TIM13_Init+0x94>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
    htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0c:	4b16      	ldr	r3, [pc, #88]	@ (8001e68 <MX_TIM13_Init+0x94>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init (&htim13) != HAL_OK) {
 8001e12:	4815      	ldr	r0, [pc, #84]	@ (8001e68 <MX_TIM13_Init+0x94>)
 8001e14:	f004 fe85 	bl	8006b22 <HAL_TIM_Base_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM13_Init+0x4e>
        Error_Handler ();
 8001e1e:	f000 f90b 	bl	8002038 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init (&htim13) != HAL_OK) {
 8001e22:	4811      	ldr	r0, [pc, #68]	@ (8001e68 <MX_TIM13_Init+0x94>)
 8001e24:	f004 ff4c 	bl	8006cc0 <HAL_TIM_PWM_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM13_Init+0x5e>
        Error_Handler ();
 8001e2e:	f000 f903 	bl	8002038 <Error_Handler>
    }
    sConfigOC.OCMode     = TIM_OCMODE_PWM1;
 8001e32:	2360      	movs	r3, #96	@ 0x60
 8001e34:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse      = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel (&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	2200      	movs	r2, #0
 8001e46:	4619      	mov	r1, r3
 8001e48:	4807      	ldr	r0, [pc, #28]	@ (8001e68 <MX_TIM13_Init+0x94>)
 8001e4a:	f005 f8a1 	bl	8006f90 <HAL_TIM_PWM_ConfigChannel>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM13_Init+0x84>
        Error_Handler ();
 8001e54:	f000 f8f0 	bl	8002038 <Error_Handler>
    }
    /* USER CODE BEGIN TIM13_Init 2 */

    /* USER CODE END TIM13_Init 2 */
    HAL_TIM_MspPostInit (&htim13);
 8001e58:	4803      	ldr	r0, [pc, #12]	@ (8001e68 <MX_TIM13_Init+0x94>)
 8001e5a:	f000 fa07 	bl	800226c <HAL_TIM_MspPostInit>
}
 8001e5e:	bf00      	nop
 8001e60:	3720      	adds	r7, #32
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	24000174 	.word	0x24000174
 8001e6c:	40001c00 	.word	0x40001c00

08001e70 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init (void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance                    = USART1;
 8001e74:	4b22      	ldr	r3, [pc, #136]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001e76:	4a23      	ldr	r2, [pc, #140]	@ (8001f04 <MX_USART1_UART_Init+0x94>)
 8001e78:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate               = 115200;
 8001e7a:	4b21      	ldr	r3, [pc, #132]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001e7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e80:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength             = UART_WORDLENGTH_8B;
 8001e82:	4b1f      	ldr	r3, [pc, #124]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits               = UART_STOPBITS_1;
 8001e88:	4b1d      	ldr	r3, [pc, #116]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity                 = UART_PARITY_NONE;
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode                   = UART_MODE_TX_RX;
 8001e94:	4b1a      	ldr	r3, [pc, #104]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001e96:	220c      	movs	r2, #12
 8001e98:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl              = UART_HWCONTROL_NONE;
 8001e9a:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling           = UART_OVERSAMPLING_16;
 8001ea0:	4b17      	ldr	r3, [pc, #92]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling         = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ea6:	4b16      	ldr	r3, [pc, #88]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	621a      	str	r2, [r3, #32]
    huart1.Init.ClockPrescaler         = UART_PRESCALER_DIV1;
 8001eac:	4b14      	ldr	r3, [pc, #80]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	625a      	str	r2, [r3, #36]	@ 0x24
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eb2:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_UART_Init (&huart1) != HAL_OK) {
 8001eb8:	4811      	ldr	r0, [pc, #68]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001eba:	f005 ffdb 	bl	8007e74 <HAL_UART_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_USART1_UART_Init+0x58>
        Error_Handler ();
 8001ec4:	f000 f8b8 	bl	8002038 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold (&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8001ec8:	2100      	movs	r1, #0
 8001eca:	480d      	ldr	r0, [pc, #52]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001ecc:	f007 f871 	bl	8008fb2 <HAL_UARTEx_SetTxFifoThreshold>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_USART1_UART_Init+0x6a>
        Error_Handler ();
 8001ed6:	f000 f8af 	bl	8002038 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold (&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8001eda:	2100      	movs	r1, #0
 8001edc:	4808      	ldr	r0, [pc, #32]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001ede:	f007 f8a6 	bl	800902e <HAL_UARTEx_SetRxFifoThreshold>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_USART1_UART_Init+0x7c>
        Error_Handler ();
 8001ee8:	f000 f8a6 	bl	8002038 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode (&huart1) != HAL_OK) {
 8001eec:	4804      	ldr	r0, [pc, #16]	@ (8001f00 <MX_USART1_UART_Init+0x90>)
 8001eee:	f007 f827 	bl	8008f40 <HAL_UARTEx_DisableFifoMode>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_USART1_UART_Init+0x8c>
        Error_Handler ();
 8001ef8:	f000 f89e 	bl	8002038 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */
}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	240001c0 	.word	0x240001c0
 8001f04:	40011000 	.word	0x40011000

08001f08 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init (void) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	@ 0x28
 8001f0c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
 8001f1c:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */

    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE ();
 8001f1e:	4b3a      	ldr	r3, [pc, #232]	@ (8002008 <MX_GPIO_Init+0x100>)
 8001f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f24:	4a38      	ldr	r2, [pc, #224]	@ (8002008 <MX_GPIO_Init+0x100>)
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f2e:	4b36      	ldr	r3, [pc, #216]	@ (8002008 <MX_GPIO_Init+0x100>)
 8001f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE ();
 8001f3c:	4b32      	ldr	r3, [pc, #200]	@ (8002008 <MX_GPIO_Init+0x100>)
 8001f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f42:	4a31      	ldr	r2, [pc, #196]	@ (8002008 <MX_GPIO_Init+0x100>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f4c:	4b2e      	ldr	r3, [pc, #184]	@ (8002008 <MX_GPIO_Init+0x100>)
 8001f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE ();
 8001f5a:	4b2b      	ldr	r3, [pc, #172]	@ (8002008 <MX_GPIO_Init+0x100>)
 8001f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f60:	4a29      	ldr	r2, [pc, #164]	@ (8002008 <MX_GPIO_Init+0x100>)
 8001f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f6a:	4b27      	ldr	r3, [pc, #156]	@ (8002008 <MX_GPIO_Init+0x100>)
 8001f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE ();
 8001f78:	4b23      	ldr	r3, [pc, #140]	@ (8002008 <MX_GPIO_Init+0x100>)
 8001f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f7e:	4a22      	ldr	r2, [pc, #136]	@ (8002008 <MX_GPIO_Init+0x100>)
 8001f80:	f043 0320 	orr.w	r3, r3, #32
 8001f84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f88:	4b1f      	ldr	r3, [pc, #124]	@ (8002008 <MX_GPIO_Init+0x100>)
 8001f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f8e:	f003 0320 	and.w	r3, r3, #32
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE ();
 8001f96:	4b1c      	ldr	r3, [pc, #112]	@ (8002008 <MX_GPIO_Init+0x100>)
 8001f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f9c:	4a1a      	ldr	r2, [pc, #104]	@ (8002008 <MX_GPIO_Init+0x100>)
 8001f9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fa2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fa6:	4b18      	ldr	r3, [pc, #96]	@ (8002008 <MX_GPIO_Init+0x100>)
 8001fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fb0:	603b      	str	r3, [r7, #0]
 8001fb2:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin : CEC_CK_MCO1_Pin */
    GPIO_InitStruct.Pin       = CEC_CK_MCO1_Pin;
 8001fb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init (CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	4619      	mov	r1, r3
 8001fd0:	480e      	ldr	r0, [pc, #56]	@ (800200c <MX_GPIO_Init+0x104>)
 8001fd2:	f000 fd21 	bl	8002a18 <HAL_GPIO_Init>

    /*Configure GPIO pin : IMU_INT_Pin */
    GPIO_InitStruct.Pin  = IMU_INT_Pin;
 8001fd6:	2380      	movs	r3, #128	@ 0x80
 8001fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fda:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init (IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4809      	ldr	r0, [pc, #36]	@ (8002010 <MX_GPIO_Init+0x108>)
 8001fec:	f000 fd14 	bl	8002a18 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority (IMU_INT_EXTI_IRQn, 5, 0);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2105      	movs	r1, #5
 8001ff4:	2017      	movs	r0, #23
 8001ff6:	f000 fcd5 	bl	80029a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ (IMU_INT_EXTI_IRQn);
 8001ffa:	2017      	movs	r0, #23
 8001ffc:	f000 fcec 	bl	80029d8 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */

    /* USER CODE END MX_GPIO_Init_2 */
}
 8002000:	bf00      	nop
 8002002:	3728      	adds	r7, #40	@ 0x28
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	58024400 	.word	0x58024400
 800200c:	58020000 	.word	0x58020000
 8002010:	58020800 	.word	0x58020800

08002014 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to
 * increment a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef* htim) {
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM4) {
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a04      	ldr	r2, [pc, #16]	@ (8002034 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d101      	bne.n	800202a <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick ();
 8002026:	f000 fbb5 	bl	8002794 <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40000800 	.word	0x40000800

08002038 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler (void) {
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800203c:	b672      	cpsid	i
}
 800203e:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq ();
    while (1) {
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <Error_Handler+0x8>

08002044 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	4b10      	ldr	r3, [pc, #64]	@ (800208c <HAL_MspInit+0x48>)
 800204c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002050:	4a0e      	ldr	r2, [pc, #56]	@ (800208c <HAL_MspInit+0x48>)
 8002052:	f043 0302 	orr.w	r3, r3, #2
 8002056:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800205a:	4b0c      	ldr	r3, [pc, #48]	@ (800208c <HAL_MspInit+0x48>)
 800205c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002068:	2200      	movs	r2, #0
 800206a:	210f      	movs	r1, #15
 800206c:	f06f 0001 	mvn.w	r0, #1
 8002070:	f000 fc98 	bl	80029a4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 5, 0);
 8002074:	2200      	movs	r2, #0
 8002076:	2105      	movs	r1, #5
 8002078:	2041      	movs	r0, #65	@ 0x41
 800207a:	f000 fc93 	bl	80029a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 800207e:	2041      	movs	r0, #65	@ 0x41
 8002080:	f000 fcaa 	bl	80029d8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	58024400 	.word	0x58024400

08002090 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b0be      	sub	sp, #248	@ 0xf8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020a8:	f107 0318 	add.w	r3, r7, #24
 80020ac:	22c8      	movs	r2, #200	@ 0xc8
 80020ae:	2100      	movs	r1, #0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f007 fd8d 	bl	8009bd0 <memset>
  if(hspi->Instance==SPI2)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a38      	ldr	r2, [pc, #224]	@ (800219c <HAL_SPI_MspInit+0x10c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d169      	bne.n	8002194 <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80020c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020d0:	f107 0318 	add.w	r3, r7, #24
 80020d4:	4618      	mov	r0, r3
 80020d6:	f001 ff83 	bl	8003fe0 <HAL_RCCEx_PeriphCLKConfig>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80020e0:	f7ff ffaa 	bl	8002038 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020e4:	4b2e      	ldr	r3, [pc, #184]	@ (80021a0 <HAL_SPI_MspInit+0x110>)
 80020e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020ea:	4a2d      	ldr	r2, [pc, #180]	@ (80021a0 <HAL_SPI_MspInit+0x110>)
 80020ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80020f4:	4b2a      	ldr	r3, [pc, #168]	@ (80021a0 <HAL_SPI_MspInit+0x110>)
 80020f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002102:	4b27      	ldr	r3, [pc, #156]	@ (80021a0 <HAL_SPI_MspInit+0x110>)
 8002104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002108:	4a25      	ldr	r2, [pc, #148]	@ (80021a0 <HAL_SPI_MspInit+0x110>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002112:	4b23      	ldr	r3, [pc, #140]	@ (80021a0 <HAL_SPI_MspInit+0x110>)
 8002114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002120:	4b1f      	ldr	r3, [pc, #124]	@ (80021a0 <HAL_SPI_MspInit+0x110>)
 8002122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002126:	4a1e      	ldr	r2, [pc, #120]	@ (80021a0 <HAL_SPI_MspInit+0x110>)
 8002128:	f043 0304 	orr.w	r3, r3, #4
 800212c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002130:	4b1b      	ldr	r3, [pc, #108]	@ (80021a0 <HAL_SPI_MspInit+0x110>)
 8002132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_NSS_Pin;
 800213e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002142:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002158:	2305      	movs	r3, #5
 800215a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002162:	4619      	mov	r1, r3
 8002164:	480f      	ldr	r0, [pc, #60]	@ (80021a4 <HAL_SPI_MspInit+0x114>)
 8002166:	f000 fc57 	bl	8002a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_3_Pin|PMOD_2_Pin;
 800216a:	230c      	movs	r3, #12
 800216c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002170:	2302      	movs	r3, #2
 8002172:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	2300      	movs	r3, #0
 800217e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002182:	2305      	movs	r3, #5
 8002184:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002188:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800218c:	4619      	mov	r1, r3
 800218e:	4806      	ldr	r0, [pc, #24]	@ (80021a8 <HAL_SPI_MspInit+0x118>)
 8002190:	f000 fc42 	bl	8002a18 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002194:	bf00      	nop
 8002196:	37f8      	adds	r7, #248	@ 0xf8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40003800 	.word	0x40003800
 80021a0:	58024400 	.word	0x58024400
 80021a4:	58020000 	.word	0x58020000
 80021a8:	58020800 	.word	0x58020800

080021ac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	@ 0x28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM8)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a24      	ldr	r2, [pc, #144]	@ (800225c <HAL_TIM_Base_MspInit+0xb0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d12e      	bne.n	800222c <HAL_TIM_Base_MspInit+0x80>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80021ce:	4b24      	ldr	r3, [pc, #144]	@ (8002260 <HAL_TIM_Base_MspInit+0xb4>)
 80021d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021d4:	4a22      	ldr	r2, [pc, #136]	@ (8002260 <HAL_TIM_Base_MspInit+0xb4>)
 80021d6:	f043 0302 	orr.w	r3, r3, #2
 80021da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021de:	4b20      	ldr	r3, [pc, #128]	@ (8002260 <HAL_TIM_Base_MspInit+0xb4>)
 80021e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80021ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002260 <HAL_TIM_Base_MspInit+0xb4>)
 80021ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002260 <HAL_TIM_Base_MspInit+0xb4>)
 80021f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021fc:	4b18      	ldr	r3, [pc, #96]	@ (8002260 <HAL_TIM_Base_MspInit+0xb4>)
 80021fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002202:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 800220a:	2340      	movs	r3, #64	@ 0x40
 800220c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800221a:	2303      	movs	r3, #3
 800221c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 800221e:	f107 0314 	add.w	r3, r7, #20
 8002222:	4619      	mov	r1, r3
 8002224:	480f      	ldr	r0, [pc, #60]	@ (8002264 <HAL_TIM_Base_MspInit+0xb8>)
 8002226:	f000 fbf7 	bl	8002a18 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM13_MspInit 1 */

    /* USER CODE END TIM13_MspInit 1 */
  }

}
 800222a:	e013      	b.n	8002254 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM13)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0d      	ldr	r2, [pc, #52]	@ (8002268 <HAL_TIM_Base_MspInit+0xbc>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d10e      	bne.n	8002254 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002236:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <HAL_TIM_Base_MspInit+0xb4>)
 8002238:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800223c:	4a08      	ldr	r2, [pc, #32]	@ (8002260 <HAL_TIM_Base_MspInit+0xb4>)
 800223e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002242:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002246:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <HAL_TIM_Base_MspInit+0xb4>)
 8002248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800224c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	68bb      	ldr	r3, [r7, #8]
}
 8002254:	bf00      	nop
 8002256:	3728      	adds	r7, #40	@ 0x28
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40010400 	.word	0x40010400
 8002260:	58024400 	.word	0x58024400
 8002264:	58022400 	.word	0x58022400
 8002268:	40001c00 	.word	0x40001c00

0800226c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	@ 0x28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a35      	ldr	r2, [pc, #212]	@ (8002360 <HAL_TIM_MspPostInit+0xf4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d13e      	bne.n	800230c <HAL_TIM_MspPostInit+0xa0>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800228e:	4b35      	ldr	r3, [pc, #212]	@ (8002364 <HAL_TIM_MspPostInit+0xf8>)
 8002290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002294:	4a33      	ldr	r2, [pc, #204]	@ (8002364 <HAL_TIM_MspPostInit+0xf8>)
 8002296:	f043 0304 	orr.w	r3, r3, #4
 800229a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800229e:	4b31      	ldr	r3, [pc, #196]	@ (8002364 <HAL_TIM_MspPostInit+0xf8>)
 80022a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80022ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002364 <HAL_TIM_MspPostInit+0xf8>)
 80022ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022b2:	4a2c      	ldr	r2, [pc, #176]	@ (8002364 <HAL_TIM_MspPostInit+0xf8>)
 80022b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022bc:	4b29      	ldr	r3, [pc, #164]	@ (8002364 <HAL_TIM_MspPostInit+0xf8>)
 80022be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PJ7     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022ca:	2340      	movs	r3, #64	@ 0x40
 80022cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d6:	2300      	movs	r3, #0
 80022d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80022da:	2303      	movs	r3, #3
 80022dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	4619      	mov	r1, r3
 80022e4:	4820      	ldr	r0, [pc, #128]	@ (8002368 <HAL_TIM_MspPostInit+0xfc>)
 80022e6:	f000 fb97 	bl	8002a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 80022ea:	2380      	movs	r3, #128	@ 0x80
 80022ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f6:	2300      	movs	r3, #0
 80022f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80022fa:	2303      	movs	r3, #3
 80022fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80022fe:	f107 0314 	add.w	r3, r7, #20
 8002302:	4619      	mov	r1, r3
 8002304:	4819      	ldr	r0, [pc, #100]	@ (800236c <HAL_TIM_MspPostInit+0x100>)
 8002306:	f000 fb87 	bl	8002a18 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM13_MspPostInit 1 */

    /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800230a:	e024      	b.n	8002356 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM13)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a17      	ldr	r2, [pc, #92]	@ (8002370 <HAL_TIM_MspPostInit+0x104>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d11f      	bne.n	8002356 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002316:	4b13      	ldr	r3, [pc, #76]	@ (8002364 <HAL_TIM_MspPostInit+0xf8>)
 8002318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800231c:	4a11      	ldr	r2, [pc, #68]	@ (8002364 <HAL_TIM_MspPostInit+0xf8>)
 800231e:	f043 0320 	orr.w	r3, r3, #32
 8002322:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002326:	4b0f      	ldr	r3, [pc, #60]	@ (8002364 <HAL_TIM_MspPostInit+0xf8>)
 8002328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 8002334:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233a:	2302      	movs	r3, #2
 800233c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002342:	2300      	movs	r3, #0
 8002344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002346:	2309      	movs	r3, #9
 8002348:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800234a:	f107 0314 	add.w	r3, r7, #20
 800234e:	4619      	mov	r1, r3
 8002350:	4808      	ldr	r0, [pc, #32]	@ (8002374 <HAL_TIM_MspPostInit+0x108>)
 8002352:	f000 fb61 	bl	8002a18 <HAL_GPIO_Init>
}
 8002356:	bf00      	nop
 8002358:	3728      	adds	r7, #40	@ 0x28
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40010400 	.word	0x40010400
 8002364:	58024400 	.word	0x58024400
 8002368:	58020800 	.word	0x58020800
 800236c:	58022400 	.word	0x58022400
 8002370:	40001c00 	.word	0x40001c00
 8002374:	58021400 	.word	0x58021400

08002378 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b0bc      	sub	sp, #240	@ 0xf0
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002390:	f107 0310 	add.w	r3, r7, #16
 8002394:	22c8      	movs	r2, #200	@ 0xc8
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f007 fc19 	bl	8009bd0 <memset>
  if(huart->Instance==USART1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a27      	ldr	r2, [pc, #156]	@ (8002440 <HAL_UART_MspInit+0xc8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d146      	bne.n	8002436 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023a8:	f04f 0201 	mov.w	r2, #1
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ba:	f107 0310 	add.w	r3, r7, #16
 80023be:	4618      	mov	r0, r3
 80023c0:	f001 fe0e 	bl	8003fe0 <HAL_RCCEx_PeriphCLKConfig>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80023ca:	f7ff fe35 	bl	8002038 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002444 <HAL_UART_MspInit+0xcc>)
 80023d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002444 <HAL_UART_MspInit+0xcc>)
 80023d6:	f043 0310 	orr.w	r3, r3, #16
 80023da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023de:	4b19      	ldr	r3, [pc, #100]	@ (8002444 <HAL_UART_MspInit+0xcc>)
 80023e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023e4:	f003 0310 	and.w	r3, r3, #16
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ec:	4b15      	ldr	r3, [pc, #84]	@ (8002444 <HAL_UART_MspInit+0xcc>)
 80023ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023f2:	4a14      	ldr	r2, [pc, #80]	@ (8002444 <HAL_UART_MspInit+0xcc>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023fc:	4b11      	ldr	r3, [pc, #68]	@ (8002444 <HAL_UART_MspInit+0xcc>)
 80023fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800240a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800240e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002412:	2302      	movs	r3, #2
 8002414:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241e:	2300      	movs	r3, #0
 8002420:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002424:	2307      	movs	r3, #7
 8002426:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800242e:	4619      	mov	r1, r3
 8002430:	4805      	ldr	r0, [pc, #20]	@ (8002448 <HAL_UART_MspInit+0xd0>)
 8002432:	f000 faf1 	bl	8002a18 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002436:	bf00      	nop
 8002438:	37f0      	adds	r7, #240	@ 0xf0
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40011000 	.word	0x40011000
 8002444:	58024400 	.word	0x58024400
 8002448:	58020000 	.word	0x58020000

0800244c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b090      	sub	sp, #64	@ 0x40
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b0f      	cmp	r3, #15
 8002458:	d827      	bhi.n	80024aa <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800245a:	2200      	movs	r2, #0
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	201e      	movs	r0, #30
 8002460:	f000 faa0 	bl	80029a4 <HAL_NVIC_SetPriority>

     /* Enable the TIM4 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002464:	201e      	movs	r0, #30
 8002466:	f000 fab7 	bl	80029d8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800246a:	4a29      	ldr	r2, [pc, #164]	@ (8002510 <HAL_InitTick+0xc4>)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002470:	4b28      	ldr	r3, [pc, #160]	@ (8002514 <HAL_InitTick+0xc8>)
 8002472:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002476:	4a27      	ldr	r2, [pc, #156]	@ (8002514 <HAL_InitTick+0xc8>)
 8002478:	f043 0304 	orr.w	r3, r3, #4
 800247c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002480:	4b24      	ldr	r3, [pc, #144]	@ (8002514 <HAL_InitTick+0xc8>)
 8002482:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800248e:	f107 0210 	add.w	r2, r7, #16
 8002492:	f107 0314 	add.w	r3, r7, #20
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f001 fd5f 	bl	8003f5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800249e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80024a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d106      	bne.n	80024b6 <HAL_InitTick+0x6a>
 80024a8:	e001      	b.n	80024ae <HAL_InitTick+0x62>
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e02b      	b.n	8002506 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80024ae:	f001 fd29 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 80024b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80024b4:	e004      	b.n	80024c0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80024b6:	f001 fd25 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 80024ba:	4603      	mov	r3, r0
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024c2:	4a15      	ldr	r2, [pc, #84]	@ (8002518 <HAL_InitTick+0xcc>)
 80024c4:	fba2 2303 	umull	r2, r3, r2, r3
 80024c8:	0c9b      	lsrs	r3, r3, #18
 80024ca:	3b01      	subs	r3, #1
 80024cc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80024ce:	4b13      	ldr	r3, [pc, #76]	@ (800251c <HAL_InitTick+0xd0>)
 80024d0:	4a13      	ldr	r2, [pc, #76]	@ (8002520 <HAL_InitTick+0xd4>)
 80024d2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80024d4:	4b11      	ldr	r3, [pc, #68]	@ (800251c <HAL_InitTick+0xd0>)
 80024d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80024da:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80024dc:	4a0f      	ldr	r2, [pc, #60]	@ (800251c <HAL_InitTick+0xd0>)
 80024de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024e0:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80024e2:	4b0e      	ldr	r3, [pc, #56]	@ (800251c <HAL_InitTick+0xd0>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e8:	4b0c      	ldr	r3, [pc, #48]	@ (800251c <HAL_InitTick+0xd0>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80024ee:	480b      	ldr	r0, [pc, #44]	@ (800251c <HAL_InitTick+0xd0>)
 80024f0:	f004 fb17 	bl	8006b22 <HAL_TIM_Base_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d104      	bne.n	8002504 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80024fa:	4808      	ldr	r0, [pc, #32]	@ (800251c <HAL_InitTick+0xd0>)
 80024fc:	f004 fb68 	bl	8006bd0 <HAL_TIM_Base_Start_IT>
 8002500:	4603      	mov	r3, r0
 8002502:	e000      	b.n	8002506 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
}
 8002506:	4618      	mov	r0, r3
 8002508:	3740      	adds	r7, #64	@ 0x40
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	24000008 	.word	0x24000008
 8002514:	58024400 	.word	0x58024400
 8002518:	431bde83 	.word	0x431bde83
 800251c:	240002e8 	.word	0x240002e8
 8002520:	40000800 	.word	0x40000800

08002524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <NMI_Handler+0x4>

0800252c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <HardFault_Handler+0x4>

08002534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <MemManage_Handler+0x4>

0800253c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002540:	bf00      	nop
 8002542:	e7fd      	b.n	8002540 <BusFault_Handler+0x4>

08002544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002548:	bf00      	nop
 800254a:	e7fd      	b.n	8002548 <UsageFault_Handler+0x4>

0800254c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 800255e:	2080      	movs	r0, #128	@ 0x80
 8002560:	f000 fc0a 	bl	8002d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}

08002568 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800256c:	4802      	ldr	r0, [pc, #8]	@ (8002578 <TIM4_IRQHandler+0x10>)
 800256e:	f004 fc08 	bl	8006d82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	240002e8 	.word	0x240002e8

0800257c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	e00a      	b.n	80025a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800258e:	f3af 8000 	nop.w
 8002592:	4601      	mov	r1, r0
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	60ba      	str	r2, [r7, #8]
 800259a:	b2ca      	uxtb	r2, r1
 800259c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	3301      	adds	r3, #1
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	dbf0      	blt.n	800258e <_read+0x12>
  }

  return len;
 80025ac:	687b      	ldr	r3, [r7, #4]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b086      	sub	sp, #24
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	e009      	b.n	80025dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	60ba      	str	r2, [r7, #8]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fe f8d7 	bl	8000784 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	3301      	adds	r3, #1
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	dbf1      	blt.n	80025c8 <_write+0x12>
  }
  return len;
 80025e4:	687b      	ldr	r3, [r7, #4]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <_close>:

int _close(int file)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002616:	605a      	str	r2, [r3, #4]
  return 0;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <_isatty>:

int _isatty(int file)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800262e:	2301      	movs	r3, #1
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002660:	4a14      	ldr	r2, [pc, #80]	@ (80026b4 <_sbrk+0x5c>)
 8002662:	4b15      	ldr	r3, [pc, #84]	@ (80026b8 <_sbrk+0x60>)
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800266c:	4b13      	ldr	r3, [pc, #76]	@ (80026bc <_sbrk+0x64>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d102      	bne.n	800267a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002674:	4b11      	ldr	r3, [pc, #68]	@ (80026bc <_sbrk+0x64>)
 8002676:	4a12      	ldr	r2, [pc, #72]	@ (80026c0 <_sbrk+0x68>)
 8002678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800267a:	4b10      	ldr	r3, [pc, #64]	@ (80026bc <_sbrk+0x64>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4413      	add	r3, r2
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	429a      	cmp	r2, r3
 8002686:	d207      	bcs.n	8002698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002688:	f007 faf0 	bl	8009c6c <__errno>
 800268c:	4603      	mov	r3, r0
 800268e:	220c      	movs	r2, #12
 8002690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002692:	f04f 33ff 	mov.w	r3, #4294967295
 8002696:	e009      	b.n	80026ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002698:	4b08      	ldr	r3, [pc, #32]	@ (80026bc <_sbrk+0x64>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800269e:	4b07      	ldr	r3, [pc, #28]	@ (80026bc <_sbrk+0x64>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4413      	add	r3, r2
 80026a6:	4a05      	ldr	r2, [pc, #20]	@ (80026bc <_sbrk+0x64>)
 80026a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026aa:	68fb      	ldr	r3, [r7, #12]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	24080000 	.word	0x24080000
 80026b8:	00000400 	.word	0x00000400
 80026bc:	24000334 	.word	0x24000334
 80026c0:	24000918 	.word	0x24000918

080026c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80026c4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002700 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80026c8:	f7fe f9dc 	bl	8000a84 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80026cc:	f7fe f92c 	bl	8000928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026d0:	480c      	ldr	r0, [pc, #48]	@ (8002704 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026d2:	490d      	ldr	r1, [pc, #52]	@ (8002708 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026d4:	4a0d      	ldr	r2, [pc, #52]	@ (800270c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d8:	e002      	b.n	80026e0 <LoopCopyDataInit>

080026da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026de:	3304      	adds	r3, #4

080026e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026e4:	d3f9      	bcc.n	80026da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002710 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002714 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026ec:	e001      	b.n	80026f2 <LoopFillZerobss>

080026ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f0:	3204      	adds	r2, #4

080026f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026f4:	d3fb      	bcc.n	80026ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026f6:	f007 fabf 	bl	8009c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026fa:	f7ff f93d 	bl	8001978 <main>
  bx  lr
 80026fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002700:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002704:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002708:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 800270c:	0800aa0c 	.word	0x0800aa0c
  ldr r2, =_sbss
 8002710:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8002714:	24000914 	.word	0x24000914

08002718 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002718:	e7fe      	b.n	8002718 <ADC3_IRQHandler>
	...

0800271c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002722:	2003      	movs	r0, #3
 8002724:	f000 f933 	bl	800298e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002728:	f001 fa42 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 800272c:	4602      	mov	r2, r0
 800272e:	4b15      	ldr	r3, [pc, #84]	@ (8002784 <HAL_Init+0x68>)
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	0a1b      	lsrs	r3, r3, #8
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	4913      	ldr	r1, [pc, #76]	@ (8002788 <HAL_Init+0x6c>)
 800273a:	5ccb      	ldrb	r3, [r1, r3]
 800273c:	f003 031f 	and.w	r3, r3, #31
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
 8002744:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002746:	4b0f      	ldr	r3, [pc, #60]	@ (8002784 <HAL_Init+0x68>)
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	4a0e      	ldr	r2, [pc, #56]	@ (8002788 <HAL_Init+0x6c>)
 8002750:	5cd3      	ldrb	r3, [r2, r3]
 8002752:	f003 031f 	and.w	r3, r3, #31
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
 800275c:	4a0b      	ldr	r2, [pc, #44]	@ (800278c <HAL_Init+0x70>)
 800275e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002760:	4a0b      	ldr	r2, [pc, #44]	@ (8002790 <HAL_Init+0x74>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002766:	200f      	movs	r0, #15
 8002768:	f7ff fe70 	bl	800244c <HAL_InitTick>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e002      	b.n	800277c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002776:	f7ff fc65 	bl	8002044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	58024400 	.word	0x58024400
 8002788:	0800a990 	.word	0x0800a990
 800278c:	24000004 	.word	0x24000004
 8002790:	24000000 	.word	0x24000000

08002794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002798:	4b06      	ldr	r3, [pc, #24]	@ (80027b4 <HAL_IncTick+0x20>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <HAL_IncTick+0x24>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	4a04      	ldr	r2, [pc, #16]	@ (80027b8 <HAL_IncTick+0x24>)
 80027a6:	6013      	str	r3, [r2, #0]
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	2400000c 	.word	0x2400000c
 80027b8:	24000338 	.word	0x24000338

080027bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return uwTick;
 80027c0:	4b03      	ldr	r3, [pc, #12]	@ (80027d0 <HAL_GetTick+0x14>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	24000338 	.word	0x24000338

080027d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027dc:	f7ff ffee 	bl	80027bc <HAL_GetTick>
 80027e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ec:	d005      	beq.n	80027fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002818 <HAL_Delay+0x44>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4413      	add	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027fa:	bf00      	nop
 80027fc:	f7ff ffde 	bl	80027bc <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	429a      	cmp	r2, r3
 800280a:	d8f7      	bhi.n	80027fc <HAL_Delay+0x28>
  {
  }
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	2400000c 	.word	0x2400000c

0800281c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002820:	4b03      	ldr	r3, [pc, #12]	@ (8002830 <HAL_GetREVID+0x14>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	0c1b      	lsrs	r3, r3, #16
}
 8002826:	4618      	mov	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	5c001000 	.word	0x5c001000

08002834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002844:	4b0b      	ldr	r3, [pc, #44]	@ (8002874 <__NVIC_SetPriorityGrouping+0x40>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002850:	4013      	ands	r3, r2
 8002852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800285c:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <__NVIC_SetPriorityGrouping+0x44>)
 800285e:	4313      	orrs	r3, r2
 8002860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002862:	4a04      	ldr	r2, [pc, #16]	@ (8002874 <__NVIC_SetPriorityGrouping+0x40>)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	60d3      	str	r3, [r2, #12]
}
 8002868:	bf00      	nop
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000ed00 	.word	0xe000ed00
 8002878:	05fa0000 	.word	0x05fa0000

0800287c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002880:	4b04      	ldr	r3, [pc, #16]	@ (8002894 <__NVIC_GetPriorityGrouping+0x18>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	0a1b      	lsrs	r3, r3, #8
 8002886:	f003 0307 	and.w	r3, r3, #7
}
 800288a:	4618      	mov	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	db0b      	blt.n	80028c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028aa:	88fb      	ldrh	r3, [r7, #6]
 80028ac:	f003 021f 	and.w	r2, r3, #31
 80028b0:	4907      	ldr	r1, [pc, #28]	@ (80028d0 <__NVIC_EnableIRQ+0x38>)
 80028b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	2001      	movs	r0, #1
 80028ba:	fa00 f202 	lsl.w	r2, r0, r2
 80028be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000e100 	.word	0xe000e100

080028d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	6039      	str	r1, [r7, #0]
 80028de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	db0a      	blt.n	80028fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	490c      	ldr	r1, [pc, #48]	@ (8002920 <__NVIC_SetPriority+0x4c>)
 80028ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028f2:	0112      	lsls	r2, r2, #4
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	440b      	add	r3, r1
 80028f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028fc:	e00a      	b.n	8002914 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4908      	ldr	r1, [pc, #32]	@ (8002924 <__NVIC_SetPriority+0x50>)
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	3b04      	subs	r3, #4
 800290c:	0112      	lsls	r2, r2, #4
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	440b      	add	r3, r1
 8002912:	761a      	strb	r2, [r3, #24]
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000e100 	.word	0xe000e100
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002928:	b480      	push	{r7}
 800292a:	b089      	sub	sp, #36	@ 0x24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f1c3 0307 	rsb	r3, r3, #7
 8002942:	2b04      	cmp	r3, #4
 8002944:	bf28      	it	cs
 8002946:	2304      	movcs	r3, #4
 8002948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3304      	adds	r3, #4
 800294e:	2b06      	cmp	r3, #6
 8002950:	d902      	bls.n	8002958 <NVIC_EncodePriority+0x30>
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3b03      	subs	r3, #3
 8002956:	e000      	b.n	800295a <NVIC_EncodePriority+0x32>
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	f04f 32ff 	mov.w	r2, #4294967295
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43da      	mvns	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	401a      	ands	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002970:	f04f 31ff 	mov.w	r1, #4294967295
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	43d9      	mvns	r1, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002980:	4313      	orrs	r3, r2
         );
}
 8002982:	4618      	mov	r0, r3
 8002984:	3724      	adds	r7, #36	@ 0x24
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff ff4c 	bl	8002834 <__NVIC_SetPriorityGrouping>
}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029b2:	f7ff ff63 	bl	800287c <__NVIC_GetPriorityGrouping>
 80029b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	6978      	ldr	r0, [r7, #20]
 80029be:	f7ff ffb3 	bl	8002928 <NVIC_EncodePriority>
 80029c2:	4602      	mov	r2, r0
 80029c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff ff82 	bl	80028d4 <__NVIC_SetPriority>
}
 80029d0:	bf00      	nop
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff ff56 	bl	8002898 <__NVIC_EnableIRQ>
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80029f8:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <HAL_GetCurrentCPUID+0x20>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a00:	2b70      	cmp	r3, #112	@ 0x70
 8002a02:	d101      	bne.n	8002a08 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e000      	b.n	8002a0a <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8002a08:	2301      	movs	r3, #1
  }
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b089      	sub	sp, #36	@ 0x24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002a26:	4b89      	ldr	r3, [pc, #548]	@ (8002c4c <HAL_GPIO_Init+0x234>)
 8002a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a2a:	e194      	b.n	8002d56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	2101      	movs	r1, #1
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	fa01 f303 	lsl.w	r3, r1, r3
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 8186 	beq.w	8002d50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d005      	beq.n	8002a5c <HAL_GPIO_Init+0x44>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d130      	bne.n	8002abe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	2203      	movs	r2, #3
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a92:	2201      	movs	r2, #1
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	091b      	lsrs	r3, r3, #4
 8002aa8:	f003 0201 	and.w	r2, r3, #1
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d017      	beq.n	8002afa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d123      	bne.n	8002b4e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	08da      	lsrs	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3208      	adds	r2, #8
 8002b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	220f      	movs	r2, #15
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	08da      	lsrs	r2, r3, #3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3208      	adds	r2, #8
 8002b48:	69b9      	ldr	r1, [r7, #24]
 8002b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	2203      	movs	r2, #3
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 0203 	and.w	r2, r3, #3
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 80e0 	beq.w	8002d50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b90:	4b2f      	ldr	r3, [pc, #188]	@ (8002c50 <HAL_GPIO_Init+0x238>)
 8002b92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002b96:	4a2e      	ldr	r2, [pc, #184]	@ (8002c50 <HAL_GPIO_Init+0x238>)
 8002b98:	f043 0302 	orr.w	r3, r3, #2
 8002b9c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8002c50 <HAL_GPIO_Init+0x238>)
 8002ba2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bae:	4a29      	ldr	r2, [pc, #164]	@ (8002c54 <HAL_GPIO_Init+0x23c>)
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	089b      	lsrs	r3, r3, #2
 8002bb4:	3302      	adds	r3, #2
 8002bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	220f      	movs	r2, #15
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a20      	ldr	r2, [pc, #128]	@ (8002c58 <HAL_GPIO_Init+0x240>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d052      	beq.n	8002c80 <HAL_GPIO_Init+0x268>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8002c5c <HAL_GPIO_Init+0x244>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d031      	beq.n	8002c46 <HAL_GPIO_Init+0x22e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a1e      	ldr	r2, [pc, #120]	@ (8002c60 <HAL_GPIO_Init+0x248>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d02b      	beq.n	8002c42 <HAL_GPIO_Init+0x22a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a1d      	ldr	r2, [pc, #116]	@ (8002c64 <HAL_GPIO_Init+0x24c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d025      	beq.n	8002c3e <HAL_GPIO_Init+0x226>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8002c68 <HAL_GPIO_Init+0x250>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d01f      	beq.n	8002c3a <HAL_GPIO_Init+0x222>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8002c6c <HAL_GPIO_Init+0x254>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d019      	beq.n	8002c36 <HAL_GPIO_Init+0x21e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a1a      	ldr	r2, [pc, #104]	@ (8002c70 <HAL_GPIO_Init+0x258>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d013      	beq.n	8002c32 <HAL_GPIO_Init+0x21a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a19      	ldr	r2, [pc, #100]	@ (8002c74 <HAL_GPIO_Init+0x25c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00d      	beq.n	8002c2e <HAL_GPIO_Init+0x216>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a18      	ldr	r2, [pc, #96]	@ (8002c78 <HAL_GPIO_Init+0x260>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d007      	beq.n	8002c2a <HAL_GPIO_Init+0x212>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a17      	ldr	r2, [pc, #92]	@ (8002c7c <HAL_GPIO_Init+0x264>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d101      	bne.n	8002c26 <HAL_GPIO_Init+0x20e>
 8002c22:	2309      	movs	r3, #9
 8002c24:	e02d      	b.n	8002c82 <HAL_GPIO_Init+0x26a>
 8002c26:	230a      	movs	r3, #10
 8002c28:	e02b      	b.n	8002c82 <HAL_GPIO_Init+0x26a>
 8002c2a:	2308      	movs	r3, #8
 8002c2c:	e029      	b.n	8002c82 <HAL_GPIO_Init+0x26a>
 8002c2e:	2307      	movs	r3, #7
 8002c30:	e027      	b.n	8002c82 <HAL_GPIO_Init+0x26a>
 8002c32:	2306      	movs	r3, #6
 8002c34:	e025      	b.n	8002c82 <HAL_GPIO_Init+0x26a>
 8002c36:	2305      	movs	r3, #5
 8002c38:	e023      	b.n	8002c82 <HAL_GPIO_Init+0x26a>
 8002c3a:	2304      	movs	r3, #4
 8002c3c:	e021      	b.n	8002c82 <HAL_GPIO_Init+0x26a>
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e01f      	b.n	8002c82 <HAL_GPIO_Init+0x26a>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e01d      	b.n	8002c82 <HAL_GPIO_Init+0x26a>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e01b      	b.n	8002c82 <HAL_GPIO_Init+0x26a>
 8002c4a:	bf00      	nop
 8002c4c:	58000080 	.word	0x58000080
 8002c50:	58024400 	.word	0x58024400
 8002c54:	58000400 	.word	0x58000400
 8002c58:	58020000 	.word	0x58020000
 8002c5c:	58020400 	.word	0x58020400
 8002c60:	58020800 	.word	0x58020800
 8002c64:	58020c00 	.word	0x58020c00
 8002c68:	58021000 	.word	0x58021000
 8002c6c:	58021400 	.word	0x58021400
 8002c70:	58021800 	.word	0x58021800
 8002c74:	58021c00 	.word	0x58021c00
 8002c78:	58022000 	.word	0x58022000
 8002c7c:	58022400 	.word	0x58022400
 8002c80:	2300      	movs	r3, #0
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	f002 0203 	and.w	r2, r2, #3
 8002c88:	0092      	lsls	r2, r2, #2
 8002c8a:	4093      	lsls	r3, r2
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c92:	4938      	ldr	r1, [pc, #224]	@ (8002d74 <HAL_GPIO_Init+0x35c>)
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	3302      	adds	r3, #2
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002cc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002cce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002cf4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	3301      	adds	r3, #1
 8002d54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f47f ae63 	bne.w	8002a2c <HAL_GPIO_Init+0x14>
  }
}
 8002d66:	bf00      	nop
 8002d68:	bf00      	nop
 8002d6a:	3724      	adds	r7, #36	@ 0x24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	58000400 	.word	0x58000400

08002d78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002d82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d86:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d008      	beq.n	8002da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe fdb4 	bl	800190c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002db4:	4a08      	ldr	r2, [pc, #32]	@ (8002dd8 <HAL_HSEM_FastTake+0x2c>)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3320      	adds	r3, #32
 8002dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbe:	4a07      	ldr	r2, [pc, #28]	@ (8002ddc <HAL_HSEM_FastTake+0x30>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d101      	bne.n	8002dc8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e000      	b.n	8002dca <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	58026400 	.word	0x58026400
 8002ddc:	80000300 	.word	0x80000300

08002de0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002dea:	4906      	ldr	r1, [pc, #24]	@ (8002e04 <HAL_HSEM_Release+0x24>)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	58026400 	.word	0x58026400

08002e08 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002e10:	4b29      	ldr	r3, [pc, #164]	@ (8002eb8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	2b06      	cmp	r3, #6
 8002e1a:	d00a      	beq.n	8002e32 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e1c:	4b26      	ldr	r3, [pc, #152]	@ (8002eb8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d001      	beq.n	8002e2e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e040      	b.n	8002eb0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e03e      	b.n	8002eb0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e32:	4b21      	ldr	r3, [pc, #132]	@ (8002eb8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002e3a:	491f      	ldr	r1, [pc, #124]	@ (8002eb8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002e42:	f7ff fcbb 	bl	80027bc <HAL_GetTick>
 8002e46:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e48:	e009      	b.n	8002e5e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e4a:	f7ff fcb7 	bl	80027bc <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e58:	d901      	bls.n	8002e5e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e028      	b.n	8002eb0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e5e:	4b16      	ldr	r3, [pc, #88]	@ (8002eb8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e6a:	d1ee      	bne.n	8002e4a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b1e      	cmp	r3, #30
 8002e70:	d008      	beq.n	8002e84 <HAL_PWREx_ConfigSupply+0x7c>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e76:	d005      	beq.n	8002e84 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b1d      	cmp	r3, #29
 8002e7c:	d002      	beq.n	8002e84 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b2d      	cmp	r3, #45	@ 0x2d
 8002e82:	d114      	bne.n	8002eae <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002e84:	f7ff fc9a 	bl	80027bc <HAL_GetTick>
 8002e88:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e8a:	e009      	b.n	8002ea0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e8c:	f7ff fc96 	bl	80027bc <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e9a:	d901      	bls.n	8002ea0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e007      	b.n	8002eb0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002ea0:	4b05      	ldr	r3, [pc, #20]	@ (8002eb8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eac:	d1ee      	bne.n	8002e8c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	58024800 	.word	0x58024800

08002ebc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08c      	sub	sp, #48	@ 0x30
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d102      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	f000 bc48 	b.w	8003760 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 8088 	beq.w	8002fee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ede:	4b99      	ldr	r3, [pc, #612]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ee8:	4b96      	ldr	r3, [pc, #600]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8002eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eec:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef0:	2b10      	cmp	r3, #16
 8002ef2:	d007      	beq.n	8002f04 <HAL_RCC_OscConfig+0x48>
 8002ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef6:	2b18      	cmp	r3, #24
 8002ef8:	d111      	bne.n	8002f1e <HAL_RCC_OscConfig+0x62>
 8002efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d10c      	bne.n	8002f1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f04:	4b8f      	ldr	r3, [pc, #572]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d06d      	beq.n	8002fec <HAL_RCC_OscConfig+0x130>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d169      	bne.n	8002fec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f000 bc21 	b.w	8003760 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f26:	d106      	bne.n	8002f36 <HAL_RCC_OscConfig+0x7a>
 8002f28:	4b86      	ldr	r3, [pc, #536]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a85      	ldr	r2, [pc, #532]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8002f2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	e02e      	b.n	8002f94 <HAL_RCC_OscConfig+0xd8>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10c      	bne.n	8002f58 <HAL_RCC_OscConfig+0x9c>
 8002f3e:	4b81      	ldr	r3, [pc, #516]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a80      	ldr	r2, [pc, #512]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8002f44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	4b7e      	ldr	r3, [pc, #504]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a7d      	ldr	r2, [pc, #500]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8002f50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	e01d      	b.n	8002f94 <HAL_RCC_OscConfig+0xd8>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0xc0>
 8002f62:	4b78      	ldr	r3, [pc, #480]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a77      	ldr	r2, [pc, #476]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8002f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	4b75      	ldr	r3, [pc, #468]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a74      	ldr	r2, [pc, #464]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e00b      	b.n	8002f94 <HAL_RCC_OscConfig+0xd8>
 8002f7c:	4b71      	ldr	r3, [pc, #452]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a70      	ldr	r2, [pc, #448]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8002f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	4b6e      	ldr	r3, [pc, #440]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a6d      	ldr	r2, [pc, #436]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8002f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d013      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7ff fc0e 	bl	80027bc <HAL_GetTick>
 8002fa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa4:	f7ff fc0a 	bl	80027bc <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	@ 0x64
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e3d4      	b.n	8003760 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fb6:	4b63      	ldr	r3, [pc, #396]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0xe8>
 8002fc2:	e014      	b.n	8002fee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7ff fbfa 	bl	80027bc <HAL_GetTick>
 8002fc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fcc:	f7ff fbf6 	bl	80027bc <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b64      	cmp	r3, #100	@ 0x64
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e3c0      	b.n	8003760 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fde:	4b59      	ldr	r3, [pc, #356]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x110>
 8002fea:	e000      	b.n	8002fee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 80ca 	beq.w	8003190 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ffc:	4b51      	ldr	r3, [pc, #324]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003004:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003006:	4b4f      	ldr	r3, [pc, #316]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8003008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d007      	beq.n	8003022 <HAL_RCC_OscConfig+0x166>
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	2b18      	cmp	r3, #24
 8003016:	d156      	bne.n	80030c6 <HAL_RCC_OscConfig+0x20a>
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d151      	bne.n	80030c6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003022:	4b48      	ldr	r3, [pc, #288]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	d005      	beq.n	800303a <HAL_RCC_OscConfig+0x17e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e392      	b.n	8003760 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800303a:	4b42      	ldr	r3, [pc, #264]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 0219 	bic.w	r2, r3, #25
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	493f      	ldr	r1, [pc, #252]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8003048:	4313      	orrs	r3, r2
 800304a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7ff fbb6 	bl	80027bc <HAL_GetTick>
 8003050:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003054:	f7ff fbb2 	bl	80027bc <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e37c      	b.n	8003760 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003066:	4b37      	ldr	r3, [pc, #220]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003072:	f7ff fbd3 	bl	800281c <HAL_GetREVID>
 8003076:	4603      	mov	r3, r0
 8003078:	f241 0203 	movw	r2, #4099	@ 0x1003
 800307c:	4293      	cmp	r3, r2
 800307e:	d817      	bhi.n	80030b0 <HAL_RCC_OscConfig+0x1f4>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	2b40      	cmp	r3, #64	@ 0x40
 8003086:	d108      	bne.n	800309a <HAL_RCC_OscConfig+0x1de>
 8003088:	4b2e      	ldr	r3, [pc, #184]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003090:	4a2c      	ldr	r2, [pc, #176]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8003092:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003096:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003098:	e07a      	b.n	8003190 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309a:	4b2a      	ldr	r3, [pc, #168]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	031b      	lsls	r3, r3, #12
 80030a8:	4926      	ldr	r1, [pc, #152]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030ae:	e06f      	b.n	8003190 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b0:	4b24      	ldr	r3, [pc, #144]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	061b      	lsls	r3, r3, #24
 80030be:	4921      	ldr	r1, [pc, #132]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030c4:	e064      	b.n	8003190 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d047      	beq.n	800315e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 0219 	bic.w	r2, r3, #25
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	491a      	ldr	r1, [pc, #104]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7ff fb6c 	bl	80027bc <HAL_GetTick>
 80030e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e8:	f7ff fb68 	bl	80027bc <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e332      	b.n	8003760 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030fa:	4b12      	ldr	r3, [pc, #72]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003106:	f7ff fb89 	bl	800281c <HAL_GetREVID>
 800310a:	4603      	mov	r3, r0
 800310c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003110:	4293      	cmp	r3, r2
 8003112:	d819      	bhi.n	8003148 <HAL_RCC_OscConfig+0x28c>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	2b40      	cmp	r3, #64	@ 0x40
 800311a:	d108      	bne.n	800312e <HAL_RCC_OscConfig+0x272>
 800311c:	4b09      	ldr	r3, [pc, #36]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003124:	4a07      	ldr	r2, [pc, #28]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8003126:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800312a:	6053      	str	r3, [r2, #4]
 800312c:	e030      	b.n	8003190 <HAL_RCC_OscConfig+0x2d4>
 800312e:	4b05      	ldr	r3, [pc, #20]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	031b      	lsls	r3, r3, #12
 800313c:	4901      	ldr	r1, [pc, #4]	@ (8003144 <HAL_RCC_OscConfig+0x288>)
 800313e:	4313      	orrs	r3, r2
 8003140:	604b      	str	r3, [r1, #4]
 8003142:	e025      	b.n	8003190 <HAL_RCC_OscConfig+0x2d4>
 8003144:	58024400 	.word	0x58024400
 8003148:	4b9a      	ldr	r3, [pc, #616]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	061b      	lsls	r3, r3, #24
 8003156:	4997      	ldr	r1, [pc, #604]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 8003158:	4313      	orrs	r3, r2
 800315a:	604b      	str	r3, [r1, #4]
 800315c:	e018      	b.n	8003190 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800315e:	4b95      	ldr	r3, [pc, #596]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a94      	ldr	r2, [pc, #592]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 8003164:	f023 0301 	bic.w	r3, r3, #1
 8003168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7ff fb27 	bl	80027bc <HAL_GetTick>
 800316e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003172:	f7ff fb23 	bl	80027bc <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e2ed      	b.n	8003760 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003184:	4b8b      	ldr	r3, [pc, #556]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1f0      	bne.n	8003172 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80a9 	beq.w	80032f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800319e:	4b85      	ldr	r3, [pc, #532]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031a8:	4b82      	ldr	r3, [pc, #520]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 80031aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d007      	beq.n	80031c4 <HAL_RCC_OscConfig+0x308>
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	2b18      	cmp	r3, #24
 80031b8:	d13a      	bne.n	8003230 <HAL_RCC_OscConfig+0x374>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d135      	bne.n	8003230 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031c4:	4b7b      	ldr	r3, [pc, #492]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_OscConfig+0x320>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	2b80      	cmp	r3, #128	@ 0x80
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e2c1      	b.n	8003760 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031dc:	f7ff fb1e 	bl	800281c <HAL_GetREVID>
 80031e0:	4603      	mov	r3, r0
 80031e2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d817      	bhi.n	800321a <HAL_RCC_OscConfig+0x35e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	d108      	bne.n	8003204 <HAL_RCC_OscConfig+0x348>
 80031f2:	4b70      	ldr	r3, [pc, #448]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80031fa:	4a6e      	ldr	r2, [pc, #440]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 80031fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003200:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003202:	e075      	b.n	80032f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003204:	4b6b      	ldr	r3, [pc, #428]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	069b      	lsls	r3, r3, #26
 8003212:	4968      	ldr	r1, [pc, #416]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 8003214:	4313      	orrs	r3, r2
 8003216:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003218:	e06a      	b.n	80032f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800321a:	4b66      	ldr	r3, [pc, #408]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	061b      	lsls	r3, r3, #24
 8003228:	4962      	ldr	r1, [pc, #392]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 800322a:	4313      	orrs	r3, r2
 800322c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800322e:	e05f      	b.n	80032f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d042      	beq.n	80032be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003238:	4b5e      	ldr	r3, [pc, #376]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a5d      	ldr	r2, [pc, #372]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 800323e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003244:	f7ff faba 	bl	80027bc <HAL_GetTick>
 8003248:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800324c:	f7ff fab6 	bl	80027bc <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e280      	b.n	8003760 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800325e:	4b55      	ldr	r3, [pc, #340]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800326a:	f7ff fad7 	bl	800281c <HAL_GetREVID>
 800326e:	4603      	mov	r3, r0
 8003270:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003274:	4293      	cmp	r3, r2
 8003276:	d817      	bhi.n	80032a8 <HAL_RCC_OscConfig+0x3ec>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	2b20      	cmp	r3, #32
 800327e:	d108      	bne.n	8003292 <HAL_RCC_OscConfig+0x3d6>
 8003280:	4b4c      	ldr	r3, [pc, #304]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003288:	4a4a      	ldr	r2, [pc, #296]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 800328a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800328e:	6053      	str	r3, [r2, #4]
 8003290:	e02e      	b.n	80032f0 <HAL_RCC_OscConfig+0x434>
 8003292:	4b48      	ldr	r3, [pc, #288]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	069b      	lsls	r3, r3, #26
 80032a0:	4944      	ldr	r1, [pc, #272]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	604b      	str	r3, [r1, #4]
 80032a6:	e023      	b.n	80032f0 <HAL_RCC_OscConfig+0x434>
 80032a8:	4b42      	ldr	r3, [pc, #264]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	061b      	lsls	r3, r3, #24
 80032b6:	493f      	ldr	r1, [pc, #252]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60cb      	str	r3, [r1, #12]
 80032bc:	e018      	b.n	80032f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80032be:	4b3d      	ldr	r3, [pc, #244]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a3c      	ldr	r2, [pc, #240]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 80032c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ca:	f7ff fa77 	bl	80027bc <HAL_GetTick>
 80032ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80032d2:	f7ff fa73 	bl	80027bc <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e23d      	b.n	8003760 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032e4:	4b33      	ldr	r3, [pc, #204]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1f0      	bne.n	80032d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d036      	beq.n	800336a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d019      	beq.n	8003338 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003304:	4b2b      	ldr	r3, [pc, #172]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 8003306:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003308:	4a2a      	ldr	r2, [pc, #168]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003310:	f7ff fa54 	bl	80027bc <HAL_GetTick>
 8003314:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003318:	f7ff fa50 	bl	80027bc <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e21a      	b.n	8003760 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800332a:	4b22      	ldr	r3, [pc, #136]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 800332c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0x45c>
 8003336:	e018      	b.n	800336a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003338:	4b1e      	ldr	r3, [pc, #120]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 800333a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800333c:	4a1d      	ldr	r2, [pc, #116]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 800333e:	f023 0301 	bic.w	r3, r3, #1
 8003342:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003344:	f7ff fa3a 	bl	80027bc <HAL_GetTick>
 8003348:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800334c:	f7ff fa36 	bl	80027bc <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e200      	b.n	8003760 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800335e:	4b15      	ldr	r3, [pc, #84]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 8003360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0320 	and.w	r3, r3, #32
 8003372:	2b00      	cmp	r3, #0
 8003374:	d039      	beq.n	80033ea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d01c      	beq.n	80033b8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800337e:	4b0d      	ldr	r3, [pc, #52]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a0c      	ldr	r2, [pc, #48]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 8003384:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003388:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800338a:	f7ff fa17 	bl	80027bc <HAL_GetTick>
 800338e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003392:	f7ff fa13 	bl	80027bc <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e1dd      	b.n	8003760 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033a4:	4b03      	ldr	r3, [pc, #12]	@ (80033b4 <HAL_RCC_OscConfig+0x4f8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0f0      	beq.n	8003392 <HAL_RCC_OscConfig+0x4d6>
 80033b0:	e01b      	b.n	80033ea <HAL_RCC_OscConfig+0x52e>
 80033b2:	bf00      	nop
 80033b4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033b8:	4b9b      	ldr	r3, [pc, #620]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a9a      	ldr	r2, [pc, #616]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 80033be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80033c4:	f7ff f9fa 	bl	80027bc <HAL_GetTick>
 80033c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033cc:	f7ff f9f6 	bl	80027bc <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e1c0      	b.n	8003760 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033de:	4b92      	ldr	r3, [pc, #584]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 8081 	beq.w	80034fa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033f8:	4b8c      	ldr	r3, [pc, #560]	@ (800362c <HAL_RCC_OscConfig+0x770>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a8b      	ldr	r2, [pc, #556]	@ (800362c <HAL_RCC_OscConfig+0x770>)
 80033fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003402:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003404:	f7ff f9da 	bl	80027bc <HAL_GetTick>
 8003408:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800340c:	f7ff f9d6 	bl	80027bc <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	@ 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e1a0      	b.n	8003760 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800341e:	4b83      	ldr	r3, [pc, #524]	@ (800362c <HAL_RCC_OscConfig+0x770>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d106      	bne.n	8003440 <HAL_RCC_OscConfig+0x584>
 8003432:	4b7d      	ldr	r3, [pc, #500]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003436:	4a7c      	ldr	r2, [pc, #496]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	6713      	str	r3, [r2, #112]	@ 0x70
 800343e:	e02d      	b.n	800349c <HAL_RCC_OscConfig+0x5e0>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10c      	bne.n	8003462 <HAL_RCC_OscConfig+0x5a6>
 8003448:	4b77      	ldr	r3, [pc, #476]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344c:	4a76      	ldr	r2, [pc, #472]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 800344e:	f023 0301 	bic.w	r3, r3, #1
 8003452:	6713      	str	r3, [r2, #112]	@ 0x70
 8003454:	4b74      	ldr	r3, [pc, #464]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003458:	4a73      	ldr	r2, [pc, #460]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 800345a:	f023 0304 	bic.w	r3, r3, #4
 800345e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003460:	e01c      	b.n	800349c <HAL_RCC_OscConfig+0x5e0>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b05      	cmp	r3, #5
 8003468:	d10c      	bne.n	8003484 <HAL_RCC_OscConfig+0x5c8>
 800346a:	4b6f      	ldr	r3, [pc, #444]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346e:	4a6e      	ldr	r2, [pc, #440]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	6713      	str	r3, [r2, #112]	@ 0x70
 8003476:	4b6c      	ldr	r3, [pc, #432]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 8003478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800347a:	4a6b      	ldr	r2, [pc, #428]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	6713      	str	r3, [r2, #112]	@ 0x70
 8003482:	e00b      	b.n	800349c <HAL_RCC_OscConfig+0x5e0>
 8003484:	4b68      	ldr	r3, [pc, #416]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003488:	4a67      	ldr	r2, [pc, #412]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003490:	4b65      	ldr	r3, [pc, #404]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003494:	4a64      	ldr	r2, [pc, #400]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 8003496:	f023 0304 	bic.w	r3, r3, #4
 800349a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d015      	beq.n	80034d0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a4:	f7ff f98a 	bl	80027bc <HAL_GetTick>
 80034a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034aa:	e00a      	b.n	80034c2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ac:	f7ff f986 	bl	80027bc <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e14e      	b.n	8003760 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034c2:	4b59      	ldr	r3, [pc, #356]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0ee      	beq.n	80034ac <HAL_RCC_OscConfig+0x5f0>
 80034ce:	e014      	b.n	80034fa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7ff f974 	bl	80027bc <HAL_GetTick>
 80034d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034d6:	e00a      	b.n	80034ee <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d8:	f7ff f970 	bl	80027bc <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e138      	b.n	8003760 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034ee:	4b4e      	ldr	r3, [pc, #312]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1ee      	bne.n	80034d8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 812d 	beq.w	800375e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003504:	4b48      	ldr	r3, [pc, #288]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800350c:	2b18      	cmp	r3, #24
 800350e:	f000 80bd 	beq.w	800368c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003516:	2b02      	cmp	r3, #2
 8003518:	f040 809e 	bne.w	8003658 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351c:	4b42      	ldr	r3, [pc, #264]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a41      	ldr	r2, [pc, #260]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 8003522:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7ff f948 	bl	80027bc <HAL_GetTick>
 800352c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003530:	f7ff f944 	bl	80027bc <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e10e      	b.n	8003760 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003542:	4b39      	ldr	r3, [pc, #228]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800354e:	4b36      	ldr	r3, [pc, #216]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 8003550:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003552:	4b37      	ldr	r3, [pc, #220]	@ (8003630 <HAL_RCC_OscConfig+0x774>)
 8003554:	4013      	ands	r3, r2
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800355e:	0112      	lsls	r2, r2, #4
 8003560:	430a      	orrs	r2, r1
 8003562:	4931      	ldr	r1, [pc, #196]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 8003564:	4313      	orrs	r3, r2
 8003566:	628b      	str	r3, [r1, #40]	@ 0x28
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356c:	3b01      	subs	r3, #1
 800356e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003576:	3b01      	subs	r3, #1
 8003578:	025b      	lsls	r3, r3, #9
 800357a:	b29b      	uxth	r3, r3
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003582:	3b01      	subs	r3, #1
 8003584:	041b      	lsls	r3, r3, #16
 8003586:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003590:	3b01      	subs	r3, #1
 8003592:	061b      	lsls	r3, r3, #24
 8003594:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003598:	4923      	ldr	r1, [pc, #140]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 800359a:	4313      	orrs	r3, r2
 800359c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800359e:	4b22      	ldr	r3, [pc, #136]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 80035a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a2:	4a21      	ldr	r2, [pc, #132]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80035aa:	4b1f      	ldr	r3, [pc, #124]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 80035ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035ae:	4b21      	ldr	r3, [pc, #132]	@ (8003634 <HAL_RCC_OscConfig+0x778>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80035b6:	00d2      	lsls	r2, r2, #3
 80035b8:	491b      	ldr	r1, [pc, #108]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80035be:	4b1a      	ldr	r3, [pc, #104]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 80035c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c2:	f023 020c 	bic.w	r2, r3, #12
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ca:	4917      	ldr	r1, [pc, #92]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80035d0:	4b15      	ldr	r3, [pc, #84]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 80035d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d4:	f023 0202 	bic.w	r2, r3, #2
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035dc:	4912      	ldr	r1, [pc, #72]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80035e2:	4b11      	ldr	r3, [pc, #68]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 80035e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e6:	4a10      	ldr	r2, [pc, #64]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 80035e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 80035f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 80035f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80035fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 80035fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 8003600:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003604:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003606:	4b08      	ldr	r3, [pc, #32]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 8003608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360a:	4a07      	ldr	r2, [pc, #28]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003612:	4b05      	ldr	r3, [pc, #20]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a04      	ldr	r2, [pc, #16]	@ (8003628 <HAL_RCC_OscConfig+0x76c>)
 8003618:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800361c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361e:	f7ff f8cd 	bl	80027bc <HAL_GetTick>
 8003622:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003624:	e011      	b.n	800364a <HAL_RCC_OscConfig+0x78e>
 8003626:	bf00      	nop
 8003628:	58024400 	.word	0x58024400
 800362c:	58024800 	.word	0x58024800
 8003630:	fffffc0c 	.word	0xfffffc0c
 8003634:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003638:	f7ff f8c0 	bl	80027bc <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e08a      	b.n	8003760 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800364a:	4b47      	ldr	r3, [pc, #284]	@ (8003768 <HAL_RCC_OscConfig+0x8ac>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0f0      	beq.n	8003638 <HAL_RCC_OscConfig+0x77c>
 8003656:	e082      	b.n	800375e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003658:	4b43      	ldr	r3, [pc, #268]	@ (8003768 <HAL_RCC_OscConfig+0x8ac>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a42      	ldr	r2, [pc, #264]	@ (8003768 <HAL_RCC_OscConfig+0x8ac>)
 800365e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7ff f8aa 	bl	80027bc <HAL_GetTick>
 8003668:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366c:	f7ff f8a6 	bl	80027bc <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e070      	b.n	8003760 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800367e:	4b3a      	ldr	r3, [pc, #232]	@ (8003768 <HAL_RCC_OscConfig+0x8ac>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x7b0>
 800368a:	e068      	b.n	800375e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800368c:	4b36      	ldr	r3, [pc, #216]	@ (8003768 <HAL_RCC_OscConfig+0x8ac>)
 800368e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003690:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003692:	4b35      	ldr	r3, [pc, #212]	@ (8003768 <HAL_RCC_OscConfig+0x8ac>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003696:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369c:	2b01      	cmp	r3, #1
 800369e:	d031      	beq.n	8003704 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f003 0203 	and.w	r2, r3, #3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d12a      	bne.n	8003704 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	091b      	lsrs	r3, r3, #4
 80036b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d122      	bne.n	8003704 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d11a      	bne.n	8003704 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	0a5b      	lsrs	r3, r3, #9
 80036d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036dc:	429a      	cmp	r2, r3
 80036de:	d111      	bne.n	8003704 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	0c1b      	lsrs	r3, r3, #16
 80036e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d108      	bne.n	8003704 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	0e1b      	lsrs	r3, r3, #24
 80036f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003700:	429a      	cmp	r2, r3
 8003702:	d001      	beq.n	8003708 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e02b      	b.n	8003760 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003708:	4b17      	ldr	r3, [pc, #92]	@ (8003768 <HAL_RCC_OscConfig+0x8ac>)
 800370a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800370c:	08db      	lsrs	r3, r3, #3
 800370e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003712:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	429a      	cmp	r2, r3
 800371c:	d01f      	beq.n	800375e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800371e:	4b12      	ldr	r3, [pc, #72]	@ (8003768 <HAL_RCC_OscConfig+0x8ac>)
 8003720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003722:	4a11      	ldr	r2, [pc, #68]	@ (8003768 <HAL_RCC_OscConfig+0x8ac>)
 8003724:	f023 0301 	bic.w	r3, r3, #1
 8003728:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800372a:	f7ff f847 	bl	80027bc <HAL_GetTick>
 800372e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003730:	bf00      	nop
 8003732:	f7ff f843 	bl	80027bc <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373a:	4293      	cmp	r3, r2
 800373c:	d0f9      	beq.n	8003732 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800373e:	4b0a      	ldr	r3, [pc, #40]	@ (8003768 <HAL_RCC_OscConfig+0x8ac>)
 8003740:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003742:	4b0a      	ldr	r3, [pc, #40]	@ (800376c <HAL_RCC_OscConfig+0x8b0>)
 8003744:	4013      	ands	r3, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800374a:	00d2      	lsls	r2, r2, #3
 800374c:	4906      	ldr	r1, [pc, #24]	@ (8003768 <HAL_RCC_OscConfig+0x8ac>)
 800374e:	4313      	orrs	r3, r2
 8003750:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003752:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <HAL_RCC_OscConfig+0x8ac>)
 8003754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003756:	4a04      	ldr	r2, [pc, #16]	@ (8003768 <HAL_RCC_OscConfig+0x8ac>)
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3730      	adds	r7, #48	@ 0x30
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	58024400 	.word	0x58024400
 800376c:	ffff0007 	.word	0xffff0007

08003770 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e19c      	b.n	8003abe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003784:	4b8a      	ldr	r3, [pc, #552]	@ (80039b0 <HAL_RCC_ClockConfig+0x240>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 030f 	and.w	r3, r3, #15
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d910      	bls.n	80037b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003792:	4b87      	ldr	r3, [pc, #540]	@ (80039b0 <HAL_RCC_ClockConfig+0x240>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f023 020f 	bic.w	r2, r3, #15
 800379a:	4985      	ldr	r1, [pc, #532]	@ (80039b0 <HAL_RCC_ClockConfig+0x240>)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	4313      	orrs	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a2:	4b83      	ldr	r3, [pc, #524]	@ (80039b0 <HAL_RCC_ClockConfig+0x240>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d001      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e184      	b.n	8003abe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d010      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	4b7b      	ldr	r3, [pc, #492]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d908      	bls.n	80037e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80037d0:	4b78      	ldr	r3, [pc, #480]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	4975      	ldr	r1, [pc, #468]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d010      	beq.n	8003810 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695a      	ldr	r2, [r3, #20]
 80037f2:	4b70      	ldr	r3, [pc, #448]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d908      	bls.n	8003810 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80037fe:	4b6d      	ldr	r3, [pc, #436]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	496a      	ldr	r1, [pc, #424]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 800380c:	4313      	orrs	r3, r2
 800380e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b00      	cmp	r3, #0
 800381a:	d010      	beq.n	800383e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699a      	ldr	r2, [r3, #24]
 8003820:	4b64      	ldr	r3, [pc, #400]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003828:	429a      	cmp	r2, r3
 800382a:	d908      	bls.n	800383e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800382c:	4b61      	ldr	r3, [pc, #388]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	495e      	ldr	r1, [pc, #376]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 800383a:	4313      	orrs	r3, r2
 800383c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0320 	and.w	r3, r3, #32
 8003846:	2b00      	cmp	r3, #0
 8003848:	d010      	beq.n	800386c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69da      	ldr	r2, [r3, #28]
 800384e:	4b59      	ldr	r3, [pc, #356]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003856:	429a      	cmp	r2, r3
 8003858:	d908      	bls.n	800386c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800385a:	4b56      	ldr	r3, [pc, #344]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	4953      	ldr	r1, [pc, #332]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 8003868:	4313      	orrs	r3, r2
 800386a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d010      	beq.n	800389a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	4b4d      	ldr	r3, [pc, #308]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	429a      	cmp	r2, r3
 8003886:	d908      	bls.n	800389a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003888:	4b4a      	ldr	r3, [pc, #296]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f023 020f 	bic.w	r2, r3, #15
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	4947      	ldr	r1, [pc, #284]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 8003896:	4313      	orrs	r3, r2
 8003898:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d055      	beq.n	8003952 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80038a6:	4b43      	ldr	r3, [pc, #268]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	4940      	ldr	r1, [pc, #256]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d107      	bne.n	80038d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038c0:	4b3c      	ldr	r3, [pc, #240]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d121      	bne.n	8003910 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0f6      	b.n	8003abe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d107      	bne.n	80038e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038d8:	4b36      	ldr	r3, [pc, #216]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d115      	bne.n	8003910 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0ea      	b.n	8003abe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d107      	bne.n	8003900 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038f0:	4b30      	ldr	r3, [pc, #192]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d109      	bne.n	8003910 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0de      	b.n	8003abe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003900:	4b2c      	ldr	r3, [pc, #176]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0d6      	b.n	8003abe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003910:	4b28      	ldr	r3, [pc, #160]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	f023 0207 	bic.w	r2, r3, #7
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	4925      	ldr	r1, [pc, #148]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 800391e:	4313      	orrs	r3, r2
 8003920:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003922:	f7fe ff4b 	bl	80027bc <HAL_GetTick>
 8003926:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003928:	e00a      	b.n	8003940 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800392a:	f7fe ff47 	bl	80027bc <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003938:	4293      	cmp	r3, r2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e0be      	b.n	8003abe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003940:	4b1c      	ldr	r3, [pc, #112]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	429a      	cmp	r2, r3
 8003950:	d1eb      	bne.n	800392a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d010      	beq.n	8003980 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	4b14      	ldr	r3, [pc, #80]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	429a      	cmp	r2, r3
 800396c:	d208      	bcs.n	8003980 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800396e:	4b11      	ldr	r3, [pc, #68]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f023 020f 	bic.w	r2, r3, #15
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	490e      	ldr	r1, [pc, #56]	@ (80039b4 <HAL_RCC_ClockConfig+0x244>)
 800397c:	4313      	orrs	r3, r2
 800397e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003980:	4b0b      	ldr	r3, [pc, #44]	@ (80039b0 <HAL_RCC_ClockConfig+0x240>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d214      	bcs.n	80039b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	4b08      	ldr	r3, [pc, #32]	@ (80039b0 <HAL_RCC_ClockConfig+0x240>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 020f 	bic.w	r2, r3, #15
 8003996:	4906      	ldr	r1, [pc, #24]	@ (80039b0 <HAL_RCC_ClockConfig+0x240>)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b04      	ldr	r3, [pc, #16]	@ (80039b0 <HAL_RCC_ClockConfig+0x240>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d005      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e086      	b.n	8003abe <HAL_RCC_ClockConfig+0x34e>
 80039b0:	52002000 	.word	0x52002000
 80039b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d010      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	4b3f      	ldr	r3, [pc, #252]	@ (8003ac8 <HAL_RCC_ClockConfig+0x358>)
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d208      	bcs.n	80039e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039d4:	4b3c      	ldr	r3, [pc, #240]	@ (8003ac8 <HAL_RCC_ClockConfig+0x358>)
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	4939      	ldr	r1, [pc, #228]	@ (8003ac8 <HAL_RCC_ClockConfig+0x358>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d010      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695a      	ldr	r2, [r3, #20]
 80039f6:	4b34      	ldr	r3, [pc, #208]	@ (8003ac8 <HAL_RCC_ClockConfig+0x358>)
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d208      	bcs.n	8003a14 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a02:	4b31      	ldr	r3, [pc, #196]	@ (8003ac8 <HAL_RCC_ClockConfig+0x358>)
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	492e      	ldr	r1, [pc, #184]	@ (8003ac8 <HAL_RCC_ClockConfig+0x358>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d010      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699a      	ldr	r2, [r3, #24]
 8003a24:	4b28      	ldr	r3, [pc, #160]	@ (8003ac8 <HAL_RCC_ClockConfig+0x358>)
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d208      	bcs.n	8003a42 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a30:	4b25      	ldr	r3, [pc, #148]	@ (8003ac8 <HAL_RCC_ClockConfig+0x358>)
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	4922      	ldr	r1, [pc, #136]	@ (8003ac8 <HAL_RCC_ClockConfig+0x358>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0320 	and.w	r3, r3, #32
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d010      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69da      	ldr	r2, [r3, #28]
 8003a52:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac8 <HAL_RCC_ClockConfig+0x358>)
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d208      	bcs.n	8003a70 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac8 <HAL_RCC_ClockConfig+0x358>)
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4917      	ldr	r1, [pc, #92]	@ (8003ac8 <HAL_RCC_ClockConfig+0x358>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a70:	f000 f89e 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8003a74:	4602      	mov	r2, r0
 8003a76:	4b14      	ldr	r3, [pc, #80]	@ (8003ac8 <HAL_RCC_ClockConfig+0x358>)
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	0a1b      	lsrs	r3, r3, #8
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	4912      	ldr	r1, [pc, #72]	@ (8003acc <HAL_RCC_ClockConfig+0x35c>)
 8003a82:	5ccb      	ldrb	r3, [r1, r3]
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003ac8 <HAL_RCC_ClockConfig+0x358>)
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	f003 030f 	and.w	r3, r3, #15
 8003a96:	4a0d      	ldr	r2, [pc, #52]	@ (8003acc <HAL_RCC_ClockConfig+0x35c>)
 8003a98:	5cd3      	ldrb	r3, [r2, r3]
 8003a9a:	f003 031f 	and.w	r3, r3, #31
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad0 <HAL_RCC_ClockConfig+0x360>)
 8003aa6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad4 <HAL_RCC_ClockConfig+0x364>)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003aae:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <HAL_RCC_ClockConfig+0x368>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe fcca 	bl	800244c <HAL_InitTick>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	58024400 	.word	0x58024400
 8003acc:	0800a990 	.word	0x0800a990
 8003ad0:	24000004 	.word	0x24000004
 8003ad4:	24000000 	.word	0x24000000
 8003ad8:	24000008 	.word	0x24000008

08003adc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08c      	sub	sp, #48	@ 0x30
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d12a      	bne.n	8003b44 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003aee:	4b2d      	ldr	r3, [pc, #180]	@ (8003ba4 <HAL_RCC_MCOConfig+0xc8>)
 8003af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003af4:	4a2b      	ldr	r2, [pc, #172]	@ (8003ba4 <HAL_RCC_MCOConfig+0xc8>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003afe:	4b29      	ldr	r3, [pc, #164]	@ (8003ba4 <HAL_RCC_MCOConfig+0xc8>)
 8003b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003b0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b12:	2302      	movs	r3, #2
 8003b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b16:	2303      	movs	r3, #3
 8003b18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003b22:	f107 031c 	add.w	r3, r7, #28
 8003b26:	4619      	mov	r1, r3
 8003b28:	481f      	ldr	r0, [pc, #124]	@ (8003ba8 <HAL_RCC_MCOConfig+0xcc>)
 8003b2a:	f7fe ff75 	bl	8002a18 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ba4 <HAL_RCC_MCOConfig+0xc8>)
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8003b36:	68b9      	ldr	r1, [r7, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	430b      	orrs	r3, r1
 8003b3c:	4919      	ldr	r1, [pc, #100]	@ (8003ba4 <HAL_RCC_MCOConfig+0xc8>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8003b42:	e02a      	b.n	8003b9a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8003b44:	4b17      	ldr	r3, [pc, #92]	@ (8003ba4 <HAL_RCC_MCOConfig+0xc8>)
 8003b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b4a:	4a16      	ldr	r2, [pc, #88]	@ (8003ba4 <HAL_RCC_MCOConfig+0xc8>)
 8003b4c:	f043 0304 	orr.w	r3, r3, #4
 8003b50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b54:	4b13      	ldr	r3, [pc, #76]	@ (8003ba4 <HAL_RCC_MCOConfig+0xc8>)
 8003b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	617b      	str	r3, [r7, #20]
 8003b60:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003b62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b68:	2302      	movs	r3, #2
 8003b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b70:	2300      	movs	r3, #0
 8003b72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003b74:	2300      	movs	r3, #0
 8003b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003b78:	f107 031c 	add.w	r3, r7, #28
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	480b      	ldr	r0, [pc, #44]	@ (8003bac <HAL_RCC_MCOConfig+0xd0>)
 8003b80:	f7fe ff4a 	bl	8002a18 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003b84:	4b07      	ldr	r3, [pc, #28]	@ (8003ba4 <HAL_RCC_MCOConfig+0xc8>)
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	01d9      	lsls	r1, r3, #7
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	430b      	orrs	r3, r1
 8003b94:	4903      	ldr	r1, [pc, #12]	@ (8003ba4 <HAL_RCC_MCOConfig+0xc8>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	610b      	str	r3, [r1, #16]
}
 8003b9a:	bf00      	nop
 8003b9c:	3730      	adds	r7, #48	@ 0x30
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	58024400 	.word	0x58024400
 8003ba8:	58020000 	.word	0x58020000
 8003bac:	58020800 	.word	0x58020800

08003bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b089      	sub	sp, #36	@ 0x24
 8003bb4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb6:	4bb3      	ldr	r3, [pc, #716]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bbe:	2b18      	cmp	r3, #24
 8003bc0:	f200 8155 	bhi.w	8003e6e <HAL_RCC_GetSysClockFreq+0x2be>
 8003bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bcc <HAL_RCC_GetSysClockFreq+0x1c>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003c31 	.word	0x08003c31
 8003bd0:	08003e6f 	.word	0x08003e6f
 8003bd4:	08003e6f 	.word	0x08003e6f
 8003bd8:	08003e6f 	.word	0x08003e6f
 8003bdc:	08003e6f 	.word	0x08003e6f
 8003be0:	08003e6f 	.word	0x08003e6f
 8003be4:	08003e6f 	.word	0x08003e6f
 8003be8:	08003e6f 	.word	0x08003e6f
 8003bec:	08003c57 	.word	0x08003c57
 8003bf0:	08003e6f 	.word	0x08003e6f
 8003bf4:	08003e6f 	.word	0x08003e6f
 8003bf8:	08003e6f 	.word	0x08003e6f
 8003bfc:	08003e6f 	.word	0x08003e6f
 8003c00:	08003e6f 	.word	0x08003e6f
 8003c04:	08003e6f 	.word	0x08003e6f
 8003c08:	08003e6f 	.word	0x08003e6f
 8003c0c:	08003c5d 	.word	0x08003c5d
 8003c10:	08003e6f 	.word	0x08003e6f
 8003c14:	08003e6f 	.word	0x08003e6f
 8003c18:	08003e6f 	.word	0x08003e6f
 8003c1c:	08003e6f 	.word	0x08003e6f
 8003c20:	08003e6f 	.word	0x08003e6f
 8003c24:	08003e6f 	.word	0x08003e6f
 8003c28:	08003e6f 	.word	0x08003e6f
 8003c2c:	08003c63 	.word	0x08003c63
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c30:	4b94      	ldr	r3, [pc, #592]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d009      	beq.n	8003c50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c3c:	4b91      	ldr	r3, [pc, #580]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	08db      	lsrs	r3, r3, #3
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	4a90      	ldr	r2, [pc, #576]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003c4e:	e111      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003c50:	4b8d      	ldr	r3, [pc, #564]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c52:	61bb      	str	r3, [r7, #24]
      break;
 8003c54:	e10e      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003c56:	4b8d      	ldr	r3, [pc, #564]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c58:	61bb      	str	r3, [r7, #24]
      break;
 8003c5a:	e10b      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003c5c:	4b8c      	ldr	r3, [pc, #560]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003c5e:	61bb      	str	r3, [r7, #24]
      break;
 8003c60:	e108      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c62:	4b88      	ldr	r3, [pc, #544]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003c6c:	4b85      	ldr	r3, [pc, #532]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c70:	091b      	lsrs	r3, r3, #4
 8003c72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c76:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c78:	4b82      	ldr	r3, [pc, #520]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003c82:	4b80      	ldr	r3, [pc, #512]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c86:	08db      	lsrs	r3, r3, #3
 8003c88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	fb02 f303 	mul.w	r3, r2, r3
 8003c92:	ee07 3a90 	vmov	s15, r3
 8003c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80e1 	beq.w	8003e68 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	f000 8083 	beq.w	8003db4 <HAL_RCC_GetSysClockFreq+0x204>
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	f200 80a1 	bhi.w	8003df8 <HAL_RCC_GetSysClockFreq+0x248>
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x114>
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d056      	beq.n	8003d70 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003cc2:	e099      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cc4:	4b6f      	ldr	r3, [pc, #444]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0320 	and.w	r3, r3, #32
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d02d      	beq.n	8003d2c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cd0:	4b6c      	ldr	r3, [pc, #432]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	08db      	lsrs	r3, r3, #3
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	4a6b      	ldr	r2, [pc, #428]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	ee07 3a90 	vmov	s15, r3
 8003ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	ee07 3a90 	vmov	s15, r3
 8003cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cfa:	4b62      	ldr	r3, [pc, #392]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d02:	ee07 3a90 	vmov	s15, r3
 8003d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d0e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003e94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d26:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003d2a:	e087      	b.n	8003e3c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	ee07 3a90 	vmov	s15, r3
 8003d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d36:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003e98 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d3e:	4b51      	ldr	r3, [pc, #324]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d46:	ee07 3a90 	vmov	s15, r3
 8003d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d52:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003e94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d6e:	e065      	b.n	8003e3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	ee07 3a90 	vmov	s15, r3
 8003d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d7a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003e9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d82:	4b40      	ldr	r3, [pc, #256]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d92:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d96:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003e94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003da2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003db2:	e043      	b.n	8003e3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	ee07 3a90 	vmov	s15, r3
 8003dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dbe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003ea0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dce:	ee07 3a90 	vmov	s15, r3
 8003dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dda:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003e94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003df6:	e021      	b.n	8003e3c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e02:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003e9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e1e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003e94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e3a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003e3c:	4b11      	ldr	r3, [pc, #68]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e40:	0a5b      	lsrs	r3, r3, #9
 8003e42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e46:	3301      	adds	r3, #1
 8003e48:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	ee07 3a90 	vmov	s15, r3
 8003e50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e54:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e60:	ee17 3a90 	vmov	r3, s15
 8003e64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003e66:	e005      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61bb      	str	r3, [r7, #24]
      break;
 8003e6c:	e002      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003e6e:	4b07      	ldr	r3, [pc, #28]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e70:	61bb      	str	r3, [r7, #24]
      break;
 8003e72:	bf00      	nop
  }

  return sysclockfreq;
 8003e74:	69bb      	ldr	r3, [r7, #24]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3724      	adds	r7, #36	@ 0x24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	58024400 	.word	0x58024400
 8003e88:	03d09000 	.word	0x03d09000
 8003e8c:	003d0900 	.word	0x003d0900
 8003e90:	017d7840 	.word	0x017d7840
 8003e94:	46000000 	.word	0x46000000
 8003e98:	4c742400 	.word	0x4c742400
 8003e9c:	4a742400 	.word	0x4a742400
 8003ea0:	4bbebc20 	.word	0x4bbebc20

08003ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003eaa:	f7ff fe81 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	4b10      	ldr	r3, [pc, #64]	@ (8003ef4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	0a1b      	lsrs	r3, r3, #8
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	490f      	ldr	r1, [pc, #60]	@ (8003ef8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003ebc:	5ccb      	ldrb	r3, [r1, r3]
 8003ebe:	f003 031f 	and.w	r3, r3, #31
 8003ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	4a09      	ldr	r2, [pc, #36]	@ (8003ef8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003ed2:	5cd3      	ldrb	r3, [r2, r3]
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	fa22 f303 	lsr.w	r3, r2, r3
 8003ede:	4a07      	ldr	r2, [pc, #28]	@ (8003efc <HAL_RCC_GetHCLKFreq+0x58>)
 8003ee0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ee2:	4a07      	ldr	r2, [pc, #28]	@ (8003f00 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003ee8:	4b04      	ldr	r3, [pc, #16]	@ (8003efc <HAL_RCC_GetHCLKFreq+0x58>)
 8003eea:	681b      	ldr	r3, [r3, #0]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	58024400 	.word	0x58024400
 8003ef8:	0800a990 	.word	0x0800a990
 8003efc:	24000004 	.word	0x24000004
 8003f00:	24000000 	.word	0x24000000

08003f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003f08:	f7ff ffcc 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b06      	ldr	r3, [pc, #24]	@ (8003f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	091b      	lsrs	r3, r3, #4
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4904      	ldr	r1, [pc, #16]	@ (8003f2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	58024400 	.word	0x58024400
 8003f2c:	0800a990 	.word	0x0800a990

08003f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003f34:	f7ff ffb6 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	4b06      	ldr	r3, [pc, #24]	@ (8003f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	0a1b      	lsrs	r3, r3, #8
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	4904      	ldr	r1, [pc, #16]	@ (8003f58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f46:	5ccb      	ldrb	r3, [r1, r3]
 8003f48:	f003 031f 	and.w	r3, r3, #31
 8003f4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	58024400 	.word	0x58024400
 8003f58:	0800a990 	.word	0x0800a990

08003f5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	223f      	movs	r2, #63	@ 0x3f
 8003f6a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd8 <HAL_RCC_GetClockConfig+0x7c>)
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	f003 0207 	and.w	r2, r3, #7
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003f78:	4b17      	ldr	r3, [pc, #92]	@ (8003fd8 <HAL_RCC_GetClockConfig+0x7c>)
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003f84:	4b14      	ldr	r3, [pc, #80]	@ (8003fd8 <HAL_RCC_GetClockConfig+0x7c>)
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	f003 020f 	and.w	r2, r3, #15
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003f90:	4b11      	ldr	r3, [pc, #68]	@ (8003fd8 <HAL_RCC_GetClockConfig+0x7c>)
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003fd8 <HAL_RCC_GetClockConfig+0x7c>)
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd8 <HAL_RCC_GetClockConfig+0x7c>)
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003fb4:	4b08      	ldr	r3, [pc, #32]	@ (8003fd8 <HAL_RCC_GetClockConfig+0x7c>)
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003fc0:	4b06      	ldr	r3, [pc, #24]	@ (8003fdc <HAL_RCC_GetClockConfig+0x80>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 020f 	and.w	r2, r3, #15
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	601a      	str	r2, [r3, #0]
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	58024400 	.word	0x58024400
 8003fdc:	52002000 	.word	0x52002000

08003fe0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fe4:	b0cc      	sub	sp, #304	@ 0x130
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fec:	2300      	movs	r3, #0
 8003fee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ff8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004000:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004004:	2500      	movs	r5, #0
 8004006:	ea54 0305 	orrs.w	r3, r4, r5
 800400a:	d049      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800400c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004010:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004012:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004016:	d02f      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004018:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800401c:	d828      	bhi.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800401e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004022:	d01a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004024:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004028:	d822      	bhi.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800402e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004032:	d007      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004034:	e01c      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004036:	4bb8      	ldr	r3, [pc, #736]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403a:	4ab7      	ldr	r2, [pc, #732]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800403c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004040:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004042:	e01a      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004044:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004048:	3308      	adds	r3, #8
 800404a:	2102      	movs	r1, #2
 800404c:	4618      	mov	r0, r3
 800404e:	f001 fccf 	bl	80059f0 <RCCEx_PLL2_Config>
 8004052:	4603      	mov	r3, r0
 8004054:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004058:	e00f      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800405a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800405e:	3328      	adds	r3, #40	@ 0x28
 8004060:	2102      	movs	r1, #2
 8004062:	4618      	mov	r0, r3
 8004064:	f001 fd76 	bl	8005b54 <RCCEx_PLL3_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800406e:	e004      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004076:	e000      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800407a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10a      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004082:	4ba5      	ldr	r3, [pc, #660]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004086:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800408a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800408e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004090:	4aa1      	ldr	r2, [pc, #644]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004092:	430b      	orrs	r3, r1
 8004094:	6513      	str	r3, [r2, #80]	@ 0x50
 8004096:	e003      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004098:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800409c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80040a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80040ac:	f04f 0900 	mov.w	r9, #0
 80040b0:	ea58 0309 	orrs.w	r3, r8, r9
 80040b4:	d047      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80040b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d82a      	bhi.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80040c0:	a201      	add	r2, pc, #4	@ (adr r2, 80040c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80040c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c6:	bf00      	nop
 80040c8:	080040dd 	.word	0x080040dd
 80040cc:	080040eb 	.word	0x080040eb
 80040d0:	08004101 	.word	0x08004101
 80040d4:	0800411f 	.word	0x0800411f
 80040d8:	0800411f 	.word	0x0800411f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040dc:	4b8e      	ldr	r3, [pc, #568]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e0:	4a8d      	ldr	r2, [pc, #564]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040e8:	e01a      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040ee:	3308      	adds	r3, #8
 80040f0:	2100      	movs	r1, #0
 80040f2:	4618      	mov	r0, r3
 80040f4:	f001 fc7c 	bl	80059f0 <RCCEx_PLL2_Config>
 80040f8:	4603      	mov	r3, r0
 80040fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040fe:	e00f      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004100:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004104:	3328      	adds	r3, #40	@ 0x28
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f001 fd23 	bl	8005b54 <RCCEx_PLL3_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004114:	e004      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800411c:	e000      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800411e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004120:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10a      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004128:	4b7b      	ldr	r3, [pc, #492]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800412a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800412c:	f023 0107 	bic.w	r1, r3, #7
 8004130:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004136:	4a78      	ldr	r2, [pc, #480]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004138:	430b      	orrs	r3, r1
 800413a:	6513      	str	r3, [r2, #80]	@ 0x50
 800413c:	e003      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004142:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004146:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004152:	f04f 0b00 	mov.w	fp, #0
 8004156:	ea5a 030b 	orrs.w	r3, sl, fp
 800415a:	d04c      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800415c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004162:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004166:	d030      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004168:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800416c:	d829      	bhi.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800416e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004170:	d02d      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004172:	2bc0      	cmp	r3, #192	@ 0xc0
 8004174:	d825      	bhi.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004176:	2b80      	cmp	r3, #128	@ 0x80
 8004178:	d018      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800417a:	2b80      	cmp	r3, #128	@ 0x80
 800417c:	d821      	bhi.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004182:	2b40      	cmp	r3, #64	@ 0x40
 8004184:	d007      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004186:	e01c      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004188:	4b63      	ldr	r3, [pc, #396]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800418a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418c:	4a62      	ldr	r2, [pc, #392]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800418e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004192:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004194:	e01c      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004196:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800419a:	3308      	adds	r3, #8
 800419c:	2100      	movs	r1, #0
 800419e:	4618      	mov	r0, r3
 80041a0:	f001 fc26 	bl	80059f0 <RCCEx_PLL2_Config>
 80041a4:	4603      	mov	r3, r0
 80041a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80041aa:	e011      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041b0:	3328      	adds	r3, #40	@ 0x28
 80041b2:	2100      	movs	r1, #0
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 fccd 	bl	8005b54 <RCCEx_PLL3_Config>
 80041ba:	4603      	mov	r3, r0
 80041bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80041c0:	e006      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80041c8:	e002      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80041ca:	bf00      	nop
 80041cc:	e000      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80041ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80041d8:	4b4f      	ldr	r3, [pc, #316]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041dc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80041e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e6:	4a4c      	ldr	r2, [pc, #304]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041e8:	430b      	orrs	r3, r1
 80041ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80041ec:	e003      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80041f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80041f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fe:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004202:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8004206:	2300      	movs	r3, #0
 8004208:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800420c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8004210:	460b      	mov	r3, r1
 8004212:	4313      	orrs	r3, r2
 8004214:	d053      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004216:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800421a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800421e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004222:	d035      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004224:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004228:	d82e      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800422a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800422e:	d031      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004230:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004234:	d828      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004236:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800423a:	d01a      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800423c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004240:	d822      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004246:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800424a:	d007      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800424c:	e01c      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800424e:	4b32      	ldr	r3, [pc, #200]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004252:	4a31      	ldr	r2, [pc, #196]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004258:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800425a:	e01c      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800425c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004260:	3308      	adds	r3, #8
 8004262:	2100      	movs	r1, #0
 8004264:	4618      	mov	r0, r3
 8004266:	f001 fbc3 	bl	80059f0 <RCCEx_PLL2_Config>
 800426a:	4603      	mov	r3, r0
 800426c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004270:	e011      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004272:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004276:	3328      	adds	r3, #40	@ 0x28
 8004278:	2100      	movs	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f001 fc6a 	bl	8005b54 <RCCEx_PLL3_Config>
 8004280:	4603      	mov	r3, r0
 8004282:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004286:	e006      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800428e:	e002      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004290:	bf00      	nop
 8004292:	e000      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004296:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10b      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800429e:	4b1e      	ldr	r3, [pc, #120]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80042a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80042ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042b0:	430b      	orrs	r3, r1
 80042b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80042b4:	e003      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80042ba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80042be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80042ca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80042ce:	2300      	movs	r3, #0
 80042d0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80042d4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80042d8:	460b      	mov	r3, r1
 80042da:	4313      	orrs	r3, r2
 80042dc:	d056      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80042de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80042e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042ea:	d038      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80042ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042f0:	d831      	bhi.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80042f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042f6:	d034      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80042f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042fc:	d82b      	bhi.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80042fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004302:	d01d      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004304:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004308:	d825      	bhi.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800430a:	2b00      	cmp	r3, #0
 800430c:	d006      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800430e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004312:	d00a      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004314:	e01f      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004316:	bf00      	nop
 8004318:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800431c:	4ba2      	ldr	r3, [pc, #648]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800431e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004320:	4aa1      	ldr	r2, [pc, #644]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004322:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004326:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004328:	e01c      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800432a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800432e:	3308      	adds	r3, #8
 8004330:	2100      	movs	r1, #0
 8004332:	4618      	mov	r0, r3
 8004334:	f001 fb5c 	bl	80059f0 <RCCEx_PLL2_Config>
 8004338:	4603      	mov	r3, r0
 800433a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800433e:	e011      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004340:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004344:	3328      	adds	r3, #40	@ 0x28
 8004346:	2100      	movs	r1, #0
 8004348:	4618      	mov	r0, r3
 800434a:	f001 fc03 	bl	8005b54 <RCCEx_PLL3_Config>
 800434e:	4603      	mov	r3, r0
 8004350:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004354:	e006      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800435c:	e002      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800435e:	bf00      	nop
 8004360:	e000      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004362:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004364:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10b      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800436c:	4b8e      	ldr	r3, [pc, #568]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800436e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004370:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004374:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004378:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800437c:	4a8a      	ldr	r2, [pc, #552]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800437e:	430b      	orrs	r3, r1
 8004380:	6593      	str	r3, [r2, #88]	@ 0x58
 8004382:	e003      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004384:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004388:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800438c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004394:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004398:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800439c:	2300      	movs	r3, #0
 800439e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80043a2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80043a6:	460b      	mov	r3, r1
 80043a8:	4313      	orrs	r3, r2
 80043aa:	d03a      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80043ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043b2:	2b30      	cmp	r3, #48	@ 0x30
 80043b4:	d01f      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80043b6:	2b30      	cmp	r3, #48	@ 0x30
 80043b8:	d819      	bhi.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d00c      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80043be:	2b20      	cmp	r3, #32
 80043c0:	d815      	bhi.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d019      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80043c6:	2b10      	cmp	r3, #16
 80043c8:	d111      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ca:	4b77      	ldr	r3, [pc, #476]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ce:	4a76      	ldr	r2, [pc, #472]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80043d6:	e011      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043dc:	3308      	adds	r3, #8
 80043de:	2102      	movs	r1, #2
 80043e0:	4618      	mov	r0, r3
 80043e2:	f001 fb05 	bl	80059f0 <RCCEx_PLL2_Config>
 80043e6:	4603      	mov	r3, r0
 80043e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80043ec:	e006      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80043f4:	e002      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80043f6:	bf00      	nop
 80043f8:	e000      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80043fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10a      	bne.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004404:	4b68      	ldr	r3, [pc, #416]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004408:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800440c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004412:	4a65      	ldr	r2, [pc, #404]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004414:	430b      	orrs	r3, r1
 8004416:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004418:	e003      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800441e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004422:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800442e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004432:	2300      	movs	r3, #0
 8004434:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004438:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800443c:	460b      	mov	r3, r1
 800443e:	4313      	orrs	r3, r2
 8004440:	d051      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004442:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004446:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004448:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800444c:	d035      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800444e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004452:	d82e      	bhi.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004454:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004458:	d031      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800445a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800445e:	d828      	bhi.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004460:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004464:	d01a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004466:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800446a:	d822      	bhi.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004470:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004474:	d007      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004476:	e01c      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004478:	4b4b      	ldr	r3, [pc, #300]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800447a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447c:	4a4a      	ldr	r2, [pc, #296]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800447e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004482:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004484:	e01c      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004486:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800448a:	3308      	adds	r3, #8
 800448c:	2100      	movs	r1, #0
 800448e:	4618      	mov	r0, r3
 8004490:	f001 faae 	bl	80059f0 <RCCEx_PLL2_Config>
 8004494:	4603      	mov	r3, r0
 8004496:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800449a:	e011      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800449c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044a0:	3328      	adds	r3, #40	@ 0x28
 80044a2:	2100      	movs	r1, #0
 80044a4:	4618      	mov	r0, r3
 80044a6:	f001 fb55 	bl	8005b54 <RCCEx_PLL3_Config>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80044b0:	e006      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80044b8:	e002      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80044ba:	bf00      	nop
 80044bc:	e000      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80044be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10a      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80044c8:	4b37      	ldr	r3, [pc, #220]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80044d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044d6:	4a34      	ldr	r2, [pc, #208]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044d8:	430b      	orrs	r3, r1
 80044da:	6513      	str	r3, [r2, #80]	@ 0x50
 80044dc:	e003      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80044e2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80044e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80044f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80044f6:	2300      	movs	r3, #0
 80044f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80044fc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004500:	460b      	mov	r3, r1
 8004502:	4313      	orrs	r3, r2
 8004504:	d056      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004506:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800450a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800450c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004510:	d033      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004512:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004516:	d82c      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004518:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800451c:	d02f      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800451e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004522:	d826      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004524:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004528:	d02b      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800452a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800452e:	d820      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004530:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004534:	d012      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004536:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800453a:	d81a      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800453c:	2b00      	cmp	r3, #0
 800453e:	d022      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004544:	d115      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004546:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800454a:	3308      	adds	r3, #8
 800454c:	2101      	movs	r1, #1
 800454e:	4618      	mov	r0, r3
 8004550:	f001 fa4e 	bl	80059f0 <RCCEx_PLL2_Config>
 8004554:	4603      	mov	r3, r0
 8004556:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800455a:	e015      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800455c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004560:	3328      	adds	r3, #40	@ 0x28
 8004562:	2101      	movs	r1, #1
 8004564:	4618      	mov	r0, r3
 8004566:	f001 faf5 	bl	8005b54 <RCCEx_PLL3_Config>
 800456a:	4603      	mov	r3, r0
 800456c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004570:	e00a      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004578:	e006      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800457a:	bf00      	nop
 800457c:	e004      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800457e:	bf00      	nop
 8004580:	e002      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004582:	bf00      	nop
 8004584:	e000      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004588:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10d      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004590:	4b05      	ldr	r3, [pc, #20]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004594:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004598:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800459c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800459e:	4a02      	ldr	r2, [pc, #8]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045a0:	430b      	orrs	r3, r1
 80045a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80045a4:	e006      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80045a6:	bf00      	nop
 80045a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80045b0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80045b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045bc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80045c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045c4:	2300      	movs	r3, #0
 80045c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80045ca:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80045ce:	460b      	mov	r3, r1
 80045d0:	4313      	orrs	r3, r2
 80045d2:	d055      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80045d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80045dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045e0:	d033      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80045e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045e6:	d82c      	bhi.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80045e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ec:	d02f      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80045ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f2:	d826      	bhi.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80045f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045f8:	d02b      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80045fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045fe:	d820      	bhi.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004600:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004604:	d012      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004606:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800460a:	d81a      	bhi.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800460c:	2b00      	cmp	r3, #0
 800460e:	d022      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004610:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004614:	d115      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004616:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800461a:	3308      	adds	r3, #8
 800461c:	2101      	movs	r1, #1
 800461e:	4618      	mov	r0, r3
 8004620:	f001 f9e6 	bl	80059f0 <RCCEx_PLL2_Config>
 8004624:	4603      	mov	r3, r0
 8004626:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800462a:	e015      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800462c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004630:	3328      	adds	r3, #40	@ 0x28
 8004632:	2101      	movs	r1, #1
 8004634:	4618      	mov	r0, r3
 8004636:	f001 fa8d 	bl	8005b54 <RCCEx_PLL3_Config>
 800463a:	4603      	mov	r3, r0
 800463c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004640:	e00a      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004648:	e006      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800464a:	bf00      	nop
 800464c:	e004      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800464e:	bf00      	nop
 8004650:	e002      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004652:	bf00      	nop
 8004654:	e000      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004658:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10b      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004660:	4bb6      	ldr	r3, [pc, #728]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004664:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004668:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800466c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004670:	4ab2      	ldr	r2, [pc, #712]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004672:	430b      	orrs	r3, r1
 8004674:	6593      	str	r3, [r2, #88]	@ 0x58
 8004676:	e003      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004678:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800467c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004680:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004688:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800468c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004690:	2300      	movs	r3, #0
 8004692:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004696:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800469a:	460b      	mov	r3, r1
 800469c:	4313      	orrs	r3, r2
 800469e:	d02a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80046a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d011      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80046aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046ae:	d10a      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046b4:	3308      	adds	r3, #8
 80046b6:	2101      	movs	r1, #1
 80046b8:	4618      	mov	r0, r3
 80046ba:	f001 f999 	bl	80059f0 <RCCEx_PLL2_Config>
 80046be:	4603      	mov	r3, r0
 80046c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80046c4:	e004      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80046cc:	e000      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80046ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10a      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80046d8:	4b98      	ldr	r3, [pc, #608]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80046da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046dc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80046e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046e6:	4a95      	ldr	r2, [pc, #596]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80046e8:	430b      	orrs	r3, r1
 80046ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046ec:	e003      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fe:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004702:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004706:	2300      	movs	r3, #0
 8004708:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800470c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004710:	460b      	mov	r3, r1
 8004712:	4313      	orrs	r3, r2
 8004714:	d037      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004716:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800471a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800471c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004720:	d00e      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8004722:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004726:	d816      	bhi.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8004728:	2b00      	cmp	r3, #0
 800472a:	d018      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 800472c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004730:	d111      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004732:	4b82      	ldr	r3, [pc, #520]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004736:	4a81      	ldr	r2, [pc, #516]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800473c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800473e:	e00f      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004740:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004744:	3308      	adds	r3, #8
 8004746:	2101      	movs	r1, #1
 8004748:	4618      	mov	r0, r3
 800474a:	f001 f951 	bl	80059f0 <RCCEx_PLL2_Config>
 800474e:	4603      	mov	r3, r0
 8004750:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004754:	e004      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800475c:	e000      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 800475e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004760:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10a      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004768:	4b74      	ldr	r3, [pc, #464]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800476a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800476c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004770:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004776:	4a71      	ldr	r2, [pc, #452]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004778:	430b      	orrs	r3, r1
 800477a:	6513      	str	r3, [r2, #80]	@ 0x50
 800477c:	e003      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004782:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004786:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004792:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004796:	2300      	movs	r3, #0
 8004798:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800479c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4313      	orrs	r3, r2
 80047a4:	d03a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80047a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d81d      	bhi.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80047b0:	a201      	add	r2, pc, #4	@ (adr r2, 80047b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80047b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b6:	bf00      	nop
 80047b8:	080047f5 	.word	0x080047f5
 80047bc:	080047c9 	.word	0x080047c9
 80047c0:	080047d7 	.word	0x080047d7
 80047c4:	080047f5 	.word	0x080047f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047c8:	4b5c      	ldr	r3, [pc, #368]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80047ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047cc:	4a5b      	ldr	r2, [pc, #364]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80047ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80047d4:	e00f      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047da:	3308      	adds	r3, #8
 80047dc:	2102      	movs	r1, #2
 80047de:	4618      	mov	r0, r3
 80047e0:	f001 f906 	bl	80059f0 <RCCEx_PLL2_Config>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80047ea:	e004      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80047f2:	e000      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80047f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80047fe:	4b4f      	ldr	r3, [pc, #316]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004802:	f023 0103 	bic.w	r1, r3, #3
 8004806:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800480a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800480c:	4a4b      	ldr	r2, [pc, #300]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800480e:	430b      	orrs	r3, r1
 8004810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004812:	e003      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004814:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004818:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800481c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004824:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004828:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800482c:	2300      	movs	r3, #0
 800482e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004832:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004836:	460b      	mov	r3, r1
 8004838:	4313      	orrs	r3, r2
 800483a:	f000 80a0 	beq.w	800497e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800483e:	4b40      	ldr	r3, [pc, #256]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a3f      	ldr	r2, [pc, #252]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004848:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800484a:	f7fd ffb7 	bl	80027bc <HAL_GetTick>
 800484e:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004852:	e00b      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004854:	f7fd ffb2 	bl	80027bc <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b64      	cmp	r3, #100	@ 0x64
 8004862:	d903      	bls.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800486a:	e005      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800486c:	4b34      	ldr	r3, [pc, #208]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0ed      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8004878:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800487c:	2b00      	cmp	r3, #0
 800487e:	d17a      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004880:	4b2e      	ldr	r3, [pc, #184]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004882:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004884:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004888:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800488c:	4053      	eors	r3, r2
 800488e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004892:	2b00      	cmp	r3, #0
 8004894:	d015      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004896:	4b29      	ldr	r3, [pc, #164]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800489e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048a2:	4b26      	ldr	r3, [pc, #152]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80048a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a6:	4a25      	ldr	r2, [pc, #148]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80048a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048ac:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048ae:	4b23      	ldr	r3, [pc, #140]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80048b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b2:	4a22      	ldr	r2, [pc, #136]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80048b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048b8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80048ba:	4a20      	ldr	r2, [pc, #128]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80048bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80048c0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80048c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80048ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048ce:	d118      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d0:	f7fd ff74 	bl	80027bc <HAL_GetTick>
 80048d4:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048d8:	e00d      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048da:	f7fd ff6f 	bl	80027bc <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80048e4:	1ad2      	subs	r2, r2, r3
 80048e6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d903      	bls.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 80048f4:	e005      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048f6:	4b11      	ldr	r3, [pc, #68]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80048f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0eb      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8004902:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004906:	2b00      	cmp	r3, #0
 8004908:	d130      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800490a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800490e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004912:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004916:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800491a:	d115      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x968>
 800491c:	4b07      	ldr	r3, [pc, #28]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004924:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004928:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800492c:	091a      	lsrs	r2, r3, #4
 800492e:	4b05      	ldr	r3, [pc, #20]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004930:	4013      	ands	r3, r2
 8004932:	4a02      	ldr	r2, [pc, #8]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004934:	430b      	orrs	r3, r1
 8004936:	6113      	str	r3, [r2, #16]
 8004938:	e00c      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800493a:	bf00      	nop
 800493c:	58024400 	.word	0x58024400
 8004940:	58024800 	.word	0x58024800
 8004944:	00ffffcf 	.word	0x00ffffcf
 8004948:	4bd4      	ldr	r3, [pc, #848]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	4ad3      	ldr	r2, [pc, #844]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800494e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004952:	6113      	str	r3, [r2, #16]
 8004954:	4bd1      	ldr	r3, [pc, #836]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004956:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004958:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800495c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004964:	4acd      	ldr	r2, [pc, #820]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004966:	430b      	orrs	r3, r1
 8004968:	6713      	str	r3, [r2, #112]	@ 0x70
 800496a:	e008      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800496c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004970:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8004974:	e003      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004976:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800497a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800497e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004986:	f002 0301 	and.w	r3, r2, #1
 800498a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800498e:	2300      	movs	r3, #0
 8004990:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004994:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004998:	460b      	mov	r3, r1
 800499a:	4313      	orrs	r3, r2
 800499c:	f000 808b 	beq.w	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80049a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049a8:	2b28      	cmp	r3, #40	@ 0x28
 80049aa:	d86b      	bhi.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80049ac:	a201      	add	r2, pc, #4	@ (adr r2, 80049b4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80049ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b2:	bf00      	nop
 80049b4:	08004a8d 	.word	0x08004a8d
 80049b8:	08004a85 	.word	0x08004a85
 80049bc:	08004a85 	.word	0x08004a85
 80049c0:	08004a85 	.word	0x08004a85
 80049c4:	08004a85 	.word	0x08004a85
 80049c8:	08004a85 	.word	0x08004a85
 80049cc:	08004a85 	.word	0x08004a85
 80049d0:	08004a85 	.word	0x08004a85
 80049d4:	08004a59 	.word	0x08004a59
 80049d8:	08004a85 	.word	0x08004a85
 80049dc:	08004a85 	.word	0x08004a85
 80049e0:	08004a85 	.word	0x08004a85
 80049e4:	08004a85 	.word	0x08004a85
 80049e8:	08004a85 	.word	0x08004a85
 80049ec:	08004a85 	.word	0x08004a85
 80049f0:	08004a85 	.word	0x08004a85
 80049f4:	08004a6f 	.word	0x08004a6f
 80049f8:	08004a85 	.word	0x08004a85
 80049fc:	08004a85 	.word	0x08004a85
 8004a00:	08004a85 	.word	0x08004a85
 8004a04:	08004a85 	.word	0x08004a85
 8004a08:	08004a85 	.word	0x08004a85
 8004a0c:	08004a85 	.word	0x08004a85
 8004a10:	08004a85 	.word	0x08004a85
 8004a14:	08004a8d 	.word	0x08004a8d
 8004a18:	08004a85 	.word	0x08004a85
 8004a1c:	08004a85 	.word	0x08004a85
 8004a20:	08004a85 	.word	0x08004a85
 8004a24:	08004a85 	.word	0x08004a85
 8004a28:	08004a85 	.word	0x08004a85
 8004a2c:	08004a85 	.word	0x08004a85
 8004a30:	08004a85 	.word	0x08004a85
 8004a34:	08004a8d 	.word	0x08004a8d
 8004a38:	08004a85 	.word	0x08004a85
 8004a3c:	08004a85 	.word	0x08004a85
 8004a40:	08004a85 	.word	0x08004a85
 8004a44:	08004a85 	.word	0x08004a85
 8004a48:	08004a85 	.word	0x08004a85
 8004a4c:	08004a85 	.word	0x08004a85
 8004a50:	08004a85 	.word	0x08004a85
 8004a54:	08004a8d 	.word	0x08004a8d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	2101      	movs	r1, #1
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 ffc5 	bl	80059f0 <RCCEx_PLL2_Config>
 8004a66:	4603      	mov	r3, r0
 8004a68:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a6c:	e00f      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a72:	3328      	adds	r3, #40	@ 0x28
 8004a74:	2101      	movs	r1, #1
 8004a76:	4618      	mov	r0, r3
 8004a78:	f001 f86c 	bl	8005b54 <RCCEx_PLL3_Config>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a82:	e004      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004a8a:	e000      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8004a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a8e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10b      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004a96:	4b81      	ldr	r3, [pc, #516]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a9a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004a9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004aa6:	4a7d      	ldr	r2, [pc, #500]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	6553      	str	r3, [r2, #84]	@ 0x54
 8004aac:	e003      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004ab2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004ab6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abe:	f002 0302 	and.w	r3, r2, #2
 8004ac2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004acc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	d042      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004ad6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ada:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004adc:	2b05      	cmp	r3, #5
 8004ade:	d825      	bhi.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8004ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8004ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae6:	bf00      	nop
 8004ae8:	08004b35 	.word	0x08004b35
 8004aec:	08004b01 	.word	0x08004b01
 8004af0:	08004b17 	.word	0x08004b17
 8004af4:	08004b35 	.word	0x08004b35
 8004af8:	08004b35 	.word	0x08004b35
 8004afc:	08004b35 	.word	0x08004b35
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b04:	3308      	adds	r3, #8
 8004b06:	2101      	movs	r1, #1
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 ff71 	bl	80059f0 <RCCEx_PLL2_Config>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b14:	e00f      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b1a:	3328      	adds	r3, #40	@ 0x28
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f001 f818 	bl	8005b54 <RCCEx_PLL3_Config>
 8004b24:	4603      	mov	r3, r0
 8004b26:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b2a:	e004      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004b32:	e000      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8004b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10a      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004b3e:	4b57      	ldr	r3, [pc, #348]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b42:	f023 0107 	bic.w	r1, r3, #7
 8004b46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b4c:	4a53      	ldr	r2, [pc, #332]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b52:	e003      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b54:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b58:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b64:	f002 0304 	and.w	r3, r2, #4
 8004b68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b72:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004b76:	460b      	mov	r3, r1
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	d044      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004b7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b84:	2b05      	cmp	r3, #5
 8004b86:	d825      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8004b88:	a201      	add	r2, pc, #4	@ (adr r2, 8004b90 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004bdd 	.word	0x08004bdd
 8004b94:	08004ba9 	.word	0x08004ba9
 8004b98:	08004bbf 	.word	0x08004bbf
 8004b9c:	08004bdd 	.word	0x08004bdd
 8004ba0:	08004bdd 	.word	0x08004bdd
 8004ba4:	08004bdd 	.word	0x08004bdd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ba8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bac:	3308      	adds	r3, #8
 8004bae:	2101      	movs	r1, #1
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 ff1d 	bl	80059f0 <RCCEx_PLL2_Config>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004bbc:	e00f      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bc2:	3328      	adds	r3, #40	@ 0x28
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 ffc4 	bl	8005b54 <RCCEx_PLL3_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004bd2:	e004      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004bda:	e000      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8004bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bde:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10b      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004be6:	4b2d      	ldr	r3, [pc, #180]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bea:	f023 0107 	bic.w	r1, r3, #7
 8004bee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bf6:	4a29      	ldr	r2, [pc, #164]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bfc:	e003      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c02:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	f002 0320 	and.w	r3, r2, #32
 8004c12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c16:	2300      	movs	r3, #0
 8004c18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c20:	460b      	mov	r3, r1
 8004c22:	4313      	orrs	r3, r2
 8004c24:	d057      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004c26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c32:	d035      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8004c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c38:	d82c      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c3e:	d031      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8004c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c44:	d826      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004c46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c4a:	d02d      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8004c4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c50:	d820      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004c52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c56:	d012      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8004c58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c5c:	d81a      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d024      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8004c62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c66:	d115      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	2100      	movs	r1, #0
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 febd 	bl	80059f0 <RCCEx_PLL2_Config>
 8004c76:	4603      	mov	r3, r0
 8004c78:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c7c:	e017      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c82:	3328      	adds	r3, #40	@ 0x28
 8004c84:	2102      	movs	r1, #2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 ff64 	bl	8005b54 <RCCEx_PLL3_Config>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c92:	e00c      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004c9a:	e008      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8004c9c:	58024400 	.word	0x58024400
        break;
 8004ca0:	bf00      	nop
 8004ca2:	e004      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004ca4:	bf00      	nop
 8004ca6:	e002      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004ca8:	bf00      	nop
 8004caa:	e000      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004cac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10b      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cb6:	4bc2      	ldr	r3, [pc, #776]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004cbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cc6:	4abe      	ldr	r2, [pc, #760]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cc8:	430b      	orrs	r3, r1
 8004cca:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ccc:	e003      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004cd2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004cd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cde:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004cec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	d055      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004cf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004cfe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004d02:	d033      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8004d04:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004d08:	d82c      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004d0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d0e:	d02f      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8004d10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d14:	d826      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004d16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d1a:	d02b      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8004d1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d20:	d820      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004d22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d26:	d012      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8004d28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d2c:	d81a      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d022      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8004d32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d36:	d115      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	2100      	movs	r1, #0
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fe55 	bl	80059f0 <RCCEx_PLL2_Config>
 8004d46:	4603      	mov	r3, r0
 8004d48:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d4c:	e015      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d52:	3328      	adds	r3, #40	@ 0x28
 8004d54:	2102      	movs	r1, #2
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fefc 	bl	8005b54 <RCCEx_PLL3_Config>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d62:	e00a      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004d6a:	e006      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004d6c:	bf00      	nop
 8004d6e:	e004      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004d70:	bf00      	nop
 8004d72:	e002      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004d74:	bf00      	nop
 8004d76:	e000      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10b      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d82:	4b8f      	ldr	r3, [pc, #572]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d86:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004d8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004d92:	4a8b      	ldr	r2, [pc, #556]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d94:	430b      	orrs	r3, r1
 8004d96:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d98:	e003      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d9e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004da2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004daa:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004dae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004db2:	2300      	movs	r3, #0
 8004db4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004db8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	d055      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004dc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004dc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004dca:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004dce:	d033      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004dd0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004dd4:	d82c      	bhi.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004dd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dda:	d02f      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004ddc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004de0:	d826      	bhi.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004de2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004de6:	d02b      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004de8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004dec:	d820      	bhi.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004dee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004df2:	d012      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8004df4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004df8:	d81a      	bhi.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d022      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8004dfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e02:	d115      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e08:	3308      	adds	r3, #8
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fdef 	bl	80059f0 <RCCEx_PLL2_Config>
 8004e12:	4603      	mov	r3, r0
 8004e14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e18:	e015      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e1e:	3328      	adds	r3, #40	@ 0x28
 8004e20:	2102      	movs	r1, #2
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fe96 	bl	8005b54 <RCCEx_PLL3_Config>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e2e:	e00a      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004e36:	e006      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004e38:	bf00      	nop
 8004e3a:	e004      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004e3c:	bf00      	nop
 8004e3e:	e002      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004e40:	bf00      	nop
 8004e42:	e000      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004e44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10b      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004e4e:	4b5c      	ldr	r3, [pc, #368]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e52:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004e56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e5e:	4a58      	ldr	r2, [pc, #352]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e60:	430b      	orrs	r3, r1
 8004e62:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e64:	e003      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e66:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e6a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004e6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e76:	f002 0308 	and.w	r3, r2, #8
 8004e7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e7e:	2300      	movs	r3, #0
 8004e80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e84:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004e88:	460b      	mov	r3, r1
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	d01e      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004e8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e9a:	d10c      	bne.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ea0:	3328      	adds	r3, #40	@ 0x28
 8004ea2:	2102      	movs	r1, #2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 fe55 	bl	8005b54 <RCCEx_PLL3_Config>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004eb6:	4b42      	ldr	r3, [pc, #264]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ebe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec6:	4a3e      	ldr	r2, [pc, #248]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ecc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed4:	f002 0310 	and.w	r3, r2, #16
 8004ed8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004edc:	2300      	movs	r3, #0
 8004ede:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004ee2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	d01e      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004eec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ef0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ef4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ef8:	d10c      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004efa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004efe:	3328      	adds	r3, #40	@ 0x28
 8004f00:	2102      	movs	r1, #2
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fe26 	bl	8005b54 <RCCEx_PLL3_Config>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f14:	4b2a      	ldr	r3, [pc, #168]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f18:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f24:	4a26      	ldr	r2, [pc, #152]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f26:	430b      	orrs	r3, r1
 8004f28:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f32:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004f36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f40:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004f44:	460b      	mov	r3, r1
 8004f46:	4313      	orrs	r3, r2
 8004f48:	d040      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004f4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004f52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f56:	d022      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8004f58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f5c:	d81b      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8004f62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f66:	d00b      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8004f68:	e015      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f6e:	3308      	adds	r3, #8
 8004f70:	2100      	movs	r1, #0
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 fd3c 	bl	80059f0 <RCCEx_PLL2_Config>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f7e:	e00f      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f84:	3328      	adds	r3, #40	@ 0x28
 8004f86:	2102      	movs	r1, #2
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 fde3 	bl	8005b54 <RCCEx_PLL3_Config>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f94:	e004      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004f9c:	e000      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8004f9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fa0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10d      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fa8:	4b05      	ldr	r3, [pc, #20]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fac:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004fb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004fb8:	4a01      	ldr	r2, [pc, #4]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004fba:	430b      	orrs	r3, r1
 8004fbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fbe:	e005      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004fc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004fc8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004fd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fda:	2300      	movs	r3, #0
 8004fdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004fde:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	d03b      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004fe8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ff0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ff4:	d01f      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8004ff6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ffa:	d818      	bhi.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8004ffc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005000:	d003      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8005002:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005006:	d007      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8005008:	e011      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800500a:	4b64      	ldr	r3, [pc, #400]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800500c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500e:	4a63      	ldr	r2, [pc, #396]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005014:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005016:	e00f      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005018:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800501c:	3328      	adds	r3, #40	@ 0x28
 800501e:	2101      	movs	r1, #1
 8005020:	4618      	mov	r0, r3
 8005022:	f000 fd97 	bl	8005b54 <RCCEx_PLL3_Config>
 8005026:	4603      	mov	r3, r0
 8005028:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 800502c:	e004      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005034:	e000      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8005036:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005038:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10b      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005040:	4b56      	ldr	r3, [pc, #344]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005044:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005048:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800504c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005050:	4a52      	ldr	r2, [pc, #328]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005052:	430b      	orrs	r3, r1
 8005054:	6553      	str	r3, [r2, #84]	@ 0x54
 8005056:	e003      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005058:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800505c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005060:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005068:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800506c:	673b      	str	r3, [r7, #112]	@ 0x70
 800506e:	2300      	movs	r3, #0
 8005070:	677b      	str	r3, [r7, #116]	@ 0x74
 8005072:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005076:	460b      	mov	r3, r1
 8005078:	4313      	orrs	r3, r2
 800507a:	d031      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800507c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8005086:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800508a:	d007      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800508c:	e011      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800508e:	4b43      	ldr	r3, [pc, #268]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005092:	4a42      	ldr	r2, [pc, #264]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005098:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800509a:	e00e      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800509c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050a0:	3308      	adds	r3, #8
 80050a2:	2102      	movs	r1, #2
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fca3 	bl	80059f0 <RCCEx_PLL2_Config>
 80050aa:	4603      	mov	r3, r0
 80050ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80050b0:	e003      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80050b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10a      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80050c2:	4b36      	ldr	r3, [pc, #216]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80050c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80050ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d0:	4a32      	ldr	r2, [pc, #200]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80050d2:	430b      	orrs	r3, r1
 80050d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050d6:	e003      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80050dc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80050e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80050ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050ee:	2300      	movs	r3, #0
 80050f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050f2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80050f6:	460b      	mov	r3, r1
 80050f8:	4313      	orrs	r3, r2
 80050fa:	d00c      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80050fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005100:	3328      	adds	r3, #40	@ 0x28
 8005102:	2102      	movs	r1, #2
 8005104:	4618      	mov	r0, r3
 8005106:	f000 fd25 	bl	8005b54 <RCCEx_PLL3_Config>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005116:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800511a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005122:	663b      	str	r3, [r7, #96]	@ 0x60
 8005124:	2300      	movs	r3, #0
 8005126:	667b      	str	r3, [r7, #100]	@ 0x64
 8005128:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800512c:	460b      	mov	r3, r1
 800512e:	4313      	orrs	r3, r2
 8005130:	d03a      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005132:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005136:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800513a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800513e:	d018      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8005140:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005144:	d811      	bhi.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8005146:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800514a:	d014      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 800514c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005150:	d80b      	bhi.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8005152:	2b00      	cmp	r3, #0
 8005154:	d011      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8005156:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800515a:	d106      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800515c:	4b0f      	ldr	r3, [pc, #60]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800515e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005160:	4a0e      	ldr	r2, [pc, #56]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005162:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005166:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005168:	e008      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005170:	e004      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005172:	bf00      	nop
 8005174:	e002      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005176:	bf00      	nop
 8005178:	e000      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800517a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800517c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10d      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005184:	4b05      	ldr	r3, [pc, #20]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005188:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800518c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005190:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005194:	4a01      	ldr	r2, [pc, #4]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005196:	430b      	orrs	r3, r1
 8005198:	6553      	str	r3, [r2, #84]	@ 0x54
 800519a:	e005      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 800519c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80051a4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80051b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051b6:	2300      	movs	r3, #0
 80051b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80051be:	460b      	mov	r3, r1
 80051c0:	4313      	orrs	r3, r2
 80051c2:	d009      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051c4:	4baa      	ldr	r3, [pc, #680]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80051c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80051cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051d2:	4aa7      	ldr	r2, [pc, #668]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80051d4:	430b      	orrs	r3, r1
 80051d6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80051d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80051e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80051e6:	2300      	movs	r3, #0
 80051e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80051ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80051ee:	460b      	mov	r3, r1
 80051f0:	4313      	orrs	r3, r2
 80051f2:	d00a      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80051f4:	4b9e      	ldr	r3, [pc, #632]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80051fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005200:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005204:	4a9a      	ldr	r2, [pc, #616]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005206:	430b      	orrs	r3, r1
 8005208:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800520a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800520e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005212:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005216:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005218:	2300      	movs	r3, #0
 800521a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800521c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005220:	460b      	mov	r3, r1
 8005222:	4313      	orrs	r3, r2
 8005224:	d009      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005226:	4b92      	ldr	r3, [pc, #584]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800522a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800522e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005234:	4a8e      	ldr	r2, [pc, #568]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005236:	430b      	orrs	r3, r1
 8005238:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800523a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005242:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005246:	643b      	str	r3, [r7, #64]	@ 0x40
 8005248:	2300      	movs	r3, #0
 800524a:	647b      	str	r3, [r7, #68]	@ 0x44
 800524c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005250:	460b      	mov	r3, r1
 8005252:	4313      	orrs	r3, r2
 8005254:	d00e      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005256:	4b86      	ldr	r3, [pc, #536]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	4a85      	ldr	r2, [pc, #532]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800525c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005260:	6113      	str	r3, [r2, #16]
 8005262:	4b83      	ldr	r3, [pc, #524]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005264:	6919      	ldr	r1, [r3, #16]
 8005266:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800526a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800526e:	4a80      	ldr	r2, [pc, #512]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005270:	430b      	orrs	r3, r1
 8005272:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005274:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005280:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005282:	2300      	movs	r3, #0
 8005284:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005286:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800528a:	460b      	mov	r3, r1
 800528c:	4313      	orrs	r3, r2
 800528e:	d009      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005290:	4b77      	ldr	r3, [pc, #476]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005294:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005298:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800529c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800529e:	4a74      	ldr	r2, [pc, #464]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80052a0:	430b      	orrs	r3, r1
 80052a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ac:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80052b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80052b2:	2300      	movs	r3, #0
 80052b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80052b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80052ba:	460b      	mov	r3, r1
 80052bc:	4313      	orrs	r3, r2
 80052be:	d00a      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052c0:	4b6b      	ldr	r3, [pc, #428]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80052c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80052c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d0:	4a67      	ldr	r2, [pc, #412]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80052d2:	430b      	orrs	r3, r1
 80052d4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80052d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052de:	2100      	movs	r1, #0
 80052e0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80052ec:	460b      	mov	r3, r1
 80052ee:	4313      	orrs	r3, r2
 80052f0:	d011      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052f6:	3308      	adds	r3, #8
 80052f8:	2100      	movs	r1, #0
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fb78 	bl	80059f0 <RCCEx_PLL2_Config>
 8005300:	4603      	mov	r3, r0
 8005302:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005306:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005312:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005316:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800531a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531e:	2100      	movs	r1, #0
 8005320:	6239      	str	r1, [r7, #32]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	627b      	str	r3, [r7, #36]	@ 0x24
 8005328:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800532c:	460b      	mov	r3, r1
 800532e:	4313      	orrs	r3, r2
 8005330:	d011      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005332:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005336:	3308      	adds	r3, #8
 8005338:	2101      	movs	r1, #1
 800533a:	4618      	mov	r0, r3
 800533c:	f000 fb58 	bl	80059f0 <RCCEx_PLL2_Config>
 8005340:	4603      	mov	r3, r0
 8005342:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005346:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005352:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005356:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800535a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535e:	2100      	movs	r1, #0
 8005360:	61b9      	str	r1, [r7, #24]
 8005362:	f003 0304 	and.w	r3, r3, #4
 8005366:	61fb      	str	r3, [r7, #28]
 8005368:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800536c:	460b      	mov	r3, r1
 800536e:	4313      	orrs	r3, r2
 8005370:	d011      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005372:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005376:	3308      	adds	r3, #8
 8005378:	2102      	movs	r1, #2
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fb38 	bl	80059f0 <RCCEx_PLL2_Config>
 8005380:	4603      	mov	r3, r0
 8005382:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005386:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005392:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005396:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	2100      	movs	r1, #0
 80053a0:	6139      	str	r1, [r7, #16]
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80053ac:	460b      	mov	r3, r1
 80053ae:	4313      	orrs	r3, r2
 80053b0:	d011      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053b6:	3328      	adds	r3, #40	@ 0x28
 80053b8:	2100      	movs	r1, #0
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 fbca 	bl	8005b54 <RCCEx_PLL3_Config>
 80053c0:	4603      	mov	r3, r0
 80053c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80053c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80053d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053de:	2100      	movs	r1, #0
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	f003 0310 	and.w	r3, r3, #16
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80053ec:	460b      	mov	r3, r1
 80053ee:	4313      	orrs	r3, r2
 80053f0:	d011      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053f6:	3328      	adds	r3, #40	@ 0x28
 80053f8:	2101      	movs	r1, #1
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fbaa 	bl	8005b54 <RCCEx_PLL3_Config>
 8005400:	4603      	mov	r3, r0
 8005402:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005406:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800540e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005412:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005416:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541e:	2100      	movs	r1, #0
 8005420:	6039      	str	r1, [r7, #0]
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	607b      	str	r3, [r7, #4]
 8005428:	e9d7 1200 	ldrd	r1, r2, [r7]
 800542c:	460b      	mov	r3, r1
 800542e:	4313      	orrs	r3, r2
 8005430:	d011      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005432:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005436:	3328      	adds	r3, #40	@ 0x28
 8005438:	2102      	movs	r1, #2
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fb8a 	bl	8005b54 <RCCEx_PLL3_Config>
 8005440:	4603      	mov	r3, r0
 8005442:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005446:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005452:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8005456:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	e000      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
}
 8005464:	4618      	mov	r0, r3
 8005466:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800546a:	46bd      	mov	sp, r7
 800546c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005470:	58024400 	.word	0x58024400

08005474 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005478:	f7fe fd14 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 800547c:	4602      	mov	r2, r0
 800547e:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	091b      	lsrs	r3, r3, #4
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	4904      	ldr	r1, [pc, #16]	@ (800549c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800548a:	5ccb      	ldrb	r3, [r1, r3]
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005494:	4618      	mov	r0, r3
 8005496:	bd80      	pop	{r7, pc}
 8005498:	58024400 	.word	0x58024400
 800549c:	0800a990 	.word	0x0800a990

080054a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b089      	sub	sp, #36	@ 0x24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054a8:	4ba1      	ldr	r3, [pc, #644]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80054b2:	4b9f      	ldr	r3, [pc, #636]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b6:	0b1b      	lsrs	r3, r3, #12
 80054b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80054be:	4b9c      	ldr	r3, [pc, #624]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c2:	091b      	lsrs	r3, r3, #4
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80054ca:	4b99      	ldr	r3, [pc, #612]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ce:	08db      	lsrs	r3, r3, #3
 80054d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	fb02 f303 	mul.w	r3, r2, r3
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 8111 	beq.w	8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	f000 8083 	beq.w	80055fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	f200 80a1 	bhi.w	8005640 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d056      	beq.n	80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800550a:	e099      	b.n	8005640 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800550c:	4b88      	ldr	r3, [pc, #544]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0320 	and.w	r3, r3, #32
 8005514:	2b00      	cmp	r3, #0
 8005516:	d02d      	beq.n	8005574 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005518:	4b85      	ldr	r3, [pc, #532]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	08db      	lsrs	r3, r3, #3
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	4a84      	ldr	r2, [pc, #528]	@ (8005734 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005524:	fa22 f303 	lsr.w	r3, r2, r3
 8005528:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	ee07 3a90 	vmov	s15, r3
 8005530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800553e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005542:	4b7b      	ldr	r3, [pc, #492]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800554a:	ee07 3a90 	vmov	s15, r3
 800554e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005552:	ed97 6a03 	vldr	s12, [r7, #12]
 8005556:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800555a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800555e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005562:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800556a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800556e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005572:	e087      	b.n	8005684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	ee07 3a90 	vmov	s15, r3
 800557a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800557e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800573c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005586:	4b6a      	ldr	r3, [pc, #424]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800558e:	ee07 3a90 	vmov	s15, r3
 8005592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005596:	ed97 6a03 	vldr	s12, [r7, #12]
 800559a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800559e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055b6:	e065      	b.n	8005684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	ee07 3a90 	vmov	s15, r3
 80055be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80055c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ca:	4b59      	ldr	r3, [pc, #356]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055da:	ed97 6a03 	vldr	s12, [r7, #12]
 80055de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055fa:	e043      	b.n	8005684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005606:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005744 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800560a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800560e:	4b48      	ldr	r3, [pc, #288]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005616:	ee07 3a90 	vmov	s15, r3
 800561a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800561e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005622:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800562a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800562e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800563e:	e021      	b.n	8005684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800564e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005652:	4b37      	ldr	r3, [pc, #220]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005662:	ed97 6a03 	vldr	s12, [r7, #12]
 8005666:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800566a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800566e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800567a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800567e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005682:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005684:	4b2a      	ldr	r3, [pc, #168]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005688:	0a5b      	lsrs	r3, r3, #9
 800568a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800568e:	ee07 3a90 	vmov	s15, r3
 8005692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005696:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800569a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800569e:	edd7 6a07 	vldr	s13, [r7, #28]
 80056a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056aa:	ee17 2a90 	vmov	r2, s15
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80056b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b6:	0c1b      	lsrs	r3, r3, #16
 80056b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056bc:	ee07 3a90 	vmov	s15, r3
 80056c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80056d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056d8:	ee17 2a90 	vmov	r2, s15
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80056e0:	4b13      	ldr	r3, [pc, #76]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e4:	0e1b      	lsrs	r3, r3, #24
 80056e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056ea:	ee07 3a90 	vmov	s15, r3
 80056ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80056fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005706:	ee17 2a90 	vmov	r2, s15
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800570e:	e008      	b.n	8005722 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	609a      	str	r2, [r3, #8]
}
 8005722:	bf00      	nop
 8005724:	3724      	adds	r7, #36	@ 0x24
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	58024400 	.word	0x58024400
 8005734:	03d09000 	.word	0x03d09000
 8005738:	46000000 	.word	0x46000000
 800573c:	4c742400 	.word	0x4c742400
 8005740:	4a742400 	.word	0x4a742400
 8005744:	4bbebc20 	.word	0x4bbebc20

08005748 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005748:	b480      	push	{r7}
 800574a:	b089      	sub	sp, #36	@ 0x24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005750:	4ba1      	ldr	r3, [pc, #644]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005754:	f003 0303 	and.w	r3, r3, #3
 8005758:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800575a:	4b9f      	ldr	r3, [pc, #636]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800575c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575e:	0d1b      	lsrs	r3, r3, #20
 8005760:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005764:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005766:	4b9c      	ldr	r3, [pc, #624]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576a:	0a1b      	lsrs	r3, r3, #8
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005772:	4b99      	ldr	r3, [pc, #612]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005776:	08db      	lsrs	r3, r3, #3
 8005778:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	fb02 f303 	mul.w	r3, r2, r3
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 8111 	beq.w	80059b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	2b02      	cmp	r3, #2
 800579a:	f000 8083 	beq.w	80058a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	f200 80a1 	bhi.w	80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d056      	beq.n	8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80057b2:	e099      	b.n	80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057b4:	4b88      	ldr	r3, [pc, #544]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d02d      	beq.n	800581c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057c0:	4b85      	ldr	r3, [pc, #532]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	08db      	lsrs	r3, r3, #3
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	4a84      	ldr	r2, [pc, #528]	@ (80059dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80057cc:	fa22 f303 	lsr.w	r3, r2, r3
 80057d0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	ee07 3a90 	vmov	s15, r3
 80057d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ea:	4b7b      	ldr	r3, [pc, #492]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80057fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800580a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800580e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005816:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800581a:	e087      	b.n	800592c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005826:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80059e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800582a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800582e:	4b6a      	ldr	r3, [pc, #424]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005836:	ee07 3a90 	vmov	s15, r3
 800583a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800583e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005842:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800584a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800584e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800585e:	e065      	b.n	800592c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	ee07 3a90 	vmov	s15, r3
 8005866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80059e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800586e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005872:	4b59      	ldr	r3, [pc, #356]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005882:	ed97 6a03 	vldr	s12, [r7, #12]
 8005886:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800588a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800588e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800589a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800589e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058a2:	e043      	b.n	800592c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80059ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80058b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058b6:	4b48      	ldr	r3, [pc, #288]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058e6:	e021      	b.n	800592c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80059e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80058f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058fa:	4b37      	ldr	r3, [pc, #220]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590a:	ed97 6a03 	vldr	s12, [r7, #12]
 800590e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800591e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800592a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800592c:	4b2a      	ldr	r3, [pc, #168]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800592e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005930:	0a5b      	lsrs	r3, r3, #9
 8005932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005936:	ee07 3a90 	vmov	s15, r3
 800593a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005942:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005946:	edd7 6a07 	vldr	s13, [r7, #28]
 800594a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800594e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005952:	ee17 2a90 	vmov	r2, s15
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800595a:	4b1f      	ldr	r3, [pc, #124]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800595c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595e:	0c1b      	lsrs	r3, r3, #16
 8005960:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005964:	ee07 3a90 	vmov	s15, r3
 8005968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800596c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005970:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005974:	edd7 6a07 	vldr	s13, [r7, #28]
 8005978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800597c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005980:	ee17 2a90 	vmov	r2, s15
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005988:	4b13      	ldr	r3, [pc, #76]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800598a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598c:	0e1b      	lsrs	r3, r3, #24
 800598e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005992:	ee07 3a90 	vmov	s15, r3
 8005996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800599a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800599e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80059a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059ae:	ee17 2a90 	vmov	r2, s15
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80059b6:	e008      	b.n	80059ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	609a      	str	r2, [r3, #8]
}
 80059ca:	bf00      	nop
 80059cc:	3724      	adds	r7, #36	@ 0x24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	58024400 	.word	0x58024400
 80059dc:	03d09000 	.word	0x03d09000
 80059e0:	46000000 	.word	0x46000000
 80059e4:	4c742400 	.word	0x4c742400
 80059e8:	4a742400 	.word	0x4a742400
 80059ec:	4bbebc20 	.word	0x4bbebc20

080059f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059fe:	4b53      	ldr	r3, [pc, #332]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d101      	bne.n	8005a0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e099      	b.n	8005b42 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005a0e:	4b4f      	ldr	r3, [pc, #316]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a4e      	ldr	r2, [pc, #312]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a14:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a1a:	f7fc fecf 	bl	80027bc <HAL_GetTick>
 8005a1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a20:	e008      	b.n	8005a34 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a22:	f7fc fecb 	bl	80027bc <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d901      	bls.n	8005a34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e086      	b.n	8005b42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a34:	4b45      	ldr	r3, [pc, #276]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1f0      	bne.n	8005a22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005a40:	4b42      	ldr	r3, [pc, #264]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a44:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	031b      	lsls	r3, r3, #12
 8005a4e:	493f      	ldr	r1, [pc, #252]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	628b      	str	r3, [r1, #40]	@ 0x28
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	025b      	lsls	r3, r3, #9
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	041b      	lsls	r3, r3, #16
 8005a72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005a76:	431a      	orrs	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	061b      	lsls	r3, r3, #24
 8005a80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005a84:	4931      	ldr	r1, [pc, #196]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005a8a:	4b30      	ldr	r3, [pc, #192]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	492d      	ldr	r1, [pc, #180]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa0:	f023 0220 	bic.w	r2, r3, #32
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	4928      	ldr	r1, [pc, #160]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005aae:	4b27      	ldr	r3, [pc, #156]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab2:	4a26      	ldr	r2, [pc, #152]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005ab4:	f023 0310 	bic.w	r3, r3, #16
 8005ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005aba:	4b24      	ldr	r3, [pc, #144]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005abc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005abe:	4b24      	ldr	r3, [pc, #144]	@ (8005b50 <RCCEx_PLL2_Config+0x160>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	69d2      	ldr	r2, [r2, #28]
 8005ac6:	00d2      	lsls	r2, r2, #3
 8005ac8:	4920      	ldr	r1, [pc, #128]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005ace:	4b1f      	ldr	r3, [pc, #124]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005ad4:	f043 0310 	orr.w	r3, r3, #16
 8005ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d106      	bne.n	8005aee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae4:	4a19      	ldr	r2, [pc, #100]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005ae6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005aea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005aec:	e00f      	b.n	8005b0e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d106      	bne.n	8005b02 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005af4:	4b15      	ldr	r3, [pc, #84]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af8:	4a14      	ldr	r2, [pc, #80]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005afa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005afe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005b00:	e005      	b.n	8005b0e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005b02:	4b12      	ldr	r3, [pc, #72]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b06:	4a11      	ldr	r2, [pc, #68]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005b08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a0e      	ldr	r2, [pc, #56]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005b14:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b1a:	f7fc fe4f 	bl	80027bc <HAL_GetTick>
 8005b1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b20:	e008      	b.n	8005b34 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005b22:	f7fc fe4b 	bl	80027bc <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e006      	b.n	8005b42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b34:	4b05      	ldr	r3, [pc, #20]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0f0      	beq.n	8005b22 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	58024400 	.word	0x58024400
 8005b50:	ffff0007 	.word	0xffff0007

08005b54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b62:	4b53      	ldr	r3, [pc, #332]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	d101      	bne.n	8005b72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e099      	b.n	8005ca6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005b72:	4b4f      	ldr	r3, [pc, #316]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a4e      	ldr	r2, [pc, #312]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005b78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b7e:	f7fc fe1d 	bl	80027bc <HAL_GetTick>
 8005b82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b84:	e008      	b.n	8005b98 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b86:	f7fc fe19 	bl	80027bc <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d901      	bls.n	8005b98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e086      	b.n	8005ca6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b98:	4b45      	ldr	r3, [pc, #276]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1f0      	bne.n	8005b86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005ba4:	4b42      	ldr	r3, [pc, #264]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	051b      	lsls	r3, r3, #20
 8005bb2:	493f      	ldr	r1, [pc, #252]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	628b      	str	r3, [r1, #40]	@ 0x28
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	025b      	lsls	r3, r3, #9
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	431a      	orrs	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	041b      	lsls	r3, r3, #16
 8005bd6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	061b      	lsls	r3, r3, #24
 8005be4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005be8:	4931      	ldr	r1, [pc, #196]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005bee:	4b30      	ldr	r3, [pc, #192]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	492d      	ldr	r1, [pc, #180]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005c00:	4b2b      	ldr	r3, [pc, #172]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c04:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	4928      	ldr	r1, [pc, #160]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005c12:	4b27      	ldr	r3, [pc, #156]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c16:	4a26      	ldr	r2, [pc, #152]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005c1e:	4b24      	ldr	r3, [pc, #144]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c22:	4b24      	ldr	r3, [pc, #144]	@ (8005cb4 <RCCEx_PLL3_Config+0x160>)
 8005c24:	4013      	ands	r3, r2
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	69d2      	ldr	r2, [r2, #28]
 8005c2a:	00d2      	lsls	r2, r2, #3
 8005c2c:	4920      	ldr	r1, [pc, #128]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005c32:	4b1f      	ldr	r3, [pc, #124]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c36:	4a1e      	ldr	r2, [pc, #120]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d106      	bne.n	8005c52 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005c44:	4b1a      	ldr	r3, [pc, #104]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c48:	4a19      	ldr	r2, [pc, #100]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005c4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005c50:	e00f      	b.n	8005c72 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d106      	bne.n	8005c66 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005c58:	4b15      	ldr	r3, [pc, #84]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5c:	4a14      	ldr	r2, [pc, #80]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c5e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005c62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005c64:	e005      	b.n	8005c72 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005c66:	4b12      	ldr	r3, [pc, #72]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6a:	4a11      	ldr	r2, [pc, #68]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c70:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005c72:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a0e      	ldr	r2, [pc, #56]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c7e:	f7fc fd9d 	bl	80027bc <HAL_GetTick>
 8005c82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c84:	e008      	b.n	8005c98 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c86:	f7fc fd99 	bl	80027bc <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e006      	b.n	8005ca6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c98:	4b05      	ldr	r3, [pc, #20]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0f0      	beq.n	8005c86 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	58024400 	.word	0x58024400
 8005cb4:	ffff0007 	.word	0xffff0007

08005cb8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e10f      	b.n	8005eea <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a87      	ldr	r2, [pc, #540]	@ (8005ef4 <HAL_SPI_Init+0x23c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00f      	beq.n	8005cfa <HAL_SPI_Init+0x42>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a86      	ldr	r2, [pc, #536]	@ (8005ef8 <HAL_SPI_Init+0x240>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d00a      	beq.n	8005cfa <HAL_SPI_Init+0x42>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a84      	ldr	r2, [pc, #528]	@ (8005efc <HAL_SPI_Init+0x244>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d005      	beq.n	8005cfa <HAL_SPI_Init+0x42>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	2b0f      	cmp	r3, #15
 8005cf4:	d901      	bls.n	8005cfa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e0f7      	b.n	8005eea <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fef6 	bl	8006aec <SPI_GetPacketSize>
 8005d00:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a7b      	ldr	r2, [pc, #492]	@ (8005ef4 <HAL_SPI_Init+0x23c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00c      	beq.n	8005d26 <HAL_SPI_Init+0x6e>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a79      	ldr	r2, [pc, #484]	@ (8005ef8 <HAL_SPI_Init+0x240>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d007      	beq.n	8005d26 <HAL_SPI_Init+0x6e>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a78      	ldr	r2, [pc, #480]	@ (8005efc <HAL_SPI_Init+0x244>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d002      	beq.n	8005d26 <HAL_SPI_Init+0x6e>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2b08      	cmp	r3, #8
 8005d24:	d811      	bhi.n	8005d4a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005d2a:	4a72      	ldr	r2, [pc, #456]	@ (8005ef4 <HAL_SPI_Init+0x23c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d009      	beq.n	8005d44 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a70      	ldr	r2, [pc, #448]	@ (8005ef8 <HAL_SPI_Init+0x240>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d004      	beq.n	8005d44 <HAL_SPI_Init+0x8c>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a6f      	ldr	r2, [pc, #444]	@ (8005efc <HAL_SPI_Init+0x244>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d104      	bne.n	8005d4e <HAL_SPI_Init+0x96>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b10      	cmp	r3, #16
 8005d48:	d901      	bls.n	8005d4e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e0cd      	b.n	8005eea <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d106      	bne.n	8005d68 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7fc f994 	bl	8002090 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 0201 	bic.w	r2, r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005d8a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d94:	d119      	bne.n	8005dca <HAL_SPI_Init+0x112>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d9e:	d103      	bne.n	8005da8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d008      	beq.n	8005dba <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10c      	bne.n	8005dca <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005db4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005db8:	d107      	bne.n	8005dca <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005dc8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00f      	beq.n	8005df6 <HAL_SPI_Init+0x13e>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	2b06      	cmp	r3, #6
 8005ddc:	d90b      	bls.n	8005df6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	e007      	b.n	8005e06 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e04:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	69da      	ldr	r2, [r3, #28]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	431a      	orrs	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e18:	ea42 0103 	orr.w	r1, r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68da      	ldr	r2, [r3, #12]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e30:	431a      	orrs	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	431a      	orrs	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	431a      	orrs	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e66:	ea42 0103 	orr.w	r1, r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d113      	bne.n	8005ea6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e90:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ea4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0201 	bic.w	r2, r2, #1
 8005eb4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	40013000 	.word	0x40013000
 8005ef8:	40003800 	.word	0x40003800
 8005efc:	40003c00 	.word	0x40003c00

08005f00 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	603b      	str	r3, [r7, #0]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3320      	adds	r3, #32
 8005f16:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f18:	f7fc fc50 	bl	80027bc <HAL_GetTick>
 8005f1c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d001      	beq.n	8005f2e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	e1d1      	b.n	80062d2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <HAL_SPI_Transmit+0x3a>
 8005f34:	88fb      	ldrh	r3, [r7, #6]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e1c9      	b.n	80062d2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d101      	bne.n	8005f4c <HAL_SPI_Transmit+0x4c>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	e1c2      	b.n	80062d2 <HAL_SPI_Transmit+0x3d2>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2203      	movs	r2, #3
 8005f58:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	88fa      	ldrh	r2, [r7, #6]
 8005f6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	88fa      	ldrh	r2, [r7, #6]
 8005f76:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005fa4:	d108      	bne.n	8005fb8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	e009      	b.n	8005fcc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005fca:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	4b96      	ldr	r3, [pc, #600]	@ (800622c <HAL_SPI_Transmit+0x32c>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	88f9      	ldrh	r1, [r7, #6]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	6812      	ldr	r2, [r2, #0]
 8005fdc:	430b      	orrs	r3, r1
 8005fde:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 0201 	orr.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ff8:	d107      	bne.n	800600a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006008:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	2b0f      	cmp	r3, #15
 8006010:	d947      	bls.n	80060a2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006012:	e03f      	b.n	8006094 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b02      	cmp	r3, #2
 8006020:	d114      	bne.n	800604c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6812      	ldr	r2, [r2, #0]
 800602c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006032:	1d1a      	adds	r2, r3, #4
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800603e:	b29b      	uxth	r3, r3
 8006040:	3b01      	subs	r3, #1
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800604a:	e023      	b.n	8006094 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800604c:	f7fc fbb6 	bl	80027bc <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	429a      	cmp	r2, r3
 800605a:	d803      	bhi.n	8006064 <HAL_SPI_Transmit+0x164>
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006062:	d102      	bne.n	800606a <HAL_SPI_Transmit+0x16a>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d114      	bne.n	8006094 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 fc70 	bl	8006950 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006076:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e11e      	b.n	80062d2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800609a:	b29b      	uxth	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1b9      	bne.n	8006014 <HAL_SPI_Transmit+0x114>
 80060a0:	e0f1      	b.n	8006286 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	2b07      	cmp	r3, #7
 80060a8:	f240 80e6 	bls.w	8006278 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80060ac:	e05d      	b.n	800616a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d132      	bne.n	8006122 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d918      	bls.n	80060fa <HAL_SPI_Transmit+0x1fa>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d014      	beq.n	80060fa <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6812      	ldr	r2, [r2, #0]
 80060da:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e0:	1d1a      	adds	r2, r3, #4
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3b02      	subs	r3, #2
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80060f8:	e037      	b.n	800616a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060fe:	881a      	ldrh	r2, [r3, #0]
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006108:	1c9a      	adds	r2, r3, #2
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006120:	e023      	b.n	800616a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006122:	f7fc fb4b 	bl	80027bc <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	429a      	cmp	r2, r3
 8006130:	d803      	bhi.n	800613a <HAL_SPI_Transmit+0x23a>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006138:	d102      	bne.n	8006140 <HAL_SPI_Transmit+0x240>
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d114      	bne.n	800616a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 fc05 	bl	8006950 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800614c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e0b3      	b.n	80062d2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006170:	b29b      	uxth	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d19b      	bne.n	80060ae <HAL_SPI_Transmit+0x1ae>
 8006176:	e086      	b.n	8006286 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b02      	cmp	r3, #2
 8006184:	d154      	bne.n	8006230 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800618c:	b29b      	uxth	r3, r3
 800618e:	2b03      	cmp	r3, #3
 8006190:	d918      	bls.n	80061c4 <HAL_SPI_Transmit+0x2c4>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006196:	2b40      	cmp	r3, #64	@ 0x40
 8006198:	d914      	bls.n	80061c4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6812      	ldr	r2, [r2, #0]
 80061a4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061aa:	1d1a      	adds	r2, r3, #4
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	3b04      	subs	r3, #4
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80061c2:	e059      	b.n	8006278 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d917      	bls.n	8006200 <HAL_SPI_Transmit+0x300>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d013      	beq.n	8006200 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061dc:	881a      	ldrh	r2, [r3, #0]
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061e6:	1c9a      	adds	r2, r3, #2
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	3b02      	subs	r3, #2
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80061fe:	e03b      	b.n	8006278 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3320      	adds	r3, #32
 800620a:	7812      	ldrb	r2, [r2, #0]
 800620c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006212:	1c5a      	adds	r2, r3, #1
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800621e:	b29b      	uxth	r3, r3
 8006220:	3b01      	subs	r3, #1
 8006222:	b29a      	uxth	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800622a:	e025      	b.n	8006278 <HAL_SPI_Transmit+0x378>
 800622c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006230:	f7fc fac4 	bl	80027bc <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	429a      	cmp	r2, r3
 800623e:	d803      	bhi.n	8006248 <HAL_SPI_Transmit+0x348>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006246:	d102      	bne.n	800624e <HAL_SPI_Transmit+0x34e>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d114      	bne.n	8006278 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 fb7e 	bl	8006950 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800625a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e02c      	b.n	80062d2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800627e:	b29b      	uxth	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	f47f af79 	bne.w	8006178 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2200      	movs	r2, #0
 800628e:	2108      	movs	r1, #8
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 fbfd 	bl	8006a90 <SPI_WaitOnFlagUntilTimeout>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d007      	beq.n	80062ac <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062a2:	f043 0220 	orr.w	r2, r3, #32
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 fb4f 	bl	8006950 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e000      	b.n	80062d2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80062d0:	2300      	movs	r3, #0
  }
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3718      	adds	r7, #24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop

080062dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08e      	sub	sp, #56	@ 0x38
 80062e0:	af02      	add	r7, sp, #8
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3320      	adds	r3, #32
 80062f0:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3330      	adds	r3, #48	@ 0x30
 80062f8:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062fe:	095b      	lsrs	r3, r3, #5
 8006300:	b29b      	uxth	r3, r3
 8006302:	3301      	adds	r3, #1
 8006304:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006306:	f7fc fa59 	bl	80027bc <HAL_GetTick>
 800630a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800630c:	887b      	ldrh	r3, [r7, #2]
 800630e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8006310:	887b      	ldrh	r3, [r7, #2]
 8006312:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b01      	cmp	r3, #1
 800631e:	d001      	beq.n	8006324 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8006320:	2302      	movs	r3, #2
 8006322:	e310      	b.n	8006946 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d005      	beq.n	8006336 <HAL_SPI_TransmitReceive+0x5a>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <HAL_SPI_TransmitReceive+0x5a>
 8006330:	887b      	ldrh	r3, [r7, #2]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e305      	b.n	8006946 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006340:	2b01      	cmp	r3, #1
 8006342:	d101      	bne.n	8006348 <HAL_SPI_TransmitReceive+0x6c>
 8006344:	2302      	movs	r3, #2
 8006346:	e2fe      	b.n	8006946 <HAL_SPI_TransmitReceive+0x66a>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2205      	movs	r2, #5
 8006354:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	887a      	ldrh	r2, [r7, #2]
 800636a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	887a      	ldrh	r2, [r7, #2]
 8006372:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	887a      	ldrh	r2, [r7, #2]
 8006380:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	887a      	ldrh	r2, [r7, #2]
 8006388:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68da      	ldr	r2, [r3, #12]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80063a6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a70      	ldr	r2, [pc, #448]	@ (8006570 <HAL_SPI_TransmitReceive+0x294>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d009      	beq.n	80063c6 <HAL_SPI_TransmitReceive+0xea>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a6f      	ldr	r2, [pc, #444]	@ (8006574 <HAL_SPI_TransmitReceive+0x298>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d004      	beq.n	80063c6 <HAL_SPI_TransmitReceive+0xea>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a6d      	ldr	r2, [pc, #436]	@ (8006578 <HAL_SPI_TransmitReceive+0x29c>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d102      	bne.n	80063cc <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80063c6:	2310      	movs	r3, #16
 80063c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063ca:	e001      	b.n	80063d0 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80063cc:	2308      	movs	r3, #8
 80063ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	4b69      	ldr	r3, [pc, #420]	@ (800657c <HAL_SPI_TransmitReceive+0x2a0>)
 80063d8:	4013      	ands	r3, r2
 80063da:	8879      	ldrh	r1, [r7, #2]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	6812      	ldr	r2, [r2, #0]
 80063e0:	430b      	orrs	r3, r1
 80063e2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0201 	orr.w	r2, r2, #1
 80063f2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063fc:	d107      	bne.n	800640e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800640c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	2b0f      	cmp	r3, #15
 8006414:	f240 80a2 	bls.w	800655c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8006418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800641a:	089b      	lsrs	r3, r3, #2
 800641c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800641e:	e094      	b.n	800654a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b02      	cmp	r3, #2
 800642c:	d120      	bne.n	8006470 <HAL_SPI_TransmitReceive+0x194>
 800642e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006430:	2b00      	cmp	r3, #0
 8006432:	d01d      	beq.n	8006470 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006434:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006436:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800643a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800643c:	429a      	cmp	r2, r3
 800643e:	d217      	bcs.n	8006470 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6812      	ldr	r2, [r2, #0]
 800644a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006450:	1d1a      	adds	r2, r3, #4
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800645c:	b29b      	uxth	r3, r3
 800645e:	3b01      	subs	r3, #1
 8006460:	b29a      	uxth	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800646e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006478:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800647a:	2b00      	cmp	r3, #0
 800647c:	d065      	beq.n	800654a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b01      	cmp	r3, #1
 800648a:	d118      	bne.n	80064be <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006494:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006496:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800649c:	1d1a      	adds	r2, r3, #4
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	3b01      	subs	r3, #1
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064ba:	853b      	strh	r3, [r7, #40]	@ 0x28
 80064bc:	e045      	b.n	800654a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80064be:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80064c0:	8bfb      	ldrh	r3, [r7, #30]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d21d      	bcs.n	8006502 <HAL_SPI_TransmitReceive+0x226>
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d018      	beq.n	8006502 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80064da:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064e0:	1d1a      	adds	r2, r3, #4
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	3b01      	subs	r3, #1
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064fe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006500:	e023      	b.n	800654a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006502:	f7fc f95b 	bl	80027bc <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800650e:	429a      	cmp	r2, r3
 8006510:	d803      	bhi.n	800651a <HAL_SPI_TransmitReceive+0x23e>
 8006512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006518:	d102      	bne.n	8006520 <HAL_SPI_TransmitReceive+0x244>
 800651a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800651c:	2b00      	cmp	r3, #0
 800651e:	d114      	bne.n	800654a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 fa15 	bl	8006950 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800652c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e1fd      	b.n	8006946 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800654a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800654c:	2b00      	cmp	r3, #0
 800654e:	f47f af67 	bne.w	8006420 <HAL_SPI_TransmitReceive+0x144>
 8006552:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006554:	2b00      	cmp	r3, #0
 8006556:	f47f af63 	bne.w	8006420 <HAL_SPI_TransmitReceive+0x144>
 800655a:	e1ce      	b.n	80068fa <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	2b07      	cmp	r3, #7
 8006562:	f240 81c2 	bls.w	80068ea <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8006566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006568:	085b      	lsrs	r3, r3, #1
 800656a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800656c:	e0c9      	b.n	8006702 <HAL_SPI_TransmitReceive+0x426>
 800656e:	bf00      	nop
 8006570:	40013000 	.word	0x40013000
 8006574:	40003800 	.word	0x40003800
 8006578:	40003c00 	.word	0x40003c00
 800657c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b02      	cmp	r3, #2
 800658c:	d11f      	bne.n	80065ce <HAL_SPI_TransmitReceive+0x2f2>
 800658e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006590:	2b00      	cmp	r3, #0
 8006592:	d01c      	beq.n	80065ce <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006594:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006596:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800659a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800659c:	429a      	cmp	r2, r3
 800659e:	d216      	bcs.n	80065ce <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065a4:	881a      	ldrh	r2, [r3, #0]
 80065a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ae:	1c9a      	adds	r2, r3, #2
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	3b01      	subs	r3, #1
 80065be:	b29a      	uxth	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80065cc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80065d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 8092 	beq.w	8006702 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d118      	bne.n	800661e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065f0:	6a3a      	ldr	r2, [r7, #32]
 80065f2:	8812      	ldrh	r2, [r2, #0]
 80065f4:	b292      	uxth	r2, r2
 80065f6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065fc:	1c9a      	adds	r2, r3, #2
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006608:	b29b      	uxth	r3, r3
 800660a:	3b01      	subs	r3, #1
 800660c:	b29a      	uxth	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800661a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800661c:	e071      	b.n	8006702 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800661e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006620:	8bfb      	ldrh	r3, [r7, #30]
 8006622:	429a      	cmp	r2, r3
 8006624:	d228      	bcs.n	8006678 <HAL_SPI_TransmitReceive+0x39c>
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d023      	beq.n	8006678 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006634:	6a3a      	ldr	r2, [r7, #32]
 8006636:	8812      	ldrh	r2, [r2, #0]
 8006638:	b292      	uxth	r2, r2
 800663a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006640:	1c9a      	adds	r2, r3, #2
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800664a:	6a3a      	ldr	r2, [r7, #32]
 800664c:	8812      	ldrh	r2, [r2, #0]
 800664e:	b292      	uxth	r2, r2
 8006650:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006656:	1c9a      	adds	r2, r3, #2
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006662:	b29b      	uxth	r3, r3
 8006664:	3b02      	subs	r3, #2
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006674:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006676:	e044      	b.n	8006702 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006678:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800667a:	2b01      	cmp	r3, #1
 800667c:	d11d      	bne.n	80066ba <HAL_SPI_TransmitReceive+0x3de>
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d018      	beq.n	80066ba <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800668c:	6a3a      	ldr	r2, [r7, #32]
 800668e:	8812      	ldrh	r2, [r2, #0]
 8006690:	b292      	uxth	r2, r2
 8006692:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006698:	1c9a      	adds	r2, r3, #2
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	3b01      	subs	r3, #1
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80066b6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80066b8:	e023      	b.n	8006702 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066ba:	f7fc f87f 	bl	80027bc <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d803      	bhi.n	80066d2 <HAL_SPI_TransmitReceive+0x3f6>
 80066ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d0:	d102      	bne.n	80066d8 <HAL_SPI_TransmitReceive+0x3fc>
 80066d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d114      	bne.n	8006702 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 f939 	bl	8006950 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e121      	b.n	8006946 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006702:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006704:	2b00      	cmp	r3, #0
 8006706:	f47f af3b 	bne.w	8006580 <HAL_SPI_TransmitReceive+0x2a4>
 800670a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800670c:	2b00      	cmp	r3, #0
 800670e:	f47f af37 	bne.w	8006580 <HAL_SPI_TransmitReceive+0x2a4>
 8006712:	e0f2      	b.n	80068fa <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b02      	cmp	r3, #2
 8006720:	d121      	bne.n	8006766 <HAL_SPI_TransmitReceive+0x48a>
 8006722:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006724:	2b00      	cmp	r3, #0
 8006726:	d01e      	beq.n	8006766 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006728:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800672a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800672c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800672e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006730:	429a      	cmp	r2, r3
 8006732:	d218      	bcs.n	8006766 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3320      	adds	r3, #32
 800673e:	7812      	ldrb	r2, [r2, #0]
 8006740:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006752:	b29b      	uxth	r3, r3
 8006754:	3b01      	subs	r3, #1
 8006756:	b29a      	uxth	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006764:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800676e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 80ba 	beq.w	80068ea <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	2b01      	cmp	r3, #1
 8006782:	d11b      	bne.n	80067bc <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006790:	7812      	ldrb	r2, [r2, #0]
 8006792:	b2d2      	uxtb	r2, r2
 8006794:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80067b8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80067ba:	e096      	b.n	80068ea <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80067bc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80067be:	8bfb      	ldrh	r3, [r7, #30]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d24a      	bcs.n	800685a <HAL_SPI_TransmitReceive+0x57e>
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d045      	beq.n	800685a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067da:	7812      	ldrb	r2, [r2, #0]
 80067dc:	b2d2      	uxtb	r2, r2
 80067de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067e4:	1c5a      	adds	r2, r3, #1
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067f6:	7812      	ldrb	r2, [r2, #0]
 80067f8:	b2d2      	uxtb	r2, r2
 80067fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006800:	1c5a      	adds	r2, r3, #1
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006812:	7812      	ldrb	r2, [r2, #0]
 8006814:	b2d2      	uxtb	r2, r2
 8006816:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800682e:	7812      	ldrb	r2, [r2, #0]
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006844:	b29b      	uxth	r3, r3
 8006846:	3b04      	subs	r3, #4
 8006848:	b29a      	uxth	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006856:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006858:	e047      	b.n	80068ea <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800685a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800685c:	2b03      	cmp	r3, #3
 800685e:	d820      	bhi.n	80068a2 <HAL_SPI_TransmitReceive+0x5c6>
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d01b      	beq.n	80068a2 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006876:	7812      	ldrb	r2, [r2, #0]
 8006878:	b2d2      	uxtb	r2, r2
 800687a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006880:	1c5a      	adds	r2, r3, #1
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800688c:	b29b      	uxth	r3, r3
 800688e:	3b01      	subs	r3, #1
 8006890:	b29a      	uxth	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800689e:	853b      	strh	r3, [r7, #40]	@ 0x28
 80068a0:	e023      	b.n	80068ea <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068a2:	f7fb ff8b 	bl	80027bc <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d803      	bhi.n	80068ba <HAL_SPI_TransmitReceive+0x5de>
 80068b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b8:	d102      	bne.n	80068c0 <HAL_SPI_TransmitReceive+0x5e4>
 80068ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d114      	bne.n	80068ea <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 f845 	bl	8006950 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e02d      	b.n	8006946 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80068ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f47f af11 	bne.w	8006714 <HAL_SPI_TransmitReceive+0x438>
 80068f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f47f af0d 	bne.w	8006714 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006900:	2200      	movs	r2, #0
 8006902:	2108      	movs	r1, #8
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f000 f8c3 	bl	8006a90 <SPI_WaitOnFlagUntilTimeout>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d007      	beq.n	8006920 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006916:	f043 0220 	orr.w	r2, r3, #32
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f000 f815 	bl	8006950 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e000      	b.n	8006946 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8006944:	2300      	movs	r3, #0
  }
}
 8006946:	4618      	mov	r0, r3
 8006948:	3730      	adds	r7, #48	@ 0x30
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop

08006950 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	699a      	ldr	r2, [r3, #24]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 0208 	orr.w	r2, r2, #8
 800696e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	699a      	ldr	r2, [r3, #24]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0210 	orr.w	r2, r2, #16
 800697e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0201 	bic.w	r2, r2, #1
 800698e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6919      	ldr	r1, [r3, #16]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	4b3c      	ldr	r3, [pc, #240]	@ (8006a8c <SPI_CloseTransfer+0x13c>)
 800699c:	400b      	ands	r3, r1
 800699e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689a      	ldr	r2, [r3, #8]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80069ae:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b04      	cmp	r3, #4
 80069ba:	d014      	beq.n	80069e6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f003 0320 	and.w	r3, r3, #32
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00f      	beq.n	80069e6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	699a      	ldr	r2, [r3, #24]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f042 0220 	orr.w	r2, r2, #32
 80069e4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d014      	beq.n	8006a1c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00f      	beq.n	8006a1c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a02:	f043 0204 	orr.w	r2, r3, #4
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699a      	ldr	r2, [r3, #24]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a1a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00f      	beq.n	8006a46 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a2c:	f043 0201 	orr.w	r2, r3, #1
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	699a      	ldr	r2, [r3, #24]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a44:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00f      	beq.n	8006a70 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a56:	f043 0208 	orr.w	r2, r3, #8
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699a      	ldr	r2, [r3, #24]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a6e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006a80:	bf00      	nop
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	fffffc90 	.word	0xfffffc90

08006a90 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006aa0:	e010      	b.n	8006ac4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aa2:	f7fb fe8b 	bl	80027bc <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d803      	bhi.n	8006aba <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab8:	d102      	bne.n	8006ac0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e00f      	b.n	8006ae4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	695a      	ldr	r2, [r3, #20]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	4013      	ands	r3, r2
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	bf0c      	ite	eq
 8006ad4:	2301      	moveq	r3, #1
 8006ad6:	2300      	movne	r3, #0
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	461a      	mov	r2, r3
 8006adc:	79fb      	ldrb	r3, [r7, #7]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d0df      	beq.n	8006aa2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af8:	095b      	lsrs	r3, r3, #5
 8006afa:	3301      	adds	r3, #1
 8006afc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	3301      	adds	r3, #1
 8006b04:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	3307      	adds	r3, #7
 8006b0a:	08db      	lsrs	r3, r3, #3
 8006b0c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	fb02 f303 	mul.w	r3, r2, r3
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b082      	sub	sp, #8
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e049      	b.n	8006bc8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d106      	bne.n	8006b4e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7fb fb2f 	bl	80021ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2202      	movs	r2, #2
 8006b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	4619      	mov	r1, r3
 8006b60:	4610      	mov	r0, r2
 8006b62:	f000 fc49 	bl	80073f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d001      	beq.n	8006be8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e054      	b.n	8006c92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0201 	orr.w	r2, r2, #1
 8006bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a26      	ldr	r2, [pc, #152]	@ (8006ca0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d022      	beq.n	8006c50 <HAL_TIM_Base_Start_IT+0x80>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c12:	d01d      	beq.n	8006c50 <HAL_TIM_Base_Start_IT+0x80>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a22      	ldr	r2, [pc, #136]	@ (8006ca4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d018      	beq.n	8006c50 <HAL_TIM_Base_Start_IT+0x80>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a21      	ldr	r2, [pc, #132]	@ (8006ca8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d013      	beq.n	8006c50 <HAL_TIM_Base_Start_IT+0x80>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a1f      	ldr	r2, [pc, #124]	@ (8006cac <HAL_TIM_Base_Start_IT+0xdc>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d00e      	beq.n	8006c50 <HAL_TIM_Base_Start_IT+0x80>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a1e      	ldr	r2, [pc, #120]	@ (8006cb0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d009      	beq.n	8006c50 <HAL_TIM_Base_Start_IT+0x80>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a1c      	ldr	r2, [pc, #112]	@ (8006cb4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d004      	beq.n	8006c50 <HAL_TIM_Base_Start_IT+0x80>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8006cb8 <HAL_TIM_Base_Start_IT+0xe8>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d115      	bne.n	8006c7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689a      	ldr	r2, [r3, #8]
 8006c56:	4b19      	ldr	r3, [pc, #100]	@ (8006cbc <HAL_TIM_Base_Start_IT+0xec>)
 8006c58:	4013      	ands	r3, r2
 8006c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2b06      	cmp	r3, #6
 8006c60:	d015      	beq.n	8006c8e <HAL_TIM_Base_Start_IT+0xbe>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c68:	d011      	beq.n	8006c8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f042 0201 	orr.w	r2, r2, #1
 8006c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c7a:	e008      	b.n	8006c8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f042 0201 	orr.w	r2, r2, #1
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	e000      	b.n	8006c90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	40010000 	.word	0x40010000
 8006ca4:	40000400 	.word	0x40000400
 8006ca8:	40000800 	.word	0x40000800
 8006cac:	40000c00 	.word	0x40000c00
 8006cb0:	40010400 	.word	0x40010400
 8006cb4:	40001800 	.word	0x40001800
 8006cb8:	40014000 	.word	0x40014000
 8006cbc:	00010007 	.word	0x00010007

08006cc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e049      	b.n	8006d66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d106      	bne.n	8006cec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f841 	bl	8006d6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	4610      	mov	r0, r2
 8006d00:	f000 fb7a 	bl	80073f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b083      	sub	sp, #12
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d76:	bf00      	nop
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d020      	beq.n	8006de6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d01b      	beq.n	8006de6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f06f 0202 	mvn.w	r2, #2
 8006db6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	f003 0303 	and.w	r3, r3, #3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 faf5 	bl	80073bc <HAL_TIM_IC_CaptureCallback>
 8006dd2:	e005      	b.n	8006de0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fae7 	bl	80073a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 faf8 	bl	80073d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f003 0304 	and.w	r3, r3, #4
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d020      	beq.n	8006e32 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f003 0304 	and.w	r3, r3, #4
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d01b      	beq.n	8006e32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f06f 0204 	mvn.w	r2, #4
 8006e02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 facf 	bl	80073bc <HAL_TIM_IC_CaptureCallback>
 8006e1e:	e005      	b.n	8006e2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fac1 	bl	80073a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fad2 	bl	80073d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	f003 0308 	and.w	r3, r3, #8
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d020      	beq.n	8006e7e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f003 0308 	and.w	r3, r3, #8
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d01b      	beq.n	8006e7e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f06f 0208 	mvn.w	r2, #8
 8006e4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2204      	movs	r2, #4
 8006e54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	f003 0303 	and.w	r3, r3, #3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d003      	beq.n	8006e6c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 faa9 	bl	80073bc <HAL_TIM_IC_CaptureCallback>
 8006e6a:	e005      	b.n	8006e78 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fa9b 	bl	80073a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 faac 	bl	80073d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f003 0310 	and.w	r3, r3, #16
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d020      	beq.n	8006eca <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f003 0310 	and.w	r3, r3, #16
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d01b      	beq.n	8006eca <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f06f 0210 	mvn.w	r2, #16
 8006e9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2208      	movs	r2, #8
 8006ea0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	69db      	ldr	r3, [r3, #28]
 8006ea8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fa83 	bl	80073bc <HAL_TIM_IC_CaptureCallback>
 8006eb6:	e005      	b.n	8006ec4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fa75 	bl	80073a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fa86 	bl	80073d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00c      	beq.n	8006eee <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d007      	beq.n	8006eee <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f06f 0201 	mvn.w	r2, #1
 8006ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7fb f893 	bl	8002014 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d104      	bne.n	8006f02 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00c      	beq.n	8006f1c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d007      	beq.n	8006f1c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 ff98 	bl	8007e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00c      	beq.n	8006f40 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d007      	beq.n	8006f40 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 ff90 	bl	8007e60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00c      	beq.n	8006f64 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d007      	beq.n	8006f64 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fa40 	bl	80073e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f003 0320 	and.w	r3, r3, #32
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00c      	beq.n	8006f88 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f003 0320 	and.w	r3, r3, #32
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d007      	beq.n	8006f88 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f06f 0220 	mvn.w	r2, #32
 8006f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 ff58 	bl	8007e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f88:	bf00      	nop
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d101      	bne.n	8006fae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006faa:	2302      	movs	r3, #2
 8006fac:	e0ff      	b.n	80071ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b14      	cmp	r3, #20
 8006fba:	f200 80f0 	bhi.w	800719e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8006fc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc4:	08007019 	.word	0x08007019
 8006fc8:	0800719f 	.word	0x0800719f
 8006fcc:	0800719f 	.word	0x0800719f
 8006fd0:	0800719f 	.word	0x0800719f
 8006fd4:	08007059 	.word	0x08007059
 8006fd8:	0800719f 	.word	0x0800719f
 8006fdc:	0800719f 	.word	0x0800719f
 8006fe0:	0800719f 	.word	0x0800719f
 8006fe4:	0800709b 	.word	0x0800709b
 8006fe8:	0800719f 	.word	0x0800719f
 8006fec:	0800719f 	.word	0x0800719f
 8006ff0:	0800719f 	.word	0x0800719f
 8006ff4:	080070db 	.word	0x080070db
 8006ff8:	0800719f 	.word	0x0800719f
 8006ffc:	0800719f 	.word	0x0800719f
 8007000:	0800719f 	.word	0x0800719f
 8007004:	0800711d 	.word	0x0800711d
 8007008:	0800719f 	.word	0x0800719f
 800700c:	0800719f 	.word	0x0800719f
 8007010:	0800719f 	.word	0x0800719f
 8007014:	0800715d 	.word	0x0800715d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68b9      	ldr	r1, [r7, #8]
 800701e:	4618      	mov	r0, r3
 8007020:	f000 fa8a 	bl	8007538 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	699a      	ldr	r2, [r3, #24]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f042 0208 	orr.w	r2, r2, #8
 8007032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	699a      	ldr	r2, [r3, #24]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0204 	bic.w	r2, r2, #4
 8007042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6999      	ldr	r1, [r3, #24]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	691a      	ldr	r2, [r3, #16]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	430a      	orrs	r2, r1
 8007054:	619a      	str	r2, [r3, #24]
      break;
 8007056:	e0a5      	b.n	80071a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68b9      	ldr	r1, [r7, #8]
 800705e:	4618      	mov	r0, r3
 8007060:	f000 fafa 	bl	8007658 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	699a      	ldr	r2, [r3, #24]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	699a      	ldr	r2, [r3, #24]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6999      	ldr	r1, [r3, #24]
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	021a      	lsls	r2, r3, #8
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	430a      	orrs	r2, r1
 8007096:	619a      	str	r2, [r3, #24]
      break;
 8007098:	e084      	b.n	80071a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68b9      	ldr	r1, [r7, #8]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f000 fb63 	bl	800776c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	69da      	ldr	r2, [r3, #28]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f042 0208 	orr.w	r2, r2, #8
 80070b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	69da      	ldr	r2, [r3, #28]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 0204 	bic.w	r2, r2, #4
 80070c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	69d9      	ldr	r1, [r3, #28]
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	691a      	ldr	r2, [r3, #16]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	61da      	str	r2, [r3, #28]
      break;
 80070d8:	e064      	b.n	80071a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68b9      	ldr	r1, [r7, #8]
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 fbcb 	bl	800787c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	69da      	ldr	r2, [r3, #28]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	69da      	ldr	r2, [r3, #28]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007104:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	69d9      	ldr	r1, [r3, #28]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	021a      	lsls	r2, r3, #8
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	430a      	orrs	r2, r1
 8007118:	61da      	str	r2, [r3, #28]
      break;
 800711a:	e043      	b.n	80071a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68b9      	ldr	r1, [r7, #8]
 8007122:	4618      	mov	r0, r3
 8007124:	f000 fc14 	bl	8007950 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f042 0208 	orr.w	r2, r2, #8
 8007136:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0204 	bic.w	r2, r2, #4
 8007146:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	691a      	ldr	r2, [r3, #16]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	430a      	orrs	r2, r1
 8007158:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800715a:	e023      	b.n	80071a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	4618      	mov	r0, r3
 8007164:	f000 fc58 	bl	8007a18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007176:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007186:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	021a      	lsls	r2, r3, #8
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	430a      	orrs	r2, r1
 800719a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800719c:	e002      	b.n	80071a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	75fb      	strb	r3, [r7, #23]
      break;
 80071a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80071ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3718      	adds	r7, #24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop

080071b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d101      	bne.n	80071d4 <HAL_TIM_ConfigClockSource+0x1c>
 80071d0:	2302      	movs	r3, #2
 80071d2:	e0dc      	b.n	800738e <HAL_TIM_ConfigClockSource+0x1d6>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	4b6a      	ldr	r3, [pc, #424]	@ (8007398 <HAL_TIM_ConfigClockSource+0x1e0>)
 80071f0:	4013      	ands	r3, r2
 80071f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a64      	ldr	r2, [pc, #400]	@ (800739c <HAL_TIM_ConfigClockSource+0x1e4>)
 800720a:	4293      	cmp	r3, r2
 800720c:	f000 80a9 	beq.w	8007362 <HAL_TIM_ConfigClockSource+0x1aa>
 8007210:	4a62      	ldr	r2, [pc, #392]	@ (800739c <HAL_TIM_ConfigClockSource+0x1e4>)
 8007212:	4293      	cmp	r3, r2
 8007214:	f200 80ae 	bhi.w	8007374 <HAL_TIM_ConfigClockSource+0x1bc>
 8007218:	4a61      	ldr	r2, [pc, #388]	@ (80073a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800721a:	4293      	cmp	r3, r2
 800721c:	f000 80a1 	beq.w	8007362 <HAL_TIM_ConfigClockSource+0x1aa>
 8007220:	4a5f      	ldr	r2, [pc, #380]	@ (80073a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007222:	4293      	cmp	r3, r2
 8007224:	f200 80a6 	bhi.w	8007374 <HAL_TIM_ConfigClockSource+0x1bc>
 8007228:	4a5e      	ldr	r2, [pc, #376]	@ (80073a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800722a:	4293      	cmp	r3, r2
 800722c:	f000 8099 	beq.w	8007362 <HAL_TIM_ConfigClockSource+0x1aa>
 8007230:	4a5c      	ldr	r2, [pc, #368]	@ (80073a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007232:	4293      	cmp	r3, r2
 8007234:	f200 809e 	bhi.w	8007374 <HAL_TIM_ConfigClockSource+0x1bc>
 8007238:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800723c:	f000 8091 	beq.w	8007362 <HAL_TIM_ConfigClockSource+0x1aa>
 8007240:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007244:	f200 8096 	bhi.w	8007374 <HAL_TIM_ConfigClockSource+0x1bc>
 8007248:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800724c:	f000 8089 	beq.w	8007362 <HAL_TIM_ConfigClockSource+0x1aa>
 8007250:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007254:	f200 808e 	bhi.w	8007374 <HAL_TIM_ConfigClockSource+0x1bc>
 8007258:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800725c:	d03e      	beq.n	80072dc <HAL_TIM_ConfigClockSource+0x124>
 800725e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007262:	f200 8087 	bhi.w	8007374 <HAL_TIM_ConfigClockSource+0x1bc>
 8007266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800726a:	f000 8086 	beq.w	800737a <HAL_TIM_ConfigClockSource+0x1c2>
 800726e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007272:	d87f      	bhi.n	8007374 <HAL_TIM_ConfigClockSource+0x1bc>
 8007274:	2b70      	cmp	r3, #112	@ 0x70
 8007276:	d01a      	beq.n	80072ae <HAL_TIM_ConfigClockSource+0xf6>
 8007278:	2b70      	cmp	r3, #112	@ 0x70
 800727a:	d87b      	bhi.n	8007374 <HAL_TIM_ConfigClockSource+0x1bc>
 800727c:	2b60      	cmp	r3, #96	@ 0x60
 800727e:	d050      	beq.n	8007322 <HAL_TIM_ConfigClockSource+0x16a>
 8007280:	2b60      	cmp	r3, #96	@ 0x60
 8007282:	d877      	bhi.n	8007374 <HAL_TIM_ConfigClockSource+0x1bc>
 8007284:	2b50      	cmp	r3, #80	@ 0x50
 8007286:	d03c      	beq.n	8007302 <HAL_TIM_ConfigClockSource+0x14a>
 8007288:	2b50      	cmp	r3, #80	@ 0x50
 800728a:	d873      	bhi.n	8007374 <HAL_TIM_ConfigClockSource+0x1bc>
 800728c:	2b40      	cmp	r3, #64	@ 0x40
 800728e:	d058      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x18a>
 8007290:	2b40      	cmp	r3, #64	@ 0x40
 8007292:	d86f      	bhi.n	8007374 <HAL_TIM_ConfigClockSource+0x1bc>
 8007294:	2b30      	cmp	r3, #48	@ 0x30
 8007296:	d064      	beq.n	8007362 <HAL_TIM_ConfigClockSource+0x1aa>
 8007298:	2b30      	cmp	r3, #48	@ 0x30
 800729a:	d86b      	bhi.n	8007374 <HAL_TIM_ConfigClockSource+0x1bc>
 800729c:	2b20      	cmp	r3, #32
 800729e:	d060      	beq.n	8007362 <HAL_TIM_ConfigClockSource+0x1aa>
 80072a0:	2b20      	cmp	r3, #32
 80072a2:	d867      	bhi.n	8007374 <HAL_TIM_ConfigClockSource+0x1bc>
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d05c      	beq.n	8007362 <HAL_TIM_ConfigClockSource+0x1aa>
 80072a8:	2b10      	cmp	r3, #16
 80072aa:	d05a      	beq.n	8007362 <HAL_TIM_ConfigClockSource+0x1aa>
 80072ac:	e062      	b.n	8007374 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80072be:	f000 fc8f 	bl	8007be0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80072d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	609a      	str	r2, [r3, #8]
      break;
 80072da:	e04f      	b.n	800737c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80072ec:	f000 fc78 	bl	8007be0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689a      	ldr	r2, [r3, #8]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80072fe:	609a      	str	r2, [r3, #8]
      break;
 8007300:	e03c      	b.n	800737c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800730e:	461a      	mov	r2, r3
 8007310:	f000 fbe8 	bl	8007ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2150      	movs	r1, #80	@ 0x50
 800731a:	4618      	mov	r0, r3
 800731c:	f000 fc42 	bl	8007ba4 <TIM_ITRx_SetConfig>
      break;
 8007320:	e02c      	b.n	800737c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800732e:	461a      	mov	r2, r3
 8007330:	f000 fc07 	bl	8007b42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2160      	movs	r1, #96	@ 0x60
 800733a:	4618      	mov	r0, r3
 800733c:	f000 fc32 	bl	8007ba4 <TIM_ITRx_SetConfig>
      break;
 8007340:	e01c      	b.n	800737c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800734e:	461a      	mov	r2, r3
 8007350:	f000 fbc8 	bl	8007ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2140      	movs	r1, #64	@ 0x40
 800735a:	4618      	mov	r0, r3
 800735c:	f000 fc22 	bl	8007ba4 <TIM_ITRx_SetConfig>
      break;
 8007360:	e00c      	b.n	800737c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4619      	mov	r1, r3
 800736c:	4610      	mov	r0, r2
 800736e:	f000 fc19 	bl	8007ba4 <TIM_ITRx_SetConfig>
      break;
 8007372:	e003      	b.n	800737c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	73fb      	strb	r3, [r7, #15]
      break;
 8007378:	e000      	b.n	800737c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800737a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800738c:	7bfb      	ldrb	r3, [r7, #15]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	ffceff88 	.word	0xffceff88
 800739c:	00100040 	.word	0x00100040
 80073a0:	00100030 	.word	0x00100030
 80073a4:	00100020 	.word	0x00100020

080073a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a43      	ldr	r2, [pc, #268]	@ (8007518 <TIM_Base_SetConfig+0x120>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d013      	beq.n	8007438 <TIM_Base_SetConfig+0x40>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007416:	d00f      	beq.n	8007438 <TIM_Base_SetConfig+0x40>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a40      	ldr	r2, [pc, #256]	@ (800751c <TIM_Base_SetConfig+0x124>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d00b      	beq.n	8007438 <TIM_Base_SetConfig+0x40>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a3f      	ldr	r2, [pc, #252]	@ (8007520 <TIM_Base_SetConfig+0x128>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d007      	beq.n	8007438 <TIM_Base_SetConfig+0x40>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a3e      	ldr	r2, [pc, #248]	@ (8007524 <TIM_Base_SetConfig+0x12c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d003      	beq.n	8007438 <TIM_Base_SetConfig+0x40>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a3d      	ldr	r2, [pc, #244]	@ (8007528 <TIM_Base_SetConfig+0x130>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d108      	bne.n	800744a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800743e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	4313      	orrs	r3, r2
 8007448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a32      	ldr	r2, [pc, #200]	@ (8007518 <TIM_Base_SetConfig+0x120>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d01f      	beq.n	8007492 <TIM_Base_SetConfig+0x9a>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007458:	d01b      	beq.n	8007492 <TIM_Base_SetConfig+0x9a>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a2f      	ldr	r2, [pc, #188]	@ (800751c <TIM_Base_SetConfig+0x124>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d017      	beq.n	8007492 <TIM_Base_SetConfig+0x9a>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a2e      	ldr	r2, [pc, #184]	@ (8007520 <TIM_Base_SetConfig+0x128>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d013      	beq.n	8007492 <TIM_Base_SetConfig+0x9a>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a2d      	ldr	r2, [pc, #180]	@ (8007524 <TIM_Base_SetConfig+0x12c>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d00f      	beq.n	8007492 <TIM_Base_SetConfig+0x9a>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a2c      	ldr	r2, [pc, #176]	@ (8007528 <TIM_Base_SetConfig+0x130>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d00b      	beq.n	8007492 <TIM_Base_SetConfig+0x9a>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a2b      	ldr	r2, [pc, #172]	@ (800752c <TIM_Base_SetConfig+0x134>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d007      	beq.n	8007492 <TIM_Base_SetConfig+0x9a>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a2a      	ldr	r2, [pc, #168]	@ (8007530 <TIM_Base_SetConfig+0x138>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d003      	beq.n	8007492 <TIM_Base_SetConfig+0x9a>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a29      	ldr	r2, [pc, #164]	@ (8007534 <TIM_Base_SetConfig+0x13c>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d108      	bne.n	80074a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	689a      	ldr	r2, [r3, #8]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a14      	ldr	r2, [pc, #80]	@ (8007518 <TIM_Base_SetConfig+0x120>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d00f      	beq.n	80074ea <TIM_Base_SetConfig+0xf2>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a16      	ldr	r2, [pc, #88]	@ (8007528 <TIM_Base_SetConfig+0x130>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d00b      	beq.n	80074ea <TIM_Base_SetConfig+0xf2>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a15      	ldr	r2, [pc, #84]	@ (800752c <TIM_Base_SetConfig+0x134>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d007      	beq.n	80074ea <TIM_Base_SetConfig+0xf2>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a14      	ldr	r2, [pc, #80]	@ (8007530 <TIM_Base_SetConfig+0x138>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d003      	beq.n	80074ea <TIM_Base_SetConfig+0xf2>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a13      	ldr	r2, [pc, #76]	@ (8007534 <TIM_Base_SetConfig+0x13c>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d103      	bne.n	80074f2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	691a      	ldr	r2, [r3, #16]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f043 0204 	orr.w	r2, r3, #4
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	601a      	str	r2, [r3, #0]
}
 800750a:	bf00      	nop
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	40010000 	.word	0x40010000
 800751c:	40000400 	.word	0x40000400
 8007520:	40000800 	.word	0x40000800
 8007524:	40000c00 	.word	0x40000c00
 8007528:	40010400 	.word	0x40010400
 800752c:	40014000 	.word	0x40014000
 8007530:	40014400 	.word	0x40014400
 8007534:	40014800 	.word	0x40014800

08007538 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a1b      	ldr	r3, [r3, #32]
 800754c:	f023 0201 	bic.w	r2, r3, #1
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	4b37      	ldr	r3, [pc, #220]	@ (8007640 <TIM_OC1_SetConfig+0x108>)
 8007564:	4013      	ands	r3, r2
 8007566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f023 0303 	bic.w	r3, r3, #3
 800756e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	4313      	orrs	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f023 0302 	bic.w	r3, r3, #2
 8007580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	4313      	orrs	r3, r2
 800758a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a2d      	ldr	r2, [pc, #180]	@ (8007644 <TIM_OC1_SetConfig+0x10c>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d00f      	beq.n	80075b4 <TIM_OC1_SetConfig+0x7c>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a2c      	ldr	r2, [pc, #176]	@ (8007648 <TIM_OC1_SetConfig+0x110>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d00b      	beq.n	80075b4 <TIM_OC1_SetConfig+0x7c>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a2b      	ldr	r2, [pc, #172]	@ (800764c <TIM_OC1_SetConfig+0x114>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d007      	beq.n	80075b4 <TIM_OC1_SetConfig+0x7c>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a2a      	ldr	r2, [pc, #168]	@ (8007650 <TIM_OC1_SetConfig+0x118>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d003      	beq.n	80075b4 <TIM_OC1_SetConfig+0x7c>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a29      	ldr	r2, [pc, #164]	@ (8007654 <TIM_OC1_SetConfig+0x11c>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d10c      	bne.n	80075ce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	f023 0308 	bic.w	r3, r3, #8
 80075ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f023 0304 	bic.w	r3, r3, #4
 80075cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a1c      	ldr	r2, [pc, #112]	@ (8007644 <TIM_OC1_SetConfig+0x10c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d00f      	beq.n	80075f6 <TIM_OC1_SetConfig+0xbe>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a1b      	ldr	r2, [pc, #108]	@ (8007648 <TIM_OC1_SetConfig+0x110>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d00b      	beq.n	80075f6 <TIM_OC1_SetConfig+0xbe>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a1a      	ldr	r2, [pc, #104]	@ (800764c <TIM_OC1_SetConfig+0x114>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d007      	beq.n	80075f6 <TIM_OC1_SetConfig+0xbe>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a19      	ldr	r2, [pc, #100]	@ (8007650 <TIM_OC1_SetConfig+0x118>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d003      	beq.n	80075f6 <TIM_OC1_SetConfig+0xbe>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a18      	ldr	r2, [pc, #96]	@ (8007654 <TIM_OC1_SetConfig+0x11c>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d111      	bne.n	800761a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	4313      	orrs	r3, r2
 800760e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	4313      	orrs	r3, r2
 8007618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	685a      	ldr	r2, [r3, #4]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	621a      	str	r2, [r3, #32]
}
 8007634:	bf00      	nop
 8007636:	371c      	adds	r7, #28
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	fffeff8f 	.word	0xfffeff8f
 8007644:	40010000 	.word	0x40010000
 8007648:	40010400 	.word	0x40010400
 800764c:	40014000 	.word	0x40014000
 8007650:	40014400 	.word	0x40014400
 8007654:	40014800 	.word	0x40014800

08007658 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007658:	b480      	push	{r7}
 800765a:	b087      	sub	sp, #28
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	f023 0210 	bic.w	r2, r3, #16
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	4b34      	ldr	r3, [pc, #208]	@ (8007754 <TIM_OC2_SetConfig+0xfc>)
 8007684:	4013      	ands	r3, r2
 8007686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800768e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	021b      	lsls	r3, r3, #8
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	4313      	orrs	r3, r2
 800769a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	f023 0320 	bic.w	r3, r3, #32
 80076a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	011b      	lsls	r3, r3, #4
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a29      	ldr	r2, [pc, #164]	@ (8007758 <TIM_OC2_SetConfig+0x100>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d003      	beq.n	80076c0 <TIM_OC2_SetConfig+0x68>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a28      	ldr	r2, [pc, #160]	@ (800775c <TIM_OC2_SetConfig+0x104>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d10d      	bne.n	80076dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	011b      	lsls	r3, r3, #4
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a1e      	ldr	r2, [pc, #120]	@ (8007758 <TIM_OC2_SetConfig+0x100>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d00f      	beq.n	8007704 <TIM_OC2_SetConfig+0xac>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a1d      	ldr	r2, [pc, #116]	@ (800775c <TIM_OC2_SetConfig+0x104>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d00b      	beq.n	8007704 <TIM_OC2_SetConfig+0xac>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a1c      	ldr	r2, [pc, #112]	@ (8007760 <TIM_OC2_SetConfig+0x108>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d007      	beq.n	8007704 <TIM_OC2_SetConfig+0xac>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a1b      	ldr	r2, [pc, #108]	@ (8007764 <TIM_OC2_SetConfig+0x10c>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d003      	beq.n	8007704 <TIM_OC2_SetConfig+0xac>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a1a      	ldr	r2, [pc, #104]	@ (8007768 <TIM_OC2_SetConfig+0x110>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d113      	bne.n	800772c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800770a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	4313      	orrs	r3, r2
 800771e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	4313      	orrs	r3, r2
 800772a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	621a      	str	r2, [r3, #32]
}
 8007746:	bf00      	nop
 8007748:	371c      	adds	r7, #28
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	feff8fff 	.word	0xfeff8fff
 8007758:	40010000 	.word	0x40010000
 800775c:	40010400 	.word	0x40010400
 8007760:	40014000 	.word	0x40014000
 8007764:	40014400 	.word	0x40014400
 8007768:	40014800 	.word	0x40014800

0800776c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a1b      	ldr	r3, [r3, #32]
 8007780:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	4b33      	ldr	r3, [pc, #204]	@ (8007864 <TIM_OC3_SetConfig+0xf8>)
 8007798:	4013      	ands	r3, r2
 800779a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f023 0303 	bic.w	r3, r3, #3
 80077a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80077b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	021b      	lsls	r3, r3, #8
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	4313      	orrs	r3, r2
 80077c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a28      	ldr	r2, [pc, #160]	@ (8007868 <TIM_OC3_SetConfig+0xfc>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d003      	beq.n	80077d2 <TIM_OC3_SetConfig+0x66>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a27      	ldr	r2, [pc, #156]	@ (800786c <TIM_OC3_SetConfig+0x100>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d10d      	bne.n	80077ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80077d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	021b      	lsls	r3, r3, #8
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007868 <TIM_OC3_SetConfig+0xfc>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d00f      	beq.n	8007816 <TIM_OC3_SetConfig+0xaa>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a1c      	ldr	r2, [pc, #112]	@ (800786c <TIM_OC3_SetConfig+0x100>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d00b      	beq.n	8007816 <TIM_OC3_SetConfig+0xaa>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a1b      	ldr	r2, [pc, #108]	@ (8007870 <TIM_OC3_SetConfig+0x104>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d007      	beq.n	8007816 <TIM_OC3_SetConfig+0xaa>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a1a      	ldr	r2, [pc, #104]	@ (8007874 <TIM_OC3_SetConfig+0x108>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d003      	beq.n	8007816 <TIM_OC3_SetConfig+0xaa>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a19      	ldr	r2, [pc, #100]	@ (8007878 <TIM_OC3_SetConfig+0x10c>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d113      	bne.n	800783e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800781c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	011b      	lsls	r3, r3, #4
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	4313      	orrs	r3, r2
 8007830:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	011b      	lsls	r3, r3, #4
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	4313      	orrs	r3, r2
 800783c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	621a      	str	r2, [r3, #32]
}
 8007858:	bf00      	nop
 800785a:	371c      	adds	r7, #28
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	fffeff8f 	.word	0xfffeff8f
 8007868:	40010000 	.word	0x40010000
 800786c:	40010400 	.word	0x40010400
 8007870:	40014000 	.word	0x40014000
 8007874:	40014400 	.word	0x40014400
 8007878:	40014800 	.word	0x40014800

0800787c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	4b24      	ldr	r3, [pc, #144]	@ (8007938 <TIM_OC4_SetConfig+0xbc>)
 80078a8:	4013      	ands	r3, r2
 80078aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	021b      	lsls	r3, r3, #8
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	4313      	orrs	r3, r2
 80078be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80078c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	031b      	lsls	r3, r3, #12
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a19      	ldr	r2, [pc, #100]	@ (800793c <TIM_OC4_SetConfig+0xc0>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d00f      	beq.n	80078fc <TIM_OC4_SetConfig+0x80>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a18      	ldr	r2, [pc, #96]	@ (8007940 <TIM_OC4_SetConfig+0xc4>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d00b      	beq.n	80078fc <TIM_OC4_SetConfig+0x80>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a17      	ldr	r2, [pc, #92]	@ (8007944 <TIM_OC4_SetConfig+0xc8>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d007      	beq.n	80078fc <TIM_OC4_SetConfig+0x80>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a16      	ldr	r2, [pc, #88]	@ (8007948 <TIM_OC4_SetConfig+0xcc>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d003      	beq.n	80078fc <TIM_OC4_SetConfig+0x80>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a15      	ldr	r2, [pc, #84]	@ (800794c <TIM_OC4_SetConfig+0xd0>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d109      	bne.n	8007910 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007902:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	019b      	lsls	r3, r3, #6
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	4313      	orrs	r3, r2
 800790e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	621a      	str	r2, [r3, #32]
}
 800792a:	bf00      	nop
 800792c:	371c      	adds	r7, #28
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	feff8fff 	.word	0xfeff8fff
 800793c:	40010000 	.word	0x40010000
 8007940:	40010400 	.word	0x40010400
 8007944:	40014000 	.word	0x40014000
 8007948:	40014400 	.word	0x40014400
 800794c:	40014800 	.word	0x40014800

08007950 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007950:	b480      	push	{r7}
 8007952:	b087      	sub	sp, #28
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	4b21      	ldr	r3, [pc, #132]	@ (8007a00 <TIM_OC5_SetConfig+0xb0>)
 800797c:	4013      	ands	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	4313      	orrs	r3, r2
 8007988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007990:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	041b      	lsls	r3, r3, #16
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	4313      	orrs	r3, r2
 800799c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a18      	ldr	r2, [pc, #96]	@ (8007a04 <TIM_OC5_SetConfig+0xb4>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d00f      	beq.n	80079c6 <TIM_OC5_SetConfig+0x76>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a17      	ldr	r2, [pc, #92]	@ (8007a08 <TIM_OC5_SetConfig+0xb8>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d00b      	beq.n	80079c6 <TIM_OC5_SetConfig+0x76>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a16      	ldr	r2, [pc, #88]	@ (8007a0c <TIM_OC5_SetConfig+0xbc>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d007      	beq.n	80079c6 <TIM_OC5_SetConfig+0x76>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a15      	ldr	r2, [pc, #84]	@ (8007a10 <TIM_OC5_SetConfig+0xc0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d003      	beq.n	80079c6 <TIM_OC5_SetConfig+0x76>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a14      	ldr	r2, [pc, #80]	@ (8007a14 <TIM_OC5_SetConfig+0xc4>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d109      	bne.n	80079da <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	021b      	lsls	r3, r3, #8
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	621a      	str	r2, [r3, #32]
}
 80079f4:	bf00      	nop
 80079f6:	371c      	adds	r7, #28
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	fffeff8f 	.word	0xfffeff8f
 8007a04:	40010000 	.word	0x40010000
 8007a08:	40010400 	.word	0x40010400
 8007a0c:	40014000 	.word	0x40014000
 8007a10:	40014400 	.word	0x40014400
 8007a14:	40014800 	.word	0x40014800

08007a18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a1b      	ldr	r3, [r3, #32]
 8007a2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	4b22      	ldr	r3, [pc, #136]	@ (8007acc <TIM_OC6_SetConfig+0xb4>)
 8007a44:	4013      	ands	r3, r2
 8007a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	021b      	lsls	r3, r3, #8
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	051b      	lsls	r3, r3, #20
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a19      	ldr	r2, [pc, #100]	@ (8007ad0 <TIM_OC6_SetConfig+0xb8>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d00f      	beq.n	8007a90 <TIM_OC6_SetConfig+0x78>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a18      	ldr	r2, [pc, #96]	@ (8007ad4 <TIM_OC6_SetConfig+0xbc>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d00b      	beq.n	8007a90 <TIM_OC6_SetConfig+0x78>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a17      	ldr	r2, [pc, #92]	@ (8007ad8 <TIM_OC6_SetConfig+0xc0>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d007      	beq.n	8007a90 <TIM_OC6_SetConfig+0x78>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a16      	ldr	r2, [pc, #88]	@ (8007adc <TIM_OC6_SetConfig+0xc4>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d003      	beq.n	8007a90 <TIM_OC6_SetConfig+0x78>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a15      	ldr	r2, [pc, #84]	@ (8007ae0 <TIM_OC6_SetConfig+0xc8>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d109      	bne.n	8007aa4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	029b      	lsls	r3, r3, #10
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	621a      	str	r2, [r3, #32]
}
 8007abe:	bf00      	nop
 8007ac0:	371c      	adds	r7, #28
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	feff8fff 	.word	0xfeff8fff
 8007ad0:	40010000 	.word	0x40010000
 8007ad4:	40010400 	.word	0x40010400
 8007ad8:	40014000 	.word	0x40014000
 8007adc:	40014400 	.word	0x40014400
 8007ae0:	40014800 	.word	0x40014800

08007ae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	f023 0201 	bic.w	r2, r3, #1
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	011b      	lsls	r3, r3, #4
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f023 030a 	bic.w	r3, r3, #10
 8007b20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	621a      	str	r2, [r3, #32]
}
 8007b36:	bf00      	nop
 8007b38:	371c      	adds	r7, #28
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b087      	sub	sp, #28
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	60f8      	str	r0, [r7, #12]
 8007b4a:	60b9      	str	r1, [r7, #8]
 8007b4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6a1b      	ldr	r3, [r3, #32]
 8007b58:	f023 0210 	bic.w	r2, r3, #16
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	031b      	lsls	r3, r3, #12
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007b7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	011b      	lsls	r3, r3, #4
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	621a      	str	r2, [r3, #32]
}
 8007b96:	bf00      	nop
 8007b98:	371c      	adds	r7, #28
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
	...

08007ba4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	4b09      	ldr	r3, [pc, #36]	@ (8007bdc <TIM_ITRx_SetConfig+0x38>)
 8007bb8:	4013      	ands	r3, r2
 8007bba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bbc:	683a      	ldr	r2, [r7, #0]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	f043 0307 	orr.w	r3, r3, #7
 8007bc6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	609a      	str	r2, [r3, #8]
}
 8007bce:	bf00      	nop
 8007bd0:	3714      	adds	r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	ffcfff8f 	.word	0xffcfff8f

08007be0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b087      	sub	sp, #28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007bfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	021a      	lsls	r2, r3, #8
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	431a      	orrs	r2, r3
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	609a      	str	r2, [r3, #8]
}
 8007c14:	bf00      	nop
 8007c16:	371c      	adds	r7, #28
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d101      	bne.n	8007c38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c34:	2302      	movs	r3, #2
 8007c36:	e06d      	b.n	8007d14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2202      	movs	r2, #2
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a30      	ldr	r2, [pc, #192]	@ (8007d20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d004      	beq.n	8007c6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a2f      	ldr	r2, [pc, #188]	@ (8007d24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d108      	bne.n	8007c7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007c72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a20      	ldr	r2, [pc, #128]	@ (8007d20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d022      	beq.n	8007ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007caa:	d01d      	beq.n	8007ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8007d28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d018      	beq.n	8007ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a1c      	ldr	r2, [pc, #112]	@ (8007d2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d013      	beq.n	8007ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8007d30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d00e      	beq.n	8007ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a15      	ldr	r2, [pc, #84]	@ (8007d24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d009      	beq.n	8007ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a16      	ldr	r2, [pc, #88]	@ (8007d34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d004      	beq.n	8007ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a15      	ldr	r2, [pc, #84]	@ (8007d38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d10c      	bne.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	40010000 	.word	0x40010000
 8007d24:	40010400 	.word	0x40010400
 8007d28:	40000400 	.word	0x40000400
 8007d2c:	40000800 	.word	0x40000800
 8007d30:	40000c00 	.word	0x40000c00
 8007d34:	40001800 	.word	0x40001800
 8007d38:	40014000 	.word	0x40014000

08007d3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007d46:	2300      	movs	r3, #0
 8007d48:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d101      	bne.n	8007d58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d54:	2302      	movs	r3, #2
 8007d56:	e065      	b.n	8007e24 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	041b      	lsls	r3, r3, #16
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a16      	ldr	r2, [pc, #88]	@ (8007e30 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d004      	beq.n	8007de6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a14      	ldr	r2, [pc, #80]	@ (8007e34 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d115      	bne.n	8007e12 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df0:	051b      	lsls	r3, r3, #20
 8007df2:	4313      	orrs	r3, r2
 8007df4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	40010000 	.word	0x40010000
 8007e34:	40010400 	.word	0x40010400

08007e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d101      	bne.n	8007e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e042      	b.n	8007f0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d106      	bne.n	8007e9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f7fa fa6d 	bl	8002378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2224      	movs	r2, #36	@ 0x24
 8007ea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f022 0201 	bic.w	r2, r2, #1
 8007eb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d002      	beq.n	8007ec4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fe1e 	bl	8008b00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f8b3 	bl	8008030 <UART_SetConfig>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d101      	bne.n	8007ed4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e01b      	b.n	8007f0c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	685a      	ldr	r2, [r3, #4]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ee2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	689a      	ldr	r2, [r3, #8]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ef2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f042 0201 	orr.w	r2, r2, #1
 8007f02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fe9d 	bl	8008c44 <UART_CheckIdleState>
 8007f0a:	4603      	mov	r3, r0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b08a      	sub	sp, #40	@ 0x28
 8007f18:	af02      	add	r7, sp, #8
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	603b      	str	r3, [r7, #0]
 8007f20:	4613      	mov	r3, r2
 8007f22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f2a:	2b20      	cmp	r3, #32
 8007f2c:	d17b      	bne.n	8008026 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <HAL_UART_Transmit+0x26>
 8007f34:	88fb      	ldrh	r3, [r7, #6]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e074      	b.n	8008028 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2221      	movs	r2, #33	@ 0x21
 8007f4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f4e:	f7fa fc35 	bl	80027bc <HAL_GetTick>
 8007f52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	88fa      	ldrh	r2, [r7, #6]
 8007f58:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	88fa      	ldrh	r2, [r7, #6]
 8007f60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f6c:	d108      	bne.n	8007f80 <HAL_UART_Transmit+0x6c>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d104      	bne.n	8007f80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007f76:	2300      	movs	r3, #0
 8007f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	61bb      	str	r3, [r7, #24]
 8007f7e:	e003      	b.n	8007f88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f84:	2300      	movs	r3, #0
 8007f86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f88:	e030      	b.n	8007fec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	2200      	movs	r2, #0
 8007f92:	2180      	movs	r1, #128	@ 0x80
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f000 feff 	bl	8008d98 <UART_WaitOnFlagUntilTimeout>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d005      	beq.n	8007fac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2220      	movs	r2, #32
 8007fa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	e03d      	b.n	8008028 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d10b      	bne.n	8007fca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fc0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	3302      	adds	r3, #2
 8007fc6:	61bb      	str	r3, [r7, #24]
 8007fc8:	e007      	b.n	8007fda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	781a      	ldrb	r2, [r3, #0]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1c8      	bne.n	8007f8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	2200      	movs	r2, #0
 8008000:	2140      	movs	r1, #64	@ 0x40
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f000 fec8 	bl	8008d98 <UART_WaitOnFlagUntilTimeout>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d005      	beq.n	800801a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2220      	movs	r2, #32
 8008012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e006      	b.n	8008028 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2220      	movs	r2, #32
 800801e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	e000      	b.n	8008028 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008026:	2302      	movs	r3, #2
  }
}
 8008028:	4618      	mov	r0, r3
 800802a:	3720      	adds	r7, #32
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008034:	b092      	sub	sp, #72	@ 0x48
 8008036:	af00      	add	r7, sp, #0
 8008038:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	689a      	ldr	r2, [r3, #8]
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	431a      	orrs	r2, r3
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	431a      	orrs	r2, r3
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	69db      	ldr	r3, [r3, #28]
 8008054:	4313      	orrs	r3, r2
 8008056:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	4bbe      	ldr	r3, [pc, #760]	@ (8008358 <UART_SetConfig+0x328>)
 8008060:	4013      	ands	r3, r2
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	6812      	ldr	r2, [r2, #0]
 8008066:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008068:	430b      	orrs	r3, r1
 800806a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	68da      	ldr	r2, [r3, #12]
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	430a      	orrs	r2, r1
 8008080:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4ab3      	ldr	r2, [pc, #716]	@ (800835c <UART_SetConfig+0x32c>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d004      	beq.n	800809c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	6a1b      	ldr	r3, [r3, #32]
 8008096:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008098:	4313      	orrs	r3, r2
 800809a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689a      	ldr	r2, [r3, #8]
 80080a2:	4baf      	ldr	r3, [pc, #700]	@ (8008360 <UART_SetConfig+0x330>)
 80080a4:	4013      	ands	r3, r2
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	6812      	ldr	r2, [r2, #0]
 80080aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80080ac:	430b      	orrs	r3, r1
 80080ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b6:	f023 010f 	bic.w	r1, r3, #15
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	430a      	orrs	r2, r1
 80080c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4aa6      	ldr	r2, [pc, #664]	@ (8008364 <UART_SetConfig+0x334>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d177      	bne.n	80081c0 <UART_SetConfig+0x190>
 80080d0:	4ba5      	ldr	r3, [pc, #660]	@ (8008368 <UART_SetConfig+0x338>)
 80080d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080d8:	2b28      	cmp	r3, #40	@ 0x28
 80080da:	d86d      	bhi.n	80081b8 <UART_SetConfig+0x188>
 80080dc:	a201      	add	r2, pc, #4	@ (adr r2, 80080e4 <UART_SetConfig+0xb4>)
 80080de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e2:	bf00      	nop
 80080e4:	08008189 	.word	0x08008189
 80080e8:	080081b9 	.word	0x080081b9
 80080ec:	080081b9 	.word	0x080081b9
 80080f0:	080081b9 	.word	0x080081b9
 80080f4:	080081b9 	.word	0x080081b9
 80080f8:	080081b9 	.word	0x080081b9
 80080fc:	080081b9 	.word	0x080081b9
 8008100:	080081b9 	.word	0x080081b9
 8008104:	08008191 	.word	0x08008191
 8008108:	080081b9 	.word	0x080081b9
 800810c:	080081b9 	.word	0x080081b9
 8008110:	080081b9 	.word	0x080081b9
 8008114:	080081b9 	.word	0x080081b9
 8008118:	080081b9 	.word	0x080081b9
 800811c:	080081b9 	.word	0x080081b9
 8008120:	080081b9 	.word	0x080081b9
 8008124:	08008199 	.word	0x08008199
 8008128:	080081b9 	.word	0x080081b9
 800812c:	080081b9 	.word	0x080081b9
 8008130:	080081b9 	.word	0x080081b9
 8008134:	080081b9 	.word	0x080081b9
 8008138:	080081b9 	.word	0x080081b9
 800813c:	080081b9 	.word	0x080081b9
 8008140:	080081b9 	.word	0x080081b9
 8008144:	080081a1 	.word	0x080081a1
 8008148:	080081b9 	.word	0x080081b9
 800814c:	080081b9 	.word	0x080081b9
 8008150:	080081b9 	.word	0x080081b9
 8008154:	080081b9 	.word	0x080081b9
 8008158:	080081b9 	.word	0x080081b9
 800815c:	080081b9 	.word	0x080081b9
 8008160:	080081b9 	.word	0x080081b9
 8008164:	080081a9 	.word	0x080081a9
 8008168:	080081b9 	.word	0x080081b9
 800816c:	080081b9 	.word	0x080081b9
 8008170:	080081b9 	.word	0x080081b9
 8008174:	080081b9 	.word	0x080081b9
 8008178:	080081b9 	.word	0x080081b9
 800817c:	080081b9 	.word	0x080081b9
 8008180:	080081b9 	.word	0x080081b9
 8008184:	080081b1 	.word	0x080081b1
 8008188:	2301      	movs	r3, #1
 800818a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800818e:	e222      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008190:	2304      	movs	r3, #4
 8008192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008196:	e21e      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008198:	2308      	movs	r3, #8
 800819a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800819e:	e21a      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80081a0:	2310      	movs	r3, #16
 80081a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081a6:	e216      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80081a8:	2320      	movs	r3, #32
 80081aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ae:	e212      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80081b0:	2340      	movs	r3, #64	@ 0x40
 80081b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081b6:	e20e      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80081b8:	2380      	movs	r3, #128	@ 0x80
 80081ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081be:	e20a      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a69      	ldr	r2, [pc, #420]	@ (800836c <UART_SetConfig+0x33c>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d130      	bne.n	800822c <UART_SetConfig+0x1fc>
 80081ca:	4b67      	ldr	r3, [pc, #412]	@ (8008368 <UART_SetConfig+0x338>)
 80081cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081ce:	f003 0307 	and.w	r3, r3, #7
 80081d2:	2b05      	cmp	r3, #5
 80081d4:	d826      	bhi.n	8008224 <UART_SetConfig+0x1f4>
 80081d6:	a201      	add	r2, pc, #4	@ (adr r2, 80081dc <UART_SetConfig+0x1ac>)
 80081d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081dc:	080081f5 	.word	0x080081f5
 80081e0:	080081fd 	.word	0x080081fd
 80081e4:	08008205 	.word	0x08008205
 80081e8:	0800820d 	.word	0x0800820d
 80081ec:	08008215 	.word	0x08008215
 80081f0:	0800821d 	.word	0x0800821d
 80081f4:	2300      	movs	r3, #0
 80081f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081fa:	e1ec      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80081fc:	2304      	movs	r3, #4
 80081fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008202:	e1e8      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008204:	2308      	movs	r3, #8
 8008206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800820a:	e1e4      	b.n	80085d6 <UART_SetConfig+0x5a6>
 800820c:	2310      	movs	r3, #16
 800820e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008212:	e1e0      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008214:	2320      	movs	r3, #32
 8008216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800821a:	e1dc      	b.n	80085d6 <UART_SetConfig+0x5a6>
 800821c:	2340      	movs	r3, #64	@ 0x40
 800821e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008222:	e1d8      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008224:	2380      	movs	r3, #128	@ 0x80
 8008226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800822a:	e1d4      	b.n	80085d6 <UART_SetConfig+0x5a6>
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a4f      	ldr	r2, [pc, #316]	@ (8008370 <UART_SetConfig+0x340>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d130      	bne.n	8008298 <UART_SetConfig+0x268>
 8008236:	4b4c      	ldr	r3, [pc, #304]	@ (8008368 <UART_SetConfig+0x338>)
 8008238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800823a:	f003 0307 	and.w	r3, r3, #7
 800823e:	2b05      	cmp	r3, #5
 8008240:	d826      	bhi.n	8008290 <UART_SetConfig+0x260>
 8008242:	a201      	add	r2, pc, #4	@ (adr r2, 8008248 <UART_SetConfig+0x218>)
 8008244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008248:	08008261 	.word	0x08008261
 800824c:	08008269 	.word	0x08008269
 8008250:	08008271 	.word	0x08008271
 8008254:	08008279 	.word	0x08008279
 8008258:	08008281 	.word	0x08008281
 800825c:	08008289 	.word	0x08008289
 8008260:	2300      	movs	r3, #0
 8008262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008266:	e1b6      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008268:	2304      	movs	r3, #4
 800826a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800826e:	e1b2      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008270:	2308      	movs	r3, #8
 8008272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008276:	e1ae      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008278:	2310      	movs	r3, #16
 800827a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800827e:	e1aa      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008280:	2320      	movs	r3, #32
 8008282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008286:	e1a6      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008288:	2340      	movs	r3, #64	@ 0x40
 800828a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800828e:	e1a2      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008290:	2380      	movs	r3, #128	@ 0x80
 8008292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008296:	e19e      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a35      	ldr	r2, [pc, #212]	@ (8008374 <UART_SetConfig+0x344>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d130      	bne.n	8008304 <UART_SetConfig+0x2d4>
 80082a2:	4b31      	ldr	r3, [pc, #196]	@ (8008368 <UART_SetConfig+0x338>)
 80082a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082a6:	f003 0307 	and.w	r3, r3, #7
 80082aa:	2b05      	cmp	r3, #5
 80082ac:	d826      	bhi.n	80082fc <UART_SetConfig+0x2cc>
 80082ae:	a201      	add	r2, pc, #4	@ (adr r2, 80082b4 <UART_SetConfig+0x284>)
 80082b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b4:	080082cd 	.word	0x080082cd
 80082b8:	080082d5 	.word	0x080082d5
 80082bc:	080082dd 	.word	0x080082dd
 80082c0:	080082e5 	.word	0x080082e5
 80082c4:	080082ed 	.word	0x080082ed
 80082c8:	080082f5 	.word	0x080082f5
 80082cc:	2300      	movs	r3, #0
 80082ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d2:	e180      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80082d4:	2304      	movs	r3, #4
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082da:	e17c      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80082dc:	2308      	movs	r3, #8
 80082de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082e2:	e178      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80082e4:	2310      	movs	r3, #16
 80082e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ea:	e174      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80082ec:	2320      	movs	r3, #32
 80082ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082f2:	e170      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80082f4:	2340      	movs	r3, #64	@ 0x40
 80082f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082fa:	e16c      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80082fc:	2380      	movs	r3, #128	@ 0x80
 80082fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008302:	e168      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a1b      	ldr	r2, [pc, #108]	@ (8008378 <UART_SetConfig+0x348>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d142      	bne.n	8008394 <UART_SetConfig+0x364>
 800830e:	4b16      	ldr	r3, [pc, #88]	@ (8008368 <UART_SetConfig+0x338>)
 8008310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008312:	f003 0307 	and.w	r3, r3, #7
 8008316:	2b05      	cmp	r3, #5
 8008318:	d838      	bhi.n	800838c <UART_SetConfig+0x35c>
 800831a:	a201      	add	r2, pc, #4	@ (adr r2, 8008320 <UART_SetConfig+0x2f0>)
 800831c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008320:	08008339 	.word	0x08008339
 8008324:	08008341 	.word	0x08008341
 8008328:	08008349 	.word	0x08008349
 800832c:	08008351 	.word	0x08008351
 8008330:	0800837d 	.word	0x0800837d
 8008334:	08008385 	.word	0x08008385
 8008338:	2300      	movs	r3, #0
 800833a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800833e:	e14a      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008340:	2304      	movs	r3, #4
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008346:	e146      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008348:	2308      	movs	r3, #8
 800834a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800834e:	e142      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008350:	2310      	movs	r3, #16
 8008352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008356:	e13e      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008358:	cfff69f3 	.word	0xcfff69f3
 800835c:	58000c00 	.word	0x58000c00
 8008360:	11fff4ff 	.word	0x11fff4ff
 8008364:	40011000 	.word	0x40011000
 8008368:	58024400 	.word	0x58024400
 800836c:	40004400 	.word	0x40004400
 8008370:	40004800 	.word	0x40004800
 8008374:	40004c00 	.word	0x40004c00
 8008378:	40005000 	.word	0x40005000
 800837c:	2320      	movs	r3, #32
 800837e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008382:	e128      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008384:	2340      	movs	r3, #64	@ 0x40
 8008386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800838a:	e124      	b.n	80085d6 <UART_SetConfig+0x5a6>
 800838c:	2380      	movs	r3, #128	@ 0x80
 800838e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008392:	e120      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4acb      	ldr	r2, [pc, #812]	@ (80086c8 <UART_SetConfig+0x698>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d176      	bne.n	800848c <UART_SetConfig+0x45c>
 800839e:	4bcb      	ldr	r3, [pc, #812]	@ (80086cc <UART_SetConfig+0x69c>)
 80083a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80083a6:	2b28      	cmp	r3, #40	@ 0x28
 80083a8:	d86c      	bhi.n	8008484 <UART_SetConfig+0x454>
 80083aa:	a201      	add	r2, pc, #4	@ (adr r2, 80083b0 <UART_SetConfig+0x380>)
 80083ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b0:	08008455 	.word	0x08008455
 80083b4:	08008485 	.word	0x08008485
 80083b8:	08008485 	.word	0x08008485
 80083bc:	08008485 	.word	0x08008485
 80083c0:	08008485 	.word	0x08008485
 80083c4:	08008485 	.word	0x08008485
 80083c8:	08008485 	.word	0x08008485
 80083cc:	08008485 	.word	0x08008485
 80083d0:	0800845d 	.word	0x0800845d
 80083d4:	08008485 	.word	0x08008485
 80083d8:	08008485 	.word	0x08008485
 80083dc:	08008485 	.word	0x08008485
 80083e0:	08008485 	.word	0x08008485
 80083e4:	08008485 	.word	0x08008485
 80083e8:	08008485 	.word	0x08008485
 80083ec:	08008485 	.word	0x08008485
 80083f0:	08008465 	.word	0x08008465
 80083f4:	08008485 	.word	0x08008485
 80083f8:	08008485 	.word	0x08008485
 80083fc:	08008485 	.word	0x08008485
 8008400:	08008485 	.word	0x08008485
 8008404:	08008485 	.word	0x08008485
 8008408:	08008485 	.word	0x08008485
 800840c:	08008485 	.word	0x08008485
 8008410:	0800846d 	.word	0x0800846d
 8008414:	08008485 	.word	0x08008485
 8008418:	08008485 	.word	0x08008485
 800841c:	08008485 	.word	0x08008485
 8008420:	08008485 	.word	0x08008485
 8008424:	08008485 	.word	0x08008485
 8008428:	08008485 	.word	0x08008485
 800842c:	08008485 	.word	0x08008485
 8008430:	08008475 	.word	0x08008475
 8008434:	08008485 	.word	0x08008485
 8008438:	08008485 	.word	0x08008485
 800843c:	08008485 	.word	0x08008485
 8008440:	08008485 	.word	0x08008485
 8008444:	08008485 	.word	0x08008485
 8008448:	08008485 	.word	0x08008485
 800844c:	08008485 	.word	0x08008485
 8008450:	0800847d 	.word	0x0800847d
 8008454:	2301      	movs	r3, #1
 8008456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800845a:	e0bc      	b.n	80085d6 <UART_SetConfig+0x5a6>
 800845c:	2304      	movs	r3, #4
 800845e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008462:	e0b8      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008464:	2308      	movs	r3, #8
 8008466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800846a:	e0b4      	b.n	80085d6 <UART_SetConfig+0x5a6>
 800846c:	2310      	movs	r3, #16
 800846e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008472:	e0b0      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008474:	2320      	movs	r3, #32
 8008476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800847a:	e0ac      	b.n	80085d6 <UART_SetConfig+0x5a6>
 800847c:	2340      	movs	r3, #64	@ 0x40
 800847e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008482:	e0a8      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008484:	2380      	movs	r3, #128	@ 0x80
 8008486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800848a:	e0a4      	b.n	80085d6 <UART_SetConfig+0x5a6>
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a8f      	ldr	r2, [pc, #572]	@ (80086d0 <UART_SetConfig+0x6a0>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d130      	bne.n	80084f8 <UART_SetConfig+0x4c8>
 8008496:	4b8d      	ldr	r3, [pc, #564]	@ (80086cc <UART_SetConfig+0x69c>)
 8008498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800849a:	f003 0307 	and.w	r3, r3, #7
 800849e:	2b05      	cmp	r3, #5
 80084a0:	d826      	bhi.n	80084f0 <UART_SetConfig+0x4c0>
 80084a2:	a201      	add	r2, pc, #4	@ (adr r2, 80084a8 <UART_SetConfig+0x478>)
 80084a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a8:	080084c1 	.word	0x080084c1
 80084ac:	080084c9 	.word	0x080084c9
 80084b0:	080084d1 	.word	0x080084d1
 80084b4:	080084d9 	.word	0x080084d9
 80084b8:	080084e1 	.word	0x080084e1
 80084bc:	080084e9 	.word	0x080084e9
 80084c0:	2300      	movs	r3, #0
 80084c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084c6:	e086      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80084c8:	2304      	movs	r3, #4
 80084ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ce:	e082      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80084d0:	2308      	movs	r3, #8
 80084d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084d6:	e07e      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80084d8:	2310      	movs	r3, #16
 80084da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084de:	e07a      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80084e0:	2320      	movs	r3, #32
 80084e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084e6:	e076      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80084e8:	2340      	movs	r3, #64	@ 0x40
 80084ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ee:	e072      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80084f0:	2380      	movs	r3, #128	@ 0x80
 80084f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084f6:	e06e      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a75      	ldr	r2, [pc, #468]	@ (80086d4 <UART_SetConfig+0x6a4>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d130      	bne.n	8008564 <UART_SetConfig+0x534>
 8008502:	4b72      	ldr	r3, [pc, #456]	@ (80086cc <UART_SetConfig+0x69c>)
 8008504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008506:	f003 0307 	and.w	r3, r3, #7
 800850a:	2b05      	cmp	r3, #5
 800850c:	d826      	bhi.n	800855c <UART_SetConfig+0x52c>
 800850e:	a201      	add	r2, pc, #4	@ (adr r2, 8008514 <UART_SetConfig+0x4e4>)
 8008510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008514:	0800852d 	.word	0x0800852d
 8008518:	08008535 	.word	0x08008535
 800851c:	0800853d 	.word	0x0800853d
 8008520:	08008545 	.word	0x08008545
 8008524:	0800854d 	.word	0x0800854d
 8008528:	08008555 	.word	0x08008555
 800852c:	2300      	movs	r3, #0
 800852e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008532:	e050      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008534:	2304      	movs	r3, #4
 8008536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800853a:	e04c      	b.n	80085d6 <UART_SetConfig+0x5a6>
 800853c:	2308      	movs	r3, #8
 800853e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008542:	e048      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008544:	2310      	movs	r3, #16
 8008546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800854a:	e044      	b.n	80085d6 <UART_SetConfig+0x5a6>
 800854c:	2320      	movs	r3, #32
 800854e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008552:	e040      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008554:	2340      	movs	r3, #64	@ 0x40
 8008556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800855a:	e03c      	b.n	80085d6 <UART_SetConfig+0x5a6>
 800855c:	2380      	movs	r3, #128	@ 0x80
 800855e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008562:	e038      	b.n	80085d6 <UART_SetConfig+0x5a6>
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a5b      	ldr	r2, [pc, #364]	@ (80086d8 <UART_SetConfig+0x6a8>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d130      	bne.n	80085d0 <UART_SetConfig+0x5a0>
 800856e:	4b57      	ldr	r3, [pc, #348]	@ (80086cc <UART_SetConfig+0x69c>)
 8008570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008572:	f003 0307 	and.w	r3, r3, #7
 8008576:	2b05      	cmp	r3, #5
 8008578:	d826      	bhi.n	80085c8 <UART_SetConfig+0x598>
 800857a:	a201      	add	r2, pc, #4	@ (adr r2, 8008580 <UART_SetConfig+0x550>)
 800857c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008580:	08008599 	.word	0x08008599
 8008584:	080085a1 	.word	0x080085a1
 8008588:	080085a9 	.word	0x080085a9
 800858c:	080085b1 	.word	0x080085b1
 8008590:	080085b9 	.word	0x080085b9
 8008594:	080085c1 	.word	0x080085c1
 8008598:	2302      	movs	r3, #2
 800859a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800859e:	e01a      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80085a0:	2304      	movs	r3, #4
 80085a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085a6:	e016      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80085a8:	2308      	movs	r3, #8
 80085aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ae:	e012      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80085b0:	2310      	movs	r3, #16
 80085b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085b6:	e00e      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80085b8:	2320      	movs	r3, #32
 80085ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085be:	e00a      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80085c0:	2340      	movs	r3, #64	@ 0x40
 80085c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085c6:	e006      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80085c8:	2380      	movs	r3, #128	@ 0x80
 80085ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ce:	e002      	b.n	80085d6 <UART_SetConfig+0x5a6>
 80085d0:	2380      	movs	r3, #128	@ 0x80
 80085d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a3f      	ldr	r2, [pc, #252]	@ (80086d8 <UART_SetConfig+0x6a8>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	f040 80f8 	bne.w	80087d2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80085e6:	2b20      	cmp	r3, #32
 80085e8:	dc46      	bgt.n	8008678 <UART_SetConfig+0x648>
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	f2c0 8082 	blt.w	80086f4 <UART_SetConfig+0x6c4>
 80085f0:	3b02      	subs	r3, #2
 80085f2:	2b1e      	cmp	r3, #30
 80085f4:	d87e      	bhi.n	80086f4 <UART_SetConfig+0x6c4>
 80085f6:	a201      	add	r2, pc, #4	@ (adr r2, 80085fc <UART_SetConfig+0x5cc>)
 80085f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fc:	0800867f 	.word	0x0800867f
 8008600:	080086f5 	.word	0x080086f5
 8008604:	08008687 	.word	0x08008687
 8008608:	080086f5 	.word	0x080086f5
 800860c:	080086f5 	.word	0x080086f5
 8008610:	080086f5 	.word	0x080086f5
 8008614:	08008697 	.word	0x08008697
 8008618:	080086f5 	.word	0x080086f5
 800861c:	080086f5 	.word	0x080086f5
 8008620:	080086f5 	.word	0x080086f5
 8008624:	080086f5 	.word	0x080086f5
 8008628:	080086f5 	.word	0x080086f5
 800862c:	080086f5 	.word	0x080086f5
 8008630:	080086f5 	.word	0x080086f5
 8008634:	080086a7 	.word	0x080086a7
 8008638:	080086f5 	.word	0x080086f5
 800863c:	080086f5 	.word	0x080086f5
 8008640:	080086f5 	.word	0x080086f5
 8008644:	080086f5 	.word	0x080086f5
 8008648:	080086f5 	.word	0x080086f5
 800864c:	080086f5 	.word	0x080086f5
 8008650:	080086f5 	.word	0x080086f5
 8008654:	080086f5 	.word	0x080086f5
 8008658:	080086f5 	.word	0x080086f5
 800865c:	080086f5 	.word	0x080086f5
 8008660:	080086f5 	.word	0x080086f5
 8008664:	080086f5 	.word	0x080086f5
 8008668:	080086f5 	.word	0x080086f5
 800866c:	080086f5 	.word	0x080086f5
 8008670:	080086f5 	.word	0x080086f5
 8008674:	080086e7 	.word	0x080086e7
 8008678:	2b40      	cmp	r3, #64	@ 0x40
 800867a:	d037      	beq.n	80086ec <UART_SetConfig+0x6bc>
 800867c:	e03a      	b.n	80086f4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800867e:	f7fc fef9 	bl	8005474 <HAL_RCCEx_GetD3PCLK1Freq>
 8008682:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008684:	e03c      	b.n	8008700 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008686:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800868a:	4618      	mov	r0, r3
 800868c:	f7fc ff08 	bl	80054a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008694:	e034      	b.n	8008700 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008696:	f107 0318 	add.w	r3, r7, #24
 800869a:	4618      	mov	r0, r3
 800869c:	f7fd f854 	bl	8005748 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086a4:	e02c      	b.n	8008700 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086a6:	4b09      	ldr	r3, [pc, #36]	@ (80086cc <UART_SetConfig+0x69c>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0320 	and.w	r3, r3, #32
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d016      	beq.n	80086e0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80086b2:	4b06      	ldr	r3, [pc, #24]	@ (80086cc <UART_SetConfig+0x69c>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	08db      	lsrs	r3, r3, #3
 80086b8:	f003 0303 	and.w	r3, r3, #3
 80086bc:	4a07      	ldr	r2, [pc, #28]	@ (80086dc <UART_SetConfig+0x6ac>)
 80086be:	fa22 f303 	lsr.w	r3, r2, r3
 80086c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086c4:	e01c      	b.n	8008700 <UART_SetConfig+0x6d0>
 80086c6:	bf00      	nop
 80086c8:	40011400 	.word	0x40011400
 80086cc:	58024400 	.word	0x58024400
 80086d0:	40007800 	.word	0x40007800
 80086d4:	40007c00 	.word	0x40007c00
 80086d8:	58000c00 	.word	0x58000c00
 80086dc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80086e0:	4b9d      	ldr	r3, [pc, #628]	@ (8008958 <UART_SetConfig+0x928>)
 80086e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086e4:	e00c      	b.n	8008700 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80086e6:	4b9d      	ldr	r3, [pc, #628]	@ (800895c <UART_SetConfig+0x92c>)
 80086e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ea:	e009      	b.n	8008700 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f2:	e005      	b.n	8008700 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80086f4:	2300      	movs	r3, #0
 80086f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80086fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008702:	2b00      	cmp	r3, #0
 8008704:	f000 81de 	beq.w	8008ac4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800870c:	4a94      	ldr	r2, [pc, #592]	@ (8008960 <UART_SetConfig+0x930>)
 800870e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008712:	461a      	mov	r2, r3
 8008714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008716:	fbb3 f3f2 	udiv	r3, r3, r2
 800871a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	4613      	mov	r3, r2
 8008722:	005b      	lsls	r3, r3, #1
 8008724:	4413      	add	r3, r2
 8008726:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008728:	429a      	cmp	r2, r3
 800872a:	d305      	bcc.n	8008738 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008732:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008734:	429a      	cmp	r2, r3
 8008736:	d903      	bls.n	8008740 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800873e:	e1c1      	b.n	8008ac4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008742:	2200      	movs	r2, #0
 8008744:	60bb      	str	r3, [r7, #8]
 8008746:	60fa      	str	r2, [r7, #12]
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800874c:	4a84      	ldr	r2, [pc, #528]	@ (8008960 <UART_SetConfig+0x930>)
 800874e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008752:	b29b      	uxth	r3, r3
 8008754:	2200      	movs	r2, #0
 8008756:	603b      	str	r3, [r7, #0]
 8008758:	607a      	str	r2, [r7, #4]
 800875a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800875e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008762:	f7f7 fe0d 	bl	8000380 <__aeabi_uldivmod>
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	4610      	mov	r0, r2
 800876c:	4619      	mov	r1, r3
 800876e:	f04f 0200 	mov.w	r2, #0
 8008772:	f04f 0300 	mov.w	r3, #0
 8008776:	020b      	lsls	r3, r1, #8
 8008778:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800877c:	0202      	lsls	r2, r0, #8
 800877e:	6979      	ldr	r1, [r7, #20]
 8008780:	6849      	ldr	r1, [r1, #4]
 8008782:	0849      	lsrs	r1, r1, #1
 8008784:	2000      	movs	r0, #0
 8008786:	460c      	mov	r4, r1
 8008788:	4605      	mov	r5, r0
 800878a:	eb12 0804 	adds.w	r8, r2, r4
 800878e:	eb43 0905 	adc.w	r9, r3, r5
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	469a      	mov	sl, r3
 800879a:	4693      	mov	fp, r2
 800879c:	4652      	mov	r2, sl
 800879e:	465b      	mov	r3, fp
 80087a0:	4640      	mov	r0, r8
 80087a2:	4649      	mov	r1, r9
 80087a4:	f7f7 fdec 	bl	8000380 <__aeabi_uldivmod>
 80087a8:	4602      	mov	r2, r0
 80087aa:	460b      	mov	r3, r1
 80087ac:	4613      	mov	r3, r2
 80087ae:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80087b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087b6:	d308      	bcc.n	80087ca <UART_SetConfig+0x79a>
 80087b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087be:	d204      	bcs.n	80087ca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087c6:	60da      	str	r2, [r3, #12]
 80087c8:	e17c      	b.n	8008ac4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80087d0:	e178      	b.n	8008ac4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	69db      	ldr	r3, [r3, #28]
 80087d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087da:	f040 80c5 	bne.w	8008968 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80087de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80087e2:	2b20      	cmp	r3, #32
 80087e4:	dc48      	bgt.n	8008878 <UART_SetConfig+0x848>
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	db7b      	blt.n	80088e2 <UART_SetConfig+0x8b2>
 80087ea:	2b20      	cmp	r3, #32
 80087ec:	d879      	bhi.n	80088e2 <UART_SetConfig+0x8b2>
 80087ee:	a201      	add	r2, pc, #4	@ (adr r2, 80087f4 <UART_SetConfig+0x7c4>)
 80087f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f4:	0800887f 	.word	0x0800887f
 80087f8:	08008887 	.word	0x08008887
 80087fc:	080088e3 	.word	0x080088e3
 8008800:	080088e3 	.word	0x080088e3
 8008804:	0800888f 	.word	0x0800888f
 8008808:	080088e3 	.word	0x080088e3
 800880c:	080088e3 	.word	0x080088e3
 8008810:	080088e3 	.word	0x080088e3
 8008814:	0800889f 	.word	0x0800889f
 8008818:	080088e3 	.word	0x080088e3
 800881c:	080088e3 	.word	0x080088e3
 8008820:	080088e3 	.word	0x080088e3
 8008824:	080088e3 	.word	0x080088e3
 8008828:	080088e3 	.word	0x080088e3
 800882c:	080088e3 	.word	0x080088e3
 8008830:	080088e3 	.word	0x080088e3
 8008834:	080088af 	.word	0x080088af
 8008838:	080088e3 	.word	0x080088e3
 800883c:	080088e3 	.word	0x080088e3
 8008840:	080088e3 	.word	0x080088e3
 8008844:	080088e3 	.word	0x080088e3
 8008848:	080088e3 	.word	0x080088e3
 800884c:	080088e3 	.word	0x080088e3
 8008850:	080088e3 	.word	0x080088e3
 8008854:	080088e3 	.word	0x080088e3
 8008858:	080088e3 	.word	0x080088e3
 800885c:	080088e3 	.word	0x080088e3
 8008860:	080088e3 	.word	0x080088e3
 8008864:	080088e3 	.word	0x080088e3
 8008868:	080088e3 	.word	0x080088e3
 800886c:	080088e3 	.word	0x080088e3
 8008870:	080088e3 	.word	0x080088e3
 8008874:	080088d5 	.word	0x080088d5
 8008878:	2b40      	cmp	r3, #64	@ 0x40
 800887a:	d02e      	beq.n	80088da <UART_SetConfig+0x8aa>
 800887c:	e031      	b.n	80088e2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800887e:	f7fb fb41 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 8008882:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008884:	e033      	b.n	80088ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008886:	f7fb fb53 	bl	8003f30 <HAL_RCC_GetPCLK2Freq>
 800888a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800888c:	e02f      	b.n	80088ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800888e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008892:	4618      	mov	r0, r3
 8008894:	f7fc fe04 	bl	80054a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800889a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800889c:	e027      	b.n	80088ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800889e:	f107 0318 	add.w	r3, r7, #24
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fc ff50 	bl	8005748 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088ac:	e01f      	b.n	80088ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088ae:	4b2d      	ldr	r3, [pc, #180]	@ (8008964 <UART_SetConfig+0x934>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0320 	and.w	r3, r3, #32
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d009      	beq.n	80088ce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80088ba:	4b2a      	ldr	r3, [pc, #168]	@ (8008964 <UART_SetConfig+0x934>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	08db      	lsrs	r3, r3, #3
 80088c0:	f003 0303 	and.w	r3, r3, #3
 80088c4:	4a24      	ldr	r2, [pc, #144]	@ (8008958 <UART_SetConfig+0x928>)
 80088c6:	fa22 f303 	lsr.w	r3, r2, r3
 80088ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088cc:	e00f      	b.n	80088ee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80088ce:	4b22      	ldr	r3, [pc, #136]	@ (8008958 <UART_SetConfig+0x928>)
 80088d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088d2:	e00c      	b.n	80088ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80088d4:	4b21      	ldr	r3, [pc, #132]	@ (800895c <UART_SetConfig+0x92c>)
 80088d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088d8:	e009      	b.n	80088ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088e0:	e005      	b.n	80088ee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80088ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 80e7 	beq.w	8008ac4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088fa:	4a19      	ldr	r2, [pc, #100]	@ (8008960 <UART_SetConfig+0x930>)
 80088fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008900:	461a      	mov	r2, r3
 8008902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008904:	fbb3 f3f2 	udiv	r3, r3, r2
 8008908:	005a      	lsls	r2, r3, #1
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	085b      	lsrs	r3, r3, #1
 8008910:	441a      	add	r2, r3
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	fbb2 f3f3 	udiv	r3, r2, r3
 800891a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800891c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800891e:	2b0f      	cmp	r3, #15
 8008920:	d916      	bls.n	8008950 <UART_SetConfig+0x920>
 8008922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008928:	d212      	bcs.n	8008950 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800892a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800892c:	b29b      	uxth	r3, r3
 800892e:	f023 030f 	bic.w	r3, r3, #15
 8008932:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008936:	085b      	lsrs	r3, r3, #1
 8008938:	b29b      	uxth	r3, r3
 800893a:	f003 0307 	and.w	r3, r3, #7
 800893e:	b29a      	uxth	r2, r3
 8008940:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008942:	4313      	orrs	r3, r2
 8008944:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800894c:	60da      	str	r2, [r3, #12]
 800894e:	e0b9      	b.n	8008ac4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008956:	e0b5      	b.n	8008ac4 <UART_SetConfig+0xa94>
 8008958:	03d09000 	.word	0x03d09000
 800895c:	003d0900 	.word	0x003d0900
 8008960:	0800a9a0 	.word	0x0800a9a0
 8008964:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008968:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800896c:	2b20      	cmp	r3, #32
 800896e:	dc49      	bgt.n	8008a04 <UART_SetConfig+0x9d4>
 8008970:	2b00      	cmp	r3, #0
 8008972:	db7c      	blt.n	8008a6e <UART_SetConfig+0xa3e>
 8008974:	2b20      	cmp	r3, #32
 8008976:	d87a      	bhi.n	8008a6e <UART_SetConfig+0xa3e>
 8008978:	a201      	add	r2, pc, #4	@ (adr r2, 8008980 <UART_SetConfig+0x950>)
 800897a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897e:	bf00      	nop
 8008980:	08008a0b 	.word	0x08008a0b
 8008984:	08008a13 	.word	0x08008a13
 8008988:	08008a6f 	.word	0x08008a6f
 800898c:	08008a6f 	.word	0x08008a6f
 8008990:	08008a1b 	.word	0x08008a1b
 8008994:	08008a6f 	.word	0x08008a6f
 8008998:	08008a6f 	.word	0x08008a6f
 800899c:	08008a6f 	.word	0x08008a6f
 80089a0:	08008a2b 	.word	0x08008a2b
 80089a4:	08008a6f 	.word	0x08008a6f
 80089a8:	08008a6f 	.word	0x08008a6f
 80089ac:	08008a6f 	.word	0x08008a6f
 80089b0:	08008a6f 	.word	0x08008a6f
 80089b4:	08008a6f 	.word	0x08008a6f
 80089b8:	08008a6f 	.word	0x08008a6f
 80089bc:	08008a6f 	.word	0x08008a6f
 80089c0:	08008a3b 	.word	0x08008a3b
 80089c4:	08008a6f 	.word	0x08008a6f
 80089c8:	08008a6f 	.word	0x08008a6f
 80089cc:	08008a6f 	.word	0x08008a6f
 80089d0:	08008a6f 	.word	0x08008a6f
 80089d4:	08008a6f 	.word	0x08008a6f
 80089d8:	08008a6f 	.word	0x08008a6f
 80089dc:	08008a6f 	.word	0x08008a6f
 80089e0:	08008a6f 	.word	0x08008a6f
 80089e4:	08008a6f 	.word	0x08008a6f
 80089e8:	08008a6f 	.word	0x08008a6f
 80089ec:	08008a6f 	.word	0x08008a6f
 80089f0:	08008a6f 	.word	0x08008a6f
 80089f4:	08008a6f 	.word	0x08008a6f
 80089f8:	08008a6f 	.word	0x08008a6f
 80089fc:	08008a6f 	.word	0x08008a6f
 8008a00:	08008a61 	.word	0x08008a61
 8008a04:	2b40      	cmp	r3, #64	@ 0x40
 8008a06:	d02e      	beq.n	8008a66 <UART_SetConfig+0xa36>
 8008a08:	e031      	b.n	8008a6e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a0a:	f7fb fa7b 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 8008a0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a10:	e033      	b.n	8008a7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a12:	f7fb fa8d 	bl	8003f30 <HAL_RCC_GetPCLK2Freq>
 8008a16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a18:	e02f      	b.n	8008a7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fc fd3e 	bl	80054a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a28:	e027      	b.n	8008a7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a2a:	f107 0318 	add.w	r3, r7, #24
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fc fe8a 	bl	8005748 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a38:	e01f      	b.n	8008a7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a3a:	4b2d      	ldr	r3, [pc, #180]	@ (8008af0 <UART_SetConfig+0xac0>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 0320 	and.w	r3, r3, #32
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d009      	beq.n	8008a5a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a46:	4b2a      	ldr	r3, [pc, #168]	@ (8008af0 <UART_SetConfig+0xac0>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	08db      	lsrs	r3, r3, #3
 8008a4c:	f003 0303 	and.w	r3, r3, #3
 8008a50:	4a28      	ldr	r2, [pc, #160]	@ (8008af4 <UART_SetConfig+0xac4>)
 8008a52:	fa22 f303 	lsr.w	r3, r2, r3
 8008a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a58:	e00f      	b.n	8008a7a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008a5a:	4b26      	ldr	r3, [pc, #152]	@ (8008af4 <UART_SetConfig+0xac4>)
 8008a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a5e:	e00c      	b.n	8008a7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a60:	4b25      	ldr	r3, [pc, #148]	@ (8008af8 <UART_SetConfig+0xac8>)
 8008a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a64:	e009      	b.n	8008a7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a6c:	e005      	b.n	8008a7a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008a78:	bf00      	nop
    }

    if (pclk != 0U)
 8008a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d021      	beq.n	8008ac4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a84:	4a1d      	ldr	r2, [pc, #116]	@ (8008afc <UART_SetConfig+0xacc>)
 8008a86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	085b      	lsrs	r3, r3, #1
 8008a98:	441a      	add	r2, r3
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa6:	2b0f      	cmp	r3, #15
 8008aa8:	d909      	bls.n	8008abe <UART_SetConfig+0xa8e>
 8008aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ab0:	d205      	bcs.n	8008abe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	60da      	str	r2, [r3, #12]
 8008abc:	e002      	b.n	8008ac4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	2200      	movs	r2, #0
 8008ade:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008ae0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3748      	adds	r7, #72	@ 0x48
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008aee:	bf00      	nop
 8008af0:	58024400 	.word	0x58024400
 8008af4:	03d09000 	.word	0x03d09000
 8008af8:	003d0900 	.word	0x003d0900
 8008afc:	0800a9a0 	.word	0x0800a9a0

08008b00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b0c:	f003 0308 	and.w	r3, r3, #8
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00a      	beq.n	8008b2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	430a      	orrs	r2, r1
 8008b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b2e:	f003 0301 	and.w	r3, r3, #1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00a      	beq.n	8008b4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	430a      	orrs	r2, r1
 8008b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b50:	f003 0302 	and.w	r3, r3, #2
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00a      	beq.n	8008b6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	430a      	orrs	r2, r1
 8008b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b72:	f003 0304 	and.w	r3, r3, #4
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00a      	beq.n	8008b90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	430a      	orrs	r2, r1
 8008b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b94:	f003 0310 	and.w	r3, r3, #16
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00a      	beq.n	8008bb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	430a      	orrs	r2, r1
 8008bb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb6:	f003 0320 	and.w	r3, r3, #32
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00a      	beq.n	8008bd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	430a      	orrs	r2, r1
 8008bd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d01a      	beq.n	8008c16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bfe:	d10a      	bne.n	8008c16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00a      	beq.n	8008c38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	430a      	orrs	r2, r1
 8008c36:	605a      	str	r2, [r3, #4]
  }
}
 8008c38:	bf00      	nop
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b098      	sub	sp, #96	@ 0x60
 8008c48:	af02      	add	r7, sp, #8
 8008c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c54:	f7f9 fdb2 	bl	80027bc <HAL_GetTick>
 8008c58:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 0308 	and.w	r3, r3, #8
 8008c64:	2b08      	cmp	r3, #8
 8008c66:	d12f      	bne.n	8008cc8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c70:	2200      	movs	r2, #0
 8008c72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f88e 	bl	8008d98 <UART_WaitOnFlagUntilTimeout>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d022      	beq.n	8008cc8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8a:	e853 3f00 	ldrex	r3, [r3]
 8008c8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c96:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ca0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ca2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ca6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ca8:	e841 2300 	strex	r3, r2, [r1]
 8008cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1e6      	bne.n	8008c82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2220      	movs	r2, #32
 8008cb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e063      	b.n	8008d90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0304 	and.w	r3, r3, #4
 8008cd2:	2b04      	cmp	r3, #4
 8008cd4:	d149      	bne.n	8008d6a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cd6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f857 	bl	8008d98 <UART_WaitOnFlagUntilTimeout>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d03c      	beq.n	8008d6a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf8:	e853 3f00 	ldrex	r3, [r3]
 8008cfc:	623b      	str	r3, [r7, #32]
   return(result);
 8008cfe:	6a3b      	ldr	r3, [r7, #32]
 8008d00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d10:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d16:	e841 2300 	strex	r3, r2, [r1]
 8008d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1e6      	bne.n	8008cf0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	3308      	adds	r3, #8
 8008d28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	e853 3f00 	ldrex	r3, [r3]
 8008d30:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f023 0301 	bic.w	r3, r3, #1
 8008d38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3308      	adds	r3, #8
 8008d40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d42:	61fa      	str	r2, [r7, #28]
 8008d44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d46:	69b9      	ldr	r1, [r7, #24]
 8008d48:	69fa      	ldr	r2, [r7, #28]
 8008d4a:	e841 2300 	strex	r3, r2, [r1]
 8008d4e:	617b      	str	r3, [r7, #20]
   return(result);
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1e5      	bne.n	8008d22 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2220      	movs	r2, #32
 8008d5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d66:	2303      	movs	r3, #3
 8008d68:	e012      	b.n	8008d90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2220      	movs	r2, #32
 8008d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2220      	movs	r2, #32
 8008d76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3758      	adds	r7, #88	@ 0x58
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	603b      	str	r3, [r7, #0]
 8008da4:	4613      	mov	r3, r2
 8008da6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008da8:	e04f      	b.n	8008e4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db0:	d04b      	beq.n	8008e4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008db2:	f7f9 fd03 	bl	80027bc <HAL_GetTick>
 8008db6:	4602      	mov	r2, r0
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	69ba      	ldr	r2, [r7, #24]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d302      	bcc.n	8008dc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d101      	bne.n	8008dcc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	e04e      	b.n	8008e6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 0304 	and.w	r3, r3, #4
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d037      	beq.n	8008e4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	2b80      	cmp	r3, #128	@ 0x80
 8008dde:	d034      	beq.n	8008e4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	2b40      	cmp	r3, #64	@ 0x40
 8008de4:	d031      	beq.n	8008e4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	69db      	ldr	r3, [r3, #28]
 8008dec:	f003 0308 	and.w	r3, r3, #8
 8008df0:	2b08      	cmp	r3, #8
 8008df2:	d110      	bne.n	8008e16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2208      	movs	r2, #8
 8008dfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f000 f839 	bl	8008e74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2208      	movs	r2, #8
 8008e06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e029      	b.n	8008e6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	69db      	ldr	r3, [r3, #28]
 8008e1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e24:	d111      	bne.n	8008e4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f000 f81f 	bl	8008e74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2220      	movs	r2, #32
 8008e3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e00f      	b.n	8008e6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	69da      	ldr	r2, [r3, #28]
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	4013      	ands	r3, r2
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	bf0c      	ite	eq
 8008e5a:	2301      	moveq	r3, #1
 8008e5c:	2300      	movne	r3, #0
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	461a      	mov	r2, r3
 8008e62:	79fb      	ldrb	r3, [r7, #7]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d0a0      	beq.n	8008daa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
	...

08008e74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b095      	sub	sp, #84	@ 0x54
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e84:	e853 3f00 	ldrex	r3, [r3]
 8008e88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	461a      	mov	r2, r3
 8008e98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ea0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ea2:	e841 2300 	strex	r3, r2, [r1]
 8008ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1e6      	bne.n	8008e7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3308      	adds	r3, #8
 8008eb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	e853 3f00 	ldrex	r3, [r3]
 8008ebc:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ebe:	69fa      	ldr	r2, [r7, #28]
 8008ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8008f3c <UART_EndRxTransfer+0xc8>)
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3308      	adds	r3, #8
 8008ecc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ece:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ed4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ed6:	e841 2300 	strex	r3, r2, [r1]
 8008eda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1e5      	bne.n	8008eae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d118      	bne.n	8008f1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	e853 3f00 	ldrex	r3, [r3]
 8008ef6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	f023 0310 	bic.w	r3, r3, #16
 8008efe:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	461a      	mov	r2, r3
 8008f06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f08:	61bb      	str	r3, [r7, #24]
 8008f0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0c:	6979      	ldr	r1, [r7, #20]
 8008f0e:	69ba      	ldr	r2, [r7, #24]
 8008f10:	e841 2300 	strex	r3, r2, [r1]
 8008f14:	613b      	str	r3, [r7, #16]
   return(result);
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1e6      	bne.n	8008eea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2220      	movs	r2, #32
 8008f20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008f30:	bf00      	nop
 8008f32:	3754      	adds	r7, #84	@ 0x54
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr
 8008f3c:	effffffe 	.word	0xeffffffe

08008f40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d101      	bne.n	8008f56 <HAL_UARTEx_DisableFifoMode+0x16>
 8008f52:	2302      	movs	r3, #2
 8008f54:	e027      	b.n	8008fa6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2224      	movs	r2, #36	@ 0x24
 8008f62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f022 0201 	bic.w	r2, r2, #1
 8008f7c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008f84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2220      	movs	r2, #32
 8008f98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b084      	sub	sp, #16
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
 8008fba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d101      	bne.n	8008fca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008fc6:	2302      	movs	r3, #2
 8008fc8:	e02d      	b.n	8009026 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2224      	movs	r2, #36	@ 0x24
 8008fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f022 0201 	bic.w	r2, r2, #1
 8008ff0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	683a      	ldr	r2, [r7, #0]
 8009002:	430a      	orrs	r2, r1
 8009004:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 f850 	bl	80090ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2220      	movs	r2, #32
 8009018:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b084      	sub	sp, #16
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800903e:	2b01      	cmp	r3, #1
 8009040:	d101      	bne.n	8009046 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009042:	2302      	movs	r3, #2
 8009044:	e02d      	b.n	80090a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2224      	movs	r2, #36	@ 0x24
 8009052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f022 0201 	bic.w	r2, r2, #1
 800906c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	430a      	orrs	r2, r1
 8009080:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f812 	bl	80090ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2220      	movs	r2, #32
 8009094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
	...

080090ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d108      	bne.n	80090ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80090cc:	e031      	b.n	8009132 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80090ce:	2310      	movs	r3, #16
 80090d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80090d2:	2310      	movs	r3, #16
 80090d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	0e5b      	lsrs	r3, r3, #25
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	f003 0307 	and.w	r3, r3, #7
 80090e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	0f5b      	lsrs	r3, r3, #29
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	f003 0307 	and.w	r3, r3, #7
 80090f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090f6:	7bbb      	ldrb	r3, [r7, #14]
 80090f8:	7b3a      	ldrb	r2, [r7, #12]
 80090fa:	4911      	ldr	r1, [pc, #68]	@ (8009140 <UARTEx_SetNbDataToProcess+0x94>)
 80090fc:	5c8a      	ldrb	r2, [r1, r2]
 80090fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009102:	7b3a      	ldrb	r2, [r7, #12]
 8009104:	490f      	ldr	r1, [pc, #60]	@ (8009144 <UARTEx_SetNbDataToProcess+0x98>)
 8009106:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009108:	fb93 f3f2 	sdiv	r3, r3, r2
 800910c:	b29a      	uxth	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009114:	7bfb      	ldrb	r3, [r7, #15]
 8009116:	7b7a      	ldrb	r2, [r7, #13]
 8009118:	4909      	ldr	r1, [pc, #36]	@ (8009140 <UARTEx_SetNbDataToProcess+0x94>)
 800911a:	5c8a      	ldrb	r2, [r1, r2]
 800911c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009120:	7b7a      	ldrb	r2, [r7, #13]
 8009122:	4908      	ldr	r1, [pc, #32]	@ (8009144 <UARTEx_SetNbDataToProcess+0x98>)
 8009124:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009126:	fb93 f3f2 	sdiv	r3, r3, r2
 800912a:	b29a      	uxth	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009132:	bf00      	nop
 8009134:	3714      	adds	r7, #20
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	0800a9b8 	.word	0x0800a9b8
 8009144:	0800a9c0 	.word	0x0800a9c0

08009148 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009148:	b580      	push	{r7, lr}
 800914a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800914c:	4b05      	ldr	r3, [pc, #20]	@ (8009164 <SysTick_Handler+0x1c>)
 800914e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009150:	f000 fa5c 	bl	800960c <xTaskGetSchedulerState>
 8009154:	4603      	mov	r3, r0
 8009156:	2b01      	cmp	r3, #1
 8009158:	d001      	beq.n	800915e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800915a:	f000 f8fd 	bl	8009358 <xPortSysTickHandler>
  }
}
 800915e:	bf00      	nop
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	e000e010 	.word	0xe000e010

08009168 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	689a      	ldr	r2, [r3, #8]
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	683a      	ldr	r2, [r7, #0]
 800918c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	683a      	ldr	r2, [r7, #0]
 8009192:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	1c5a      	adds	r2, r3, #1
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	601a      	str	r2, [r3, #0]
}
 80091a4:	bf00      	nop
 80091a6:	3714      	adds	r7, #20
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	6892      	ldr	r2, [r2, #8]
 80091c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	6852      	ldr	r2, [r2, #4]
 80091d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d103      	bne.n	80091e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	689a      	ldr	r2, [r3, #8]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	1e5a      	subs	r2, r3, #1
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
	...

08009210 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009210:	4b07      	ldr	r3, [pc, #28]	@ (8009230 <pxCurrentTCBConst2>)
 8009212:	6819      	ldr	r1, [r3, #0]
 8009214:	6808      	ldr	r0, [r1, #0]
 8009216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921a:	f380 8809 	msr	PSP, r0
 800921e:	f3bf 8f6f 	isb	sy
 8009222:	f04f 0000 	mov.w	r0, #0
 8009226:	f380 8811 	msr	BASEPRI, r0
 800922a:	4770      	bx	lr
 800922c:	f3af 8000 	nop.w

08009230 <pxCurrentTCBConst2>:
 8009230:	2400033c 	.word	0x2400033c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009234:	bf00      	nop
 8009236:	bf00      	nop

08009238 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800923e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009242:	f383 8811 	msr	BASEPRI, r3
 8009246:	f3bf 8f6f 	isb	sy
 800924a:	f3bf 8f4f 	dsb	sy
 800924e:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009250:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009252:	4b10      	ldr	r3, [pc, #64]	@ (8009294 <vPortEnterCritical+0x5c>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	3301      	adds	r3, #1
 8009258:	4a0e      	ldr	r2, [pc, #56]	@ (8009294 <vPortEnterCritical+0x5c>)
 800925a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800925c:	4b0d      	ldr	r3, [pc, #52]	@ (8009294 <vPortEnterCritical+0x5c>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b01      	cmp	r3, #1
 8009262:	d110      	bne.n	8009286 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009264:	4b0c      	ldr	r3, [pc, #48]	@ (8009298 <vPortEnterCritical+0x60>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	b2db      	uxtb	r3, r3
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00b      	beq.n	8009286 <vPortEnterCritical+0x4e>
	__asm volatile
 800926e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	603b      	str	r3, [r7, #0]
}
 8009280:	bf00      	nop
 8009282:	bf00      	nop
 8009284:	e7fd      	b.n	8009282 <vPortEnterCritical+0x4a>
	}
}
 8009286:	bf00      	nop
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	24000010 	.word	0x24000010
 8009298:	e000ed04 	.word	0xe000ed04

0800929c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80092a2:	4b12      	ldr	r3, [pc, #72]	@ (80092ec <vPortExitCritical+0x50>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10b      	bne.n	80092c2 <vPortExitCritical+0x26>
	__asm volatile
 80092aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ae:	f383 8811 	msr	BASEPRI, r3
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	607b      	str	r3, [r7, #4]
}
 80092bc:	bf00      	nop
 80092be:	bf00      	nop
 80092c0:	e7fd      	b.n	80092be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80092c2:	4b0a      	ldr	r3, [pc, #40]	@ (80092ec <vPortExitCritical+0x50>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3b01      	subs	r3, #1
 80092c8:	4a08      	ldr	r2, [pc, #32]	@ (80092ec <vPortExitCritical+0x50>)
 80092ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80092cc:	4b07      	ldr	r3, [pc, #28]	@ (80092ec <vPortExitCritical+0x50>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d105      	bne.n	80092e0 <vPortExitCritical+0x44>
 80092d4:	2300      	movs	r3, #0
 80092d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80092de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80092e0:	bf00      	nop
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr
 80092ec:	24000010 	.word	0x24000010

080092f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80092f0:	f3ef 8009 	mrs	r0, PSP
 80092f4:	f3bf 8f6f 	isb	sy
 80092f8:	4b15      	ldr	r3, [pc, #84]	@ (8009350 <pxCurrentTCBConst>)
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	f01e 0f10 	tst.w	lr, #16
 8009300:	bf08      	it	eq
 8009302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800930a:	6010      	str	r0, [r2, #0]
 800930c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009310:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009314:	f380 8811 	msr	BASEPRI, r0
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f000 f8f6 	bl	8009510 <vTaskSwitchContext>
 8009324:	f04f 0000 	mov.w	r0, #0
 8009328:	f380 8811 	msr	BASEPRI, r0
 800932c:	bc09      	pop	{r0, r3}
 800932e:	6819      	ldr	r1, [r3, #0]
 8009330:	6808      	ldr	r0, [r1, #0]
 8009332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009336:	f01e 0f10 	tst.w	lr, #16
 800933a:	bf08      	it	eq
 800933c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009340:	f380 8809 	msr	PSP, r0
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	f3af 8000 	nop.w

08009350 <pxCurrentTCBConst>:
 8009350:	2400033c 	.word	0x2400033c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009354:	bf00      	nop
 8009356:	bf00      	nop

08009358 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
	__asm volatile
 800935e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	607b      	str	r3, [r7, #4]
}
 8009370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009372:	f000 f813 	bl	800939c <xTaskIncrementTick>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d003      	beq.n	8009384 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800937c:	4b06      	ldr	r3, [pc, #24]	@ (8009398 <xPortSysTickHandler+0x40>)
 800937e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009382:	601a      	str	r2, [r3, #0]
 8009384:	2300      	movs	r3, #0
 8009386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	f383 8811 	msr	BASEPRI, r3
}
 800938e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009390:	bf00      	nop
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	e000ed04 	.word	0xe000ed04

0800939c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b086      	sub	sp, #24
 80093a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80093a2:	2300      	movs	r3, #0
 80093a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093a6:	4b4f      	ldr	r3, [pc, #316]	@ (80094e4 <xTaskIncrementTick+0x148>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f040 8090 	bne.w	80094d0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80093b0:	4b4d      	ldr	r3, [pc, #308]	@ (80094e8 <xTaskIncrementTick+0x14c>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3301      	adds	r3, #1
 80093b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80093b8:	4a4b      	ldr	r2, [pc, #300]	@ (80094e8 <xTaskIncrementTick+0x14c>)
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d121      	bne.n	8009408 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80093c4:	4b49      	ldr	r3, [pc, #292]	@ (80094ec <xTaskIncrementTick+0x150>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00b      	beq.n	80093e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80093ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	603b      	str	r3, [r7, #0]
}
 80093e0:	bf00      	nop
 80093e2:	bf00      	nop
 80093e4:	e7fd      	b.n	80093e2 <xTaskIncrementTick+0x46>
 80093e6:	4b41      	ldr	r3, [pc, #260]	@ (80094ec <xTaskIncrementTick+0x150>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	4b40      	ldr	r3, [pc, #256]	@ (80094f0 <xTaskIncrementTick+0x154>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a3e      	ldr	r2, [pc, #248]	@ (80094ec <xTaskIncrementTick+0x150>)
 80093f2:	6013      	str	r3, [r2, #0]
 80093f4:	4a3e      	ldr	r2, [pc, #248]	@ (80094f0 <xTaskIncrementTick+0x154>)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6013      	str	r3, [r2, #0]
 80093fa:	4b3e      	ldr	r3, [pc, #248]	@ (80094f4 <xTaskIncrementTick+0x158>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	3301      	adds	r3, #1
 8009400:	4a3c      	ldr	r2, [pc, #240]	@ (80094f4 <xTaskIncrementTick+0x158>)
 8009402:	6013      	str	r3, [r2, #0]
 8009404:	f000 f8e2 	bl	80095cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009408:	4b3b      	ldr	r3, [pc, #236]	@ (80094f8 <xTaskIncrementTick+0x15c>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	429a      	cmp	r2, r3
 8009410:	d349      	bcc.n	80094a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009412:	4b36      	ldr	r3, [pc, #216]	@ (80094ec <xTaskIncrementTick+0x150>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d104      	bne.n	8009426 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800941c:	4b36      	ldr	r3, [pc, #216]	@ (80094f8 <xTaskIncrementTick+0x15c>)
 800941e:	f04f 32ff 	mov.w	r2, #4294967295
 8009422:	601a      	str	r2, [r3, #0]
					break;
 8009424:	e03f      	b.n	80094a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009426:	4b31      	ldr	r3, [pc, #196]	@ (80094ec <xTaskIncrementTick+0x150>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009436:	693a      	ldr	r2, [r7, #16]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	429a      	cmp	r2, r3
 800943c:	d203      	bcs.n	8009446 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800943e:	4a2e      	ldr	r2, [pc, #184]	@ (80094f8 <xTaskIncrementTick+0x15c>)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009444:	e02f      	b.n	80094a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	3304      	adds	r3, #4
 800944a:	4618      	mov	r0, r3
 800944c:	f7ff feb0 	bl	80091b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009454:	2b00      	cmp	r3, #0
 8009456:	d004      	beq.n	8009462 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	3318      	adds	r3, #24
 800945c:	4618      	mov	r0, r3
 800945e:	f7ff fea7 	bl	80091b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009466:	4b25      	ldr	r3, [pc, #148]	@ (80094fc <xTaskIncrementTick+0x160>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	429a      	cmp	r2, r3
 800946c:	d903      	bls.n	8009476 <xTaskIncrementTick+0xda>
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009472:	4a22      	ldr	r2, [pc, #136]	@ (80094fc <xTaskIncrementTick+0x160>)
 8009474:	6013      	str	r3, [r2, #0]
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800947a:	4613      	mov	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4413      	add	r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4a1f      	ldr	r2, [pc, #124]	@ (8009500 <xTaskIncrementTick+0x164>)
 8009484:	441a      	add	r2, r3
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	3304      	adds	r3, #4
 800948a:	4619      	mov	r1, r3
 800948c:	4610      	mov	r0, r2
 800948e:	f7ff fe6b 	bl	8009168 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009496:	4b1b      	ldr	r3, [pc, #108]	@ (8009504 <xTaskIncrementTick+0x168>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800949c:	429a      	cmp	r2, r3
 800949e:	d3b8      	bcc.n	8009412 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80094a0:	2301      	movs	r3, #1
 80094a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094a4:	e7b5      	b.n	8009412 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80094a6:	4b17      	ldr	r3, [pc, #92]	@ (8009504 <xTaskIncrementTick+0x168>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ac:	4914      	ldr	r1, [pc, #80]	@ (8009500 <xTaskIncrementTick+0x164>)
 80094ae:	4613      	mov	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	4413      	add	r3, r2
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	440b      	add	r3, r1
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d901      	bls.n	80094c2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80094be:	2301      	movs	r3, #1
 80094c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80094c2:	4b11      	ldr	r3, [pc, #68]	@ (8009508 <xTaskIncrementTick+0x16c>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d007      	beq.n	80094da <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80094ca:	2301      	movs	r3, #1
 80094cc:	617b      	str	r3, [r7, #20]
 80094ce:	e004      	b.n	80094da <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80094d0:	4b0e      	ldr	r3, [pc, #56]	@ (800950c <xTaskIncrementTick+0x170>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	3301      	adds	r3, #1
 80094d6:	4a0d      	ldr	r2, [pc, #52]	@ (800950c <xTaskIncrementTick+0x170>)
 80094d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80094da:	697b      	ldr	r3, [r7, #20]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3718      	adds	r7, #24
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	240007c4 	.word	0x240007c4
 80094e8:	240007a8 	.word	0x240007a8
 80094ec:	240007a0 	.word	0x240007a0
 80094f0:	240007a4 	.word	0x240007a4
 80094f4:	240007bc 	.word	0x240007bc
 80094f8:	240007c0 	.word	0x240007c0
 80094fc:	240007ac 	.word	0x240007ac
 8009500:	24000340 	.word	0x24000340
 8009504:	2400033c 	.word	0x2400033c
 8009508:	240007b8 	.word	0x240007b8
 800950c:	240007b4 	.word	0x240007b4

08009510 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009516:	4b28      	ldr	r3, [pc, #160]	@ (80095b8 <vTaskSwitchContext+0xa8>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d003      	beq.n	8009526 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800951e:	4b27      	ldr	r3, [pc, #156]	@ (80095bc <vTaskSwitchContext+0xac>)
 8009520:	2201      	movs	r2, #1
 8009522:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009524:	e042      	b.n	80095ac <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009526:	4b25      	ldr	r3, [pc, #148]	@ (80095bc <vTaskSwitchContext+0xac>)
 8009528:	2200      	movs	r2, #0
 800952a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800952c:	4b24      	ldr	r3, [pc, #144]	@ (80095c0 <vTaskSwitchContext+0xb0>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	60fb      	str	r3, [r7, #12]
 8009532:	e011      	b.n	8009558 <vTaskSwitchContext+0x48>
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d10b      	bne.n	8009552 <vTaskSwitchContext+0x42>
	__asm volatile
 800953a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800953e:	f383 8811 	msr	BASEPRI, r3
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	f3bf 8f4f 	dsb	sy
 800954a:	607b      	str	r3, [r7, #4]
}
 800954c:	bf00      	nop
 800954e:	bf00      	nop
 8009550:	e7fd      	b.n	800954e <vTaskSwitchContext+0x3e>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	3b01      	subs	r3, #1
 8009556:	60fb      	str	r3, [r7, #12]
 8009558:	491a      	ldr	r1, [pc, #104]	@ (80095c4 <vTaskSwitchContext+0xb4>)
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	4613      	mov	r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4413      	add	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	440b      	add	r3, r1
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d0e3      	beq.n	8009534 <vTaskSwitchContext+0x24>
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	4613      	mov	r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	4413      	add	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	4a13      	ldr	r2, [pc, #76]	@ (80095c4 <vTaskSwitchContext+0xb4>)
 8009578:	4413      	add	r3, r2
 800957a:	60bb      	str	r3, [r7, #8]
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	685a      	ldr	r2, [r3, #4]
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	605a      	str	r2, [r3, #4]
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	685a      	ldr	r2, [r3, #4]
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	3308      	adds	r3, #8
 800958e:	429a      	cmp	r2, r3
 8009590:	d104      	bne.n	800959c <vTaskSwitchContext+0x8c>
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	685a      	ldr	r2, [r3, #4]
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	605a      	str	r2, [r3, #4]
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	4a09      	ldr	r2, [pc, #36]	@ (80095c8 <vTaskSwitchContext+0xb8>)
 80095a4:	6013      	str	r3, [r2, #0]
 80095a6:	4a06      	ldr	r2, [pc, #24]	@ (80095c0 <vTaskSwitchContext+0xb0>)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6013      	str	r3, [r2, #0]
}
 80095ac:	bf00      	nop
 80095ae:	3714      	adds	r7, #20
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	240007c4 	.word	0x240007c4
 80095bc:	240007b8 	.word	0x240007b8
 80095c0:	240007ac 	.word	0x240007ac
 80095c4:	24000340 	.word	0x24000340
 80095c8:	2400033c 	.word	0x2400033c

080095cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009604 <prvResetNextTaskUnblockTime+0x38>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d104      	bne.n	80095e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80095dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009608 <prvResetNextTaskUnblockTime+0x3c>)
 80095de:	f04f 32ff 	mov.w	r2, #4294967295
 80095e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80095e4:	e008      	b.n	80095f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095e6:	4b07      	ldr	r3, [pc, #28]	@ (8009604 <prvResetNextTaskUnblockTime+0x38>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	4a04      	ldr	r2, [pc, #16]	@ (8009608 <prvResetNextTaskUnblockTime+0x3c>)
 80095f6:	6013      	str	r3, [r2, #0]
}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr
 8009604:	240007a0 	.word	0x240007a0
 8009608:	240007c0 	.word	0x240007c0

0800960c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009612:	4b0b      	ldr	r3, [pc, #44]	@ (8009640 <xTaskGetSchedulerState+0x34>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d102      	bne.n	8009620 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800961a:	2301      	movs	r3, #1
 800961c:	607b      	str	r3, [r7, #4]
 800961e:	e008      	b.n	8009632 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009620:	4b08      	ldr	r3, [pc, #32]	@ (8009644 <xTaskGetSchedulerState+0x38>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d102      	bne.n	800962e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009628:	2302      	movs	r3, #2
 800962a:	607b      	str	r3, [r7, #4]
 800962c:	e001      	b.n	8009632 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800962e:	2300      	movs	r3, #0
 8009630:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009632:	687b      	ldr	r3, [r7, #4]
	}
 8009634:	4618      	mov	r0, r3
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr
 8009640:	240007b0 	.word	0x240007b0
 8009644:	240007c4 	.word	0x240007c4

08009648 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009648:	b580      	push	{r7, lr}
 800964a:	b08a      	sub	sp, #40	@ 0x28
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	603b      	str	r3, [r7, #0]
 8009654:	4613      	mov	r3, r2
 8009656:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009658:	2301      	movs	r3, #1
 800965a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d10b      	bne.n	800967a <xTaskGenericNotify+0x32>
	__asm volatile
 8009662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009666:	f383 8811 	msr	BASEPRI, r3
 800966a:	f3bf 8f6f 	isb	sy
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	61bb      	str	r3, [r7, #24]
}
 8009674:	bf00      	nop
 8009676:	bf00      	nop
 8009678:	e7fd      	b.n	8009676 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800967e:	f7ff fddb 	bl	8009238 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d003      	beq.n	8009690 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009688:	6a3b      	ldr	r3, [r7, #32]
 800968a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009690:	6a3b      	ldr	r3, [r7, #32]
 8009692:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8009696:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009698:	6a3b      	ldr	r3, [r7, #32]
 800969a:	2202      	movs	r2, #2
 800969c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 80096a0:	79fb      	ldrb	r3, [r7, #7]
 80096a2:	2b04      	cmp	r3, #4
 80096a4:	d827      	bhi.n	80096f6 <xTaskGenericNotify+0xae>
 80096a6:	a201      	add	r2, pc, #4	@ (adr r2, 80096ac <xTaskGenericNotify+0x64>)
 80096a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ac:	08009719 	.word	0x08009719
 80096b0:	080096c1 	.word	0x080096c1
 80096b4:	080096cf 	.word	0x080096cf
 80096b8:	080096db 	.word	0x080096db
 80096bc:	080096e3 	.word	0x080096e3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80096c0:	6a3b      	ldr	r3, [r7, #32]
 80096c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	431a      	orrs	r2, r3
 80096c8:	6a3b      	ldr	r3, [r7, #32]
 80096ca:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80096cc:	e027      	b.n	800971e <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80096ce:	6a3b      	ldr	r3, [r7, #32]
 80096d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096d2:	1c5a      	adds	r2, r3, #1
 80096d4:	6a3b      	ldr	r3, [r7, #32]
 80096d6:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80096d8:	e021      	b.n	800971e <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80096da:	6a3b      	ldr	r3, [r7, #32]
 80096dc:	68ba      	ldr	r2, [r7, #8]
 80096de:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80096e0:	e01d      	b.n	800971e <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80096e2:	7ffb      	ldrb	r3, [r7, #31]
 80096e4:	2b02      	cmp	r3, #2
 80096e6:	d003      	beq.n	80096f0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80096e8:	6a3b      	ldr	r3, [r7, #32]
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80096ee:	e016      	b.n	800971e <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 80096f0:	2300      	movs	r3, #0
 80096f2:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80096f4:	e013      	b.n	800971e <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80096f6:	6a3b      	ldr	r3, [r7, #32]
 80096f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096fe:	d00d      	beq.n	800971c <xTaskGenericNotify+0xd4>
	__asm volatile
 8009700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	617b      	str	r3, [r7, #20]
}
 8009712:	bf00      	nop
 8009714:	bf00      	nop
 8009716:	e7fd      	b.n	8009714 <xTaskGenericNotify+0xcc>
					break;
 8009718:	bf00      	nop
 800971a:	e000      	b.n	800971e <xTaskGenericNotify+0xd6>

					break;
 800971c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800971e:	7ffb      	ldrb	r3, [r7, #31]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d13b      	bne.n	800979c <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009724:	6a3b      	ldr	r3, [r7, #32]
 8009726:	3304      	adds	r3, #4
 8009728:	4618      	mov	r0, r3
 800972a:	f7ff fd41 	bl	80091b0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800972e:	6a3b      	ldr	r3, [r7, #32]
 8009730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009732:	4b1e      	ldr	r3, [pc, #120]	@ (80097ac <xTaskGenericNotify+0x164>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	429a      	cmp	r2, r3
 8009738:	d903      	bls.n	8009742 <xTaskGenericNotify+0xfa>
 800973a:	6a3b      	ldr	r3, [r7, #32]
 800973c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800973e:	4a1b      	ldr	r2, [pc, #108]	@ (80097ac <xTaskGenericNotify+0x164>)
 8009740:	6013      	str	r3, [r2, #0]
 8009742:	6a3b      	ldr	r3, [r7, #32]
 8009744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009746:	4613      	mov	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4a18      	ldr	r2, [pc, #96]	@ (80097b0 <xTaskGenericNotify+0x168>)
 8009750:	441a      	add	r2, r3
 8009752:	6a3b      	ldr	r3, [r7, #32]
 8009754:	3304      	adds	r3, #4
 8009756:	4619      	mov	r1, r3
 8009758:	4610      	mov	r0, r2
 800975a:	f7ff fd05 	bl	8009168 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800975e:	6a3b      	ldr	r3, [r7, #32]
 8009760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00b      	beq.n	800977e <xTaskGenericNotify+0x136>
	__asm volatile
 8009766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800976a:	f383 8811 	msr	BASEPRI, r3
 800976e:	f3bf 8f6f 	isb	sy
 8009772:	f3bf 8f4f 	dsb	sy
 8009776:	613b      	str	r3, [r7, #16]
}
 8009778:	bf00      	nop
 800977a:	bf00      	nop
 800977c:	e7fd      	b.n	800977a <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800977e:	6a3b      	ldr	r3, [r7, #32]
 8009780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009782:	4b0c      	ldr	r3, [pc, #48]	@ (80097b4 <xTaskGenericNotify+0x16c>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009788:	429a      	cmp	r2, r3
 800978a:	d907      	bls.n	800979c <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800978c:	4b0a      	ldr	r3, [pc, #40]	@ (80097b8 <xTaskGenericNotify+0x170>)
 800978e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009792:	601a      	str	r2, [r3, #0]
 8009794:	f3bf 8f4f 	dsb	sy
 8009798:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800979c:	f7ff fd7e 	bl	800929c <vPortExitCritical>

		return xReturn;
 80097a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3728      	adds	r7, #40	@ 0x28
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	240007ac 	.word	0x240007ac
 80097b0:	24000340 	.word	0x24000340
 80097b4:	2400033c 	.word	0x2400033c
 80097b8:	e000ed04 	.word	0xe000ed04

080097bc <std>:
 80097bc:	2300      	movs	r3, #0
 80097be:	b510      	push	{r4, lr}
 80097c0:	4604      	mov	r4, r0
 80097c2:	e9c0 3300 	strd	r3, r3, [r0]
 80097c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097ca:	6083      	str	r3, [r0, #8]
 80097cc:	8181      	strh	r1, [r0, #12]
 80097ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80097d0:	81c2      	strh	r2, [r0, #14]
 80097d2:	6183      	str	r3, [r0, #24]
 80097d4:	4619      	mov	r1, r3
 80097d6:	2208      	movs	r2, #8
 80097d8:	305c      	adds	r0, #92	@ 0x5c
 80097da:	f000 f9f9 	bl	8009bd0 <memset>
 80097de:	4b0d      	ldr	r3, [pc, #52]	@ (8009814 <std+0x58>)
 80097e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80097e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009818 <std+0x5c>)
 80097e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80097e6:	4b0d      	ldr	r3, [pc, #52]	@ (800981c <std+0x60>)
 80097e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80097ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009820 <std+0x64>)
 80097ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80097ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009824 <std+0x68>)
 80097f0:	6224      	str	r4, [r4, #32]
 80097f2:	429c      	cmp	r4, r3
 80097f4:	d006      	beq.n	8009804 <std+0x48>
 80097f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80097fa:	4294      	cmp	r4, r2
 80097fc:	d002      	beq.n	8009804 <std+0x48>
 80097fe:	33d0      	adds	r3, #208	@ 0xd0
 8009800:	429c      	cmp	r4, r3
 8009802:	d105      	bne.n	8009810 <std+0x54>
 8009804:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800980c:	f000 ba58 	b.w	8009cc0 <__retarget_lock_init_recursive>
 8009810:	bd10      	pop	{r4, pc}
 8009812:	bf00      	nop
 8009814:	08009a21 	.word	0x08009a21
 8009818:	08009a43 	.word	0x08009a43
 800981c:	08009a7b 	.word	0x08009a7b
 8009820:	08009a9f 	.word	0x08009a9f
 8009824:	240007c8 	.word	0x240007c8

08009828 <stdio_exit_handler>:
 8009828:	4a02      	ldr	r2, [pc, #8]	@ (8009834 <stdio_exit_handler+0xc>)
 800982a:	4903      	ldr	r1, [pc, #12]	@ (8009838 <stdio_exit_handler+0x10>)
 800982c:	4803      	ldr	r0, [pc, #12]	@ (800983c <stdio_exit_handler+0x14>)
 800982e:	f000 b869 	b.w	8009904 <_fwalk_sglue>
 8009832:	bf00      	nop
 8009834:	24000014 	.word	0x24000014
 8009838:	0800a579 	.word	0x0800a579
 800983c:	24000024 	.word	0x24000024

08009840 <cleanup_stdio>:
 8009840:	6841      	ldr	r1, [r0, #4]
 8009842:	4b0c      	ldr	r3, [pc, #48]	@ (8009874 <cleanup_stdio+0x34>)
 8009844:	4299      	cmp	r1, r3
 8009846:	b510      	push	{r4, lr}
 8009848:	4604      	mov	r4, r0
 800984a:	d001      	beq.n	8009850 <cleanup_stdio+0x10>
 800984c:	f000 fe94 	bl	800a578 <_fflush_r>
 8009850:	68a1      	ldr	r1, [r4, #8]
 8009852:	4b09      	ldr	r3, [pc, #36]	@ (8009878 <cleanup_stdio+0x38>)
 8009854:	4299      	cmp	r1, r3
 8009856:	d002      	beq.n	800985e <cleanup_stdio+0x1e>
 8009858:	4620      	mov	r0, r4
 800985a:	f000 fe8d 	bl	800a578 <_fflush_r>
 800985e:	68e1      	ldr	r1, [r4, #12]
 8009860:	4b06      	ldr	r3, [pc, #24]	@ (800987c <cleanup_stdio+0x3c>)
 8009862:	4299      	cmp	r1, r3
 8009864:	d004      	beq.n	8009870 <cleanup_stdio+0x30>
 8009866:	4620      	mov	r0, r4
 8009868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800986c:	f000 be84 	b.w	800a578 <_fflush_r>
 8009870:	bd10      	pop	{r4, pc}
 8009872:	bf00      	nop
 8009874:	240007c8 	.word	0x240007c8
 8009878:	24000830 	.word	0x24000830
 800987c:	24000898 	.word	0x24000898

08009880 <global_stdio_init.part.0>:
 8009880:	b510      	push	{r4, lr}
 8009882:	4b0b      	ldr	r3, [pc, #44]	@ (80098b0 <global_stdio_init.part.0+0x30>)
 8009884:	4c0b      	ldr	r4, [pc, #44]	@ (80098b4 <global_stdio_init.part.0+0x34>)
 8009886:	4a0c      	ldr	r2, [pc, #48]	@ (80098b8 <global_stdio_init.part.0+0x38>)
 8009888:	601a      	str	r2, [r3, #0]
 800988a:	4620      	mov	r0, r4
 800988c:	2200      	movs	r2, #0
 800988e:	2104      	movs	r1, #4
 8009890:	f7ff ff94 	bl	80097bc <std>
 8009894:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009898:	2201      	movs	r2, #1
 800989a:	2109      	movs	r1, #9
 800989c:	f7ff ff8e 	bl	80097bc <std>
 80098a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80098a4:	2202      	movs	r2, #2
 80098a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098aa:	2112      	movs	r1, #18
 80098ac:	f7ff bf86 	b.w	80097bc <std>
 80098b0:	24000900 	.word	0x24000900
 80098b4:	240007c8 	.word	0x240007c8
 80098b8:	08009829 	.word	0x08009829

080098bc <__sfp_lock_acquire>:
 80098bc:	4801      	ldr	r0, [pc, #4]	@ (80098c4 <__sfp_lock_acquire+0x8>)
 80098be:	f000 ba00 	b.w	8009cc2 <__retarget_lock_acquire_recursive>
 80098c2:	bf00      	nop
 80098c4:	24000909 	.word	0x24000909

080098c8 <__sfp_lock_release>:
 80098c8:	4801      	ldr	r0, [pc, #4]	@ (80098d0 <__sfp_lock_release+0x8>)
 80098ca:	f000 b9fb 	b.w	8009cc4 <__retarget_lock_release_recursive>
 80098ce:	bf00      	nop
 80098d0:	24000909 	.word	0x24000909

080098d4 <__sinit>:
 80098d4:	b510      	push	{r4, lr}
 80098d6:	4604      	mov	r4, r0
 80098d8:	f7ff fff0 	bl	80098bc <__sfp_lock_acquire>
 80098dc:	6a23      	ldr	r3, [r4, #32]
 80098de:	b11b      	cbz	r3, 80098e8 <__sinit+0x14>
 80098e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098e4:	f7ff bff0 	b.w	80098c8 <__sfp_lock_release>
 80098e8:	4b04      	ldr	r3, [pc, #16]	@ (80098fc <__sinit+0x28>)
 80098ea:	6223      	str	r3, [r4, #32]
 80098ec:	4b04      	ldr	r3, [pc, #16]	@ (8009900 <__sinit+0x2c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1f5      	bne.n	80098e0 <__sinit+0xc>
 80098f4:	f7ff ffc4 	bl	8009880 <global_stdio_init.part.0>
 80098f8:	e7f2      	b.n	80098e0 <__sinit+0xc>
 80098fa:	bf00      	nop
 80098fc:	08009841 	.word	0x08009841
 8009900:	24000900 	.word	0x24000900

08009904 <_fwalk_sglue>:
 8009904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009908:	4607      	mov	r7, r0
 800990a:	4688      	mov	r8, r1
 800990c:	4614      	mov	r4, r2
 800990e:	2600      	movs	r6, #0
 8009910:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009914:	f1b9 0901 	subs.w	r9, r9, #1
 8009918:	d505      	bpl.n	8009926 <_fwalk_sglue+0x22>
 800991a:	6824      	ldr	r4, [r4, #0]
 800991c:	2c00      	cmp	r4, #0
 800991e:	d1f7      	bne.n	8009910 <_fwalk_sglue+0xc>
 8009920:	4630      	mov	r0, r6
 8009922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009926:	89ab      	ldrh	r3, [r5, #12]
 8009928:	2b01      	cmp	r3, #1
 800992a:	d907      	bls.n	800993c <_fwalk_sglue+0x38>
 800992c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009930:	3301      	adds	r3, #1
 8009932:	d003      	beq.n	800993c <_fwalk_sglue+0x38>
 8009934:	4629      	mov	r1, r5
 8009936:	4638      	mov	r0, r7
 8009938:	47c0      	blx	r8
 800993a:	4306      	orrs	r6, r0
 800993c:	3568      	adds	r5, #104	@ 0x68
 800993e:	e7e9      	b.n	8009914 <_fwalk_sglue+0x10>

08009940 <iprintf>:
 8009940:	b40f      	push	{r0, r1, r2, r3}
 8009942:	b507      	push	{r0, r1, r2, lr}
 8009944:	4906      	ldr	r1, [pc, #24]	@ (8009960 <iprintf+0x20>)
 8009946:	ab04      	add	r3, sp, #16
 8009948:	6808      	ldr	r0, [r1, #0]
 800994a:	f853 2b04 	ldr.w	r2, [r3], #4
 800994e:	6881      	ldr	r1, [r0, #8]
 8009950:	9301      	str	r3, [sp, #4]
 8009952:	f000 fae9 	bl	8009f28 <_vfiprintf_r>
 8009956:	b003      	add	sp, #12
 8009958:	f85d eb04 	ldr.w	lr, [sp], #4
 800995c:	b004      	add	sp, #16
 800995e:	4770      	bx	lr
 8009960:	24000020 	.word	0x24000020

08009964 <_puts_r>:
 8009964:	6a03      	ldr	r3, [r0, #32]
 8009966:	b570      	push	{r4, r5, r6, lr}
 8009968:	6884      	ldr	r4, [r0, #8]
 800996a:	4605      	mov	r5, r0
 800996c:	460e      	mov	r6, r1
 800996e:	b90b      	cbnz	r3, 8009974 <_puts_r+0x10>
 8009970:	f7ff ffb0 	bl	80098d4 <__sinit>
 8009974:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009976:	07db      	lsls	r3, r3, #31
 8009978:	d405      	bmi.n	8009986 <_puts_r+0x22>
 800997a:	89a3      	ldrh	r3, [r4, #12]
 800997c:	0598      	lsls	r0, r3, #22
 800997e:	d402      	bmi.n	8009986 <_puts_r+0x22>
 8009980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009982:	f000 f99e 	bl	8009cc2 <__retarget_lock_acquire_recursive>
 8009986:	89a3      	ldrh	r3, [r4, #12]
 8009988:	0719      	lsls	r1, r3, #28
 800998a:	d502      	bpl.n	8009992 <_puts_r+0x2e>
 800998c:	6923      	ldr	r3, [r4, #16]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d135      	bne.n	80099fe <_puts_r+0x9a>
 8009992:	4621      	mov	r1, r4
 8009994:	4628      	mov	r0, r5
 8009996:	f000 f8c5 	bl	8009b24 <__swsetup_r>
 800999a:	b380      	cbz	r0, 80099fe <_puts_r+0x9a>
 800999c:	f04f 35ff 	mov.w	r5, #4294967295
 80099a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099a2:	07da      	lsls	r2, r3, #31
 80099a4:	d405      	bmi.n	80099b2 <_puts_r+0x4e>
 80099a6:	89a3      	ldrh	r3, [r4, #12]
 80099a8:	059b      	lsls	r3, r3, #22
 80099aa:	d402      	bmi.n	80099b2 <_puts_r+0x4e>
 80099ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099ae:	f000 f989 	bl	8009cc4 <__retarget_lock_release_recursive>
 80099b2:	4628      	mov	r0, r5
 80099b4:	bd70      	pop	{r4, r5, r6, pc}
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	da04      	bge.n	80099c4 <_puts_r+0x60>
 80099ba:	69a2      	ldr	r2, [r4, #24]
 80099bc:	429a      	cmp	r2, r3
 80099be:	dc17      	bgt.n	80099f0 <_puts_r+0x8c>
 80099c0:	290a      	cmp	r1, #10
 80099c2:	d015      	beq.n	80099f0 <_puts_r+0x8c>
 80099c4:	6823      	ldr	r3, [r4, #0]
 80099c6:	1c5a      	adds	r2, r3, #1
 80099c8:	6022      	str	r2, [r4, #0]
 80099ca:	7019      	strb	r1, [r3, #0]
 80099cc:	68a3      	ldr	r3, [r4, #8]
 80099ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80099d2:	3b01      	subs	r3, #1
 80099d4:	60a3      	str	r3, [r4, #8]
 80099d6:	2900      	cmp	r1, #0
 80099d8:	d1ed      	bne.n	80099b6 <_puts_r+0x52>
 80099da:	2b00      	cmp	r3, #0
 80099dc:	da11      	bge.n	8009a02 <_puts_r+0x9e>
 80099de:	4622      	mov	r2, r4
 80099e0:	210a      	movs	r1, #10
 80099e2:	4628      	mov	r0, r5
 80099e4:	f000 f85f 	bl	8009aa6 <__swbuf_r>
 80099e8:	3001      	adds	r0, #1
 80099ea:	d0d7      	beq.n	800999c <_puts_r+0x38>
 80099ec:	250a      	movs	r5, #10
 80099ee:	e7d7      	b.n	80099a0 <_puts_r+0x3c>
 80099f0:	4622      	mov	r2, r4
 80099f2:	4628      	mov	r0, r5
 80099f4:	f000 f857 	bl	8009aa6 <__swbuf_r>
 80099f8:	3001      	adds	r0, #1
 80099fa:	d1e7      	bne.n	80099cc <_puts_r+0x68>
 80099fc:	e7ce      	b.n	800999c <_puts_r+0x38>
 80099fe:	3e01      	subs	r6, #1
 8009a00:	e7e4      	b.n	80099cc <_puts_r+0x68>
 8009a02:	6823      	ldr	r3, [r4, #0]
 8009a04:	1c5a      	adds	r2, r3, #1
 8009a06:	6022      	str	r2, [r4, #0]
 8009a08:	220a      	movs	r2, #10
 8009a0a:	701a      	strb	r2, [r3, #0]
 8009a0c:	e7ee      	b.n	80099ec <_puts_r+0x88>
	...

08009a10 <puts>:
 8009a10:	4b02      	ldr	r3, [pc, #8]	@ (8009a1c <puts+0xc>)
 8009a12:	4601      	mov	r1, r0
 8009a14:	6818      	ldr	r0, [r3, #0]
 8009a16:	f7ff bfa5 	b.w	8009964 <_puts_r>
 8009a1a:	bf00      	nop
 8009a1c:	24000020 	.word	0x24000020

08009a20 <__sread>:
 8009a20:	b510      	push	{r4, lr}
 8009a22:	460c      	mov	r4, r1
 8009a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a28:	f000 f8fc 	bl	8009c24 <_read_r>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	bfab      	itete	ge
 8009a30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009a32:	89a3      	ldrhlt	r3, [r4, #12]
 8009a34:	181b      	addge	r3, r3, r0
 8009a36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009a3a:	bfac      	ite	ge
 8009a3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009a3e:	81a3      	strhlt	r3, [r4, #12]
 8009a40:	bd10      	pop	{r4, pc}

08009a42 <__swrite>:
 8009a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a46:	461f      	mov	r7, r3
 8009a48:	898b      	ldrh	r3, [r1, #12]
 8009a4a:	05db      	lsls	r3, r3, #23
 8009a4c:	4605      	mov	r5, r0
 8009a4e:	460c      	mov	r4, r1
 8009a50:	4616      	mov	r6, r2
 8009a52:	d505      	bpl.n	8009a60 <__swrite+0x1e>
 8009a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a58:	2302      	movs	r3, #2
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f000 f8d0 	bl	8009c00 <_lseek_r>
 8009a60:	89a3      	ldrh	r3, [r4, #12]
 8009a62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a6a:	81a3      	strh	r3, [r4, #12]
 8009a6c:	4632      	mov	r2, r6
 8009a6e:	463b      	mov	r3, r7
 8009a70:	4628      	mov	r0, r5
 8009a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a76:	f000 b8e7 	b.w	8009c48 <_write_r>

08009a7a <__sseek>:
 8009a7a:	b510      	push	{r4, lr}
 8009a7c:	460c      	mov	r4, r1
 8009a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a82:	f000 f8bd 	bl	8009c00 <_lseek_r>
 8009a86:	1c43      	adds	r3, r0, #1
 8009a88:	89a3      	ldrh	r3, [r4, #12]
 8009a8a:	bf15      	itete	ne
 8009a8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009a8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009a92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009a96:	81a3      	strheq	r3, [r4, #12]
 8009a98:	bf18      	it	ne
 8009a9a:	81a3      	strhne	r3, [r4, #12]
 8009a9c:	bd10      	pop	{r4, pc}

08009a9e <__sclose>:
 8009a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa2:	f000 b89d 	b.w	8009be0 <_close_r>

08009aa6 <__swbuf_r>:
 8009aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa8:	460e      	mov	r6, r1
 8009aaa:	4614      	mov	r4, r2
 8009aac:	4605      	mov	r5, r0
 8009aae:	b118      	cbz	r0, 8009ab8 <__swbuf_r+0x12>
 8009ab0:	6a03      	ldr	r3, [r0, #32]
 8009ab2:	b90b      	cbnz	r3, 8009ab8 <__swbuf_r+0x12>
 8009ab4:	f7ff ff0e 	bl	80098d4 <__sinit>
 8009ab8:	69a3      	ldr	r3, [r4, #24]
 8009aba:	60a3      	str	r3, [r4, #8]
 8009abc:	89a3      	ldrh	r3, [r4, #12]
 8009abe:	071a      	lsls	r2, r3, #28
 8009ac0:	d501      	bpl.n	8009ac6 <__swbuf_r+0x20>
 8009ac2:	6923      	ldr	r3, [r4, #16]
 8009ac4:	b943      	cbnz	r3, 8009ad8 <__swbuf_r+0x32>
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	4628      	mov	r0, r5
 8009aca:	f000 f82b 	bl	8009b24 <__swsetup_r>
 8009ace:	b118      	cbz	r0, 8009ad8 <__swbuf_r+0x32>
 8009ad0:	f04f 37ff 	mov.w	r7, #4294967295
 8009ad4:	4638      	mov	r0, r7
 8009ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ad8:	6823      	ldr	r3, [r4, #0]
 8009ada:	6922      	ldr	r2, [r4, #16]
 8009adc:	1a98      	subs	r0, r3, r2
 8009ade:	6963      	ldr	r3, [r4, #20]
 8009ae0:	b2f6      	uxtb	r6, r6
 8009ae2:	4283      	cmp	r3, r0
 8009ae4:	4637      	mov	r7, r6
 8009ae6:	dc05      	bgt.n	8009af4 <__swbuf_r+0x4e>
 8009ae8:	4621      	mov	r1, r4
 8009aea:	4628      	mov	r0, r5
 8009aec:	f000 fd44 	bl	800a578 <_fflush_r>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d1ed      	bne.n	8009ad0 <__swbuf_r+0x2a>
 8009af4:	68a3      	ldr	r3, [r4, #8]
 8009af6:	3b01      	subs	r3, #1
 8009af8:	60a3      	str	r3, [r4, #8]
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	1c5a      	adds	r2, r3, #1
 8009afe:	6022      	str	r2, [r4, #0]
 8009b00:	701e      	strb	r6, [r3, #0]
 8009b02:	6962      	ldr	r2, [r4, #20]
 8009b04:	1c43      	adds	r3, r0, #1
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d004      	beq.n	8009b14 <__swbuf_r+0x6e>
 8009b0a:	89a3      	ldrh	r3, [r4, #12]
 8009b0c:	07db      	lsls	r3, r3, #31
 8009b0e:	d5e1      	bpl.n	8009ad4 <__swbuf_r+0x2e>
 8009b10:	2e0a      	cmp	r6, #10
 8009b12:	d1df      	bne.n	8009ad4 <__swbuf_r+0x2e>
 8009b14:	4621      	mov	r1, r4
 8009b16:	4628      	mov	r0, r5
 8009b18:	f000 fd2e 	bl	800a578 <_fflush_r>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d0d9      	beq.n	8009ad4 <__swbuf_r+0x2e>
 8009b20:	e7d6      	b.n	8009ad0 <__swbuf_r+0x2a>
	...

08009b24 <__swsetup_r>:
 8009b24:	b538      	push	{r3, r4, r5, lr}
 8009b26:	4b29      	ldr	r3, [pc, #164]	@ (8009bcc <__swsetup_r+0xa8>)
 8009b28:	4605      	mov	r5, r0
 8009b2a:	6818      	ldr	r0, [r3, #0]
 8009b2c:	460c      	mov	r4, r1
 8009b2e:	b118      	cbz	r0, 8009b38 <__swsetup_r+0x14>
 8009b30:	6a03      	ldr	r3, [r0, #32]
 8009b32:	b90b      	cbnz	r3, 8009b38 <__swsetup_r+0x14>
 8009b34:	f7ff fece 	bl	80098d4 <__sinit>
 8009b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b3c:	0719      	lsls	r1, r3, #28
 8009b3e:	d422      	bmi.n	8009b86 <__swsetup_r+0x62>
 8009b40:	06da      	lsls	r2, r3, #27
 8009b42:	d407      	bmi.n	8009b54 <__swsetup_r+0x30>
 8009b44:	2209      	movs	r2, #9
 8009b46:	602a      	str	r2, [r5, #0]
 8009b48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b4c:	81a3      	strh	r3, [r4, #12]
 8009b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b52:	e033      	b.n	8009bbc <__swsetup_r+0x98>
 8009b54:	0758      	lsls	r0, r3, #29
 8009b56:	d512      	bpl.n	8009b7e <__swsetup_r+0x5a>
 8009b58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b5a:	b141      	cbz	r1, 8009b6e <__swsetup_r+0x4a>
 8009b5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b60:	4299      	cmp	r1, r3
 8009b62:	d002      	beq.n	8009b6a <__swsetup_r+0x46>
 8009b64:	4628      	mov	r0, r5
 8009b66:	f000 f8bd 	bl	8009ce4 <_free_r>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b6e:	89a3      	ldrh	r3, [r4, #12]
 8009b70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009b74:	81a3      	strh	r3, [r4, #12]
 8009b76:	2300      	movs	r3, #0
 8009b78:	6063      	str	r3, [r4, #4]
 8009b7a:	6923      	ldr	r3, [r4, #16]
 8009b7c:	6023      	str	r3, [r4, #0]
 8009b7e:	89a3      	ldrh	r3, [r4, #12]
 8009b80:	f043 0308 	orr.w	r3, r3, #8
 8009b84:	81a3      	strh	r3, [r4, #12]
 8009b86:	6923      	ldr	r3, [r4, #16]
 8009b88:	b94b      	cbnz	r3, 8009b9e <__swsetup_r+0x7a>
 8009b8a:	89a3      	ldrh	r3, [r4, #12]
 8009b8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b94:	d003      	beq.n	8009b9e <__swsetup_r+0x7a>
 8009b96:	4621      	mov	r1, r4
 8009b98:	4628      	mov	r0, r5
 8009b9a:	f000 fd3b 	bl	800a614 <__smakebuf_r>
 8009b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ba2:	f013 0201 	ands.w	r2, r3, #1
 8009ba6:	d00a      	beq.n	8009bbe <__swsetup_r+0x9a>
 8009ba8:	2200      	movs	r2, #0
 8009baa:	60a2      	str	r2, [r4, #8]
 8009bac:	6962      	ldr	r2, [r4, #20]
 8009bae:	4252      	negs	r2, r2
 8009bb0:	61a2      	str	r2, [r4, #24]
 8009bb2:	6922      	ldr	r2, [r4, #16]
 8009bb4:	b942      	cbnz	r2, 8009bc8 <__swsetup_r+0xa4>
 8009bb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009bba:	d1c5      	bne.n	8009b48 <__swsetup_r+0x24>
 8009bbc:	bd38      	pop	{r3, r4, r5, pc}
 8009bbe:	0799      	lsls	r1, r3, #30
 8009bc0:	bf58      	it	pl
 8009bc2:	6962      	ldrpl	r2, [r4, #20]
 8009bc4:	60a2      	str	r2, [r4, #8]
 8009bc6:	e7f4      	b.n	8009bb2 <__swsetup_r+0x8e>
 8009bc8:	2000      	movs	r0, #0
 8009bca:	e7f7      	b.n	8009bbc <__swsetup_r+0x98>
 8009bcc:	24000020 	.word	0x24000020

08009bd0 <memset>:
 8009bd0:	4402      	add	r2, r0
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d100      	bne.n	8009bda <memset+0xa>
 8009bd8:	4770      	bx	lr
 8009bda:	f803 1b01 	strb.w	r1, [r3], #1
 8009bde:	e7f9      	b.n	8009bd4 <memset+0x4>

08009be0 <_close_r>:
 8009be0:	b538      	push	{r3, r4, r5, lr}
 8009be2:	4d06      	ldr	r5, [pc, #24]	@ (8009bfc <_close_r+0x1c>)
 8009be4:	2300      	movs	r3, #0
 8009be6:	4604      	mov	r4, r0
 8009be8:	4608      	mov	r0, r1
 8009bea:	602b      	str	r3, [r5, #0]
 8009bec:	f7f8 fcff 	bl	80025ee <_close>
 8009bf0:	1c43      	adds	r3, r0, #1
 8009bf2:	d102      	bne.n	8009bfa <_close_r+0x1a>
 8009bf4:	682b      	ldr	r3, [r5, #0]
 8009bf6:	b103      	cbz	r3, 8009bfa <_close_r+0x1a>
 8009bf8:	6023      	str	r3, [r4, #0]
 8009bfa:	bd38      	pop	{r3, r4, r5, pc}
 8009bfc:	24000904 	.word	0x24000904

08009c00 <_lseek_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	4d07      	ldr	r5, [pc, #28]	@ (8009c20 <_lseek_r+0x20>)
 8009c04:	4604      	mov	r4, r0
 8009c06:	4608      	mov	r0, r1
 8009c08:	4611      	mov	r1, r2
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	602a      	str	r2, [r5, #0]
 8009c0e:	461a      	mov	r2, r3
 8009c10:	f7f8 fd14 	bl	800263c <_lseek>
 8009c14:	1c43      	adds	r3, r0, #1
 8009c16:	d102      	bne.n	8009c1e <_lseek_r+0x1e>
 8009c18:	682b      	ldr	r3, [r5, #0]
 8009c1a:	b103      	cbz	r3, 8009c1e <_lseek_r+0x1e>
 8009c1c:	6023      	str	r3, [r4, #0]
 8009c1e:	bd38      	pop	{r3, r4, r5, pc}
 8009c20:	24000904 	.word	0x24000904

08009c24 <_read_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	4d07      	ldr	r5, [pc, #28]	@ (8009c44 <_read_r+0x20>)
 8009c28:	4604      	mov	r4, r0
 8009c2a:	4608      	mov	r0, r1
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	2200      	movs	r2, #0
 8009c30:	602a      	str	r2, [r5, #0]
 8009c32:	461a      	mov	r2, r3
 8009c34:	f7f8 fca2 	bl	800257c <_read>
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d102      	bne.n	8009c42 <_read_r+0x1e>
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	b103      	cbz	r3, 8009c42 <_read_r+0x1e>
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	24000904 	.word	0x24000904

08009c48 <_write_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	4d07      	ldr	r5, [pc, #28]	@ (8009c68 <_write_r+0x20>)
 8009c4c:	4604      	mov	r4, r0
 8009c4e:	4608      	mov	r0, r1
 8009c50:	4611      	mov	r1, r2
 8009c52:	2200      	movs	r2, #0
 8009c54:	602a      	str	r2, [r5, #0]
 8009c56:	461a      	mov	r2, r3
 8009c58:	f7f8 fcad 	bl	80025b6 <_write>
 8009c5c:	1c43      	adds	r3, r0, #1
 8009c5e:	d102      	bne.n	8009c66 <_write_r+0x1e>
 8009c60:	682b      	ldr	r3, [r5, #0]
 8009c62:	b103      	cbz	r3, 8009c66 <_write_r+0x1e>
 8009c64:	6023      	str	r3, [r4, #0]
 8009c66:	bd38      	pop	{r3, r4, r5, pc}
 8009c68:	24000904 	.word	0x24000904

08009c6c <__errno>:
 8009c6c:	4b01      	ldr	r3, [pc, #4]	@ (8009c74 <__errno+0x8>)
 8009c6e:	6818      	ldr	r0, [r3, #0]
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	24000020 	.word	0x24000020

08009c78 <__libc_init_array>:
 8009c78:	b570      	push	{r4, r5, r6, lr}
 8009c7a:	4d0d      	ldr	r5, [pc, #52]	@ (8009cb0 <__libc_init_array+0x38>)
 8009c7c:	4c0d      	ldr	r4, [pc, #52]	@ (8009cb4 <__libc_init_array+0x3c>)
 8009c7e:	1b64      	subs	r4, r4, r5
 8009c80:	10a4      	asrs	r4, r4, #2
 8009c82:	2600      	movs	r6, #0
 8009c84:	42a6      	cmp	r6, r4
 8009c86:	d109      	bne.n	8009c9c <__libc_init_array+0x24>
 8009c88:	4d0b      	ldr	r5, [pc, #44]	@ (8009cb8 <__libc_init_array+0x40>)
 8009c8a:	4c0c      	ldr	r4, [pc, #48]	@ (8009cbc <__libc_init_array+0x44>)
 8009c8c:	f000 fd30 	bl	800a6f0 <_init>
 8009c90:	1b64      	subs	r4, r4, r5
 8009c92:	10a4      	asrs	r4, r4, #2
 8009c94:	2600      	movs	r6, #0
 8009c96:	42a6      	cmp	r6, r4
 8009c98:	d105      	bne.n	8009ca6 <__libc_init_array+0x2e>
 8009c9a:	bd70      	pop	{r4, r5, r6, pc}
 8009c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ca0:	4798      	blx	r3
 8009ca2:	3601      	adds	r6, #1
 8009ca4:	e7ee      	b.n	8009c84 <__libc_init_array+0xc>
 8009ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009caa:	4798      	blx	r3
 8009cac:	3601      	adds	r6, #1
 8009cae:	e7f2      	b.n	8009c96 <__libc_init_array+0x1e>
 8009cb0:	0800aa04 	.word	0x0800aa04
 8009cb4:	0800aa04 	.word	0x0800aa04
 8009cb8:	0800aa04 	.word	0x0800aa04
 8009cbc:	0800aa08 	.word	0x0800aa08

08009cc0 <__retarget_lock_init_recursive>:
 8009cc0:	4770      	bx	lr

08009cc2 <__retarget_lock_acquire_recursive>:
 8009cc2:	4770      	bx	lr

08009cc4 <__retarget_lock_release_recursive>:
 8009cc4:	4770      	bx	lr

08009cc6 <memcpy>:
 8009cc6:	440a      	add	r2, r1
 8009cc8:	4291      	cmp	r1, r2
 8009cca:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cce:	d100      	bne.n	8009cd2 <memcpy+0xc>
 8009cd0:	4770      	bx	lr
 8009cd2:	b510      	push	{r4, lr}
 8009cd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cdc:	4291      	cmp	r1, r2
 8009cde:	d1f9      	bne.n	8009cd4 <memcpy+0xe>
 8009ce0:	bd10      	pop	{r4, pc}
	...

08009ce4 <_free_r>:
 8009ce4:	b538      	push	{r3, r4, r5, lr}
 8009ce6:	4605      	mov	r5, r0
 8009ce8:	2900      	cmp	r1, #0
 8009cea:	d041      	beq.n	8009d70 <_free_r+0x8c>
 8009cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cf0:	1f0c      	subs	r4, r1, #4
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	bfb8      	it	lt
 8009cf6:	18e4      	addlt	r4, r4, r3
 8009cf8:	f000 f8e0 	bl	8009ebc <__malloc_lock>
 8009cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8009d74 <_free_r+0x90>)
 8009cfe:	6813      	ldr	r3, [r2, #0]
 8009d00:	b933      	cbnz	r3, 8009d10 <_free_r+0x2c>
 8009d02:	6063      	str	r3, [r4, #4]
 8009d04:	6014      	str	r4, [r2, #0]
 8009d06:	4628      	mov	r0, r5
 8009d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d0c:	f000 b8dc 	b.w	8009ec8 <__malloc_unlock>
 8009d10:	42a3      	cmp	r3, r4
 8009d12:	d908      	bls.n	8009d26 <_free_r+0x42>
 8009d14:	6820      	ldr	r0, [r4, #0]
 8009d16:	1821      	adds	r1, r4, r0
 8009d18:	428b      	cmp	r3, r1
 8009d1a:	bf01      	itttt	eq
 8009d1c:	6819      	ldreq	r1, [r3, #0]
 8009d1e:	685b      	ldreq	r3, [r3, #4]
 8009d20:	1809      	addeq	r1, r1, r0
 8009d22:	6021      	streq	r1, [r4, #0]
 8009d24:	e7ed      	b.n	8009d02 <_free_r+0x1e>
 8009d26:	461a      	mov	r2, r3
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	b10b      	cbz	r3, 8009d30 <_free_r+0x4c>
 8009d2c:	42a3      	cmp	r3, r4
 8009d2e:	d9fa      	bls.n	8009d26 <_free_r+0x42>
 8009d30:	6811      	ldr	r1, [r2, #0]
 8009d32:	1850      	adds	r0, r2, r1
 8009d34:	42a0      	cmp	r0, r4
 8009d36:	d10b      	bne.n	8009d50 <_free_r+0x6c>
 8009d38:	6820      	ldr	r0, [r4, #0]
 8009d3a:	4401      	add	r1, r0
 8009d3c:	1850      	adds	r0, r2, r1
 8009d3e:	4283      	cmp	r3, r0
 8009d40:	6011      	str	r1, [r2, #0]
 8009d42:	d1e0      	bne.n	8009d06 <_free_r+0x22>
 8009d44:	6818      	ldr	r0, [r3, #0]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	6053      	str	r3, [r2, #4]
 8009d4a:	4408      	add	r0, r1
 8009d4c:	6010      	str	r0, [r2, #0]
 8009d4e:	e7da      	b.n	8009d06 <_free_r+0x22>
 8009d50:	d902      	bls.n	8009d58 <_free_r+0x74>
 8009d52:	230c      	movs	r3, #12
 8009d54:	602b      	str	r3, [r5, #0]
 8009d56:	e7d6      	b.n	8009d06 <_free_r+0x22>
 8009d58:	6820      	ldr	r0, [r4, #0]
 8009d5a:	1821      	adds	r1, r4, r0
 8009d5c:	428b      	cmp	r3, r1
 8009d5e:	bf04      	itt	eq
 8009d60:	6819      	ldreq	r1, [r3, #0]
 8009d62:	685b      	ldreq	r3, [r3, #4]
 8009d64:	6063      	str	r3, [r4, #4]
 8009d66:	bf04      	itt	eq
 8009d68:	1809      	addeq	r1, r1, r0
 8009d6a:	6021      	streq	r1, [r4, #0]
 8009d6c:	6054      	str	r4, [r2, #4]
 8009d6e:	e7ca      	b.n	8009d06 <_free_r+0x22>
 8009d70:	bd38      	pop	{r3, r4, r5, pc}
 8009d72:	bf00      	nop
 8009d74:	24000910 	.word	0x24000910

08009d78 <sbrk_aligned>:
 8009d78:	b570      	push	{r4, r5, r6, lr}
 8009d7a:	4e0f      	ldr	r6, [pc, #60]	@ (8009db8 <sbrk_aligned+0x40>)
 8009d7c:	460c      	mov	r4, r1
 8009d7e:	6831      	ldr	r1, [r6, #0]
 8009d80:	4605      	mov	r5, r0
 8009d82:	b911      	cbnz	r1, 8009d8a <sbrk_aligned+0x12>
 8009d84:	f000 fca4 	bl	800a6d0 <_sbrk_r>
 8009d88:	6030      	str	r0, [r6, #0]
 8009d8a:	4621      	mov	r1, r4
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	f000 fc9f 	bl	800a6d0 <_sbrk_r>
 8009d92:	1c43      	adds	r3, r0, #1
 8009d94:	d103      	bne.n	8009d9e <sbrk_aligned+0x26>
 8009d96:	f04f 34ff 	mov.w	r4, #4294967295
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	bd70      	pop	{r4, r5, r6, pc}
 8009d9e:	1cc4      	adds	r4, r0, #3
 8009da0:	f024 0403 	bic.w	r4, r4, #3
 8009da4:	42a0      	cmp	r0, r4
 8009da6:	d0f8      	beq.n	8009d9a <sbrk_aligned+0x22>
 8009da8:	1a21      	subs	r1, r4, r0
 8009daa:	4628      	mov	r0, r5
 8009dac:	f000 fc90 	bl	800a6d0 <_sbrk_r>
 8009db0:	3001      	adds	r0, #1
 8009db2:	d1f2      	bne.n	8009d9a <sbrk_aligned+0x22>
 8009db4:	e7ef      	b.n	8009d96 <sbrk_aligned+0x1e>
 8009db6:	bf00      	nop
 8009db8:	2400090c 	.word	0x2400090c

08009dbc <_malloc_r>:
 8009dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dc0:	1ccd      	adds	r5, r1, #3
 8009dc2:	f025 0503 	bic.w	r5, r5, #3
 8009dc6:	3508      	adds	r5, #8
 8009dc8:	2d0c      	cmp	r5, #12
 8009dca:	bf38      	it	cc
 8009dcc:	250c      	movcc	r5, #12
 8009dce:	2d00      	cmp	r5, #0
 8009dd0:	4606      	mov	r6, r0
 8009dd2:	db01      	blt.n	8009dd8 <_malloc_r+0x1c>
 8009dd4:	42a9      	cmp	r1, r5
 8009dd6:	d904      	bls.n	8009de2 <_malloc_r+0x26>
 8009dd8:	230c      	movs	r3, #12
 8009dda:	6033      	str	r3, [r6, #0]
 8009ddc:	2000      	movs	r0, #0
 8009dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009de2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009eb8 <_malloc_r+0xfc>
 8009de6:	f000 f869 	bl	8009ebc <__malloc_lock>
 8009dea:	f8d8 3000 	ldr.w	r3, [r8]
 8009dee:	461c      	mov	r4, r3
 8009df0:	bb44      	cbnz	r4, 8009e44 <_malloc_r+0x88>
 8009df2:	4629      	mov	r1, r5
 8009df4:	4630      	mov	r0, r6
 8009df6:	f7ff ffbf 	bl	8009d78 <sbrk_aligned>
 8009dfa:	1c43      	adds	r3, r0, #1
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	d158      	bne.n	8009eb2 <_malloc_r+0xf6>
 8009e00:	f8d8 4000 	ldr.w	r4, [r8]
 8009e04:	4627      	mov	r7, r4
 8009e06:	2f00      	cmp	r7, #0
 8009e08:	d143      	bne.n	8009e92 <_malloc_r+0xd6>
 8009e0a:	2c00      	cmp	r4, #0
 8009e0c:	d04b      	beq.n	8009ea6 <_malloc_r+0xea>
 8009e0e:	6823      	ldr	r3, [r4, #0]
 8009e10:	4639      	mov	r1, r7
 8009e12:	4630      	mov	r0, r6
 8009e14:	eb04 0903 	add.w	r9, r4, r3
 8009e18:	f000 fc5a 	bl	800a6d0 <_sbrk_r>
 8009e1c:	4581      	cmp	r9, r0
 8009e1e:	d142      	bne.n	8009ea6 <_malloc_r+0xea>
 8009e20:	6821      	ldr	r1, [r4, #0]
 8009e22:	1a6d      	subs	r5, r5, r1
 8009e24:	4629      	mov	r1, r5
 8009e26:	4630      	mov	r0, r6
 8009e28:	f7ff ffa6 	bl	8009d78 <sbrk_aligned>
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	d03a      	beq.n	8009ea6 <_malloc_r+0xea>
 8009e30:	6823      	ldr	r3, [r4, #0]
 8009e32:	442b      	add	r3, r5
 8009e34:	6023      	str	r3, [r4, #0]
 8009e36:	f8d8 3000 	ldr.w	r3, [r8]
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	bb62      	cbnz	r2, 8009e98 <_malloc_r+0xdc>
 8009e3e:	f8c8 7000 	str.w	r7, [r8]
 8009e42:	e00f      	b.n	8009e64 <_malloc_r+0xa8>
 8009e44:	6822      	ldr	r2, [r4, #0]
 8009e46:	1b52      	subs	r2, r2, r5
 8009e48:	d420      	bmi.n	8009e8c <_malloc_r+0xd0>
 8009e4a:	2a0b      	cmp	r2, #11
 8009e4c:	d917      	bls.n	8009e7e <_malloc_r+0xc2>
 8009e4e:	1961      	adds	r1, r4, r5
 8009e50:	42a3      	cmp	r3, r4
 8009e52:	6025      	str	r5, [r4, #0]
 8009e54:	bf18      	it	ne
 8009e56:	6059      	strne	r1, [r3, #4]
 8009e58:	6863      	ldr	r3, [r4, #4]
 8009e5a:	bf08      	it	eq
 8009e5c:	f8c8 1000 	streq.w	r1, [r8]
 8009e60:	5162      	str	r2, [r4, r5]
 8009e62:	604b      	str	r3, [r1, #4]
 8009e64:	4630      	mov	r0, r6
 8009e66:	f000 f82f 	bl	8009ec8 <__malloc_unlock>
 8009e6a:	f104 000b 	add.w	r0, r4, #11
 8009e6e:	1d23      	adds	r3, r4, #4
 8009e70:	f020 0007 	bic.w	r0, r0, #7
 8009e74:	1ac2      	subs	r2, r0, r3
 8009e76:	bf1c      	itt	ne
 8009e78:	1a1b      	subne	r3, r3, r0
 8009e7a:	50a3      	strne	r3, [r4, r2]
 8009e7c:	e7af      	b.n	8009dde <_malloc_r+0x22>
 8009e7e:	6862      	ldr	r2, [r4, #4]
 8009e80:	42a3      	cmp	r3, r4
 8009e82:	bf0c      	ite	eq
 8009e84:	f8c8 2000 	streq.w	r2, [r8]
 8009e88:	605a      	strne	r2, [r3, #4]
 8009e8a:	e7eb      	b.n	8009e64 <_malloc_r+0xa8>
 8009e8c:	4623      	mov	r3, r4
 8009e8e:	6864      	ldr	r4, [r4, #4]
 8009e90:	e7ae      	b.n	8009df0 <_malloc_r+0x34>
 8009e92:	463c      	mov	r4, r7
 8009e94:	687f      	ldr	r7, [r7, #4]
 8009e96:	e7b6      	b.n	8009e06 <_malloc_r+0x4a>
 8009e98:	461a      	mov	r2, r3
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	42a3      	cmp	r3, r4
 8009e9e:	d1fb      	bne.n	8009e98 <_malloc_r+0xdc>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	6053      	str	r3, [r2, #4]
 8009ea4:	e7de      	b.n	8009e64 <_malloc_r+0xa8>
 8009ea6:	230c      	movs	r3, #12
 8009ea8:	6033      	str	r3, [r6, #0]
 8009eaa:	4630      	mov	r0, r6
 8009eac:	f000 f80c 	bl	8009ec8 <__malloc_unlock>
 8009eb0:	e794      	b.n	8009ddc <_malloc_r+0x20>
 8009eb2:	6005      	str	r5, [r0, #0]
 8009eb4:	e7d6      	b.n	8009e64 <_malloc_r+0xa8>
 8009eb6:	bf00      	nop
 8009eb8:	24000910 	.word	0x24000910

08009ebc <__malloc_lock>:
 8009ebc:	4801      	ldr	r0, [pc, #4]	@ (8009ec4 <__malloc_lock+0x8>)
 8009ebe:	f7ff bf00 	b.w	8009cc2 <__retarget_lock_acquire_recursive>
 8009ec2:	bf00      	nop
 8009ec4:	24000908 	.word	0x24000908

08009ec8 <__malloc_unlock>:
 8009ec8:	4801      	ldr	r0, [pc, #4]	@ (8009ed0 <__malloc_unlock+0x8>)
 8009eca:	f7ff befb 	b.w	8009cc4 <__retarget_lock_release_recursive>
 8009ece:	bf00      	nop
 8009ed0:	24000908 	.word	0x24000908

08009ed4 <__sfputc_r>:
 8009ed4:	6893      	ldr	r3, [r2, #8]
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	b410      	push	{r4}
 8009edc:	6093      	str	r3, [r2, #8]
 8009ede:	da08      	bge.n	8009ef2 <__sfputc_r+0x1e>
 8009ee0:	6994      	ldr	r4, [r2, #24]
 8009ee2:	42a3      	cmp	r3, r4
 8009ee4:	db01      	blt.n	8009eea <__sfputc_r+0x16>
 8009ee6:	290a      	cmp	r1, #10
 8009ee8:	d103      	bne.n	8009ef2 <__sfputc_r+0x1e>
 8009eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009eee:	f7ff bdda 	b.w	8009aa6 <__swbuf_r>
 8009ef2:	6813      	ldr	r3, [r2, #0]
 8009ef4:	1c58      	adds	r0, r3, #1
 8009ef6:	6010      	str	r0, [r2, #0]
 8009ef8:	7019      	strb	r1, [r3, #0]
 8009efa:	4608      	mov	r0, r1
 8009efc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f00:	4770      	bx	lr

08009f02 <__sfputs_r>:
 8009f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f04:	4606      	mov	r6, r0
 8009f06:	460f      	mov	r7, r1
 8009f08:	4614      	mov	r4, r2
 8009f0a:	18d5      	adds	r5, r2, r3
 8009f0c:	42ac      	cmp	r4, r5
 8009f0e:	d101      	bne.n	8009f14 <__sfputs_r+0x12>
 8009f10:	2000      	movs	r0, #0
 8009f12:	e007      	b.n	8009f24 <__sfputs_r+0x22>
 8009f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f18:	463a      	mov	r2, r7
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	f7ff ffda 	bl	8009ed4 <__sfputc_r>
 8009f20:	1c43      	adds	r3, r0, #1
 8009f22:	d1f3      	bne.n	8009f0c <__sfputs_r+0xa>
 8009f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f28 <_vfiprintf_r>:
 8009f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f2c:	460d      	mov	r5, r1
 8009f2e:	b09d      	sub	sp, #116	@ 0x74
 8009f30:	4614      	mov	r4, r2
 8009f32:	4698      	mov	r8, r3
 8009f34:	4606      	mov	r6, r0
 8009f36:	b118      	cbz	r0, 8009f40 <_vfiprintf_r+0x18>
 8009f38:	6a03      	ldr	r3, [r0, #32]
 8009f3a:	b90b      	cbnz	r3, 8009f40 <_vfiprintf_r+0x18>
 8009f3c:	f7ff fcca 	bl	80098d4 <__sinit>
 8009f40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f42:	07d9      	lsls	r1, r3, #31
 8009f44:	d405      	bmi.n	8009f52 <_vfiprintf_r+0x2a>
 8009f46:	89ab      	ldrh	r3, [r5, #12]
 8009f48:	059a      	lsls	r2, r3, #22
 8009f4a:	d402      	bmi.n	8009f52 <_vfiprintf_r+0x2a>
 8009f4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f4e:	f7ff feb8 	bl	8009cc2 <__retarget_lock_acquire_recursive>
 8009f52:	89ab      	ldrh	r3, [r5, #12]
 8009f54:	071b      	lsls	r3, r3, #28
 8009f56:	d501      	bpl.n	8009f5c <_vfiprintf_r+0x34>
 8009f58:	692b      	ldr	r3, [r5, #16]
 8009f5a:	b99b      	cbnz	r3, 8009f84 <_vfiprintf_r+0x5c>
 8009f5c:	4629      	mov	r1, r5
 8009f5e:	4630      	mov	r0, r6
 8009f60:	f7ff fde0 	bl	8009b24 <__swsetup_r>
 8009f64:	b170      	cbz	r0, 8009f84 <_vfiprintf_r+0x5c>
 8009f66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f68:	07dc      	lsls	r4, r3, #31
 8009f6a:	d504      	bpl.n	8009f76 <_vfiprintf_r+0x4e>
 8009f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f70:	b01d      	add	sp, #116	@ 0x74
 8009f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f76:	89ab      	ldrh	r3, [r5, #12]
 8009f78:	0598      	lsls	r0, r3, #22
 8009f7a:	d4f7      	bmi.n	8009f6c <_vfiprintf_r+0x44>
 8009f7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f7e:	f7ff fea1 	bl	8009cc4 <__retarget_lock_release_recursive>
 8009f82:	e7f3      	b.n	8009f6c <_vfiprintf_r+0x44>
 8009f84:	2300      	movs	r3, #0
 8009f86:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f88:	2320      	movs	r3, #32
 8009f8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f92:	2330      	movs	r3, #48	@ 0x30
 8009f94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a144 <_vfiprintf_r+0x21c>
 8009f98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f9c:	f04f 0901 	mov.w	r9, #1
 8009fa0:	4623      	mov	r3, r4
 8009fa2:	469a      	mov	sl, r3
 8009fa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fa8:	b10a      	cbz	r2, 8009fae <_vfiprintf_r+0x86>
 8009faa:	2a25      	cmp	r2, #37	@ 0x25
 8009fac:	d1f9      	bne.n	8009fa2 <_vfiprintf_r+0x7a>
 8009fae:	ebba 0b04 	subs.w	fp, sl, r4
 8009fb2:	d00b      	beq.n	8009fcc <_vfiprintf_r+0xa4>
 8009fb4:	465b      	mov	r3, fp
 8009fb6:	4622      	mov	r2, r4
 8009fb8:	4629      	mov	r1, r5
 8009fba:	4630      	mov	r0, r6
 8009fbc:	f7ff ffa1 	bl	8009f02 <__sfputs_r>
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	f000 80a7 	beq.w	800a114 <_vfiprintf_r+0x1ec>
 8009fc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fc8:	445a      	add	r2, fp
 8009fca:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f000 809f 	beq.w	800a114 <_vfiprintf_r+0x1ec>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fe0:	f10a 0a01 	add.w	sl, sl, #1
 8009fe4:	9304      	str	r3, [sp, #16]
 8009fe6:	9307      	str	r3, [sp, #28]
 8009fe8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fec:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fee:	4654      	mov	r4, sl
 8009ff0:	2205      	movs	r2, #5
 8009ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ff6:	4853      	ldr	r0, [pc, #332]	@ (800a144 <_vfiprintf_r+0x21c>)
 8009ff8:	f7f6 f972 	bl	80002e0 <memchr>
 8009ffc:	9a04      	ldr	r2, [sp, #16]
 8009ffe:	b9d8      	cbnz	r0, 800a038 <_vfiprintf_r+0x110>
 800a000:	06d1      	lsls	r1, r2, #27
 800a002:	bf44      	itt	mi
 800a004:	2320      	movmi	r3, #32
 800a006:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a00a:	0713      	lsls	r3, r2, #28
 800a00c:	bf44      	itt	mi
 800a00e:	232b      	movmi	r3, #43	@ 0x2b
 800a010:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a014:	f89a 3000 	ldrb.w	r3, [sl]
 800a018:	2b2a      	cmp	r3, #42	@ 0x2a
 800a01a:	d015      	beq.n	800a048 <_vfiprintf_r+0x120>
 800a01c:	9a07      	ldr	r2, [sp, #28]
 800a01e:	4654      	mov	r4, sl
 800a020:	2000      	movs	r0, #0
 800a022:	f04f 0c0a 	mov.w	ip, #10
 800a026:	4621      	mov	r1, r4
 800a028:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a02c:	3b30      	subs	r3, #48	@ 0x30
 800a02e:	2b09      	cmp	r3, #9
 800a030:	d94b      	bls.n	800a0ca <_vfiprintf_r+0x1a2>
 800a032:	b1b0      	cbz	r0, 800a062 <_vfiprintf_r+0x13a>
 800a034:	9207      	str	r2, [sp, #28]
 800a036:	e014      	b.n	800a062 <_vfiprintf_r+0x13a>
 800a038:	eba0 0308 	sub.w	r3, r0, r8
 800a03c:	fa09 f303 	lsl.w	r3, r9, r3
 800a040:	4313      	orrs	r3, r2
 800a042:	9304      	str	r3, [sp, #16]
 800a044:	46a2      	mov	sl, r4
 800a046:	e7d2      	b.n	8009fee <_vfiprintf_r+0xc6>
 800a048:	9b03      	ldr	r3, [sp, #12]
 800a04a:	1d19      	adds	r1, r3, #4
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	9103      	str	r1, [sp, #12]
 800a050:	2b00      	cmp	r3, #0
 800a052:	bfbb      	ittet	lt
 800a054:	425b      	neglt	r3, r3
 800a056:	f042 0202 	orrlt.w	r2, r2, #2
 800a05a:	9307      	strge	r3, [sp, #28]
 800a05c:	9307      	strlt	r3, [sp, #28]
 800a05e:	bfb8      	it	lt
 800a060:	9204      	strlt	r2, [sp, #16]
 800a062:	7823      	ldrb	r3, [r4, #0]
 800a064:	2b2e      	cmp	r3, #46	@ 0x2e
 800a066:	d10a      	bne.n	800a07e <_vfiprintf_r+0x156>
 800a068:	7863      	ldrb	r3, [r4, #1]
 800a06a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a06c:	d132      	bne.n	800a0d4 <_vfiprintf_r+0x1ac>
 800a06e:	9b03      	ldr	r3, [sp, #12]
 800a070:	1d1a      	adds	r2, r3, #4
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	9203      	str	r2, [sp, #12]
 800a076:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a07a:	3402      	adds	r4, #2
 800a07c:	9305      	str	r3, [sp, #20]
 800a07e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a154 <_vfiprintf_r+0x22c>
 800a082:	7821      	ldrb	r1, [r4, #0]
 800a084:	2203      	movs	r2, #3
 800a086:	4650      	mov	r0, sl
 800a088:	f7f6 f92a 	bl	80002e0 <memchr>
 800a08c:	b138      	cbz	r0, 800a09e <_vfiprintf_r+0x176>
 800a08e:	9b04      	ldr	r3, [sp, #16]
 800a090:	eba0 000a 	sub.w	r0, r0, sl
 800a094:	2240      	movs	r2, #64	@ 0x40
 800a096:	4082      	lsls	r2, r0
 800a098:	4313      	orrs	r3, r2
 800a09a:	3401      	adds	r4, #1
 800a09c:	9304      	str	r3, [sp, #16]
 800a09e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0a2:	4829      	ldr	r0, [pc, #164]	@ (800a148 <_vfiprintf_r+0x220>)
 800a0a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0a8:	2206      	movs	r2, #6
 800a0aa:	f7f6 f919 	bl	80002e0 <memchr>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d03f      	beq.n	800a132 <_vfiprintf_r+0x20a>
 800a0b2:	4b26      	ldr	r3, [pc, #152]	@ (800a14c <_vfiprintf_r+0x224>)
 800a0b4:	bb1b      	cbnz	r3, 800a0fe <_vfiprintf_r+0x1d6>
 800a0b6:	9b03      	ldr	r3, [sp, #12]
 800a0b8:	3307      	adds	r3, #7
 800a0ba:	f023 0307 	bic.w	r3, r3, #7
 800a0be:	3308      	adds	r3, #8
 800a0c0:	9303      	str	r3, [sp, #12]
 800a0c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0c4:	443b      	add	r3, r7
 800a0c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0c8:	e76a      	b.n	8009fa0 <_vfiprintf_r+0x78>
 800a0ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0ce:	460c      	mov	r4, r1
 800a0d0:	2001      	movs	r0, #1
 800a0d2:	e7a8      	b.n	800a026 <_vfiprintf_r+0xfe>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	3401      	adds	r4, #1
 800a0d8:	9305      	str	r3, [sp, #20]
 800a0da:	4619      	mov	r1, r3
 800a0dc:	f04f 0c0a 	mov.w	ip, #10
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0e6:	3a30      	subs	r2, #48	@ 0x30
 800a0e8:	2a09      	cmp	r2, #9
 800a0ea:	d903      	bls.n	800a0f4 <_vfiprintf_r+0x1cc>
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d0c6      	beq.n	800a07e <_vfiprintf_r+0x156>
 800a0f0:	9105      	str	r1, [sp, #20]
 800a0f2:	e7c4      	b.n	800a07e <_vfiprintf_r+0x156>
 800a0f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e7f0      	b.n	800a0e0 <_vfiprintf_r+0x1b8>
 800a0fe:	ab03      	add	r3, sp, #12
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	462a      	mov	r2, r5
 800a104:	4b12      	ldr	r3, [pc, #72]	@ (800a150 <_vfiprintf_r+0x228>)
 800a106:	a904      	add	r1, sp, #16
 800a108:	4630      	mov	r0, r6
 800a10a:	f3af 8000 	nop.w
 800a10e:	4607      	mov	r7, r0
 800a110:	1c78      	adds	r0, r7, #1
 800a112:	d1d6      	bne.n	800a0c2 <_vfiprintf_r+0x19a>
 800a114:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a116:	07d9      	lsls	r1, r3, #31
 800a118:	d405      	bmi.n	800a126 <_vfiprintf_r+0x1fe>
 800a11a:	89ab      	ldrh	r3, [r5, #12]
 800a11c:	059a      	lsls	r2, r3, #22
 800a11e:	d402      	bmi.n	800a126 <_vfiprintf_r+0x1fe>
 800a120:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a122:	f7ff fdcf 	bl	8009cc4 <__retarget_lock_release_recursive>
 800a126:	89ab      	ldrh	r3, [r5, #12]
 800a128:	065b      	lsls	r3, r3, #25
 800a12a:	f53f af1f 	bmi.w	8009f6c <_vfiprintf_r+0x44>
 800a12e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a130:	e71e      	b.n	8009f70 <_vfiprintf_r+0x48>
 800a132:	ab03      	add	r3, sp, #12
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	462a      	mov	r2, r5
 800a138:	4b05      	ldr	r3, [pc, #20]	@ (800a150 <_vfiprintf_r+0x228>)
 800a13a:	a904      	add	r1, sp, #16
 800a13c:	4630      	mov	r0, r6
 800a13e:	f000 f879 	bl	800a234 <_printf_i>
 800a142:	e7e4      	b.n	800a10e <_vfiprintf_r+0x1e6>
 800a144:	0800a9c8 	.word	0x0800a9c8
 800a148:	0800a9d2 	.word	0x0800a9d2
 800a14c:	00000000 	.word	0x00000000
 800a150:	08009f03 	.word	0x08009f03
 800a154:	0800a9ce 	.word	0x0800a9ce

0800a158 <_printf_common>:
 800a158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a15c:	4616      	mov	r6, r2
 800a15e:	4698      	mov	r8, r3
 800a160:	688a      	ldr	r2, [r1, #8]
 800a162:	690b      	ldr	r3, [r1, #16]
 800a164:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a168:	4293      	cmp	r3, r2
 800a16a:	bfb8      	it	lt
 800a16c:	4613      	movlt	r3, r2
 800a16e:	6033      	str	r3, [r6, #0]
 800a170:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a174:	4607      	mov	r7, r0
 800a176:	460c      	mov	r4, r1
 800a178:	b10a      	cbz	r2, 800a17e <_printf_common+0x26>
 800a17a:	3301      	adds	r3, #1
 800a17c:	6033      	str	r3, [r6, #0]
 800a17e:	6823      	ldr	r3, [r4, #0]
 800a180:	0699      	lsls	r1, r3, #26
 800a182:	bf42      	ittt	mi
 800a184:	6833      	ldrmi	r3, [r6, #0]
 800a186:	3302      	addmi	r3, #2
 800a188:	6033      	strmi	r3, [r6, #0]
 800a18a:	6825      	ldr	r5, [r4, #0]
 800a18c:	f015 0506 	ands.w	r5, r5, #6
 800a190:	d106      	bne.n	800a1a0 <_printf_common+0x48>
 800a192:	f104 0a19 	add.w	sl, r4, #25
 800a196:	68e3      	ldr	r3, [r4, #12]
 800a198:	6832      	ldr	r2, [r6, #0]
 800a19a:	1a9b      	subs	r3, r3, r2
 800a19c:	42ab      	cmp	r3, r5
 800a19e:	dc26      	bgt.n	800a1ee <_printf_common+0x96>
 800a1a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a1a4:	6822      	ldr	r2, [r4, #0]
 800a1a6:	3b00      	subs	r3, #0
 800a1a8:	bf18      	it	ne
 800a1aa:	2301      	movne	r3, #1
 800a1ac:	0692      	lsls	r2, r2, #26
 800a1ae:	d42b      	bmi.n	800a208 <_printf_common+0xb0>
 800a1b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a1b4:	4641      	mov	r1, r8
 800a1b6:	4638      	mov	r0, r7
 800a1b8:	47c8      	blx	r9
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	d01e      	beq.n	800a1fc <_printf_common+0xa4>
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	6922      	ldr	r2, [r4, #16]
 800a1c2:	f003 0306 	and.w	r3, r3, #6
 800a1c6:	2b04      	cmp	r3, #4
 800a1c8:	bf02      	ittt	eq
 800a1ca:	68e5      	ldreq	r5, [r4, #12]
 800a1cc:	6833      	ldreq	r3, [r6, #0]
 800a1ce:	1aed      	subeq	r5, r5, r3
 800a1d0:	68a3      	ldr	r3, [r4, #8]
 800a1d2:	bf0c      	ite	eq
 800a1d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1d8:	2500      	movne	r5, #0
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	bfc4      	itt	gt
 800a1de:	1a9b      	subgt	r3, r3, r2
 800a1e0:	18ed      	addgt	r5, r5, r3
 800a1e2:	2600      	movs	r6, #0
 800a1e4:	341a      	adds	r4, #26
 800a1e6:	42b5      	cmp	r5, r6
 800a1e8:	d11a      	bne.n	800a220 <_printf_common+0xc8>
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	e008      	b.n	800a200 <_printf_common+0xa8>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	4652      	mov	r2, sl
 800a1f2:	4641      	mov	r1, r8
 800a1f4:	4638      	mov	r0, r7
 800a1f6:	47c8      	blx	r9
 800a1f8:	3001      	adds	r0, #1
 800a1fa:	d103      	bne.n	800a204 <_printf_common+0xac>
 800a1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a204:	3501      	adds	r5, #1
 800a206:	e7c6      	b.n	800a196 <_printf_common+0x3e>
 800a208:	18e1      	adds	r1, r4, r3
 800a20a:	1c5a      	adds	r2, r3, #1
 800a20c:	2030      	movs	r0, #48	@ 0x30
 800a20e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a212:	4422      	add	r2, r4
 800a214:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a218:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a21c:	3302      	adds	r3, #2
 800a21e:	e7c7      	b.n	800a1b0 <_printf_common+0x58>
 800a220:	2301      	movs	r3, #1
 800a222:	4622      	mov	r2, r4
 800a224:	4641      	mov	r1, r8
 800a226:	4638      	mov	r0, r7
 800a228:	47c8      	blx	r9
 800a22a:	3001      	adds	r0, #1
 800a22c:	d0e6      	beq.n	800a1fc <_printf_common+0xa4>
 800a22e:	3601      	adds	r6, #1
 800a230:	e7d9      	b.n	800a1e6 <_printf_common+0x8e>
	...

0800a234 <_printf_i>:
 800a234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a238:	7e0f      	ldrb	r7, [r1, #24]
 800a23a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a23c:	2f78      	cmp	r7, #120	@ 0x78
 800a23e:	4691      	mov	r9, r2
 800a240:	4680      	mov	r8, r0
 800a242:	460c      	mov	r4, r1
 800a244:	469a      	mov	sl, r3
 800a246:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a24a:	d807      	bhi.n	800a25c <_printf_i+0x28>
 800a24c:	2f62      	cmp	r7, #98	@ 0x62
 800a24e:	d80a      	bhi.n	800a266 <_printf_i+0x32>
 800a250:	2f00      	cmp	r7, #0
 800a252:	f000 80d1 	beq.w	800a3f8 <_printf_i+0x1c4>
 800a256:	2f58      	cmp	r7, #88	@ 0x58
 800a258:	f000 80b8 	beq.w	800a3cc <_printf_i+0x198>
 800a25c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a260:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a264:	e03a      	b.n	800a2dc <_printf_i+0xa8>
 800a266:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a26a:	2b15      	cmp	r3, #21
 800a26c:	d8f6      	bhi.n	800a25c <_printf_i+0x28>
 800a26e:	a101      	add	r1, pc, #4	@ (adr r1, 800a274 <_printf_i+0x40>)
 800a270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a274:	0800a2cd 	.word	0x0800a2cd
 800a278:	0800a2e1 	.word	0x0800a2e1
 800a27c:	0800a25d 	.word	0x0800a25d
 800a280:	0800a25d 	.word	0x0800a25d
 800a284:	0800a25d 	.word	0x0800a25d
 800a288:	0800a25d 	.word	0x0800a25d
 800a28c:	0800a2e1 	.word	0x0800a2e1
 800a290:	0800a25d 	.word	0x0800a25d
 800a294:	0800a25d 	.word	0x0800a25d
 800a298:	0800a25d 	.word	0x0800a25d
 800a29c:	0800a25d 	.word	0x0800a25d
 800a2a0:	0800a3df 	.word	0x0800a3df
 800a2a4:	0800a30b 	.word	0x0800a30b
 800a2a8:	0800a399 	.word	0x0800a399
 800a2ac:	0800a25d 	.word	0x0800a25d
 800a2b0:	0800a25d 	.word	0x0800a25d
 800a2b4:	0800a401 	.word	0x0800a401
 800a2b8:	0800a25d 	.word	0x0800a25d
 800a2bc:	0800a30b 	.word	0x0800a30b
 800a2c0:	0800a25d 	.word	0x0800a25d
 800a2c4:	0800a25d 	.word	0x0800a25d
 800a2c8:	0800a3a1 	.word	0x0800a3a1
 800a2cc:	6833      	ldr	r3, [r6, #0]
 800a2ce:	1d1a      	adds	r2, r3, #4
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	6032      	str	r2, [r6, #0]
 800a2d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a2dc:	2301      	movs	r3, #1
 800a2de:	e09c      	b.n	800a41a <_printf_i+0x1e6>
 800a2e0:	6833      	ldr	r3, [r6, #0]
 800a2e2:	6820      	ldr	r0, [r4, #0]
 800a2e4:	1d19      	adds	r1, r3, #4
 800a2e6:	6031      	str	r1, [r6, #0]
 800a2e8:	0606      	lsls	r6, r0, #24
 800a2ea:	d501      	bpl.n	800a2f0 <_printf_i+0xbc>
 800a2ec:	681d      	ldr	r5, [r3, #0]
 800a2ee:	e003      	b.n	800a2f8 <_printf_i+0xc4>
 800a2f0:	0645      	lsls	r5, r0, #25
 800a2f2:	d5fb      	bpl.n	800a2ec <_printf_i+0xb8>
 800a2f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a2f8:	2d00      	cmp	r5, #0
 800a2fa:	da03      	bge.n	800a304 <_printf_i+0xd0>
 800a2fc:	232d      	movs	r3, #45	@ 0x2d
 800a2fe:	426d      	negs	r5, r5
 800a300:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a304:	4858      	ldr	r0, [pc, #352]	@ (800a468 <_printf_i+0x234>)
 800a306:	230a      	movs	r3, #10
 800a308:	e011      	b.n	800a32e <_printf_i+0xfa>
 800a30a:	6821      	ldr	r1, [r4, #0]
 800a30c:	6833      	ldr	r3, [r6, #0]
 800a30e:	0608      	lsls	r0, r1, #24
 800a310:	f853 5b04 	ldr.w	r5, [r3], #4
 800a314:	d402      	bmi.n	800a31c <_printf_i+0xe8>
 800a316:	0649      	lsls	r1, r1, #25
 800a318:	bf48      	it	mi
 800a31a:	b2ad      	uxthmi	r5, r5
 800a31c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a31e:	4852      	ldr	r0, [pc, #328]	@ (800a468 <_printf_i+0x234>)
 800a320:	6033      	str	r3, [r6, #0]
 800a322:	bf14      	ite	ne
 800a324:	230a      	movne	r3, #10
 800a326:	2308      	moveq	r3, #8
 800a328:	2100      	movs	r1, #0
 800a32a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a32e:	6866      	ldr	r6, [r4, #4]
 800a330:	60a6      	str	r6, [r4, #8]
 800a332:	2e00      	cmp	r6, #0
 800a334:	db05      	blt.n	800a342 <_printf_i+0x10e>
 800a336:	6821      	ldr	r1, [r4, #0]
 800a338:	432e      	orrs	r6, r5
 800a33a:	f021 0104 	bic.w	r1, r1, #4
 800a33e:	6021      	str	r1, [r4, #0]
 800a340:	d04b      	beq.n	800a3da <_printf_i+0x1a6>
 800a342:	4616      	mov	r6, r2
 800a344:	fbb5 f1f3 	udiv	r1, r5, r3
 800a348:	fb03 5711 	mls	r7, r3, r1, r5
 800a34c:	5dc7      	ldrb	r7, [r0, r7]
 800a34e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a352:	462f      	mov	r7, r5
 800a354:	42bb      	cmp	r3, r7
 800a356:	460d      	mov	r5, r1
 800a358:	d9f4      	bls.n	800a344 <_printf_i+0x110>
 800a35a:	2b08      	cmp	r3, #8
 800a35c:	d10b      	bne.n	800a376 <_printf_i+0x142>
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	07df      	lsls	r7, r3, #31
 800a362:	d508      	bpl.n	800a376 <_printf_i+0x142>
 800a364:	6923      	ldr	r3, [r4, #16]
 800a366:	6861      	ldr	r1, [r4, #4]
 800a368:	4299      	cmp	r1, r3
 800a36a:	bfde      	ittt	le
 800a36c:	2330      	movle	r3, #48	@ 0x30
 800a36e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a372:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a376:	1b92      	subs	r2, r2, r6
 800a378:	6122      	str	r2, [r4, #16]
 800a37a:	f8cd a000 	str.w	sl, [sp]
 800a37e:	464b      	mov	r3, r9
 800a380:	aa03      	add	r2, sp, #12
 800a382:	4621      	mov	r1, r4
 800a384:	4640      	mov	r0, r8
 800a386:	f7ff fee7 	bl	800a158 <_printf_common>
 800a38a:	3001      	adds	r0, #1
 800a38c:	d14a      	bne.n	800a424 <_printf_i+0x1f0>
 800a38e:	f04f 30ff 	mov.w	r0, #4294967295
 800a392:	b004      	add	sp, #16
 800a394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a398:	6823      	ldr	r3, [r4, #0]
 800a39a:	f043 0320 	orr.w	r3, r3, #32
 800a39e:	6023      	str	r3, [r4, #0]
 800a3a0:	4832      	ldr	r0, [pc, #200]	@ (800a46c <_printf_i+0x238>)
 800a3a2:	2778      	movs	r7, #120	@ 0x78
 800a3a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a3a8:	6823      	ldr	r3, [r4, #0]
 800a3aa:	6831      	ldr	r1, [r6, #0]
 800a3ac:	061f      	lsls	r7, r3, #24
 800a3ae:	f851 5b04 	ldr.w	r5, [r1], #4
 800a3b2:	d402      	bmi.n	800a3ba <_printf_i+0x186>
 800a3b4:	065f      	lsls	r7, r3, #25
 800a3b6:	bf48      	it	mi
 800a3b8:	b2ad      	uxthmi	r5, r5
 800a3ba:	6031      	str	r1, [r6, #0]
 800a3bc:	07d9      	lsls	r1, r3, #31
 800a3be:	bf44      	itt	mi
 800a3c0:	f043 0320 	orrmi.w	r3, r3, #32
 800a3c4:	6023      	strmi	r3, [r4, #0]
 800a3c6:	b11d      	cbz	r5, 800a3d0 <_printf_i+0x19c>
 800a3c8:	2310      	movs	r3, #16
 800a3ca:	e7ad      	b.n	800a328 <_printf_i+0xf4>
 800a3cc:	4826      	ldr	r0, [pc, #152]	@ (800a468 <_printf_i+0x234>)
 800a3ce:	e7e9      	b.n	800a3a4 <_printf_i+0x170>
 800a3d0:	6823      	ldr	r3, [r4, #0]
 800a3d2:	f023 0320 	bic.w	r3, r3, #32
 800a3d6:	6023      	str	r3, [r4, #0]
 800a3d8:	e7f6      	b.n	800a3c8 <_printf_i+0x194>
 800a3da:	4616      	mov	r6, r2
 800a3dc:	e7bd      	b.n	800a35a <_printf_i+0x126>
 800a3de:	6833      	ldr	r3, [r6, #0]
 800a3e0:	6825      	ldr	r5, [r4, #0]
 800a3e2:	6961      	ldr	r1, [r4, #20]
 800a3e4:	1d18      	adds	r0, r3, #4
 800a3e6:	6030      	str	r0, [r6, #0]
 800a3e8:	062e      	lsls	r6, r5, #24
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	d501      	bpl.n	800a3f2 <_printf_i+0x1be>
 800a3ee:	6019      	str	r1, [r3, #0]
 800a3f0:	e002      	b.n	800a3f8 <_printf_i+0x1c4>
 800a3f2:	0668      	lsls	r0, r5, #25
 800a3f4:	d5fb      	bpl.n	800a3ee <_printf_i+0x1ba>
 800a3f6:	8019      	strh	r1, [r3, #0]
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	6123      	str	r3, [r4, #16]
 800a3fc:	4616      	mov	r6, r2
 800a3fe:	e7bc      	b.n	800a37a <_printf_i+0x146>
 800a400:	6833      	ldr	r3, [r6, #0]
 800a402:	1d1a      	adds	r2, r3, #4
 800a404:	6032      	str	r2, [r6, #0]
 800a406:	681e      	ldr	r6, [r3, #0]
 800a408:	6862      	ldr	r2, [r4, #4]
 800a40a:	2100      	movs	r1, #0
 800a40c:	4630      	mov	r0, r6
 800a40e:	f7f5 ff67 	bl	80002e0 <memchr>
 800a412:	b108      	cbz	r0, 800a418 <_printf_i+0x1e4>
 800a414:	1b80      	subs	r0, r0, r6
 800a416:	6060      	str	r0, [r4, #4]
 800a418:	6863      	ldr	r3, [r4, #4]
 800a41a:	6123      	str	r3, [r4, #16]
 800a41c:	2300      	movs	r3, #0
 800a41e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a422:	e7aa      	b.n	800a37a <_printf_i+0x146>
 800a424:	6923      	ldr	r3, [r4, #16]
 800a426:	4632      	mov	r2, r6
 800a428:	4649      	mov	r1, r9
 800a42a:	4640      	mov	r0, r8
 800a42c:	47d0      	blx	sl
 800a42e:	3001      	adds	r0, #1
 800a430:	d0ad      	beq.n	800a38e <_printf_i+0x15a>
 800a432:	6823      	ldr	r3, [r4, #0]
 800a434:	079b      	lsls	r3, r3, #30
 800a436:	d413      	bmi.n	800a460 <_printf_i+0x22c>
 800a438:	68e0      	ldr	r0, [r4, #12]
 800a43a:	9b03      	ldr	r3, [sp, #12]
 800a43c:	4298      	cmp	r0, r3
 800a43e:	bfb8      	it	lt
 800a440:	4618      	movlt	r0, r3
 800a442:	e7a6      	b.n	800a392 <_printf_i+0x15e>
 800a444:	2301      	movs	r3, #1
 800a446:	4632      	mov	r2, r6
 800a448:	4649      	mov	r1, r9
 800a44a:	4640      	mov	r0, r8
 800a44c:	47d0      	blx	sl
 800a44e:	3001      	adds	r0, #1
 800a450:	d09d      	beq.n	800a38e <_printf_i+0x15a>
 800a452:	3501      	adds	r5, #1
 800a454:	68e3      	ldr	r3, [r4, #12]
 800a456:	9903      	ldr	r1, [sp, #12]
 800a458:	1a5b      	subs	r3, r3, r1
 800a45a:	42ab      	cmp	r3, r5
 800a45c:	dcf2      	bgt.n	800a444 <_printf_i+0x210>
 800a45e:	e7eb      	b.n	800a438 <_printf_i+0x204>
 800a460:	2500      	movs	r5, #0
 800a462:	f104 0619 	add.w	r6, r4, #25
 800a466:	e7f5      	b.n	800a454 <_printf_i+0x220>
 800a468:	0800a9d9 	.word	0x0800a9d9
 800a46c:	0800a9ea 	.word	0x0800a9ea

0800a470 <__sflush_r>:
 800a470:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a478:	0716      	lsls	r6, r2, #28
 800a47a:	4605      	mov	r5, r0
 800a47c:	460c      	mov	r4, r1
 800a47e:	d454      	bmi.n	800a52a <__sflush_r+0xba>
 800a480:	684b      	ldr	r3, [r1, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	dc02      	bgt.n	800a48c <__sflush_r+0x1c>
 800a486:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a488:	2b00      	cmp	r3, #0
 800a48a:	dd48      	ble.n	800a51e <__sflush_r+0xae>
 800a48c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a48e:	2e00      	cmp	r6, #0
 800a490:	d045      	beq.n	800a51e <__sflush_r+0xae>
 800a492:	2300      	movs	r3, #0
 800a494:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a498:	682f      	ldr	r7, [r5, #0]
 800a49a:	6a21      	ldr	r1, [r4, #32]
 800a49c:	602b      	str	r3, [r5, #0]
 800a49e:	d030      	beq.n	800a502 <__sflush_r+0x92>
 800a4a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a4a2:	89a3      	ldrh	r3, [r4, #12]
 800a4a4:	0759      	lsls	r1, r3, #29
 800a4a6:	d505      	bpl.n	800a4b4 <__sflush_r+0x44>
 800a4a8:	6863      	ldr	r3, [r4, #4]
 800a4aa:	1ad2      	subs	r2, r2, r3
 800a4ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a4ae:	b10b      	cbz	r3, 800a4b4 <__sflush_r+0x44>
 800a4b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a4b2:	1ad2      	subs	r2, r2, r3
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4b8:	6a21      	ldr	r1, [r4, #32]
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	47b0      	blx	r6
 800a4be:	1c43      	adds	r3, r0, #1
 800a4c0:	89a3      	ldrh	r3, [r4, #12]
 800a4c2:	d106      	bne.n	800a4d2 <__sflush_r+0x62>
 800a4c4:	6829      	ldr	r1, [r5, #0]
 800a4c6:	291d      	cmp	r1, #29
 800a4c8:	d82b      	bhi.n	800a522 <__sflush_r+0xb2>
 800a4ca:	4a2a      	ldr	r2, [pc, #168]	@ (800a574 <__sflush_r+0x104>)
 800a4cc:	40ca      	lsrs	r2, r1
 800a4ce:	07d6      	lsls	r6, r2, #31
 800a4d0:	d527      	bpl.n	800a522 <__sflush_r+0xb2>
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	6062      	str	r2, [r4, #4]
 800a4d6:	04d9      	lsls	r1, r3, #19
 800a4d8:	6922      	ldr	r2, [r4, #16]
 800a4da:	6022      	str	r2, [r4, #0]
 800a4dc:	d504      	bpl.n	800a4e8 <__sflush_r+0x78>
 800a4de:	1c42      	adds	r2, r0, #1
 800a4e0:	d101      	bne.n	800a4e6 <__sflush_r+0x76>
 800a4e2:	682b      	ldr	r3, [r5, #0]
 800a4e4:	b903      	cbnz	r3, 800a4e8 <__sflush_r+0x78>
 800a4e6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a4e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4ea:	602f      	str	r7, [r5, #0]
 800a4ec:	b1b9      	cbz	r1, 800a51e <__sflush_r+0xae>
 800a4ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4f2:	4299      	cmp	r1, r3
 800a4f4:	d002      	beq.n	800a4fc <__sflush_r+0x8c>
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	f7ff fbf4 	bl	8009ce4 <_free_r>
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	6363      	str	r3, [r4, #52]	@ 0x34
 800a500:	e00d      	b.n	800a51e <__sflush_r+0xae>
 800a502:	2301      	movs	r3, #1
 800a504:	4628      	mov	r0, r5
 800a506:	47b0      	blx	r6
 800a508:	4602      	mov	r2, r0
 800a50a:	1c50      	adds	r0, r2, #1
 800a50c:	d1c9      	bne.n	800a4a2 <__sflush_r+0x32>
 800a50e:	682b      	ldr	r3, [r5, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d0c6      	beq.n	800a4a2 <__sflush_r+0x32>
 800a514:	2b1d      	cmp	r3, #29
 800a516:	d001      	beq.n	800a51c <__sflush_r+0xac>
 800a518:	2b16      	cmp	r3, #22
 800a51a:	d11e      	bne.n	800a55a <__sflush_r+0xea>
 800a51c:	602f      	str	r7, [r5, #0]
 800a51e:	2000      	movs	r0, #0
 800a520:	e022      	b.n	800a568 <__sflush_r+0xf8>
 800a522:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a526:	b21b      	sxth	r3, r3
 800a528:	e01b      	b.n	800a562 <__sflush_r+0xf2>
 800a52a:	690f      	ldr	r7, [r1, #16]
 800a52c:	2f00      	cmp	r7, #0
 800a52e:	d0f6      	beq.n	800a51e <__sflush_r+0xae>
 800a530:	0793      	lsls	r3, r2, #30
 800a532:	680e      	ldr	r6, [r1, #0]
 800a534:	bf08      	it	eq
 800a536:	694b      	ldreq	r3, [r1, #20]
 800a538:	600f      	str	r7, [r1, #0]
 800a53a:	bf18      	it	ne
 800a53c:	2300      	movne	r3, #0
 800a53e:	eba6 0807 	sub.w	r8, r6, r7
 800a542:	608b      	str	r3, [r1, #8]
 800a544:	f1b8 0f00 	cmp.w	r8, #0
 800a548:	dde9      	ble.n	800a51e <__sflush_r+0xae>
 800a54a:	6a21      	ldr	r1, [r4, #32]
 800a54c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a54e:	4643      	mov	r3, r8
 800a550:	463a      	mov	r2, r7
 800a552:	4628      	mov	r0, r5
 800a554:	47b0      	blx	r6
 800a556:	2800      	cmp	r0, #0
 800a558:	dc08      	bgt.n	800a56c <__sflush_r+0xfc>
 800a55a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a55e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a562:	81a3      	strh	r3, [r4, #12]
 800a564:	f04f 30ff 	mov.w	r0, #4294967295
 800a568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a56c:	4407      	add	r7, r0
 800a56e:	eba8 0800 	sub.w	r8, r8, r0
 800a572:	e7e7      	b.n	800a544 <__sflush_r+0xd4>
 800a574:	20400001 	.word	0x20400001

0800a578 <_fflush_r>:
 800a578:	b538      	push	{r3, r4, r5, lr}
 800a57a:	690b      	ldr	r3, [r1, #16]
 800a57c:	4605      	mov	r5, r0
 800a57e:	460c      	mov	r4, r1
 800a580:	b913      	cbnz	r3, 800a588 <_fflush_r+0x10>
 800a582:	2500      	movs	r5, #0
 800a584:	4628      	mov	r0, r5
 800a586:	bd38      	pop	{r3, r4, r5, pc}
 800a588:	b118      	cbz	r0, 800a592 <_fflush_r+0x1a>
 800a58a:	6a03      	ldr	r3, [r0, #32]
 800a58c:	b90b      	cbnz	r3, 800a592 <_fflush_r+0x1a>
 800a58e:	f7ff f9a1 	bl	80098d4 <__sinit>
 800a592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d0f3      	beq.n	800a582 <_fflush_r+0xa>
 800a59a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a59c:	07d0      	lsls	r0, r2, #31
 800a59e:	d404      	bmi.n	800a5aa <_fflush_r+0x32>
 800a5a0:	0599      	lsls	r1, r3, #22
 800a5a2:	d402      	bmi.n	800a5aa <_fflush_r+0x32>
 800a5a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5a6:	f7ff fb8c 	bl	8009cc2 <__retarget_lock_acquire_recursive>
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	4621      	mov	r1, r4
 800a5ae:	f7ff ff5f 	bl	800a470 <__sflush_r>
 800a5b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5b4:	07da      	lsls	r2, r3, #31
 800a5b6:	4605      	mov	r5, r0
 800a5b8:	d4e4      	bmi.n	800a584 <_fflush_r+0xc>
 800a5ba:	89a3      	ldrh	r3, [r4, #12]
 800a5bc:	059b      	lsls	r3, r3, #22
 800a5be:	d4e1      	bmi.n	800a584 <_fflush_r+0xc>
 800a5c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5c2:	f7ff fb7f 	bl	8009cc4 <__retarget_lock_release_recursive>
 800a5c6:	e7dd      	b.n	800a584 <_fflush_r+0xc>

0800a5c8 <__swhatbuf_r>:
 800a5c8:	b570      	push	{r4, r5, r6, lr}
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5d0:	2900      	cmp	r1, #0
 800a5d2:	b096      	sub	sp, #88	@ 0x58
 800a5d4:	4615      	mov	r5, r2
 800a5d6:	461e      	mov	r6, r3
 800a5d8:	da0d      	bge.n	800a5f6 <__swhatbuf_r+0x2e>
 800a5da:	89a3      	ldrh	r3, [r4, #12]
 800a5dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a5e0:	f04f 0100 	mov.w	r1, #0
 800a5e4:	bf14      	ite	ne
 800a5e6:	2340      	movne	r3, #64	@ 0x40
 800a5e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a5ec:	2000      	movs	r0, #0
 800a5ee:	6031      	str	r1, [r6, #0]
 800a5f0:	602b      	str	r3, [r5, #0]
 800a5f2:	b016      	add	sp, #88	@ 0x58
 800a5f4:	bd70      	pop	{r4, r5, r6, pc}
 800a5f6:	466a      	mov	r2, sp
 800a5f8:	f000 f848 	bl	800a68c <_fstat_r>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	dbec      	blt.n	800a5da <__swhatbuf_r+0x12>
 800a600:	9901      	ldr	r1, [sp, #4]
 800a602:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a606:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a60a:	4259      	negs	r1, r3
 800a60c:	4159      	adcs	r1, r3
 800a60e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a612:	e7eb      	b.n	800a5ec <__swhatbuf_r+0x24>

0800a614 <__smakebuf_r>:
 800a614:	898b      	ldrh	r3, [r1, #12]
 800a616:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a618:	079d      	lsls	r5, r3, #30
 800a61a:	4606      	mov	r6, r0
 800a61c:	460c      	mov	r4, r1
 800a61e:	d507      	bpl.n	800a630 <__smakebuf_r+0x1c>
 800a620:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	6123      	str	r3, [r4, #16]
 800a628:	2301      	movs	r3, #1
 800a62a:	6163      	str	r3, [r4, #20]
 800a62c:	b003      	add	sp, #12
 800a62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a630:	ab01      	add	r3, sp, #4
 800a632:	466a      	mov	r2, sp
 800a634:	f7ff ffc8 	bl	800a5c8 <__swhatbuf_r>
 800a638:	9f00      	ldr	r7, [sp, #0]
 800a63a:	4605      	mov	r5, r0
 800a63c:	4639      	mov	r1, r7
 800a63e:	4630      	mov	r0, r6
 800a640:	f7ff fbbc 	bl	8009dbc <_malloc_r>
 800a644:	b948      	cbnz	r0, 800a65a <__smakebuf_r+0x46>
 800a646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a64a:	059a      	lsls	r2, r3, #22
 800a64c:	d4ee      	bmi.n	800a62c <__smakebuf_r+0x18>
 800a64e:	f023 0303 	bic.w	r3, r3, #3
 800a652:	f043 0302 	orr.w	r3, r3, #2
 800a656:	81a3      	strh	r3, [r4, #12]
 800a658:	e7e2      	b.n	800a620 <__smakebuf_r+0xc>
 800a65a:	89a3      	ldrh	r3, [r4, #12]
 800a65c:	6020      	str	r0, [r4, #0]
 800a65e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a662:	81a3      	strh	r3, [r4, #12]
 800a664:	9b01      	ldr	r3, [sp, #4]
 800a666:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a66a:	b15b      	cbz	r3, 800a684 <__smakebuf_r+0x70>
 800a66c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a670:	4630      	mov	r0, r6
 800a672:	f000 f81d 	bl	800a6b0 <_isatty_r>
 800a676:	b128      	cbz	r0, 800a684 <__smakebuf_r+0x70>
 800a678:	89a3      	ldrh	r3, [r4, #12]
 800a67a:	f023 0303 	bic.w	r3, r3, #3
 800a67e:	f043 0301 	orr.w	r3, r3, #1
 800a682:	81a3      	strh	r3, [r4, #12]
 800a684:	89a3      	ldrh	r3, [r4, #12]
 800a686:	431d      	orrs	r5, r3
 800a688:	81a5      	strh	r5, [r4, #12]
 800a68a:	e7cf      	b.n	800a62c <__smakebuf_r+0x18>

0800a68c <_fstat_r>:
 800a68c:	b538      	push	{r3, r4, r5, lr}
 800a68e:	4d07      	ldr	r5, [pc, #28]	@ (800a6ac <_fstat_r+0x20>)
 800a690:	2300      	movs	r3, #0
 800a692:	4604      	mov	r4, r0
 800a694:	4608      	mov	r0, r1
 800a696:	4611      	mov	r1, r2
 800a698:	602b      	str	r3, [r5, #0]
 800a69a:	f7f7 ffb4 	bl	8002606 <_fstat>
 800a69e:	1c43      	adds	r3, r0, #1
 800a6a0:	d102      	bne.n	800a6a8 <_fstat_r+0x1c>
 800a6a2:	682b      	ldr	r3, [r5, #0]
 800a6a4:	b103      	cbz	r3, 800a6a8 <_fstat_r+0x1c>
 800a6a6:	6023      	str	r3, [r4, #0]
 800a6a8:	bd38      	pop	{r3, r4, r5, pc}
 800a6aa:	bf00      	nop
 800a6ac:	24000904 	.word	0x24000904

0800a6b0 <_isatty_r>:
 800a6b0:	b538      	push	{r3, r4, r5, lr}
 800a6b2:	4d06      	ldr	r5, [pc, #24]	@ (800a6cc <_isatty_r+0x1c>)
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	4608      	mov	r0, r1
 800a6ba:	602b      	str	r3, [r5, #0]
 800a6bc:	f7f7 ffb3 	bl	8002626 <_isatty>
 800a6c0:	1c43      	adds	r3, r0, #1
 800a6c2:	d102      	bne.n	800a6ca <_isatty_r+0x1a>
 800a6c4:	682b      	ldr	r3, [r5, #0]
 800a6c6:	b103      	cbz	r3, 800a6ca <_isatty_r+0x1a>
 800a6c8:	6023      	str	r3, [r4, #0]
 800a6ca:	bd38      	pop	{r3, r4, r5, pc}
 800a6cc:	24000904 	.word	0x24000904

0800a6d0 <_sbrk_r>:
 800a6d0:	b538      	push	{r3, r4, r5, lr}
 800a6d2:	4d06      	ldr	r5, [pc, #24]	@ (800a6ec <_sbrk_r+0x1c>)
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	4608      	mov	r0, r1
 800a6da:	602b      	str	r3, [r5, #0]
 800a6dc:	f7f7 ffbc 	bl	8002658 <_sbrk>
 800a6e0:	1c43      	adds	r3, r0, #1
 800a6e2:	d102      	bne.n	800a6ea <_sbrk_r+0x1a>
 800a6e4:	682b      	ldr	r3, [r5, #0]
 800a6e6:	b103      	cbz	r3, 800a6ea <_sbrk_r+0x1a>
 800a6e8:	6023      	str	r3, [r4, #0]
 800a6ea:	bd38      	pop	{r3, r4, r5, pc}
 800a6ec:	24000904 	.word	0x24000904

0800a6f0 <_init>:
 800a6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f2:	bf00      	nop
 800a6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6f6:	bc08      	pop	{r3}
 800a6f8:	469e      	mov	lr, r3
 800a6fa:	4770      	bx	lr

0800a6fc <_fini>:
 800a6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6fe:	bf00      	nop
 800a700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a702:	bc08      	pop	{r3}
 800a704:	469e      	mov	lr, r3
 800a706:	4770      	bx	lr
