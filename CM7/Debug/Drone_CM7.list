
Drone_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4e0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002054  0800a780  0800a780  0000b780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7d4  0800c7d4  0000e014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c7d4  0800c7d4  0000d7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7dc  0800c7dc  0000e014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7dc  0800c7dc  0000d7dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c7e0  0800c7e0  0000d7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  24000000  0800c7e4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fb0  24000014  0800c7f8  0000e014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000fc4  0800c7f8  0000efc4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024805  00000000  00000000  0000e042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004904  00000000  00000000  00032847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c50  00000000  00000000  00037150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015f3  00000000  00000000  00038da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042a94  00000000  00000000  0003a393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023747  00000000  00000000  0007ce27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b21eb  00000000  00000000  000a056e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00252759  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077dc  00000000  00000000  0025279c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00259f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a768 	.word	0x0800a768

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	0800a768 	.word	0x0800a768

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <IMUReadReg>:
    0x2e, 0x00, 0xc1
};


IMU_STATUS IMUReadReg(IMU *pIMU, uint8_t reg, uint8_t *pBuf, uint32_t len)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b091      	sub	sp, #68	@ 0x44
 8000610:	af02      	add	r7, sp, #8
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	607a      	str	r2, [r7, #4]
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	460b      	mov	r3, r1
 800061a:	72fb      	strb	r3, [r7, #11]
	uint8_t pTx[16];
	memset(pTx, 0, sizeof(pTx));
 800061c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000620:	2210      	movs	r2, #16
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f00a f865 	bl	800a6f4 <memset>
	// 0x80 bmi270 read bit
	pTx[0] = 0x80 | reg;
 800062a:	7afb      	ldrb	r3, [r7, #11]
 800062c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000630:	b2db      	uxtb	r3, r3
 8000632:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	uint8_t pRx[16];
	memset(pRx, 0, sizeof(pRx));
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2210      	movs	r2, #16
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f00a f858 	bl	800a6f4 <memset>
	// status = HAL_SPI_Transmit(pIMUSPIRef, pTemp, 1, 100);

	// set NSS high
	// HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

	if(len + 1 > 16)
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	2b10      	cmp	r3, #16
 800064a:	d901      	bls.n	8000650 <IMUReadReg+0x44>
	{
		return IMU_ERROR;
 800064c:	2301      	movs	r3, #1
 800064e:	e01f      	b.n	8000690 <IMUReadReg+0x84>
	}

	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(pIMU->pSPI, pTx, pRx, len + 1, 100);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	6818      	ldr	r0, [r3, #0]
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	b29b      	uxth	r3, r3
 8000658:	3301      	adds	r3, #1
 800065a:	b29b      	uxth	r3, r3
 800065c:	f107 0214 	add.w	r2, r7, #20
 8000660:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000664:	2464      	movs	r4, #100	@ 0x64
 8000666:	9400      	str	r4, [sp, #0]
 8000668:	f004 ffbe 	bl	80055e8 <HAL_SPI_TransmitReceive>
 800066c:	4603      	mov	r3, r0
 800066e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if(status != HAL_OK)
 8000672:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <IMUReadReg+0x72>
	{
		return IMU_ERROR;
 800067a:	2301      	movs	r3, #1
 800067c:	e008      	b.n	8000690 <IMUReadReg+0x84>
	}
	// 1st byte sent by bmi270 is a dummy byte
	memcpy(pBuf, &pRx[1], len);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	3301      	adds	r3, #1
 8000684:	683a      	ldr	r2, [r7, #0]
 8000686:	4619      	mov	r1, r3
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f00a f85f 	bl	800a74c <memcpy>

	return IMU_OK;
 800068e:	2300      	movs	r3, #0
}
 8000690:	4618      	mov	r0, r3
 8000692:	373c      	adds	r7, #60	@ 0x3c
 8000694:	46bd      	mov	sp, r7
 8000696:	bd90      	pop	{r4, r7, pc}

08000698 <IMUWriteReg>:

IMU_STATUS IMUWriteReg(IMU *pIMU, uint8_t reg, uint8_t *pBuf, uint32_t len)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	@ 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	607a      	str	r2, [r7, #4]
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	460b      	mov	r3, r1
 80006a6:	72fb      	strb	r3, [r7, #11]
	uint8_t pTx[16];
	memset(pTx, 0, sizeof(pTx));
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	2210      	movs	r2, #16
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f00a f81f 	bl	800a6f4 <memset>

	if(len + 1 > 16)
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	3301      	adds	r3, #1
 80006ba:	2b10      	cmp	r3, #16
 80006bc:	d901      	bls.n	80006c2 <IMUWriteReg+0x2a>
	{
		return IMU_OK;
 80006be:	2300      	movs	r3, #0
 80006c0:	e01e      	b.n	8000700 <IMUWriteReg+0x68>
	}

	pTx[0] = reg;
 80006c2:	7afb      	ldrb	r3, [r7, #11]
 80006c4:	753b      	strb	r3, [r7, #20]
	memcpy(&pTx[1], (void*)pBuf, len);
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	3301      	adds	r3, #1
 80006cc:	683a      	ldr	r2, [r7, #0]
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f00a f83b 	bl	800a74c <memcpy>

	HAL_StatusTypeDef status = HAL_SPI_Transmit(pIMU->pSPI, pTx, len + 1, 100);
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	6818      	ldr	r0, [r3, #0]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	b29b      	uxth	r3, r3
 80006de:	3301      	adds	r3, #1
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	f107 0114 	add.w	r1, r7, #20
 80006e6:	2364      	movs	r3, #100	@ 0x64
 80006e8:	f004 fd90 	bl	800520c <HAL_SPI_Transmit>
 80006ec:	4603      	mov	r3, r0
 80006ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if(status != HAL_OK)
 80006f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <IMUWriteReg+0x66>
	{
		return IMU_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e000      	b.n	8000700 <IMUWriteReg+0x68>
	}

	return IMU_OK;
 80006fe:	2300      	movs	r3, #0
}
 8000700:	4618      	mov	r0, r3
 8000702:	3728      	adds	r7, #40	@ 0x28
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <IMUInit>:
  IMU_ACC_RANGE accRange,
  IMU_ACC_ODR accODR,
  IMU_GYRO_RANGE gyroRange,
  IMU_GYRO_ODR gyroODR
)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	4611      	mov	r1, r2
 8000714:	461a      	mov	r2, r3
 8000716:	460b      	mov	r3, r1
 8000718:	71fb      	strb	r3, [r7, #7]
 800071a:	4613      	mov	r3, r2
 800071c:	71bb      	strb	r3, [r7, #6]
  memset(pIMU, 0, sizeof(IMU));
 800071e:	2238      	movs	r2, #56	@ 0x38
 8000720:	2100      	movs	r1, #0
 8000722:	68f8      	ldr	r0, [r7, #12]
 8000724:	f009 ffe6 	bl	800a6f4 <memset>
	pIMU->pSPI = pSPI;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	601a      	str	r2, [r3, #0]
  pIMU->accRange = accRange;
 800072e:	79fa      	ldrb	r2, [r7, #7]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	625a      	str	r2, [r3, #36]	@ 0x24
  pIMU->accODR = accODR;
 8000734:	79ba      	ldrb	r2, [r7, #6]
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28
  pIMU->gyroRange = gyroRange;
 800073a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	62da      	str	r2, [r3, #44]	@ 0x2c
  pIMU->gyroODR = gyroODR;
 8000742:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	631a      	str	r2, [r3, #48]	@ 0x30
  pIMU->msLastAccUpdateTime = HAL_GetTick();
 800074a:	f001 f9d7 	bl	8001afc <HAL_GetTick>
 800074e:	4603      	mov	r3, r0
 8000750:	461a      	mov	r2, r3
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	61da      	str	r2, [r3, #28]
  pIMU->msLastGyroUpdateTime = HAL_GetTick();
 8000756:	f001 f9d1 	bl	8001afc <HAL_GetTick>
 800075a:	4603      	mov	r3, r0
 800075c:	461a      	mov	r2, r3
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	621a      	str	r2, [r3, #32]
  pIMU->magic = IMU_MAGIC;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	4a59      	ldr	r2, [pc, #356]	@ (80008cc <IMUInit+0x1c4>)
 8000766:	635a      	str	r2, [r3, #52]	@ 0x34

	IMU_STATUS status;
	uint8_t pBuffer[2];
  memset(pBuffer, 0, sizeof(pBuffer));
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	2202      	movs	r2, #2
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f009 ffbf 	bl	800a6f4 <memset>

	// Dummy read to initialize SPI
	status = IMUReadReg(pIMU, BMI2_CHIP_ID_ADDR, pBuffer, 1);
 8000776:	f107 0214 	add.w	r2, r7, #20
 800077a:	2301      	movs	r3, #1
 800077c:	2100      	movs	r1, #0
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	f7ff ff44 	bl	800060c <IMUReadReg>
 8000784:	4603      	mov	r3, r0
 8000786:	75fb      	strb	r3, [r7, #23]
	status = IMUReadReg(pIMU, BMI2_CHIP_ID_ADDR, pBuffer, 1);
 8000788:	f107 0214 	add.w	r2, r7, #20
 800078c:	2301      	movs	r3, #1
 800078e:	2100      	movs	r1, #0
 8000790:	68f8      	ldr	r0, [r7, #12]
 8000792:	f7ff ff3b 	bl	800060c <IMUReadReg>
 8000796:	4603      	mov	r3, r0
 8000798:	75fb      	strb	r3, [r7, #23]

	// Disable PWR_CONF advanced power save
	pBuffer[0] = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	753b      	strb	r3, [r7, #20]
	status = IMUWriteReg(pIMU, BMI2_PWR_CONF_ADDR, pBuffer, 1);
 800079e:	f107 0214 	add.w	r2, r7, #20
 80007a2:	2301      	movs	r3, #1
 80007a4:	217c      	movs	r1, #124	@ 0x7c
 80007a6:	68f8      	ldr	r0, [r7, #12]
 80007a8:	f7ff ff76 	bl	8000698 <IMUWriteReg>
 80007ac:	4603      	mov	r3, r0
 80007ae:	75fb      	strb	r3, [r7, #23]

	HAL_Delay(1);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f001 f9af 	bl	8001b14 <HAL_Delay>

	// Prepare config file
	pBuffer[0] = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	753b      	strb	r3, [r7, #20]
	status = IMUWriteReg(pIMU, BMI2_INIT_CTRL_ADDR, pBuffer, 1);
 80007ba:	f107 0214 	add.w	r2, r7, #20
 80007be:	2301      	movs	r3, #1
 80007c0:	2159      	movs	r1, #89	@ 0x59
 80007c2:	68f8      	ldr	r0, [r7, #12]
 80007c4:	f7ff ff68 	bl	8000698 <IMUWriteReg>
 80007c8:	4603      	mov	r3, r0
 80007ca:	75fb      	strb	r3, [r7, #23]

	// I added the data write address directly to the config_file
	HAL_SPI_Transmit(pIMU->pSPI, bmi270_config_file, sizeof(bmi270_config_file), 100);
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	6818      	ldr	r0, [r3, #0]
 80007d0:	2364      	movs	r3, #100	@ 0x64
 80007d2:	f242 0201 	movw	r2, #8193	@ 0x2001
 80007d6:	493e      	ldr	r1, [pc, #248]	@ (80008d0 <IMUInit+0x1c8>)
 80007d8:	f004 fd18 	bl	800520c <HAL_SPI_Transmit>

	pBuffer[0] = 0x01;
 80007dc:	2301      	movs	r3, #1
 80007de:	753b      	strb	r3, [r7, #20]
	status = IMUWriteReg(pIMU, BMI2_INIT_CTRL_ADDR, pBuffer, 1);
 80007e0:	f107 0214 	add.w	r2, r7, #20
 80007e4:	2301      	movs	r3, #1
 80007e6:	2159      	movs	r1, #89	@ 0x59
 80007e8:	68f8      	ldr	r0, [r7, #12]
 80007ea:	f7ff ff55 	bl	8000698 <IMUWriteReg>
 80007ee:	4603      	mov	r3, r0
 80007f0:	75fb      	strb	r3, [r7, #23]

	HAL_Delay(20);
 80007f2:	2014      	movs	r0, #20
 80007f4:	f001 f98e 	bl	8001b14 <HAL_Delay>

	status = IMUReadReg(pIMU, BMI2_INTERNAL_STATUS_ADDR, pBuffer, 1);
 80007f8:	f107 0214 	add.w	r2, r7, #20
 80007fc:	2301      	movs	r3, #1
 80007fe:	2121      	movs	r1, #33	@ 0x21
 8000800:	68f8      	ldr	r0, [r7, #12]
 8000802:	f7ff ff03 	bl	800060c <IMUReadReg>
 8000806:	4603      	mov	r3, r0
 8000808:	75fb      	strb	r3, [r7, #23]
	if(status == -1 || (pBuffer[0] & 1) == 0)
 800080a:	7d3b      	ldrb	r3, [r7, #20]
 800080c:	f003 0301 	and.w	r3, r3, #1
 8000810:	2b00      	cmp	r3, #0
 8000812:	d101      	bne.n	8000818 <IMUInit+0x110>
	{
		return IMU_ERROR;
 8000814:	2301      	movs	r3, #1
 8000816:	e054      	b.n	80008c2 <IMUInit+0x1ba>

  /*
  * Device Enable/Disable
  */
  // enable acceleration, gyro, and temp but disable auxillary interface
  pBuffer[0] = 0x0E;
 8000818:	230e      	movs	r3, #14
 800081a:	753b      	strb	r3, [r7, #20]
  status = IMUWriteReg(pIMU, BMI2_PWR_CTRL_ADDR, pBuffer, 1);
 800081c:	f107 0214 	add.w	r2, r7, #20
 8000820:	2301      	movs	r3, #1
 8000822:	217d      	movs	r1, #125	@ 0x7d
 8000824:	68f8      	ldr	r0, [r7, #12]
 8000826:	f7ff ff37 	bl	8000698 <IMUWriteReg>
 800082a:	4603      	mov	r3, r0
 800082c:	75fb      	strb	r3, [r7, #23]

  /*
  * Accelerometer Setup
  */
  // enable acc filter perf bit, set acc bwp to normal, and set acc_odr to 100 Hz
  pBuffer[0] = BMI2_ACC_CONF_PERF_MODE_BIT | BMI2_ACC_CONF_BWP_NORMAL_BIT | pIMU->accODR;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000832:	b2db      	uxtb	r3, r3
 8000834:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000838:	b2db      	uxtb	r3, r3
 800083a:	753b      	strb	r3, [r7, #20]
  // Set acc range to pIMU->accRange
  pBuffer[1] = pIMU->accRange;
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000840:	b2db      	uxtb	r3, r3
 8000842:	757b      	strb	r3, [r7, #21]
  status = IMUWriteReg(pIMU, BMI2_ACC_CONF_ADDR, pBuffer, 2);
 8000844:	f107 0214 	add.w	r2, r7, #20
 8000848:	2302      	movs	r3, #2
 800084a:	2140      	movs	r1, #64	@ 0x40
 800084c:	68f8      	ldr	r0, [r7, #12]
 800084e:	f7ff ff23 	bl	8000698 <IMUWriteReg>
 8000852:	4603      	mov	r3, r0
 8000854:	75fb      	strb	r3, [r7, #23]

  /*
  * Gyro Setup
  */
  // enable gyro filter perf bit, set gyr bwp to normal, and set gry_odr to 100 Hz
  pBuffer[0] = BMI2_GYRO_CONF_FILTER_PERF_BIT | BMI2_GYRO_CONF_NOISE_PERF_BIT | BMI2_GYRO_CONF_BWP_NORMAL_BIT | pIMU->gyroODR;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	b2db      	uxtb	r3, r3
 800085c:	f063 031f 	orn	r3, r3, #31
 8000860:	b2db      	uxtb	r3, r3
 8000862:	753b      	strb	r3, [r7, #20]
  // set gyro range
  pBuffer[1] = pIMU->gyroRange;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000868:	b2db      	uxtb	r3, r3
 800086a:	757b      	strb	r3, [r7, #21]
  status = IMUWriteReg(pIMU, BMI2_GYR_CONF_ADDR, pBuffer, 2);
 800086c:	f107 0214 	add.w	r2, r7, #20
 8000870:	2302      	movs	r3, #2
 8000872:	2142      	movs	r1, #66	@ 0x42
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff ff0f 	bl	8000698 <IMUWriteReg>
 800087a:	4603      	mov	r3, r0
 800087c:	75fb      	strb	r3, [r7, #23]

  /*
  * Power Setup
  */
  // disable adv power sav and leave fifo self wakeup enabled
  pBuffer[0] = 0x02;
 800087e:	2302      	movs	r3, #2
 8000880:	753b      	strb	r3, [r7, #20]
  status = IMUWriteReg(pIMU, BMI2_PWR_CONF_ADDR, pBuffer, 1);
 8000882:	f107 0214 	add.w	r2, r7, #20
 8000886:	2301      	movs	r3, #1
 8000888:	217c      	movs	r1, #124	@ 0x7c
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f7ff ff04 	bl	8000698 <IMUWriteReg>
 8000890:	4603      	mov	r3, r0
 8000892:	75fb      	strb	r3, [r7, #23]

  /*
  * Interrupt Setup
  */
  // enable INT1 w input disabled, output enabled, push pull, and active high
  pBuffer[0] = (0 << 3) | (1 << 2) | (0 << 1) | (1 << 0);
 8000894:	2305      	movs	r3, #5
 8000896:	753b      	strb	r3, [r7, #20]
  status = IMUWriteReg(pIMU, BMI2_INT1_IO_CTRL_ADDR, pBuffer, 1);
 8000898:	f107 0214 	add.w	r2, r7, #20
 800089c:	2301      	movs	r3, #1
 800089e:	2153      	movs	r1, #83	@ 0x53
 80008a0:	68f8      	ldr	r0, [r7, #12]
 80008a2:	f7ff fef9 	bl	8000698 <IMUWriteReg>
 80008a6:	4603      	mov	r3, r0
 80008a8:	75fb      	strb	r3, [r7, #23]
  // interrupts will NOT be cleared automatically. Have to be cleared by the
  // the host reading the int status registers
  pBuffer[0] = 1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	753b      	strb	r3, [r7, #20]
  status = IMUWriteReg(pIMU, BMI2_INT_LATCH_ADDR, pBuffer, 1);
 80008ae:	f107 0214 	add.w	r2, r7, #20
 80008b2:	2301      	movs	r3, #1
 80008b4:	2155      	movs	r1, #85	@ 0x55
 80008b6:	68f8      	ldr	r0, [r7, #12]
 80008b8:	f7ff feee 	bl	8000698 <IMUWriteReg>
 80008bc:	4603      	mov	r3, r0
 80008be:	75fb      	strb	r3, [r7, #23]

	return IMU_OK;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	fafaafaf 	.word	0xfafaafaf
 80008d0:	0800a798 	.word	0x0800a798

080008d4 <LoggerInit>:
  }
  return ch;
}

int8_t LoggerInit(UART_HandleTypeDef *pUART_)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if(HAL_GetCurrentCPUID() != CM7_CPUID || pUART_ == NULL) 
 80008dc:	f001 fa2a 	bl	8001d34 <HAL_GetCurrentCPUID>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	d102      	bne.n	80008ec <LoggerInit+0x18>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d105      	bne.n	80008f8 <LoggerInit+0x24>
  {
    pUART = NULL;
 80008ec:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <LoggerInit+0x5c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
    return -1;
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
 80008f6:	e017      	b.n	8000928 <LoggerInit+0x54>
  }

  pCM4RingBuf = RingBuffCreate((void*)MEM_SHARED_CM4_UART_RINGBUFF_START, MEM_SHARED_CM4_UART_RINGBUFF_TOTAL_LEN);
 80008f8:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80008fc:	480d      	ldr	r0, [pc, #52]	@ (8000934 <LoggerInit+0x60>)
 80008fe:	f000 f921 	bl	8000b44 <RingBuffCreate>
 8000902:	4603      	mov	r3, r0
 8000904:	4a0c      	ldr	r2, [pc, #48]	@ (8000938 <LoggerInit+0x64>)
 8000906:	6013      	str	r3, [r2, #0]
  pCM7RingBuf = RingBuffCreate((void*)MEM_SHARED_CM7_UART_RINGBUFF_START, MEM_SHARED_CM7_UART_RINGBUFF_TOTAL_LEN);
 8000908:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800090c:	480b      	ldr	r0, [pc, #44]	@ (800093c <LoggerInit+0x68>)
 800090e:	f000 f919 	bl	8000b44 <RingBuffCreate>
 8000912:	4603      	mov	r3, r0
 8000914:	4a0a      	ldr	r2, [pc, #40]	@ (8000940 <LoggerInit+0x6c>)
 8000916:	6013      	str	r3, [r2, #0]
  pUART = pUART_;
 8000918:	4a05      	ldr	r2, [pc, #20]	@ (8000930 <LoggerInit+0x5c>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6013      	str	r3, [r2, #0]
  SyncRegisterHandler(SyncUARTTaskHandler, SYNC_TASKID_UART_OUT);
 800091e:	2100      	movs	r1, #0
 8000920:	4808      	ldr	r0, [pc, #32]	@ (8000944 <LoggerInit+0x70>)
 8000922:	f000 fa93 	bl	8000e4c <SyncRegisterHandler>

  return 0;
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	24000038 	.word	0x24000038
 8000934:	38000008 	.word	0x38000008
 8000938:	24000030 	.word	0x24000030
 800093c:	38000128 	.word	0x38000128
 8000940:	24000034 	.word	0x24000034
 8000944:	08000999 	.word	0x08000999

08000948 <LoggerWriteToUART>:

static int8_t LoggerWriteToUART(RingBuff volatile *pRingBuf)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t len = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
  void *pBufToTransmit = NULL;
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]

  send:
  len = RingBuffGetLinearBlockReadLength(pRingBuf);
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f000 f991 	bl	8000c80 <RingBuffGetLinearBlockReadLength>
 800095e:	60f8      	str	r0, [r7, #12]
  if(len > 0)
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d011      	beq.n	800098a <LoggerWriteToUART+0x42>
  {
    pBufToTransmit = RingBuffGetLinearBlockReadAddress(pRingBuf);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f960 	bl	8000c2c <RingBuffGetLinearBlockReadAddress>
 800096c:	60b8      	str	r0, [r7, #8]
    HAL_UART_Transmit(pUART, pBufToTransmit, len, 1000);
 800096e:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <LoggerWriteToUART+0x4c>)
 8000970:	6818      	ldr	r0, [r3, #0]
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	b29a      	uxth	r2, r3
 8000976:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800097a:	68b9      	ldr	r1, [r7, #8]
 800097c:	f006 fab0 	bl	8006ee0 <HAL_UART_Transmit>
    RingBuffSkip(pRingBuf, len);
 8000980:	68f9      	ldr	r1, [r7, #12]
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f000 f9be 	bl	8000d04 <RingBuffSkip>
    /* Check for anything in the overflow buffer */
    goto send;
 8000988:	e7e6      	b.n	8000958 <LoggerWriteToUART+0x10>
  }
  return 0;
 800098a:	2300      	movs	r3, #0
}
 800098c:	4618      	mov	r0, r3
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	24000038 	.word	0x24000038

08000998 <SyncUARTTaskHandler>:

static void SyncUARTTaskHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 800099c:	f001 f9ca 	bl	8001d34 <HAL_GetCurrentCPUID>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b03      	cmp	r3, #3
 80009a4:	d104      	bne.n	80009b0 <SyncUARTTaskHandler+0x18>
  {
    LoggerWriteToUART(pCM4RingBuf);
 80009a6:	4b03      	ldr	r3, [pc, #12]	@ (80009b4 <SyncUARTTaskHandler+0x1c>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ffcc 	bl	8000948 <LoggerWriteToUART>
  }
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	24000030 	.word	0x24000030

080009b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009bc:	4b49      	ldr	r3, [pc, #292]	@ (8000ae4 <SystemInit+0x12c>)
 80009be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009c2:	4a48      	ldr	r2, [pc, #288]	@ (8000ae4 <SystemInit+0x12c>)
 80009c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80009cc:	4b45      	ldr	r3, [pc, #276]	@ (8000ae4 <SystemInit+0x12c>)
 80009ce:	691b      	ldr	r3, [r3, #16]
 80009d0:	4a44      	ldr	r2, [pc, #272]	@ (8000ae4 <SystemInit+0x12c>)
 80009d2:	f043 0310 	orr.w	r3, r3, #16
 80009d6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009d8:	4b43      	ldr	r3, [pc, #268]	@ (8000ae8 <SystemInit+0x130>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f003 030f 	and.w	r3, r3, #15
 80009e0:	2b06      	cmp	r3, #6
 80009e2:	d807      	bhi.n	80009f4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009e4:	4b40      	ldr	r3, [pc, #256]	@ (8000ae8 <SystemInit+0x130>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f023 030f 	bic.w	r3, r3, #15
 80009ec:	4a3e      	ldr	r2, [pc, #248]	@ (8000ae8 <SystemInit+0x130>)
 80009ee:	f043 0307 	orr.w	r3, r3, #7
 80009f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009f4:	4b3d      	ldr	r3, [pc, #244]	@ (8000aec <SystemInit+0x134>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a3c      	ldr	r2, [pc, #240]	@ (8000aec <SystemInit+0x134>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a00:	4b3a      	ldr	r3, [pc, #232]	@ (8000aec <SystemInit+0x134>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a06:	4b39      	ldr	r3, [pc, #228]	@ (8000aec <SystemInit+0x134>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	4938      	ldr	r1, [pc, #224]	@ (8000aec <SystemInit+0x134>)
 8000a0c:	4b38      	ldr	r3, [pc, #224]	@ (8000af0 <SystemInit+0x138>)
 8000a0e:	4013      	ands	r3, r2
 8000a10:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a12:	4b35      	ldr	r3, [pc, #212]	@ (8000ae8 <SystemInit+0x130>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d007      	beq.n	8000a2e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a1e:	4b32      	ldr	r3, [pc, #200]	@ (8000ae8 <SystemInit+0x130>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f023 030f 	bic.w	r3, r3, #15
 8000a26:	4a30      	ldr	r2, [pc, #192]	@ (8000ae8 <SystemInit+0x130>)
 8000a28:	f043 0307 	orr.w	r3, r3, #7
 8000a2c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000aec <SystemInit+0x134>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a34:	4b2d      	ldr	r3, [pc, #180]	@ (8000aec <SystemInit+0x134>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000aec <SystemInit+0x134>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a40:	4b2a      	ldr	r3, [pc, #168]	@ (8000aec <SystemInit+0x134>)
 8000a42:	4a2c      	ldr	r2, [pc, #176]	@ (8000af4 <SystemInit+0x13c>)
 8000a44:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a46:	4b29      	ldr	r3, [pc, #164]	@ (8000aec <SystemInit+0x134>)
 8000a48:	4a2b      	ldr	r2, [pc, #172]	@ (8000af8 <SystemInit+0x140>)
 8000a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a4c:	4b27      	ldr	r3, [pc, #156]	@ (8000aec <SystemInit+0x134>)
 8000a4e:	4a2b      	ldr	r2, [pc, #172]	@ (8000afc <SystemInit+0x144>)
 8000a50:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a52:	4b26      	ldr	r3, [pc, #152]	@ (8000aec <SystemInit+0x134>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a58:	4b24      	ldr	r3, [pc, #144]	@ (8000aec <SystemInit+0x134>)
 8000a5a:	4a28      	ldr	r2, [pc, #160]	@ (8000afc <SystemInit+0x144>)
 8000a5c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a5e:	4b23      	ldr	r3, [pc, #140]	@ (8000aec <SystemInit+0x134>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a64:	4b21      	ldr	r3, [pc, #132]	@ (8000aec <SystemInit+0x134>)
 8000a66:	4a25      	ldr	r2, [pc, #148]	@ (8000afc <SystemInit+0x144>)
 8000a68:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a6a:	4b20      	ldr	r3, [pc, #128]	@ (8000aec <SystemInit+0x134>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a70:	4b1e      	ldr	r3, [pc, #120]	@ (8000aec <SystemInit+0x134>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a1d      	ldr	r2, [pc, #116]	@ (8000aec <SystemInit+0x134>)
 8000a76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000aec <SystemInit+0x134>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000a82:	4b1f      	ldr	r3, [pc, #124]	@ (8000b00 <SystemInit+0x148>)
 8000a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a86:	4a1e      	ldr	r2, [pc, #120]	@ (8000b00 <SystemInit+0x148>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a8c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b04 <SystemInit+0x14c>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	4b1d      	ldr	r3, [pc, #116]	@ (8000b08 <SystemInit+0x150>)
 8000a94:	4013      	ands	r3, r2
 8000a96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a9a:	d202      	bcs.n	8000aa2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b0c <SystemInit+0x154>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000aa2:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <SystemInit+0x134>)
 8000aa4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000aa8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d113      	bne.n	8000ad8 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <SystemInit+0x134>)
 8000ab2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ab6:	4a0d      	ldr	r2, [pc, #52]	@ (8000aec <SystemInit+0x134>)
 8000ab8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000abc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ac0:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <SystemInit+0x158>)
 8000ac2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000ac6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000ac8:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <SystemInit+0x134>)
 8000aca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ace:	4a07      	ldr	r2, [pc, #28]	@ (8000aec <SystemInit+0x134>)
 8000ad0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ad4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00
 8000ae8:	52002000 	.word	0x52002000
 8000aec:	58024400 	.word	0x58024400
 8000af0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000af4:	02020200 	.word	0x02020200
 8000af8:	01ff0000 	.word	0x01ff0000
 8000afc:	01010280 	.word	0x01010280
 8000b00:	580000c0 	.word	0x580000c0
 8000b04:	5c001000 	.word	0x5c001000
 8000b08:	ffff0000 	.word	0xffff0000
 8000b0c:	51008108 	.word	0x51008108
 8000b10:	52004000 	.word	0x52004000

08000b14 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000b18:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <ExitRun0Mode+0x2c>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	4a08      	ldr	r2, [pc, #32]	@ (8000b40 <ExitRun0Mode+0x2c>)
 8000b1e:	f023 0302 	bic.w	r3, r3, #2
 8000b22:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000b24:	bf00      	nop
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <ExitRun0Mode+0x2c>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d0f9      	beq.n	8000b26 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000b32:	bf00      	nop
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	58024800 	.word	0x58024800

08000b44 <RingBuffCreate>:
 * \param[in]       buff: Buffer handle
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
RINGBUFF_VOLATILE RingBuff* RingBuffCreate(void* pBuff, size_t size) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
    if (pBuff == NULL || size == 0 || size < (sizeof(RingBuff) + 1)) {
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d005      	beq.n	8000b60 <RingBuffCreate+0x1c>
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d002      	beq.n	8000b60 <RingBuffCreate+0x1c>
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	2b20      	cmp	r3, #32
 8000b5e:	d801      	bhi.n	8000b64 <RingBuffCreate+0x20>
        return NULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	e017      	b.n	8000b94 <RingBuffCreate+0x50>
    }

    RINGBUFF_VOLATILE RingBuff *pRingBuf = (RingBuff*)pBuff;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	60fb      	str	r3, [r7, #12]
    BUF_MEMSET((void *)pRingBuf, 0x00, sizeof(RingBuff));
 8000b68:	2220      	movs	r2, #32
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f009 fdc1 	bl	800a6f4 <memset>

    pRingBuf->size = size - sizeof(RingBuff);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	f1a3 0220 	sub.w	r2, r3, #32
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	609a      	str	r2, [r3, #8]
    pRingBuf->buff = ((uint8_t*) ((uintptr_t)pBuff) + sizeof(RingBuff));
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f103 0220 	add.w	r2, r3, #32
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	605a      	str	r2, [r3, #4]

    pRingBuf->magic1 = 0xDEADBEEF;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	4a04      	ldr	r2, [pc, #16]	@ (8000b9c <RingBuffCreate+0x58>)
 8000b8a:	601a      	str	r2, [r3, #0]
    pRingBuf->magic2 = ~0xDEADBEEF;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ba0 <RingBuffCreate+0x5c>)
 8000b90:	619a      	str	r2, [r3, #24]

    return pRingBuf;
 8000b92:	68fb      	ldr	r3, [r7, #12]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	deadbeef 	.word	0xdeadbeef
 8000ba0:	21524110 	.word	0x21524110

08000ba4 <RingBuffGetFull>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
RingBuffGetFull(RINGBUFF_VOLATILE RingBuff* buff) {
 8000ba4:	b480      	push	{r7}
 8000ba6:	b087      	sub	sp, #28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d011      	beq.n	8000bd6 <RingBuffGetFull+0x32>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8000c24 <RingBuffGetFull+0x80>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d10c      	bne.n	8000bd6 <RingBuffGetFull+0x32>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a19      	ldr	r2, [pc, #100]	@ (8000c28 <RingBuffGetFull+0x84>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d107      	bne.n	8000bd6 <RingBuffGetFull+0x32>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d003      	beq.n	8000bd6 <RingBuffGetFull+0x32>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <RingBuffGetFull+0x36>
        return 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e01d      	b.n	8000c16 <RingBuffGetFull+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	691b      	ldr	r3, [r3, #16]
 8000bde:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d102      	bne.n	8000bf4 <RingBuffGetFull+0x50>
        size = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	e00f      	b.n	8000c14 <RingBuffGetFull+0x70>
    } else if (w > r) {
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d904      	bls.n	8000c06 <RingBuffGetFull+0x62>
        size = w - r;
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	e006      	b.n	8000c14 <RingBuffGetFull+0x70>
    } else {
        size = buff->size - (r - w);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	689a      	ldr	r2, [r3, #8]
 8000c0a:	6939      	ldr	r1, [r7, #16]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	4413      	add	r3, r2
 8000c12:	617b      	str	r3, [r7, #20]
    }
    return size;
 8000c14:	697b      	ldr	r3, [r7, #20]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	371c      	adds	r7, #28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	deadbeef 	.word	0xdeadbeef
 8000c28:	21524110 	.word	0x21524110

08000c2c <RingBuffGetLinearBlockReadAddress>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *
RingBuffGetLinearBlockReadAddress(RINGBUFF_VOLATILE RingBuff* buff) {
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d011      	beq.n	8000c5e <RingBuffGetLinearBlockReadAddress+0x32>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c78 <RingBuffGetLinearBlockReadAddress+0x4c>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d10c      	bne.n	8000c5e <RingBuffGetLinearBlockReadAddress+0x32>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a0c      	ldr	r2, [pc, #48]	@ (8000c7c <RingBuffGetLinearBlockReadAddress+0x50>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d107      	bne.n	8000c5e <RingBuffGetLinearBlockReadAddress+0x32>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <RingBuffGetLinearBlockReadAddress+0x32>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d101      	bne.n	8000c62 <RingBuffGetLinearBlockReadAddress+0x36>
        return NULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e004      	b.n	8000c6c <RingBuffGetLinearBlockReadAddress+0x40>
    }
    return &buff->buff[buff->r];
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	4413      	add	r3, r2
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	deadbeef 	.word	0xdeadbeef
 8000c7c:	21524110 	.word	0x21524110

08000c80 <RingBuffGetLinearBlockReadLength>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
RingBuffGetLinearBlockReadLength(RINGBUFF_VOLATILE RingBuff* buff) {
 8000c80:	b480      	push	{r7}
 8000c82:	b087      	sub	sp, #28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d011      	beq.n	8000cb2 <RingBuffGetLinearBlockReadLength+0x32>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a1a      	ldr	r2, [pc, #104]	@ (8000cfc <RingBuffGetLinearBlockReadLength+0x7c>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d10c      	bne.n	8000cb2 <RingBuffGetLinearBlockReadLength+0x32>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a18      	ldr	r2, [pc, #96]	@ (8000d00 <RingBuffGetLinearBlockReadLength+0x80>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d107      	bne.n	8000cb2 <RingBuffGetLinearBlockReadLength+0x32>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <RingBuffGetLinearBlockReadLength+0x32>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <RingBuffGetLinearBlockReadLength+0x36>
        return 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e01b      	b.n	8000cee <RingBuffGetLinearBlockReadLength+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	691b      	ldr	r3, [r3, #16]
 8000cba:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d904      	bls.n	8000cd4 <RingBuffGetLinearBlockReadLength+0x54>
        len = w - r;
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	e00b      	b.n	8000cec <RingBuffGetLinearBlockReadLength+0x6c>
    } else if (r > w) {
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d905      	bls.n	8000ce8 <RingBuffGetLinearBlockReadLength+0x68>
        len = buff->size - r;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	e001      	b.n	8000cec <RingBuffGetLinearBlockReadLength+0x6c>
    } else {
        len = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
    }
    return len;
 8000cec:	697b      	ldr	r3, [r7, #20]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	371c      	adds	r7, #28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	deadbeef 	.word	0xdeadbeef
 8000d00:	21524110 	.word	0x21524110

08000d04 <RingBuffSkip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
RingBuffSkip(RINGBUFF_VOLATILE RingBuff* buff, size_t len) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d014      	beq.n	8000d3e <RingBuffSkip+0x3a>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a20      	ldr	r2, [pc, #128]	@ (8000d9c <RingBuffSkip+0x98>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d10f      	bne.n	8000d3e <RingBuffSkip+0x3a>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	4a1f      	ldr	r2, [pc, #124]	@ (8000da0 <RingBuffSkip+0x9c>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d10a      	bne.n	8000d3e <RingBuffSkip+0x3a>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d006      	beq.n	8000d3e <RingBuffSkip+0x3a>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d002      	beq.n	8000d3e <RingBuffSkip+0x3a>
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <RingBuffSkip+0x3e>
        return 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e027      	b.n	8000d92 <RingBuffSkip+0x8e>
    }

    full = RingBuffGetFull(buff);             /* Get buffer used length */
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ff2e 	bl	8000ba4 <RingBuffGetFull>
 8000d48:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);                   /* Calculate max skip */
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	bf28      	it	cs
 8000d52:	4613      	movcs	r3, r2
 8000d54:	603b      	str	r3, [r7, #0]
    buff->r += len;                             /* Advance read pointer */
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68da      	ldr	r2, [r3, #12]
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	441a      	add	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68da      	ldr	r2, [r3, #12]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d306      	bcc.n	8000d7c <RingBuffSkip+0x78>
        buff->r -= buff->size;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	68d2      	ldr	r2, [r2, #12]
 8000d76:	1ad2      	subs	r2, r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, len);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	695b      	ldr	r3, [r3, #20]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d005      	beq.n	8000d90 <RingBuffSkip+0x8c>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	4798      	blx	r3
    return len;
 8000d90:	683b      	ldr	r3, [r7, #0]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	deadbeef 	.word	0xdeadbeef
 8000da0:	21524110 	.word	0x21524110

08000da4 <SyncMailBoxGet>:
#include "mem/mem.h"

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID);

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
    uint8_t volatile *pMB = NULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
    if(mbID == MAILBOX_CM7_ID) pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM7_START;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d103      	bne.n	8000dbe <SyncMailBoxGet+0x1a>
 8000db6:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	e001      	b.n	8000dc2 <SyncMailBoxGet+0x1e>
    else pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM4_START;
 8000dbe:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <SyncMailBoxGet+0x2c>)
 8000dc0:	60fb      	str	r3, [r7, #12]
    return pMB;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	38000004 	.word	0x38000004

08000dd4 <SyncMailBoxRead>:
    asm volatile ("sev");
    return 0;
}

int8_t SyncMailBoxRead(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return -1;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d902      	bls.n	8000dec <SyncMailBoxRead+0x18>
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dea:	e009      	b.n	8000e00 <SyncMailBoxRead+0x2c>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 8000dec:	68f8      	ldr	r0, [r7, #12]
 8000dee:	f7ff ffd9 	bl	8000da4 <SyncMailBoxGet>
 8000df2:	6178      	str	r0, [r7, #20]
    memcpy((void*)pBuffer, (void*)pMB, len);
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	6979      	ldr	r1, [r7, #20]
 8000df8:	68b8      	ldr	r0, [r7, #8]
 8000dfa:	f009 fca7 	bl	800a74c <memcpy>
    return 0;
 8000dfe:	2300      	movs	r3, #0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <SyncGetTaskHandler>:
//     if(HAL_GetCurrentCPUID() == CM7_CPUID)  return 0;
//     else                                    return 1;
// }

static task_handler_fn_t SyncGetTaskHandler(uint32_t taskID)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
    if(taskID > NUM_TASK_TYPES) return NULL;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d901      	bls.n	8000e1a <SyncGetTaskHandler+0x12>
 8000e16:	2300      	movs	r3, #0
 8000e18:	e003      	b.n	8000e22 <SyncGetTaskHandler+0x1a>
    return handlers[taskID];
 8000e1a:	4a05      	ldr	r2, [pc, #20]	@ (8000e30 <SyncGetTaskHandler+0x28>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	2400003c 	.word	0x2400003c

08000e34 <SyncInit>:

/*
* \brief Each core needs to call SyncInit
*/
int8_t SyncInit(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
    memset(handlers, 0, sizeof(handlers));
 8000e38:	2208      	movs	r2, #8
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <SyncInit+0x14>)
 8000e3e:	f009 fc59 	bl	800a6f4 <memset>
    return 0;
 8000e42:	2300      	movs	r3, #0
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2400003c 	.word	0x2400003c

08000e4c <SyncRegisterHandler>:

int8_t SyncRegisterHandler(task_handler_fn_t fn, uint32_t taskID)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
    if(taskID > NUM_TASK_TYPES) return -1;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d902      	bls.n	8000e62 <SyncRegisterHandler+0x16>
 8000e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e60:	e005      	b.n	8000e6e <SyncRegisterHandler+0x22>
    handlers[taskID] = fn;
 8000e62:	4906      	ldr	r1, [pc, #24]	@ (8000e7c <SyncRegisterHandler+0x30>)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 0;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	2400003c 	.word	0x2400003c

08000e80 <CM7_SEV_IRQHandler>:
* and the SEV IRQ handler for CM4 was called.
* This function was originally defined in CM4/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM7_SEV_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
    // CPUID == CM4
    uint32_t taskID = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	2204      	movs	r2, #4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	2000      	movs	r0, #0
 8000e92:	f7ff ff9f 	bl	8000dd4 <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ffb5 	bl	8000e08 <SyncGetTaskHandler>
 8000e9e:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <CM7_SEV_IRQHandler+0x2a>
    {
        fn();
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4798      	blx	r3
    }
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <CM4_SEV_IRQHandler>:
* and the SEV IRQ handler for CM7 was called.
* This function was originally defined in CM7/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM4_SEV_IRQHandler(void)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
    // CPUID == CM7
    uint32_t taskID = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM7_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f7ff ff86 	bl	8000dd4 <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff9c 	bl	8000e08 <SyncGetTaskHandler>
 8000ed0:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <CM4_SEV_IRQHandler+0x2a>
    {
        fn();
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4798      	blx	r3
    }
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af02      	add	r7, sp, #8

/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm("NOP"); }
 8000eea:	e000      	b.n	8000eee <main+0xa>
 8000eec:	bf00      	nop
 8000eee:	4b22      	ldr	r3, [pc, #136]	@ (8000f78 <main+0x94>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1f8      	bne.n	8000eec <main+0x8>
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efa:	f000 fdaf 	bl	8001a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efe:	f000 f843 	bl	8000f88 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000f02:	4b1d      	ldr	r3, [pc, #116]	@ (8000f78 <main+0x94>)
 8000f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f08:	4a1b      	ldr	r2, [pc, #108]	@ (8000f78 <main+0x94>)
 8000f0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f12:	4b19      	ldr	r3, [pc, #100]	@ (8000f78 <main+0x94>)
 8000f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000f20:	2000      	movs	r0, #0
 8000f22:	f001 f8c9 	bl	80020b8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000f26:	2100      	movs	r1, #0
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f001 f8df 	bl	80020ec <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm("NOP"); }
 8000f2e:	e000      	b.n	8000f32 <main+0x4e>
 8000f30:	bf00      	nop
 8000f32:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <main+0x94>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1f8      	bne.n	8000f30 <main+0x4c>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3e:	f000 fa29 	bl	8001394 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f42:	f000 f9db 	bl	80012fc <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000f46:	f000 f8a5 	bl	8001094 <MX_SPI2_Init>
  MX_TIM8_Init();
 8000f4a:	f000 f8f9 	bl	8001140 <MX_TIM8_Init>
  MX_TIM13_Init();
 8000f4e:	f000 f987 	bl	8001260 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  LoggerInit(&huart1);
 8000f52:	480a      	ldr	r0, [pc, #40]	@ (8000f7c <main+0x98>)
 8000f54:	f7ff fcbe 	bl	80008d4 <LoggerInit>
  SyncInit();
 8000f58:	f7ff ff6c 	bl	8000e34 <SyncInit>
  IMUInit(
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	2303      	movs	r3, #3
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2308      	movs	r3, #8
 8000f66:	2201      	movs	r2, #1
 8000f68:	4905      	ldr	r1, [pc, #20]	@ (8000f80 <main+0x9c>)
 8000f6a:	4806      	ldr	r0, [pc, #24]	@ (8000f84 <main+0xa0>)
 8000f6c:	f7ff fbcc 	bl	8000708 <IMUInit>
    IMU_ACC_ODR_100,
    IMU_GYRO_RANGE_250,
    IMU_GYRO_ODR_100
  );

  vTaskStartScheduler();
 8000f70:	f008 fb36 	bl	80095e0 <vTaskStartScheduler>
  /* USER CODE END 2 */
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <main+0x90>
 8000f78:	58024400 	.word	0x58024400
 8000f7c:	24000164 	.word	0x24000164
 8000f80:	24000044 	.word	0x24000044
 8000f84:	240001f8 	.word	0x240001f8

08000f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b09c      	sub	sp, #112	@ 0x70
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f92:	224c      	movs	r2, #76	@ 0x4c
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f009 fbac 	bl	800a6f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f009 fba6 	bl	800a6f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000fa8:	2004      	movs	r0, #4
 8000faa:	f001 f8b3 	bl	8002114 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fae:	2300      	movs	r3, #0
 8000fb0:	603b      	str	r3, [r7, #0]
 8000fb2:	4b36      	ldr	r3, [pc, #216]	@ (800108c <SystemClock_Config+0x104>)
 8000fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fb6:	4a35      	ldr	r2, [pc, #212]	@ (800108c <SystemClock_Config+0x104>)
 8000fb8:	f023 0301 	bic.w	r3, r3, #1
 8000fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000fbe:	4b33      	ldr	r3, [pc, #204]	@ (800108c <SystemClock_Config+0x104>)
 8000fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	4b31      	ldr	r3, [pc, #196]	@ (8001090 <SystemClock_Config+0x108>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a30      	ldr	r2, [pc, #192]	@ (8001090 <SystemClock_Config+0x108>)
 8000fce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	4b2e      	ldr	r3, [pc, #184]	@ (8001090 <SystemClock_Config+0x108>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fe0:	bf00      	nop
 8000fe2:	4b2b      	ldr	r3, [pc, #172]	@ (8001090 <SystemClock_Config+0x108>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000fee:	d1f8      	bne.n	8000fe2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000ff0:	230b      	movs	r3, #11
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ffe:	2340      	movs	r3, #64	@ 0x40
 8001000:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001002:	2301      	movs	r3, #1
 8001004:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001006:	2302      	movs	r3, #2
 8001008:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100a:	2302      	movs	r3, #2
 800100c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800100e:	2305      	movs	r3, #5
 8001010:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8001012:	2330      	movs	r3, #48	@ 0x30
 8001014:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001016:	2302      	movs	r3, #2
 8001018:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800101a:	2305      	movs	r3, #5
 800101c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800101e:	2302      	movs	r3, #2
 8001020:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001022:	2308      	movs	r3, #8
 8001024:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001026:	2300      	movs	r3, #0
 8001028:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001032:	4618      	mov	r0, r3
 8001034:	f001 f8c8 	bl	80021c8 <HAL_RCC_OscConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800103e:	f000 fa39 	bl	80014b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001042:	233f      	movs	r3, #63	@ 0x3f
 8001044:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f001 fd08 	bl	8002a7c <HAL_RCC_ClockConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001072:	f000 fa1f 	bl	80014b4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001076:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800107a:	2100      	movs	r1, #0
 800107c:	2000      	movs	r0, #0
 800107e:	f001 feb3 	bl	8002de8 <HAL_RCC_MCOConfig>
}
 8001082:	bf00      	nop
 8001084:	3770      	adds	r7, #112	@ 0x70
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	58000400 	.word	0x58000400
 8001090:	58024800 	.word	0x58024800

08001094 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001098:	4b27      	ldr	r3, [pc, #156]	@ (8001138 <MX_SPI2_Init+0xa4>)
 800109a:	4a28      	ldr	r2, [pc, #160]	@ (800113c <MX_SPI2_Init+0xa8>)
 800109c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800109e:	4b26      	ldr	r3, [pc, #152]	@ (8001138 <MX_SPI2_Init+0xa4>)
 80010a0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80010a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010a6:	4b24      	ldr	r3, [pc, #144]	@ (8001138 <MX_SPI2_Init+0xa4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010ac:	4b22      	ldr	r3, [pc, #136]	@ (8001138 <MX_SPI2_Init+0xa4>)
 80010ae:	2207      	movs	r2, #7
 80010b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010b2:	4b21      	ldr	r3, [pc, #132]	@ (8001138 <MX_SPI2_Init+0xa4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001138 <MX_SPI2_Init+0xa4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80010be:	4b1e      	ldr	r3, [pc, #120]	@ (8001138 <MX_SPI2_Init+0xa4>)
 80010c0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80010c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001138 <MX_SPI2_Init+0xa4>)
 80010c8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80010cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001138 <MX_SPI2_Init+0xa4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d4:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <MX_SPI2_Init+0xa4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010da:	4b17      	ldr	r3, [pc, #92]	@ (8001138 <MX_SPI2_Init+0xa4>)
 80010dc:	2200      	movs	r2, #0
 80010de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80010e0:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <MX_SPI2_Init+0xa4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010e6:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <MX_SPI2_Init+0xa4>)
 80010e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010ec:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010ee:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <MX_SPI2_Init+0xa4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010f4:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <MX_SPI2_Init+0xa4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001138 <MX_SPI2_Init+0xa4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001100:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <MX_SPI2_Init+0xa4>)
 8001102:	2200      	movs	r2, #0
 8001104:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001106:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <MX_SPI2_Init+0xa4>)
 8001108:	2200      	movs	r2, #0
 800110a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800110c:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <MX_SPI2_Init+0xa4>)
 800110e:	2200      	movs	r2, #0
 8001110:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001112:	4b09      	ldr	r3, [pc, #36]	@ (8001138 <MX_SPI2_Init+0xa4>)
 8001114:	2200      	movs	r2, #0
 8001116:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001118:	4b07      	ldr	r3, [pc, #28]	@ (8001138 <MX_SPI2_Init+0xa4>)
 800111a:	2200      	movs	r2, #0
 800111c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800111e:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <MX_SPI2_Init+0xa4>)
 8001120:	2200      	movs	r2, #0
 8001122:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001124:	4804      	ldr	r0, [pc, #16]	@ (8001138 <MX_SPI2_Init+0xa4>)
 8001126:	f003 ff4d 	bl	8004fc4 <HAL_SPI_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001130:	f000 f9c0 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	24000044 	.word	0x24000044
 800113c:	40003800 	.word	0x40003800

08001140 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b096      	sub	sp, #88	@ 0x58
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001146:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001152:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]
 8001162:	615a      	str	r2, [r3, #20]
 8001164:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	222c      	movs	r2, #44	@ 0x2c
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f009 fac1 	bl	800a6f4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001172:	4b39      	ldr	r3, [pc, #228]	@ (8001258 <MX_TIM8_Init+0x118>)
 8001174:	4a39      	ldr	r2, [pc, #228]	@ (800125c <MX_TIM8_Init+0x11c>)
 8001176:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001178:	4b37      	ldr	r3, [pc, #220]	@ (8001258 <MX_TIM8_Init+0x118>)
 800117a:	2200      	movs	r2, #0
 800117c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117e:	4b36      	ldr	r3, [pc, #216]	@ (8001258 <MX_TIM8_Init+0x118>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001184:	4b34      	ldr	r3, [pc, #208]	@ (8001258 <MX_TIM8_Init+0x118>)
 8001186:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800118a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118c:	4b32      	ldr	r3, [pc, #200]	@ (8001258 <MX_TIM8_Init+0x118>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001192:	4b31      	ldr	r3, [pc, #196]	@ (8001258 <MX_TIM8_Init+0x118>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001198:	4b2f      	ldr	r3, [pc, #188]	@ (8001258 <MX_TIM8_Init+0x118>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800119e:	482e      	ldr	r0, [pc, #184]	@ (8001258 <MX_TIM8_Init+0x118>)
 80011a0:	f004 ff14 	bl	8005fcc <HAL_TIM_PWM_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80011aa:	f000 f983 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011ba:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80011be:	4619      	mov	r1, r3
 80011c0:	4825      	ldr	r0, [pc, #148]	@ (8001258 <MX_TIM8_Init+0x118>)
 80011c2:	f005 fd13 	bl	8006bec <HAL_TIMEx_MasterConfigSynchronization>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80011cc:	f000 f972 	bl	80014b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d0:	2360      	movs	r3, #96	@ 0x60
 80011d2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d8:	2300      	movs	r3, #0
 80011da:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011dc:	2300      	movs	r3, #0
 80011de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011f0:	2200      	movs	r2, #0
 80011f2:	4619      	mov	r1, r3
 80011f4:	4818      	ldr	r0, [pc, #96]	@ (8001258 <MX_TIM8_Init+0x118>)
 80011f6:	f005 f847 	bl	8006288 <HAL_TIM_PWM_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001200:	f000 f958 	bl	80014b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001218:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800121c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001226:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	4619      	mov	r1, r3
 8001238:	4807      	ldr	r0, [pc, #28]	@ (8001258 <MX_TIM8_Init+0x118>)
 800123a:	f005 fd65 	bl	8006d08 <HAL_TIMEx_ConfigBreakDeadTime>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001244:	f000 f936 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001248:	4803      	ldr	r0, [pc, #12]	@ (8001258 <MX_TIM8_Init+0x118>)
 800124a:	f000 fa59 	bl	8001700 <HAL_TIM_MspPostInit>

}
 800124e:	bf00      	nop
 8001250:	3758      	adds	r7, #88	@ 0x58
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	240000cc 	.word	0x240000cc
 800125c:	40010400 	.word	0x40010400

08001260 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
 8001274:	615a      	str	r2, [r3, #20]
 8001276:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001278:	4b1e      	ldr	r3, [pc, #120]	@ (80012f4 <MX_TIM13_Init+0x94>)
 800127a:	4a1f      	ldr	r2, [pc, #124]	@ (80012f8 <MX_TIM13_Init+0x98>)
 800127c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800127e:	4b1d      	ldr	r3, [pc, #116]	@ (80012f4 <MX_TIM13_Init+0x94>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001284:	4b1b      	ldr	r3, [pc, #108]	@ (80012f4 <MX_TIM13_Init+0x94>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800128a:	4b1a      	ldr	r3, [pc, #104]	@ (80012f4 <MX_TIM13_Init+0x94>)
 800128c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001290:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001292:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <MX_TIM13_Init+0x94>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001298:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <MX_TIM13_Init+0x94>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800129e:	4815      	ldr	r0, [pc, #84]	@ (80012f4 <MX_TIM13_Init+0x94>)
 80012a0:	f004 fdc5 	bl	8005e2e <HAL_TIM_Base_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80012aa:	f000 f903 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80012ae:	4811      	ldr	r0, [pc, #68]	@ (80012f4 <MX_TIM13_Init+0x94>)
 80012b0:	f004 fe8c 	bl	8005fcc <HAL_TIM_PWM_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80012ba:	f000 f8fb 	bl	80014b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012be:	2360      	movs	r3, #96	@ 0x60
 80012c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2200      	movs	r2, #0
 80012d2:	4619      	mov	r1, r3
 80012d4:	4807      	ldr	r0, [pc, #28]	@ (80012f4 <MX_TIM13_Init+0x94>)
 80012d6:	f004 ffd7 	bl	8006288 <HAL_TIM_PWM_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80012e0:	f000 f8e8 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80012e4:	4803      	ldr	r0, [pc, #12]	@ (80012f4 <MX_TIM13_Init+0x94>)
 80012e6:	f000 fa0b 	bl	8001700 <HAL_TIM_MspPostInit>

}
 80012ea:	bf00      	nop
 80012ec:	3720      	adds	r7, #32
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	24000118 	.word	0x24000118
 80012f8:	40001c00 	.word	0x40001c00

080012fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001300:	4b22      	ldr	r3, [pc, #136]	@ (800138c <MX_USART1_UART_Init+0x90>)
 8001302:	4a23      	ldr	r2, [pc, #140]	@ (8001390 <MX_USART1_UART_Init+0x94>)
 8001304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001306:	4b21      	ldr	r3, [pc, #132]	@ (800138c <MX_USART1_UART_Init+0x90>)
 8001308:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800130c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b1f      	ldr	r3, [pc, #124]	@ (800138c <MX_USART1_UART_Init+0x90>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b1d      	ldr	r3, [pc, #116]	@ (800138c <MX_USART1_UART_Init+0x90>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800131a:	4b1c      	ldr	r3, [pc, #112]	@ (800138c <MX_USART1_UART_Init+0x90>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001320:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <MX_USART1_UART_Init+0x90>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b19      	ldr	r3, [pc, #100]	@ (800138c <MX_USART1_UART_Init+0x90>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800132c:	4b17      	ldr	r3, [pc, #92]	@ (800138c <MX_USART1_UART_Init+0x90>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001332:	4b16      	ldr	r3, [pc, #88]	@ (800138c <MX_USART1_UART_Init+0x90>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001338:	4b14      	ldr	r3, [pc, #80]	@ (800138c <MX_USART1_UART_Init+0x90>)
 800133a:	2200      	movs	r2, #0
 800133c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800133e:	4b13      	ldr	r3, [pc, #76]	@ (800138c <MX_USART1_UART_Init+0x90>)
 8001340:	2200      	movs	r2, #0
 8001342:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001344:	4811      	ldr	r0, [pc, #68]	@ (800138c <MX_USART1_UART_Init+0x90>)
 8001346:	f005 fd7b 	bl	8006e40 <HAL_UART_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001350:	f000 f8b0 	bl	80014b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001354:	2100      	movs	r1, #0
 8001356:	480d      	ldr	r0, [pc, #52]	@ (800138c <MX_USART1_UART_Init+0x90>)
 8001358:	f006 fe11 	bl	8007f7e <HAL_UARTEx_SetTxFifoThreshold>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001362:	f000 f8a7 	bl	80014b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001366:	2100      	movs	r1, #0
 8001368:	4808      	ldr	r0, [pc, #32]	@ (800138c <MX_USART1_UART_Init+0x90>)
 800136a:	f006 fe46 	bl	8007ffa <HAL_UARTEx_SetRxFifoThreshold>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001374:	f000 f89e 	bl	80014b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001378:	4804      	ldr	r0, [pc, #16]	@ (800138c <MX_USART1_UART_Init+0x90>)
 800137a:	f006 fdc7 	bl	8007f0c <HAL_UARTEx_DisableFifoMode>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001384:	f000 f896 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	24000164 	.word	0x24000164
 8001390:	40011000 	.word	0x40011000

08001394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	@ 0x28
 8001398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013aa:	4b36      	ldr	r3, [pc, #216]	@ (8001484 <MX_GPIO_Init+0xf0>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b0:	4a34      	ldr	r2, [pc, #208]	@ (8001484 <MX_GPIO_Init+0xf0>)
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ba:	4b32      	ldr	r3, [pc, #200]	@ (8001484 <MX_GPIO_Init+0xf0>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001484 <MX_GPIO_Init+0xf0>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001484 <MX_GPIO_Init+0xf0>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001484 <MX_GPIO_Init+0xf0>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e6:	4b27      	ldr	r3, [pc, #156]	@ (8001484 <MX_GPIO_Init+0xf0>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ec:	4a25      	ldr	r2, [pc, #148]	@ (8001484 <MX_GPIO_Init+0xf0>)
 80013ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013f6:	4b23      	ldr	r3, [pc, #140]	@ (8001484 <MX_GPIO_Init+0xf0>)
 80013f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001404:	4b1f      	ldr	r3, [pc, #124]	@ (8001484 <MX_GPIO_Init+0xf0>)
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800140a:	4a1e      	ldr	r2, [pc, #120]	@ (8001484 <MX_GPIO_Init+0xf0>)
 800140c:	f043 0320 	orr.w	r3, r3, #32
 8001410:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001414:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <MX_GPIO_Init+0xf0>)
 8001416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800141a:	f003 0320 	and.w	r3, r3, #32
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001422:	4b18      	ldr	r3, [pc, #96]	@ (8001484 <MX_GPIO_Init+0xf0>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001428:	4a16      	ldr	r2, [pc, #88]	@ (8001484 <MX_GPIO_Init+0xf0>)
 800142a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800142e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001432:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <MX_GPIO_Init+0xf0>)
 8001434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001438:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8001440:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	480a      	ldr	r0, [pc, #40]	@ (8001488 <MX_GPIO_Init+0xf4>)
 800145e:	f000 fc7b 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8001462:	2380      	movs	r3, #128	@ 0x80
 8001464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001466:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800146a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	4805      	ldr	r0, [pc, #20]	@ (800148c <MX_GPIO_Init+0xf8>)
 8001478:	f000 fc6e 	bl	8001d58 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800147c:	bf00      	nop
 800147e:	3728      	adds	r7, #40	@ 0x28
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	58024400 	.word	0x58024400
 8001488:	58020000 	.word	0x58020000
 800148c:	58020800 	.word	0x58020800

08001490 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a04      	ldr	r2, [pc, #16]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d101      	bne.n	80014a6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80014a2:	f000 fb17 	bl	8001ad4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40000800 	.word	0x40000800

080014b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b8:	b672      	cpsid	i
}
 80014ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <Error_Handler+0x8>

080014c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <HAL_MspInit+0x48>)
 80014c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001508 <HAL_MspInit+0x48>)
 80014ce:	f043 0302 	orr.w	r3, r3, #2
 80014d2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80014d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <HAL_MspInit+0x48>)
 80014d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014e4:	2200      	movs	r2, #0
 80014e6:	210f      	movs	r1, #15
 80014e8:	f06f 0001 	mvn.w	r0, #1
 80014ec:	f000 fbfa 	bl	8001ce4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 5, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2105      	movs	r1, #5
 80014f4:	2041      	movs	r0, #65	@ 0x41
 80014f6:	f000 fbf5 	bl	8001ce4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 80014fa:	2041      	movs	r0, #65	@ 0x41
 80014fc:	f000 fc0c 	bl	8001d18 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	58024400 	.word	0x58024400

0800150c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b0be      	sub	sp, #248	@ 0xf8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001524:	f107 0318 	add.w	r3, r7, #24
 8001528:	22c8      	movs	r2, #200	@ 0xc8
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f009 f8e1 	bl	800a6f4 <memset>
  if(hspi->Instance==SPI2)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a38      	ldr	r2, [pc, #224]	@ (8001618 <HAL_SPI_MspInit+0x10c>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d169      	bne.n	8001610 <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800153c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001548:	2300      	movs	r3, #0
 800154a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800154c:	f107 0318 	add.w	r3, r7, #24
 8001550:	4618      	mov	r0, r3
 8001552:	f001 fecb 	bl	80032ec <HAL_RCCEx_PeriphCLKConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800155c:	f7ff ffaa 	bl	80014b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001560:	4b2e      	ldr	r3, [pc, #184]	@ (800161c <HAL_SPI_MspInit+0x110>)
 8001562:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001566:	4a2d      	ldr	r2, [pc, #180]	@ (800161c <HAL_SPI_MspInit+0x110>)
 8001568:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800156c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001570:	4b2a      	ldr	r3, [pc, #168]	@ (800161c <HAL_SPI_MspInit+0x110>)
 8001572:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	4b27      	ldr	r3, [pc, #156]	@ (800161c <HAL_SPI_MspInit+0x110>)
 8001580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001584:	4a25      	ldr	r2, [pc, #148]	@ (800161c <HAL_SPI_MspInit+0x110>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800158e:	4b23      	ldr	r3, [pc, #140]	@ (800161c <HAL_SPI_MspInit+0x110>)
 8001590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800159c:	4b1f      	ldr	r3, [pc, #124]	@ (800161c <HAL_SPI_MspInit+0x110>)
 800159e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a2:	4a1e      	ldr	r2, [pc, #120]	@ (800161c <HAL_SPI_MspInit+0x110>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015ac:	4b1b      	ldr	r3, [pc, #108]	@ (800161c <HAL_SPI_MspInit+0x110>)
 80015ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_NSS_Pin;
 80015ba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80015be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015d4:	2305      	movs	r3, #5
 80015d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80015de:	4619      	mov	r1, r3
 80015e0:	480f      	ldr	r0, [pc, #60]	@ (8001620 <HAL_SPI_MspInit+0x114>)
 80015e2:	f000 fbb9 	bl	8001d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_3_Pin|PMOD_2_Pin;
 80015e6:	230c      	movs	r3, #12
 80015e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015fe:	2305      	movs	r3, #5
 8001600:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001604:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001608:	4619      	mov	r1, r3
 800160a:	4806      	ldr	r0, [pc, #24]	@ (8001624 <HAL_SPI_MspInit+0x118>)
 800160c:	f000 fba4 	bl	8001d58 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001610:	bf00      	nop
 8001612:	37f8      	adds	r7, #248	@ 0xf8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40003800 	.word	0x40003800
 800161c:	58024400 	.word	0x58024400
 8001620:	58020000 	.word	0x58020000
 8001624:	58020800 	.word	0x58020800

08001628 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	@ 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a1a      	ldr	r2, [pc, #104]	@ (80016b0 <HAL_TIM_PWM_MspInit+0x88>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d12d      	bne.n	80016a6 <HAL_TIM_PWM_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800164a:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <HAL_TIM_PWM_MspInit+0x8c>)
 800164c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001650:	4a18      	ldr	r2, [pc, #96]	@ (80016b4 <HAL_TIM_PWM_MspInit+0x8c>)
 8001652:	f043 0302 	orr.w	r3, r3, #2
 8001656:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800165a:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <HAL_TIM_PWM_MspInit+0x8c>)
 800165c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001668:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <HAL_TIM_PWM_MspInit+0x8c>)
 800166a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800166e:	4a11      	ldr	r2, [pc, #68]	@ (80016b4 <HAL_TIM_PWM_MspInit+0x8c>)
 8001670:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001674:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001678:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <HAL_TIM_PWM_MspInit+0x8c>)
 800167a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800167e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001686:	2340      	movs	r3, #64	@ 0x40
 8001688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001696:	2303      	movs	r3, #3
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	4805      	ldr	r0, [pc, #20]	@ (80016b8 <HAL_TIM_PWM_MspInit+0x90>)
 80016a2:	f000 fb59 	bl	8001d58 <HAL_GPIO_Init>

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 80016a6:	bf00      	nop
 80016a8:	3728      	adds	r7, #40	@ 0x28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40010400 	.word	0x40010400
 80016b4:	58024400 	.word	0x58024400
 80016b8:	58022400 	.word	0x58022400

080016bc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0b      	ldr	r2, [pc, #44]	@ (80016f8 <HAL_TIM_Base_MspInit+0x3c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d10e      	bne.n	80016ec <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80016ce:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <HAL_TIM_Base_MspInit+0x40>)
 80016d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016d4:	4a09      	ldr	r2, [pc, #36]	@ (80016fc <HAL_TIM_Base_MspInit+0x40>)
 80016d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016de:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <HAL_TIM_Base_MspInit+0x40>)
 80016e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM13_MspInit 1 */

  }

}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	40001c00 	.word	0x40001c00
 80016fc:	58024400 	.word	0x58024400

08001700 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	@ 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a35      	ldr	r2, [pc, #212]	@ (80017f4 <HAL_TIM_MspPostInit+0xf4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d13e      	bne.n	80017a0 <HAL_TIM_MspPostInit+0xa0>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001722:	4b35      	ldr	r3, [pc, #212]	@ (80017f8 <HAL_TIM_MspPostInit+0xf8>)
 8001724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001728:	4a33      	ldr	r2, [pc, #204]	@ (80017f8 <HAL_TIM_MspPostInit+0xf8>)
 800172a:	f043 0304 	orr.w	r3, r3, #4
 800172e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001732:	4b31      	ldr	r3, [pc, #196]	@ (80017f8 <HAL_TIM_MspPostInit+0xf8>)
 8001734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001740:	4b2d      	ldr	r3, [pc, #180]	@ (80017f8 <HAL_TIM_MspPostInit+0xf8>)
 8001742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001746:	4a2c      	ldr	r2, [pc, #176]	@ (80017f8 <HAL_TIM_MspPostInit+0xf8>)
 8001748:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800174c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001750:	4b29      	ldr	r3, [pc, #164]	@ (80017f8 <HAL_TIM_MspPostInit+0xf8>)
 8001752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001756:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PJ7     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800175e:	2340      	movs	r3, #64	@ 0x40
 8001760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800176e:	2303      	movs	r3, #3
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	4820      	ldr	r0, [pc, #128]	@ (80017fc <HAL_TIM_MspPostInit+0xfc>)
 800177a:	f000 faed 	bl	8001d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 800177e:	2380      	movs	r3, #128	@ 0x80
 8001780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800178e:	2303      	movs	r3, #3
 8001790:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	4819      	ldr	r0, [pc, #100]	@ (8001800 <HAL_TIM_MspPostInit+0x100>)
 800179a:	f000 fadd 	bl	8001d58 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM13_MspPostInit 1 */

    /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800179e:	e024      	b.n	80017ea <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM13)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a17      	ldr	r2, [pc, #92]	@ (8001804 <HAL_TIM_MspPostInit+0x104>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d11f      	bne.n	80017ea <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017aa:	4b13      	ldr	r3, [pc, #76]	@ (80017f8 <HAL_TIM_MspPostInit+0xf8>)
 80017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b0:	4a11      	ldr	r2, [pc, #68]	@ (80017f8 <HAL_TIM_MspPostInit+0xf8>)
 80017b2:	f043 0320 	orr.w	r3, r3, #32
 80017b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ba:	4b0f      	ldr	r3, [pc, #60]	@ (80017f8 <HAL_TIM_MspPostInit+0xf8>)
 80017bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c0:	f003 0320 	and.w	r3, r3, #32
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 80017c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80017da:	2309      	movs	r3, #9
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	4619      	mov	r1, r3
 80017e4:	4808      	ldr	r0, [pc, #32]	@ (8001808 <HAL_TIM_MspPostInit+0x108>)
 80017e6:	f000 fab7 	bl	8001d58 <HAL_GPIO_Init>
}
 80017ea:	bf00      	nop
 80017ec:	3728      	adds	r7, #40	@ 0x28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40010400 	.word	0x40010400
 80017f8:	58024400 	.word	0x58024400
 80017fc:	58020800 	.word	0x58020800
 8001800:	58022400 	.word	0x58022400
 8001804:	40001c00 	.word	0x40001c00
 8001808:	58021400 	.word	0x58021400

0800180c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b0bc      	sub	sp, #240	@ 0xf0
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	22c8      	movs	r2, #200	@ 0xc8
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f008 ff61 	bl	800a6f4 <memset>
  if(huart->Instance==USART1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a27      	ldr	r2, [pc, #156]	@ (80018d4 <HAL_UART_MspInit+0xc8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d146      	bne.n	80018ca <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800183c:	f04f 0201 	mov.w	r2, #1
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001848:	2300      	movs	r3, #0
 800184a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800184e:	f107 0310 	add.w	r3, r7, #16
 8001852:	4618      	mov	r0, r3
 8001854:	f001 fd4a 	bl	80032ec <HAL_RCCEx_PeriphCLKConfig>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800185e:	f7ff fe29 	bl	80014b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001862:	4b1d      	ldr	r3, [pc, #116]	@ (80018d8 <HAL_UART_MspInit+0xcc>)
 8001864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001868:	4a1b      	ldr	r2, [pc, #108]	@ (80018d8 <HAL_UART_MspInit+0xcc>)
 800186a:	f043 0310 	orr.w	r3, r3, #16
 800186e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001872:	4b19      	ldr	r3, [pc, #100]	@ (80018d8 <HAL_UART_MspInit+0xcc>)
 8001874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001878:	f003 0310 	and.w	r3, r3, #16
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001880:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <HAL_UART_MspInit+0xcc>)
 8001882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001886:	4a14      	ldr	r2, [pc, #80]	@ (80018d8 <HAL_UART_MspInit+0xcc>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001890:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <HAL_UART_MspInit+0xcc>)
 8001892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800189e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80018a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018b8:	2307      	movs	r3, #7
 80018ba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018c2:	4619      	mov	r1, r3
 80018c4:	4805      	ldr	r0, [pc, #20]	@ (80018dc <HAL_UART_MspInit+0xd0>)
 80018c6:	f000 fa47 	bl	8001d58 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80018ca:	bf00      	nop
 80018cc:	37f0      	adds	r7, #240	@ 0xf0
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40011000 	.word	0x40011000
 80018d8:	58024400 	.word	0x58024400
 80018dc:	58020000 	.word	0x58020000

080018e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b090      	sub	sp, #64	@ 0x40
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b0f      	cmp	r3, #15
 80018ec:	d827      	bhi.n	800193e <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	201e      	movs	r0, #30
 80018f4:	f000 f9f6 	bl	8001ce4 <HAL_NVIC_SetPriority>

     /* Enable the TIM4 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80018f8:	201e      	movs	r0, #30
 80018fa:	f000 fa0d 	bl	8001d18 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80018fe:	4a29      	ldr	r2, [pc, #164]	@ (80019a4 <HAL_InitTick+0xc4>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001904:	4b28      	ldr	r3, [pc, #160]	@ (80019a8 <HAL_InitTick+0xc8>)
 8001906:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800190a:	4a27      	ldr	r2, [pc, #156]	@ (80019a8 <HAL_InitTick+0xc8>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001914:	4b24      	ldr	r3, [pc, #144]	@ (80019a8 <HAL_InitTick+0xc8>)
 8001916:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001922:	f107 0210 	add.w	r2, r7, #16
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f001 fc9b 	bl	8003268 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001934:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001938:	2b00      	cmp	r3, #0
 800193a:	d106      	bne.n	800194a <HAL_InitTick+0x6a>
 800193c:	e001      	b.n	8001942 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e02b      	b.n	800199a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001942:	f001 fc65 	bl	8003210 <HAL_RCC_GetPCLK1Freq>
 8001946:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001948:	e004      	b.n	8001954 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800194a:	f001 fc61 	bl	8003210 <HAL_RCC_GetPCLK1Freq>
 800194e:	4603      	mov	r3, r0
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001956:	4a15      	ldr	r2, [pc, #84]	@ (80019ac <HAL_InitTick+0xcc>)
 8001958:	fba2 2303 	umull	r2, r3, r2, r3
 800195c:	0c9b      	lsrs	r3, r3, #18
 800195e:	3b01      	subs	r3, #1
 8001960:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001962:	4b13      	ldr	r3, [pc, #76]	@ (80019b0 <HAL_InitTick+0xd0>)
 8001964:	4a13      	ldr	r2, [pc, #76]	@ (80019b4 <HAL_InitTick+0xd4>)
 8001966:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001968:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <HAL_InitTick+0xd0>)
 800196a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800196e:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001970:	4a0f      	ldr	r2, [pc, #60]	@ (80019b0 <HAL_InitTick+0xd0>)
 8001972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001974:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001976:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <HAL_InitTick+0xd0>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197c:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <HAL_InitTick+0xd0>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001982:	480b      	ldr	r0, [pc, #44]	@ (80019b0 <HAL_InitTick+0xd0>)
 8001984:	f004 fa53 	bl	8005e2e <HAL_TIM_Base_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d104      	bne.n	8001998 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800198e:	4808      	ldr	r0, [pc, #32]	@ (80019b0 <HAL_InitTick+0xd0>)
 8001990:	f004 faa4 	bl	8005edc <HAL_TIM_Base_Start_IT>
 8001994:	4603      	mov	r3, r0
 8001996:	e000      	b.n	800199a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
}
 800199a:	4618      	mov	r0, r3
 800199c:	3740      	adds	r7, #64	@ 0x40
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	24000008 	.word	0x24000008
 80019a8:	58024400 	.word	0x58024400
 80019ac:	431bde83 	.word	0x431bde83
 80019b0:	24000230 	.word	0x24000230
 80019b4:	40000800 	.word	0x40000800

080019b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <NMI_Handler+0x4>

080019c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <HardFault_Handler+0x4>

080019c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <MemManage_Handler+0x4>

080019d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <BusFault_Handler+0x4>

080019d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <UsageFault_Handler+0x4>

080019e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019f4:	4802      	ldr	r0, [pc, #8]	@ (8001a00 <TIM4_IRQHandler+0x10>)
 80019f6:	f004 fb40 	bl	800607a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	24000230 	.word	0x24000230

08001a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a04:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001a40 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001a08:	f7ff f884 	bl	8000b14 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a0c:	f7fe ffd4 	bl	80009b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a10:	480c      	ldr	r0, [pc, #48]	@ (8001a44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a12:	490d      	ldr	r1, [pc, #52]	@ (8001a48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a14:	4a0d      	ldr	r2, [pc, #52]	@ (8001a4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a18:	e002      	b.n	8001a20 <LoopCopyDataInit>

08001a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1e:	3304      	adds	r3, #4

08001a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a24:	d3f9      	bcc.n	8001a1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a26:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a28:	4c0a      	ldr	r4, [pc, #40]	@ (8001a54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a2c:	e001      	b.n	8001a32 <LoopFillZerobss>

08001a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a30:	3204      	adds	r2, #4

08001a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a34:	d3fb      	bcc.n	8001a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a36:	f008 fe65 	bl	800a704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a3a:	f7ff fa53 	bl	8000ee4 <main>
  bx  lr
 8001a3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a40:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a48:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001a4c:	0800c7e4 	.word	0x0800c7e4
  ldr r2, =_sbss
 8001a50:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8001a54:	24000fc4 	.word	0x24000fc4

08001a58 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a58:	e7fe      	b.n	8001a58 <ADC3_IRQHandler>
	...

08001a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a62:	2003      	movs	r0, #3
 8001a64:	f000 f933 	bl	8001cce <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a68:	f001 fa28 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ac4 <HAL_Init+0x68>)
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	0a1b      	lsrs	r3, r3, #8
 8001a74:	f003 030f 	and.w	r3, r3, #15
 8001a78:	4913      	ldr	r1, [pc, #76]	@ (8001ac8 <HAL_Init+0x6c>)
 8001a7a:	5ccb      	ldrb	r3, [r1, r3]
 8001a7c:	f003 031f 	and.w	r3, r3, #31
 8001a80:	fa22 f303 	lsr.w	r3, r2, r3
 8001a84:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a86:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac4 <HAL_Init+0x68>)
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ac8 <HAL_Init+0x6c>)
 8001a90:	5cd3      	ldrb	r3, [r2, r3]
 8001a92:	f003 031f 	and.w	r3, r3, #31
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001acc <HAL_Init+0x70>)
 8001a9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad0 <HAL_Init+0x74>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aa6:	200f      	movs	r0, #15
 8001aa8:	f7ff ff1a 	bl	80018e0 <HAL_InitTick>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e002      	b.n	8001abc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab6:	f7ff fd03 	bl	80014c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	58024400 	.word	0x58024400
 8001ac8:	0800c79c 	.word	0x0800c79c
 8001acc:	24000004 	.word	0x24000004
 8001ad0:	24000000 	.word	0x24000000

08001ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <HAL_IncTick+0x20>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <HAL_IncTick+0x24>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a04      	ldr	r2, [pc, #16]	@ (8001af8 <HAL_IncTick+0x24>)
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	2400000c 	.word	0x2400000c
 8001af8:	2400027c 	.word	0x2400027c

08001afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return uwTick;
 8001b00:	4b03      	ldr	r3, [pc, #12]	@ (8001b10 <HAL_GetTick+0x14>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	2400027c 	.word	0x2400027c

08001b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b1c:	f7ff ffee 	bl	8001afc <HAL_GetTick>
 8001b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2c:	d005      	beq.n	8001b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <HAL_Delay+0x44>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4413      	add	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b3a:	bf00      	nop
 8001b3c:	f7ff ffde 	bl	8001afc <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d8f7      	bhi.n	8001b3c <HAL_Delay+0x28>
  {
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	2400000c 	.word	0x2400000c

08001b5c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b60:	4b03      	ldr	r3, [pc, #12]	@ (8001b70 <HAL_GetREVID+0x14>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	0c1b      	lsrs	r3, r3, #16
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	5c001000 	.word	0x5c001000

08001b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b84:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <__NVIC_SetPriorityGrouping+0x40>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b90:	4013      	ands	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba2:	4a04      	ldr	r2, [pc, #16]	@ (8001bb4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	60d3      	str	r3, [r2, #12]
}
 8001ba8:	bf00      	nop
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00
 8001bb8:	05fa0000 	.word	0x05fa0000

08001bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc0:	4b04      	ldr	r3, [pc, #16]	@ (8001bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	f003 0307 	and.w	r3, r3, #7
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001be2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	db0b      	blt.n	8001c02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	f003 021f 	and.w	r2, r3, #31
 8001bf0:	4907      	ldr	r1, [pc, #28]	@ (8001c10 <__NVIC_EnableIRQ+0x38>)
 8001bf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000e100 	.word	0xe000e100

08001c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	db0a      	blt.n	8001c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	490c      	ldr	r1, [pc, #48]	@ (8001c60 <__NVIC_SetPriority+0x4c>)
 8001c2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c32:	0112      	lsls	r2, r2, #4
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	440b      	add	r3, r1
 8001c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c3c:	e00a      	b.n	8001c54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4908      	ldr	r1, [pc, #32]	@ (8001c64 <__NVIC_SetPriority+0x50>)
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	3b04      	subs	r3, #4
 8001c4c:	0112      	lsls	r2, r2, #4
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	440b      	add	r3, r1
 8001c52:	761a      	strb	r2, [r3, #24]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000e100 	.word	0xe000e100
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	@ 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f1c3 0307 	rsb	r3, r3, #7
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	bf28      	it	cs
 8001c86:	2304      	movcs	r3, #4
 8001c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d902      	bls.n	8001c98 <NVIC_EncodePriority+0x30>
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3b03      	subs	r3, #3
 8001c96:	e000      	b.n	8001c9a <NVIC_EncodePriority+0x32>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	401a      	ands	r2, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	43d9      	mvns	r1, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	4313      	orrs	r3, r2
         );
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3724      	adds	r7, #36	@ 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ff4c 	bl	8001b74 <__NVIC_SetPriorityGrouping>
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf2:	f7ff ff63 	bl	8001bbc <__NVIC_GetPriorityGrouping>
 8001cf6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	68b9      	ldr	r1, [r7, #8]
 8001cfc:	6978      	ldr	r0, [r7, #20]
 8001cfe:	f7ff ffb3 	bl	8001c68 <NVIC_EncodePriority>
 8001d02:	4602      	mov	r2, r0
 8001d04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d08:	4611      	mov	r1, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff ff82 	bl	8001c14 <__NVIC_SetPriority>
}
 8001d10:	bf00      	nop
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ff56 	bl	8001bd8 <__NVIC_EnableIRQ>
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001d38:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <HAL_GetCurrentCPUID+0x20>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d40:	2b70      	cmp	r3, #112	@ 0x70
 8001d42:	d101      	bne.n	8001d48 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e000      	b.n	8001d4a <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8001d48:	2301      	movs	r3, #1
  }
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	@ 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d66:	4b89      	ldr	r3, [pc, #548]	@ (8001f8c <HAL_GPIO_Init+0x234>)
 8001d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d6a:	e194      	b.n	8002096 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2101      	movs	r1, #1
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8186 	beq.w	8002090 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d005      	beq.n	8001d9c <HAL_GPIO_Init+0x44>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d130      	bne.n	8001dfe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	2203      	movs	r2, #3
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	091b      	lsrs	r3, r3, #4
 8001de8:	f003 0201 	and.w	r2, r3, #1
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	d017      	beq.n	8001e3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	2203      	movs	r2, #3
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d123      	bne.n	8001e8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	08da      	lsrs	r2, r3, #3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3208      	adds	r2, #8
 8001e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	220f      	movs	r2, #15
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	691a      	ldr	r2, [r3, #16]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	08da      	lsrs	r2, r3, #3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3208      	adds	r2, #8
 8001e88:	69b9      	ldr	r1, [r7, #24]
 8001e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	2203      	movs	r2, #3
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0203 	and.w	r2, r3, #3
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 80e0 	beq.w	8002090 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed0:	4b2f      	ldr	r3, [pc, #188]	@ (8001f90 <HAL_GPIO_Init+0x238>)
 8001ed2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ed6:	4a2e      	ldr	r2, [pc, #184]	@ (8001f90 <HAL_GPIO_Init+0x238>)
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f90 <HAL_GPIO_Init+0x238>)
 8001ee2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eee:	4a29      	ldr	r2, [pc, #164]	@ (8001f94 <HAL_GPIO_Init+0x23c>)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	220f      	movs	r2, #15
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a20      	ldr	r2, [pc, #128]	@ (8001f98 <HAL_GPIO_Init+0x240>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d052      	beq.n	8001fc0 <HAL_GPIO_Init+0x268>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f9c <HAL_GPIO_Init+0x244>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d031      	beq.n	8001f86 <HAL_GPIO_Init+0x22e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa0 <HAL_GPIO_Init+0x248>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d02b      	beq.n	8001f82 <HAL_GPIO_Init+0x22a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa4 <HAL_GPIO_Init+0x24c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d025      	beq.n	8001f7e <HAL_GPIO_Init+0x226>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa8 <HAL_GPIO_Init+0x250>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d01f      	beq.n	8001f7a <HAL_GPIO_Init+0x222>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001fac <HAL_GPIO_Init+0x254>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d019      	beq.n	8001f76 <HAL_GPIO_Init+0x21e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a1a      	ldr	r2, [pc, #104]	@ (8001fb0 <HAL_GPIO_Init+0x258>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d013      	beq.n	8001f72 <HAL_GPIO_Init+0x21a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a19      	ldr	r2, [pc, #100]	@ (8001fb4 <HAL_GPIO_Init+0x25c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00d      	beq.n	8001f6e <HAL_GPIO_Init+0x216>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a18      	ldr	r2, [pc, #96]	@ (8001fb8 <HAL_GPIO_Init+0x260>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d007      	beq.n	8001f6a <HAL_GPIO_Init+0x212>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a17      	ldr	r2, [pc, #92]	@ (8001fbc <HAL_GPIO_Init+0x264>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d101      	bne.n	8001f66 <HAL_GPIO_Init+0x20e>
 8001f62:	2309      	movs	r3, #9
 8001f64:	e02d      	b.n	8001fc2 <HAL_GPIO_Init+0x26a>
 8001f66:	230a      	movs	r3, #10
 8001f68:	e02b      	b.n	8001fc2 <HAL_GPIO_Init+0x26a>
 8001f6a:	2308      	movs	r3, #8
 8001f6c:	e029      	b.n	8001fc2 <HAL_GPIO_Init+0x26a>
 8001f6e:	2307      	movs	r3, #7
 8001f70:	e027      	b.n	8001fc2 <HAL_GPIO_Init+0x26a>
 8001f72:	2306      	movs	r3, #6
 8001f74:	e025      	b.n	8001fc2 <HAL_GPIO_Init+0x26a>
 8001f76:	2305      	movs	r3, #5
 8001f78:	e023      	b.n	8001fc2 <HAL_GPIO_Init+0x26a>
 8001f7a:	2304      	movs	r3, #4
 8001f7c:	e021      	b.n	8001fc2 <HAL_GPIO_Init+0x26a>
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e01f      	b.n	8001fc2 <HAL_GPIO_Init+0x26a>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e01d      	b.n	8001fc2 <HAL_GPIO_Init+0x26a>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e01b      	b.n	8001fc2 <HAL_GPIO_Init+0x26a>
 8001f8a:	bf00      	nop
 8001f8c:	58000080 	.word	0x58000080
 8001f90:	58024400 	.word	0x58024400
 8001f94:	58000400 	.word	0x58000400
 8001f98:	58020000 	.word	0x58020000
 8001f9c:	58020400 	.word	0x58020400
 8001fa0:	58020800 	.word	0x58020800
 8001fa4:	58020c00 	.word	0x58020c00
 8001fa8:	58021000 	.word	0x58021000
 8001fac:	58021400 	.word	0x58021400
 8001fb0:	58021800 	.word	0x58021800
 8001fb4:	58021c00 	.word	0x58021c00
 8001fb8:	58022000 	.word	0x58022000
 8001fbc:	58022400 	.word	0x58022400
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	f002 0203 	and.w	r2, r2, #3
 8001fc8:	0092      	lsls	r2, r2, #2
 8001fca:	4093      	lsls	r3, r2
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fd2:	4938      	ldr	r1, [pc, #224]	@ (80020b4 <HAL_GPIO_Init+0x35c>)
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	089b      	lsrs	r3, r3, #2
 8001fd8:	3302      	adds	r3, #2
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fe0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002006:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800200e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002034:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	3301      	adds	r3, #1
 8002094:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	fa22 f303 	lsr.w	r3, r2, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f47f ae63 	bne.w	8001d6c <HAL_GPIO_Init+0x14>
  }
}
 80020a6:	bf00      	nop
 80020a8:	bf00      	nop
 80020aa:	3724      	adds	r7, #36	@ 0x24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	58000400 	.word	0x58000400

080020b8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80020c0:	4a08      	ldr	r2, [pc, #32]	@ (80020e4 <HAL_HSEM_FastTake+0x2c>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3320      	adds	r3, #32
 80020c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ca:	4a07      	ldr	r2, [pc, #28]	@ (80020e8 <HAL_HSEM_FastTake+0x30>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d101      	bne.n	80020d4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	e000      	b.n	80020d6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	58026400 	.word	0x58026400
 80020e8:	80000300 	.word	0x80000300

080020ec <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80020f6:	4906      	ldr	r1, [pc, #24]	@ (8002110 <HAL_HSEM_Release+0x24>)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	58026400 	.word	0x58026400

08002114 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800211c:	4b29      	ldr	r3, [pc, #164]	@ (80021c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	2b06      	cmp	r3, #6
 8002126:	d00a      	beq.n	800213e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002128:	4b26      	ldr	r3, [pc, #152]	@ (80021c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	429a      	cmp	r2, r3
 8002134:	d001      	beq.n	800213a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e040      	b.n	80021bc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	e03e      	b.n	80021bc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800213e:	4b21      	ldr	r3, [pc, #132]	@ (80021c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002146:	491f      	ldr	r1, [pc, #124]	@ (80021c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4313      	orrs	r3, r2
 800214c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800214e:	f7ff fcd5 	bl	8001afc <HAL_GetTick>
 8002152:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002154:	e009      	b.n	800216a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002156:	f7ff fcd1 	bl	8001afc <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002164:	d901      	bls.n	800216a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e028      	b.n	80021bc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800216a:	4b16      	ldr	r3, [pc, #88]	@ (80021c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002172:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002176:	d1ee      	bne.n	8002156 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b1e      	cmp	r3, #30
 800217c:	d008      	beq.n	8002190 <HAL_PWREx_ConfigSupply+0x7c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b2e      	cmp	r3, #46	@ 0x2e
 8002182:	d005      	beq.n	8002190 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b1d      	cmp	r3, #29
 8002188:	d002      	beq.n	8002190 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b2d      	cmp	r3, #45	@ 0x2d
 800218e:	d114      	bne.n	80021ba <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002190:	f7ff fcb4 	bl	8001afc <HAL_GetTick>
 8002194:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002196:	e009      	b.n	80021ac <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002198:	f7ff fcb0 	bl	8001afc <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021a6:	d901      	bls.n	80021ac <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e007      	b.n	80021bc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80021ac:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <HAL_PWREx_ConfigSupply+0xb0>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021b8:	d1ee      	bne.n	8002198 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	58024800 	.word	0x58024800

080021c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08c      	sub	sp, #48	@ 0x30
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d102      	bne.n	80021dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	f000 bc48 	b.w	8002a6c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 8088 	beq.w	80022fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ea:	4b99      	ldr	r3, [pc, #612]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021f4:	4b96      	ldr	r3, [pc, #600]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 80021f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80021fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021fc:	2b10      	cmp	r3, #16
 80021fe:	d007      	beq.n	8002210 <HAL_RCC_OscConfig+0x48>
 8002200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002202:	2b18      	cmp	r3, #24
 8002204:	d111      	bne.n	800222a <HAL_RCC_OscConfig+0x62>
 8002206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d10c      	bne.n	800222a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002210:	4b8f      	ldr	r3, [pc, #572]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d06d      	beq.n	80022f8 <HAL_RCC_OscConfig+0x130>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d169      	bne.n	80022f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	f000 bc21 	b.w	8002a6c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002232:	d106      	bne.n	8002242 <HAL_RCC_OscConfig+0x7a>
 8002234:	4b86      	ldr	r3, [pc, #536]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a85      	ldr	r2, [pc, #532]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 800223a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	e02e      	b.n	80022a0 <HAL_RCC_OscConfig+0xd8>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0x9c>
 800224a:	4b81      	ldr	r3, [pc, #516]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a80      	ldr	r2, [pc, #512]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 8002250:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b7e      	ldr	r3, [pc, #504]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a7d      	ldr	r2, [pc, #500]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 800225c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e01d      	b.n	80022a0 <HAL_RCC_OscConfig+0xd8>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0xc0>
 800226e:	4b78      	ldr	r3, [pc, #480]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a77      	ldr	r2, [pc, #476]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 8002274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b75      	ldr	r3, [pc, #468]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a74      	ldr	r2, [pc, #464]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 8002280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e00b      	b.n	80022a0 <HAL_RCC_OscConfig+0xd8>
 8002288:	4b71      	ldr	r3, [pc, #452]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a70      	ldr	r2, [pc, #448]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 800228e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	4b6e      	ldr	r3, [pc, #440]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a6d      	ldr	r2, [pc, #436]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 800229a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800229e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d013      	beq.n	80022d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7ff fc28 	bl	8001afc <HAL_GetTick>
 80022ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b0:	f7ff fc24 	bl	8001afc <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	@ 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e3d4      	b.n	8002a6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022c2:	4b63      	ldr	r3, [pc, #396]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0xe8>
 80022ce:	e014      	b.n	80022fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7ff fc14 	bl	8001afc <HAL_GetTick>
 80022d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d8:	f7ff fc10 	bl	8001afc <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	@ 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e3c0      	b.n	8002a6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022ea:	4b59      	ldr	r3, [pc, #356]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x110>
 80022f6:	e000      	b.n	80022fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 80ca 	beq.w	800249c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002308:	4b51      	ldr	r3, [pc, #324]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002310:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002312:	4b4f      	ldr	r3, [pc, #316]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 8002314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002316:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d007      	beq.n	800232e <HAL_RCC_OscConfig+0x166>
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	2b18      	cmp	r3, #24
 8002322:	d156      	bne.n	80023d2 <HAL_RCC_OscConfig+0x20a>
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d151      	bne.n	80023d2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800232e:	4b48      	ldr	r3, [pc, #288]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <HAL_RCC_OscConfig+0x17e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e392      	b.n	8002a6c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002346:	4b42      	ldr	r3, [pc, #264]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 0219 	bic.w	r2, r3, #25
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	493f      	ldr	r1, [pc, #252]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 8002354:	4313      	orrs	r3, r2
 8002356:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002358:	f7ff fbd0 	bl	8001afc <HAL_GetTick>
 800235c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002360:	f7ff fbcc 	bl	8001afc <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e37c      	b.n	8002a6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002372:	4b37      	ldr	r3, [pc, #220]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237e:	f7ff fbed 	bl	8001b5c <HAL_GetREVID>
 8002382:	4603      	mov	r3, r0
 8002384:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002388:	4293      	cmp	r3, r2
 800238a:	d817      	bhi.n	80023bc <HAL_RCC_OscConfig+0x1f4>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	2b40      	cmp	r3, #64	@ 0x40
 8002392:	d108      	bne.n	80023a6 <HAL_RCC_OscConfig+0x1de>
 8002394:	4b2e      	ldr	r3, [pc, #184]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800239c:	4a2c      	ldr	r2, [pc, #176]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 800239e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023a2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023a4:	e07a      	b.n	800249c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	031b      	lsls	r3, r3, #12
 80023b4:	4926      	ldr	r1, [pc, #152]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ba:	e06f      	b.n	800249c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023bc:	4b24      	ldr	r3, [pc, #144]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	061b      	lsls	r3, r3, #24
 80023ca:	4921      	ldr	r1, [pc, #132]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d0:	e064      	b.n	800249c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d047      	beq.n	800246a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023da:	4b1d      	ldr	r3, [pc, #116]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 0219 	bic.w	r2, r3, #25
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	491a      	ldr	r1, [pc, #104]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7ff fb86 	bl	8001afc <HAL_GetTick>
 80023f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f4:	f7ff fb82 	bl	8001afc <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e332      	b.n	8002a6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002406:	4b12      	ldr	r3, [pc, #72]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002412:	f7ff fba3 	bl	8001b5c <HAL_GetREVID>
 8002416:	4603      	mov	r3, r0
 8002418:	f241 0203 	movw	r2, #4099	@ 0x1003
 800241c:	4293      	cmp	r3, r2
 800241e:	d819      	bhi.n	8002454 <HAL_RCC_OscConfig+0x28c>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	2b40      	cmp	r3, #64	@ 0x40
 8002426:	d108      	bne.n	800243a <HAL_RCC_OscConfig+0x272>
 8002428:	4b09      	ldr	r3, [pc, #36]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002430:	4a07      	ldr	r2, [pc, #28]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 8002432:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002436:	6053      	str	r3, [r2, #4]
 8002438:	e030      	b.n	800249c <HAL_RCC_OscConfig+0x2d4>
 800243a:	4b05      	ldr	r3, [pc, #20]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	031b      	lsls	r3, r3, #12
 8002448:	4901      	ldr	r1, [pc, #4]	@ (8002450 <HAL_RCC_OscConfig+0x288>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]
 800244e:	e025      	b.n	800249c <HAL_RCC_OscConfig+0x2d4>
 8002450:	58024400 	.word	0x58024400
 8002454:	4b9a      	ldr	r3, [pc, #616]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	061b      	lsls	r3, r3, #24
 8002462:	4997      	ldr	r1, [pc, #604]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 8002464:	4313      	orrs	r3, r2
 8002466:	604b      	str	r3, [r1, #4]
 8002468:	e018      	b.n	800249c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800246a:	4b95      	ldr	r3, [pc, #596]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a94      	ldr	r2, [pc, #592]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 8002470:	f023 0301 	bic.w	r3, r3, #1
 8002474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002476:	f7ff fb41 	bl	8001afc <HAL_GetTick>
 800247a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247e:	f7ff fb3d 	bl	8001afc <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e2ed      	b.n	8002a6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002490:	4b8b      	ldr	r3, [pc, #556]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1f0      	bne.n	800247e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 80a9 	beq.w	80025fc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024aa:	4b85      	ldr	r3, [pc, #532]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024b4:	4b82      	ldr	r3, [pc, #520]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 80024b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d007      	beq.n	80024d0 <HAL_RCC_OscConfig+0x308>
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2b18      	cmp	r3, #24
 80024c4:	d13a      	bne.n	800253c <HAL_RCC_OscConfig+0x374>
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d135      	bne.n	800253c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024d0:	4b7b      	ldr	r3, [pc, #492]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_RCC_OscConfig+0x320>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	2b80      	cmp	r3, #128	@ 0x80
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e2c1      	b.n	8002a6c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024e8:	f7ff fb38 	bl	8001b5c <HAL_GetREVID>
 80024ec:	4603      	mov	r3, r0
 80024ee:	f241 0203 	movw	r2, #4099	@ 0x1003
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d817      	bhi.n	8002526 <HAL_RCC_OscConfig+0x35e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	2b20      	cmp	r3, #32
 80024fc:	d108      	bne.n	8002510 <HAL_RCC_OscConfig+0x348>
 80024fe:	4b70      	ldr	r3, [pc, #448]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002506:	4a6e      	ldr	r2, [pc, #440]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 8002508:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800250c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800250e:	e075      	b.n	80025fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002510:	4b6b      	ldr	r3, [pc, #428]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	069b      	lsls	r3, r3, #26
 800251e:	4968      	ldr	r1, [pc, #416]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 8002520:	4313      	orrs	r3, r2
 8002522:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002524:	e06a      	b.n	80025fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002526:	4b66      	ldr	r3, [pc, #408]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	061b      	lsls	r3, r3, #24
 8002534:	4962      	ldr	r1, [pc, #392]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 8002536:	4313      	orrs	r3, r2
 8002538:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800253a:	e05f      	b.n	80025fc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d042      	beq.n	80025ca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002544:	4b5e      	ldr	r3, [pc, #376]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a5d      	ldr	r2, [pc, #372]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 800254a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800254e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7ff fad4 	bl	8001afc <HAL_GetTick>
 8002554:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002558:	f7ff fad0 	bl	8001afc <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e280      	b.n	8002a6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800256a:	4b55      	ldr	r3, [pc, #340]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002576:	f7ff faf1 	bl	8001b5c <HAL_GetREVID>
 800257a:	4603      	mov	r3, r0
 800257c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002580:	4293      	cmp	r3, r2
 8002582:	d817      	bhi.n	80025b4 <HAL_RCC_OscConfig+0x3ec>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	2b20      	cmp	r3, #32
 800258a:	d108      	bne.n	800259e <HAL_RCC_OscConfig+0x3d6>
 800258c:	4b4c      	ldr	r3, [pc, #304]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002594:	4a4a      	ldr	r2, [pc, #296]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 8002596:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800259a:	6053      	str	r3, [r2, #4]
 800259c:	e02e      	b.n	80025fc <HAL_RCC_OscConfig+0x434>
 800259e:	4b48      	ldr	r3, [pc, #288]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	069b      	lsls	r3, r3, #26
 80025ac:	4944      	ldr	r1, [pc, #272]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]
 80025b2:	e023      	b.n	80025fc <HAL_RCC_OscConfig+0x434>
 80025b4:	4b42      	ldr	r3, [pc, #264]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	061b      	lsls	r3, r3, #24
 80025c2:	493f      	ldr	r1, [pc, #252]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60cb      	str	r3, [r1, #12]
 80025c8:	e018      	b.n	80025fc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80025ca:	4b3d      	ldr	r3, [pc, #244]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a3c      	ldr	r2, [pc, #240]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 80025d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d6:	f7ff fa91 	bl	8001afc <HAL_GetTick>
 80025da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025de:	f7ff fa8d 	bl	8001afc <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e23d      	b.n	8002a6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025f0:	4b33      	ldr	r3, [pc, #204]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d036      	beq.n	8002676 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d019      	beq.n	8002644 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002610:	4b2b      	ldr	r3, [pc, #172]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 8002612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002614:	4a2a      	ldr	r2, [pc, #168]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261c:	f7ff fa6e 	bl	8001afc <HAL_GetTick>
 8002620:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002624:	f7ff fa6a 	bl	8001afc <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e21a      	b.n	8002a6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002636:	4b22      	ldr	r3, [pc, #136]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 8002638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0x45c>
 8002642:	e018      	b.n	8002676 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002644:	4b1e      	ldr	r3, [pc, #120]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 8002646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002648:	4a1d      	ldr	r2, [pc, #116]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 800264a:	f023 0301 	bic.w	r3, r3, #1
 800264e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002650:	f7ff fa54 	bl	8001afc <HAL_GetTick>
 8002654:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002658:	f7ff fa50 	bl	8001afc <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e200      	b.n	8002a6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800266a:	4b15      	ldr	r3, [pc, #84]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 800266c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0320 	and.w	r3, r3, #32
 800267e:	2b00      	cmp	r3, #0
 8002680:	d039      	beq.n	80026f6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d01c      	beq.n	80026c4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800268a:	4b0d      	ldr	r3, [pc, #52]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a0c      	ldr	r2, [pc, #48]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 8002690:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002694:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002696:	f7ff fa31 	bl	8001afc <HAL_GetTick>
 800269a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800269e:	f7ff fa2d 	bl	8001afc <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e1dd      	b.n	8002a6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026b0:	4b03      	ldr	r3, [pc, #12]	@ (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x4d6>
 80026bc:	e01b      	b.n	80026f6 <HAL_RCC_OscConfig+0x52e>
 80026be:	bf00      	nop
 80026c0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026c4:	4b9b      	ldr	r3, [pc, #620]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a9a      	ldr	r2, [pc, #616]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 80026ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026d0:	f7ff fa14 	bl	8001afc <HAL_GetTick>
 80026d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026d8:	f7ff fa10 	bl	8001afc <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e1c0      	b.n	8002a6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026ea:	4b92      	ldr	r3, [pc, #584]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8081 	beq.w	8002806 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002704:	4b8c      	ldr	r3, [pc, #560]	@ (8002938 <HAL_RCC_OscConfig+0x770>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a8b      	ldr	r2, [pc, #556]	@ (8002938 <HAL_RCC_OscConfig+0x770>)
 800270a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800270e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002710:	f7ff f9f4 	bl	8001afc <HAL_GetTick>
 8002714:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002718:	f7ff f9f0 	bl	8001afc <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	@ 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e1a0      	b.n	8002a6c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800272a:	4b83      	ldr	r3, [pc, #524]	@ (8002938 <HAL_RCC_OscConfig+0x770>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d106      	bne.n	800274c <HAL_RCC_OscConfig+0x584>
 800273e:	4b7d      	ldr	r3, [pc, #500]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002742:	4a7c      	ldr	r2, [pc, #496]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6713      	str	r3, [r2, #112]	@ 0x70
 800274a:	e02d      	b.n	80027a8 <HAL_RCC_OscConfig+0x5e0>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10c      	bne.n	800276e <HAL_RCC_OscConfig+0x5a6>
 8002754:	4b77      	ldr	r3, [pc, #476]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 8002756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002758:	4a76      	ldr	r2, [pc, #472]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 800275a:	f023 0301 	bic.w	r3, r3, #1
 800275e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002760:	4b74      	ldr	r3, [pc, #464]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002764:	4a73      	ldr	r2, [pc, #460]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 8002766:	f023 0304 	bic.w	r3, r3, #4
 800276a:	6713      	str	r3, [r2, #112]	@ 0x70
 800276c:	e01c      	b.n	80027a8 <HAL_RCC_OscConfig+0x5e0>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b05      	cmp	r3, #5
 8002774:	d10c      	bne.n	8002790 <HAL_RCC_OscConfig+0x5c8>
 8002776:	4b6f      	ldr	r3, [pc, #444]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 8002778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277a:	4a6e      	ldr	r2, [pc, #440]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 800277c:	f043 0304 	orr.w	r3, r3, #4
 8002780:	6713      	str	r3, [r2, #112]	@ 0x70
 8002782:	4b6c      	ldr	r3, [pc, #432]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002786:	4a6b      	ldr	r2, [pc, #428]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6713      	str	r3, [r2, #112]	@ 0x70
 800278e:	e00b      	b.n	80027a8 <HAL_RCC_OscConfig+0x5e0>
 8002790:	4b68      	ldr	r3, [pc, #416]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002794:	4a67      	ldr	r2, [pc, #412]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 8002796:	f023 0301 	bic.w	r3, r3, #1
 800279a:	6713      	str	r3, [r2, #112]	@ 0x70
 800279c:	4b65      	ldr	r3, [pc, #404]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a0:	4a64      	ldr	r2, [pc, #400]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 80027a2:	f023 0304 	bic.w	r3, r3, #4
 80027a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d015      	beq.n	80027dc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b0:	f7ff f9a4 	bl	8001afc <HAL_GetTick>
 80027b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b8:	f7ff f9a0 	bl	8001afc <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e14e      	b.n	8002a6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027ce:	4b59      	ldr	r3, [pc, #356]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0ee      	beq.n	80027b8 <HAL_RCC_OscConfig+0x5f0>
 80027da:	e014      	b.n	8002806 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027dc:	f7ff f98e 	bl	8001afc <HAL_GetTick>
 80027e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027e2:	e00a      	b.n	80027fa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e4:	f7ff f98a 	bl	8001afc <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e138      	b.n	8002a6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1ee      	bne.n	80027e4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 812d 	beq.w	8002a6a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002810:	4b48      	ldr	r3, [pc, #288]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002818:	2b18      	cmp	r3, #24
 800281a:	f000 80bd 	beq.w	8002998 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002822:	2b02      	cmp	r3, #2
 8002824:	f040 809e 	bne.w	8002964 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002828:	4b42      	ldr	r3, [pc, #264]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a41      	ldr	r2, [pc, #260]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 800282e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7ff f962 	bl	8001afc <HAL_GetTick>
 8002838:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283c:	f7ff f95e 	bl	8001afc <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e10e      	b.n	8002a6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800284e:	4b39      	ldr	r3, [pc, #228]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800285a:	4b36      	ldr	r3, [pc, #216]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 800285c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800285e:	4b37      	ldr	r3, [pc, #220]	@ (800293c <HAL_RCC_OscConfig+0x774>)
 8002860:	4013      	ands	r3, r2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800286a:	0112      	lsls	r2, r2, #4
 800286c:	430a      	orrs	r2, r1
 800286e:	4931      	ldr	r1, [pc, #196]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 8002870:	4313      	orrs	r3, r2
 8002872:	628b      	str	r3, [r1, #40]	@ 0x28
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002878:	3b01      	subs	r3, #1
 800287a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002882:	3b01      	subs	r3, #1
 8002884:	025b      	lsls	r3, r3, #9
 8002886:	b29b      	uxth	r3, r3
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288e:	3b01      	subs	r3, #1
 8002890:	041b      	lsls	r3, r3, #16
 8002892:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800289c:	3b01      	subs	r3, #1
 800289e:	061b      	lsls	r3, r3, #24
 80028a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80028a4:	4923      	ldr	r1, [pc, #140]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80028aa:	4b22      	ldr	r3, [pc, #136]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 80028ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ae:	4a21      	ldr	r2, [pc, #132]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 80028b0:	f023 0301 	bic.w	r3, r3, #1
 80028b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 80028b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028ba:	4b21      	ldr	r3, [pc, #132]	@ (8002940 <HAL_RCC_OscConfig+0x778>)
 80028bc:	4013      	ands	r3, r2
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028c2:	00d2      	lsls	r2, r2, #3
 80028c4:	491b      	ldr	r1, [pc, #108]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80028ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 80028cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ce:	f023 020c 	bic.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	4917      	ldr	r1, [pc, #92]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80028dc:	4b15      	ldr	r3, [pc, #84]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 80028de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e0:	f023 0202 	bic.w	r2, r3, #2
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e8:	4912      	ldr	r1, [pc, #72]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80028ee:	4b11      	ldr	r3, [pc, #68]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 80028f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f2:	4a10      	ldr	r2, [pc, #64]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 80028f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 80028fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 8002900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002904:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002906:	4b0b      	ldr	r3, [pc, #44]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 8002908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290a:	4a0a      	ldr	r2, [pc, #40]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 800290c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002910:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002912:	4b08      	ldr	r3, [pc, #32]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 8002914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002916:	4a07      	ldr	r2, [pc, #28]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800291e:	4b05      	ldr	r3, [pc, #20]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a04      	ldr	r2, [pc, #16]	@ (8002934 <HAL_RCC_OscConfig+0x76c>)
 8002924:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292a:	f7ff f8e7 	bl	8001afc <HAL_GetTick>
 800292e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002930:	e011      	b.n	8002956 <HAL_RCC_OscConfig+0x78e>
 8002932:	bf00      	nop
 8002934:	58024400 	.word	0x58024400
 8002938:	58024800 	.word	0x58024800
 800293c:	fffffc0c 	.word	0xfffffc0c
 8002940:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002944:	f7ff f8da 	bl	8001afc <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e08a      	b.n	8002a6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002956:	4b47      	ldr	r3, [pc, #284]	@ (8002a74 <HAL_RCC_OscConfig+0x8ac>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0x77c>
 8002962:	e082      	b.n	8002a6a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002964:	4b43      	ldr	r3, [pc, #268]	@ (8002a74 <HAL_RCC_OscConfig+0x8ac>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a42      	ldr	r2, [pc, #264]	@ (8002a74 <HAL_RCC_OscConfig+0x8ac>)
 800296a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800296e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7ff f8c4 	bl	8001afc <HAL_GetTick>
 8002974:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002978:	f7ff f8c0 	bl	8001afc <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e070      	b.n	8002a6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800298a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a74 <HAL_RCC_OscConfig+0x8ac>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x7b0>
 8002996:	e068      	b.n	8002a6a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002998:	4b36      	ldr	r3, [pc, #216]	@ (8002a74 <HAL_RCC_OscConfig+0x8ac>)
 800299a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800299e:	4b35      	ldr	r3, [pc, #212]	@ (8002a74 <HAL_RCC_OscConfig+0x8ac>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d031      	beq.n	8002a10 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f003 0203 	and.w	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d12a      	bne.n	8002a10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	091b      	lsrs	r3, r3, #4
 80029be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d122      	bne.n	8002a10 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d11a      	bne.n	8002a10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	0a5b      	lsrs	r3, r3, #9
 80029de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d111      	bne.n	8002a10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	0c1b      	lsrs	r3, r3, #16
 80029f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d108      	bne.n	8002a10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	0e1b      	lsrs	r3, r3, #24
 8002a02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e02b      	b.n	8002a6c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002a14:	4b17      	ldr	r3, [pc, #92]	@ (8002a74 <HAL_RCC_OscConfig+0x8ac>)
 8002a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a18:	08db      	lsrs	r3, r3, #3
 8002a1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a1e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d01f      	beq.n	8002a6a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002a2a:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <HAL_RCC_OscConfig+0x8ac>)
 8002a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2e:	4a11      	ldr	r2, [pc, #68]	@ (8002a74 <HAL_RCC_OscConfig+0x8ac>)
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a36:	f7ff f861 	bl	8001afc <HAL_GetTick>
 8002a3a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002a3c:	bf00      	nop
 8002a3e:	f7ff f85d 	bl	8001afc <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d0f9      	beq.n	8002a3e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <HAL_RCC_OscConfig+0x8ac>)
 8002a4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a78 <HAL_RCC_OscConfig+0x8b0>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a56:	00d2      	lsls	r2, r2, #3
 8002a58:	4906      	ldr	r1, [pc, #24]	@ (8002a74 <HAL_RCC_OscConfig+0x8ac>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002a5e:	4b05      	ldr	r3, [pc, #20]	@ (8002a74 <HAL_RCC_OscConfig+0x8ac>)
 8002a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a62:	4a04      	ldr	r2, [pc, #16]	@ (8002a74 <HAL_RCC_OscConfig+0x8ac>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3730      	adds	r7, #48	@ 0x30
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	58024400 	.word	0x58024400
 8002a78:	ffff0007 	.word	0xffff0007

08002a7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e19c      	b.n	8002dca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a90:	4b8a      	ldr	r3, [pc, #552]	@ (8002cbc <HAL_RCC_ClockConfig+0x240>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d910      	bls.n	8002ac0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9e:	4b87      	ldr	r3, [pc, #540]	@ (8002cbc <HAL_RCC_ClockConfig+0x240>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 020f 	bic.w	r2, r3, #15
 8002aa6:	4985      	ldr	r1, [pc, #532]	@ (8002cbc <HAL_RCC_ClockConfig+0x240>)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aae:	4b83      	ldr	r3, [pc, #524]	@ (8002cbc <HAL_RCC_ClockConfig+0x240>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e184      	b.n	8002dca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d010      	beq.n	8002aee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	4b7b      	ldr	r3, [pc, #492]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d908      	bls.n	8002aee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002adc:	4b78      	ldr	r3, [pc, #480]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	4975      	ldr	r1, [pc, #468]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d010      	beq.n	8002b1c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	4b70      	ldr	r3, [pc, #448]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d908      	bls.n	8002b1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b0a:	4b6d      	ldr	r3, [pc, #436]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	496a      	ldr	r1, [pc, #424]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d010      	beq.n	8002b4a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699a      	ldr	r2, [r3, #24]
 8002b2c:	4b64      	ldr	r3, [pc, #400]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d908      	bls.n	8002b4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b38:	4b61      	ldr	r3, [pc, #388]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	495e      	ldr	r1, [pc, #376]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d010      	beq.n	8002b78 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69da      	ldr	r2, [r3, #28]
 8002b5a:	4b59      	ldr	r3, [pc, #356]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d908      	bls.n	8002b78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b66:	4b56      	ldr	r3, [pc, #344]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	4953      	ldr	r1, [pc, #332]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d010      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	4b4d      	ldr	r3, [pc, #308]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d908      	bls.n	8002ba6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b94:	4b4a      	ldr	r3, [pc, #296]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f023 020f 	bic.w	r2, r3, #15
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4947      	ldr	r1, [pc, #284]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d055      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002bb2:	4b43      	ldr	r3, [pc, #268]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	4940      	ldr	r1, [pc, #256]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d107      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bcc:	4b3c      	ldr	r3, [pc, #240]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d121      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0f6      	b.n	8002dca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d107      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002be4:	4b36      	ldr	r3, [pc, #216]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d115      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0ea      	b.n	8002dca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d107      	bne.n	8002c0c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bfc:	4b30      	ldr	r3, [pc, #192]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d109      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0de      	b.n	8002dca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0d6      	b.n	8002dca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c1c:	4b28      	ldr	r3, [pc, #160]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f023 0207 	bic.w	r2, r3, #7
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	4925      	ldr	r1, [pc, #148]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c2e:	f7fe ff65 	bl	8001afc <HAL_GetTick>
 8002c32:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c34:	e00a      	b.n	8002c4c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c36:	f7fe ff61 	bl	8001afc <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e0be      	b.n	8002dca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d1eb      	bne.n	8002c36 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d010      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	4b14      	ldr	r3, [pc, #80]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d208      	bcs.n	8002c8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c7a:	4b11      	ldr	r3, [pc, #68]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	f023 020f 	bic.w	r2, r3, #15
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	490e      	ldr	r1, [pc, #56]	@ (8002cc0 <HAL_RCC_ClockConfig+0x244>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cbc <HAL_RCC_ClockConfig+0x240>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 030f 	and.w	r3, r3, #15
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d214      	bcs.n	8002cc4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9a:	4b08      	ldr	r3, [pc, #32]	@ (8002cbc <HAL_RCC_ClockConfig+0x240>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 020f 	bic.w	r2, r3, #15
 8002ca2:	4906      	ldr	r1, [pc, #24]	@ (8002cbc <HAL_RCC_ClockConfig+0x240>)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002caa:	4b04      	ldr	r3, [pc, #16]	@ (8002cbc <HAL_RCC_ClockConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d005      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e086      	b.n	8002dca <HAL_RCC_ClockConfig+0x34e>
 8002cbc:	52002000 	.word	0x52002000
 8002cc0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d010      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	4b3f      	ldr	r3, [pc, #252]	@ (8002dd4 <HAL_RCC_ClockConfig+0x358>)
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d208      	bcs.n	8002cf2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ce0:	4b3c      	ldr	r3, [pc, #240]	@ (8002dd4 <HAL_RCC_ClockConfig+0x358>)
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	4939      	ldr	r1, [pc, #228]	@ (8002dd4 <HAL_RCC_ClockConfig+0x358>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d010      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	695a      	ldr	r2, [r3, #20]
 8002d02:	4b34      	ldr	r3, [pc, #208]	@ (8002dd4 <HAL_RCC_ClockConfig+0x358>)
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d208      	bcs.n	8002d20 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d0e:	4b31      	ldr	r3, [pc, #196]	@ (8002dd4 <HAL_RCC_ClockConfig+0x358>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	492e      	ldr	r1, [pc, #184]	@ (8002dd4 <HAL_RCC_ClockConfig+0x358>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d010      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699a      	ldr	r2, [r3, #24]
 8002d30:	4b28      	ldr	r3, [pc, #160]	@ (8002dd4 <HAL_RCC_ClockConfig+0x358>)
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d208      	bcs.n	8002d4e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d3c:	4b25      	ldr	r3, [pc, #148]	@ (8002dd4 <HAL_RCC_ClockConfig+0x358>)
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	4922      	ldr	r1, [pc, #136]	@ (8002dd4 <HAL_RCC_ClockConfig+0x358>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0320 	and.w	r3, r3, #32
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d010      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69da      	ldr	r2, [r3, #28]
 8002d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd4 <HAL_RCC_ClockConfig+0x358>)
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d208      	bcs.n	8002d7c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd4 <HAL_RCC_ClockConfig+0x358>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	4917      	ldr	r1, [pc, #92]	@ (8002dd4 <HAL_RCC_ClockConfig+0x358>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d7c:	f000 f89e 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4b14      	ldr	r3, [pc, #80]	@ (8002dd4 <HAL_RCC_ClockConfig+0x358>)
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	4912      	ldr	r1, [pc, #72]	@ (8002dd8 <HAL_RCC_ClockConfig+0x35c>)
 8002d8e:	5ccb      	ldrb	r3, [r1, r3]
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
 8002d98:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd4 <HAL_RCC_ClockConfig+0x358>)
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd8 <HAL_RCC_ClockConfig+0x35c>)
 8002da4:	5cd3      	ldrb	r3, [r2, r3]
 8002da6:	f003 031f 	and.w	r3, r3, #31
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	fa22 f303 	lsr.w	r3, r2, r3
 8002db0:	4a0a      	ldr	r2, [pc, #40]	@ (8002ddc <HAL_RCC_ClockConfig+0x360>)
 8002db2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002db4:	4a0a      	ldr	r2, [pc, #40]	@ (8002de0 <HAL_RCC_ClockConfig+0x364>)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002dba:	4b0a      	ldr	r3, [pc, #40]	@ (8002de4 <HAL_RCC_ClockConfig+0x368>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe fd8e 	bl	80018e0 <HAL_InitTick>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	58024400 	.word	0x58024400
 8002dd8:	0800c79c 	.word	0x0800c79c
 8002ddc:	24000004 	.word	0x24000004
 8002de0:	24000000 	.word	0x24000000
 8002de4:	24000008 	.word	0x24000008

08002de8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08c      	sub	sp, #48	@ 0x30
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d12a      	bne.n	8002e50 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8002dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8002eb0 <HAL_RCC_MCOConfig+0xc8>)
 8002dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e00:	4a2b      	ldr	r2, [pc, #172]	@ (8002eb0 <HAL_RCC_MCOConfig+0xc8>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e0a:	4b29      	ldr	r3, [pc, #164]	@ (8002eb0 <HAL_RCC_MCOConfig+0xc8>)
 8002e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002e18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e22:	2303      	movs	r3, #3
 8002e24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002e2e:	f107 031c 	add.w	r3, r7, #28
 8002e32:	4619      	mov	r1, r3
 8002e34:	481f      	ldr	r0, [pc, #124]	@ (8002eb4 <HAL_RCC_MCOConfig+0xcc>)
 8002e36:	f7fe ff8f 	bl	8001d58 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb0 <HAL_RCC_MCOConfig+0xc8>)
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8002e42:	68b9      	ldr	r1, [r7, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	430b      	orrs	r3, r1
 8002e48:	4919      	ldr	r1, [pc, #100]	@ (8002eb0 <HAL_RCC_MCOConfig+0xc8>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8002e4e:	e02a      	b.n	8002ea6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8002e50:	4b17      	ldr	r3, [pc, #92]	@ (8002eb0 <HAL_RCC_MCOConfig+0xc8>)
 8002e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e56:	4a16      	ldr	r2, [pc, #88]	@ (8002eb0 <HAL_RCC_MCOConfig+0xc8>)
 8002e58:	f043 0304 	orr.w	r3, r3, #4
 8002e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e60:	4b13      	ldr	r3, [pc, #76]	@ (8002eb0 <HAL_RCC_MCOConfig+0xc8>)
 8002e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002e6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e74:	2302      	movs	r3, #2
 8002e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002e80:	2300      	movs	r3, #0
 8002e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002e84:	f107 031c 	add.w	r3, r7, #28
 8002e88:	4619      	mov	r1, r3
 8002e8a:	480b      	ldr	r0, [pc, #44]	@ (8002eb8 <HAL_RCC_MCOConfig+0xd0>)
 8002e8c:	f7fe ff64 	bl	8001d58 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8002e90:	4b07      	ldr	r3, [pc, #28]	@ (8002eb0 <HAL_RCC_MCOConfig+0xc8>)
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	01d9      	lsls	r1, r3, #7
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	430b      	orrs	r3, r1
 8002ea0:	4903      	ldr	r1, [pc, #12]	@ (8002eb0 <HAL_RCC_MCOConfig+0xc8>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	610b      	str	r3, [r1, #16]
}
 8002ea6:	bf00      	nop
 8002ea8:	3730      	adds	r7, #48	@ 0x30
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	58024400 	.word	0x58024400
 8002eb4:	58020000 	.word	0x58020000
 8002eb8:	58020800 	.word	0x58020800

08002ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b089      	sub	sp, #36	@ 0x24
 8002ec0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ec2:	4bb3      	ldr	r3, [pc, #716]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002eca:	2b18      	cmp	r3, #24
 8002ecc:	f200 8155 	bhi.w	800317a <HAL_RCC_GetSysClockFreq+0x2be>
 8002ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ed8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed6:	bf00      	nop
 8002ed8:	08002f3d 	.word	0x08002f3d
 8002edc:	0800317b 	.word	0x0800317b
 8002ee0:	0800317b 	.word	0x0800317b
 8002ee4:	0800317b 	.word	0x0800317b
 8002ee8:	0800317b 	.word	0x0800317b
 8002eec:	0800317b 	.word	0x0800317b
 8002ef0:	0800317b 	.word	0x0800317b
 8002ef4:	0800317b 	.word	0x0800317b
 8002ef8:	08002f63 	.word	0x08002f63
 8002efc:	0800317b 	.word	0x0800317b
 8002f00:	0800317b 	.word	0x0800317b
 8002f04:	0800317b 	.word	0x0800317b
 8002f08:	0800317b 	.word	0x0800317b
 8002f0c:	0800317b 	.word	0x0800317b
 8002f10:	0800317b 	.word	0x0800317b
 8002f14:	0800317b 	.word	0x0800317b
 8002f18:	08002f69 	.word	0x08002f69
 8002f1c:	0800317b 	.word	0x0800317b
 8002f20:	0800317b 	.word	0x0800317b
 8002f24:	0800317b 	.word	0x0800317b
 8002f28:	0800317b 	.word	0x0800317b
 8002f2c:	0800317b 	.word	0x0800317b
 8002f30:	0800317b 	.word	0x0800317b
 8002f34:	0800317b 	.word	0x0800317b
 8002f38:	08002f6f 	.word	0x08002f6f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f3c:	4b94      	ldr	r3, [pc, #592]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d009      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f48:	4b91      	ldr	r3, [pc, #580]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	08db      	lsrs	r3, r3, #3
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	4a90      	ldr	r2, [pc, #576]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
 8002f58:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002f5a:	e111      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f5c:	4b8d      	ldr	r3, [pc, #564]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f5e:	61bb      	str	r3, [r7, #24]
      break;
 8002f60:	e10e      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002f62:	4b8d      	ldr	r3, [pc, #564]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f64:	61bb      	str	r3, [r7, #24]
      break;
 8002f66:	e10b      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002f68:	4b8c      	ldr	r3, [pc, #560]	@ (800319c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002f6a:	61bb      	str	r3, [r7, #24]
      break;
 8002f6c:	e108      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f6e:	4b88      	ldr	r3, [pc, #544]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f78:	4b85      	ldr	r3, [pc, #532]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7c:	091b      	lsrs	r3, r3, #4
 8002f7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f82:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f84:	4b82      	ldr	r3, [pc, #520]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002f8e:	4b80      	ldr	r3, [pc, #512]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f92:	08db      	lsrs	r3, r3, #3
 8002f94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	fb02 f303 	mul.w	r3, r2, r3
 8002f9e:	ee07 3a90 	vmov	s15, r3
 8002fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80e1 	beq.w	8003174 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	f000 8083 	beq.w	80030c0 <HAL_RCC_GetSysClockFreq+0x204>
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	f200 80a1 	bhi.w	8003104 <HAL_RCC_GetSysClockFreq+0x248>
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x114>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d056      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002fce:	e099      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fd0:	4b6f      	ldr	r3, [pc, #444]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0320 	and.w	r3, r3, #32
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d02d      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fdc:	4b6c      	ldr	r3, [pc, #432]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	08db      	lsrs	r3, r3, #3
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	4a6b      	ldr	r2, [pc, #428]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	ee07 3a90 	vmov	s15, r3
 8002ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	ee07 3a90 	vmov	s15, r3
 8002ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003006:	4b62      	ldr	r3, [pc, #392]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800300e:	ee07 3a90 	vmov	s15, r3
 8003012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003016:	ed97 6a02 	vldr	s12, [r7, #8]
 800301a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80031a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800301e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800302a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800302e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003032:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003036:	e087      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	ee07 3a90 	vmov	s15, r3
 800303e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003042:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80031a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800304a:	4b51      	ldr	r3, [pc, #324]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003052:	ee07 3a90 	vmov	s15, r3
 8003056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800305a:	ed97 6a02 	vldr	s12, [r7, #8]
 800305e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80031a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800306a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800306e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003076:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800307a:	e065      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003086:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80031a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800308a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800308e:	4b40      	ldr	r3, [pc, #256]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003096:	ee07 3a90 	vmov	s15, r3
 800309a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800309e:	ed97 6a02 	vldr	s12, [r7, #8]
 80030a2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80031a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030be:	e043      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	ee07 3a90 	vmov	s15, r3
 80030c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80031ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80030ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030d2:	4b2f      	ldr	r3, [pc, #188]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030da:	ee07 3a90 	vmov	s15, r3
 80030de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030e6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80031a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003102:	e021      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80031a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003116:	4b1e      	ldr	r3, [pc, #120]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800311e:	ee07 3a90 	vmov	s15, r3
 8003122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003126:	ed97 6a02 	vldr	s12, [r7, #8]
 800312a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80031a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800312e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800313a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800313e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003142:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003146:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003148:	4b11      	ldr	r3, [pc, #68]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314c:	0a5b      	lsrs	r3, r3, #9
 800314e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003152:	3301      	adds	r3, #1
 8003154:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	ee07 3a90 	vmov	s15, r3
 800315c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003160:	edd7 6a07 	vldr	s13, [r7, #28]
 8003164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800316c:	ee17 3a90 	vmov	r3, s15
 8003170:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003172:	e005      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	61bb      	str	r3, [r7, #24]
      break;
 8003178:	e002      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800317a:	4b07      	ldr	r3, [pc, #28]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800317c:	61bb      	str	r3, [r7, #24]
      break;
 800317e:	bf00      	nop
  }

  return sysclockfreq;
 8003180:	69bb      	ldr	r3, [r7, #24]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3724      	adds	r7, #36	@ 0x24
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	58024400 	.word	0x58024400
 8003194:	03d09000 	.word	0x03d09000
 8003198:	003d0900 	.word	0x003d0900
 800319c:	017d7840 	.word	0x017d7840
 80031a0:	46000000 	.word	0x46000000
 80031a4:	4c742400 	.word	0x4c742400
 80031a8:	4a742400 	.word	0x4a742400
 80031ac:	4bbebc20 	.word	0x4bbebc20

080031b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80031b6:	f7ff fe81 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 80031ba:	4602      	mov	r2, r0
 80031bc:	4b10      	ldr	r3, [pc, #64]	@ (8003200 <HAL_RCC_GetHCLKFreq+0x50>)
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	0a1b      	lsrs	r3, r3, #8
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	490f      	ldr	r1, [pc, #60]	@ (8003204 <HAL_RCC_GetHCLKFreq+0x54>)
 80031c8:	5ccb      	ldrb	r3, [r1, r3]
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	fa22 f303 	lsr.w	r3, r2, r3
 80031d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003200 <HAL_RCC_GetHCLKFreq+0x50>)
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	4a09      	ldr	r2, [pc, #36]	@ (8003204 <HAL_RCC_GetHCLKFreq+0x54>)
 80031de:	5cd3      	ldrb	r3, [r2, r3]
 80031e0:	f003 031f 	and.w	r3, r3, #31
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ea:	4a07      	ldr	r2, [pc, #28]	@ (8003208 <HAL_RCC_GetHCLKFreq+0x58>)
 80031ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031ee:	4a07      	ldr	r2, [pc, #28]	@ (800320c <HAL_RCC_GetHCLKFreq+0x5c>)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80031f4:	4b04      	ldr	r3, [pc, #16]	@ (8003208 <HAL_RCC_GetHCLKFreq+0x58>)
 80031f6:	681b      	ldr	r3, [r3, #0]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	58024400 	.word	0x58024400
 8003204:	0800c79c 	.word	0x0800c79c
 8003208:	24000004 	.word	0x24000004
 800320c:	24000000 	.word	0x24000000

08003210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003214:	f7ff ffcc 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 8003218:	4602      	mov	r2, r0
 800321a:	4b06      	ldr	r3, [pc, #24]	@ (8003234 <HAL_RCC_GetPCLK1Freq+0x24>)
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	091b      	lsrs	r3, r3, #4
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	4904      	ldr	r1, [pc, #16]	@ (8003238 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003226:	5ccb      	ldrb	r3, [r1, r3]
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003230:	4618      	mov	r0, r3
 8003232:	bd80      	pop	{r7, pc}
 8003234:	58024400 	.word	0x58024400
 8003238:	0800c79c 	.word	0x0800c79c

0800323c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003240:	f7ff ffb6 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 8003244:	4602      	mov	r2, r0
 8003246:	4b06      	ldr	r3, [pc, #24]	@ (8003260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	0a1b      	lsrs	r3, r3, #8
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	4904      	ldr	r1, [pc, #16]	@ (8003264 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003252:	5ccb      	ldrb	r3, [r1, r3]
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800325c:	4618      	mov	r0, r3
 800325e:	bd80      	pop	{r7, pc}
 8003260:	58024400 	.word	0x58024400
 8003264:	0800c79c 	.word	0x0800c79c

08003268 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	223f      	movs	r2, #63	@ 0x3f
 8003276:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003278:	4b1a      	ldr	r3, [pc, #104]	@ (80032e4 <HAL_RCC_GetClockConfig+0x7c>)
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	f003 0207 	and.w	r2, r3, #7
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003284:	4b17      	ldr	r3, [pc, #92]	@ (80032e4 <HAL_RCC_GetClockConfig+0x7c>)
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003290:	4b14      	ldr	r3, [pc, #80]	@ (80032e4 <HAL_RCC_GetClockConfig+0x7c>)
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	f003 020f 	and.w	r2, r3, #15
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800329c:	4b11      	ldr	r3, [pc, #68]	@ (80032e4 <HAL_RCC_GetClockConfig+0x7c>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80032a8:	4b0e      	ldr	r3, [pc, #56]	@ (80032e4 <HAL_RCC_GetClockConfig+0x7c>)
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80032b4:	4b0b      	ldr	r3, [pc, #44]	@ (80032e4 <HAL_RCC_GetClockConfig+0x7c>)
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80032c0:	4b08      	ldr	r3, [pc, #32]	@ (80032e4 <HAL_RCC_GetClockConfig+0x7c>)
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032cc:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <HAL_RCC_GetClockConfig+0x80>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 020f 	and.w	r2, r3, #15
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	601a      	str	r2, [r3, #0]
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	58024400 	.word	0x58024400
 80032e8:	52002000 	.word	0x52002000

080032ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032f0:	b0cc      	sub	sp, #304	@ 0x130
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032f8:	2300      	movs	r3, #0
 80032fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032fe:	2300      	movs	r3, #0
 8003300:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003304:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003310:	2500      	movs	r5, #0
 8003312:	ea54 0305 	orrs.w	r3, r4, r5
 8003316:	d049      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003318:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800331c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800331e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003322:	d02f      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003324:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003328:	d828      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800332a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800332e:	d01a      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003330:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003334:	d822      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800333a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800333e:	d007      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003340:	e01c      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003342:	4bb8      	ldr	r3, [pc, #736]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003346:	4ab7      	ldr	r2, [pc, #732]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800334c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800334e:	e01a      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003350:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003354:	3308      	adds	r3, #8
 8003356:	2102      	movs	r1, #2
 8003358:	4618      	mov	r0, r3
 800335a:	f001 fccf 	bl	8004cfc <RCCEx_PLL2_Config>
 800335e:	4603      	mov	r3, r0
 8003360:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003364:	e00f      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003366:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800336a:	3328      	adds	r3, #40	@ 0x28
 800336c:	2102      	movs	r1, #2
 800336e:	4618      	mov	r0, r3
 8003370:	f001 fd76 	bl	8004e60 <RCCEx_PLL3_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800337a:	e004      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003382:	e000      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003386:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10a      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800338e:	4ba5      	ldr	r3, [pc, #660]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003392:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003396:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800339a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800339c:	4aa1      	ldr	r2, [pc, #644]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800339e:	430b      	orrs	r3, r1
 80033a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80033a2:	e003      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033a8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80033b8:	f04f 0900 	mov.w	r9, #0
 80033bc:	ea58 0309 	orrs.w	r3, r8, r9
 80033c0:	d047      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80033c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d82a      	bhi.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80033cc:	a201      	add	r2, pc, #4	@ (adr r2, 80033d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80033ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d2:	bf00      	nop
 80033d4:	080033e9 	.word	0x080033e9
 80033d8:	080033f7 	.word	0x080033f7
 80033dc:	0800340d 	.word	0x0800340d
 80033e0:	0800342b 	.word	0x0800342b
 80033e4:	0800342b 	.word	0x0800342b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033e8:	4b8e      	ldr	r3, [pc, #568]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ec:	4a8d      	ldr	r2, [pc, #564]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033f4:	e01a      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033fa:	3308      	adds	r3, #8
 80033fc:	2100      	movs	r1, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 fc7c 	bl	8004cfc <RCCEx_PLL2_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800340a:	e00f      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800340c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003410:	3328      	adds	r3, #40	@ 0x28
 8003412:	2100      	movs	r1, #0
 8003414:	4618      	mov	r0, r3
 8003416:	f001 fd23 	bl	8004e60 <RCCEx_PLL3_Config>
 800341a:	4603      	mov	r3, r0
 800341c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003420:	e004      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003428:	e000      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800342a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800342c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10a      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003434:	4b7b      	ldr	r3, [pc, #492]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003438:	f023 0107 	bic.w	r1, r3, #7
 800343c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003442:	4a78      	ldr	r2, [pc, #480]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003444:	430b      	orrs	r3, r1
 8003446:	6513      	str	r3, [r2, #80]	@ 0x50
 8003448:	e003      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800344e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003452:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800345e:	f04f 0b00 	mov.w	fp, #0
 8003462:	ea5a 030b 	orrs.w	r3, sl, fp
 8003466:	d04c      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003468:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800346c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800346e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003472:	d030      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003478:	d829      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800347a:	2bc0      	cmp	r3, #192	@ 0xc0
 800347c:	d02d      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800347e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003480:	d825      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003482:	2b80      	cmp	r3, #128	@ 0x80
 8003484:	d018      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003486:	2b80      	cmp	r3, #128	@ 0x80
 8003488:	d821      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800348e:	2b40      	cmp	r3, #64	@ 0x40
 8003490:	d007      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003492:	e01c      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003494:	4b63      	ldr	r3, [pc, #396]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003498:	4a62      	ldr	r2, [pc, #392]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800349a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800349e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034a0:	e01c      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034a6:	3308      	adds	r3, #8
 80034a8:	2100      	movs	r1, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	f001 fc26 	bl	8004cfc <RCCEx_PLL2_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034b6:	e011      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034bc:	3328      	adds	r3, #40	@ 0x28
 80034be:	2100      	movs	r1, #0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f001 fccd 	bl	8004e60 <RCCEx_PLL3_Config>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034cc:	e006      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80034d4:	e002      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034d6:	bf00      	nop
 80034d8:	e000      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10a      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80034e4:	4b4f      	ldr	r3, [pc, #316]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80034ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f2:	4a4c      	ldr	r2, [pc, #304]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034f4:	430b      	orrs	r3, r1
 80034f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80034f8:	e003      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003502:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800350e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003512:	2300      	movs	r3, #0
 8003514:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003518:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800351c:	460b      	mov	r3, r1
 800351e:	4313      	orrs	r3, r2
 8003520:	d053      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003522:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003526:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800352a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800352e:	d035      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003530:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003534:	d82e      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003536:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800353a:	d031      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800353c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003540:	d828      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003542:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003546:	d01a      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003548:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800354c:	d822      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003552:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003556:	d007      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003558:	e01c      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800355a:	4b32      	ldr	r3, [pc, #200]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800355c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355e:	4a31      	ldr	r2, [pc, #196]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003564:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003566:	e01c      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003568:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800356c:	3308      	adds	r3, #8
 800356e:	2100      	movs	r1, #0
 8003570:	4618      	mov	r0, r3
 8003572:	f001 fbc3 	bl	8004cfc <RCCEx_PLL2_Config>
 8003576:	4603      	mov	r3, r0
 8003578:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800357c:	e011      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800357e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003582:	3328      	adds	r3, #40	@ 0x28
 8003584:	2100      	movs	r1, #0
 8003586:	4618      	mov	r0, r3
 8003588:	f001 fc6a 	bl	8004e60 <RCCEx_PLL3_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003592:	e006      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800359a:	e002      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800359c:	bf00      	nop
 800359e:	e000      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80035a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10b      	bne.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80035aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ae:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80035b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035bc:	430b      	orrs	r3, r1
 80035be:	6593      	str	r3, [r2, #88]	@ 0x58
 80035c0:	e003      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035c6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80035d6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80035da:	2300      	movs	r3, #0
 80035dc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80035e0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80035e4:	460b      	mov	r3, r1
 80035e6:	4313      	orrs	r3, r2
 80035e8:	d056      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80035ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80035f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035f6:	d038      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80035f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035fc:	d831      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003602:	d034      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003604:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003608:	d82b      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800360a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800360e:	d01d      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003610:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003614:	d825      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d006      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800361a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003620:	e01f      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003622:	bf00      	nop
 8003624:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003628:	4ba2      	ldr	r3, [pc, #648]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800362a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362c:	4aa1      	ldr	r2, [pc, #644]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800362e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003632:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003634:	e01c      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003636:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800363a:	3308      	adds	r3, #8
 800363c:	2100      	movs	r1, #0
 800363e:	4618      	mov	r0, r3
 8003640:	f001 fb5c 	bl	8004cfc <RCCEx_PLL2_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800364a:	e011      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800364c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003650:	3328      	adds	r3, #40	@ 0x28
 8003652:	2100      	movs	r1, #0
 8003654:	4618      	mov	r0, r3
 8003656:	f001 fc03 	bl	8004e60 <RCCEx_PLL3_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003660:	e006      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003668:	e002      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800366e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003670:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10b      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003678:	4b8e      	ldr	r3, [pc, #568]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800367a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003680:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003684:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003688:	4a8a      	ldr	r2, [pc, #552]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800368a:	430b      	orrs	r3, r1
 800368c:	6593      	str	r3, [r2, #88]	@ 0x58
 800368e:	e003      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003690:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003694:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003698:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80036a4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80036a8:	2300      	movs	r3, #0
 80036aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80036ae:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80036b2:	460b      	mov	r3, r1
 80036b4:	4313      	orrs	r3, r2
 80036b6:	d03a      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80036b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036be:	2b30      	cmp	r3, #48	@ 0x30
 80036c0:	d01f      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80036c2:	2b30      	cmp	r3, #48	@ 0x30
 80036c4:	d819      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d00c      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	d815      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d019      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80036d2:	2b10      	cmp	r3, #16
 80036d4:	d111      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d6:	4b77      	ldr	r3, [pc, #476]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036da:	4a76      	ldr	r2, [pc, #472]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036e2:	e011      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036e8:	3308      	adds	r3, #8
 80036ea:	2102      	movs	r1, #2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f001 fb05 	bl	8004cfc <RCCEx_PLL2_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036f8:	e006      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003700:	e002      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003702:	bf00      	nop
 8003704:	e000      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003708:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10a      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003710:	4b68      	ldr	r3, [pc, #416]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003714:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003718:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800371c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371e:	4a65      	ldr	r2, [pc, #404]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003720:	430b      	orrs	r3, r1
 8003722:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003724:	e003      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003726:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800372a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800372e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003736:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800373a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800373e:	2300      	movs	r3, #0
 8003740:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003744:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003748:	460b      	mov	r3, r1
 800374a:	4313      	orrs	r3, r2
 800374c:	d051      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800374e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003752:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003754:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003758:	d035      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800375a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800375e:	d82e      	bhi.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003760:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003764:	d031      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003766:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800376a:	d828      	bhi.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800376c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003770:	d01a      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003776:	d822      	bhi.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800377c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003780:	d007      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003782:	e01c      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003784:	4b4b      	ldr	r3, [pc, #300]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003788:	4a4a      	ldr	r2, [pc, #296]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800378a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800378e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003790:	e01c      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003792:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003796:	3308      	adds	r3, #8
 8003798:	2100      	movs	r1, #0
 800379a:	4618      	mov	r0, r3
 800379c:	f001 faae 	bl	8004cfc <RCCEx_PLL2_Config>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037a6:	e011      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037ac:	3328      	adds	r3, #40	@ 0x28
 80037ae:	2100      	movs	r1, #0
 80037b0:	4618      	mov	r0, r3
 80037b2:	f001 fb55 	bl	8004e60 <RCCEx_PLL3_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037bc:	e006      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80037c4:	e002      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037c6:	bf00      	nop
 80037c8:	e000      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10a      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037d4:	4b37      	ldr	r3, [pc, #220]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80037dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037e2:	4a34      	ldr	r2, [pc, #208]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037e4:	430b      	orrs	r3, r1
 80037e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80037e8:	e003      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80037ee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80037fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003802:	2300      	movs	r3, #0
 8003804:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003808:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800380c:	460b      	mov	r3, r1
 800380e:	4313      	orrs	r3, r2
 8003810:	d056      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003812:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003816:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003818:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800381c:	d033      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800381e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003822:	d82c      	bhi.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003824:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003828:	d02f      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800382a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800382e:	d826      	bhi.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003830:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003834:	d02b      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003836:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800383a:	d820      	bhi.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800383c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003840:	d012      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003842:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003846:	d81a      	bhi.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003848:	2b00      	cmp	r3, #0
 800384a:	d022      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003850:	d115      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003852:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003856:	3308      	adds	r3, #8
 8003858:	2101      	movs	r1, #1
 800385a:	4618      	mov	r0, r3
 800385c:	f001 fa4e 	bl	8004cfc <RCCEx_PLL2_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003866:	e015      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003868:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800386c:	3328      	adds	r3, #40	@ 0x28
 800386e:	2101      	movs	r1, #1
 8003870:	4618      	mov	r0, r3
 8003872:	f001 faf5 	bl	8004e60 <RCCEx_PLL3_Config>
 8003876:	4603      	mov	r3, r0
 8003878:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800387c:	e00a      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003884:	e006      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003886:	bf00      	nop
 8003888:	e004      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800388a:	bf00      	nop
 800388c:	e002      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800388e:	bf00      	nop
 8003890:	e000      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003894:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10d      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800389c:	4b05      	ldr	r3, [pc, #20]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800389e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80038a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038aa:	4a02      	ldr	r2, [pc, #8]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ac:	430b      	orrs	r3, r1
 80038ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80038b0:	e006      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80038b2:	bf00      	nop
 80038b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038bc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80038cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038d0:	2300      	movs	r3, #0
 80038d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80038d6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80038da:	460b      	mov	r3, r1
 80038dc:	4313      	orrs	r3, r2
 80038de:	d055      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80038e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ec:	d033      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80038ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038f2:	d82c      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f8:	d02f      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80038fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038fe:	d826      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003900:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003904:	d02b      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003906:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800390a:	d820      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800390c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003910:	d012      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003912:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003916:	d81a      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d022      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800391c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003920:	d115      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003922:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003926:	3308      	adds	r3, #8
 8003928:	2101      	movs	r1, #1
 800392a:	4618      	mov	r0, r3
 800392c:	f001 f9e6 	bl	8004cfc <RCCEx_PLL2_Config>
 8003930:	4603      	mov	r3, r0
 8003932:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003936:	e015      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003938:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800393c:	3328      	adds	r3, #40	@ 0x28
 800393e:	2101      	movs	r1, #1
 8003940:	4618      	mov	r0, r3
 8003942:	f001 fa8d 	bl	8004e60 <RCCEx_PLL3_Config>
 8003946:	4603      	mov	r3, r0
 8003948:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800394c:	e00a      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003954:	e006      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003956:	bf00      	nop
 8003958:	e004      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800395a:	bf00      	nop
 800395c:	e002      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800395e:	bf00      	nop
 8003960:	e000      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003964:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10b      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800396c:	4bb6      	ldr	r3, [pc, #728]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800396e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003970:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003974:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003978:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800397c:	4ab2      	ldr	r2, [pc, #712]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800397e:	430b      	orrs	r3, r1
 8003980:	6593      	str	r3, [r2, #88]	@ 0x58
 8003982:	e003      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003984:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003988:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800398c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003994:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003998:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800399c:	2300      	movs	r3, #0
 800399e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80039a2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4313      	orrs	r3, r2
 80039aa:	d02a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80039ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d011      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80039b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039ba:	d10a      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039c0:	3308      	adds	r3, #8
 80039c2:	2101      	movs	r1, #1
 80039c4:	4618      	mov	r0, r3
 80039c6:	f001 f999 	bl	8004cfc <RCCEx_PLL2_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80039d0:	e004      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80039d8:	e000      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80039da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10a      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80039e4:	4b98      	ldr	r3, [pc, #608]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80039e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80039ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039f2:	4a95      	ldr	r2, [pc, #596]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80039f4:	430b      	orrs	r3, r1
 80039f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039f8:	e003      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003a0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a12:	2300      	movs	r3, #0
 8003a14:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003a18:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	d037      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a2c:	d00e      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x760>
 8003a2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a32:	d816      	bhi.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d018      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8003a38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a3c:	d111      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a3e:	4b82      	ldr	r3, [pc, #520]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a42:	4a81      	ldr	r2, [pc, #516]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a4a:	e00f      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a50:	3308      	adds	r3, #8
 8003a52:	2101      	movs	r1, #1
 8003a54:	4618      	mov	r0, r3
 8003a56:	f001 f951 	bl	8004cfc <RCCEx_PLL2_Config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a60:	e004      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003a68:	e000      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8003a6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a6c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10a      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a74:	4b74      	ldr	r3, [pc, #464]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a78:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a82:	4a71      	ldr	r2, [pc, #452]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a88:	e003      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a8e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003a9e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003aa8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	d03a      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003ab2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ab6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d81d      	bhi.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8003abc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac2:	bf00      	nop
 8003ac4:	08003b01 	.word	0x08003b01
 8003ac8:	08003ad5 	.word	0x08003ad5
 8003acc:	08003ae3 	.word	0x08003ae3
 8003ad0:	08003b01 	.word	0x08003b01
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad4:	4b5c      	ldr	r3, [pc, #368]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad8:	4a5b      	ldr	r2, [pc, #364]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ada:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ade:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ae0:	e00f      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ae2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ae6:	3308      	adds	r3, #8
 8003ae8:	2102      	movs	r1, #2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f001 f906 	bl	8004cfc <RCCEx_PLL2_Config>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003af6:	e004      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003afe:	e000      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8003b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10a      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b0a:	4b4f      	ldr	r3, [pc, #316]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b0e:	f023 0103 	bic.w	r1, r3, #3
 8003b12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b18:	4a4b      	ldr	r2, [pc, #300]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b1e:	e003      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b20:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b24:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b30:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003b34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b3e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003b42:	460b      	mov	r3, r1
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f000 80a0 	beq.w	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b4a:	4b40      	ldr	r3, [pc, #256]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a3f      	ldr	r2, [pc, #252]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003b50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b56:	f7fd ffd1 	bl	8001afc <HAL_GetTick>
 8003b5a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b5e:	e00b      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b60:	f7fd ffcc 	bl	8001afc <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b64      	cmp	r3, #100	@ 0x64
 8003b6e:	d903      	bls.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003b76:	e005      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b78:	4b34      	ldr	r3, [pc, #208]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0ed      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8003b84:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d17a      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b8c:	4b2e      	ldr	r3, [pc, #184]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003b8e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003b98:	4053      	eors	r3, r2
 8003b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d015      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ba2:	4b29      	ldr	r3, [pc, #164]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003baa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bae:	4b26      	ldr	r3, [pc, #152]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb2:	4a25      	ldr	r2, [pc, #148]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bb8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bba:	4b23      	ldr	r3, [pc, #140]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bbe:	4a22      	ldr	r2, [pc, #136]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003bc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bc4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003bc6:	4a20      	ldr	r2, [pc, #128]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003bc8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003bcc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003bce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bd2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003bd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bda:	d118      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bdc:	f7fd ff8e 	bl	8001afc <HAL_GetTick>
 8003be0:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003be4:	e00d      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be6:	f7fd ff89 	bl	8001afc <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003bf0:	1ad2      	subs	r2, r2, r3
 8003bf2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d903      	bls.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8003c00:	e005      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c02:	4b11      	ldr	r3, [pc, #68]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0eb      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8003c0e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d130      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c1a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003c1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c26:	d115      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8003c28:	4b07      	ldr	r3, [pc, #28]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003c30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003c38:	091a      	lsrs	r2, r3, #4
 8003c3a:	4b05      	ldr	r3, [pc, #20]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	4a02      	ldr	r2, [pc, #8]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c40:	430b      	orrs	r3, r1
 8003c42:	6113      	str	r3, [r2, #16]
 8003c44:	e00c      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8003c46:	bf00      	nop
 8003c48:	58024400 	.word	0x58024400
 8003c4c:	58024800 	.word	0x58024800
 8003c50:	00ffffcf 	.word	0x00ffffcf
 8003c54:	4bd4      	ldr	r3, [pc, #848]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	4ad3      	ldr	r2, [pc, #844]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003c5a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c5e:	6113      	str	r3, [r2, #16]
 8003c60:	4bd1      	ldr	r3, [pc, #836]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003c62:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003c64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c70:	4acd      	ldr	r2, [pc, #820]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003c72:	430b      	orrs	r3, r1
 8003c74:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c76:	e008      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c78:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c7c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8003c80:	e003      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c86:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	f002 0301 	and.w	r3, r2, #1
 8003c96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ca0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f000 808b 	beq.w	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003cac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cb4:	2b28      	cmp	r3, #40	@ 0x28
 8003cb6:	d86b      	bhi.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbe:	bf00      	nop
 8003cc0:	08003d99 	.word	0x08003d99
 8003cc4:	08003d91 	.word	0x08003d91
 8003cc8:	08003d91 	.word	0x08003d91
 8003ccc:	08003d91 	.word	0x08003d91
 8003cd0:	08003d91 	.word	0x08003d91
 8003cd4:	08003d91 	.word	0x08003d91
 8003cd8:	08003d91 	.word	0x08003d91
 8003cdc:	08003d91 	.word	0x08003d91
 8003ce0:	08003d65 	.word	0x08003d65
 8003ce4:	08003d91 	.word	0x08003d91
 8003ce8:	08003d91 	.word	0x08003d91
 8003cec:	08003d91 	.word	0x08003d91
 8003cf0:	08003d91 	.word	0x08003d91
 8003cf4:	08003d91 	.word	0x08003d91
 8003cf8:	08003d91 	.word	0x08003d91
 8003cfc:	08003d91 	.word	0x08003d91
 8003d00:	08003d7b 	.word	0x08003d7b
 8003d04:	08003d91 	.word	0x08003d91
 8003d08:	08003d91 	.word	0x08003d91
 8003d0c:	08003d91 	.word	0x08003d91
 8003d10:	08003d91 	.word	0x08003d91
 8003d14:	08003d91 	.word	0x08003d91
 8003d18:	08003d91 	.word	0x08003d91
 8003d1c:	08003d91 	.word	0x08003d91
 8003d20:	08003d99 	.word	0x08003d99
 8003d24:	08003d91 	.word	0x08003d91
 8003d28:	08003d91 	.word	0x08003d91
 8003d2c:	08003d91 	.word	0x08003d91
 8003d30:	08003d91 	.word	0x08003d91
 8003d34:	08003d91 	.word	0x08003d91
 8003d38:	08003d91 	.word	0x08003d91
 8003d3c:	08003d91 	.word	0x08003d91
 8003d40:	08003d99 	.word	0x08003d99
 8003d44:	08003d91 	.word	0x08003d91
 8003d48:	08003d91 	.word	0x08003d91
 8003d4c:	08003d91 	.word	0x08003d91
 8003d50:	08003d91 	.word	0x08003d91
 8003d54:	08003d91 	.word	0x08003d91
 8003d58:	08003d91 	.word	0x08003d91
 8003d5c:	08003d91 	.word	0x08003d91
 8003d60:	08003d99 	.word	0x08003d99
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d68:	3308      	adds	r3, #8
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 ffc5 	bl	8004cfc <RCCEx_PLL2_Config>
 8003d72:	4603      	mov	r3, r0
 8003d74:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d78:	e00f      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d7e:	3328      	adds	r3, #40	@ 0x28
 8003d80:	2101      	movs	r1, #1
 8003d82:	4618      	mov	r0, r3
 8003d84:	f001 f86c 	bl	8004e60 <RCCEx_PLL3_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d8e:	e004      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003d96:	e000      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8003d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d9a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10b      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003da2:	4b81      	ldr	r3, [pc, #516]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003daa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003db2:	4a7d      	ldr	r2, [pc, #500]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003db4:	430b      	orrs	r3, r1
 8003db6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003db8:	e003      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003dbe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003dc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dca:	f002 0302 	and.w	r3, r2, #2
 8003dce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003dd8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4313      	orrs	r3, r2
 8003de0:	d042      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003de2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003de6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003de8:	2b05      	cmp	r3, #5
 8003dea:	d825      	bhi.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8003dec:	a201      	add	r2, pc, #4	@ (adr r2, 8003df4 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8003dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df2:	bf00      	nop
 8003df4:	08003e41 	.word	0x08003e41
 8003df8:	08003e0d 	.word	0x08003e0d
 8003dfc:	08003e23 	.word	0x08003e23
 8003e00:	08003e41 	.word	0x08003e41
 8003e04:	08003e41 	.word	0x08003e41
 8003e08:	08003e41 	.word	0x08003e41
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e10:	3308      	adds	r3, #8
 8003e12:	2101      	movs	r1, #1
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 ff71 	bl	8004cfc <RCCEx_PLL2_Config>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e20:	e00f      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e26:	3328      	adds	r3, #40	@ 0x28
 8003e28:	2101      	movs	r1, #1
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f001 f818 	bl	8004e60 <RCCEx_PLL3_Config>
 8003e30:	4603      	mov	r3, r0
 8003e32:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e36:	e004      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003e3e:	e000      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8003e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e42:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e4a:	4b57      	ldr	r3, [pc, #348]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4e:	f023 0107 	bic.w	r1, r3, #7
 8003e52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e58:	4a53      	ldr	r2, [pc, #332]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003e5a:	430b      	orrs	r3, r1
 8003e5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e5e:	e003      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e60:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e64:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e70:	f002 0304 	and.w	r3, r2, #4
 8003e74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e7e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4313      	orrs	r3, r2
 8003e86:	d044      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e90:	2b05      	cmp	r3, #5
 8003e92:	d825      	bhi.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8003e94:	a201      	add	r2, pc, #4	@ (adr r2, 8003e9c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8003e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9a:	bf00      	nop
 8003e9c:	08003ee9 	.word	0x08003ee9
 8003ea0:	08003eb5 	.word	0x08003eb5
 8003ea4:	08003ecb 	.word	0x08003ecb
 8003ea8:	08003ee9 	.word	0x08003ee9
 8003eac:	08003ee9 	.word	0x08003ee9
 8003eb0:	08003ee9 	.word	0x08003ee9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003eb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003eb8:	3308      	adds	r3, #8
 8003eba:	2101      	movs	r1, #1
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 ff1d 	bl	8004cfc <RCCEx_PLL2_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ec8:	e00f      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003eca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ece:	3328      	adds	r3, #40	@ 0x28
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 ffc4 	bl	8004e60 <RCCEx_PLL3_Config>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ede:	e004      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003ee6:	e000      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8003ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10b      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ef2:	4b2d      	ldr	r3, [pc, #180]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef6:	f023 0107 	bic.w	r1, r3, #7
 8003efa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f02:	4a29      	ldr	r2, [pc, #164]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003f04:	430b      	orrs	r3, r1
 8003f06:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f08:	e003      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f0e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1a:	f002 0320 	and.w	r3, r2, #32
 8003f1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f22:	2300      	movs	r3, #0
 8003f24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	d057      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f3e:	d035      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8003f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f44:	d82c      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f4a:	d031      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8003f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f50:	d826      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003f52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f56:	d02d      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8003f58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f5c:	d820      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003f5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f62:	d012      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8003f64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f68:	d81a      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d024      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8003f6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f72:	d115      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f78:	3308      	adds	r3, #8
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 febd 	bl	8004cfc <RCCEx_PLL2_Config>
 8003f82:	4603      	mov	r3, r0
 8003f84:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f88:	e017      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f8e:	3328      	adds	r3, #40	@ 0x28
 8003f90:	2102      	movs	r1, #2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 ff64 	bl	8004e60 <RCCEx_PLL3_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f9e:	e00c      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003fa6:	e008      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8003fa8:	58024400 	.word	0x58024400
        break;
 8003fac:	bf00      	nop
 8003fae:	e004      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003fb0:	bf00      	nop
 8003fb2:	e002      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003fb4:	bf00      	nop
 8003fb6:	e000      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10b      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fc2:	4bc2      	ldr	r3, [pc, #776]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003fca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fd2:	4abe      	ldr	r2, [pc, #760]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fd8:	e003      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fda:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003fde:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fe2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003fee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003ff8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4313      	orrs	r3, r2
 8004000:	d055      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004002:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004006:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800400a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800400e:	d033      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8004010:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004014:	d82c      	bhi.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800401a:	d02f      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 800401c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004020:	d826      	bhi.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004022:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004026:	d02b      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8004028:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800402c:	d820      	bhi.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800402e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004032:	d012      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8004034:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004038:	d81a      	bhi.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800403a:	2b00      	cmp	r3, #0
 800403c:	d022      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800403e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004042:	d115      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004044:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004048:	3308      	adds	r3, #8
 800404a:	2100      	movs	r1, #0
 800404c:	4618      	mov	r0, r3
 800404e:	f000 fe55 	bl	8004cfc <RCCEx_PLL2_Config>
 8004052:	4603      	mov	r3, r0
 8004054:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004058:	e015      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800405a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800405e:	3328      	adds	r3, #40	@ 0x28
 8004060:	2102      	movs	r1, #2
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fefc 	bl	8004e60 <RCCEx_PLL3_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800406e:	e00a      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004076:	e006      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004078:	bf00      	nop
 800407a:	e004      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800407c:	bf00      	nop
 800407e:	e002      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004080:	bf00      	nop
 8004082:	e000      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004084:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004086:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10b      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800408e:	4b8f      	ldr	r3, [pc, #572]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004092:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004096:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800409a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800409e:	4a8b      	ldr	r2, [pc, #556]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040a0:	430b      	orrs	r3, r1
 80040a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80040a4:	e003      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80040aa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b6:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80040ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040be:	2300      	movs	r3, #0
 80040c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040c4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80040c8:	460b      	mov	r3, r1
 80040ca:	4313      	orrs	r3, r2
 80040cc:	d055      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80040ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80040d6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040da:	d033      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80040dc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040e0:	d82c      	bhi.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80040e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040e6:	d02f      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80040e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040ec:	d826      	bhi.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80040ee:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80040f2:	d02b      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80040f4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80040f8:	d820      	bhi.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80040fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040fe:	d012      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8004100:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004104:	d81a      	bhi.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004106:	2b00      	cmp	r3, #0
 8004108:	d022      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 800410a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800410e:	d115      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004110:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004114:	3308      	adds	r3, #8
 8004116:	2100      	movs	r1, #0
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fdef 	bl	8004cfc <RCCEx_PLL2_Config>
 800411e:	4603      	mov	r3, r0
 8004120:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004124:	e015      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004126:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800412a:	3328      	adds	r3, #40	@ 0x28
 800412c:	2102      	movs	r1, #2
 800412e:	4618      	mov	r0, r3
 8004130:	f000 fe96 	bl	8004e60 <RCCEx_PLL3_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800413a:	e00a      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004142:	e006      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004144:	bf00      	nop
 8004146:	e004      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004148:	bf00      	nop
 800414a:	e002      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800414c:	bf00      	nop
 800414e:	e000      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004150:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004152:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10b      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800415a:	4b5c      	ldr	r3, [pc, #368]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800415c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415e:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004162:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004166:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800416a:	4a58      	ldr	r2, [pc, #352]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800416c:	430b      	orrs	r3, r1
 800416e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004170:	e003      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004172:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004176:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800417a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004182:	f002 0308 	and.w	r3, r2, #8
 8004186:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800418a:	2300      	movs	r3, #0
 800418c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004190:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004194:	460b      	mov	r3, r1
 8004196:	4313      	orrs	r3, r2
 8004198:	d01e      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800419a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800419e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a6:	d10c      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041ac:	3328      	adds	r3, #40	@ 0x28
 80041ae:	2102      	movs	r1, #2
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fe55 	bl	8004e60 <RCCEx_PLL3_Config>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80041c2:	4b42      	ldr	r3, [pc, #264]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d2:	4a3e      	ldr	r2, [pc, #248]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e0:	f002 0310 	and.w	r3, r2, #16
 80041e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041e8:	2300      	movs	r3, #0
 80041ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80041ee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80041f2:	460b      	mov	r3, r1
 80041f4:	4313      	orrs	r3, r2
 80041f6:	d01e      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80041f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004200:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004204:	d10c      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004206:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800420a:	3328      	adds	r3, #40	@ 0x28
 800420c:	2102      	movs	r1, #2
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fe26 	bl	8004e60 <RCCEx_PLL3_Config>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004220:	4b2a      	ldr	r3, [pc, #168]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004224:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004228:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800422c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004230:	4a26      	ldr	r2, [pc, #152]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004232:	430b      	orrs	r3, r1
 8004234:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004236:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800423a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004242:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004246:	2300      	movs	r3, #0
 8004248:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800424c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004250:	460b      	mov	r3, r1
 8004252:	4313      	orrs	r3, r2
 8004254:	d040      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004256:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800425a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800425e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004262:	d022      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8004264:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004268:	d81b      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800426e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004272:	d00b      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8004274:	e015      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004276:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800427a:	3308      	adds	r3, #8
 800427c:	2100      	movs	r1, #0
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fd3c 	bl	8004cfc <RCCEx_PLL2_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800428a:	e00f      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800428c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004290:	3328      	adds	r3, #40	@ 0x28
 8004292:	2102      	movs	r1, #2
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fde3 	bl	8004e60 <RCCEx_PLL3_Config>
 800429a:	4603      	mov	r3, r0
 800429c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042a0:	e004      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80042a8:	e000      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80042aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10d      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042b4:	4b05      	ldr	r3, [pc, #20]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80042bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80042c4:	4a01      	ldr	r2, [pc, #4]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042c6:	430b      	orrs	r3, r1
 80042c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80042ca:	e005      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80042cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80042d4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80042e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042e6:	2300      	movs	r3, #0
 80042e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80042ea:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80042ee:	460b      	mov	r3, r1
 80042f0:	4313      	orrs	r3, r2
 80042f2:	d03b      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80042f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004300:	d01f      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8004302:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004306:	d818      	bhi.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8004308:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800430c:	d003      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800430e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004312:	d007      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8004314:	e011      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004316:	4b64      	ldr	r3, [pc, #400]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431a:	4a63      	ldr	r2, [pc, #396]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800431c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004320:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004322:	e00f      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004324:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004328:	3328      	adds	r3, #40	@ 0x28
 800432a:	2101      	movs	r1, #1
 800432c:	4618      	mov	r0, r3
 800432e:	f000 fd97 	bl	8004e60 <RCCEx_PLL3_Config>
 8004332:	4603      	mov	r3, r0
 8004334:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004338:	e004      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004340:	e000      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8004342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004344:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10b      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800434c:	4b56      	ldr	r3, [pc, #344]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800434e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004350:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004354:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800435c:	4a52      	ldr	r2, [pc, #328]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800435e:	430b      	orrs	r3, r1
 8004360:	6553      	str	r3, [r2, #84]	@ 0x54
 8004362:	e003      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004364:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004368:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800436c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004374:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004378:	673b      	str	r3, [r7, #112]	@ 0x70
 800437a:	2300      	movs	r3, #0
 800437c:	677b      	str	r3, [r7, #116]	@ 0x74
 800437e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004382:	460b      	mov	r3, r1
 8004384:	4313      	orrs	r3, r2
 8004386:	d031      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004388:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800438c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8004392:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004396:	d007      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004398:	e011      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800439a:	4b43      	ldr	r3, [pc, #268]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800439c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439e:	4a42      	ldr	r2, [pc, #264]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80043a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043a6:	e00e      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043ac:	3308      	adds	r3, #8
 80043ae:	2102      	movs	r1, #2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 fca3 	bl	8004cfc <RCCEx_PLL2_Config>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043bc:	e003      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80043c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10a      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80043ce:	4b36      	ldr	r3, [pc, #216]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80043d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80043d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043dc:	4a32      	ldr	r2, [pc, #200]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80043de:	430b      	orrs	r3, r1
 80043e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043e2:	e003      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80043e8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80043f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043fa:	2300      	movs	r3, #0
 80043fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043fe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004402:	460b      	mov	r3, r1
 8004404:	4313      	orrs	r3, r2
 8004406:	d00c      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004408:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800440c:	3328      	adds	r3, #40	@ 0x28
 800440e:	2102      	movs	r1, #2
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fd25 	bl	8004e60 <RCCEx_PLL3_Config>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004422:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800442e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004430:	2300      	movs	r3, #0
 8004432:	667b      	str	r3, [r7, #100]	@ 0x64
 8004434:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004438:	460b      	mov	r3, r1
 800443a:	4313      	orrs	r3, r2
 800443c:	d03a      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800443e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004442:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004446:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800444a:	d018      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 800444c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004450:	d811      	bhi.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8004452:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004456:	d014      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8004458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800445c:	d80b      	bhi.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800445e:	2b00      	cmp	r3, #0
 8004460:	d011      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8004462:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004466:	d106      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004468:	4b0f      	ldr	r3, [pc, #60]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800446a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446c:	4a0e      	ldr	r2, [pc, #56]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800446e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004472:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004474:	e008      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800447c:	e004      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800447e:	bf00      	nop
 8004480:	e002      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004482:	bf00      	nop
 8004484:	e000      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004486:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004488:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10d      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004490:	4b05      	ldr	r3, [pc, #20]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004494:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004498:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800449c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044a0:	4a01      	ldr	r2, [pc, #4]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80044a2:	430b      	orrs	r3, r1
 80044a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80044a6:	e005      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80044a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80044b0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80044c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044c2:	2300      	movs	r3, #0
 80044c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80044ca:	460b      	mov	r3, r1
 80044cc:	4313      	orrs	r3, r2
 80044ce:	d009      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044d0:	4baa      	ldr	r3, [pc, #680]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80044d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80044d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044de:	4aa7      	ldr	r2, [pc, #668]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80044e0:	430b      	orrs	r3, r1
 80044e2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80044e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80044f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80044f2:	2300      	movs	r3, #0
 80044f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80044f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80044fa:	460b      	mov	r3, r1
 80044fc:	4313      	orrs	r3, r2
 80044fe:	d00a      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004500:	4b9e      	ldr	r3, [pc, #632]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004508:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800450c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004510:	4a9a      	ldr	r2, [pc, #616]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004512:	430b      	orrs	r3, r1
 8004514:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004516:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004522:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004524:	2300      	movs	r3, #0
 8004526:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004528:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800452c:	460b      	mov	r3, r1
 800452e:	4313      	orrs	r3, r2
 8004530:	d009      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004532:	4b92      	ldr	r3, [pc, #584]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004536:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800453a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800453e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004540:	4a8e      	ldr	r2, [pc, #568]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004542:	430b      	orrs	r3, r1
 8004544:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004546:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800454a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004552:	643b      	str	r3, [r7, #64]	@ 0x40
 8004554:	2300      	movs	r3, #0
 8004556:	647b      	str	r3, [r7, #68]	@ 0x44
 8004558:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800455c:	460b      	mov	r3, r1
 800455e:	4313      	orrs	r3, r2
 8004560:	d00e      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004562:	4b86      	ldr	r3, [pc, #536]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	4a85      	ldr	r2, [pc, #532]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004568:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800456c:	6113      	str	r3, [r2, #16]
 800456e:	4b83      	ldr	r3, [pc, #524]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004570:	6919      	ldr	r1, [r3, #16]
 8004572:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004576:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800457a:	4a80      	ldr	r2, [pc, #512]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800457c:	430b      	orrs	r3, r1
 800457e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004580:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004588:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800458c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800458e:	2300      	movs	r3, #0
 8004590:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004592:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004596:	460b      	mov	r3, r1
 8004598:	4313      	orrs	r3, r2
 800459a:	d009      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800459c:	4b77      	ldr	r3, [pc, #476]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800459e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045a0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80045a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045aa:	4a74      	ldr	r2, [pc, #464]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80045ac:	430b      	orrs	r3, r1
 80045ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80045bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80045be:	2300      	movs	r3, #0
 80045c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80045c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80045c6:	460b      	mov	r3, r1
 80045c8:	4313      	orrs	r3, r2
 80045ca:	d00a      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045cc:	4b6b      	ldr	r3, [pc, #428]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80045ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80045d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045dc:	4a67      	ldr	r2, [pc, #412]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80045de:	430b      	orrs	r3, r1
 80045e0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80045e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ea:	2100      	movs	r1, #0
 80045ec:	62b9      	str	r1, [r7, #40]	@ 0x28
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045f4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80045f8:	460b      	mov	r3, r1
 80045fa:	4313      	orrs	r3, r2
 80045fc:	d011      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004602:	3308      	adds	r3, #8
 8004604:	2100      	movs	r1, #0
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fb78 	bl	8004cfc <RCCEx_PLL2_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004612:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800461e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004622:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	2100      	movs	r1, #0
 800462c:	6239      	str	r1, [r7, #32]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	627b      	str	r3, [r7, #36]	@ 0x24
 8004634:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004638:	460b      	mov	r3, r1
 800463a:	4313      	orrs	r3, r2
 800463c:	d011      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800463e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004642:	3308      	adds	r3, #8
 8004644:	2101      	movs	r1, #1
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fb58 	bl	8004cfc <RCCEx_PLL2_Config>
 800464c:	4603      	mov	r3, r0
 800464e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004652:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800465e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004662:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466a:	2100      	movs	r1, #0
 800466c:	61b9      	str	r1, [r7, #24]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	61fb      	str	r3, [r7, #28]
 8004674:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004678:	460b      	mov	r3, r1
 800467a:	4313      	orrs	r3, r2
 800467c:	d011      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800467e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004682:	3308      	adds	r3, #8
 8004684:	2102      	movs	r1, #2
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fb38 	bl	8004cfc <RCCEx_PLL2_Config>
 800468c:	4603      	mov	r3, r0
 800468e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004692:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800469e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80046a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046aa:	2100      	movs	r1, #0
 80046ac:	6139      	str	r1, [r7, #16]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80046b8:	460b      	mov	r3, r1
 80046ba:	4313      	orrs	r3, r2
 80046bc:	d011      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046c2:	3328      	adds	r3, #40	@ 0x28
 80046c4:	2100      	movs	r1, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fbca 	bl	8004e60 <RCCEx_PLL3_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80046d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80046e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ea:	2100      	movs	r1, #0
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	f003 0310 	and.w	r3, r3, #16
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80046f8:	460b      	mov	r3, r1
 80046fa:	4313      	orrs	r3, r2
 80046fc:	d011      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004702:	3328      	adds	r3, #40	@ 0x28
 8004704:	2101      	movs	r1, #1
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fbaa 	bl	8004e60 <RCCEx_PLL3_Config>
 800470c:	4603      	mov	r3, r0
 800470e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004712:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800471e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004722:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472a:	2100      	movs	r1, #0
 800472c:	6039      	str	r1, [r7, #0]
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	607b      	str	r3, [r7, #4]
 8004734:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004738:	460b      	mov	r3, r1
 800473a:	4313      	orrs	r3, r2
 800473c:	d011      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800473e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004742:	3328      	adds	r3, #40	@ 0x28
 8004744:	2102      	movs	r1, #2
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fb8a 	bl	8004e60 <RCCEx_PLL3_Config>
 800474c:	4603      	mov	r3, r0
 800474e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004752:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800475e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8004762:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800476a:	2300      	movs	r3, #0
 800476c:	e000      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
}
 8004770:	4618      	mov	r0, r3
 8004772:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004776:	46bd      	mov	sp, r7
 8004778:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800477c:	58024400 	.word	0x58024400

08004780 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004784:	f7fe fd14 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 8004788:	4602      	mov	r2, r0
 800478a:	4b06      	ldr	r3, [pc, #24]	@ (80047a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	091b      	lsrs	r3, r3, #4
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	4904      	ldr	r1, [pc, #16]	@ (80047a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004796:	5ccb      	ldrb	r3, [r1, r3]
 8004798:	f003 031f 	and.w	r3, r3, #31
 800479c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	58024400 	.word	0x58024400
 80047a8:	0800c79c 	.word	0x0800c79c

080047ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b089      	sub	sp, #36	@ 0x24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047b4:	4ba1      	ldr	r3, [pc, #644]	@ (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b8:	f003 0303 	and.w	r3, r3, #3
 80047bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80047be:	4b9f      	ldr	r3, [pc, #636]	@ (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c2:	0b1b      	lsrs	r3, r3, #12
 80047c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80047ca:	4b9c      	ldr	r3, [pc, #624]	@ (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ce:	091b      	lsrs	r3, r3, #4
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80047d6:	4b99      	ldr	r3, [pc, #612]	@ (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047da:	08db      	lsrs	r3, r3, #3
 80047dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	fb02 f303 	mul.w	r3, r2, r3
 80047e6:	ee07 3a90 	vmov	s15, r3
 80047ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 8111 	beq.w	8004a1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	f000 8083 	beq.w	8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	2b02      	cmp	r3, #2
 8004806:	f200 80a1 	bhi.w	800494c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d056      	beq.n	80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004816:	e099      	b.n	800494c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004818:	4b88      	ldr	r3, [pc, #544]	@ (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b00      	cmp	r3, #0
 8004822:	d02d      	beq.n	8004880 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004824:	4b85      	ldr	r3, [pc, #532]	@ (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	08db      	lsrs	r3, r3, #3
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	4a84      	ldr	r2, [pc, #528]	@ (8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
 8004834:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	ee07 3a90 	vmov	s15, r3
 800483c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800484e:	4b7b      	ldr	r3, [pc, #492]	@ (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004856:	ee07 3a90 	vmov	s15, r3
 800485a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800485e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004862:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800486a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800486e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800487e:	e087      	b.n	8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	ee07 3a90 	vmov	s15, r3
 8004886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004a48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800488e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004892:	4b6a      	ldr	r3, [pc, #424]	@ (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489a:	ee07 3a90 	vmov	s15, r3
 800489e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048c2:	e065      	b.n	8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048d6:	4b59      	ldr	r3, [pc, #356]	@ (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004906:	e043      	b.n	8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	ee07 3a90 	vmov	s15, r3
 800490e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004912:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800491a:	4b48      	ldr	r3, [pc, #288]	@ (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800491c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800492a:	ed97 6a03 	vldr	s12, [r7, #12]
 800492e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800493a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800493e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800494a:	e021      	b.n	8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	ee07 3a90 	vmov	s15, r3
 8004952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004956:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800495a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800495e:	4b37      	ldr	r3, [pc, #220]	@ (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800496e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004972:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800497a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800497e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800498a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800498e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004990:	4b2a      	ldr	r3, [pc, #168]	@ (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004994:	0a5b      	lsrs	r3, r3, #9
 8004996:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800499a:	ee07 3a90 	vmov	s15, r3
 800499e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80049ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049b6:	ee17 2a90 	vmov	r2, s15
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80049be:	4b1f      	ldr	r3, [pc, #124]	@ (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c2:	0c1b      	lsrs	r3, r3, #16
 80049c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80049dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049e4:	ee17 2a90 	vmov	r2, s15
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80049ec:	4b13      	ldr	r3, [pc, #76]	@ (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f0:	0e1b      	lsrs	r3, r3, #24
 80049f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a06:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a12:	ee17 2a90 	vmov	r2, s15
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a1a:	e008      	b.n	8004a2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	609a      	str	r2, [r3, #8]
}
 8004a2e:	bf00      	nop
 8004a30:	3724      	adds	r7, #36	@ 0x24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	58024400 	.word	0x58024400
 8004a40:	03d09000 	.word	0x03d09000
 8004a44:	46000000 	.word	0x46000000
 8004a48:	4c742400 	.word	0x4c742400
 8004a4c:	4a742400 	.word	0x4a742400
 8004a50:	4bbebc20 	.word	0x4bbebc20

08004a54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b089      	sub	sp, #36	@ 0x24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a5c:	4ba1      	ldr	r3, [pc, #644]	@ (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a60:	f003 0303 	and.w	r3, r3, #3
 8004a64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a66:	4b9f      	ldr	r3, [pc, #636]	@ (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6a:	0d1b      	lsrs	r3, r3, #20
 8004a6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a72:	4b9c      	ldr	r3, [pc, #624]	@ (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a76:	0a1b      	lsrs	r3, r3, #8
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004a7e:	4b99      	ldr	r3, [pc, #612]	@ (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a82:	08db      	lsrs	r3, r3, #3
 8004a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	ee07 3a90 	vmov	s15, r3
 8004a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 8111 	beq.w	8004cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	f000 8083 	beq.w	8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	f200 80a1 	bhi.w	8004bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d056      	beq.n	8004b6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004abe:	e099      	b.n	8004bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ac0:	4b88      	ldr	r3, [pc, #544]	@ (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d02d      	beq.n	8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004acc:	4b85      	ldr	r3, [pc, #532]	@ (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	08db      	lsrs	r3, r3, #3
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	4a84      	ldr	r2, [pc, #528]	@ (8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8004adc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	ee07 3a90 	vmov	s15, r3
 8004ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004af6:	4b7b      	ldr	r3, [pc, #492]	@ (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b26:	e087      	b.n	8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b3a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b6a:	e065      	b.n	8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	ee07 3a90 	vmov	s15, r3
 8004b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b7e:	4b59      	ldr	r3, [pc, #356]	@ (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bae:	e043      	b.n	8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bc2:	4b48      	ldr	r3, [pc, #288]	@ (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bca:	ee07 3a90 	vmov	s15, r3
 8004bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bd6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004be2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bf2:	e021      	b.n	8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c06:	4b37      	ldr	r3, [pc, #220]	@ (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c1a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c38:	4b2a      	ldr	r3, [pc, #168]	@ (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3c:	0a5b      	lsrs	r3, r3, #9
 8004c3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c52:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c5e:	ee17 2a90 	vmov	r2, s15
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004c66:	4b1f      	ldr	r3, [pc, #124]	@ (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6a:	0c1b      	lsrs	r3, r3, #16
 8004c6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c70:	ee07 3a90 	vmov	s15, r3
 8004c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c80:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c8c:	ee17 2a90 	vmov	r2, s15
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c94:	4b13      	ldr	r3, [pc, #76]	@ (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c98:	0e1b      	lsrs	r3, r3, #24
 8004c9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004caa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cba:	ee17 2a90 	vmov	r2, s15
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	609a      	str	r2, [r3, #8]
}
 8004cd6:	bf00      	nop
 8004cd8:	3724      	adds	r7, #36	@ 0x24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	58024400 	.word	0x58024400
 8004ce8:	03d09000 	.word	0x03d09000
 8004cec:	46000000 	.word	0x46000000
 8004cf0:	4c742400 	.word	0x4c742400
 8004cf4:	4a742400 	.word	0x4a742400
 8004cf8:	4bbebc20 	.word	0x4bbebc20

08004cfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d0a:	4b53      	ldr	r3, [pc, #332]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d101      	bne.n	8004d1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e099      	b.n	8004e4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d1a:	4b4f      	ldr	r3, [pc, #316]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a4e      	ldr	r2, [pc, #312]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004d20:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d26:	f7fc fee9 	bl	8001afc <HAL_GetTick>
 8004d2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d2c:	e008      	b.n	8004d40 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d2e:	f7fc fee5 	bl	8001afc <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e086      	b.n	8004e4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d40:	4b45      	ldr	r3, [pc, #276]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f0      	bne.n	8004d2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d4c:	4b42      	ldr	r3, [pc, #264]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d50:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	031b      	lsls	r3, r3, #12
 8004d5a:	493f      	ldr	r1, [pc, #252]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	025b      	lsls	r3, r3, #9
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	041b      	lsls	r3, r3, #16
 8004d7e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	061b      	lsls	r3, r3, #24
 8004d8c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d90:	4931      	ldr	r1, [pc, #196]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d96:	4b30      	ldr	r3, [pc, #192]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	492d      	ldr	r1, [pc, #180]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004da8:	4b2b      	ldr	r3, [pc, #172]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dac:	f023 0220 	bic.w	r2, r3, #32
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	4928      	ldr	r1, [pc, #160]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004dba:	4b27      	ldr	r3, [pc, #156]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbe:	4a26      	ldr	r2, [pc, #152]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004dc0:	f023 0310 	bic.w	r3, r3, #16
 8004dc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004dc6:	4b24      	ldr	r3, [pc, #144]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004dc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dca:	4b24      	ldr	r3, [pc, #144]	@ (8004e5c <RCCEx_PLL2_Config+0x160>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	69d2      	ldr	r2, [r2, #28]
 8004dd2:	00d2      	lsls	r2, r2, #3
 8004dd4:	4920      	ldr	r1, [pc, #128]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004dda:	4b1f      	ldr	r3, [pc, #124]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dde:	4a1e      	ldr	r2, [pc, #120]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004de0:	f043 0310 	orr.w	r3, r3, #16
 8004de4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d106      	bne.n	8004dfa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004dec:	4b1a      	ldr	r3, [pc, #104]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df0:	4a19      	ldr	r2, [pc, #100]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004df2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004df6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004df8:	e00f      	b.n	8004e1a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d106      	bne.n	8004e0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e00:	4b15      	ldr	r3, [pc, #84]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e04:	4a14      	ldr	r2, [pc, #80]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004e06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e0c:	e005      	b.n	8004e1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e0e:	4b12      	ldr	r3, [pc, #72]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e12:	4a11      	ldr	r2, [pc, #68]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004e14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e18:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a0e      	ldr	r2, [pc, #56]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004e20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e26:	f7fc fe69 	bl	8001afc <HAL_GetTick>
 8004e2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e2c:	e008      	b.n	8004e40 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e2e:	f7fc fe65 	bl	8001afc <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d901      	bls.n	8004e40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e006      	b.n	8004e4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e40:	4b05      	ldr	r3, [pc, #20]	@ (8004e58 <RCCEx_PLL2_Config+0x15c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0f0      	beq.n	8004e2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	58024400 	.word	0x58024400
 8004e5c:	ffff0007 	.word	0xffff0007

08004e60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e6e:	4b53      	ldr	r3, [pc, #332]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d101      	bne.n	8004e7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e099      	b.n	8004fb2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e7e:	4b4f      	ldr	r3, [pc, #316]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a4e      	ldr	r2, [pc, #312]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004e84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8a:	f7fc fe37 	bl	8001afc <HAL_GetTick>
 8004e8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e90:	e008      	b.n	8004ea4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e92:	f7fc fe33 	bl	8001afc <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d901      	bls.n	8004ea4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e086      	b.n	8004fb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ea4:	4b45      	ldr	r3, [pc, #276]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1f0      	bne.n	8004e92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004eb0:	4b42      	ldr	r3, [pc, #264]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	051b      	lsls	r3, r3, #20
 8004ebe:	493f      	ldr	r1, [pc, #252]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	025b      	lsls	r3, r3, #9
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	041b      	lsls	r3, r3, #16
 8004ee2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	3b01      	subs	r3, #1
 8004eee:	061b      	lsls	r3, r3, #24
 8004ef0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ef4:	4931      	ldr	r1, [pc, #196]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004efa:	4b30      	ldr	r3, [pc, #192]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	492d      	ldr	r1, [pc, #180]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f10:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	4928      	ldr	r1, [pc, #160]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f1e:	4b27      	ldr	r3, [pc, #156]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f22:	4a26      	ldr	r2, [pc, #152]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f2a:	4b24      	ldr	r3, [pc, #144]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f2e:	4b24      	ldr	r3, [pc, #144]	@ (8004fc0 <RCCEx_PLL3_Config+0x160>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	69d2      	ldr	r2, [r2, #28]
 8004f36:	00d2      	lsls	r2, r2, #3
 8004f38:	4920      	ldr	r1, [pc, #128]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f42:	4a1e      	ldr	r2, [pc, #120]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d106      	bne.n	8004f5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f50:	4b1a      	ldr	r3, [pc, #104]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f54:	4a19      	ldr	r2, [pc, #100]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f56:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f5c:	e00f      	b.n	8004f7e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d106      	bne.n	8004f72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f64:	4b15      	ldr	r3, [pc, #84]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f68:	4a14      	ldr	r2, [pc, #80]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f70:	e005      	b.n	8004f7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f72:	4b12      	ldr	r3, [pc, #72]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f76:	4a11      	ldr	r2, [pc, #68]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a0e      	ldr	r2, [pc, #56]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f8a:	f7fc fdb7 	bl	8001afc <HAL_GetTick>
 8004f8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f90:	e008      	b.n	8004fa4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f92:	f7fc fdb3 	bl	8001afc <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e006      	b.n	8004fb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fa4:	4b05      	ldr	r3, [pc, #20]	@ (8004fbc <RCCEx_PLL3_Config+0x15c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0f0      	beq.n	8004f92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	58024400 	.word	0x58024400
 8004fc0:	ffff0007 	.word	0xffff0007

08004fc4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e10f      	b.n	80051f6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a87      	ldr	r2, [pc, #540]	@ (8005200 <HAL_SPI_Init+0x23c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00f      	beq.n	8005006 <HAL_SPI_Init+0x42>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a86      	ldr	r2, [pc, #536]	@ (8005204 <HAL_SPI_Init+0x240>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d00a      	beq.n	8005006 <HAL_SPI_Init+0x42>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a84      	ldr	r2, [pc, #528]	@ (8005208 <HAL_SPI_Init+0x244>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d005      	beq.n	8005006 <HAL_SPI_Init+0x42>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	2b0f      	cmp	r3, #15
 8005000:	d901      	bls.n	8005006 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e0f7      	b.n	80051f6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fef6 	bl	8005df8 <SPI_GetPacketSize>
 800500c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a7b      	ldr	r2, [pc, #492]	@ (8005200 <HAL_SPI_Init+0x23c>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d00c      	beq.n	8005032 <HAL_SPI_Init+0x6e>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a79      	ldr	r2, [pc, #484]	@ (8005204 <HAL_SPI_Init+0x240>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d007      	beq.n	8005032 <HAL_SPI_Init+0x6e>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a78      	ldr	r2, [pc, #480]	@ (8005208 <HAL_SPI_Init+0x244>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d002      	beq.n	8005032 <HAL_SPI_Init+0x6e>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b08      	cmp	r3, #8
 8005030:	d811      	bhi.n	8005056 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005036:	4a72      	ldr	r2, [pc, #456]	@ (8005200 <HAL_SPI_Init+0x23c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d009      	beq.n	8005050 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a70      	ldr	r2, [pc, #448]	@ (8005204 <HAL_SPI_Init+0x240>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d004      	beq.n	8005050 <HAL_SPI_Init+0x8c>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a6f      	ldr	r2, [pc, #444]	@ (8005208 <HAL_SPI_Init+0x244>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d104      	bne.n	800505a <HAL_SPI_Init+0x96>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b10      	cmp	r3, #16
 8005054:	d901      	bls.n	800505a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e0cd      	b.n	80051f6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d106      	bne.n	8005074 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fc fa4c 	bl	800150c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0201 	bic.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005096:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050a0:	d119      	bne.n	80050d6 <HAL_SPI_Init+0x112>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050aa:	d103      	bne.n	80050b4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d008      	beq.n	80050c6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10c      	bne.n	80050d6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80050c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050c4:	d107      	bne.n	80050d6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80050d4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00f      	beq.n	8005102 <HAL_SPI_Init+0x13e>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	2b06      	cmp	r3, #6
 80050e8:	d90b      	bls.n	8005102 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	e007      	b.n	8005112 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005110:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69da      	ldr	r2, [r3, #28]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511a:	431a      	orrs	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	431a      	orrs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005124:	ea42 0103 	orr.w	r1, r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68da      	ldr	r2, [r3, #12]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513c:	431a      	orrs	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	431a      	orrs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	431a      	orrs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005172:	ea42 0103 	orr.w	r1, r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d113      	bne.n	80051b2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800519c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80051b0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 0201 	bic.w	r2, r2, #1
 80051c0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	40013000 	.word	0x40013000
 8005204:	40003800 	.word	0x40003800
 8005208:	40003c00 	.word	0x40003c00

0800520c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af02      	add	r7, sp, #8
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	4613      	mov	r3, r2
 800521a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3320      	adds	r3, #32
 8005222:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005224:	f7fc fc6a 	bl	8001afc <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b01      	cmp	r3, #1
 8005234:	d001      	beq.n	800523a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005236:	2302      	movs	r3, #2
 8005238:	e1d1      	b.n	80055de <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <HAL_SPI_Transmit+0x3a>
 8005240:	88fb      	ldrh	r3, [r7, #6]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e1c9      	b.n	80055de <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_SPI_Transmit+0x4c>
 8005254:	2302      	movs	r3, #2
 8005256:	e1c2      	b.n	80055de <HAL_SPI_Transmit+0x3d2>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2203      	movs	r2, #3
 8005264:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	88fa      	ldrh	r2, [r7, #6]
 800527a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	88fa      	ldrh	r2, [r7, #6]
 8005282:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80052b0:	d108      	bne.n	80052c4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	e009      	b.n	80052d8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80052d6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	4b96      	ldr	r3, [pc, #600]	@ (8005538 <HAL_SPI_Transmit+0x32c>)
 80052e0:	4013      	ands	r3, r2
 80052e2:	88f9      	ldrh	r1, [r7, #6]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	6812      	ldr	r2, [r2, #0]
 80052e8:	430b      	orrs	r3, r1
 80052ea:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 0201 	orr.w	r2, r2, #1
 80052fa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005304:	d107      	bne.n	8005316 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005314:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	2b0f      	cmp	r3, #15
 800531c:	d947      	bls.n	80053ae <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800531e:	e03f      	b.n	80053a0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b02      	cmp	r3, #2
 800532c:	d114      	bne.n	8005358 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6812      	ldr	r2, [r2, #0]
 8005338:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800533e:	1d1a      	adds	r2, r3, #4
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800534a:	b29b      	uxth	r3, r3
 800534c:	3b01      	subs	r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005356:	e023      	b.n	80053a0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005358:	f7fc fbd0 	bl	8001afc <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	429a      	cmp	r2, r3
 8005366:	d803      	bhi.n	8005370 <HAL_SPI_Transmit+0x164>
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536e:	d102      	bne.n	8005376 <HAL_SPI_Transmit+0x16a>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d114      	bne.n	80053a0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 fc70 	bl	8005c5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005382:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e11e      	b.n	80055de <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1b9      	bne.n	8005320 <HAL_SPI_Transmit+0x114>
 80053ac:	e0f1      	b.n	8005592 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	2b07      	cmp	r3, #7
 80053b4:	f240 80e6 	bls.w	8005584 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80053b8:	e05d      	b.n	8005476 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d132      	bne.n	800542e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d918      	bls.n	8005406 <HAL_SPI_Transmit+0x1fa>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d014      	beq.n	8005406 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6812      	ldr	r2, [r2, #0]
 80053e6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ec:	1d1a      	adds	r2, r3, #4
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3b02      	subs	r3, #2
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005404:	e037      	b.n	8005476 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800540a:	881a      	ldrh	r2, [r3, #0]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005414:	1c9a      	adds	r2, r3, #2
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005420:	b29b      	uxth	r3, r3
 8005422:	3b01      	subs	r3, #1
 8005424:	b29a      	uxth	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800542c:	e023      	b.n	8005476 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800542e:	f7fc fb65 	bl	8001afc <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d803      	bhi.n	8005446 <HAL_SPI_Transmit+0x23a>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005444:	d102      	bne.n	800544c <HAL_SPI_Transmit+0x240>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d114      	bne.n	8005476 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 fc05 	bl	8005c5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005458:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e0b3      	b.n	80055de <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800547c:	b29b      	uxth	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d19b      	bne.n	80053ba <HAL_SPI_Transmit+0x1ae>
 8005482:	e086      	b.n	8005592 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b02      	cmp	r3, #2
 8005490:	d154      	bne.n	800553c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005498:	b29b      	uxth	r3, r3
 800549a:	2b03      	cmp	r3, #3
 800549c:	d918      	bls.n	80054d0 <HAL_SPI_Transmit+0x2c4>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a2:	2b40      	cmp	r3, #64	@ 0x40
 80054a4:	d914      	bls.n	80054d0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6812      	ldr	r2, [r2, #0]
 80054b0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b6:	1d1a      	adds	r2, r3, #4
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	3b04      	subs	r3, #4
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80054ce:	e059      	b.n	8005584 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d917      	bls.n	800550c <HAL_SPI_Transmit+0x300>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d013      	beq.n	800550c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054e8:	881a      	ldrh	r2, [r3, #0]
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054f2:	1c9a      	adds	r2, r3, #2
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b02      	subs	r3, #2
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800550a:	e03b      	b.n	8005584 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3320      	adds	r3, #32
 8005516:	7812      	ldrb	r2, [r2, #0]
 8005518:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800552a:	b29b      	uxth	r3, r3
 800552c:	3b01      	subs	r3, #1
 800552e:	b29a      	uxth	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005536:	e025      	b.n	8005584 <HAL_SPI_Transmit+0x378>
 8005538:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800553c:	f7fc fade 	bl	8001afc <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	429a      	cmp	r2, r3
 800554a:	d803      	bhi.n	8005554 <HAL_SPI_Transmit+0x348>
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005552:	d102      	bne.n	800555a <HAL_SPI_Transmit+0x34e>
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d114      	bne.n	8005584 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 fb7e 	bl	8005c5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005566:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e02c      	b.n	80055de <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800558a:	b29b      	uxth	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	f47f af79 	bne.w	8005484 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2200      	movs	r2, #0
 800559a:	2108      	movs	r1, #8
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 fbfd 	bl	8005d9c <SPI_WaitOnFlagUntilTimeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d007      	beq.n	80055b8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055ae:	f043 0220 	orr.w	r2, r3, #32
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 fb4f 	bl	8005c5c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e000      	b.n	80055de <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80055dc:	2300      	movs	r3, #0
  }
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3718      	adds	r7, #24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop

080055e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08e      	sub	sp, #56	@ 0x38
 80055ec:	af02      	add	r7, sp, #8
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3320      	adds	r3, #32
 80055fc:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3330      	adds	r3, #48	@ 0x30
 8005604:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800560a:	095b      	lsrs	r3, r3, #5
 800560c:	b29b      	uxth	r3, r3
 800560e:	3301      	adds	r3, #1
 8005610:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005612:	f7fc fa73 	bl	8001afc <HAL_GetTick>
 8005616:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8005618:	887b      	ldrh	r3, [r7, #2]
 800561a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800561c:	887b      	ldrh	r3, [r7, #2]
 800561e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b01      	cmp	r3, #1
 800562a:	d001      	beq.n	8005630 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800562c:	2302      	movs	r3, #2
 800562e:	e310      	b.n	8005c52 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d005      	beq.n	8005642 <HAL_SPI_TransmitReceive+0x5a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <HAL_SPI_TransmitReceive+0x5a>
 800563c:	887b      	ldrh	r3, [r7, #2]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e305      	b.n	8005c52 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_SPI_TransmitReceive+0x6c>
 8005650:	2302      	movs	r3, #2
 8005652:	e2fe      	b.n	8005c52 <HAL_SPI_TransmitReceive+0x66a>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2205      	movs	r2, #5
 8005660:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	887a      	ldrh	r2, [r7, #2]
 8005676:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	887a      	ldrh	r2, [r7, #2]
 800567e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	887a      	ldrh	r2, [r7, #2]
 800568c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	887a      	ldrh	r2, [r7, #2]
 8005694:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68da      	ldr	r2, [r3, #12]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80056b2:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a70      	ldr	r2, [pc, #448]	@ (800587c <HAL_SPI_TransmitReceive+0x294>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d009      	beq.n	80056d2 <HAL_SPI_TransmitReceive+0xea>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a6f      	ldr	r2, [pc, #444]	@ (8005880 <HAL_SPI_TransmitReceive+0x298>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d004      	beq.n	80056d2 <HAL_SPI_TransmitReceive+0xea>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a6d      	ldr	r2, [pc, #436]	@ (8005884 <HAL_SPI_TransmitReceive+0x29c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d102      	bne.n	80056d8 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80056d2:	2310      	movs	r3, #16
 80056d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056d6:	e001      	b.n	80056dc <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80056d8:	2308      	movs	r3, #8
 80056da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	4b69      	ldr	r3, [pc, #420]	@ (8005888 <HAL_SPI_TransmitReceive+0x2a0>)
 80056e4:	4013      	ands	r3, r2
 80056e6:	8879      	ldrh	r1, [r7, #2]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	6812      	ldr	r2, [r2, #0]
 80056ec:	430b      	orrs	r3, r1
 80056ee:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0201 	orr.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005708:	d107      	bne.n	800571a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005718:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	2b0f      	cmp	r3, #15
 8005720:	f240 80a2 	bls.w	8005868 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8005724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005726:	089b      	lsrs	r3, r3, #2
 8005728:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800572a:	e094      	b.n	8005856 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b02      	cmp	r3, #2
 8005738:	d120      	bne.n	800577c <HAL_SPI_TransmitReceive+0x194>
 800573a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800573c:	2b00      	cmp	r3, #0
 800573e:	d01d      	beq.n	800577c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005740:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005742:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005746:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005748:	429a      	cmp	r2, r3
 800574a:	d217      	bcs.n	800577c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6812      	ldr	r2, [r2, #0]
 8005756:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800575c:	1d1a      	adds	r2, r3, #4
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005768:	b29b      	uxth	r3, r3
 800576a:	3b01      	subs	r3, #1
 800576c:	b29a      	uxth	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800577a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005784:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005786:	2b00      	cmp	r3, #0
 8005788:	d065      	beq.n	8005856 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b01      	cmp	r3, #1
 8005796:	d118      	bne.n	80057ca <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80057a2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057a8:	1d1a      	adds	r2, r3, #4
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	3b01      	subs	r3, #1
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80057c6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80057c8:	e045      	b.n	8005856 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80057ca:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80057cc:	8bfb      	ldrh	r3, [r7, #30]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d21d      	bcs.n	800580e <HAL_SPI_TransmitReceive+0x226>
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d018      	beq.n	800580e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80057e6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057ec:	1d1a      	adds	r2, r3, #4
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	3b01      	subs	r3, #1
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800580a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800580c:	e023      	b.n	8005856 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800580e:	f7fc f975 	bl	8001afc <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800581a:	429a      	cmp	r2, r3
 800581c:	d803      	bhi.n	8005826 <HAL_SPI_TransmitReceive+0x23e>
 800581e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005824:	d102      	bne.n	800582c <HAL_SPI_TransmitReceive+0x244>
 8005826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005828:	2b00      	cmp	r3, #0
 800582a:	d114      	bne.n	8005856 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 fa15 	bl	8005c5c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005838:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e1fd      	b.n	8005c52 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005856:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005858:	2b00      	cmp	r3, #0
 800585a:	f47f af67 	bne.w	800572c <HAL_SPI_TransmitReceive+0x144>
 800585e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005860:	2b00      	cmp	r3, #0
 8005862:	f47f af63 	bne.w	800572c <HAL_SPI_TransmitReceive+0x144>
 8005866:	e1ce      	b.n	8005c06 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	2b07      	cmp	r3, #7
 800586e:	f240 81c2 	bls.w	8005bf6 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8005872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005874:	085b      	lsrs	r3, r3, #1
 8005876:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005878:	e0c9      	b.n	8005a0e <HAL_SPI_TransmitReceive+0x426>
 800587a:	bf00      	nop
 800587c:	40013000 	.word	0x40013000
 8005880:	40003800 	.word	0x40003800
 8005884:	40003c00 	.word	0x40003c00
 8005888:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b02      	cmp	r3, #2
 8005898:	d11f      	bne.n	80058da <HAL_SPI_TransmitReceive+0x2f2>
 800589a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01c      	beq.n	80058da <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80058a0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80058a2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80058a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d216      	bcs.n	80058da <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b0:	881a      	ldrh	r2, [r3, #0]
 80058b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ba:	1c9a      	adds	r2, r3, #2
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80058d8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80058e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 8092 	beq.w	8005a0e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d118      	bne.n	800592a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058fc:	6a3a      	ldr	r2, [r7, #32]
 80058fe:	8812      	ldrh	r2, [r2, #0]
 8005900:	b292      	uxth	r2, r2
 8005902:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005908:	1c9a      	adds	r2, r3, #2
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005914:	b29b      	uxth	r3, r3
 8005916:	3b01      	subs	r3, #1
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005926:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005928:	e071      	b.n	8005a0e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800592a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800592c:	8bfb      	ldrh	r3, [r7, #30]
 800592e:	429a      	cmp	r2, r3
 8005930:	d228      	bcs.n	8005984 <HAL_SPI_TransmitReceive+0x39c>
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d023      	beq.n	8005984 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005940:	6a3a      	ldr	r2, [r7, #32]
 8005942:	8812      	ldrh	r2, [r2, #0]
 8005944:	b292      	uxth	r2, r2
 8005946:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800594c:	1c9a      	adds	r2, r3, #2
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005956:	6a3a      	ldr	r2, [r7, #32]
 8005958:	8812      	ldrh	r2, [r2, #0]
 800595a:	b292      	uxth	r2, r2
 800595c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005962:	1c9a      	adds	r2, r3, #2
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800596e:	b29b      	uxth	r3, r3
 8005970:	3b02      	subs	r3, #2
 8005972:	b29a      	uxth	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005980:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005982:	e044      	b.n	8005a0e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005984:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005986:	2b01      	cmp	r3, #1
 8005988:	d11d      	bne.n	80059c6 <HAL_SPI_TransmitReceive+0x3de>
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d018      	beq.n	80059c6 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005998:	6a3a      	ldr	r2, [r7, #32]
 800599a:	8812      	ldrh	r2, [r2, #0]
 800599c:	b292      	uxth	r2, r2
 800599e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059a4:	1c9a      	adds	r2, r3, #2
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059c2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80059c4:	e023      	b.n	8005a0e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059c6:	f7fc f899 	bl	8001afc <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d803      	bhi.n	80059de <HAL_SPI_TransmitReceive+0x3f6>
 80059d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059dc:	d102      	bne.n	80059e4 <HAL_SPI_TransmitReceive+0x3fc>
 80059de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d114      	bne.n	8005a0e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 f939 	bl	8005c5c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e121      	b.n	8005c52 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005a0e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f47f af3b 	bne.w	800588c <HAL_SPI_TransmitReceive+0x2a4>
 8005a16:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f47f af37 	bne.w	800588c <HAL_SPI_TransmitReceive+0x2a4>
 8005a1e:	e0f2      	b.n	8005c06 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d121      	bne.n	8005a72 <HAL_SPI_TransmitReceive+0x48a>
 8005a2e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d01e      	beq.n	8005a72 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005a34:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005a36:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a3a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d218      	bcs.n	8005a72 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3320      	adds	r3, #32
 8005a4a:	7812      	ldrb	r2, [r2, #0]
 8005a4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005a70:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005a7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 80ba 	beq.w	8005bf6 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d11b      	bne.n	8005ac8 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a9c:	7812      	ldrb	r2, [r2, #0]
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ac4:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005ac6:	e096      	b.n	8005bf6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005ac8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005aca:	8bfb      	ldrh	r3, [r7, #30]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d24a      	bcs.n	8005b66 <HAL_SPI_TransmitReceive+0x57e>
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d045      	beq.n	8005b66 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ae6:	7812      	ldrb	r2, [r2, #0]
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b02:	7812      	ldrb	r2, [r2, #0]
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b1e:	7812      	ldrb	r2, [r2, #0]
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b28:	1c5a      	adds	r2, r3, #1
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b3a:	7812      	ldrb	r2, [r2, #0]
 8005b3c:	b2d2      	uxtb	r2, r2
 8005b3e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b44:	1c5a      	adds	r2, r3, #1
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3b04      	subs	r3, #4
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b62:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005b64:	e047      	b.n	8005bf6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005b66:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d820      	bhi.n	8005bae <HAL_SPI_TransmitReceive+0x5c6>
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d01b      	beq.n	8005bae <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b82:	7812      	ldrb	r2, [r2, #0]
 8005b84:	b2d2      	uxtb	r2, r2
 8005b86:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005baa:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005bac:	e023      	b.n	8005bf6 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bae:	f7fb ffa5 	bl	8001afc <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d803      	bhi.n	8005bc6 <HAL_SPI_TransmitReceive+0x5de>
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc4:	d102      	bne.n	8005bcc <HAL_SPI_TransmitReceive+0x5e4>
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d114      	bne.n	8005bf6 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 f845 	bl	8005c5c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bd8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e02d      	b.n	8005c52 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005bf6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f47f af11 	bne.w	8005a20 <HAL_SPI_TransmitReceive+0x438>
 8005bfe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f47f af0d 	bne.w	8005a20 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2108      	movs	r1, #8
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 f8c3 	bl	8005d9c <SPI_WaitOnFlagUntilTimeout>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d007      	beq.n	8005c2c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c22:	f043 0220 	orr.w	r2, r3, #32
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 f815 	bl	8005c5c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e000      	b.n	8005c52 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8005c50:	2300      	movs	r3, #0
  }
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3730      	adds	r7, #48	@ 0x30
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop

08005c5c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699a      	ldr	r2, [r3, #24]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0208 	orr.w	r2, r2, #8
 8005c7a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699a      	ldr	r2, [r3, #24]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0210 	orr.w	r2, r2, #16
 8005c8a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0201 	bic.w	r2, r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6919      	ldr	r1, [r3, #16]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	4b3c      	ldr	r3, [pc, #240]	@ (8005d98 <SPI_CloseTransfer+0x13c>)
 8005ca8:	400b      	ands	r3, r1
 8005caa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005cba:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d014      	beq.n	8005cf2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f003 0320 	and.w	r3, r3, #32
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00f      	beq.n	8005cf2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cd8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	699a      	ldr	r2, [r3, #24]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f042 0220 	orr.w	r2, r2, #32
 8005cf0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	d014      	beq.n	8005d28 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00f      	beq.n	8005d28 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d0e:	f043 0204 	orr.w	r2, r3, #4
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	699a      	ldr	r2, [r3, #24]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d26:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00f      	beq.n	8005d52 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d38:	f043 0201 	orr.w	r2, r3, #1
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	699a      	ldr	r2, [r3, #24]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d50:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00f      	beq.n	8005d7c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d62:	f043 0208 	orr.w	r2, r3, #8
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699a      	ldr	r2, [r3, #24]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d7a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005d8c:	bf00      	nop
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	fffffc90 	.word	0xfffffc90

08005d9c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	603b      	str	r3, [r7, #0]
 8005da8:	4613      	mov	r3, r2
 8005daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005dac:	e010      	b.n	8005dd0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dae:	f7fb fea5 	bl	8001afc <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d803      	bhi.n	8005dc6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc4:	d102      	bne.n	8005dcc <SPI_WaitOnFlagUntilTimeout+0x30>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e00f      	b.n	8005df0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	695a      	ldr	r2, [r3, #20]
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	4013      	ands	r3, r2
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	bf0c      	ite	eq
 8005de0:	2301      	moveq	r3, #1
 8005de2:	2300      	movne	r3, #0
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	461a      	mov	r2, r3
 8005de8:	79fb      	ldrb	r3, [r7, #7]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d0df      	beq.n	8005dae <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e04:	095b      	lsrs	r3, r3, #5
 8005e06:	3301      	adds	r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	3307      	adds	r3, #7
 8005e16:	08db      	lsrs	r3, r3, #3
 8005e18:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	fb02 f303 	mul.w	r3, r2, r3
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b082      	sub	sp, #8
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e049      	b.n	8005ed4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d106      	bne.n	8005e5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7fb fc31 	bl	80016bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	3304      	adds	r3, #4
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	f000 fb47 	bl	8006500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d001      	beq.n	8005ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e054      	b.n	8005f9e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0201 	orr.w	r2, r2, #1
 8005f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a26      	ldr	r2, [pc, #152]	@ (8005fac <HAL_TIM_Base_Start_IT+0xd0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d022      	beq.n	8005f5c <HAL_TIM_Base_Start_IT+0x80>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f1e:	d01d      	beq.n	8005f5c <HAL_TIM_Base_Start_IT+0x80>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a22      	ldr	r2, [pc, #136]	@ (8005fb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d018      	beq.n	8005f5c <HAL_TIM_Base_Start_IT+0x80>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a21      	ldr	r2, [pc, #132]	@ (8005fb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d013      	beq.n	8005f5c <HAL_TIM_Base_Start_IT+0x80>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a1f      	ldr	r2, [pc, #124]	@ (8005fb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00e      	beq.n	8005f5c <HAL_TIM_Base_Start_IT+0x80>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a1e      	ldr	r2, [pc, #120]	@ (8005fbc <HAL_TIM_Base_Start_IT+0xe0>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d009      	beq.n	8005f5c <HAL_TIM_Base_Start_IT+0x80>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a1c      	ldr	r2, [pc, #112]	@ (8005fc0 <HAL_TIM_Base_Start_IT+0xe4>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d004      	beq.n	8005f5c <HAL_TIM_Base_Start_IT+0x80>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a1b      	ldr	r2, [pc, #108]	@ (8005fc4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d115      	bne.n	8005f88 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689a      	ldr	r2, [r3, #8]
 8005f62:	4b19      	ldr	r3, [pc, #100]	@ (8005fc8 <HAL_TIM_Base_Start_IT+0xec>)
 8005f64:	4013      	ands	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2b06      	cmp	r3, #6
 8005f6c:	d015      	beq.n	8005f9a <HAL_TIM_Base_Start_IT+0xbe>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f74:	d011      	beq.n	8005f9a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f042 0201 	orr.w	r2, r2, #1
 8005f84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f86:	e008      	b.n	8005f9a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f042 0201 	orr.w	r2, r2, #1
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	e000      	b.n	8005f9c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	40010000 	.word	0x40010000
 8005fb0:	40000400 	.word	0x40000400
 8005fb4:	40000800 	.word	0x40000800
 8005fb8:	40000c00 	.word	0x40000c00
 8005fbc:	40010400 	.word	0x40010400
 8005fc0:	40001800 	.word	0x40001800
 8005fc4:	40014000 	.word	0x40014000
 8005fc8:	00010007 	.word	0x00010007

08005fcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e049      	b.n	8006072 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d106      	bne.n	8005ff8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7fb fb18 	bl	8001628 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3304      	adds	r3, #4
 8006008:	4619      	mov	r1, r3
 800600a:	4610      	mov	r0, r2
 800600c:	f000 fa78 	bl	8006500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b084      	sub	sp, #16
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d020      	beq.n	80060de <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d01b      	beq.n	80060de <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f06f 0202 	mvn.w	r2, #2
 80060ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	f003 0303 	and.w	r3, r3, #3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f9fd 	bl	80064c4 <HAL_TIM_IC_CaptureCallback>
 80060ca:	e005      	b.n	80060d8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f9ef 	bl	80064b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fa00 	bl	80064d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d020      	beq.n	800612a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f003 0304 	and.w	r3, r3, #4
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d01b      	beq.n	800612a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f06f 0204 	mvn.w	r2, #4
 80060fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f9d7 	bl	80064c4 <HAL_TIM_IC_CaptureCallback>
 8006116:	e005      	b.n	8006124 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f9c9 	bl	80064b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f9da 	bl	80064d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f003 0308 	and.w	r3, r3, #8
 8006130:	2b00      	cmp	r3, #0
 8006132:	d020      	beq.n	8006176 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f003 0308 	and.w	r3, r3, #8
 800613a:	2b00      	cmp	r3, #0
 800613c:	d01b      	beq.n	8006176 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f06f 0208 	mvn.w	r2, #8
 8006146:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2204      	movs	r2, #4
 800614c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	f003 0303 	and.w	r3, r3, #3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f9b1 	bl	80064c4 <HAL_TIM_IC_CaptureCallback>
 8006162:	e005      	b.n	8006170 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f9a3 	bl	80064b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f9b4 	bl	80064d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f003 0310 	and.w	r3, r3, #16
 800617c:	2b00      	cmp	r3, #0
 800617e:	d020      	beq.n	80061c2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f003 0310 	and.w	r3, r3, #16
 8006186:	2b00      	cmp	r3, #0
 8006188:	d01b      	beq.n	80061c2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f06f 0210 	mvn.w	r2, #16
 8006192:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2208      	movs	r2, #8
 8006198:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d003      	beq.n	80061b0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f98b 	bl	80064c4 <HAL_TIM_IC_CaptureCallback>
 80061ae:	e005      	b.n	80061bc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 f97d 	bl	80064b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f98e 	bl	80064d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00c      	beq.n	80061e6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d007      	beq.n	80061e6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f06f 0201 	mvn.w	r2, #1
 80061de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7fb f955 	bl	8001490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d104      	bne.n	80061fa <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00c      	beq.n	8006214 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006200:	2b00      	cmp	r3, #0
 8006202:	d007      	beq.n	8006214 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800620c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fe02 	bl	8006e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00c      	beq.n	8006238 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006224:	2b00      	cmp	r3, #0
 8006226:	d007      	beq.n	8006238 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fdfa 	bl	8006e2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00c      	beq.n	800625c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006248:	2b00      	cmp	r3, #0
 800624a:	d007      	beq.n	800625c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f948 	bl	80064ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f003 0320 	and.w	r3, r3, #32
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00c      	beq.n	8006280 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f003 0320 	and.w	r3, r3, #32
 800626c:	2b00      	cmp	r3, #0
 800626e:	d007      	beq.n	8006280 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f06f 0220 	mvn.w	r2, #32
 8006278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fdc2 	bl	8006e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006280:	bf00      	nop
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d101      	bne.n	80062a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062a2:	2302      	movs	r3, #2
 80062a4:	e0ff      	b.n	80064a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b14      	cmp	r3, #20
 80062b2:	f200 80f0 	bhi.w	8006496 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80062b6:	a201      	add	r2, pc, #4	@ (adr r2, 80062bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062bc:	08006311 	.word	0x08006311
 80062c0:	08006497 	.word	0x08006497
 80062c4:	08006497 	.word	0x08006497
 80062c8:	08006497 	.word	0x08006497
 80062cc:	08006351 	.word	0x08006351
 80062d0:	08006497 	.word	0x08006497
 80062d4:	08006497 	.word	0x08006497
 80062d8:	08006497 	.word	0x08006497
 80062dc:	08006393 	.word	0x08006393
 80062e0:	08006497 	.word	0x08006497
 80062e4:	08006497 	.word	0x08006497
 80062e8:	08006497 	.word	0x08006497
 80062ec:	080063d3 	.word	0x080063d3
 80062f0:	08006497 	.word	0x08006497
 80062f4:	08006497 	.word	0x08006497
 80062f8:	08006497 	.word	0x08006497
 80062fc:	08006415 	.word	0x08006415
 8006300:	08006497 	.word	0x08006497
 8006304:	08006497 	.word	0x08006497
 8006308:	08006497 	.word	0x08006497
 800630c:	08006455 	.word	0x08006455
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68b9      	ldr	r1, [r7, #8]
 8006316:	4618      	mov	r0, r3
 8006318:	f000 f992 	bl	8006640 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	699a      	ldr	r2, [r3, #24]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0208 	orr.w	r2, r2, #8
 800632a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699a      	ldr	r2, [r3, #24]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 0204 	bic.w	r2, r2, #4
 800633a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6999      	ldr	r1, [r3, #24]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	691a      	ldr	r2, [r3, #16]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	619a      	str	r2, [r3, #24]
      break;
 800634e:	e0a5      	b.n	800649c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68b9      	ldr	r1, [r7, #8]
 8006356:	4618      	mov	r0, r3
 8006358:	f000 fa02 	bl	8006760 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699a      	ldr	r2, [r3, #24]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800636a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699a      	ldr	r2, [r3, #24]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800637a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6999      	ldr	r1, [r3, #24]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	021a      	lsls	r2, r3, #8
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	430a      	orrs	r2, r1
 800638e:	619a      	str	r2, [r3, #24]
      break;
 8006390:	e084      	b.n	800649c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68b9      	ldr	r1, [r7, #8]
 8006398:	4618      	mov	r0, r3
 800639a:	f000 fa6b 	bl	8006874 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69da      	ldr	r2, [r3, #28]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f042 0208 	orr.w	r2, r2, #8
 80063ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69da      	ldr	r2, [r3, #28]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 0204 	bic.w	r2, r2, #4
 80063bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	69d9      	ldr	r1, [r3, #28]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	691a      	ldr	r2, [r3, #16]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	430a      	orrs	r2, r1
 80063ce:	61da      	str	r2, [r3, #28]
      break;
 80063d0:	e064      	b.n	800649c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68b9      	ldr	r1, [r7, #8]
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 fad3 	bl	8006984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	69da      	ldr	r2, [r3, #28]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	69da      	ldr	r2, [r3, #28]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69d9      	ldr	r1, [r3, #28]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	021a      	lsls	r2, r3, #8
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	430a      	orrs	r2, r1
 8006410:	61da      	str	r2, [r3, #28]
      break;
 8006412:	e043      	b.n	800649c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68b9      	ldr	r1, [r7, #8]
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fb1c 	bl	8006a58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0208 	orr.w	r2, r2, #8
 800642e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 0204 	bic.w	r2, r2, #4
 800643e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	691a      	ldr	r2, [r3, #16]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006452:	e023      	b.n	800649c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68b9      	ldr	r1, [r7, #8]
 800645a:	4618      	mov	r0, r3
 800645c:	f000 fb60 	bl	8006b20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800646e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800647e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	021a      	lsls	r2, r3, #8
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006494:	e002      	b.n	800649c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	75fb      	strb	r3, [r7, #23]
      break;
 800649a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop

080064b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a43      	ldr	r2, [pc, #268]	@ (8006620 <TIM_Base_SetConfig+0x120>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d013      	beq.n	8006540 <TIM_Base_SetConfig+0x40>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800651e:	d00f      	beq.n	8006540 <TIM_Base_SetConfig+0x40>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a40      	ldr	r2, [pc, #256]	@ (8006624 <TIM_Base_SetConfig+0x124>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d00b      	beq.n	8006540 <TIM_Base_SetConfig+0x40>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a3f      	ldr	r2, [pc, #252]	@ (8006628 <TIM_Base_SetConfig+0x128>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d007      	beq.n	8006540 <TIM_Base_SetConfig+0x40>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a3e      	ldr	r2, [pc, #248]	@ (800662c <TIM_Base_SetConfig+0x12c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d003      	beq.n	8006540 <TIM_Base_SetConfig+0x40>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a3d      	ldr	r2, [pc, #244]	@ (8006630 <TIM_Base_SetConfig+0x130>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d108      	bne.n	8006552 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	4313      	orrs	r3, r2
 8006550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a32      	ldr	r2, [pc, #200]	@ (8006620 <TIM_Base_SetConfig+0x120>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d01f      	beq.n	800659a <TIM_Base_SetConfig+0x9a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006560:	d01b      	beq.n	800659a <TIM_Base_SetConfig+0x9a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a2f      	ldr	r2, [pc, #188]	@ (8006624 <TIM_Base_SetConfig+0x124>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d017      	beq.n	800659a <TIM_Base_SetConfig+0x9a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a2e      	ldr	r2, [pc, #184]	@ (8006628 <TIM_Base_SetConfig+0x128>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d013      	beq.n	800659a <TIM_Base_SetConfig+0x9a>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a2d      	ldr	r2, [pc, #180]	@ (800662c <TIM_Base_SetConfig+0x12c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d00f      	beq.n	800659a <TIM_Base_SetConfig+0x9a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a2c      	ldr	r2, [pc, #176]	@ (8006630 <TIM_Base_SetConfig+0x130>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d00b      	beq.n	800659a <TIM_Base_SetConfig+0x9a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a2b      	ldr	r2, [pc, #172]	@ (8006634 <TIM_Base_SetConfig+0x134>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d007      	beq.n	800659a <TIM_Base_SetConfig+0x9a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a2a      	ldr	r2, [pc, #168]	@ (8006638 <TIM_Base_SetConfig+0x138>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d003      	beq.n	800659a <TIM_Base_SetConfig+0x9a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a29      	ldr	r2, [pc, #164]	@ (800663c <TIM_Base_SetConfig+0x13c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d108      	bne.n	80065ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	689a      	ldr	r2, [r3, #8]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a14      	ldr	r2, [pc, #80]	@ (8006620 <TIM_Base_SetConfig+0x120>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d00f      	beq.n	80065f2 <TIM_Base_SetConfig+0xf2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a16      	ldr	r2, [pc, #88]	@ (8006630 <TIM_Base_SetConfig+0x130>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d00b      	beq.n	80065f2 <TIM_Base_SetConfig+0xf2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a15      	ldr	r2, [pc, #84]	@ (8006634 <TIM_Base_SetConfig+0x134>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d007      	beq.n	80065f2 <TIM_Base_SetConfig+0xf2>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a14      	ldr	r2, [pc, #80]	@ (8006638 <TIM_Base_SetConfig+0x138>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d003      	beq.n	80065f2 <TIM_Base_SetConfig+0xf2>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a13      	ldr	r2, [pc, #76]	@ (800663c <TIM_Base_SetConfig+0x13c>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d103      	bne.n	80065fa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	691a      	ldr	r2, [r3, #16]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f043 0204 	orr.w	r2, r3, #4
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	601a      	str	r2, [r3, #0]
}
 8006612:	bf00      	nop
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	40010000 	.word	0x40010000
 8006624:	40000400 	.word	0x40000400
 8006628:	40000800 	.word	0x40000800
 800662c:	40000c00 	.word	0x40000c00
 8006630:	40010400 	.word	0x40010400
 8006634:	40014000 	.word	0x40014000
 8006638:	40014400 	.word	0x40014400
 800663c:	40014800 	.word	0x40014800

08006640 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	f023 0201 	bic.w	r2, r3, #1
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4b37      	ldr	r3, [pc, #220]	@ (8006748 <TIM_OC1_SetConfig+0x108>)
 800666c:	4013      	ands	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 0303 	bic.w	r3, r3, #3
 8006676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f023 0302 	bic.w	r3, r3, #2
 8006688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	4313      	orrs	r3, r2
 8006692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a2d      	ldr	r2, [pc, #180]	@ (800674c <TIM_OC1_SetConfig+0x10c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d00f      	beq.n	80066bc <TIM_OC1_SetConfig+0x7c>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a2c      	ldr	r2, [pc, #176]	@ (8006750 <TIM_OC1_SetConfig+0x110>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00b      	beq.n	80066bc <TIM_OC1_SetConfig+0x7c>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a2b      	ldr	r2, [pc, #172]	@ (8006754 <TIM_OC1_SetConfig+0x114>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d007      	beq.n	80066bc <TIM_OC1_SetConfig+0x7c>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a2a      	ldr	r2, [pc, #168]	@ (8006758 <TIM_OC1_SetConfig+0x118>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d003      	beq.n	80066bc <TIM_OC1_SetConfig+0x7c>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a29      	ldr	r2, [pc, #164]	@ (800675c <TIM_OC1_SetConfig+0x11c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d10c      	bne.n	80066d6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f023 0308 	bic.w	r3, r3, #8
 80066c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f023 0304 	bic.w	r3, r3, #4
 80066d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a1c      	ldr	r2, [pc, #112]	@ (800674c <TIM_OC1_SetConfig+0x10c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d00f      	beq.n	80066fe <TIM_OC1_SetConfig+0xbe>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006750 <TIM_OC1_SetConfig+0x110>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d00b      	beq.n	80066fe <TIM_OC1_SetConfig+0xbe>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a1a      	ldr	r2, [pc, #104]	@ (8006754 <TIM_OC1_SetConfig+0x114>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d007      	beq.n	80066fe <TIM_OC1_SetConfig+0xbe>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a19      	ldr	r2, [pc, #100]	@ (8006758 <TIM_OC1_SetConfig+0x118>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d003      	beq.n	80066fe <TIM_OC1_SetConfig+0xbe>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a18      	ldr	r2, [pc, #96]	@ (800675c <TIM_OC1_SetConfig+0x11c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d111      	bne.n	8006722 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800670c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	4313      	orrs	r3, r2
 8006716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	4313      	orrs	r3, r2
 8006720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	621a      	str	r2, [r3, #32]
}
 800673c:	bf00      	nop
 800673e:	371c      	adds	r7, #28
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	fffeff8f 	.word	0xfffeff8f
 800674c:	40010000 	.word	0x40010000
 8006750:	40010400 	.word	0x40010400
 8006754:	40014000 	.word	0x40014000
 8006758:	40014400 	.word	0x40014400
 800675c:	40014800 	.word	0x40014800

08006760 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	f023 0210 	bic.w	r2, r3, #16
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	4b34      	ldr	r3, [pc, #208]	@ (800685c <TIM_OC2_SetConfig+0xfc>)
 800678c:	4013      	ands	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	021b      	lsls	r3, r3, #8
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f023 0320 	bic.w	r3, r3, #32
 80067aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	011b      	lsls	r3, r3, #4
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a29      	ldr	r2, [pc, #164]	@ (8006860 <TIM_OC2_SetConfig+0x100>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d003      	beq.n	80067c8 <TIM_OC2_SetConfig+0x68>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a28      	ldr	r2, [pc, #160]	@ (8006864 <TIM_OC2_SetConfig+0x104>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d10d      	bne.n	80067e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	011b      	lsls	r3, r3, #4
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	4313      	orrs	r3, r2
 80067da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a1e      	ldr	r2, [pc, #120]	@ (8006860 <TIM_OC2_SetConfig+0x100>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d00f      	beq.n	800680c <TIM_OC2_SetConfig+0xac>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a1d      	ldr	r2, [pc, #116]	@ (8006864 <TIM_OC2_SetConfig+0x104>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d00b      	beq.n	800680c <TIM_OC2_SetConfig+0xac>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a1c      	ldr	r2, [pc, #112]	@ (8006868 <TIM_OC2_SetConfig+0x108>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d007      	beq.n	800680c <TIM_OC2_SetConfig+0xac>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a1b      	ldr	r2, [pc, #108]	@ (800686c <TIM_OC2_SetConfig+0x10c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d003      	beq.n	800680c <TIM_OC2_SetConfig+0xac>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a1a      	ldr	r2, [pc, #104]	@ (8006870 <TIM_OC2_SetConfig+0x110>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d113      	bne.n	8006834 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006812:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800681a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	4313      	orrs	r3, r2
 8006826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	4313      	orrs	r3, r2
 8006832:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	621a      	str	r2, [r3, #32]
}
 800684e:	bf00      	nop
 8006850:	371c      	adds	r7, #28
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	feff8fff 	.word	0xfeff8fff
 8006860:	40010000 	.word	0x40010000
 8006864:	40010400 	.word	0x40010400
 8006868:	40014000 	.word	0x40014000
 800686c:	40014400 	.word	0x40014400
 8006870:	40014800 	.word	0x40014800

08006874 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4b33      	ldr	r3, [pc, #204]	@ (800696c <TIM_OC3_SetConfig+0xf8>)
 80068a0:	4013      	ands	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f023 0303 	bic.w	r3, r3, #3
 80068aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	021b      	lsls	r3, r3, #8
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a28      	ldr	r2, [pc, #160]	@ (8006970 <TIM_OC3_SetConfig+0xfc>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d003      	beq.n	80068da <TIM_OC3_SetConfig+0x66>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a27      	ldr	r2, [pc, #156]	@ (8006974 <TIM_OC3_SetConfig+0x100>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d10d      	bne.n	80068f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	021b      	lsls	r3, r3, #8
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006970 <TIM_OC3_SetConfig+0xfc>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d00f      	beq.n	800691e <TIM_OC3_SetConfig+0xaa>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a1c      	ldr	r2, [pc, #112]	@ (8006974 <TIM_OC3_SetConfig+0x100>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d00b      	beq.n	800691e <TIM_OC3_SetConfig+0xaa>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a1b      	ldr	r2, [pc, #108]	@ (8006978 <TIM_OC3_SetConfig+0x104>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d007      	beq.n	800691e <TIM_OC3_SetConfig+0xaa>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a1a      	ldr	r2, [pc, #104]	@ (800697c <TIM_OC3_SetConfig+0x108>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d003      	beq.n	800691e <TIM_OC3_SetConfig+0xaa>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a19      	ldr	r2, [pc, #100]	@ (8006980 <TIM_OC3_SetConfig+0x10c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d113      	bne.n	8006946 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800692c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	011b      	lsls	r3, r3, #4
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	4313      	orrs	r3, r2
 8006938:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	011b      	lsls	r3, r3, #4
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	4313      	orrs	r3, r2
 8006944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	621a      	str	r2, [r3, #32]
}
 8006960:	bf00      	nop
 8006962:	371c      	adds	r7, #28
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	fffeff8f 	.word	0xfffeff8f
 8006970:	40010000 	.word	0x40010000
 8006974:	40010400 	.word	0x40010400
 8006978:	40014000 	.word	0x40014000
 800697c:	40014400 	.word	0x40014400
 8006980:	40014800 	.word	0x40014800

08006984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4b24      	ldr	r3, [pc, #144]	@ (8006a40 <TIM_OC4_SetConfig+0xbc>)
 80069b0:	4013      	ands	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	021b      	lsls	r3, r3, #8
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	031b      	lsls	r3, r3, #12
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	4313      	orrs	r3, r2
 80069da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a19      	ldr	r2, [pc, #100]	@ (8006a44 <TIM_OC4_SetConfig+0xc0>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00f      	beq.n	8006a04 <TIM_OC4_SetConfig+0x80>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a18      	ldr	r2, [pc, #96]	@ (8006a48 <TIM_OC4_SetConfig+0xc4>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00b      	beq.n	8006a04 <TIM_OC4_SetConfig+0x80>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a17      	ldr	r2, [pc, #92]	@ (8006a4c <TIM_OC4_SetConfig+0xc8>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d007      	beq.n	8006a04 <TIM_OC4_SetConfig+0x80>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a16      	ldr	r2, [pc, #88]	@ (8006a50 <TIM_OC4_SetConfig+0xcc>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d003      	beq.n	8006a04 <TIM_OC4_SetConfig+0x80>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a15      	ldr	r2, [pc, #84]	@ (8006a54 <TIM_OC4_SetConfig+0xd0>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d109      	bne.n	8006a18 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	019b      	lsls	r3, r3, #6
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	621a      	str	r2, [r3, #32]
}
 8006a32:	bf00      	nop
 8006a34:	371c      	adds	r7, #28
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	feff8fff 	.word	0xfeff8fff
 8006a44:	40010000 	.word	0x40010000
 8006a48:	40010400 	.word	0x40010400
 8006a4c:	40014000 	.word	0x40014000
 8006a50:	40014400 	.word	0x40014400
 8006a54:	40014800 	.word	0x40014800

08006a58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	4b21      	ldr	r3, [pc, #132]	@ (8006b08 <TIM_OC5_SetConfig+0xb0>)
 8006a84:	4013      	ands	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006a98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	041b      	lsls	r3, r3, #16
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a18      	ldr	r2, [pc, #96]	@ (8006b0c <TIM_OC5_SetConfig+0xb4>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d00f      	beq.n	8006ace <TIM_OC5_SetConfig+0x76>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a17      	ldr	r2, [pc, #92]	@ (8006b10 <TIM_OC5_SetConfig+0xb8>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d00b      	beq.n	8006ace <TIM_OC5_SetConfig+0x76>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a16      	ldr	r2, [pc, #88]	@ (8006b14 <TIM_OC5_SetConfig+0xbc>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d007      	beq.n	8006ace <TIM_OC5_SetConfig+0x76>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a15      	ldr	r2, [pc, #84]	@ (8006b18 <TIM_OC5_SetConfig+0xc0>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d003      	beq.n	8006ace <TIM_OC5_SetConfig+0x76>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a14      	ldr	r2, [pc, #80]	@ (8006b1c <TIM_OC5_SetConfig+0xc4>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d109      	bne.n	8006ae2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	021b      	lsls	r3, r3, #8
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	621a      	str	r2, [r3, #32]
}
 8006afc:	bf00      	nop
 8006afe:	371c      	adds	r7, #28
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	fffeff8f 	.word	0xfffeff8f
 8006b0c:	40010000 	.word	0x40010000
 8006b10:	40010400 	.word	0x40010400
 8006b14:	40014000 	.word	0x40014000
 8006b18:	40014400 	.word	0x40014400
 8006b1c:	40014800 	.word	0x40014800

08006b20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4b22      	ldr	r3, [pc, #136]	@ (8006bd4 <TIM_OC6_SetConfig+0xb4>)
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	021b      	lsls	r3, r3, #8
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006b62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	051b      	lsls	r3, r3, #20
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a19      	ldr	r2, [pc, #100]	@ (8006bd8 <TIM_OC6_SetConfig+0xb8>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d00f      	beq.n	8006b98 <TIM_OC6_SetConfig+0x78>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a18      	ldr	r2, [pc, #96]	@ (8006bdc <TIM_OC6_SetConfig+0xbc>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00b      	beq.n	8006b98 <TIM_OC6_SetConfig+0x78>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a17      	ldr	r2, [pc, #92]	@ (8006be0 <TIM_OC6_SetConfig+0xc0>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d007      	beq.n	8006b98 <TIM_OC6_SetConfig+0x78>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a16      	ldr	r2, [pc, #88]	@ (8006be4 <TIM_OC6_SetConfig+0xc4>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d003      	beq.n	8006b98 <TIM_OC6_SetConfig+0x78>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a15      	ldr	r2, [pc, #84]	@ (8006be8 <TIM_OC6_SetConfig+0xc8>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d109      	bne.n	8006bac <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	029b      	lsls	r3, r3, #10
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	621a      	str	r2, [r3, #32]
}
 8006bc6:	bf00      	nop
 8006bc8:	371c      	adds	r7, #28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	feff8fff 	.word	0xfeff8fff
 8006bd8:	40010000 	.word	0x40010000
 8006bdc:	40010400 	.word	0x40010400
 8006be0:	40014000 	.word	0x40014000
 8006be4:	40014400 	.word	0x40014400
 8006be8:	40014800 	.word	0x40014800

08006bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d101      	bne.n	8006c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c00:	2302      	movs	r3, #2
 8006c02:	e06d      	b.n	8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a30      	ldr	r2, [pc, #192]	@ (8006cec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d004      	beq.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a2f      	ldr	r2, [pc, #188]	@ (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d108      	bne.n	8006c4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006c3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a20      	ldr	r2, [pc, #128]	@ (8006cec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d022      	beq.n	8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c76:	d01d      	beq.n	8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d018      	beq.n	8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a1c      	ldr	r2, [pc, #112]	@ (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d013      	beq.n	8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a1a      	ldr	r2, [pc, #104]	@ (8006cfc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d00e      	beq.n	8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a15      	ldr	r2, [pc, #84]	@ (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d009      	beq.n	8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a16      	ldr	r2, [pc, #88]	@ (8006d00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d004      	beq.n	8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a15      	ldr	r2, [pc, #84]	@ (8006d04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d10c      	bne.n	8006cce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	40010000 	.word	0x40010000
 8006cf0:	40010400 	.word	0x40010400
 8006cf4:	40000400 	.word	0x40000400
 8006cf8:	40000800 	.word	0x40000800
 8006cfc:	40000c00 	.word	0x40000c00
 8006d00:	40001800 	.word	0x40001800
 8006d04:	40014000 	.word	0x40014000

08006d08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d101      	bne.n	8006d24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d20:	2302      	movs	r3, #2
 8006d22:	e065      	b.n	8006df0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	041b      	lsls	r3, r3, #16
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a16      	ldr	r2, [pc, #88]	@ (8006dfc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d004      	beq.n	8006db2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a14      	ldr	r2, [pc, #80]	@ (8006e00 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d115      	bne.n	8006dde <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dbc:	051b      	lsls	r3, r3, #20
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	40010000 	.word	0x40010000
 8006e00:	40010400 	.word	0x40010400

08006e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e042      	b.n	8006ed8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d106      	bne.n	8006e6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7fa fcd1 	bl	800180c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2224      	movs	r2, #36	@ 0x24
 8006e6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 0201 	bic.w	r2, r2, #1
 8006e80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d002      	beq.n	8006e90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fe1e 	bl	8007acc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 f8b3 	bl	8006ffc <UART_SetConfig>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d101      	bne.n	8006ea0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e01b      	b.n	8006ed8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006eae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689a      	ldr	r2, [r3, #8]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ebe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f042 0201 	orr.w	r2, r2, #1
 8006ece:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fe9d 	bl	8007c10 <UART_CheckIdleState>
 8006ed6:	4603      	mov	r3, r0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08a      	sub	sp, #40	@ 0x28
 8006ee4:	af02      	add	r7, sp, #8
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	603b      	str	r3, [r7, #0]
 8006eec:	4613      	mov	r3, r2
 8006eee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ef6:	2b20      	cmp	r3, #32
 8006ef8:	d17b      	bne.n	8006ff2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d002      	beq.n	8006f06 <HAL_UART_Transmit+0x26>
 8006f00:	88fb      	ldrh	r3, [r7, #6]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e074      	b.n	8006ff4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2221      	movs	r2, #33	@ 0x21
 8006f16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f1a:	f7fa fdef 	bl	8001afc <HAL_GetTick>
 8006f1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	88fa      	ldrh	r2, [r7, #6]
 8006f24:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	88fa      	ldrh	r2, [r7, #6]
 8006f2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f38:	d108      	bne.n	8006f4c <HAL_UART_Transmit+0x6c>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d104      	bne.n	8006f4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006f42:	2300      	movs	r3, #0
 8006f44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	61bb      	str	r3, [r7, #24]
 8006f4a:	e003      	b.n	8006f54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f50:	2300      	movs	r3, #0
 8006f52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f54:	e030      	b.n	8006fb8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	2180      	movs	r1, #128	@ 0x80
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f000 feff 	bl	8007d64 <UART_WaitOnFlagUntilTimeout>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d005      	beq.n	8006f78 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e03d      	b.n	8006ff4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10b      	bne.n	8006f96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	461a      	mov	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f8c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	3302      	adds	r3, #2
 8006f92:	61bb      	str	r3, [r7, #24]
 8006f94:	e007      	b.n	8006fa6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	781a      	ldrb	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1c8      	bne.n	8006f56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	2140      	movs	r1, #64	@ 0x40
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 fec8 	bl	8007d64 <UART_WaitOnFlagUntilTimeout>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d005      	beq.n	8006fe6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e006      	b.n	8006ff4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	e000      	b.n	8006ff4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006ff2:	2302      	movs	r3, #2
  }
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3720      	adds	r7, #32
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007000:	b092      	sub	sp, #72	@ 0x48
 8007002:	af00      	add	r7, sp, #0
 8007004:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	689a      	ldr	r2, [r3, #8]
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	431a      	orrs	r2, r3
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	431a      	orrs	r2, r3
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	69db      	ldr	r3, [r3, #28]
 8007020:	4313      	orrs	r3, r2
 8007022:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	4bbe      	ldr	r3, [pc, #760]	@ (8007324 <UART_SetConfig+0x328>)
 800702c:	4013      	ands	r3, r2
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	6812      	ldr	r2, [r2, #0]
 8007032:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007034:	430b      	orrs	r3, r1
 8007036:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4ab3      	ldr	r2, [pc, #716]	@ (8007328 <UART_SetConfig+0x32c>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d004      	beq.n	8007068 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007064:	4313      	orrs	r3, r2
 8007066:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689a      	ldr	r2, [r3, #8]
 800706e:	4baf      	ldr	r3, [pc, #700]	@ (800732c <UART_SetConfig+0x330>)
 8007070:	4013      	ands	r3, r2
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	6812      	ldr	r2, [r2, #0]
 8007076:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007078:	430b      	orrs	r3, r1
 800707a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007082:	f023 010f 	bic.w	r1, r3, #15
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	430a      	orrs	r2, r1
 8007090:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4aa6      	ldr	r2, [pc, #664]	@ (8007330 <UART_SetConfig+0x334>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d177      	bne.n	800718c <UART_SetConfig+0x190>
 800709c:	4ba5      	ldr	r3, [pc, #660]	@ (8007334 <UART_SetConfig+0x338>)
 800709e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070a4:	2b28      	cmp	r3, #40	@ 0x28
 80070a6:	d86d      	bhi.n	8007184 <UART_SetConfig+0x188>
 80070a8:	a201      	add	r2, pc, #4	@ (adr r2, 80070b0 <UART_SetConfig+0xb4>)
 80070aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ae:	bf00      	nop
 80070b0:	08007155 	.word	0x08007155
 80070b4:	08007185 	.word	0x08007185
 80070b8:	08007185 	.word	0x08007185
 80070bc:	08007185 	.word	0x08007185
 80070c0:	08007185 	.word	0x08007185
 80070c4:	08007185 	.word	0x08007185
 80070c8:	08007185 	.word	0x08007185
 80070cc:	08007185 	.word	0x08007185
 80070d0:	0800715d 	.word	0x0800715d
 80070d4:	08007185 	.word	0x08007185
 80070d8:	08007185 	.word	0x08007185
 80070dc:	08007185 	.word	0x08007185
 80070e0:	08007185 	.word	0x08007185
 80070e4:	08007185 	.word	0x08007185
 80070e8:	08007185 	.word	0x08007185
 80070ec:	08007185 	.word	0x08007185
 80070f0:	08007165 	.word	0x08007165
 80070f4:	08007185 	.word	0x08007185
 80070f8:	08007185 	.word	0x08007185
 80070fc:	08007185 	.word	0x08007185
 8007100:	08007185 	.word	0x08007185
 8007104:	08007185 	.word	0x08007185
 8007108:	08007185 	.word	0x08007185
 800710c:	08007185 	.word	0x08007185
 8007110:	0800716d 	.word	0x0800716d
 8007114:	08007185 	.word	0x08007185
 8007118:	08007185 	.word	0x08007185
 800711c:	08007185 	.word	0x08007185
 8007120:	08007185 	.word	0x08007185
 8007124:	08007185 	.word	0x08007185
 8007128:	08007185 	.word	0x08007185
 800712c:	08007185 	.word	0x08007185
 8007130:	08007175 	.word	0x08007175
 8007134:	08007185 	.word	0x08007185
 8007138:	08007185 	.word	0x08007185
 800713c:	08007185 	.word	0x08007185
 8007140:	08007185 	.word	0x08007185
 8007144:	08007185 	.word	0x08007185
 8007148:	08007185 	.word	0x08007185
 800714c:	08007185 	.word	0x08007185
 8007150:	0800717d 	.word	0x0800717d
 8007154:	2301      	movs	r3, #1
 8007156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800715a:	e222      	b.n	80075a2 <UART_SetConfig+0x5a6>
 800715c:	2304      	movs	r3, #4
 800715e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007162:	e21e      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007164:	2308      	movs	r3, #8
 8007166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800716a:	e21a      	b.n	80075a2 <UART_SetConfig+0x5a6>
 800716c:	2310      	movs	r3, #16
 800716e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007172:	e216      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007174:	2320      	movs	r3, #32
 8007176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800717a:	e212      	b.n	80075a2 <UART_SetConfig+0x5a6>
 800717c:	2340      	movs	r3, #64	@ 0x40
 800717e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007182:	e20e      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007184:	2380      	movs	r3, #128	@ 0x80
 8007186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800718a:	e20a      	b.n	80075a2 <UART_SetConfig+0x5a6>
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a69      	ldr	r2, [pc, #420]	@ (8007338 <UART_SetConfig+0x33c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d130      	bne.n	80071f8 <UART_SetConfig+0x1fc>
 8007196:	4b67      	ldr	r3, [pc, #412]	@ (8007334 <UART_SetConfig+0x338>)
 8007198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800719a:	f003 0307 	and.w	r3, r3, #7
 800719e:	2b05      	cmp	r3, #5
 80071a0:	d826      	bhi.n	80071f0 <UART_SetConfig+0x1f4>
 80071a2:	a201      	add	r2, pc, #4	@ (adr r2, 80071a8 <UART_SetConfig+0x1ac>)
 80071a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a8:	080071c1 	.word	0x080071c1
 80071ac:	080071c9 	.word	0x080071c9
 80071b0:	080071d1 	.word	0x080071d1
 80071b4:	080071d9 	.word	0x080071d9
 80071b8:	080071e1 	.word	0x080071e1
 80071bc:	080071e9 	.word	0x080071e9
 80071c0:	2300      	movs	r3, #0
 80071c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071c6:	e1ec      	b.n	80075a2 <UART_SetConfig+0x5a6>
 80071c8:	2304      	movs	r3, #4
 80071ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ce:	e1e8      	b.n	80075a2 <UART_SetConfig+0x5a6>
 80071d0:	2308      	movs	r3, #8
 80071d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071d6:	e1e4      	b.n	80075a2 <UART_SetConfig+0x5a6>
 80071d8:	2310      	movs	r3, #16
 80071da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071de:	e1e0      	b.n	80075a2 <UART_SetConfig+0x5a6>
 80071e0:	2320      	movs	r3, #32
 80071e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071e6:	e1dc      	b.n	80075a2 <UART_SetConfig+0x5a6>
 80071e8:	2340      	movs	r3, #64	@ 0x40
 80071ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ee:	e1d8      	b.n	80075a2 <UART_SetConfig+0x5a6>
 80071f0:	2380      	movs	r3, #128	@ 0x80
 80071f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071f6:	e1d4      	b.n	80075a2 <UART_SetConfig+0x5a6>
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a4f      	ldr	r2, [pc, #316]	@ (800733c <UART_SetConfig+0x340>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d130      	bne.n	8007264 <UART_SetConfig+0x268>
 8007202:	4b4c      	ldr	r3, [pc, #304]	@ (8007334 <UART_SetConfig+0x338>)
 8007204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007206:	f003 0307 	and.w	r3, r3, #7
 800720a:	2b05      	cmp	r3, #5
 800720c:	d826      	bhi.n	800725c <UART_SetConfig+0x260>
 800720e:	a201      	add	r2, pc, #4	@ (adr r2, 8007214 <UART_SetConfig+0x218>)
 8007210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007214:	0800722d 	.word	0x0800722d
 8007218:	08007235 	.word	0x08007235
 800721c:	0800723d 	.word	0x0800723d
 8007220:	08007245 	.word	0x08007245
 8007224:	0800724d 	.word	0x0800724d
 8007228:	08007255 	.word	0x08007255
 800722c:	2300      	movs	r3, #0
 800722e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007232:	e1b6      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007234:	2304      	movs	r3, #4
 8007236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800723a:	e1b2      	b.n	80075a2 <UART_SetConfig+0x5a6>
 800723c:	2308      	movs	r3, #8
 800723e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007242:	e1ae      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007244:	2310      	movs	r3, #16
 8007246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800724a:	e1aa      	b.n	80075a2 <UART_SetConfig+0x5a6>
 800724c:	2320      	movs	r3, #32
 800724e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007252:	e1a6      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007254:	2340      	movs	r3, #64	@ 0x40
 8007256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800725a:	e1a2      	b.n	80075a2 <UART_SetConfig+0x5a6>
 800725c:	2380      	movs	r3, #128	@ 0x80
 800725e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007262:	e19e      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a35      	ldr	r2, [pc, #212]	@ (8007340 <UART_SetConfig+0x344>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d130      	bne.n	80072d0 <UART_SetConfig+0x2d4>
 800726e:	4b31      	ldr	r3, [pc, #196]	@ (8007334 <UART_SetConfig+0x338>)
 8007270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007272:	f003 0307 	and.w	r3, r3, #7
 8007276:	2b05      	cmp	r3, #5
 8007278:	d826      	bhi.n	80072c8 <UART_SetConfig+0x2cc>
 800727a:	a201      	add	r2, pc, #4	@ (adr r2, 8007280 <UART_SetConfig+0x284>)
 800727c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007280:	08007299 	.word	0x08007299
 8007284:	080072a1 	.word	0x080072a1
 8007288:	080072a9 	.word	0x080072a9
 800728c:	080072b1 	.word	0x080072b1
 8007290:	080072b9 	.word	0x080072b9
 8007294:	080072c1 	.word	0x080072c1
 8007298:	2300      	movs	r3, #0
 800729a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800729e:	e180      	b.n	80075a2 <UART_SetConfig+0x5a6>
 80072a0:	2304      	movs	r3, #4
 80072a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072a6:	e17c      	b.n	80075a2 <UART_SetConfig+0x5a6>
 80072a8:	2308      	movs	r3, #8
 80072aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ae:	e178      	b.n	80075a2 <UART_SetConfig+0x5a6>
 80072b0:	2310      	movs	r3, #16
 80072b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072b6:	e174      	b.n	80075a2 <UART_SetConfig+0x5a6>
 80072b8:	2320      	movs	r3, #32
 80072ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072be:	e170      	b.n	80075a2 <UART_SetConfig+0x5a6>
 80072c0:	2340      	movs	r3, #64	@ 0x40
 80072c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072c6:	e16c      	b.n	80075a2 <UART_SetConfig+0x5a6>
 80072c8:	2380      	movs	r3, #128	@ 0x80
 80072ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ce:	e168      	b.n	80075a2 <UART_SetConfig+0x5a6>
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a1b      	ldr	r2, [pc, #108]	@ (8007344 <UART_SetConfig+0x348>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d142      	bne.n	8007360 <UART_SetConfig+0x364>
 80072da:	4b16      	ldr	r3, [pc, #88]	@ (8007334 <UART_SetConfig+0x338>)
 80072dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072de:	f003 0307 	and.w	r3, r3, #7
 80072e2:	2b05      	cmp	r3, #5
 80072e4:	d838      	bhi.n	8007358 <UART_SetConfig+0x35c>
 80072e6:	a201      	add	r2, pc, #4	@ (adr r2, 80072ec <UART_SetConfig+0x2f0>)
 80072e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ec:	08007305 	.word	0x08007305
 80072f0:	0800730d 	.word	0x0800730d
 80072f4:	08007315 	.word	0x08007315
 80072f8:	0800731d 	.word	0x0800731d
 80072fc:	08007349 	.word	0x08007349
 8007300:	08007351 	.word	0x08007351
 8007304:	2300      	movs	r3, #0
 8007306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800730a:	e14a      	b.n	80075a2 <UART_SetConfig+0x5a6>
 800730c:	2304      	movs	r3, #4
 800730e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007312:	e146      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007314:	2308      	movs	r3, #8
 8007316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800731a:	e142      	b.n	80075a2 <UART_SetConfig+0x5a6>
 800731c:	2310      	movs	r3, #16
 800731e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007322:	e13e      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007324:	cfff69f3 	.word	0xcfff69f3
 8007328:	58000c00 	.word	0x58000c00
 800732c:	11fff4ff 	.word	0x11fff4ff
 8007330:	40011000 	.word	0x40011000
 8007334:	58024400 	.word	0x58024400
 8007338:	40004400 	.word	0x40004400
 800733c:	40004800 	.word	0x40004800
 8007340:	40004c00 	.word	0x40004c00
 8007344:	40005000 	.word	0x40005000
 8007348:	2320      	movs	r3, #32
 800734a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800734e:	e128      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007350:	2340      	movs	r3, #64	@ 0x40
 8007352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007356:	e124      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007358:	2380      	movs	r3, #128	@ 0x80
 800735a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800735e:	e120      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4acb      	ldr	r2, [pc, #812]	@ (8007694 <UART_SetConfig+0x698>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d176      	bne.n	8007458 <UART_SetConfig+0x45c>
 800736a:	4bcb      	ldr	r3, [pc, #812]	@ (8007698 <UART_SetConfig+0x69c>)
 800736c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800736e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007372:	2b28      	cmp	r3, #40	@ 0x28
 8007374:	d86c      	bhi.n	8007450 <UART_SetConfig+0x454>
 8007376:	a201      	add	r2, pc, #4	@ (adr r2, 800737c <UART_SetConfig+0x380>)
 8007378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737c:	08007421 	.word	0x08007421
 8007380:	08007451 	.word	0x08007451
 8007384:	08007451 	.word	0x08007451
 8007388:	08007451 	.word	0x08007451
 800738c:	08007451 	.word	0x08007451
 8007390:	08007451 	.word	0x08007451
 8007394:	08007451 	.word	0x08007451
 8007398:	08007451 	.word	0x08007451
 800739c:	08007429 	.word	0x08007429
 80073a0:	08007451 	.word	0x08007451
 80073a4:	08007451 	.word	0x08007451
 80073a8:	08007451 	.word	0x08007451
 80073ac:	08007451 	.word	0x08007451
 80073b0:	08007451 	.word	0x08007451
 80073b4:	08007451 	.word	0x08007451
 80073b8:	08007451 	.word	0x08007451
 80073bc:	08007431 	.word	0x08007431
 80073c0:	08007451 	.word	0x08007451
 80073c4:	08007451 	.word	0x08007451
 80073c8:	08007451 	.word	0x08007451
 80073cc:	08007451 	.word	0x08007451
 80073d0:	08007451 	.word	0x08007451
 80073d4:	08007451 	.word	0x08007451
 80073d8:	08007451 	.word	0x08007451
 80073dc:	08007439 	.word	0x08007439
 80073e0:	08007451 	.word	0x08007451
 80073e4:	08007451 	.word	0x08007451
 80073e8:	08007451 	.word	0x08007451
 80073ec:	08007451 	.word	0x08007451
 80073f0:	08007451 	.word	0x08007451
 80073f4:	08007451 	.word	0x08007451
 80073f8:	08007451 	.word	0x08007451
 80073fc:	08007441 	.word	0x08007441
 8007400:	08007451 	.word	0x08007451
 8007404:	08007451 	.word	0x08007451
 8007408:	08007451 	.word	0x08007451
 800740c:	08007451 	.word	0x08007451
 8007410:	08007451 	.word	0x08007451
 8007414:	08007451 	.word	0x08007451
 8007418:	08007451 	.word	0x08007451
 800741c:	08007449 	.word	0x08007449
 8007420:	2301      	movs	r3, #1
 8007422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007426:	e0bc      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007428:	2304      	movs	r3, #4
 800742a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800742e:	e0b8      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007430:	2308      	movs	r3, #8
 8007432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007436:	e0b4      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007438:	2310      	movs	r3, #16
 800743a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800743e:	e0b0      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007440:	2320      	movs	r3, #32
 8007442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007446:	e0ac      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007448:	2340      	movs	r3, #64	@ 0x40
 800744a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800744e:	e0a8      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007450:	2380      	movs	r3, #128	@ 0x80
 8007452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007456:	e0a4      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a8f      	ldr	r2, [pc, #572]	@ (800769c <UART_SetConfig+0x6a0>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d130      	bne.n	80074c4 <UART_SetConfig+0x4c8>
 8007462:	4b8d      	ldr	r3, [pc, #564]	@ (8007698 <UART_SetConfig+0x69c>)
 8007464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007466:	f003 0307 	and.w	r3, r3, #7
 800746a:	2b05      	cmp	r3, #5
 800746c:	d826      	bhi.n	80074bc <UART_SetConfig+0x4c0>
 800746e:	a201      	add	r2, pc, #4	@ (adr r2, 8007474 <UART_SetConfig+0x478>)
 8007470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007474:	0800748d 	.word	0x0800748d
 8007478:	08007495 	.word	0x08007495
 800747c:	0800749d 	.word	0x0800749d
 8007480:	080074a5 	.word	0x080074a5
 8007484:	080074ad 	.word	0x080074ad
 8007488:	080074b5 	.word	0x080074b5
 800748c:	2300      	movs	r3, #0
 800748e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007492:	e086      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007494:	2304      	movs	r3, #4
 8007496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800749a:	e082      	b.n	80075a2 <UART_SetConfig+0x5a6>
 800749c:	2308      	movs	r3, #8
 800749e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074a2:	e07e      	b.n	80075a2 <UART_SetConfig+0x5a6>
 80074a4:	2310      	movs	r3, #16
 80074a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074aa:	e07a      	b.n	80075a2 <UART_SetConfig+0x5a6>
 80074ac:	2320      	movs	r3, #32
 80074ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074b2:	e076      	b.n	80075a2 <UART_SetConfig+0x5a6>
 80074b4:	2340      	movs	r3, #64	@ 0x40
 80074b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ba:	e072      	b.n	80075a2 <UART_SetConfig+0x5a6>
 80074bc:	2380      	movs	r3, #128	@ 0x80
 80074be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074c2:	e06e      	b.n	80075a2 <UART_SetConfig+0x5a6>
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a75      	ldr	r2, [pc, #468]	@ (80076a0 <UART_SetConfig+0x6a4>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d130      	bne.n	8007530 <UART_SetConfig+0x534>
 80074ce:	4b72      	ldr	r3, [pc, #456]	@ (8007698 <UART_SetConfig+0x69c>)
 80074d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074d2:	f003 0307 	and.w	r3, r3, #7
 80074d6:	2b05      	cmp	r3, #5
 80074d8:	d826      	bhi.n	8007528 <UART_SetConfig+0x52c>
 80074da:	a201      	add	r2, pc, #4	@ (adr r2, 80074e0 <UART_SetConfig+0x4e4>)
 80074dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e0:	080074f9 	.word	0x080074f9
 80074e4:	08007501 	.word	0x08007501
 80074e8:	08007509 	.word	0x08007509
 80074ec:	08007511 	.word	0x08007511
 80074f0:	08007519 	.word	0x08007519
 80074f4:	08007521 	.word	0x08007521
 80074f8:	2300      	movs	r3, #0
 80074fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074fe:	e050      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007500:	2304      	movs	r3, #4
 8007502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007506:	e04c      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007508:	2308      	movs	r3, #8
 800750a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800750e:	e048      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007510:	2310      	movs	r3, #16
 8007512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007516:	e044      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007518:	2320      	movs	r3, #32
 800751a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800751e:	e040      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007520:	2340      	movs	r3, #64	@ 0x40
 8007522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007526:	e03c      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007528:	2380      	movs	r3, #128	@ 0x80
 800752a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800752e:	e038      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a5b      	ldr	r2, [pc, #364]	@ (80076a4 <UART_SetConfig+0x6a8>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d130      	bne.n	800759c <UART_SetConfig+0x5a0>
 800753a:	4b57      	ldr	r3, [pc, #348]	@ (8007698 <UART_SetConfig+0x69c>)
 800753c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800753e:	f003 0307 	and.w	r3, r3, #7
 8007542:	2b05      	cmp	r3, #5
 8007544:	d826      	bhi.n	8007594 <UART_SetConfig+0x598>
 8007546:	a201      	add	r2, pc, #4	@ (adr r2, 800754c <UART_SetConfig+0x550>)
 8007548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754c:	08007565 	.word	0x08007565
 8007550:	0800756d 	.word	0x0800756d
 8007554:	08007575 	.word	0x08007575
 8007558:	0800757d 	.word	0x0800757d
 800755c:	08007585 	.word	0x08007585
 8007560:	0800758d 	.word	0x0800758d
 8007564:	2302      	movs	r3, #2
 8007566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800756a:	e01a      	b.n	80075a2 <UART_SetConfig+0x5a6>
 800756c:	2304      	movs	r3, #4
 800756e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007572:	e016      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007574:	2308      	movs	r3, #8
 8007576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800757a:	e012      	b.n	80075a2 <UART_SetConfig+0x5a6>
 800757c:	2310      	movs	r3, #16
 800757e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007582:	e00e      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007584:	2320      	movs	r3, #32
 8007586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800758a:	e00a      	b.n	80075a2 <UART_SetConfig+0x5a6>
 800758c:	2340      	movs	r3, #64	@ 0x40
 800758e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007592:	e006      	b.n	80075a2 <UART_SetConfig+0x5a6>
 8007594:	2380      	movs	r3, #128	@ 0x80
 8007596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800759a:	e002      	b.n	80075a2 <UART_SetConfig+0x5a6>
 800759c:	2380      	movs	r3, #128	@ 0x80
 800759e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a3f      	ldr	r2, [pc, #252]	@ (80076a4 <UART_SetConfig+0x6a8>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	f040 80f8 	bne.w	800779e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80075b2:	2b20      	cmp	r3, #32
 80075b4:	dc46      	bgt.n	8007644 <UART_SetConfig+0x648>
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	f2c0 8082 	blt.w	80076c0 <UART_SetConfig+0x6c4>
 80075bc:	3b02      	subs	r3, #2
 80075be:	2b1e      	cmp	r3, #30
 80075c0:	d87e      	bhi.n	80076c0 <UART_SetConfig+0x6c4>
 80075c2:	a201      	add	r2, pc, #4	@ (adr r2, 80075c8 <UART_SetConfig+0x5cc>)
 80075c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c8:	0800764b 	.word	0x0800764b
 80075cc:	080076c1 	.word	0x080076c1
 80075d0:	08007653 	.word	0x08007653
 80075d4:	080076c1 	.word	0x080076c1
 80075d8:	080076c1 	.word	0x080076c1
 80075dc:	080076c1 	.word	0x080076c1
 80075e0:	08007663 	.word	0x08007663
 80075e4:	080076c1 	.word	0x080076c1
 80075e8:	080076c1 	.word	0x080076c1
 80075ec:	080076c1 	.word	0x080076c1
 80075f0:	080076c1 	.word	0x080076c1
 80075f4:	080076c1 	.word	0x080076c1
 80075f8:	080076c1 	.word	0x080076c1
 80075fc:	080076c1 	.word	0x080076c1
 8007600:	08007673 	.word	0x08007673
 8007604:	080076c1 	.word	0x080076c1
 8007608:	080076c1 	.word	0x080076c1
 800760c:	080076c1 	.word	0x080076c1
 8007610:	080076c1 	.word	0x080076c1
 8007614:	080076c1 	.word	0x080076c1
 8007618:	080076c1 	.word	0x080076c1
 800761c:	080076c1 	.word	0x080076c1
 8007620:	080076c1 	.word	0x080076c1
 8007624:	080076c1 	.word	0x080076c1
 8007628:	080076c1 	.word	0x080076c1
 800762c:	080076c1 	.word	0x080076c1
 8007630:	080076c1 	.word	0x080076c1
 8007634:	080076c1 	.word	0x080076c1
 8007638:	080076c1 	.word	0x080076c1
 800763c:	080076c1 	.word	0x080076c1
 8007640:	080076b3 	.word	0x080076b3
 8007644:	2b40      	cmp	r3, #64	@ 0x40
 8007646:	d037      	beq.n	80076b8 <UART_SetConfig+0x6bc>
 8007648:	e03a      	b.n	80076c0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800764a:	f7fd f899 	bl	8004780 <HAL_RCCEx_GetD3PCLK1Freq>
 800764e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007650:	e03c      	b.n	80076cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007652:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007656:	4618      	mov	r0, r3
 8007658:	f7fd f8a8 	bl	80047ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800765c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800765e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007660:	e034      	b.n	80076cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007662:	f107 0318 	add.w	r3, r7, #24
 8007666:	4618      	mov	r0, r3
 8007668:	f7fd f9f4 	bl	8004a54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007670:	e02c      	b.n	80076cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007672:	4b09      	ldr	r3, [pc, #36]	@ (8007698 <UART_SetConfig+0x69c>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0320 	and.w	r3, r3, #32
 800767a:	2b00      	cmp	r3, #0
 800767c:	d016      	beq.n	80076ac <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800767e:	4b06      	ldr	r3, [pc, #24]	@ (8007698 <UART_SetConfig+0x69c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	08db      	lsrs	r3, r3, #3
 8007684:	f003 0303 	and.w	r3, r3, #3
 8007688:	4a07      	ldr	r2, [pc, #28]	@ (80076a8 <UART_SetConfig+0x6ac>)
 800768a:	fa22 f303 	lsr.w	r3, r2, r3
 800768e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007690:	e01c      	b.n	80076cc <UART_SetConfig+0x6d0>
 8007692:	bf00      	nop
 8007694:	40011400 	.word	0x40011400
 8007698:	58024400 	.word	0x58024400
 800769c:	40007800 	.word	0x40007800
 80076a0:	40007c00 	.word	0x40007c00
 80076a4:	58000c00 	.word	0x58000c00
 80076a8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80076ac:	4b9d      	ldr	r3, [pc, #628]	@ (8007924 <UART_SetConfig+0x928>)
 80076ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076b0:	e00c      	b.n	80076cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80076b2:	4b9d      	ldr	r3, [pc, #628]	@ (8007928 <UART_SetConfig+0x92c>)
 80076b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076b6:	e009      	b.n	80076cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076be:	e005      	b.n	80076cc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80076ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 81de 	beq.w	8007a90 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d8:	4a94      	ldr	r2, [pc, #592]	@ (800792c <UART_SetConfig+0x930>)
 80076da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076de:	461a      	mov	r2, r3
 80076e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80076e6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	4613      	mov	r3, r2
 80076ee:	005b      	lsls	r3, r3, #1
 80076f0:	4413      	add	r3, r2
 80076f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d305      	bcc.n	8007704 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007700:	429a      	cmp	r2, r3
 8007702:	d903      	bls.n	800770c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800770a:	e1c1      	b.n	8007a90 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800770c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800770e:	2200      	movs	r2, #0
 8007710:	60bb      	str	r3, [r7, #8]
 8007712:	60fa      	str	r2, [r7, #12]
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007718:	4a84      	ldr	r2, [pc, #528]	@ (800792c <UART_SetConfig+0x930>)
 800771a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800771e:	b29b      	uxth	r3, r3
 8007720:	2200      	movs	r2, #0
 8007722:	603b      	str	r3, [r7, #0]
 8007724:	607a      	str	r2, [r7, #4]
 8007726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800772a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800772e:	f7f8 fdd7 	bl	80002e0 <__aeabi_uldivmod>
 8007732:	4602      	mov	r2, r0
 8007734:	460b      	mov	r3, r1
 8007736:	4610      	mov	r0, r2
 8007738:	4619      	mov	r1, r3
 800773a:	f04f 0200 	mov.w	r2, #0
 800773e:	f04f 0300 	mov.w	r3, #0
 8007742:	020b      	lsls	r3, r1, #8
 8007744:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007748:	0202      	lsls	r2, r0, #8
 800774a:	6979      	ldr	r1, [r7, #20]
 800774c:	6849      	ldr	r1, [r1, #4]
 800774e:	0849      	lsrs	r1, r1, #1
 8007750:	2000      	movs	r0, #0
 8007752:	460c      	mov	r4, r1
 8007754:	4605      	mov	r5, r0
 8007756:	eb12 0804 	adds.w	r8, r2, r4
 800775a:	eb43 0905 	adc.w	r9, r3, r5
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	469a      	mov	sl, r3
 8007766:	4693      	mov	fp, r2
 8007768:	4652      	mov	r2, sl
 800776a:	465b      	mov	r3, fp
 800776c:	4640      	mov	r0, r8
 800776e:	4649      	mov	r1, r9
 8007770:	f7f8 fdb6 	bl	80002e0 <__aeabi_uldivmod>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	4613      	mov	r3, r2
 800777a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800777c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007782:	d308      	bcc.n	8007796 <UART_SetConfig+0x79a>
 8007784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007786:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800778a:	d204      	bcs.n	8007796 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007792:	60da      	str	r2, [r3, #12]
 8007794:	e17c      	b.n	8007a90 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800779c:	e178      	b.n	8007a90 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077a6:	f040 80c5 	bne.w	8007934 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80077aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80077ae:	2b20      	cmp	r3, #32
 80077b0:	dc48      	bgt.n	8007844 <UART_SetConfig+0x848>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	db7b      	blt.n	80078ae <UART_SetConfig+0x8b2>
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	d879      	bhi.n	80078ae <UART_SetConfig+0x8b2>
 80077ba:	a201      	add	r2, pc, #4	@ (adr r2, 80077c0 <UART_SetConfig+0x7c4>)
 80077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c0:	0800784b 	.word	0x0800784b
 80077c4:	08007853 	.word	0x08007853
 80077c8:	080078af 	.word	0x080078af
 80077cc:	080078af 	.word	0x080078af
 80077d0:	0800785b 	.word	0x0800785b
 80077d4:	080078af 	.word	0x080078af
 80077d8:	080078af 	.word	0x080078af
 80077dc:	080078af 	.word	0x080078af
 80077e0:	0800786b 	.word	0x0800786b
 80077e4:	080078af 	.word	0x080078af
 80077e8:	080078af 	.word	0x080078af
 80077ec:	080078af 	.word	0x080078af
 80077f0:	080078af 	.word	0x080078af
 80077f4:	080078af 	.word	0x080078af
 80077f8:	080078af 	.word	0x080078af
 80077fc:	080078af 	.word	0x080078af
 8007800:	0800787b 	.word	0x0800787b
 8007804:	080078af 	.word	0x080078af
 8007808:	080078af 	.word	0x080078af
 800780c:	080078af 	.word	0x080078af
 8007810:	080078af 	.word	0x080078af
 8007814:	080078af 	.word	0x080078af
 8007818:	080078af 	.word	0x080078af
 800781c:	080078af 	.word	0x080078af
 8007820:	080078af 	.word	0x080078af
 8007824:	080078af 	.word	0x080078af
 8007828:	080078af 	.word	0x080078af
 800782c:	080078af 	.word	0x080078af
 8007830:	080078af 	.word	0x080078af
 8007834:	080078af 	.word	0x080078af
 8007838:	080078af 	.word	0x080078af
 800783c:	080078af 	.word	0x080078af
 8007840:	080078a1 	.word	0x080078a1
 8007844:	2b40      	cmp	r3, #64	@ 0x40
 8007846:	d02e      	beq.n	80078a6 <UART_SetConfig+0x8aa>
 8007848:	e031      	b.n	80078ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800784a:	f7fb fce1 	bl	8003210 <HAL_RCC_GetPCLK1Freq>
 800784e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007850:	e033      	b.n	80078ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007852:	f7fb fcf3 	bl	800323c <HAL_RCC_GetPCLK2Freq>
 8007856:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007858:	e02f      	b.n	80078ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800785a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800785e:	4618      	mov	r0, r3
 8007860:	f7fc ffa4 	bl	80047ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007868:	e027      	b.n	80078ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800786a:	f107 0318 	add.w	r3, r7, #24
 800786e:	4618      	mov	r0, r3
 8007870:	f7fd f8f0 	bl	8004a54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007878:	e01f      	b.n	80078ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800787a:	4b2d      	ldr	r3, [pc, #180]	@ (8007930 <UART_SetConfig+0x934>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0320 	and.w	r3, r3, #32
 8007882:	2b00      	cmp	r3, #0
 8007884:	d009      	beq.n	800789a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007886:	4b2a      	ldr	r3, [pc, #168]	@ (8007930 <UART_SetConfig+0x934>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	08db      	lsrs	r3, r3, #3
 800788c:	f003 0303 	and.w	r3, r3, #3
 8007890:	4a24      	ldr	r2, [pc, #144]	@ (8007924 <UART_SetConfig+0x928>)
 8007892:	fa22 f303 	lsr.w	r3, r2, r3
 8007896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007898:	e00f      	b.n	80078ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800789a:	4b22      	ldr	r3, [pc, #136]	@ (8007924 <UART_SetConfig+0x928>)
 800789c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800789e:	e00c      	b.n	80078ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80078a0:	4b21      	ldr	r3, [pc, #132]	@ (8007928 <UART_SetConfig+0x92c>)
 80078a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078a4:	e009      	b.n	80078ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078ac:	e005      	b.n	80078ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80078b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 80e7 	beq.w	8007a90 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c6:	4a19      	ldr	r2, [pc, #100]	@ (800792c <UART_SetConfig+0x930>)
 80078c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078cc:	461a      	mov	r2, r3
 80078ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80078d4:	005a      	lsls	r2, r3, #1
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	085b      	lsrs	r3, r3, #1
 80078dc:	441a      	add	r2, r3
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ea:	2b0f      	cmp	r3, #15
 80078ec:	d916      	bls.n	800791c <UART_SetConfig+0x920>
 80078ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078f4:	d212      	bcs.n	800791c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	f023 030f 	bic.w	r3, r3, #15
 80078fe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007902:	085b      	lsrs	r3, r3, #1
 8007904:	b29b      	uxth	r3, r3
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	b29a      	uxth	r2, r3
 800790c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800790e:	4313      	orrs	r3, r2
 8007910:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007918:	60da      	str	r2, [r3, #12]
 800791a:	e0b9      	b.n	8007a90 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007922:	e0b5      	b.n	8007a90 <UART_SetConfig+0xa94>
 8007924:	03d09000 	.word	0x03d09000
 8007928:	003d0900 	.word	0x003d0900
 800792c:	0800c7ac 	.word	0x0800c7ac
 8007930:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007934:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007938:	2b20      	cmp	r3, #32
 800793a:	dc49      	bgt.n	80079d0 <UART_SetConfig+0x9d4>
 800793c:	2b00      	cmp	r3, #0
 800793e:	db7c      	blt.n	8007a3a <UART_SetConfig+0xa3e>
 8007940:	2b20      	cmp	r3, #32
 8007942:	d87a      	bhi.n	8007a3a <UART_SetConfig+0xa3e>
 8007944:	a201      	add	r2, pc, #4	@ (adr r2, 800794c <UART_SetConfig+0x950>)
 8007946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794a:	bf00      	nop
 800794c:	080079d7 	.word	0x080079d7
 8007950:	080079df 	.word	0x080079df
 8007954:	08007a3b 	.word	0x08007a3b
 8007958:	08007a3b 	.word	0x08007a3b
 800795c:	080079e7 	.word	0x080079e7
 8007960:	08007a3b 	.word	0x08007a3b
 8007964:	08007a3b 	.word	0x08007a3b
 8007968:	08007a3b 	.word	0x08007a3b
 800796c:	080079f7 	.word	0x080079f7
 8007970:	08007a3b 	.word	0x08007a3b
 8007974:	08007a3b 	.word	0x08007a3b
 8007978:	08007a3b 	.word	0x08007a3b
 800797c:	08007a3b 	.word	0x08007a3b
 8007980:	08007a3b 	.word	0x08007a3b
 8007984:	08007a3b 	.word	0x08007a3b
 8007988:	08007a3b 	.word	0x08007a3b
 800798c:	08007a07 	.word	0x08007a07
 8007990:	08007a3b 	.word	0x08007a3b
 8007994:	08007a3b 	.word	0x08007a3b
 8007998:	08007a3b 	.word	0x08007a3b
 800799c:	08007a3b 	.word	0x08007a3b
 80079a0:	08007a3b 	.word	0x08007a3b
 80079a4:	08007a3b 	.word	0x08007a3b
 80079a8:	08007a3b 	.word	0x08007a3b
 80079ac:	08007a3b 	.word	0x08007a3b
 80079b0:	08007a3b 	.word	0x08007a3b
 80079b4:	08007a3b 	.word	0x08007a3b
 80079b8:	08007a3b 	.word	0x08007a3b
 80079bc:	08007a3b 	.word	0x08007a3b
 80079c0:	08007a3b 	.word	0x08007a3b
 80079c4:	08007a3b 	.word	0x08007a3b
 80079c8:	08007a3b 	.word	0x08007a3b
 80079cc:	08007a2d 	.word	0x08007a2d
 80079d0:	2b40      	cmp	r3, #64	@ 0x40
 80079d2:	d02e      	beq.n	8007a32 <UART_SetConfig+0xa36>
 80079d4:	e031      	b.n	8007a3a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079d6:	f7fb fc1b 	bl	8003210 <HAL_RCC_GetPCLK1Freq>
 80079da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80079dc:	e033      	b.n	8007a46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079de:	f7fb fc2d 	bl	800323c <HAL_RCC_GetPCLK2Freq>
 80079e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80079e4:	e02f      	b.n	8007a46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fc fede 	bl	80047ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80079f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079f4:	e027      	b.n	8007a46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079f6:	f107 0318 	add.w	r3, r7, #24
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fd f82a 	bl	8004a54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a04:	e01f      	b.n	8007a46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a06:	4b2d      	ldr	r3, [pc, #180]	@ (8007abc <UART_SetConfig+0xac0>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0320 	and.w	r3, r3, #32
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d009      	beq.n	8007a26 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a12:	4b2a      	ldr	r3, [pc, #168]	@ (8007abc <UART_SetConfig+0xac0>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	08db      	lsrs	r3, r3, #3
 8007a18:	f003 0303 	and.w	r3, r3, #3
 8007a1c:	4a28      	ldr	r2, [pc, #160]	@ (8007ac0 <UART_SetConfig+0xac4>)
 8007a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a24:	e00f      	b.n	8007a46 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007a26:	4b26      	ldr	r3, [pc, #152]	@ (8007ac0 <UART_SetConfig+0xac4>)
 8007a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a2a:	e00c      	b.n	8007a46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a2c:	4b25      	ldr	r3, [pc, #148]	@ (8007ac4 <UART_SetConfig+0xac8>)
 8007a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a30:	e009      	b.n	8007a46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a38:	e005      	b.n	8007a46 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007a44:	bf00      	nop
    }

    if (pclk != 0U)
 8007a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d021      	beq.n	8007a90 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a50:	4a1d      	ldr	r2, [pc, #116]	@ (8007ac8 <UART_SetConfig+0xacc>)
 8007a52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a56:	461a      	mov	r2, r3
 8007a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	085b      	lsrs	r3, r3, #1
 8007a64:	441a      	add	r2, r3
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a72:	2b0f      	cmp	r3, #15
 8007a74:	d909      	bls.n	8007a8a <UART_SetConfig+0xa8e>
 8007a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a7c:	d205      	bcs.n	8007a8a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	60da      	str	r2, [r3, #12]
 8007a88:	e002      	b.n	8007a90 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007aac:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3748      	adds	r7, #72	@ 0x48
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007aba:	bf00      	nop
 8007abc:	58024400 	.word	0x58024400
 8007ac0:	03d09000 	.word	0x03d09000
 8007ac4:	003d0900 	.word	0x003d0900
 8007ac8:	0800c7ac 	.word	0x0800c7ac

08007acc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad8:	f003 0308 	and.w	r3, r3, #8
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00a      	beq.n	8007b18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	430a      	orrs	r2, r1
 8007b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b1c:	f003 0302 	and.w	r3, r3, #2
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00a      	beq.n	8007b3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b3e:	f003 0304 	and.w	r3, r3, #4
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00a      	beq.n	8007b5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b60:	f003 0310 	and.w	r3, r3, #16
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00a      	beq.n	8007b7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b82:	f003 0320 	and.w	r3, r3, #32
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00a      	beq.n	8007ba0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d01a      	beq.n	8007be2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bca:	d10a      	bne.n	8007be2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	605a      	str	r2, [r3, #4]
  }
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b098      	sub	sp, #96	@ 0x60
 8007c14:	af02      	add	r7, sp, #8
 8007c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c20:	f7f9 ff6c 	bl	8001afc <HAL_GetTick>
 8007c24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0308 	and.w	r3, r3, #8
 8007c30:	2b08      	cmp	r3, #8
 8007c32:	d12f      	bne.n	8007c94 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f88e 	bl	8007d64 <UART_WaitOnFlagUntilTimeout>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d022      	beq.n	8007c94 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c56:	e853 3f00 	ldrex	r3, [r3]
 8007c5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c62:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c6e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c74:	e841 2300 	strex	r3, r2, [r1]
 8007c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1e6      	bne.n	8007c4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2220      	movs	r2, #32
 8007c84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e063      	b.n	8007d5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 0304 	and.w	r3, r3, #4
 8007c9e:	2b04      	cmp	r3, #4
 8007ca0:	d149      	bne.n	8007d36 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ca2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007caa:	2200      	movs	r2, #0
 8007cac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f857 	bl	8007d64 <UART_WaitOnFlagUntilTimeout>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d03c      	beq.n	8007d36 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc4:	e853 3f00 	ldrex	r3, [r3]
 8007cc8:	623b      	str	r3, [r7, #32]
   return(result);
 8007cca:	6a3b      	ldr	r3, [r7, #32]
 8007ccc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cda:	633b      	str	r3, [r7, #48]	@ 0x30
 8007cdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ce0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ce2:	e841 2300 	strex	r3, r2, [r1]
 8007ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1e6      	bne.n	8007cbc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3308      	adds	r3, #8
 8007cf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	e853 3f00 	ldrex	r3, [r3]
 8007cfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f023 0301 	bic.w	r3, r3, #1
 8007d04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3308      	adds	r3, #8
 8007d0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d0e:	61fa      	str	r2, [r7, #28]
 8007d10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d12:	69b9      	ldr	r1, [r7, #24]
 8007d14:	69fa      	ldr	r2, [r7, #28]
 8007d16:	e841 2300 	strex	r3, r2, [r1]
 8007d1a:	617b      	str	r3, [r7, #20]
   return(result);
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1e5      	bne.n	8007cee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2220      	movs	r2, #32
 8007d26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e012      	b.n	8007d5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2220      	movs	r2, #32
 8007d3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2220      	movs	r2, #32
 8007d42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3758      	adds	r7, #88	@ 0x58
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	603b      	str	r3, [r7, #0]
 8007d70:	4613      	mov	r3, r2
 8007d72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d74:	e04f      	b.n	8007e16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7c:	d04b      	beq.n	8007e16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d7e:	f7f9 febd 	bl	8001afc <HAL_GetTick>
 8007d82:	4602      	mov	r2, r0
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	1ad3      	subs	r3, r2, r3
 8007d88:	69ba      	ldr	r2, [r7, #24]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d302      	bcc.n	8007d94 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d101      	bne.n	8007d98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e04e      	b.n	8007e36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 0304 	and.w	r3, r3, #4
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d037      	beq.n	8007e16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2b80      	cmp	r3, #128	@ 0x80
 8007daa:	d034      	beq.n	8007e16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	2b40      	cmp	r3, #64	@ 0x40
 8007db0:	d031      	beq.n	8007e16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	f003 0308 	and.w	r3, r3, #8
 8007dbc:	2b08      	cmp	r3, #8
 8007dbe:	d110      	bne.n	8007de2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2208      	movs	r2, #8
 8007dc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 f839 	bl	8007e40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2208      	movs	r2, #8
 8007dd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e029      	b.n	8007e36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007dec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007df0:	d111      	bne.n	8007e16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007dfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f000 f81f 	bl	8007e40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e00f      	b.n	8007e36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	69da      	ldr	r2, [r3, #28]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	4013      	ands	r3, r2
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	bf0c      	ite	eq
 8007e26:	2301      	moveq	r3, #1
 8007e28:	2300      	movne	r3, #0
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d0a0      	beq.n	8007d76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
	...

08007e40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b095      	sub	sp, #84	@ 0x54
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e66:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e68:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e6e:	e841 2300 	strex	r3, r2, [r1]
 8007e72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1e6      	bne.n	8007e48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	3308      	adds	r3, #8
 8007e80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	e853 3f00 	ldrex	r3, [r3]
 8007e88:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e8a:	69fa      	ldr	r2, [r7, #28]
 8007e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8007f08 <UART_EndRxTransfer+0xc8>)
 8007e8e:	4013      	ands	r3, r2
 8007e90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	3308      	adds	r3, #8
 8007e98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ea0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ea2:	e841 2300 	strex	r3, r2, [r1]
 8007ea6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1e5      	bne.n	8007e7a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d118      	bne.n	8007ee8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	e853 3f00 	ldrex	r3, [r3]
 8007ec2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	f023 0310 	bic.w	r3, r3, #16
 8007eca:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ed4:	61bb      	str	r3, [r7, #24]
 8007ed6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed8:	6979      	ldr	r1, [r7, #20]
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	e841 2300 	strex	r3, r2, [r1]
 8007ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1e6      	bne.n	8007eb6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2220      	movs	r2, #32
 8007eec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007efc:	bf00      	nop
 8007efe:	3754      	adds	r7, #84	@ 0x54
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	effffffe 	.word	0xeffffffe

08007f0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d101      	bne.n	8007f22 <HAL_UARTEx_DisableFifoMode+0x16>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	e027      	b.n	8007f72 <HAL_UARTEx_DisableFifoMode+0x66>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2224      	movs	r2, #36	@ 0x24
 8007f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f022 0201 	bic.w	r2, r2, #1
 8007f48:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2220      	movs	r2, #32
 8007f64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b084      	sub	sp, #16
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d101      	bne.n	8007f96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f92:	2302      	movs	r3, #2
 8007f94:	e02d      	b.n	8007ff2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2224      	movs	r2, #36	@ 0x24
 8007fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 0201 	bic.w	r2, r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f850 	bl	8008078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800800a:	2b01      	cmp	r3, #1
 800800c:	d101      	bne.n	8008012 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800800e:	2302      	movs	r3, #2
 8008010:	e02d      	b.n	800806e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2224      	movs	r2, #36	@ 0x24
 800801e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f022 0201 	bic.w	r2, r2, #1
 8008038:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f812 	bl	8008078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2220      	movs	r2, #32
 8008060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
	...

08008078 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008084:	2b00      	cmp	r3, #0
 8008086:	d108      	bne.n	800809a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008098:	e031      	b.n	80080fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800809a:	2310      	movs	r3, #16
 800809c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800809e:	2310      	movs	r3, #16
 80080a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	0e5b      	lsrs	r3, r3, #25
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	f003 0307 	and.w	r3, r3, #7
 80080b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	0f5b      	lsrs	r3, r3, #29
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	f003 0307 	and.w	r3, r3, #7
 80080c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
 80080c4:	7b3a      	ldrb	r2, [r7, #12]
 80080c6:	4911      	ldr	r1, [pc, #68]	@ (800810c <UARTEx_SetNbDataToProcess+0x94>)
 80080c8:	5c8a      	ldrb	r2, [r1, r2]
 80080ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080ce:	7b3a      	ldrb	r2, [r7, #12]
 80080d0:	490f      	ldr	r1, [pc, #60]	@ (8008110 <UARTEx_SetNbDataToProcess+0x98>)
 80080d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80080d8:	b29a      	uxth	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
 80080e2:	7b7a      	ldrb	r2, [r7, #13]
 80080e4:	4909      	ldr	r1, [pc, #36]	@ (800810c <UARTEx_SetNbDataToProcess+0x94>)
 80080e6:	5c8a      	ldrb	r2, [r1, r2]
 80080e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080ec:	7b7a      	ldrb	r2, [r7, #13]
 80080ee:	4908      	ldr	r1, [pc, #32]	@ (8008110 <UARTEx_SetNbDataToProcess+0x98>)
 80080f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80080fe:	bf00      	nop
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	0800c7c4 	.word	0x0800c7c4
 8008110:	0800c7cc 	.word	0x0800c7cc

08008114 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008114:	b580      	push	{r7, lr}
 8008116:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008118:	4b05      	ldr	r3, [pc, #20]	@ (8008130 <SysTick_Handler+0x1c>)
 800811a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800811c:	f001 feae 	bl	8009e7c <xTaskGetSchedulerState>
 8008120:	4603      	mov	r3, r0
 8008122:	2b01      	cmp	r3, #1
 8008124:	d001      	beq.n	800812a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008126:	f000 fb6f 	bl	8008808 <xPortSysTickHandler>
  }
}
 800812a:	bf00      	nop
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	e000e010 	.word	0xe000e010

08008134 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	4a07      	ldr	r2, [pc, #28]	@ (8008160 <vApplicationGetIdleTaskMemory+0x2c>)
 8008144:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	4a06      	ldr	r2, [pc, #24]	@ (8008164 <vApplicationGetIdleTaskMemory+0x30>)
 800814a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2280      	movs	r2, #128	@ 0x80
 8008150:	601a      	str	r2, [r3, #0]
}
 8008152:	bf00      	nop
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	24000280 	.word	0x24000280
 8008164:	240002dc 	.word	0x240002dc

08008168 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	4a07      	ldr	r2, [pc, #28]	@ (8008194 <vApplicationGetTimerTaskMemory+0x2c>)
 8008178:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	4a06      	ldr	r2, [pc, #24]	@ (8008198 <vApplicationGetTimerTaskMemory+0x30>)
 800817e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008186:	601a      	str	r2, [r3, #0]
}
 8008188:	bf00      	nop
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr
 8008194:	240004dc 	.word	0x240004dc
 8008198:	24000538 	.word	0x24000538

0800819c <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d04f      	beq.n	800824e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80081ae:	2308      	movs	r3, #8
 80081b0:	425b      	negs	r3, r3
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	4413      	add	r3, r2
 80081b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	685a      	ldr	r2, [r3, #4]
 80081c0:	4b25      	ldr	r3, [pc, #148]	@ (8008258 <vPortFree+0xbc>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4013      	ands	r3, r2
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10b      	bne.n	80081e2 <vPortFree+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80081dc:	bf00      	nop
 80081de:	bf00      	nop
 80081e0:	e7fd      	b.n	80081de <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00b      	beq.n	8008202 <vPortFree+0x66>
	__asm volatile
 80081ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	60bb      	str	r3, [r7, #8]
}
 80081fc:	bf00      	nop
 80081fe:	bf00      	nop
 8008200:	e7fd      	b.n	80081fe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	4b14      	ldr	r3, [pc, #80]	@ (8008258 <vPortFree+0xbc>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4013      	ands	r3, r2
 800820c:	2b00      	cmp	r3, #0
 800820e:	d01e      	beq.n	800824e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d11a      	bne.n	800824e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	685a      	ldr	r2, [r3, #4]
 800821c:	4b0e      	ldr	r3, [pc, #56]	@ (8008258 <vPortFree+0xbc>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	43db      	mvns	r3, r3
 8008222:	401a      	ands	r2, r3
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008228:	f001 fa42 	bl	80096b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	4b0a      	ldr	r3, [pc, #40]	@ (800825c <vPortFree+0xc0>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4413      	add	r3, r2
 8008236:	4a09      	ldr	r2, [pc, #36]	@ (800825c <vPortFree+0xc0>)
 8008238:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800823a:	6938      	ldr	r0, [r7, #16]
 800823c:	f000 f812 	bl	8008264 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008240:	4b07      	ldr	r3, [pc, #28]	@ (8008260 <vPortFree+0xc4>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	3301      	adds	r3, #1
 8008246:	4a06      	ldr	r2, [pc, #24]	@ (8008260 <vPortFree+0xc4>)
 8008248:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800824a:	f001 fa3f 	bl	80096cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800824e:	bf00      	nop
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	2400094c 	.word	0x2400094c
 800825c:	24000944 	.word	0x24000944
 8008260:	24000948 	.word	0x24000948

08008264 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800826c:	4b28      	ldr	r3, [pc, #160]	@ (8008310 <prvInsertBlockIntoFreeList+0xac>)
 800826e:	60fb      	str	r3, [r7, #12]
 8008270:	e002      	b.n	8008278 <prvInsertBlockIntoFreeList+0x14>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	60fb      	str	r3, [r7, #12]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	429a      	cmp	r2, r3
 8008280:	d8f7      	bhi.n	8008272 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	4413      	add	r3, r2
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	429a      	cmp	r2, r3
 8008292:	d108      	bne.n	80082a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	441a      	add	r2, r3
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	441a      	add	r2, r3
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d118      	bne.n	80082ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	4b15      	ldr	r3, [pc, #84]	@ (8008314 <prvInsertBlockIntoFreeList+0xb0>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d00d      	beq.n	80082e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	685a      	ldr	r2, [r3, #4]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	441a      	add	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	e008      	b.n	80082f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008314 <prvInsertBlockIntoFreeList+0xb0>)
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	601a      	str	r2, [r3, #0]
 80082ea:	e003      	b.n	80082f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d002      	beq.n	8008302 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008302:	bf00      	nop
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	24000938 	.word	0x24000938
 8008314:	24000940 	.word	0x24000940

08008318 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f103 0208 	add.w	r2, r3, #8
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f04f 32ff 	mov.w	r2, #4294967295
 8008330:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f103 0208 	add.w	r2, r3, #8
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f103 0208 	add.w	r2, r3, #8
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008366:	bf00      	nop
 8008368:	370c      	adds	r7, #12
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr

08008372 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008372:	b480      	push	{r7}
 8008374:	b085      	sub	sp, #20
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	689a      	ldr	r2, [r3, #8]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	683a      	ldr	r2, [r7, #0]
 8008396:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	1c5a      	adds	r2, r3, #1
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	601a      	str	r2, [r3, #0]
}
 80083ae:	bf00      	nop
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083ba:	b480      	push	{r7}
 80083bc:	b085      	sub	sp, #20
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d0:	d103      	bne.n	80083da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	60fb      	str	r3, [r7, #12]
 80083d8:	e00c      	b.n	80083f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	3308      	adds	r3, #8
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	e002      	b.n	80083e8 <vListInsert+0x2e>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d2f6      	bcs.n	80083e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	685a      	ldr	r2, [r3, #4]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	683a      	ldr	r2, [r7, #0]
 8008402:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	601a      	str	r2, [r3, #0]
}
 8008420:	bf00      	nop
 8008422:	3714      	adds	r7, #20
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	6892      	ldr	r2, [r2, #8]
 8008442:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	6852      	ldr	r2, [r2, #4]
 800844c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	429a      	cmp	r2, r3
 8008456:	d103      	bne.n	8008460 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	1e5a      	subs	r2, r3, #1
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3714      	adds	r7, #20
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	3b04      	subs	r3, #4
 8008490:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008498:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	3b04      	subs	r3, #4
 800849e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	f023 0201 	bic.w	r2, r3, #1
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3b04      	subs	r3, #4
 80084ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084b0:	4a0c      	ldr	r2, [pc, #48]	@ (80084e4 <pxPortInitialiseStack+0x64>)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	3b14      	subs	r3, #20
 80084ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3b04      	subs	r3, #4
 80084c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f06f 0202 	mvn.w	r2, #2
 80084ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3b20      	subs	r3, #32
 80084d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084d6:	68fb      	ldr	r3, [r7, #12]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	080084e9 	.word	0x080084e9

080084e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084ee:	2300      	movs	r3, #0
 80084f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084f2:	4b13      	ldr	r3, [pc, #76]	@ (8008540 <prvTaskExitError+0x58>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fa:	d00b      	beq.n	8008514 <prvTaskExitError+0x2c>
	__asm volatile
 80084fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008500:	f383 8811 	msr	BASEPRI, r3
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	60fb      	str	r3, [r7, #12]
}
 800850e:	bf00      	nop
 8008510:	bf00      	nop
 8008512:	e7fd      	b.n	8008510 <prvTaskExitError+0x28>
	__asm volatile
 8008514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008518:	f383 8811 	msr	BASEPRI, r3
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	60bb      	str	r3, [r7, #8]
}
 8008526:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008528:	bf00      	nop
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d0fc      	beq.n	800852a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008530:	bf00      	nop
 8008532:	bf00      	nop
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	24000010 	.word	0x24000010
	...

08008550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008550:	4b07      	ldr	r3, [pc, #28]	@ (8008570 <pxCurrentTCBConst2>)
 8008552:	6819      	ldr	r1, [r3, #0]
 8008554:	6808      	ldr	r0, [r1, #0]
 8008556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800855a:	f380 8809 	msr	PSP, r0
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f04f 0000 	mov.w	r0, #0
 8008566:	f380 8811 	msr	BASEPRI, r0
 800856a:	4770      	bx	lr
 800856c:	f3af 8000 	nop.w

08008570 <pxCurrentTCBConst2>:
 8008570:	24000998 	.word	0x24000998
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop

08008578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008578:	4808      	ldr	r0, [pc, #32]	@ (800859c <prvPortStartFirstTask+0x24>)
 800857a:	6800      	ldr	r0, [r0, #0]
 800857c:	6800      	ldr	r0, [r0, #0]
 800857e:	f380 8808 	msr	MSP, r0
 8008582:	f04f 0000 	mov.w	r0, #0
 8008586:	f380 8814 	msr	CONTROL, r0
 800858a:	b662      	cpsie	i
 800858c:	b661      	cpsie	f
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	df00      	svc	0
 8008598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800859a:	bf00      	nop
 800859c:	e000ed08 	.word	0xe000ed08

080085a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085a6:	4b47      	ldr	r3, [pc, #284]	@ (80086c4 <xPortStartScheduler+0x124>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a47      	ldr	r2, [pc, #284]	@ (80086c8 <xPortStartScheduler+0x128>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d10b      	bne.n	80085c8 <xPortStartScheduler+0x28>
	__asm volatile
 80085b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	60fb      	str	r3, [r7, #12]
}
 80085c2:	bf00      	nop
 80085c4:	bf00      	nop
 80085c6:	e7fd      	b.n	80085c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085c8:	4b3e      	ldr	r3, [pc, #248]	@ (80086c4 <xPortStartScheduler+0x124>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a3f      	ldr	r2, [pc, #252]	@ (80086cc <xPortStartScheduler+0x12c>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d10b      	bne.n	80085ea <xPortStartScheduler+0x4a>
	__asm volatile
 80085d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d6:	f383 8811 	msr	BASEPRI, r3
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	613b      	str	r3, [r7, #16]
}
 80085e4:	bf00      	nop
 80085e6:	bf00      	nop
 80085e8:	e7fd      	b.n	80085e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085ea:	4b39      	ldr	r3, [pc, #228]	@ (80086d0 <xPortStartScheduler+0x130>)
 80085ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	22ff      	movs	r2, #255	@ 0xff
 80085fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	b2db      	uxtb	r3, r3
 8008602:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008604:	78fb      	ldrb	r3, [r7, #3]
 8008606:	b2db      	uxtb	r3, r3
 8008608:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800860c:	b2da      	uxtb	r2, r3
 800860e:	4b31      	ldr	r3, [pc, #196]	@ (80086d4 <xPortStartScheduler+0x134>)
 8008610:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008612:	4b31      	ldr	r3, [pc, #196]	@ (80086d8 <xPortStartScheduler+0x138>)
 8008614:	2207      	movs	r2, #7
 8008616:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008618:	e009      	b.n	800862e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800861a:	4b2f      	ldr	r3, [pc, #188]	@ (80086d8 <xPortStartScheduler+0x138>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3b01      	subs	r3, #1
 8008620:	4a2d      	ldr	r2, [pc, #180]	@ (80086d8 <xPortStartScheduler+0x138>)
 8008622:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008624:	78fb      	ldrb	r3, [r7, #3]
 8008626:	b2db      	uxtb	r3, r3
 8008628:	005b      	lsls	r3, r3, #1
 800862a:	b2db      	uxtb	r3, r3
 800862c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800862e:	78fb      	ldrb	r3, [r7, #3]
 8008630:	b2db      	uxtb	r3, r3
 8008632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008636:	2b80      	cmp	r3, #128	@ 0x80
 8008638:	d0ef      	beq.n	800861a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800863a:	4b27      	ldr	r3, [pc, #156]	@ (80086d8 <xPortStartScheduler+0x138>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f1c3 0307 	rsb	r3, r3, #7
 8008642:	2b04      	cmp	r3, #4
 8008644:	d00b      	beq.n	800865e <xPortStartScheduler+0xbe>
	__asm volatile
 8008646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864a:	f383 8811 	msr	BASEPRI, r3
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f3bf 8f4f 	dsb	sy
 8008656:	60bb      	str	r3, [r7, #8]
}
 8008658:	bf00      	nop
 800865a:	bf00      	nop
 800865c:	e7fd      	b.n	800865a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800865e:	4b1e      	ldr	r3, [pc, #120]	@ (80086d8 <xPortStartScheduler+0x138>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	021b      	lsls	r3, r3, #8
 8008664:	4a1c      	ldr	r2, [pc, #112]	@ (80086d8 <xPortStartScheduler+0x138>)
 8008666:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008668:	4b1b      	ldr	r3, [pc, #108]	@ (80086d8 <xPortStartScheduler+0x138>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008670:	4a19      	ldr	r2, [pc, #100]	@ (80086d8 <xPortStartScheduler+0x138>)
 8008672:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	b2da      	uxtb	r2, r3
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800867c:	4b17      	ldr	r3, [pc, #92]	@ (80086dc <xPortStartScheduler+0x13c>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a16      	ldr	r2, [pc, #88]	@ (80086dc <xPortStartScheduler+0x13c>)
 8008682:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008686:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008688:	4b14      	ldr	r3, [pc, #80]	@ (80086dc <xPortStartScheduler+0x13c>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a13      	ldr	r2, [pc, #76]	@ (80086dc <xPortStartScheduler+0x13c>)
 800868e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008692:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008694:	f000 f8da 	bl	800884c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008698:	4b11      	ldr	r3, [pc, #68]	@ (80086e0 <xPortStartScheduler+0x140>)
 800869a:	2200      	movs	r2, #0
 800869c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800869e:	f000 f8f9 	bl	8008894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086a2:	4b10      	ldr	r3, [pc, #64]	@ (80086e4 <xPortStartScheduler+0x144>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a0f      	ldr	r2, [pc, #60]	@ (80086e4 <xPortStartScheduler+0x144>)
 80086a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80086ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086ae:	f7ff ff63 	bl	8008578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086b2:	f001 f973 	bl	800999c <vTaskSwitchContext>
	prvTaskExitError();
 80086b6:	f7ff ff17 	bl	80084e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3718      	adds	r7, #24
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	e000ed00 	.word	0xe000ed00
 80086c8:	410fc271 	.word	0x410fc271
 80086cc:	410fc270 	.word	0x410fc270
 80086d0:	e000e400 	.word	0xe000e400
 80086d4:	24000950 	.word	0x24000950
 80086d8:	24000954 	.word	0x24000954
 80086dc:	e000ed20 	.word	0xe000ed20
 80086e0:	24000010 	.word	0x24000010
 80086e4:	e000ef34 	.word	0xe000ef34

080086e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
	__asm volatile
 80086ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	607b      	str	r3, [r7, #4]
}
 8008700:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008702:	4b10      	ldr	r3, [pc, #64]	@ (8008744 <vPortEnterCritical+0x5c>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3301      	adds	r3, #1
 8008708:	4a0e      	ldr	r2, [pc, #56]	@ (8008744 <vPortEnterCritical+0x5c>)
 800870a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800870c:	4b0d      	ldr	r3, [pc, #52]	@ (8008744 <vPortEnterCritical+0x5c>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d110      	bne.n	8008736 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008714:	4b0c      	ldr	r3, [pc, #48]	@ (8008748 <vPortEnterCritical+0x60>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00b      	beq.n	8008736 <vPortEnterCritical+0x4e>
	__asm volatile
 800871e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	603b      	str	r3, [r7, #0]
}
 8008730:	bf00      	nop
 8008732:	bf00      	nop
 8008734:	e7fd      	b.n	8008732 <vPortEnterCritical+0x4a>
	}
}
 8008736:	bf00      	nop
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	24000010 	.word	0x24000010
 8008748:	e000ed04 	.word	0xe000ed04

0800874c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008752:	4b12      	ldr	r3, [pc, #72]	@ (800879c <vPortExitCritical+0x50>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d10b      	bne.n	8008772 <vPortExitCritical+0x26>
	__asm volatile
 800875a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	607b      	str	r3, [r7, #4]
}
 800876c:	bf00      	nop
 800876e:	bf00      	nop
 8008770:	e7fd      	b.n	800876e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008772:	4b0a      	ldr	r3, [pc, #40]	@ (800879c <vPortExitCritical+0x50>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3b01      	subs	r3, #1
 8008778:	4a08      	ldr	r2, [pc, #32]	@ (800879c <vPortExitCritical+0x50>)
 800877a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800877c:	4b07      	ldr	r3, [pc, #28]	@ (800879c <vPortExitCritical+0x50>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d105      	bne.n	8008790 <vPortExitCritical+0x44>
 8008784:	2300      	movs	r3, #0
 8008786:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800878e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	24000010 	.word	0x24000010

080087a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087a0:	f3ef 8009 	mrs	r0, PSP
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	4b15      	ldr	r3, [pc, #84]	@ (8008800 <pxCurrentTCBConst>)
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	f01e 0f10 	tst.w	lr, #16
 80087b0:	bf08      	it	eq
 80087b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ba:	6010      	str	r0, [r2, #0]
 80087bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80087c4:	f380 8811 	msr	BASEPRI, r0
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f001 f8e4 	bl	800999c <vTaskSwitchContext>
 80087d4:	f04f 0000 	mov.w	r0, #0
 80087d8:	f380 8811 	msr	BASEPRI, r0
 80087dc:	bc09      	pop	{r0, r3}
 80087de:	6819      	ldr	r1, [r3, #0]
 80087e0:	6808      	ldr	r0, [r1, #0]
 80087e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e6:	f01e 0f10 	tst.w	lr, #16
 80087ea:	bf08      	it	eq
 80087ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087f0:	f380 8809 	msr	PSP, r0
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	f3af 8000 	nop.w

08008800 <pxCurrentTCBConst>:
 8008800:	24000998 	.word	0x24000998
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008804:	bf00      	nop
 8008806:	bf00      	nop

08008808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
	__asm volatile
 800880e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	607b      	str	r3, [r7, #4]
}
 8008820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008822:	f001 f801 	bl	8009828 <xTaskIncrementTick>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d003      	beq.n	8008834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800882c:	4b06      	ldr	r3, [pc, #24]	@ (8008848 <xPortSysTickHandler+0x40>)
 800882e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	2300      	movs	r3, #0
 8008836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	f383 8811 	msr	BASEPRI, r3
}
 800883e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008840:	bf00      	nop
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	e000ed04 	.word	0xe000ed04

0800884c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800884c:	b480      	push	{r7}
 800884e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008850:	4b0b      	ldr	r3, [pc, #44]	@ (8008880 <vPortSetupTimerInterrupt+0x34>)
 8008852:	2200      	movs	r2, #0
 8008854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008856:	4b0b      	ldr	r3, [pc, #44]	@ (8008884 <vPortSetupTimerInterrupt+0x38>)
 8008858:	2200      	movs	r2, #0
 800885a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800885c:	4b0a      	ldr	r3, [pc, #40]	@ (8008888 <vPortSetupTimerInterrupt+0x3c>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a0a      	ldr	r2, [pc, #40]	@ (800888c <vPortSetupTimerInterrupt+0x40>)
 8008862:	fba2 2303 	umull	r2, r3, r2, r3
 8008866:	099b      	lsrs	r3, r3, #6
 8008868:	4a09      	ldr	r2, [pc, #36]	@ (8008890 <vPortSetupTimerInterrupt+0x44>)
 800886a:	3b01      	subs	r3, #1
 800886c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800886e:	4b04      	ldr	r3, [pc, #16]	@ (8008880 <vPortSetupTimerInterrupt+0x34>)
 8008870:	2207      	movs	r2, #7
 8008872:	601a      	str	r2, [r3, #0]
}
 8008874:	bf00      	nop
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	e000e010 	.word	0xe000e010
 8008884:	e000e018 	.word	0xe000e018
 8008888:	24000000 	.word	0x24000000
 800888c:	10624dd3 	.word	0x10624dd3
 8008890:	e000e014 	.word	0xe000e014

08008894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008894:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80088a4 <vPortEnableVFP+0x10>
 8008898:	6801      	ldr	r1, [r0, #0]
 800889a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800889e:	6001      	str	r1, [r0, #0]
 80088a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80088a2:	bf00      	nop
 80088a4:	e000ed88 	.word	0xe000ed88

080088a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088ae:	f3ef 8305 	mrs	r3, IPSR
 80088b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2b0f      	cmp	r3, #15
 80088b8:	d915      	bls.n	80088e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088ba:	4a18      	ldr	r2, [pc, #96]	@ (800891c <vPortValidateInterruptPriority+0x74>)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	4413      	add	r3, r2
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088c4:	4b16      	ldr	r3, [pc, #88]	@ (8008920 <vPortValidateInterruptPriority+0x78>)
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	7afa      	ldrb	r2, [r7, #11]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d20b      	bcs.n	80088e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	607b      	str	r3, [r7, #4]
}
 80088e0:	bf00      	nop
 80088e2:	bf00      	nop
 80088e4:	e7fd      	b.n	80088e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008924 <vPortValidateInterruptPriority+0x7c>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80088ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008928 <vPortValidateInterruptPriority+0x80>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d90b      	bls.n	800890e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80088f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fa:	f383 8811 	msr	BASEPRI, r3
 80088fe:	f3bf 8f6f 	isb	sy
 8008902:	f3bf 8f4f 	dsb	sy
 8008906:	603b      	str	r3, [r7, #0]
}
 8008908:	bf00      	nop
 800890a:	bf00      	nop
 800890c:	e7fd      	b.n	800890a <vPortValidateInterruptPriority+0x62>
	}
 800890e:	bf00      	nop
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	e000e3f0 	.word	0xe000e3f0
 8008920:	24000950 	.word	0x24000950
 8008924:	e000ed0c 	.word	0xe000ed0c
 8008928:	24000954 	.word	0x24000954

0800892c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10b      	bne.n	8008958 <xQueueGenericReset+0x2c>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	60bb      	str	r3, [r7, #8]
}
 8008952:	bf00      	nop
 8008954:	bf00      	nop
 8008956:	e7fd      	b.n	8008954 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008958:	f7ff fec6 	bl	80086e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008964:	68f9      	ldr	r1, [r7, #12]
 8008966:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008968:	fb01 f303 	mul.w	r3, r1, r3
 800896c:	441a      	add	r2, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2200      	movs	r2, #0
 8008976:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008988:	3b01      	subs	r3, #1
 800898a:	68f9      	ldr	r1, [r7, #12]
 800898c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800898e:	fb01 f303 	mul.w	r3, r1, r3
 8008992:	441a      	add	r2, r3
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	22ff      	movs	r2, #255	@ 0xff
 800899c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	22ff      	movs	r2, #255	@ 0xff
 80089a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d114      	bne.n	80089d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d01a      	beq.n	80089ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3310      	adds	r3, #16
 80089ba:	4618      	mov	r0, r3
 80089bc:	f001 f89e 	bl	8009afc <xTaskRemoveFromEventList>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d012      	beq.n	80089ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80089c6:	4b0d      	ldr	r3, [pc, #52]	@ (80089fc <xQueueGenericReset+0xd0>)
 80089c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089cc:	601a      	str	r2, [r3, #0]
 80089ce:	f3bf 8f4f 	dsb	sy
 80089d2:	f3bf 8f6f 	isb	sy
 80089d6:	e009      	b.n	80089ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	3310      	adds	r3, #16
 80089dc:	4618      	mov	r0, r3
 80089de:	f7ff fc9b 	bl	8008318 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	3324      	adds	r3, #36	@ 0x24
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7ff fc96 	bl	8008318 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80089ec:	f7ff feae 	bl	800874c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80089f0:	2301      	movs	r3, #1
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	e000ed04 	.word	0xe000ed04

08008a00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b08e      	sub	sp, #56	@ 0x38
 8008a04:	af02      	add	r7, sp, #8
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
 8008a0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10b      	bne.n	8008a2c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a18:	f383 8811 	msr	BASEPRI, r3
 8008a1c:	f3bf 8f6f 	isb	sy
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008a26:	bf00      	nop
 8008a28:	bf00      	nop
 8008a2a:	e7fd      	b.n	8008a28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10b      	bne.n	8008a4a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a44:	bf00      	nop
 8008a46:	bf00      	nop
 8008a48:	e7fd      	b.n	8008a46 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <xQueueGenericCreateStatic+0x56>
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <xQueueGenericCreateStatic+0x5a>
 8008a56:	2301      	movs	r3, #1
 8008a58:	e000      	b.n	8008a5c <xQueueGenericCreateStatic+0x5c>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d10b      	bne.n	8008a78 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	623b      	str	r3, [r7, #32]
}
 8008a72:	bf00      	nop
 8008a74:	bf00      	nop
 8008a76:	e7fd      	b.n	8008a74 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d102      	bne.n	8008a84 <xQueueGenericCreateStatic+0x84>
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d101      	bne.n	8008a88 <xQueueGenericCreateStatic+0x88>
 8008a84:	2301      	movs	r3, #1
 8008a86:	e000      	b.n	8008a8a <xQueueGenericCreateStatic+0x8a>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10b      	bne.n	8008aa6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	61fb      	str	r3, [r7, #28]
}
 8008aa0:	bf00      	nop
 8008aa2:	bf00      	nop
 8008aa4:	e7fd      	b.n	8008aa2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008aa6:	2350      	movs	r3, #80	@ 0x50
 8008aa8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	2b50      	cmp	r3, #80	@ 0x50
 8008aae:	d00b      	beq.n	8008ac8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	61bb      	str	r3, [r7, #24]
}
 8008ac2:	bf00      	nop
 8008ac4:	bf00      	nop
 8008ac6:	e7fd      	b.n	8008ac4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008ac8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00d      	beq.n	8008af0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008adc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	68b9      	ldr	r1, [r7, #8]
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f000 f805 	bl	8008afa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3730      	adds	r7, #48	@ 0x30
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b084      	sub	sp, #16
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	60f8      	str	r0, [r7, #12]
 8008b02:	60b9      	str	r1, [r7, #8]
 8008b04:	607a      	str	r2, [r7, #4]
 8008b06:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d103      	bne.n	8008b16 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	69ba      	ldr	r2, [r7, #24]
 8008b12:	601a      	str	r2, [r3, #0]
 8008b14:	e002      	b.n	8008b1c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b28:	2101      	movs	r1, #1
 8008b2a:	69b8      	ldr	r0, [r7, #24]
 8008b2c:	f7ff fefe 	bl	800892c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	78fa      	ldrb	r2, [r7, #3]
 8008b34:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008b38:	bf00      	nop
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b08e      	sub	sp, #56	@ 0x38
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
 8008b4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10b      	bne.n	8008b74 <xQueueGenericSend+0x34>
	__asm volatile
 8008b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b60:	f383 8811 	msr	BASEPRI, r3
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008b6e:	bf00      	nop
 8008b70:	bf00      	nop
 8008b72:	e7fd      	b.n	8008b70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d103      	bne.n	8008b82 <xQueueGenericSend+0x42>
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <xQueueGenericSend+0x46>
 8008b82:	2301      	movs	r3, #1
 8008b84:	e000      	b.n	8008b88 <xQueueGenericSend+0x48>
 8008b86:	2300      	movs	r3, #0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10b      	bne.n	8008ba4 <xQueueGenericSend+0x64>
	__asm volatile
 8008b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b90:	f383 8811 	msr	BASEPRI, r3
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008b9e:	bf00      	nop
 8008ba0:	bf00      	nop
 8008ba2:	e7fd      	b.n	8008ba0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d103      	bne.n	8008bb2 <xQueueGenericSend+0x72>
 8008baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d101      	bne.n	8008bb6 <xQueueGenericSend+0x76>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e000      	b.n	8008bb8 <xQueueGenericSend+0x78>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10b      	bne.n	8008bd4 <xQueueGenericSend+0x94>
	__asm volatile
 8008bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	623b      	str	r3, [r7, #32]
}
 8008bce:	bf00      	nop
 8008bd0:	bf00      	nop
 8008bd2:	e7fd      	b.n	8008bd0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bd4:	f001 f952 	bl	8009e7c <xTaskGetSchedulerState>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d102      	bne.n	8008be4 <xQueueGenericSend+0xa4>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <xQueueGenericSend+0xa8>
 8008be4:	2301      	movs	r3, #1
 8008be6:	e000      	b.n	8008bea <xQueueGenericSend+0xaa>
 8008be8:	2300      	movs	r3, #0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d10b      	bne.n	8008c06 <xQueueGenericSend+0xc6>
	__asm volatile
 8008bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	61fb      	str	r3, [r7, #28]
}
 8008c00:	bf00      	nop
 8008c02:	bf00      	nop
 8008c04:	e7fd      	b.n	8008c02 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c06:	f7ff fd6f 	bl	80086e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d302      	bcc.n	8008c1c <xQueueGenericSend+0xdc>
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d129      	bne.n	8008c70 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c1c:	683a      	ldr	r2, [r7, #0]
 8008c1e:	68b9      	ldr	r1, [r7, #8]
 8008c20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c22:	f000 fa0f 	bl	8009044 <prvCopyDataToQueue>
 8008c26:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d010      	beq.n	8008c52 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c32:	3324      	adds	r3, #36	@ 0x24
 8008c34:	4618      	mov	r0, r3
 8008c36:	f000 ff61 	bl	8009afc <xTaskRemoveFromEventList>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d013      	beq.n	8008c68 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008c40:	4b3f      	ldr	r3, [pc, #252]	@ (8008d40 <xQueueGenericSend+0x200>)
 8008c42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c46:	601a      	str	r2, [r3, #0]
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	e00a      	b.n	8008c68 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d007      	beq.n	8008c68 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008c58:	4b39      	ldr	r3, [pc, #228]	@ (8008d40 <xQueueGenericSend+0x200>)
 8008c5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008c68:	f7ff fd70 	bl	800874c <vPortExitCritical>
				return pdPASS;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e063      	b.n	8008d38 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d103      	bne.n	8008c7e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c76:	f7ff fd69 	bl	800874c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	e05c      	b.n	8008d38 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d106      	bne.n	8008c92 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c84:	f107 0314 	add.w	r3, r7, #20
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f000 ff9b 	bl	8009bc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c92:	f7ff fd5b 	bl	800874c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c96:	f000 fd0b 	bl	80096b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c9a:	f7ff fd25 	bl	80086e8 <vPortEnterCritical>
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ca4:	b25b      	sxtb	r3, r3
 8008ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008caa:	d103      	bne.n	8008cb4 <xQueueGenericSend+0x174>
 8008cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008cba:	b25b      	sxtb	r3, r3
 8008cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc0:	d103      	bne.n	8008cca <xQueueGenericSend+0x18a>
 8008cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cca:	f7ff fd3f 	bl	800874c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cce:	1d3a      	adds	r2, r7, #4
 8008cd0:	f107 0314 	add.w	r3, r7, #20
 8008cd4:	4611      	mov	r1, r2
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f000 ff8a 	bl	8009bf0 <xTaskCheckForTimeOut>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d124      	bne.n	8008d2c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008ce2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ce4:	f000 faa6 	bl	8009234 <prvIsQueueFull>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d018      	beq.n	8008d20 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf0:	3310      	adds	r3, #16
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	4611      	mov	r1, r2
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 feae 	bl	8009a58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008cfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cfe:	f000 fa31 	bl	8009164 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008d02:	f000 fce3 	bl	80096cc <xTaskResumeAll>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f47f af7c 	bne.w	8008c06 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8008d40 <xQueueGenericSend+0x200>)
 8008d10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	f3bf 8f4f 	dsb	sy
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	e772      	b.n	8008c06 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d22:	f000 fa1f 	bl	8009164 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d26:	f000 fcd1 	bl	80096cc <xTaskResumeAll>
 8008d2a:	e76c      	b.n	8008c06 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008d2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d2e:	f000 fa19 	bl	8009164 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d32:	f000 fccb 	bl	80096cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008d36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3738      	adds	r7, #56	@ 0x38
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	e000ed04 	.word	0xe000ed04

08008d44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b090      	sub	sp, #64	@ 0x40
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
 8008d50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d10b      	bne.n	8008d74 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008d6e:	bf00      	nop
 8008d70:	bf00      	nop
 8008d72:	e7fd      	b.n	8008d70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d103      	bne.n	8008d82 <xQueueGenericSendFromISR+0x3e>
 8008d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d101      	bne.n	8008d86 <xQueueGenericSendFromISR+0x42>
 8008d82:	2301      	movs	r3, #1
 8008d84:	e000      	b.n	8008d88 <xQueueGenericSendFromISR+0x44>
 8008d86:	2300      	movs	r3, #0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d10b      	bne.n	8008da4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d90:	f383 8811 	msr	BASEPRI, r3
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008d9e:	bf00      	nop
 8008da0:	bf00      	nop
 8008da2:	e7fd      	b.n	8008da0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d103      	bne.n	8008db2 <xQueueGenericSendFromISR+0x6e>
 8008daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d101      	bne.n	8008db6 <xQueueGenericSendFromISR+0x72>
 8008db2:	2301      	movs	r3, #1
 8008db4:	e000      	b.n	8008db8 <xQueueGenericSendFromISR+0x74>
 8008db6:	2300      	movs	r3, #0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10b      	bne.n	8008dd4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc0:	f383 8811 	msr	BASEPRI, r3
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	623b      	str	r3, [r7, #32]
}
 8008dce:	bf00      	nop
 8008dd0:	bf00      	nop
 8008dd2:	e7fd      	b.n	8008dd0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008dd4:	f7ff fd68 	bl	80088a8 <vPortValidateInterruptPriority>
	__asm volatile
 8008dd8:	f3ef 8211 	mrs	r2, BASEPRI
 8008ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	61fa      	str	r2, [r7, #28]
 8008dee:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008df0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008df2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d302      	bcc.n	8008e06 <xQueueGenericSendFromISR+0xc2>
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d12f      	bne.n	8008e66 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	68b9      	ldr	r1, [r7, #8]
 8008e1a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008e1c:	f000 f912 	bl	8009044 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e20:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e28:	d112      	bne.n	8008e50 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d016      	beq.n	8008e60 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e34:	3324      	adds	r3, #36	@ 0x24
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 fe60 	bl	8009afc <xTaskRemoveFromEventList>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00e      	beq.n	8008e60 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00b      	beq.n	8008e60 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	e007      	b.n	8008e60 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008e54:	3301      	adds	r3, #1
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	b25a      	sxtb	r2, r3
 8008e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008e60:	2301      	movs	r3, #1
 8008e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008e64:	e001      	b.n	8008e6a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e6c:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	f383 8811 	msr	BASEPRI, r3
}
 8008e74:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3740      	adds	r7, #64	@ 0x40
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b08c      	sub	sp, #48	@ 0x30
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10b      	bne.n	8008eb2 <xQueueReceive+0x32>
	__asm volatile
 8008e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e9e:	f383 8811 	msr	BASEPRI, r3
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	623b      	str	r3, [r7, #32]
}
 8008eac:	bf00      	nop
 8008eae:	bf00      	nop
 8008eb0:	e7fd      	b.n	8008eae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d103      	bne.n	8008ec0 <xQueueReceive+0x40>
 8008eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d101      	bne.n	8008ec4 <xQueueReceive+0x44>
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e000      	b.n	8008ec6 <xQueueReceive+0x46>
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d10b      	bne.n	8008ee2 <xQueueReceive+0x62>
	__asm volatile
 8008eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ece:	f383 8811 	msr	BASEPRI, r3
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	61fb      	str	r3, [r7, #28]
}
 8008edc:	bf00      	nop
 8008ede:	bf00      	nop
 8008ee0:	e7fd      	b.n	8008ede <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ee2:	f000 ffcb 	bl	8009e7c <xTaskGetSchedulerState>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d102      	bne.n	8008ef2 <xQueueReceive+0x72>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d101      	bne.n	8008ef6 <xQueueReceive+0x76>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e000      	b.n	8008ef8 <xQueueReceive+0x78>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10b      	bne.n	8008f14 <xQueueReceive+0x94>
	__asm volatile
 8008efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f00:	f383 8811 	msr	BASEPRI, r3
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	61bb      	str	r3, [r7, #24]
}
 8008f0e:	bf00      	nop
 8008f10:	bf00      	nop
 8008f12:	e7fd      	b.n	8008f10 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f14:	f7ff fbe8 	bl	80086e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f1c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d01f      	beq.n	8008f64 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f24:	68b9      	ldr	r1, [r7, #8]
 8008f26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f28:	f000 f8f6 	bl	8009118 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2e:	1e5a      	subs	r2, r3, #1
 8008f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f32:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f36:	691b      	ldr	r3, [r3, #16]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00f      	beq.n	8008f5c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f3e:	3310      	adds	r3, #16
 8008f40:	4618      	mov	r0, r3
 8008f42:	f000 fddb 	bl	8009afc <xTaskRemoveFromEventList>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d007      	beq.n	8008f5c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f4c:	4b3c      	ldr	r3, [pc, #240]	@ (8009040 <xQueueReceive+0x1c0>)
 8008f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f52:	601a      	str	r2, [r3, #0]
 8008f54:	f3bf 8f4f 	dsb	sy
 8008f58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f5c:	f7ff fbf6 	bl	800874c <vPortExitCritical>
				return pdPASS;
 8008f60:	2301      	movs	r3, #1
 8008f62:	e069      	b.n	8009038 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d103      	bne.n	8008f72 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f6a:	f7ff fbef 	bl	800874c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	e062      	b.n	8009038 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d106      	bne.n	8008f86 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f78:	f107 0310 	add.w	r3, r7, #16
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f000 fe21 	bl	8009bc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f82:	2301      	movs	r3, #1
 8008f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f86:	f7ff fbe1 	bl	800874c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f8a:	f000 fb91 	bl	80096b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f8e:	f7ff fbab 	bl	80086e8 <vPortEnterCritical>
 8008f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f98:	b25b      	sxtb	r3, r3
 8008f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f9e:	d103      	bne.n	8008fa8 <xQueueReceive+0x128>
 8008fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008faa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fae:	b25b      	sxtb	r3, r3
 8008fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb4:	d103      	bne.n	8008fbe <xQueueReceive+0x13e>
 8008fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fbe:	f7ff fbc5 	bl	800874c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fc2:	1d3a      	adds	r2, r7, #4
 8008fc4:	f107 0310 	add.w	r3, r7, #16
 8008fc8:	4611      	mov	r1, r2
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f000 fe10 	bl	8009bf0 <xTaskCheckForTimeOut>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d123      	bne.n	800901e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fd8:	f000 f916 	bl	8009208 <prvIsQueueEmpty>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d017      	beq.n	8009012 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe4:	3324      	adds	r3, #36	@ 0x24
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	4611      	mov	r1, r2
 8008fea:	4618      	mov	r0, r3
 8008fec:	f000 fd34 	bl	8009a58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ff0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ff2:	f000 f8b7 	bl	8009164 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ff6:	f000 fb69 	bl	80096cc <xTaskResumeAll>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d189      	bne.n	8008f14 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009000:	4b0f      	ldr	r3, [pc, #60]	@ (8009040 <xQueueReceive+0x1c0>)
 8009002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	e780      	b.n	8008f14 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009012:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009014:	f000 f8a6 	bl	8009164 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009018:	f000 fb58 	bl	80096cc <xTaskResumeAll>
 800901c:	e77a      	b.n	8008f14 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800901e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009020:	f000 f8a0 	bl	8009164 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009024:	f000 fb52 	bl	80096cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009028:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800902a:	f000 f8ed 	bl	8009208 <prvIsQueueEmpty>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	f43f af6f 	beq.w	8008f14 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009036:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009038:	4618      	mov	r0, r3
 800903a:	3730      	adds	r7, #48	@ 0x30
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	e000ed04 	.word	0xe000ed04

08009044 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009050:	2300      	movs	r3, #0
 8009052:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009058:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10d      	bne.n	800907e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d14d      	bne.n	8009106 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	4618      	mov	r0, r3
 8009070:	f000 ff22 	bl	8009eb8 <xTaskPriorityDisinherit>
 8009074:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	609a      	str	r2, [r3, #8]
 800907c:	e043      	b.n	8009106 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d119      	bne.n	80090b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6858      	ldr	r0, [r3, #4]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800908c:	461a      	mov	r2, r3
 800908e:	68b9      	ldr	r1, [r7, #8]
 8009090:	f001 fb5c 	bl	800a74c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800909c:	441a      	add	r2, r3
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	685a      	ldr	r2, [r3, #4]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d32b      	bcc.n	8009106 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	605a      	str	r2, [r3, #4]
 80090b6:	e026      	b.n	8009106 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	68d8      	ldr	r0, [r3, #12]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090c0:	461a      	mov	r2, r3
 80090c2:	68b9      	ldr	r1, [r7, #8]
 80090c4:	f001 fb42 	bl	800a74c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	68da      	ldr	r2, [r3, #12]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090d0:	425b      	negs	r3, r3
 80090d2:	441a      	add	r2, r3
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	68da      	ldr	r2, [r3, #12]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d207      	bcs.n	80090f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	689a      	ldr	r2, [r3, #8]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ec:	425b      	negs	r3, r3
 80090ee:	441a      	add	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d105      	bne.n	8009106 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d002      	beq.n	8009106 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	3b01      	subs	r3, #1
 8009104:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	1c5a      	adds	r2, r3, #1
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800910e:	697b      	ldr	r3, [r7, #20]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3718      	adds	r7, #24
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009126:	2b00      	cmp	r3, #0
 8009128:	d018      	beq.n	800915c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	68da      	ldr	r2, [r3, #12]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009132:	441a      	add	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	68da      	ldr	r2, [r3, #12]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	429a      	cmp	r2, r3
 8009142:	d303      	bcc.n	800914c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	68d9      	ldr	r1, [r3, #12]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009154:	461a      	mov	r2, r3
 8009156:	6838      	ldr	r0, [r7, #0]
 8009158:	f001 faf8 	bl	800a74c <memcpy>
	}
}
 800915c:	bf00      	nop
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800916c:	f7ff fabc 	bl	80086e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009176:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009178:	e011      	b.n	800919e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800917e:	2b00      	cmp	r3, #0
 8009180:	d012      	beq.n	80091a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	3324      	adds	r3, #36	@ 0x24
 8009186:	4618      	mov	r0, r3
 8009188:	f000 fcb8 	bl	8009afc <xTaskRemoveFromEventList>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009192:	f000 fd91 	bl	8009cb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009196:	7bfb      	ldrb	r3, [r7, #15]
 8009198:	3b01      	subs	r3, #1
 800919a:	b2db      	uxtb	r3, r3
 800919c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800919e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	dce9      	bgt.n	800917a <prvUnlockQueue+0x16>
 80091a6:	e000      	b.n	80091aa <prvUnlockQueue+0x46>
					break;
 80091a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	22ff      	movs	r2, #255	@ 0xff
 80091ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80091b2:	f7ff facb 	bl	800874c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80091b6:	f7ff fa97 	bl	80086e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80091c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091c2:	e011      	b.n	80091e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d012      	beq.n	80091f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	3310      	adds	r3, #16
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 fc93 	bl	8009afc <xTaskRemoveFromEventList>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80091dc:	f000 fd6c 	bl	8009cb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80091e0:	7bbb      	ldrb	r3, [r7, #14]
 80091e2:	3b01      	subs	r3, #1
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	dce9      	bgt.n	80091c4 <prvUnlockQueue+0x60>
 80091f0:	e000      	b.n	80091f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80091f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	22ff      	movs	r2, #255	@ 0xff
 80091f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80091fc:	f7ff faa6 	bl	800874c <vPortExitCritical>
}
 8009200:	bf00      	nop
 8009202:	3710      	adds	r7, #16
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009210:	f7ff fa6a 	bl	80086e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009218:	2b00      	cmp	r3, #0
 800921a:	d102      	bne.n	8009222 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800921c:	2301      	movs	r3, #1
 800921e:	60fb      	str	r3, [r7, #12]
 8009220:	e001      	b.n	8009226 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009222:	2300      	movs	r3, #0
 8009224:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009226:	f7ff fa91 	bl	800874c <vPortExitCritical>

	return xReturn;
 800922a:	68fb      	ldr	r3, [r7, #12]
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800923c:	f7ff fa54 	bl	80086e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009248:	429a      	cmp	r2, r3
 800924a:	d102      	bne.n	8009252 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800924c:	2301      	movs	r3, #1
 800924e:	60fb      	str	r3, [r7, #12]
 8009250:	e001      	b.n	8009256 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009252:	2300      	movs	r3, #0
 8009254:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009256:	f7ff fa79 	bl	800874c <vPortExitCritical>

	return xReturn;
 800925a:	68fb      	ldr	r3, [r7, #12]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800926e:	2300      	movs	r3, #0
 8009270:	60fb      	str	r3, [r7, #12]
 8009272:	e014      	b.n	800929e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009274:	4a0f      	ldr	r2, [pc, #60]	@ (80092b4 <vQueueAddToRegistry+0x50>)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10b      	bne.n	8009298 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009280:	490c      	ldr	r1, [pc, #48]	@ (80092b4 <vQueueAddToRegistry+0x50>)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	683a      	ldr	r2, [r7, #0]
 8009286:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800928a:	4a0a      	ldr	r2, [pc, #40]	@ (80092b4 <vQueueAddToRegistry+0x50>)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	00db      	lsls	r3, r3, #3
 8009290:	4413      	add	r3, r2
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009296:	e006      	b.n	80092a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	3301      	adds	r3, #1
 800929c:	60fb      	str	r3, [r7, #12]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2b07      	cmp	r3, #7
 80092a2:	d9e7      	bls.n	8009274 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80092a4:	bf00      	nop
 80092a6:	bf00      	nop
 80092a8:	3714      	adds	r7, #20
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	24000958 	.word	0x24000958

080092b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b086      	sub	sp, #24
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80092c8:	f7ff fa0e 	bl	80086e8 <vPortEnterCritical>
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80092d2:	b25b      	sxtb	r3, r3
 80092d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d8:	d103      	bne.n	80092e2 <vQueueWaitForMessageRestricted+0x2a>
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80092e8:	b25b      	sxtb	r3, r3
 80092ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ee:	d103      	bne.n	80092f8 <vQueueWaitForMessageRestricted+0x40>
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80092f8:	f7ff fa28 	bl	800874c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009300:	2b00      	cmp	r3, #0
 8009302:	d106      	bne.n	8009312 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	3324      	adds	r3, #36	@ 0x24
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	68b9      	ldr	r1, [r7, #8]
 800930c:	4618      	mov	r0, r3
 800930e:	f000 fbc9 	bl	8009aa4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009312:	6978      	ldr	r0, [r7, #20]
 8009314:	f7ff ff26 	bl	8009164 <prvUnlockQueue>
	}
 8009318:	bf00      	nop
 800931a:	3718      	adds	r7, #24
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009320:	b580      	push	{r7, lr}
 8009322:	b08e      	sub	sp, #56	@ 0x38
 8009324:	af04      	add	r7, sp, #16
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
 800932c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800932e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009330:	2b00      	cmp	r3, #0
 8009332:	d10b      	bne.n	800934c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	623b      	str	r3, [r7, #32]
}
 8009346:	bf00      	nop
 8009348:	bf00      	nop
 800934a:	e7fd      	b.n	8009348 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800934c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800934e:	2b00      	cmp	r3, #0
 8009350:	d10b      	bne.n	800936a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	61fb      	str	r3, [r7, #28]
}
 8009364:	bf00      	nop
 8009366:	bf00      	nop
 8009368:	e7fd      	b.n	8009366 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800936a:	235c      	movs	r3, #92	@ 0x5c
 800936c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	2b5c      	cmp	r3, #92	@ 0x5c
 8009372:	d00b      	beq.n	800938c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	61bb      	str	r3, [r7, #24]
}
 8009386:	bf00      	nop
 8009388:	bf00      	nop
 800938a:	e7fd      	b.n	8009388 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800938c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800938e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009390:	2b00      	cmp	r3, #0
 8009392:	d01e      	beq.n	80093d2 <xTaskCreateStatic+0xb2>
 8009394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009396:	2b00      	cmp	r3, #0
 8009398:	d01b      	beq.n	80093d2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800939a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800939e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093a2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80093a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a6:	2202      	movs	r2, #2
 80093a8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80093ac:	2300      	movs	r3, #0
 80093ae:	9303      	str	r3, [sp, #12]
 80093b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b2:	9302      	str	r3, [sp, #8]
 80093b4:	f107 0314 	add.w	r3, r7, #20
 80093b8:	9301      	str	r3, [sp, #4]
 80093ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	68b9      	ldr	r1, [r7, #8]
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f000 f80b 	bl	80093e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80093cc:	f000 f898 	bl	8009500 <prvAddNewTaskToReadyList>
 80093d0:	e001      	b.n	80093d6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80093d2:	2300      	movs	r3, #0
 80093d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80093d6:	697b      	ldr	r3, [r7, #20]
	}
 80093d8:	4618      	mov	r0, r3
 80093da:	3728      	adds	r7, #40	@ 0x28
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b088      	sub	sp, #32
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80093ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	461a      	mov	r2, r3
 80093f8:	21a5      	movs	r1, #165	@ 0xa5
 80093fa:	f001 f97b 	bl	800a6f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80093fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009400:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009402:	6879      	ldr	r1, [r7, #4]
 8009404:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8009408:	440b      	add	r3, r1
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	f023 0307 	bic.w	r3, r3, #7
 8009416:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	f003 0307 	and.w	r3, r3, #7
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00b      	beq.n	800943a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	617b      	str	r3, [r7, #20]
}
 8009434:	bf00      	nop
 8009436:	bf00      	nop
 8009438:	e7fd      	b.n	8009436 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d01f      	beq.n	8009480 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009440:	2300      	movs	r3, #0
 8009442:	61fb      	str	r3, [r7, #28]
 8009444:	e012      	b.n	800946c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009446:	68ba      	ldr	r2, [r7, #8]
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	4413      	add	r3, r2
 800944c:	7819      	ldrb	r1, [r3, #0]
 800944e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	4413      	add	r3, r2
 8009454:	3334      	adds	r3, #52	@ 0x34
 8009456:	460a      	mov	r2, r1
 8009458:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800945a:	68ba      	ldr	r2, [r7, #8]
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	4413      	add	r3, r2
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d006      	beq.n	8009474 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	3301      	adds	r3, #1
 800946a:	61fb      	str	r3, [r7, #28]
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	2b0f      	cmp	r3, #15
 8009470:	d9e9      	bls.n	8009446 <prvInitialiseNewTask+0x66>
 8009472:	e000      	b.n	8009476 <prvInitialiseNewTask+0x96>
			{
				break;
 8009474:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009478:	2200      	movs	r2, #0
 800947a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800947e:	e003      	b.n	8009488 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009482:	2200      	movs	r2, #0
 8009484:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948a:	2b37      	cmp	r3, #55	@ 0x37
 800948c:	d901      	bls.n	8009492 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800948e:	2337      	movs	r3, #55	@ 0x37
 8009490:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009494:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009496:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800949c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800949e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a0:	2200      	movs	r2, #0
 80094a2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80094a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a6:	3304      	adds	r3, #4
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7fe ff55 	bl	8008358 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80094ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b0:	3318      	adds	r3, #24
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fe ff50 	bl	8008358 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80094b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80094c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80094c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094cc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80094ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d0:	2200      	movs	r2, #0
 80094d2:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80094d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	68f9      	ldr	r1, [r7, #12]
 80094e0:	69b8      	ldr	r0, [r7, #24]
 80094e2:	f7fe ffcd 	bl	8008480 <pxPortInitialiseStack>
 80094e6:	4602      	mov	r2, r0
 80094e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80094ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d002      	beq.n	80094f8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80094f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094f8:	bf00      	nop
 80094fa:	3720      	adds	r7, #32
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009508:	f7ff f8ee 	bl	80086e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800950c:	4b2d      	ldr	r3, [pc, #180]	@ (80095c4 <prvAddNewTaskToReadyList+0xc4>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	3301      	adds	r3, #1
 8009512:	4a2c      	ldr	r2, [pc, #176]	@ (80095c4 <prvAddNewTaskToReadyList+0xc4>)
 8009514:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009516:	4b2c      	ldr	r3, [pc, #176]	@ (80095c8 <prvAddNewTaskToReadyList+0xc8>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d109      	bne.n	8009532 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800951e:	4a2a      	ldr	r2, [pc, #168]	@ (80095c8 <prvAddNewTaskToReadyList+0xc8>)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009524:	4b27      	ldr	r3, [pc, #156]	@ (80095c4 <prvAddNewTaskToReadyList+0xc4>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d110      	bne.n	800954e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800952c:	f000 fbe8 	bl	8009d00 <prvInitialiseTaskLists>
 8009530:	e00d      	b.n	800954e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009532:	4b26      	ldr	r3, [pc, #152]	@ (80095cc <prvAddNewTaskToReadyList+0xcc>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d109      	bne.n	800954e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800953a:	4b23      	ldr	r3, [pc, #140]	@ (80095c8 <prvAddNewTaskToReadyList+0xc8>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009544:	429a      	cmp	r2, r3
 8009546:	d802      	bhi.n	800954e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009548:	4a1f      	ldr	r2, [pc, #124]	@ (80095c8 <prvAddNewTaskToReadyList+0xc8>)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800954e:	4b20      	ldr	r3, [pc, #128]	@ (80095d0 <prvAddNewTaskToReadyList+0xd0>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	3301      	adds	r3, #1
 8009554:	4a1e      	ldr	r2, [pc, #120]	@ (80095d0 <prvAddNewTaskToReadyList+0xd0>)
 8009556:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009558:	4b1d      	ldr	r3, [pc, #116]	@ (80095d0 <prvAddNewTaskToReadyList+0xd0>)
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009564:	4b1b      	ldr	r3, [pc, #108]	@ (80095d4 <prvAddNewTaskToReadyList+0xd4>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	429a      	cmp	r2, r3
 800956a:	d903      	bls.n	8009574 <prvAddNewTaskToReadyList+0x74>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009570:	4a18      	ldr	r2, [pc, #96]	@ (80095d4 <prvAddNewTaskToReadyList+0xd4>)
 8009572:	6013      	str	r3, [r2, #0]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009578:	4613      	mov	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4413      	add	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	4a15      	ldr	r2, [pc, #84]	@ (80095d8 <prvAddNewTaskToReadyList+0xd8>)
 8009582:	441a      	add	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	3304      	adds	r3, #4
 8009588:	4619      	mov	r1, r3
 800958a:	4610      	mov	r0, r2
 800958c:	f7fe fef1 	bl	8008372 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009590:	f7ff f8dc 	bl	800874c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009594:	4b0d      	ldr	r3, [pc, #52]	@ (80095cc <prvAddNewTaskToReadyList+0xcc>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d00e      	beq.n	80095ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800959c:	4b0a      	ldr	r3, [pc, #40]	@ (80095c8 <prvAddNewTaskToReadyList+0xc8>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d207      	bcs.n	80095ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80095aa:	4b0c      	ldr	r3, [pc, #48]	@ (80095dc <prvAddNewTaskToReadyList+0xdc>)
 80095ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095b0:	601a      	str	r2, [r3, #0]
 80095b2:	f3bf 8f4f 	dsb	sy
 80095b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095ba:	bf00      	nop
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	24000e6c 	.word	0x24000e6c
 80095c8:	24000998 	.word	0x24000998
 80095cc:	24000e78 	.word	0x24000e78
 80095d0:	24000e88 	.word	0x24000e88
 80095d4:	24000e74 	.word	0x24000e74
 80095d8:	2400099c 	.word	0x2400099c
 80095dc:	e000ed04 	.word	0xe000ed04

080095e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b08a      	sub	sp, #40	@ 0x28
 80095e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80095e6:	2300      	movs	r3, #0
 80095e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80095ea:	2300      	movs	r3, #0
 80095ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80095ee:	463a      	mov	r2, r7
 80095f0:	1d39      	adds	r1, r7, #4
 80095f2:	f107 0308 	add.w	r3, r7, #8
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7fe fd9c 	bl	8008134 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80095fc:	6839      	ldr	r1, [r7, #0]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	68ba      	ldr	r2, [r7, #8]
 8009602:	9202      	str	r2, [sp, #8]
 8009604:	9301      	str	r3, [sp, #4]
 8009606:	2300      	movs	r3, #0
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	2300      	movs	r3, #0
 800960c:	460a      	mov	r2, r1
 800960e:	4922      	ldr	r1, [pc, #136]	@ (8009698 <vTaskStartScheduler+0xb8>)
 8009610:	4822      	ldr	r0, [pc, #136]	@ (800969c <vTaskStartScheduler+0xbc>)
 8009612:	f7ff fe85 	bl	8009320 <xTaskCreateStatic>
 8009616:	4603      	mov	r3, r0
 8009618:	4a21      	ldr	r2, [pc, #132]	@ (80096a0 <vTaskStartScheduler+0xc0>)
 800961a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800961c:	4b20      	ldr	r3, [pc, #128]	@ (80096a0 <vTaskStartScheduler+0xc0>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d002      	beq.n	800962a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009624:	2301      	movs	r3, #1
 8009626:	617b      	str	r3, [r7, #20]
 8009628:	e001      	b.n	800962e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800962a:	2300      	movs	r3, #0
 800962c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d102      	bne.n	800963a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009634:	f000 fd04 	bl	800a040 <xTimerCreateTimerTask>
 8009638:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d116      	bne.n	800966e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	613b      	str	r3, [r7, #16]
}
 8009652:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009654:	4b13      	ldr	r3, [pc, #76]	@ (80096a4 <vTaskStartScheduler+0xc4>)
 8009656:	f04f 32ff 	mov.w	r2, #4294967295
 800965a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800965c:	4b12      	ldr	r3, [pc, #72]	@ (80096a8 <vTaskStartScheduler+0xc8>)
 800965e:	2201      	movs	r2, #1
 8009660:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009662:	4b12      	ldr	r3, [pc, #72]	@ (80096ac <vTaskStartScheduler+0xcc>)
 8009664:	2200      	movs	r2, #0
 8009666:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009668:	f7fe ff9a 	bl	80085a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800966c:	e00f      	b.n	800968e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009674:	d10b      	bne.n	800968e <vTaskStartScheduler+0xae>
	__asm volatile
 8009676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800967a:	f383 8811 	msr	BASEPRI, r3
 800967e:	f3bf 8f6f 	isb	sy
 8009682:	f3bf 8f4f 	dsb	sy
 8009686:	60fb      	str	r3, [r7, #12]
}
 8009688:	bf00      	nop
 800968a:	bf00      	nop
 800968c:	e7fd      	b.n	800968a <vTaskStartScheduler+0xaa>
}
 800968e:	bf00      	nop
 8009690:	3718      	adds	r7, #24
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	0800a780 	.word	0x0800a780
 800969c:	08009cd1 	.word	0x08009cd1
 80096a0:	24000e90 	.word	0x24000e90
 80096a4:	24000e8c 	.word	0x24000e8c
 80096a8:	24000e78 	.word	0x24000e78
 80096ac:	24000e70 	.word	0x24000e70

080096b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80096b0:	b480      	push	{r7}
 80096b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80096b4:	4b04      	ldr	r3, [pc, #16]	@ (80096c8 <vTaskSuspendAll+0x18>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	3301      	adds	r3, #1
 80096ba:	4a03      	ldr	r2, [pc, #12]	@ (80096c8 <vTaskSuspendAll+0x18>)
 80096bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80096be:	bf00      	nop
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	24000e94 	.word	0x24000e94

080096cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80096d6:	2300      	movs	r3, #0
 80096d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80096da:	4b42      	ldr	r3, [pc, #264]	@ (80097e4 <xTaskResumeAll+0x118>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10b      	bne.n	80096fa <xTaskResumeAll+0x2e>
	__asm volatile
 80096e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	603b      	str	r3, [r7, #0]
}
 80096f4:	bf00      	nop
 80096f6:	bf00      	nop
 80096f8:	e7fd      	b.n	80096f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80096fa:	f7fe fff5 	bl	80086e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80096fe:	4b39      	ldr	r3, [pc, #228]	@ (80097e4 <xTaskResumeAll+0x118>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	3b01      	subs	r3, #1
 8009704:	4a37      	ldr	r2, [pc, #220]	@ (80097e4 <xTaskResumeAll+0x118>)
 8009706:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009708:	4b36      	ldr	r3, [pc, #216]	@ (80097e4 <xTaskResumeAll+0x118>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d162      	bne.n	80097d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009710:	4b35      	ldr	r3, [pc, #212]	@ (80097e8 <xTaskResumeAll+0x11c>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d05e      	beq.n	80097d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009718:	e02f      	b.n	800977a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800971a:	4b34      	ldr	r3, [pc, #208]	@ (80097ec <xTaskResumeAll+0x120>)
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	3318      	adds	r3, #24
 8009726:	4618      	mov	r0, r3
 8009728:	f7fe fe80 	bl	800842c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	3304      	adds	r3, #4
 8009730:	4618      	mov	r0, r3
 8009732:	f7fe fe7b 	bl	800842c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800973a:	4b2d      	ldr	r3, [pc, #180]	@ (80097f0 <xTaskResumeAll+0x124>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	429a      	cmp	r2, r3
 8009740:	d903      	bls.n	800974a <xTaskResumeAll+0x7e>
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009746:	4a2a      	ldr	r2, [pc, #168]	@ (80097f0 <xTaskResumeAll+0x124>)
 8009748:	6013      	str	r3, [r2, #0]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800974e:	4613      	mov	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4413      	add	r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	4a27      	ldr	r2, [pc, #156]	@ (80097f4 <xTaskResumeAll+0x128>)
 8009758:	441a      	add	r2, r3
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	3304      	adds	r3, #4
 800975e:	4619      	mov	r1, r3
 8009760:	4610      	mov	r0, r2
 8009762:	f7fe fe06 	bl	8008372 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800976a:	4b23      	ldr	r3, [pc, #140]	@ (80097f8 <xTaskResumeAll+0x12c>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009770:	429a      	cmp	r2, r3
 8009772:	d302      	bcc.n	800977a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009774:	4b21      	ldr	r3, [pc, #132]	@ (80097fc <xTaskResumeAll+0x130>)
 8009776:	2201      	movs	r2, #1
 8009778:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800977a:	4b1c      	ldr	r3, [pc, #112]	@ (80097ec <xTaskResumeAll+0x120>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1cb      	bne.n	800971a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d001      	beq.n	800978c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009788:	f000 fb58 	bl	8009e3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800978c:	4b1c      	ldr	r3, [pc, #112]	@ (8009800 <xTaskResumeAll+0x134>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d010      	beq.n	80097ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009798:	f000 f846 	bl	8009828 <xTaskIncrementTick>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d002      	beq.n	80097a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80097a2:	4b16      	ldr	r3, [pc, #88]	@ (80097fc <xTaskResumeAll+0x130>)
 80097a4:	2201      	movs	r2, #1
 80097a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	3b01      	subs	r3, #1
 80097ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1f1      	bne.n	8009798 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80097b4:	4b12      	ldr	r3, [pc, #72]	@ (8009800 <xTaskResumeAll+0x134>)
 80097b6:	2200      	movs	r2, #0
 80097b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80097ba:	4b10      	ldr	r3, [pc, #64]	@ (80097fc <xTaskResumeAll+0x130>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d009      	beq.n	80097d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80097c2:	2301      	movs	r3, #1
 80097c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80097c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009804 <xTaskResumeAll+0x138>)
 80097c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097cc:	601a      	str	r2, [r3, #0]
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097d6:	f7fe ffb9 	bl	800874c <vPortExitCritical>

	return xAlreadyYielded;
 80097da:	68bb      	ldr	r3, [r7, #8]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	24000e94 	.word	0x24000e94
 80097e8:	24000e6c 	.word	0x24000e6c
 80097ec:	24000e2c 	.word	0x24000e2c
 80097f0:	24000e74 	.word	0x24000e74
 80097f4:	2400099c 	.word	0x2400099c
 80097f8:	24000998 	.word	0x24000998
 80097fc:	24000e80 	.word	0x24000e80
 8009800:	24000e7c 	.word	0x24000e7c
 8009804:	e000ed04 	.word	0xe000ed04

08009808 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800980e:	4b05      	ldr	r3, [pc, #20]	@ (8009824 <xTaskGetTickCount+0x1c>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009814:	687b      	ldr	r3, [r7, #4]
}
 8009816:	4618      	mov	r0, r3
 8009818:	370c      	adds	r7, #12
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	24000e70 	.word	0x24000e70

08009828 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800982e:	2300      	movs	r3, #0
 8009830:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009832:	4b4f      	ldr	r3, [pc, #316]	@ (8009970 <xTaskIncrementTick+0x148>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	f040 8090 	bne.w	800995c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800983c:	4b4d      	ldr	r3, [pc, #308]	@ (8009974 <xTaskIncrementTick+0x14c>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	3301      	adds	r3, #1
 8009842:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009844:	4a4b      	ldr	r2, [pc, #300]	@ (8009974 <xTaskIncrementTick+0x14c>)
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d121      	bne.n	8009894 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009850:	4b49      	ldr	r3, [pc, #292]	@ (8009978 <xTaskIncrementTick+0x150>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00b      	beq.n	8009872 <xTaskIncrementTick+0x4a>
	__asm volatile
 800985a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800985e:	f383 8811 	msr	BASEPRI, r3
 8009862:	f3bf 8f6f 	isb	sy
 8009866:	f3bf 8f4f 	dsb	sy
 800986a:	603b      	str	r3, [r7, #0]
}
 800986c:	bf00      	nop
 800986e:	bf00      	nop
 8009870:	e7fd      	b.n	800986e <xTaskIncrementTick+0x46>
 8009872:	4b41      	ldr	r3, [pc, #260]	@ (8009978 <xTaskIncrementTick+0x150>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	60fb      	str	r3, [r7, #12]
 8009878:	4b40      	ldr	r3, [pc, #256]	@ (800997c <xTaskIncrementTick+0x154>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a3e      	ldr	r2, [pc, #248]	@ (8009978 <xTaskIncrementTick+0x150>)
 800987e:	6013      	str	r3, [r2, #0]
 8009880:	4a3e      	ldr	r2, [pc, #248]	@ (800997c <xTaskIncrementTick+0x154>)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6013      	str	r3, [r2, #0]
 8009886:	4b3e      	ldr	r3, [pc, #248]	@ (8009980 <xTaskIncrementTick+0x158>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	3301      	adds	r3, #1
 800988c:	4a3c      	ldr	r2, [pc, #240]	@ (8009980 <xTaskIncrementTick+0x158>)
 800988e:	6013      	str	r3, [r2, #0]
 8009890:	f000 fad4 	bl	8009e3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009894:	4b3b      	ldr	r3, [pc, #236]	@ (8009984 <xTaskIncrementTick+0x15c>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	429a      	cmp	r2, r3
 800989c:	d349      	bcc.n	8009932 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800989e:	4b36      	ldr	r3, [pc, #216]	@ (8009978 <xTaskIncrementTick+0x150>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d104      	bne.n	80098b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098a8:	4b36      	ldr	r3, [pc, #216]	@ (8009984 <xTaskIncrementTick+0x15c>)
 80098aa:	f04f 32ff 	mov.w	r2, #4294967295
 80098ae:	601a      	str	r2, [r3, #0]
					break;
 80098b0:	e03f      	b.n	8009932 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098b2:	4b31      	ldr	r3, [pc, #196]	@ (8009978 <xTaskIncrementTick+0x150>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80098c2:	693a      	ldr	r2, [r7, #16]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d203      	bcs.n	80098d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80098ca:	4a2e      	ldr	r2, [pc, #184]	@ (8009984 <xTaskIncrementTick+0x15c>)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80098d0:	e02f      	b.n	8009932 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	3304      	adds	r3, #4
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7fe fda8 	bl	800842c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d004      	beq.n	80098ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	3318      	adds	r3, #24
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fe fd9f 	bl	800842c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098f2:	4b25      	ldr	r3, [pc, #148]	@ (8009988 <xTaskIncrementTick+0x160>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d903      	bls.n	8009902 <xTaskIncrementTick+0xda>
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098fe:	4a22      	ldr	r2, [pc, #136]	@ (8009988 <xTaskIncrementTick+0x160>)
 8009900:	6013      	str	r3, [r2, #0]
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009906:	4613      	mov	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	4413      	add	r3, r2
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	4a1f      	ldr	r2, [pc, #124]	@ (800998c <xTaskIncrementTick+0x164>)
 8009910:	441a      	add	r2, r3
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	3304      	adds	r3, #4
 8009916:	4619      	mov	r1, r3
 8009918:	4610      	mov	r0, r2
 800991a:	f7fe fd2a 	bl	8008372 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009922:	4b1b      	ldr	r3, [pc, #108]	@ (8009990 <xTaskIncrementTick+0x168>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009928:	429a      	cmp	r2, r3
 800992a:	d3b8      	bcc.n	800989e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800992c:	2301      	movs	r3, #1
 800992e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009930:	e7b5      	b.n	800989e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009932:	4b17      	ldr	r3, [pc, #92]	@ (8009990 <xTaskIncrementTick+0x168>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009938:	4914      	ldr	r1, [pc, #80]	@ (800998c <xTaskIncrementTick+0x164>)
 800993a:	4613      	mov	r3, r2
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	4413      	add	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	440b      	add	r3, r1
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b01      	cmp	r3, #1
 8009948:	d901      	bls.n	800994e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800994a:	2301      	movs	r3, #1
 800994c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800994e:	4b11      	ldr	r3, [pc, #68]	@ (8009994 <xTaskIncrementTick+0x16c>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d007      	beq.n	8009966 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009956:	2301      	movs	r3, #1
 8009958:	617b      	str	r3, [r7, #20]
 800995a:	e004      	b.n	8009966 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800995c:	4b0e      	ldr	r3, [pc, #56]	@ (8009998 <xTaskIncrementTick+0x170>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	3301      	adds	r3, #1
 8009962:	4a0d      	ldr	r2, [pc, #52]	@ (8009998 <xTaskIncrementTick+0x170>)
 8009964:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009966:	697b      	ldr	r3, [r7, #20]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3718      	adds	r7, #24
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	24000e94 	.word	0x24000e94
 8009974:	24000e70 	.word	0x24000e70
 8009978:	24000e24 	.word	0x24000e24
 800997c:	24000e28 	.word	0x24000e28
 8009980:	24000e84 	.word	0x24000e84
 8009984:	24000e8c 	.word	0x24000e8c
 8009988:	24000e74 	.word	0x24000e74
 800998c:	2400099c 	.word	0x2400099c
 8009990:	24000998 	.word	0x24000998
 8009994:	24000e80 	.word	0x24000e80
 8009998:	24000e7c 	.word	0x24000e7c

0800999c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80099a2:	4b28      	ldr	r3, [pc, #160]	@ (8009a44 <vTaskSwitchContext+0xa8>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d003      	beq.n	80099b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80099aa:	4b27      	ldr	r3, [pc, #156]	@ (8009a48 <vTaskSwitchContext+0xac>)
 80099ac:	2201      	movs	r2, #1
 80099ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80099b0:	e042      	b.n	8009a38 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80099b2:	4b25      	ldr	r3, [pc, #148]	@ (8009a48 <vTaskSwitchContext+0xac>)
 80099b4:	2200      	movs	r2, #0
 80099b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099b8:	4b24      	ldr	r3, [pc, #144]	@ (8009a4c <vTaskSwitchContext+0xb0>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	60fb      	str	r3, [r7, #12]
 80099be:	e011      	b.n	80099e4 <vTaskSwitchContext+0x48>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10b      	bne.n	80099de <vTaskSwitchContext+0x42>
	__asm volatile
 80099c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ca:	f383 8811 	msr	BASEPRI, r3
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f3bf 8f4f 	dsb	sy
 80099d6:	607b      	str	r3, [r7, #4]
}
 80099d8:	bf00      	nop
 80099da:	bf00      	nop
 80099dc:	e7fd      	b.n	80099da <vTaskSwitchContext+0x3e>
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	3b01      	subs	r3, #1
 80099e2:	60fb      	str	r3, [r7, #12]
 80099e4:	491a      	ldr	r1, [pc, #104]	@ (8009a50 <vTaskSwitchContext+0xb4>)
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	4613      	mov	r3, r2
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4413      	add	r3, r2
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	440b      	add	r3, r1
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d0e3      	beq.n	80099c0 <vTaskSwitchContext+0x24>
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	4613      	mov	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4a13      	ldr	r2, [pc, #76]	@ (8009a50 <vTaskSwitchContext+0xb4>)
 8009a04:	4413      	add	r3, r2
 8009a06:	60bb      	str	r3, [r7, #8]
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	685a      	ldr	r2, [r3, #4]
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	605a      	str	r2, [r3, #4]
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	685a      	ldr	r2, [r3, #4]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	3308      	adds	r3, #8
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d104      	bne.n	8009a28 <vTaskSwitchContext+0x8c>
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	685a      	ldr	r2, [r3, #4]
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	605a      	str	r2, [r3, #4]
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	4a09      	ldr	r2, [pc, #36]	@ (8009a54 <vTaskSwitchContext+0xb8>)
 8009a30:	6013      	str	r3, [r2, #0]
 8009a32:	4a06      	ldr	r2, [pc, #24]	@ (8009a4c <vTaskSwitchContext+0xb0>)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6013      	str	r3, [r2, #0]
}
 8009a38:	bf00      	nop
 8009a3a:	3714      	adds	r7, #20
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	24000e94 	.word	0x24000e94
 8009a48:	24000e80 	.word	0x24000e80
 8009a4c:	24000e74 	.word	0x24000e74
 8009a50:	2400099c 	.word	0x2400099c
 8009a54:	24000998 	.word	0x24000998

08009a58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d10b      	bne.n	8009a80 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a6c:	f383 8811 	msr	BASEPRI, r3
 8009a70:	f3bf 8f6f 	isb	sy
 8009a74:	f3bf 8f4f 	dsb	sy
 8009a78:	60fb      	str	r3, [r7, #12]
}
 8009a7a:	bf00      	nop
 8009a7c:	bf00      	nop
 8009a7e:	e7fd      	b.n	8009a7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a80:	4b07      	ldr	r3, [pc, #28]	@ (8009aa0 <vTaskPlaceOnEventList+0x48>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	3318      	adds	r3, #24
 8009a86:	4619      	mov	r1, r3
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f7fe fc96 	bl	80083ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a8e:	2101      	movs	r1, #1
 8009a90:	6838      	ldr	r0, [r7, #0]
 8009a92:	f000 fa81 	bl	8009f98 <prvAddCurrentTaskToDelayedList>
}
 8009a96:	bf00      	nop
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	24000998 	.word	0x24000998

08009aa4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b086      	sub	sp, #24
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d10b      	bne.n	8009ace <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	617b      	str	r3, [r7, #20]
}
 8009ac8:	bf00      	nop
 8009aca:	bf00      	nop
 8009acc:	e7fd      	b.n	8009aca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ace:	4b0a      	ldr	r3, [pc, #40]	@ (8009af8 <vTaskPlaceOnEventListRestricted+0x54>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	3318      	adds	r3, #24
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	68f8      	ldr	r0, [r7, #12]
 8009ad8:	f7fe fc4b 	bl	8008372 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d002      	beq.n	8009ae8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009ae8:	6879      	ldr	r1, [r7, #4]
 8009aea:	68b8      	ldr	r0, [r7, #8]
 8009aec:	f000 fa54 	bl	8009f98 <prvAddCurrentTaskToDelayedList>
	}
 8009af0:	bf00      	nop
 8009af2:	3718      	adds	r7, #24
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	24000998 	.word	0x24000998

08009afc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d10b      	bne.n	8009b2a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b16:	f383 8811 	msr	BASEPRI, r3
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	60fb      	str	r3, [r7, #12]
}
 8009b24:	bf00      	nop
 8009b26:	bf00      	nop
 8009b28:	e7fd      	b.n	8009b26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	3318      	adds	r3, #24
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7fe fc7c 	bl	800842c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b34:	4b1d      	ldr	r3, [pc, #116]	@ (8009bac <xTaskRemoveFromEventList+0xb0>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d11d      	bne.n	8009b78 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	3304      	adds	r3, #4
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7fe fc73 	bl	800842c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b4a:	4b19      	ldr	r3, [pc, #100]	@ (8009bb0 <xTaskRemoveFromEventList+0xb4>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d903      	bls.n	8009b5a <xTaskRemoveFromEventList+0x5e>
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b56:	4a16      	ldr	r2, [pc, #88]	@ (8009bb0 <xTaskRemoveFromEventList+0xb4>)
 8009b58:	6013      	str	r3, [r2, #0]
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b5e:	4613      	mov	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	4413      	add	r3, r2
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	4a13      	ldr	r2, [pc, #76]	@ (8009bb4 <xTaskRemoveFromEventList+0xb8>)
 8009b68:	441a      	add	r2, r3
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	3304      	adds	r3, #4
 8009b6e:	4619      	mov	r1, r3
 8009b70:	4610      	mov	r0, r2
 8009b72:	f7fe fbfe 	bl	8008372 <vListInsertEnd>
 8009b76:	e005      	b.n	8009b84 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	3318      	adds	r3, #24
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	480e      	ldr	r0, [pc, #56]	@ (8009bb8 <xTaskRemoveFromEventList+0xbc>)
 8009b80:	f7fe fbf7 	bl	8008372 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b88:	4b0c      	ldr	r3, [pc, #48]	@ (8009bbc <xTaskRemoveFromEventList+0xc0>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d905      	bls.n	8009b9e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b92:	2301      	movs	r3, #1
 8009b94:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b96:	4b0a      	ldr	r3, [pc, #40]	@ (8009bc0 <xTaskRemoveFromEventList+0xc4>)
 8009b98:	2201      	movs	r2, #1
 8009b9a:	601a      	str	r2, [r3, #0]
 8009b9c:	e001      	b.n	8009ba2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009ba2:	697b      	ldr	r3, [r7, #20]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3718      	adds	r7, #24
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	24000e94 	.word	0x24000e94
 8009bb0:	24000e74 	.word	0x24000e74
 8009bb4:	2400099c 	.word	0x2400099c
 8009bb8:	24000e2c 	.word	0x24000e2c
 8009bbc:	24000998 	.word	0x24000998
 8009bc0:	24000e80 	.word	0x24000e80

08009bc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009bcc:	4b06      	ldr	r3, [pc, #24]	@ (8009be8 <vTaskInternalSetTimeOutState+0x24>)
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009bd4:	4b05      	ldr	r3, [pc, #20]	@ (8009bec <vTaskInternalSetTimeOutState+0x28>)
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	605a      	str	r2, [r3, #4]
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr
 8009be8:	24000e84 	.word	0x24000e84
 8009bec:	24000e70 	.word	0x24000e70

08009bf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d10b      	bne.n	8009c18 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	613b      	str	r3, [r7, #16]
}
 8009c12:	bf00      	nop
 8009c14:	bf00      	nop
 8009c16:	e7fd      	b.n	8009c14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10b      	bne.n	8009c36 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	60fb      	str	r3, [r7, #12]
}
 8009c30:	bf00      	nop
 8009c32:	bf00      	nop
 8009c34:	e7fd      	b.n	8009c32 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009c36:	f7fe fd57 	bl	80086e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8009cb0 <xTaskCheckForTimeOut+0xc0>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	69ba      	ldr	r2, [r7, #24]
 8009c46:	1ad3      	subs	r3, r2, r3
 8009c48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c52:	d102      	bne.n	8009c5a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009c54:	2300      	movs	r3, #0
 8009c56:	61fb      	str	r3, [r7, #28]
 8009c58:	e023      	b.n	8009ca2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	4b15      	ldr	r3, [pc, #84]	@ (8009cb4 <xTaskCheckForTimeOut+0xc4>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d007      	beq.n	8009c76 <xTaskCheckForTimeOut+0x86>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	69ba      	ldr	r2, [r7, #24]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d302      	bcc.n	8009c76 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009c70:	2301      	movs	r3, #1
 8009c72:	61fb      	str	r3, [r7, #28]
 8009c74:	e015      	b.n	8009ca2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	697a      	ldr	r2, [r7, #20]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d20b      	bcs.n	8009c98 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	1ad2      	subs	r2, r2, r3
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f7ff ff99 	bl	8009bc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c92:	2300      	movs	r3, #0
 8009c94:	61fb      	str	r3, [r7, #28]
 8009c96:	e004      	b.n	8009ca2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009ca2:	f7fe fd53 	bl	800874c <vPortExitCritical>

	return xReturn;
 8009ca6:	69fb      	ldr	r3, [r7, #28]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3720      	adds	r7, #32
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	24000e70 	.word	0x24000e70
 8009cb4:	24000e84 	.word	0x24000e84

08009cb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009cb8:	b480      	push	{r7}
 8009cba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009cbc:	4b03      	ldr	r3, [pc, #12]	@ (8009ccc <vTaskMissedYield+0x14>)
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	601a      	str	r2, [r3, #0]
}
 8009cc2:	bf00      	nop
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr
 8009ccc:	24000e80 	.word	0x24000e80

08009cd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009cd8:	f000 f852 	bl	8009d80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009cdc:	4b06      	ldr	r3, [pc, #24]	@ (8009cf8 <prvIdleTask+0x28>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d9f9      	bls.n	8009cd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009ce4:	4b05      	ldr	r3, [pc, #20]	@ (8009cfc <prvIdleTask+0x2c>)
 8009ce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cea:	601a      	str	r2, [r3, #0]
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009cf4:	e7f0      	b.n	8009cd8 <prvIdleTask+0x8>
 8009cf6:	bf00      	nop
 8009cf8:	2400099c 	.word	0x2400099c
 8009cfc:	e000ed04 	.word	0xe000ed04

08009d00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d06:	2300      	movs	r3, #0
 8009d08:	607b      	str	r3, [r7, #4]
 8009d0a:	e00c      	b.n	8009d26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	4a12      	ldr	r2, [pc, #72]	@ (8009d60 <prvInitialiseTaskLists+0x60>)
 8009d18:	4413      	add	r3, r2
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fe fafc 	bl	8008318 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	3301      	adds	r3, #1
 8009d24:	607b      	str	r3, [r7, #4]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2b37      	cmp	r3, #55	@ 0x37
 8009d2a:	d9ef      	bls.n	8009d0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d2c:	480d      	ldr	r0, [pc, #52]	@ (8009d64 <prvInitialiseTaskLists+0x64>)
 8009d2e:	f7fe faf3 	bl	8008318 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d32:	480d      	ldr	r0, [pc, #52]	@ (8009d68 <prvInitialiseTaskLists+0x68>)
 8009d34:	f7fe faf0 	bl	8008318 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d38:	480c      	ldr	r0, [pc, #48]	@ (8009d6c <prvInitialiseTaskLists+0x6c>)
 8009d3a:	f7fe faed 	bl	8008318 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d3e:	480c      	ldr	r0, [pc, #48]	@ (8009d70 <prvInitialiseTaskLists+0x70>)
 8009d40:	f7fe faea 	bl	8008318 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009d44:	480b      	ldr	r0, [pc, #44]	@ (8009d74 <prvInitialiseTaskLists+0x74>)
 8009d46:	f7fe fae7 	bl	8008318 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8009d78 <prvInitialiseTaskLists+0x78>)
 8009d4c:	4a05      	ldr	r2, [pc, #20]	@ (8009d64 <prvInitialiseTaskLists+0x64>)
 8009d4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d50:	4b0a      	ldr	r3, [pc, #40]	@ (8009d7c <prvInitialiseTaskLists+0x7c>)
 8009d52:	4a05      	ldr	r2, [pc, #20]	@ (8009d68 <prvInitialiseTaskLists+0x68>)
 8009d54:	601a      	str	r2, [r3, #0]
}
 8009d56:	bf00      	nop
 8009d58:	3708      	adds	r7, #8
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	2400099c 	.word	0x2400099c
 8009d64:	24000dfc 	.word	0x24000dfc
 8009d68:	24000e10 	.word	0x24000e10
 8009d6c:	24000e2c 	.word	0x24000e2c
 8009d70:	24000e40 	.word	0x24000e40
 8009d74:	24000e58 	.word	0x24000e58
 8009d78:	24000e24 	.word	0x24000e24
 8009d7c:	24000e28 	.word	0x24000e28

08009d80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d86:	e019      	b.n	8009dbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d88:	f7fe fcae 	bl	80086e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d8c:	4b10      	ldr	r3, [pc, #64]	@ (8009dd0 <prvCheckTasksWaitingTermination+0x50>)
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	3304      	adds	r3, #4
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7fe fb47 	bl	800842c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8009dd4 <prvCheckTasksWaitingTermination+0x54>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	3b01      	subs	r3, #1
 8009da4:	4a0b      	ldr	r2, [pc, #44]	@ (8009dd4 <prvCheckTasksWaitingTermination+0x54>)
 8009da6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009da8:	4b0b      	ldr	r3, [pc, #44]	@ (8009dd8 <prvCheckTasksWaitingTermination+0x58>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	3b01      	subs	r3, #1
 8009dae:	4a0a      	ldr	r2, [pc, #40]	@ (8009dd8 <prvCheckTasksWaitingTermination+0x58>)
 8009db0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009db2:	f7fe fccb 	bl	800874c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f810 	bl	8009ddc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009dbc:	4b06      	ldr	r3, [pc, #24]	@ (8009dd8 <prvCheckTasksWaitingTermination+0x58>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d1e1      	bne.n	8009d88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009dc4:	bf00      	nop
 8009dc6:	bf00      	nop
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	24000e40 	.word	0x24000e40
 8009dd4:	24000e6c 	.word	0x24000e6c
 8009dd8:	24000e54 	.word	0x24000e54

08009ddc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d108      	bne.n	8009e00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7fe f9d2 	bl	800819c <vPortFree>
				vPortFree( pxTCB );
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f7fe f9cf 	bl	800819c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009dfe:	e019      	b.n	8009e34 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d103      	bne.n	8009e12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f7fe f9c6 	bl	800819c <vPortFree>
	}
 8009e10:	e010      	b.n	8009e34 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	d00b      	beq.n	8009e34 <prvDeleteTCB+0x58>
	__asm volatile
 8009e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	60fb      	str	r3, [r7, #12]
}
 8009e2e:	bf00      	nop
 8009e30:	bf00      	nop
 8009e32:	e7fd      	b.n	8009e30 <prvDeleteTCB+0x54>
	}
 8009e34:	bf00      	nop
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e42:	4b0c      	ldr	r3, [pc, #48]	@ (8009e74 <prvResetNextTaskUnblockTime+0x38>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d104      	bne.n	8009e56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e78 <prvResetNextTaskUnblockTime+0x3c>)
 8009e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009e54:	e008      	b.n	8009e68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e56:	4b07      	ldr	r3, [pc, #28]	@ (8009e74 <prvResetNextTaskUnblockTime+0x38>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	4a04      	ldr	r2, [pc, #16]	@ (8009e78 <prvResetNextTaskUnblockTime+0x3c>)
 8009e66:	6013      	str	r3, [r2, #0]
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr
 8009e74:	24000e24 	.word	0x24000e24
 8009e78:	24000e8c 	.word	0x24000e8c

08009e7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e82:	4b0b      	ldr	r3, [pc, #44]	@ (8009eb0 <xTaskGetSchedulerState+0x34>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d102      	bne.n	8009e90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	607b      	str	r3, [r7, #4]
 8009e8e:	e008      	b.n	8009ea2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e90:	4b08      	ldr	r3, [pc, #32]	@ (8009eb4 <xTaskGetSchedulerState+0x38>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d102      	bne.n	8009e9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e98:	2302      	movs	r3, #2
 8009e9a:	607b      	str	r3, [r7, #4]
 8009e9c:	e001      	b.n	8009ea2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ea2:	687b      	ldr	r3, [r7, #4]
	}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr
 8009eb0:	24000e78 	.word	0x24000e78
 8009eb4:	24000e94 	.word	0x24000e94

08009eb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d058      	beq.n	8009f80 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009ece:	4b2f      	ldr	r3, [pc, #188]	@ (8009f8c <xTaskPriorityDisinherit+0xd4>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	693a      	ldr	r2, [r7, #16]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d00b      	beq.n	8009ef0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009edc:	f383 8811 	msr	BASEPRI, r3
 8009ee0:	f3bf 8f6f 	isb	sy
 8009ee4:	f3bf 8f4f 	dsb	sy
 8009ee8:	60fb      	str	r3, [r7, #12]
}
 8009eea:	bf00      	nop
 8009eec:	bf00      	nop
 8009eee:	e7fd      	b.n	8009eec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d10b      	bne.n	8009f10 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	60bb      	str	r3, [r7, #8]
}
 8009f0a:	bf00      	nop
 8009f0c:	bf00      	nop
 8009f0e:	e7fd      	b.n	8009f0c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f14:	1e5a      	subs	r2, r3, #1
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d02c      	beq.n	8009f80 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d128      	bne.n	8009f80 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	3304      	adds	r3, #4
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fe fa7a 	bl	800842c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f44:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f50:	4b0f      	ldr	r3, [pc, #60]	@ (8009f90 <xTaskPriorityDisinherit+0xd8>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d903      	bls.n	8009f60 <xTaskPriorityDisinherit+0xa8>
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f5c:	4a0c      	ldr	r2, [pc, #48]	@ (8009f90 <xTaskPriorityDisinherit+0xd8>)
 8009f5e:	6013      	str	r3, [r2, #0]
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f64:	4613      	mov	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	4413      	add	r3, r2
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	4a09      	ldr	r2, [pc, #36]	@ (8009f94 <xTaskPriorityDisinherit+0xdc>)
 8009f6e:	441a      	add	r2, r3
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	3304      	adds	r3, #4
 8009f74:	4619      	mov	r1, r3
 8009f76:	4610      	mov	r0, r2
 8009f78:	f7fe f9fb 	bl	8008372 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f80:	697b      	ldr	r3, [r7, #20]
	}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3718      	adds	r7, #24
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	24000998 	.word	0x24000998
 8009f90:	24000e74 	.word	0x24000e74
 8009f94:	2400099c 	.word	0x2400099c

08009f98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009fa2:	4b21      	ldr	r3, [pc, #132]	@ (800a028 <prvAddCurrentTaskToDelayedList+0x90>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fa8:	4b20      	ldr	r3, [pc, #128]	@ (800a02c <prvAddCurrentTaskToDelayedList+0x94>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	3304      	adds	r3, #4
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fe fa3c 	bl	800842c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fba:	d10a      	bne.n	8009fd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d007      	beq.n	8009fd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800a02c <prvAddCurrentTaskToDelayedList+0x94>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	4619      	mov	r1, r3
 8009fca:	4819      	ldr	r0, [pc, #100]	@ (800a030 <prvAddCurrentTaskToDelayedList+0x98>)
 8009fcc:	f7fe f9d1 	bl	8008372 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009fd0:	e026      	b.n	800a020 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009fda:	4b14      	ldr	r3, [pc, #80]	@ (800a02c <prvAddCurrentTaskToDelayedList+0x94>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	68ba      	ldr	r2, [r7, #8]
 8009fe0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009fe2:	68ba      	ldr	r2, [r7, #8]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d209      	bcs.n	8009ffe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fea:	4b12      	ldr	r3, [pc, #72]	@ (800a034 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	4b0f      	ldr	r3, [pc, #60]	@ (800a02c <prvAddCurrentTaskToDelayedList+0x94>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	3304      	adds	r3, #4
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	4610      	mov	r0, r2
 8009ff8:	f7fe f9df 	bl	80083ba <vListInsert>
}
 8009ffc:	e010      	b.n	800a020 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ffe:	4b0e      	ldr	r3, [pc, #56]	@ (800a038 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	4b0a      	ldr	r3, [pc, #40]	@ (800a02c <prvAddCurrentTaskToDelayedList+0x94>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	3304      	adds	r3, #4
 800a008:	4619      	mov	r1, r3
 800a00a:	4610      	mov	r0, r2
 800a00c:	f7fe f9d5 	bl	80083ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a010:	4b0a      	ldr	r3, [pc, #40]	@ (800a03c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68ba      	ldr	r2, [r7, #8]
 800a016:	429a      	cmp	r2, r3
 800a018:	d202      	bcs.n	800a020 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a01a:	4a08      	ldr	r2, [pc, #32]	@ (800a03c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	6013      	str	r3, [r2, #0]
}
 800a020:	bf00      	nop
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	24000e70 	.word	0x24000e70
 800a02c:	24000998 	.word	0x24000998
 800a030:	24000e58 	.word	0x24000e58
 800a034:	24000e28 	.word	0x24000e28
 800a038:	24000e24 	.word	0x24000e24
 800a03c:	24000e8c 	.word	0x24000e8c

0800a040 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b08a      	sub	sp, #40	@ 0x28
 800a044:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a046:	2300      	movs	r3, #0
 800a048:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a04a:	f000 fb13 	bl	800a674 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a04e:	4b1d      	ldr	r3, [pc, #116]	@ (800a0c4 <xTimerCreateTimerTask+0x84>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d021      	beq.n	800a09a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a056:	2300      	movs	r3, #0
 800a058:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a05a:	2300      	movs	r3, #0
 800a05c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a05e:	1d3a      	adds	r2, r7, #4
 800a060:	f107 0108 	add.w	r1, r7, #8
 800a064:	f107 030c 	add.w	r3, r7, #12
 800a068:	4618      	mov	r0, r3
 800a06a:	f7fe f87d 	bl	8008168 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a06e:	6879      	ldr	r1, [r7, #4]
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	9202      	str	r2, [sp, #8]
 800a076:	9301      	str	r3, [sp, #4]
 800a078:	2302      	movs	r3, #2
 800a07a:	9300      	str	r3, [sp, #0]
 800a07c:	2300      	movs	r3, #0
 800a07e:	460a      	mov	r2, r1
 800a080:	4911      	ldr	r1, [pc, #68]	@ (800a0c8 <xTimerCreateTimerTask+0x88>)
 800a082:	4812      	ldr	r0, [pc, #72]	@ (800a0cc <xTimerCreateTimerTask+0x8c>)
 800a084:	f7ff f94c 	bl	8009320 <xTaskCreateStatic>
 800a088:	4603      	mov	r3, r0
 800a08a:	4a11      	ldr	r2, [pc, #68]	@ (800a0d0 <xTimerCreateTimerTask+0x90>)
 800a08c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a08e:	4b10      	ldr	r3, [pc, #64]	@ (800a0d0 <xTimerCreateTimerTask+0x90>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d001      	beq.n	800a09a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a096:	2301      	movs	r3, #1
 800a098:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10b      	bne.n	800a0b8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	613b      	str	r3, [r7, #16]
}
 800a0b2:	bf00      	nop
 800a0b4:	bf00      	nop
 800a0b6:	e7fd      	b.n	800a0b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a0b8:	697b      	ldr	r3, [r7, #20]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3718      	adds	r7, #24
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	24000ec8 	.word	0x24000ec8
 800a0c8:	0800a788 	.word	0x0800a788
 800a0cc:	0800a20d 	.word	0x0800a20d
 800a0d0:	24000ecc 	.word	0x24000ecc

0800a0d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b08a      	sub	sp, #40	@ 0x28
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
 800a0e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d10b      	bne.n	800a104 <xTimerGenericCommand+0x30>
	__asm volatile
 800a0ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f0:	f383 8811 	msr	BASEPRI, r3
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	623b      	str	r3, [r7, #32]
}
 800a0fe:	bf00      	nop
 800a100:	bf00      	nop
 800a102:	e7fd      	b.n	800a100 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a104:	4b19      	ldr	r3, [pc, #100]	@ (800a16c <xTimerGenericCommand+0x98>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d02a      	beq.n	800a162 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	2b05      	cmp	r3, #5
 800a11c:	dc18      	bgt.n	800a150 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a11e:	f7ff fead 	bl	8009e7c <xTaskGetSchedulerState>
 800a122:	4603      	mov	r3, r0
 800a124:	2b02      	cmp	r3, #2
 800a126:	d109      	bne.n	800a13c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a128:	4b10      	ldr	r3, [pc, #64]	@ (800a16c <xTimerGenericCommand+0x98>)
 800a12a:	6818      	ldr	r0, [r3, #0]
 800a12c:	f107 0110 	add.w	r1, r7, #16
 800a130:	2300      	movs	r3, #0
 800a132:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a134:	f7fe fd04 	bl	8008b40 <xQueueGenericSend>
 800a138:	6278      	str	r0, [r7, #36]	@ 0x24
 800a13a:	e012      	b.n	800a162 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a13c:	4b0b      	ldr	r3, [pc, #44]	@ (800a16c <xTimerGenericCommand+0x98>)
 800a13e:	6818      	ldr	r0, [r3, #0]
 800a140:	f107 0110 	add.w	r1, r7, #16
 800a144:	2300      	movs	r3, #0
 800a146:	2200      	movs	r2, #0
 800a148:	f7fe fcfa 	bl	8008b40 <xQueueGenericSend>
 800a14c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a14e:	e008      	b.n	800a162 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a150:	4b06      	ldr	r3, [pc, #24]	@ (800a16c <xTimerGenericCommand+0x98>)
 800a152:	6818      	ldr	r0, [r3, #0]
 800a154:	f107 0110 	add.w	r1, r7, #16
 800a158:	2300      	movs	r3, #0
 800a15a:	683a      	ldr	r2, [r7, #0]
 800a15c:	f7fe fdf2 	bl	8008d44 <xQueueGenericSendFromISR>
 800a160:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a164:	4618      	mov	r0, r3
 800a166:	3728      	adds	r7, #40	@ 0x28
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	24000ec8 	.word	0x24000ec8

0800a170 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b088      	sub	sp, #32
 800a174:	af02      	add	r7, sp, #8
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a17a:	4b23      	ldr	r3, [pc, #140]	@ (800a208 <prvProcessExpiredTimer+0x98>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	3304      	adds	r3, #4
 800a188:	4618      	mov	r0, r3
 800a18a:	f7fe f94f 	bl	800842c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a194:	f003 0304 	and.w	r3, r3, #4
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d023      	beq.n	800a1e4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	699a      	ldr	r2, [r3, #24]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	18d1      	adds	r1, r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	683a      	ldr	r2, [r7, #0]
 800a1a8:	6978      	ldr	r0, [r7, #20]
 800a1aa:	f000 f8d5 	bl	800a358 <prvInsertTimerInActiveList>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d020      	beq.n	800a1f6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	9300      	str	r3, [sp, #0]
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	2100      	movs	r1, #0
 800a1be:	6978      	ldr	r0, [r7, #20]
 800a1c0:	f7ff ff88 	bl	800a0d4 <xTimerGenericCommand>
 800a1c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d114      	bne.n	800a1f6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a1cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d0:	f383 8811 	msr	BASEPRI, r3
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	60fb      	str	r3, [r7, #12]
}
 800a1de:	bf00      	nop
 800a1e0:	bf00      	nop
 800a1e2:	e7fd      	b.n	800a1e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1ea:	f023 0301 	bic.w	r3, r3, #1
 800a1ee:	b2da      	uxtb	r2, r3
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	6978      	ldr	r0, [r7, #20]
 800a1fc:	4798      	blx	r3
}
 800a1fe:	bf00      	nop
 800a200:	3718      	adds	r7, #24
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	24000ec0 	.word	0x24000ec0

0800a20c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a214:	f107 0308 	add.w	r3, r7, #8
 800a218:	4618      	mov	r0, r3
 800a21a:	f000 f859 	bl	800a2d0 <prvGetNextExpireTime>
 800a21e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	4619      	mov	r1, r3
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f000 f805 	bl	800a234 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a22a:	f000 f8d7 	bl	800a3dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a22e:	bf00      	nop
 800a230:	e7f0      	b.n	800a214 <prvTimerTask+0x8>
	...

0800a234 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a23e:	f7ff fa37 	bl	80096b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a242:	f107 0308 	add.w	r3, r7, #8
 800a246:	4618      	mov	r0, r3
 800a248:	f000 f866 	bl	800a318 <prvSampleTimeNow>
 800a24c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d130      	bne.n	800a2b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d10a      	bne.n	800a270 <prvProcessTimerOrBlockTask+0x3c>
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d806      	bhi.n	800a270 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a262:	f7ff fa33 	bl	80096cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a266:	68f9      	ldr	r1, [r7, #12]
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f7ff ff81 	bl	800a170 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a26e:	e024      	b.n	800a2ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d008      	beq.n	800a288 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a276:	4b13      	ldr	r3, [pc, #76]	@ (800a2c4 <prvProcessTimerOrBlockTask+0x90>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d101      	bne.n	800a284 <prvProcessTimerOrBlockTask+0x50>
 800a280:	2301      	movs	r3, #1
 800a282:	e000      	b.n	800a286 <prvProcessTimerOrBlockTask+0x52>
 800a284:	2300      	movs	r3, #0
 800a286:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a288:	4b0f      	ldr	r3, [pc, #60]	@ (800a2c8 <prvProcessTimerOrBlockTask+0x94>)
 800a28a:	6818      	ldr	r0, [r3, #0]
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	683a      	ldr	r2, [r7, #0]
 800a294:	4619      	mov	r1, r3
 800a296:	f7ff f80f 	bl	80092b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a29a:	f7ff fa17 	bl	80096cc <xTaskResumeAll>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d10a      	bne.n	800a2ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a2a4:	4b09      	ldr	r3, [pc, #36]	@ (800a2cc <prvProcessTimerOrBlockTask+0x98>)
 800a2a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2aa:	601a      	str	r2, [r3, #0]
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	f3bf 8f6f 	isb	sy
}
 800a2b4:	e001      	b.n	800a2ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a2b6:	f7ff fa09 	bl	80096cc <xTaskResumeAll>
}
 800a2ba:	bf00      	nop
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	24000ec4 	.word	0x24000ec4
 800a2c8:	24000ec8 	.word	0x24000ec8
 800a2cc:	e000ed04 	.word	0xe000ed04

0800a2d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a2d8:	4b0e      	ldr	r3, [pc, #56]	@ (800a314 <prvGetNextExpireTime+0x44>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d101      	bne.n	800a2e6 <prvGetNextExpireTime+0x16>
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	e000      	b.n	800a2e8 <prvGetNextExpireTime+0x18>
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d105      	bne.n	800a300 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2f4:	4b07      	ldr	r3, [pc, #28]	@ (800a314 <prvGetNextExpireTime+0x44>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	60fb      	str	r3, [r7, #12]
 800a2fe:	e001      	b.n	800a304 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a300:	2300      	movs	r3, #0
 800a302:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a304:	68fb      	ldr	r3, [r7, #12]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3714      	adds	r7, #20
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	24000ec0 	.word	0x24000ec0

0800a318 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a320:	f7ff fa72 	bl	8009808 <xTaskGetTickCount>
 800a324:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a326:	4b0b      	ldr	r3, [pc, #44]	@ (800a354 <prvSampleTimeNow+0x3c>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d205      	bcs.n	800a33c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a330:	f000 f93a 	bl	800a5a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	601a      	str	r2, [r3, #0]
 800a33a:	e002      	b.n	800a342 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a342:	4a04      	ldr	r2, [pc, #16]	@ (800a354 <prvSampleTimeNow+0x3c>)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a348:	68fb      	ldr	r3, [r7, #12]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	24000ed0 	.word	0x24000ed0

0800a358 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	607a      	str	r2, [r7, #4]
 800a364:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a366:	2300      	movs	r3, #0
 800a368:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	68ba      	ldr	r2, [r7, #8]
 800a36e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d812      	bhi.n	800a3a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	1ad2      	subs	r2, r2, r3
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	699b      	ldr	r3, [r3, #24]
 800a388:	429a      	cmp	r2, r3
 800a38a:	d302      	bcc.n	800a392 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a38c:	2301      	movs	r3, #1
 800a38e:	617b      	str	r3, [r7, #20]
 800a390:	e01b      	b.n	800a3ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a392:	4b10      	ldr	r3, [pc, #64]	@ (800a3d4 <prvInsertTimerInActiveList+0x7c>)
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	3304      	adds	r3, #4
 800a39a:	4619      	mov	r1, r3
 800a39c:	4610      	mov	r0, r2
 800a39e:	f7fe f80c 	bl	80083ba <vListInsert>
 800a3a2:	e012      	b.n	800a3ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d206      	bcs.n	800a3ba <prvInsertTimerInActiveList+0x62>
 800a3ac:	68ba      	ldr	r2, [r7, #8]
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d302      	bcc.n	800a3ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	617b      	str	r3, [r7, #20]
 800a3b8:	e007      	b.n	800a3ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a3ba:	4b07      	ldr	r3, [pc, #28]	@ (800a3d8 <prvInsertTimerInActiveList+0x80>)
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	3304      	adds	r3, #4
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	f7fd fff8 	bl	80083ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a3ca:	697b      	ldr	r3, [r7, #20]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3718      	adds	r7, #24
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	24000ec4 	.word	0x24000ec4
 800a3d8:	24000ec0 	.word	0x24000ec0

0800a3dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b08e      	sub	sp, #56	@ 0x38
 800a3e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3e2:	e0ce      	b.n	800a582 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	da19      	bge.n	800a41e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a3ea:	1d3b      	adds	r3, r7, #4
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d10b      	bne.n	800a40e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3fa:	f383 8811 	msr	BASEPRI, r3
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	61fb      	str	r3, [r7, #28]
}
 800a408:	bf00      	nop
 800a40a:	bf00      	nop
 800a40c:	e7fd      	b.n	800a40a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a40e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a414:	6850      	ldr	r0, [r2, #4]
 800a416:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a418:	6892      	ldr	r2, [r2, #8]
 800a41a:	4611      	mov	r1, r2
 800a41c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2b00      	cmp	r3, #0
 800a422:	f2c0 80ae 	blt.w	800a582 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a42c:	695b      	ldr	r3, [r3, #20]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d004      	beq.n	800a43c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a434:	3304      	adds	r3, #4
 800a436:	4618      	mov	r0, r3
 800a438:	f7fd fff8 	bl	800842c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a43c:	463b      	mov	r3, r7
 800a43e:	4618      	mov	r0, r3
 800a440:	f7ff ff6a 	bl	800a318 <prvSampleTimeNow>
 800a444:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2b09      	cmp	r3, #9
 800a44a:	f200 8097 	bhi.w	800a57c <prvProcessReceivedCommands+0x1a0>
 800a44e:	a201      	add	r2, pc, #4	@ (adr r2, 800a454 <prvProcessReceivedCommands+0x78>)
 800a450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a454:	0800a47d 	.word	0x0800a47d
 800a458:	0800a47d 	.word	0x0800a47d
 800a45c:	0800a47d 	.word	0x0800a47d
 800a460:	0800a4f3 	.word	0x0800a4f3
 800a464:	0800a507 	.word	0x0800a507
 800a468:	0800a553 	.word	0x0800a553
 800a46c:	0800a47d 	.word	0x0800a47d
 800a470:	0800a47d 	.word	0x0800a47d
 800a474:	0800a4f3 	.word	0x0800a4f3
 800a478:	0800a507 	.word	0x0800a507
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a47c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a482:	f043 0301 	orr.w	r3, r3, #1
 800a486:	b2da      	uxtb	r2, r3
 800a488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a48a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a48e:	68ba      	ldr	r2, [r7, #8]
 800a490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a492:	699b      	ldr	r3, [r3, #24]
 800a494:	18d1      	adds	r1, r2, r3
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a49a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a49c:	f7ff ff5c 	bl	800a358 <prvInsertTimerInActiveList>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d06c      	beq.n	800a580 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a8:	6a1b      	ldr	r3, [r3, #32]
 800a4aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4b4:	f003 0304 	and.w	r3, r3, #4
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d061      	beq.n	800a580 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a4bc:	68ba      	ldr	r2, [r7, #8]
 800a4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c0:	699b      	ldr	r3, [r3, #24]
 800a4c2:	441a      	add	r2, r3
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	9300      	str	r3, [sp, #0]
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	2100      	movs	r1, #0
 800a4cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4ce:	f7ff fe01 	bl	800a0d4 <xTimerGenericCommand>
 800a4d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a4d4:	6a3b      	ldr	r3, [r7, #32]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d152      	bne.n	800a580 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a4da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4de:	f383 8811 	msr	BASEPRI, r3
 800a4e2:	f3bf 8f6f 	isb	sy
 800a4e6:	f3bf 8f4f 	dsb	sy
 800a4ea:	61bb      	str	r3, [r7, #24]
}
 800a4ec:	bf00      	nop
 800a4ee:	bf00      	nop
 800a4f0:	e7fd      	b.n	800a4ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4f8:	f023 0301 	bic.w	r3, r3, #1
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a500:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a504:	e03d      	b.n	800a582 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a508:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a50c:	f043 0301 	orr.w	r3, r3, #1
 800a510:	b2da      	uxtb	r2, r3
 800a512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a514:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a51c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a520:	699b      	ldr	r3, [r3, #24]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d10b      	bne.n	800a53e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a52a:	f383 8811 	msr	BASEPRI, r3
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	617b      	str	r3, [r7, #20]
}
 800a538:	bf00      	nop
 800a53a:	bf00      	nop
 800a53c:	e7fd      	b.n	800a53a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a53e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a540:	699a      	ldr	r2, [r3, #24]
 800a542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a544:	18d1      	adds	r1, r2, r3
 800a546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a54a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a54c:	f7ff ff04 	bl	800a358 <prvInsertTimerInActiveList>
					break;
 800a550:	e017      	b.n	800a582 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a554:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a558:	f003 0302 	and.w	r3, r3, #2
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d103      	bne.n	800a568 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a560:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a562:	f7fd fe1b 	bl	800819c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a566:	e00c      	b.n	800a582 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a56a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a56e:	f023 0301 	bic.w	r3, r3, #1
 800a572:	b2da      	uxtb	r2, r3
 800a574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a576:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a57a:	e002      	b.n	800a582 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a57c:	bf00      	nop
 800a57e:	e000      	b.n	800a582 <prvProcessReceivedCommands+0x1a6>
					break;
 800a580:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a582:	4b08      	ldr	r3, [pc, #32]	@ (800a5a4 <prvProcessReceivedCommands+0x1c8>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	1d39      	adds	r1, r7, #4
 800a588:	2200      	movs	r2, #0
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7fe fc78 	bl	8008e80 <xQueueReceive>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	f47f af26 	bne.w	800a3e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a598:	bf00      	nop
 800a59a:	bf00      	nop
 800a59c:	3730      	adds	r7, #48	@ 0x30
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	24000ec8 	.word	0x24000ec8

0800a5a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b088      	sub	sp, #32
 800a5ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5ae:	e049      	b.n	800a644 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a5b0:	4b2e      	ldr	r3, [pc, #184]	@ (800a66c <prvSwitchTimerLists+0xc4>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5ba:	4b2c      	ldr	r3, [pc, #176]	@ (800a66c <prvSwitchTimerLists+0xc4>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	3304      	adds	r3, #4
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7fd ff2f 	bl	800842c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	6a1b      	ldr	r3, [r3, #32]
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5dc:	f003 0304 	and.w	r3, r3, #4
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d02f      	beq.n	800a644 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	699b      	ldr	r3, [r3, #24]
 800a5e8:	693a      	ldr	r2, [r7, #16]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a5ee:	68ba      	ldr	r2, [r7, #8]
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d90e      	bls.n	800a614 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	68fa      	ldr	r2, [r7, #12]
 800a600:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a602:	4b1a      	ldr	r3, [pc, #104]	@ (800a66c <prvSwitchTimerLists+0xc4>)
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	3304      	adds	r3, #4
 800a60a:	4619      	mov	r1, r3
 800a60c:	4610      	mov	r0, r2
 800a60e:	f7fd fed4 	bl	80083ba <vListInsert>
 800a612:	e017      	b.n	800a644 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a614:	2300      	movs	r3, #0
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	2300      	movs	r3, #0
 800a61a:	693a      	ldr	r2, [r7, #16]
 800a61c:	2100      	movs	r1, #0
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f7ff fd58 	bl	800a0d4 <xTimerGenericCommand>
 800a624:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d10b      	bne.n	800a644 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a62c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a630:	f383 8811 	msr	BASEPRI, r3
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	603b      	str	r3, [r7, #0]
}
 800a63e:	bf00      	nop
 800a640:	bf00      	nop
 800a642:	e7fd      	b.n	800a640 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a644:	4b09      	ldr	r3, [pc, #36]	@ (800a66c <prvSwitchTimerLists+0xc4>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d1b0      	bne.n	800a5b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a64e:	4b07      	ldr	r3, [pc, #28]	@ (800a66c <prvSwitchTimerLists+0xc4>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a654:	4b06      	ldr	r3, [pc, #24]	@ (800a670 <prvSwitchTimerLists+0xc8>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a04      	ldr	r2, [pc, #16]	@ (800a66c <prvSwitchTimerLists+0xc4>)
 800a65a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a65c:	4a04      	ldr	r2, [pc, #16]	@ (800a670 <prvSwitchTimerLists+0xc8>)
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	6013      	str	r3, [r2, #0]
}
 800a662:	bf00      	nop
 800a664:	3718      	adds	r7, #24
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	24000ec0 	.word	0x24000ec0
 800a670:	24000ec4 	.word	0x24000ec4

0800a674 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a67a:	f7fe f835 	bl	80086e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a67e:	4b15      	ldr	r3, [pc, #84]	@ (800a6d4 <prvCheckForValidListAndQueue+0x60>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d120      	bne.n	800a6c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a686:	4814      	ldr	r0, [pc, #80]	@ (800a6d8 <prvCheckForValidListAndQueue+0x64>)
 800a688:	f7fd fe46 	bl	8008318 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a68c:	4813      	ldr	r0, [pc, #76]	@ (800a6dc <prvCheckForValidListAndQueue+0x68>)
 800a68e:	f7fd fe43 	bl	8008318 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a692:	4b13      	ldr	r3, [pc, #76]	@ (800a6e0 <prvCheckForValidListAndQueue+0x6c>)
 800a694:	4a10      	ldr	r2, [pc, #64]	@ (800a6d8 <prvCheckForValidListAndQueue+0x64>)
 800a696:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a698:	4b12      	ldr	r3, [pc, #72]	@ (800a6e4 <prvCheckForValidListAndQueue+0x70>)
 800a69a:	4a10      	ldr	r2, [pc, #64]	@ (800a6dc <prvCheckForValidListAndQueue+0x68>)
 800a69c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a69e:	2300      	movs	r3, #0
 800a6a0:	9300      	str	r3, [sp, #0]
 800a6a2:	4b11      	ldr	r3, [pc, #68]	@ (800a6e8 <prvCheckForValidListAndQueue+0x74>)
 800a6a4:	4a11      	ldr	r2, [pc, #68]	@ (800a6ec <prvCheckForValidListAndQueue+0x78>)
 800a6a6:	2110      	movs	r1, #16
 800a6a8:	200a      	movs	r0, #10
 800a6aa:	f7fe f9a9 	bl	8008a00 <xQueueGenericCreateStatic>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	4a08      	ldr	r2, [pc, #32]	@ (800a6d4 <prvCheckForValidListAndQueue+0x60>)
 800a6b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a6b4:	4b07      	ldr	r3, [pc, #28]	@ (800a6d4 <prvCheckForValidListAndQueue+0x60>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d005      	beq.n	800a6c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a6bc:	4b05      	ldr	r3, [pc, #20]	@ (800a6d4 <prvCheckForValidListAndQueue+0x60>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	490b      	ldr	r1, [pc, #44]	@ (800a6f0 <prvCheckForValidListAndQueue+0x7c>)
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7fe fdce 	bl	8009264 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6c8:	f7fe f840 	bl	800874c <vPortExitCritical>
}
 800a6cc:	bf00      	nop
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	24000ec8 	.word	0x24000ec8
 800a6d8:	24000e98 	.word	0x24000e98
 800a6dc:	24000eac 	.word	0x24000eac
 800a6e0:	24000ec0 	.word	0x24000ec0
 800a6e4:	24000ec4 	.word	0x24000ec4
 800a6e8:	24000f74 	.word	0x24000f74
 800a6ec:	24000ed4 	.word	0x24000ed4
 800a6f0:	0800a790 	.word	0x0800a790

0800a6f4 <memset>:
 800a6f4:	4402      	add	r2, r0
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d100      	bne.n	800a6fe <memset+0xa>
 800a6fc:	4770      	bx	lr
 800a6fe:	f803 1b01 	strb.w	r1, [r3], #1
 800a702:	e7f9      	b.n	800a6f8 <memset+0x4>

0800a704 <__libc_init_array>:
 800a704:	b570      	push	{r4, r5, r6, lr}
 800a706:	4d0d      	ldr	r5, [pc, #52]	@ (800a73c <__libc_init_array+0x38>)
 800a708:	4c0d      	ldr	r4, [pc, #52]	@ (800a740 <__libc_init_array+0x3c>)
 800a70a:	1b64      	subs	r4, r4, r5
 800a70c:	10a4      	asrs	r4, r4, #2
 800a70e:	2600      	movs	r6, #0
 800a710:	42a6      	cmp	r6, r4
 800a712:	d109      	bne.n	800a728 <__libc_init_array+0x24>
 800a714:	4d0b      	ldr	r5, [pc, #44]	@ (800a744 <__libc_init_array+0x40>)
 800a716:	4c0c      	ldr	r4, [pc, #48]	@ (800a748 <__libc_init_array+0x44>)
 800a718:	f000 f826 	bl	800a768 <_init>
 800a71c:	1b64      	subs	r4, r4, r5
 800a71e:	10a4      	asrs	r4, r4, #2
 800a720:	2600      	movs	r6, #0
 800a722:	42a6      	cmp	r6, r4
 800a724:	d105      	bne.n	800a732 <__libc_init_array+0x2e>
 800a726:	bd70      	pop	{r4, r5, r6, pc}
 800a728:	f855 3b04 	ldr.w	r3, [r5], #4
 800a72c:	4798      	blx	r3
 800a72e:	3601      	adds	r6, #1
 800a730:	e7ee      	b.n	800a710 <__libc_init_array+0xc>
 800a732:	f855 3b04 	ldr.w	r3, [r5], #4
 800a736:	4798      	blx	r3
 800a738:	3601      	adds	r6, #1
 800a73a:	e7f2      	b.n	800a722 <__libc_init_array+0x1e>
 800a73c:	0800c7dc 	.word	0x0800c7dc
 800a740:	0800c7dc 	.word	0x0800c7dc
 800a744:	0800c7dc 	.word	0x0800c7dc
 800a748:	0800c7e0 	.word	0x0800c7e0

0800a74c <memcpy>:
 800a74c:	440a      	add	r2, r1
 800a74e:	4291      	cmp	r1, r2
 800a750:	f100 33ff 	add.w	r3, r0, #4294967295
 800a754:	d100      	bne.n	800a758 <memcpy+0xc>
 800a756:	4770      	bx	lr
 800a758:	b510      	push	{r4, lr}
 800a75a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a75e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a762:	4291      	cmp	r1, r2
 800a764:	d1f9      	bne.n	800a75a <memcpy+0xe>
 800a766:	bd10      	pop	{r4, pc}

0800a768 <_init>:
 800a768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76a:	bf00      	nop
 800a76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a76e:	bc08      	pop	{r3}
 800a770:	469e      	mov	lr, r3
 800a772:	4770      	bx	lr

0800a774 <_fini>:
 800a774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a776:	bf00      	nop
 800a778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a77a:	bc08      	pop	{r3}
 800a77c:	469e      	mov	lr, r3
 800a77e:	4770      	bx	lr
