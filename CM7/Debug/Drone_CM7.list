
Drone_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094d8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08009778  08009778  0000a778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098c4  080098c4  0000b070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080098c4  080098c4  0000a8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098cc  080098cc  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098cc  080098cc  0000a8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080098d0  080098d0  0000a8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  24000000  080098d4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a0  24000070  08009944  0000b070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000910  08009944  0000b910  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022413  00000000  00000000  0000b09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043a5  00000000  00000000  0002d4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac0  00000000  00000000  00031858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014af  00000000  00000000  00033318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041f75  00000000  00000000  000347c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000221af  00000000  00000000  0007673c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b3690  00000000  00000000  000988eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0024bf7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007860  00000000  00000000  0024bfc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00253820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009760 	.word	0x08009760

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	08009760 	.word	0x08009760

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <FlightContextUpdateIMUData>:
/*
* \brief IMU collects it accel and gyro data in millimeters and millidegrees. This is
* converted to meters and degrees
*/
void FlightContextUpdateIMUData(FlightContext *pContext, Vec3 accel, Vec3 gyro)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	4638      	mov	r0, r7
 80006b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    pContext->imuUnFilteredAccel.x = ((float)accel.x) / 1000.0f;
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	ee07 3a90 	vmov	s15, r3
 80006c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006c4:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8000758 <FlightContextUpdateIMUData+0xac>
 80006c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	edc3 7a00 	vstr	s15, [r3]
    pContext->imuUnFilteredAccel.y = ((float)accel.y) / 1000.0f;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	ee07 3a90 	vmov	s15, r3
 80006d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006dc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000758 <FlightContextUpdateIMUData+0xac>
 80006e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	edc3 7a01 	vstr	s15, [r3, #4]
    pContext->imuUnFilteredAccel.z = ((float)accel.z) / 1000.0f;
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	ee07 3a90 	vmov	s15, r3
 80006f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006f4:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000758 <FlightContextUpdateIMUData+0xac>
 80006f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	edc3 7a02 	vstr	s15, [r3, #8]

    pContext->imuUnFilteredGyro.x = ((float)gyro.x) / 1000.0f;
 8000702:	69bb      	ldr	r3, [r7, #24]
 8000704:	ee07 3a90 	vmov	s15, r3
 8000708:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800070c:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000758 <FlightContextUpdateIMUData+0xac>
 8000710:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	edc3 7a03 	vstr	s15, [r3, #12]
    pContext->imuUnFilteredGyro.y = ((float)gyro.y) / 1000.0f;
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	ee07 3a90 	vmov	s15, r3
 8000720:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000724:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8000758 <FlightContextUpdateIMUData+0xac>
 8000728:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	edc3 7a04 	vstr	s15, [r3, #16]
    pContext->imuUnFilteredGyro.z = ((float)gyro.z) / 1000.0f;
 8000732:	6a3b      	ldr	r3, [r7, #32]
 8000734:	ee07 3a90 	vmov	s15, r3
 8000738:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800073c:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8000758 <FlightContextUpdateIMUData+0xac>
 8000740:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	447a0000 	.word	0x447a0000

0800075c <__io_putchar>:

static int8_t LoggerSyncUARTTaskHandler(void);
static int8_t LoggerWriteToUART(RingBuff volatile *pBuff);

PUTCHAR_PROTOTYPE
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 8000764:	f001 fd0e 	bl	8002184 <HAL_GetCurrentCPUID>
 8000768:	4603      	mov	r3, r0
 800076a:	2b03      	cmp	r3, #3
 800076c:	d110      	bne.n	8000790 <__io_putchar+0x34>
  {
    RingBuffWrite(pCM7RingBuf, (void*)&ch, 1);
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <__io_putchar+0x68>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	1d39      	adds	r1, r7, #4
 8000774:	2201      	movs	r2, #1
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f996 	bl	8000aa8 <RingBuffWrite>
    // RingBuffWrite(pCM7RingBuf, (void*)&d, 1);
    // RingBuffWrite(pCM7RingBuf, (void*)&d, 1);
    if((char)ch == '\n')
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b0a      	cmp	r3, #10
 8000782:	d119      	bne.n	80007b8 <__io_putchar+0x5c>
    {
      LoggerWriteToUART(pCM7RingBuf);
 8000784:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <__io_putchar+0x68>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4618      	mov	r0, r3
 800078a:	f000 f85d 	bl	8000848 <LoggerWriteToUART>
 800078e:	e013      	b.n	80007b8 <__io_putchar+0x5c>
    }
  }
  else 
  {
    RingBuffWrite(pCM4RingBuf, (void*)&ch, 1);
 8000790:	4b0d      	ldr	r3, [pc, #52]	@ (80007c8 <__io_putchar+0x6c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	1d39      	adds	r1, r7, #4
 8000796:	2201      	movs	r2, #1
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f985 	bl	8000aa8 <RingBuffWrite>
    if((char)ch == '\n')
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b0a      	cmp	r3, #10
 80007a4:	d108      	bne.n	80007b8 <__io_putchar+0x5c>
    {
      /*
      * CM4 sends signal to CM7 to send CM4's ring buffer to the UART interface
      */
      uint32_t taskID = SYNC_TASKID_UART_OUT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
      SyncMailBoxWriteNotify(MAILBOX_CM7_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	2204      	movs	r2, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	2001      	movs	r0, #1
 80007b4:	f000 fc16 	bl	8000fe4 <SyncMailBoxWriteNotify>
    }
  }
  return ch;
 80007b8:	687b      	ldr	r3, [r7, #4]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	24000090 	.word	0x24000090
 80007c8:	2400008c 	.word	0x2400008c

080007cc <LoggerInit>:

int8_t LoggerInit(UART_HandleTypeDef *pUART_)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  pUART = NULL;
 80007d4:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <LoggerInit+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
  if(HAL_GetCurrentCPUID() == CM7_CPUID && pUART_ != NULL)
 80007da:	f001 fcd3 	bl	8002184 <HAL_GetCurrentCPUID>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	d105      	bne.n	80007f0 <LoggerInit+0x24>
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d002      	beq.n	80007f0 <LoggerInit+0x24>
  {
    pUART = pUART_;
 80007ea:	4a11      	ldr	r2, [pc, #68]	@ (8000830 <LoggerInit+0x64>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6013      	str	r3, [r2, #0]
  }
  /*
  * Local variables are not shared among the cores. 
  * So each ring buffer pointer needs to be inited for each core
  */
  pCM4RingBuf = RingBuffCreate((void*)MEM_SHARED_CM4_UART_RINGBUFF_START, MEM_SHARED_CM4_UART_RINGBUFF_TOTAL_LEN);
 80007f0:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80007f4:	480f      	ldr	r0, [pc, #60]	@ (8000834 <LoggerInit+0x68>)
 80007f6:	f000 f927 	bl	8000a48 <RingBuffCreate>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000838 <LoggerInit+0x6c>)
 80007fe:	6013      	str	r3, [r2, #0]
  pCM7RingBuf = RingBuffCreate((void*)MEM_SHARED_CM7_UART_RINGBUFF_START, MEM_SHARED_CM7_UART_RINGBUFF_TOTAL_LEN);
 8000800:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000804:	480d      	ldr	r0, [pc, #52]	@ (800083c <LoggerInit+0x70>)
 8000806:	f000 f91f 	bl	8000a48 <RingBuffCreate>
 800080a:	4603      	mov	r3, r0
 800080c:	4a0c      	ldr	r2, [pc, #48]	@ (8000840 <LoggerInit+0x74>)
 800080e:	6013      	str	r3, [r2, #0]

  if(SyncRegisterHandler(LoggerSyncUARTTaskHandler, SYNC_TASKID_UART_OUT) != 1)
 8000810:	2100      	movs	r1, #0
 8000812:	480c      	ldr	r0, [pc, #48]	@ (8000844 <LoggerInit+0x78>)
 8000814:	f000 fc3e 	bl	8001094 <SyncRegisterHandler>
 8000818:	4603      	mov	r3, r0
 800081a:	2b01      	cmp	r3, #1
 800081c:	d002      	beq.n	8000824 <LoggerInit+0x58>
  {
    return -1;
 800081e:	f04f 33ff 	mov.w	r3, #4294967295
 8000822:	e000      	b.n	8000826 <LoggerInit+0x5a>
  }

  return 1;
 8000824:	2301      	movs	r3, #1
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	24000094 	.word	0x24000094
 8000834:	38000008 	.word	0x38000008
 8000838:	2400008c 	.word	0x2400008c
 800083c:	38000128 	.word	0x38000128
 8000840:	24000090 	.word	0x24000090
 8000844:	08000899 	.word	0x08000899

08000848 <LoggerWriteToUART>:

static int8_t LoggerWriteToUART(RingBuff volatile *pRingBuf)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t len = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  void *pBufToTransmit = NULL;
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]

  send:
  len = RingBuffGetLinearBlockReadLength(pRingBuf);
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f000 fa61 	bl	8000d20 <RingBuffGetLinearBlockReadLength>
 800085e:	60f8      	str	r0, [r7, #12]
  if(len > 0)
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d011      	beq.n	800088a <LoggerWriteToUART+0x42>
  {
    pBufToTransmit = RingBuffGetLinearBlockReadAddress(pRingBuf);
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f000 fa30 	bl	8000ccc <RingBuffGetLinearBlockReadAddress>
 800086c:	60b8      	str	r0, [r7, #8]
    HAL_UART_Transmit(pUART, pBufToTransmit, len, 1000);
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <LoggerWriteToUART+0x4c>)
 8000870:	6818      	ldr	r0, [r3, #0]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	b29a      	uxth	r2, r3
 8000876:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800087a:	68b9      	ldr	r1, [r7, #8]
 800087c:	f006 fb84 	bl	8006f88 <HAL_UART_Transmit>
    RingBuffSkip(pRingBuf, len);
 8000880:	68f9      	ldr	r1, [r7, #12]
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f000 fa8e 	bl	8000da4 <RingBuffSkip>
    /* Check for anything in the overflow buffer */
    goto send;
 8000888:	e7e6      	b.n	8000858 <LoggerWriteToUART+0x10>
  }
  return 1;
 800088a:	2301      	movs	r3, #1
}
 800088c:	4618      	mov	r0, r3
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	24000094 	.word	0x24000094

08000898 <LoggerSyncUARTTaskHandler>:

static int8_t LoggerSyncUARTTaskHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 800089c:	f001 fc72 	bl	8002184 <HAL_GetCurrentCPUID>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b03      	cmp	r3, #3
 80008a4:	d106      	bne.n	80008b4 <LoggerSyncUARTTaskHandler+0x1c>
  {
    // LOG_INFO("Sending cm4 buffer to UART");
    LoggerWriteToUART(pCM4RingBuf);
 80008a6:	4b04      	ldr	r3, [pc, #16]	@ (80008b8 <LoggerSyncUARTTaskHandler+0x20>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ffcc 	bl	8000848 <LoggerWriteToUART>
    return 1;
 80008b0:	2301      	movs	r3, #1
 80008b2:	e7ff      	b.n	80008b4 <LoggerSyncUARTTaskHandler+0x1c>
  }
 80008b4:	4618      	mov	r0, r3
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2400008c 	.word	0x2400008c

080008bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008c0:	4b49      	ldr	r3, [pc, #292]	@ (80009e8 <SystemInit+0x12c>)
 80008c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008c6:	4a48      	ldr	r2, [pc, #288]	@ (80009e8 <SystemInit+0x12c>)
 80008c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80008d0:	4b45      	ldr	r3, [pc, #276]	@ (80009e8 <SystemInit+0x12c>)
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	4a44      	ldr	r2, [pc, #272]	@ (80009e8 <SystemInit+0x12c>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008dc:	4b43      	ldr	r3, [pc, #268]	@ (80009ec <SystemInit+0x130>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f003 030f 	and.w	r3, r3, #15
 80008e4:	2b06      	cmp	r3, #6
 80008e6:	d807      	bhi.n	80008f8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008e8:	4b40      	ldr	r3, [pc, #256]	@ (80009ec <SystemInit+0x130>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f023 030f 	bic.w	r3, r3, #15
 80008f0:	4a3e      	ldr	r2, [pc, #248]	@ (80009ec <SystemInit+0x130>)
 80008f2:	f043 0307 	orr.w	r3, r3, #7
 80008f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80008f8:	4b3d      	ldr	r3, [pc, #244]	@ (80009f0 <SystemInit+0x134>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a3c      	ldr	r2, [pc, #240]	@ (80009f0 <SystemInit+0x134>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000904:	4b3a      	ldr	r3, [pc, #232]	@ (80009f0 <SystemInit+0x134>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800090a:	4b39      	ldr	r3, [pc, #228]	@ (80009f0 <SystemInit+0x134>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	4938      	ldr	r1, [pc, #224]	@ (80009f0 <SystemInit+0x134>)
 8000910:	4b38      	ldr	r3, [pc, #224]	@ (80009f4 <SystemInit+0x138>)
 8000912:	4013      	ands	r3, r2
 8000914:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000916:	4b35      	ldr	r3, [pc, #212]	@ (80009ec <SystemInit+0x130>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	2b00      	cmp	r3, #0
 8000920:	d007      	beq.n	8000932 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000922:	4b32      	ldr	r3, [pc, #200]	@ (80009ec <SystemInit+0x130>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f023 030f 	bic.w	r3, r3, #15
 800092a:	4a30      	ldr	r2, [pc, #192]	@ (80009ec <SystemInit+0x130>)
 800092c:	f043 0307 	orr.w	r3, r3, #7
 8000930:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000932:	4b2f      	ldr	r3, [pc, #188]	@ (80009f0 <SystemInit+0x134>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000938:	4b2d      	ldr	r3, [pc, #180]	@ (80009f0 <SystemInit+0x134>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800093e:	4b2c      	ldr	r3, [pc, #176]	@ (80009f0 <SystemInit+0x134>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000944:	4b2a      	ldr	r3, [pc, #168]	@ (80009f0 <SystemInit+0x134>)
 8000946:	4a2c      	ldr	r2, [pc, #176]	@ (80009f8 <SystemInit+0x13c>)
 8000948:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800094a:	4b29      	ldr	r3, [pc, #164]	@ (80009f0 <SystemInit+0x134>)
 800094c:	4a2b      	ldr	r2, [pc, #172]	@ (80009fc <SystemInit+0x140>)
 800094e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000950:	4b27      	ldr	r3, [pc, #156]	@ (80009f0 <SystemInit+0x134>)
 8000952:	4a2b      	ldr	r2, [pc, #172]	@ (8000a00 <SystemInit+0x144>)
 8000954:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000956:	4b26      	ldr	r3, [pc, #152]	@ (80009f0 <SystemInit+0x134>)
 8000958:	2200      	movs	r2, #0
 800095a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800095c:	4b24      	ldr	r3, [pc, #144]	@ (80009f0 <SystemInit+0x134>)
 800095e:	4a28      	ldr	r2, [pc, #160]	@ (8000a00 <SystemInit+0x144>)
 8000960:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000962:	4b23      	ldr	r3, [pc, #140]	@ (80009f0 <SystemInit+0x134>)
 8000964:	2200      	movs	r2, #0
 8000966:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000968:	4b21      	ldr	r3, [pc, #132]	@ (80009f0 <SystemInit+0x134>)
 800096a:	4a25      	ldr	r2, [pc, #148]	@ (8000a00 <SystemInit+0x144>)
 800096c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800096e:	4b20      	ldr	r3, [pc, #128]	@ (80009f0 <SystemInit+0x134>)
 8000970:	2200      	movs	r2, #0
 8000972:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000974:	4b1e      	ldr	r3, [pc, #120]	@ (80009f0 <SystemInit+0x134>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a1d      	ldr	r2, [pc, #116]	@ (80009f0 <SystemInit+0x134>)
 800097a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800097e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000980:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <SystemInit+0x134>)
 8000982:	2200      	movs	r2, #0
 8000984:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000986:	4b1f      	ldr	r3, [pc, #124]	@ (8000a04 <SystemInit+0x148>)
 8000988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800098a:	4a1e      	ldr	r2, [pc, #120]	@ (8000a04 <SystemInit+0x148>)
 800098c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000990:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000992:	4b1d      	ldr	r3, [pc, #116]	@ (8000a08 <SystemInit+0x14c>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	4b1d      	ldr	r3, [pc, #116]	@ (8000a0c <SystemInit+0x150>)
 8000998:	4013      	ands	r3, r2
 800099a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800099e:	d202      	bcs.n	80009a6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <SystemInit+0x154>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80009a6:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <SystemInit+0x134>)
 80009a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80009ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d113      	bne.n	80009dc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80009b4:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <SystemInit+0x134>)
 80009b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80009ba:	4a0d      	ldr	r2, [pc, #52]	@ (80009f0 <SystemInit+0x134>)
 80009bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009c0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80009c4:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <SystemInit+0x158>)
 80009c6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80009ca:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <SystemInit+0x134>)
 80009ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80009d2:	4a07      	ldr	r2, [pc, #28]	@ (80009f0 <SystemInit+0x134>)
 80009d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80009d8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00
 80009ec:	52002000 	.word	0x52002000
 80009f0:	58024400 	.word	0x58024400
 80009f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80009f8:	02020200 	.word	0x02020200
 80009fc:	01ff0000 	.word	0x01ff0000
 8000a00:	01010280 	.word	0x01010280
 8000a04:	580000c0 	.word	0x580000c0
 8000a08:	5c001000 	.word	0x5c001000
 8000a0c:	ffff0000 	.word	0xffff0000
 8000a10:	51008108 	.word	0x51008108
 8000a14:	52004000 	.word	0x52004000

08000a18 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000a1c:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <ExitRun0Mode+0x2c>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	4a08      	ldr	r2, [pc, #32]	@ (8000a44 <ExitRun0Mode+0x2c>)
 8000a22:	f023 0302 	bic.w	r3, r3, #2
 8000a26:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000a28:	bf00      	nop
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <ExitRun0Mode+0x2c>)
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d0f9      	beq.n	8000a2a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000a36:	bf00      	nop
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	58024800 	.word	0x58024800

08000a48 <RingBuffCreate>:
 * \param[in]       buff: Buffer handle
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
RINGBUFF_VOLATILE RingBuff* RingBuffCreate(void* pBuff, size_t size) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
    if (pBuff == NULL || size == 0 || size < (sizeof(RingBuff) + 1)) {
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d005      	beq.n	8000a64 <RingBuffCreate+0x1c>
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d002      	beq.n	8000a64 <RingBuffCreate+0x1c>
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	2b20      	cmp	r3, #32
 8000a62:	d801      	bhi.n	8000a68 <RingBuffCreate+0x20>
        return NULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	e017      	b.n	8000a98 <RingBuffCreate+0x50>
    }

    RINGBUFF_VOLATILE RingBuff *pRingBuf = (RingBuff*)pBuff;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	60fb      	str	r3, [r7, #12]
    BUF_MEMSET((void *)pRingBuf, 0x00, sizeof(RingBuff));
 8000a6c:	2220      	movs	r2, #32
 8000a6e:	2100      	movs	r1, #0
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f008 f8e5 	bl	8008c40 <memset>

    pRingBuf->size = size - sizeof(RingBuff);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	f1a3 0220 	sub.w	r2, r3, #32
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	609a      	str	r2, [r3, #8]
    pRingBuf->buff = ((uint8_t*) ((uintptr_t)pBuff) + sizeof(RingBuff));
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f103 0220 	add.w	r2, r3, #32
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	605a      	str	r2, [r3, #4]

    pRingBuf->magic1 = 0xDEADBEEF;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	@ (8000aa0 <RingBuffCreate+0x58>)
 8000a8e:	601a      	str	r2, [r3, #0]
    pRingBuf->magic2 = ~0xDEADBEEF;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4a04      	ldr	r2, [pc, #16]	@ (8000aa4 <RingBuffCreate+0x5c>)
 8000a94:	619a      	str	r2, [r3, #24]

    return pRingBuf;
 8000a96:	68fb      	ldr	r3, [r7, #12]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	deadbeef 	.word	0xdeadbeef
 8000aa4:	21524110 	.word	0x21524110

08000aa8 <RingBuffWrite>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
RingBuffWrite(RINGBUFF_VOLATILE RingBuff* buff, const void* data, size_t btw) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d017      	beq.n	8000aee <RingBuffWrite+0x46>
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a3b      	ldr	r2, [pc, #236]	@ (8000bb0 <RingBuffWrite+0x108>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d112      	bne.n	8000aee <RingBuffWrite+0x46>
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a39      	ldr	r2, [pc, #228]	@ (8000bb4 <RingBuffWrite+0x10c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d10d      	bne.n	8000aee <RingBuffWrite+0x46>
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d009      	beq.n	8000aee <RingBuffWrite+0x46>
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d005      	beq.n	8000aee <RingBuffWrite+0x46>
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d002      	beq.n	8000aee <RingBuffWrite+0x46>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d101      	bne.n	8000af2 <RingBuffWrite+0x4a>
        return 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	e059      	b.n	8000ba6 <RingBuffWrite+0xfe>
    }

    /* Calculate maximum number of bytes available to write */
    free = RingBuffGetFree(buff);
 8000af2:	68f8      	ldr	r0, [r7, #12]
 8000af4:	f000 f860 	bl	8000bb8 <RingBuffGetFree>
 8000af8:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	4293      	cmp	r3, r2
 8000b00:	bf28      	it	cs
 8000b02:	4613      	movcs	r3, r2
 8000b04:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d101      	bne.n	8000b10 <RingBuffWrite+0x68>
        return 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	e04a      	b.n	8000ba6 <RingBuffWrite+0xfe>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	689a      	ldr	r2, [r3, #8]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d905      	bls.n	8000b2c <RingBuffWrite+0x84>
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	689a      	ldr	r2, [r3, #8]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	691b      	ldr	r3, [r3, #16]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	e000      	b.n	8000b2e <RingBuffWrite+0x86>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	685a      	ldr	r2, [r3, #4]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	691b      	ldr	r3, [r3, #16]
 8000b38:	4413      	add	r3, r2
 8000b3a:	697a      	ldr	r2, [r7, #20]
 8000b3c:	69f9      	ldr	r1, [r7, #28]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f008 f8f9 	bl	8008d36 <memcpy>
    buff->w += tocopy;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	691a      	ldr	r2, [r3, #16]
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	441a      	add	r2, r3
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
    btw -= tocopy;
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d00b      	beq.n	8000b76 <RingBuffWrite+0xce>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	6858      	ldr	r0, [r3, #4]
 8000b62:	69fa      	ldr	r2, [r7, #28]
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	4413      	add	r3, r2
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f008 f8e3 	bl	8008d36 <memcpy>
        buff->w = btw;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	611a      	str	r2, [r3, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	691a      	ldr	r2, [r3, #16]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d302      	bcc.n	8000b88 <RingBuffWrite+0xe0>
        buff->w = 0;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_WRITE, tocopy + btw);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	695b      	ldr	r3, [r3, #20]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d007      	beq.n	8000ba0 <RingBuffWrite+0xf8>
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	695b      	ldr	r3, [r3, #20]
 8000b94:	6979      	ldr	r1, [r7, #20]
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	440a      	add	r2, r1
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	4798      	blx	r3
    return tocopy + btw;
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3720      	adds	r7, #32
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	deadbeef 	.word	0xdeadbeef
 8000bb4:	21524110 	.word	0x21524110

08000bb8 <RingBuffGetFree>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
RingBuffGetFree(RINGBUFF_VOLATILE RingBuff* buff) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b087      	sub	sp, #28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d011      	beq.n	8000bea <RingBuffGetFree+0x32>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a1c      	ldr	r2, [pc, #112]	@ (8000c3c <RingBuffGetFree+0x84>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d10c      	bne.n	8000bea <RingBuffGetFree+0x32>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a1a      	ldr	r2, [pc, #104]	@ (8000c40 <RingBuffGetFree+0x88>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d107      	bne.n	8000bea <RingBuffGetFree+0x32>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d003      	beq.n	8000bea <RingBuffGetFree+0x32>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <RingBuffGetFree+0x36>
        return 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e01f      	b.n	8000c2e <RingBuffGetFree+0x76>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	691b      	ldr	r3, [r3, #16]
 8000bf2:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d103      	bne.n	8000c0a <RingBuffGetFree+0x52>
        size = buff->size;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	e00f      	b.n	8000c2a <RingBuffGetFree+0x72>
    } else if (r > w) {
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d904      	bls.n	8000c1c <RingBuffGetFree+0x64>
        size = r - w;
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	e006      	b.n	8000c2a <RingBuffGetFree+0x72>
    } else {
        size = buff->size - (w - r);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689a      	ldr	r2, [r3, #8]
 8000c20:	68f9      	ldr	r1, [r7, #12]
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	1acb      	subs	r3, r1, r3
 8000c26:	4413      	add	r3, r2
 8000c28:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	3b01      	subs	r3, #1
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	371c      	adds	r7, #28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	deadbeef 	.word	0xdeadbeef
 8000c40:	21524110 	.word	0x21524110

08000c44 <RingBuffGetFull>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
RingBuffGetFull(RINGBUFF_VOLATILE RingBuff* buff) {
 8000c44:	b480      	push	{r7}
 8000c46:	b087      	sub	sp, #28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d011      	beq.n	8000c76 <RingBuffGetFull+0x32>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc4 <RingBuffGetFull+0x80>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d10c      	bne.n	8000c76 <RingBuffGetFull+0x32>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a19      	ldr	r2, [pc, #100]	@ (8000cc8 <RingBuffGetFull+0x84>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d107      	bne.n	8000c76 <RingBuffGetFull+0x32>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <RingBuffGetFull+0x32>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d101      	bne.n	8000c7a <RingBuffGetFull+0x36>
        return 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e01d      	b.n	8000cb6 <RingBuffGetFull+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	691b      	ldr	r3, [r3, #16]
 8000c7e:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d102      	bne.n	8000c94 <RingBuffGetFull+0x50>
        size = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	e00f      	b.n	8000cb4 <RingBuffGetFull+0x70>
    } else if (w > r) {
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d904      	bls.n	8000ca6 <RingBuffGetFull+0x62>
        size = w - r;
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	e006      	b.n	8000cb4 <RingBuffGetFull+0x70>
    } else {
        size = buff->size - (r - w);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	6939      	ldr	r1, [r7, #16]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	1acb      	subs	r3, r1, r3
 8000cb0:	4413      	add	r3, r2
 8000cb2:	617b      	str	r3, [r7, #20]
    }
    return size;
 8000cb4:	697b      	ldr	r3, [r7, #20]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	371c      	adds	r7, #28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	deadbeef 	.word	0xdeadbeef
 8000cc8:	21524110 	.word	0x21524110

08000ccc <RingBuffGetLinearBlockReadAddress>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *
RingBuffGetLinearBlockReadAddress(RINGBUFF_VOLATILE RingBuff* buff) {
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d011      	beq.n	8000cfe <RingBuffGetLinearBlockReadAddress+0x32>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a0e      	ldr	r2, [pc, #56]	@ (8000d18 <RingBuffGetLinearBlockReadAddress+0x4c>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d10c      	bne.n	8000cfe <RingBuffGetLinearBlockReadAddress+0x32>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a0c      	ldr	r2, [pc, #48]	@ (8000d1c <RingBuffGetLinearBlockReadAddress+0x50>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d107      	bne.n	8000cfe <RingBuffGetLinearBlockReadAddress+0x32>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <RingBuffGetLinearBlockReadAddress+0x32>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d101      	bne.n	8000d02 <RingBuffGetLinearBlockReadAddress+0x36>
        return NULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e004      	b.n	8000d0c <RingBuffGetLinearBlockReadAddress+0x40>
    }
    return &buff->buff[buff->r];
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	4413      	add	r3, r2
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	deadbeef 	.word	0xdeadbeef
 8000d1c:	21524110 	.word	0x21524110

08000d20 <RingBuffGetLinearBlockReadLength>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
RingBuffGetLinearBlockReadLength(RINGBUFF_VOLATILE RingBuff* buff) {
 8000d20:	b480      	push	{r7}
 8000d22:	b087      	sub	sp, #28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d011      	beq.n	8000d52 <RingBuffGetLinearBlockReadLength+0x32>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a1a      	ldr	r2, [pc, #104]	@ (8000d9c <RingBuffGetLinearBlockReadLength+0x7c>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d10c      	bne.n	8000d52 <RingBuffGetLinearBlockReadLength+0x32>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a18      	ldr	r2, [pc, #96]	@ (8000da0 <RingBuffGetLinearBlockReadLength+0x80>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d107      	bne.n	8000d52 <RingBuffGetLinearBlockReadLength+0x32>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <RingBuffGetLinearBlockReadLength+0x32>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <RingBuffGetLinearBlockReadLength+0x36>
        return 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e01b      	b.n	8000d8e <RingBuffGetLinearBlockReadLength+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	691b      	ldr	r3, [r3, #16]
 8000d5a:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d904      	bls.n	8000d74 <RingBuffGetLinearBlockReadLength+0x54>
        len = w - r;
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	e00b      	b.n	8000d8c <RingBuffGetLinearBlockReadLength+0x6c>
    } else if (r > w) {
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d905      	bls.n	8000d88 <RingBuffGetLinearBlockReadLength+0x68>
        len = buff->size - r;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	e001      	b.n	8000d8c <RingBuffGetLinearBlockReadLength+0x6c>
    } else {
        len = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
    }
    return len;
 8000d8c:	697b      	ldr	r3, [r7, #20]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	371c      	adds	r7, #28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	deadbeef 	.word	0xdeadbeef
 8000da0:	21524110 	.word	0x21524110

08000da4 <RingBuffSkip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
RingBuffSkip(RINGBUFF_VOLATILE RingBuff* buff, size_t len) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d014      	beq.n	8000dde <RingBuffSkip+0x3a>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a20      	ldr	r2, [pc, #128]	@ (8000e3c <RingBuffSkip+0x98>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d10f      	bne.n	8000dde <RingBuffSkip+0x3a>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8000e40 <RingBuffSkip+0x9c>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d10a      	bne.n	8000dde <RingBuffSkip+0x3a>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d006      	beq.n	8000dde <RingBuffSkip+0x3a>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d002      	beq.n	8000dde <RingBuffSkip+0x3a>
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <RingBuffSkip+0x3e>
        return 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	e027      	b.n	8000e32 <RingBuffSkip+0x8e>
    }

    full = RingBuffGetFull(buff);             /* Get buffer used length */
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ff2e 	bl	8000c44 <RingBuffGetFull>
 8000de8:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);                   /* Calculate max skip */
 8000dea:	683a      	ldr	r2, [r7, #0]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4293      	cmp	r3, r2
 8000df0:	bf28      	it	cs
 8000df2:	4613      	movcs	r3, r2
 8000df4:	603b      	str	r3, [r7, #0]
    buff->r += len;                             /* Advance read pointer */
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68da      	ldr	r2, [r3, #12]
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	441a      	add	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	68da      	ldr	r2, [r3, #12]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d306      	bcc.n	8000e1c <RingBuffSkip+0x78>
        buff->r -= buff->size;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	68d2      	ldr	r2, [r2, #12]
 8000e16:	1ad2      	subs	r2, r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, len);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d005      	beq.n	8000e30 <RingBuffSkip+0x8c>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	4798      	blx	r3
    return len;
 8000e30:	683b      	ldr	r3, [r7, #0]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	deadbeef 	.word	0xdeadbeef
 8000e40:	21524110 	.word	0x21524110

08000e44 <IMUReadReg>:
    0x2e, 0x00, 0xc1
};


IMU_STATUS IMUReadReg(IMU *pIMU, uint8_t reg, uint8_t *pBuf, uint32_t len)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b091      	sub	sp, #68	@ 0x44
 8000e48:	af02      	add	r7, sp, #8
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	460b      	mov	r3, r1
 8000e52:	72fb      	strb	r3, [r7, #11]
	uint8_t pTx[16];
	memset(pTx, 0, sizeof(pTx));
 8000e54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e58:	2210      	movs	r2, #16
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f007 feef 	bl	8008c40 <memset>
	// 0x80 bmi270 read bit
	pTx[0] = 0x80 | reg;
 8000e62:	7afb      	ldrb	r3, [r7, #11]
 8000e64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	uint8_t pRx[16];
	memset(pRx, 0, sizeof(pRx));
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	2210      	movs	r2, #16
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f007 fee2 	bl	8008c40 <memset>
	// status = HAL_SPI_Transmit(pIMUSPIRef, pTemp, 1, 100);

	// set NSS high
	// HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

	if(len + 1 > 16)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	2b10      	cmp	r3, #16
 8000e82:	d901      	bls.n	8000e88 <IMUReadReg+0x44>
	{
		return IMU_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e01f      	b.n	8000ec8 <IMUReadReg+0x84>
	}

	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(pIMU->pSPI, pTx, pRx, len + 1, 100);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	6818      	ldr	r0, [r3, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	3301      	adds	r3, #1
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	f107 0214 	add.w	r2, r7, #20
 8000e98:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000e9c:	2464      	movs	r4, #100	@ 0x64
 8000e9e:	9400      	str	r4, [sp, #0]
 8000ea0:	f004 fbf6 	bl	8005690 <HAL_SPI_TransmitReceive>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if(status != HAL_OK)
 8000eaa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <IMUReadReg+0x72>
	{
		return IMU_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e008      	b.n	8000ec8 <IMUReadReg+0x84>
	}
	// 1st byte sent by bmi270 is a dummy byte
	memcpy(pBuf, &pRx[1], len);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	3301      	adds	r3, #1
 8000ebc:	683a      	ldr	r2, [r7, #0]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f007 ff38 	bl	8008d36 <memcpy>

	return IMU_OK;
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	373c      	adds	r7, #60	@ 0x3c
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd90      	pop	{r4, r7, pc}

08000ed0 <IMU2CPUInterruptHandler>:
}

IMU_STATUS IMU2CPUInterruptHandler(
  IMU *pIMU, Vec3 *pOutputAccel,Vec3 *pOutputGyro
)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  if(pIMU == NULL || pIMU->pSPI == NULL || pOutputAccel == NULL || pOutputGyro == NULL)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d009      	beq.n	8000ef6 <IMU2CPUInterruptHandler+0x26>
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d005      	beq.n	8000ef6 <IMU2CPUInterruptHandler+0x26>
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <IMU2CPUInterruptHandler+0x26>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d112      	bne.n	8000f1c <IMU2CPUInterruptHandler+0x4c>
  {
    LOG_ERROR("Invalid arguments");
 8000ef6:	481c      	ldr	r0, [pc, #112]	@ (8000f68 <IMU2CPUInterruptHandler+0x98>)
 8000ef8:	f007 fd5a 	bl	80089b0 <iprintf>
 8000efc:	481b      	ldr	r0, [pc, #108]	@ (8000f6c <IMU2CPUInterruptHandler+0x9c>)
 8000efe:	f007 fd57 	bl	80089b0 <iprintf>
 8000f02:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8000f06:	481a      	ldr	r0, [pc, #104]	@ (8000f70 <IMU2CPUInterruptHandler+0xa0>)
 8000f08:	f007 fd52 	bl	80089b0 <iprintf>
 8000f0c:	4819      	ldr	r0, [pc, #100]	@ (8000f74 <IMU2CPUInterruptHandler+0xa4>)
 8000f0e:	f007 fd4f 	bl	80089b0 <iprintf>
 8000f12:	4819      	ldr	r0, [pc, #100]	@ (8000f78 <IMU2CPUInterruptHandler+0xa8>)
 8000f14:	f007 fdb4 	bl	8008a80 <puts>
    return IMU_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e021      	b.n	8000f60 <IMU2CPUInterruptHandler+0x90>
  }

  // read both status registers
  uint8_t pBuf[2] = {0, 0};
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	82bb      	strh	r3, [r7, #20]
  IMU_STATUS status = IMUReadReg(pIMU, BMI2_INT_STATUS_1_ADDR, pBuf, 2);
 8000f20:	f107 0214 	add.w	r2, r7, #20
 8000f24:	2302      	movs	r3, #2
 8000f26:	211d      	movs	r1, #29
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f7ff ff8b 	bl	8000e44 <IMUReadReg>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	75fb      	strb	r3, [r7, #23]

  // uint8_t intStatus0 = pBuf[0];
  uint8_t intStatus1 = pBuf[1];
 8000f32:	7d7b      	ldrb	r3, [r7, #21]
 8000f34:	75bb      	strb	r3, [r7, #22]
  }

  if(BIT_ISSET(intStatus1, BMI2_INT_STATUS_ACC_RDY_BIT)) status |= IMUUpdateAccel(pIMU, *pOutputAccel, pOutputAccel);
  if(BIT_ISSET(intStatus1, BMI2_INT_STATUS_GYR_RDY_BIT)) status |= IMUUpdateGyro(pIMU, *pOutputGyro, pOutputGyro);

  if(status != IMU_OK) LOG_ERROR("Failed to update IMU position data");
 8000f36:	7dfb      	ldrb	r3, [r7, #23]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d010      	beq.n	8000f5e <IMU2CPUInterruptHandler+0x8e>
 8000f3c:	480a      	ldr	r0, [pc, #40]	@ (8000f68 <IMU2CPUInterruptHandler+0x98>)
 8000f3e:	f007 fd37 	bl	80089b0 <iprintf>
 8000f42:	480a      	ldr	r0, [pc, #40]	@ (8000f6c <IMU2CPUInterruptHandler+0x9c>)
 8000f44:	f007 fd34 	bl	80089b0 <iprintf>
 8000f48:	f240 215a 	movw	r1, #602	@ 0x25a
 8000f4c:	4808      	ldr	r0, [pc, #32]	@ (8000f70 <IMU2CPUInterruptHandler+0xa0>)
 8000f4e:	f007 fd2f 	bl	80089b0 <iprintf>
 8000f52:	480a      	ldr	r0, [pc, #40]	@ (8000f7c <IMU2CPUInterruptHandler+0xac>)
 8000f54:	f007 fd2c 	bl	80089b0 <iprintf>
 8000f58:	4807      	ldr	r0, [pc, #28]	@ (8000f78 <IMU2CPUInterruptHandler+0xa8>)
 8000f5a:	f007 fd91 	bl	8008a80 <puts>

  return status;
 8000f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	08009778 	.word	0x08009778
 8000f6c:	08009784 	.word	0x08009784
 8000f70:	080097d8 	.word	0x080097d8
 8000f74:	080097e0 	.word	0x080097e0
 8000f78:	080097f4 	.word	0x080097f4
 8000f7c:	080097f8 	.word	0x080097f8

08000f80 <SyncMailBoxGet>:
#include "mem/mem.h"

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID);

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
    uint8_t volatile *pMB = NULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
    if(mbID == MAILBOX_CM7_ID) pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM7_START;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d103      	bne.n	8000f9a <SyncMailBoxGet+0x1a>
 8000f92:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	e001      	b.n	8000f9e <SyncMailBoxGet+0x1e>
    else pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM4_START;
 8000f9a:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <SyncMailBoxGet+0x2c>)
 8000f9c:	60fb      	str	r3, [r7, #12]
    return pMB;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	38000004 	.word	0x38000004

08000fb0 <SyncMailBoxWrite>:

int8_t SyncMailBoxWrite(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return -1;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	d902      	bls.n	8000fc8 <SyncMailBoxWrite+0x18>
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	e009      	b.n	8000fdc <SyncMailBoxWrite+0x2c>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f7ff ffd9 	bl	8000f80 <SyncMailBoxGet>
 8000fce:	6178      	str	r0, [r7, #20]
    memcpy((void*)pMB, (void*)pBuffer, len);
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	68b9      	ldr	r1, [r7, #8]
 8000fd4:	6978      	ldr	r0, [r7, #20]
 8000fd6:	f007 feae 	bl	8008d36 <memcpy>
    return 0;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <SyncMailBoxWriteNotify>:

int8_t SyncMailBoxWriteNotify(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
    int8_t status = SyncMailBoxWrite(mbID, pBuffer, len);
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	68b9      	ldr	r1, [r7, #8]
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f7ff ffdb 	bl	8000fb0 <SyncMailBoxWrite>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	75fb      	strb	r3, [r7, #23]
    if(status < 0) return status;
 8000ffe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001002:	2b00      	cmp	r3, #0
 8001004:	da02      	bge.n	800100c <SyncMailBoxWriteNotify+0x28>
 8001006:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800100a:	e003      	b.n	8001014 <SyncMailBoxWriteNotify+0x30>
    asm volatile ("dsb");
 800100c:	f3bf 8f4f 	dsb	sy
    asm volatile ("sev");
 8001010:	bf40      	sev
    return 0;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <SyncMailBoxRead>:

int8_t SyncMailBoxRead(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return -1;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b04      	cmp	r3, #4
 800102c:	d902      	bls.n	8001034 <SyncMailBoxRead+0x18>
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	e009      	b.n	8001048 <SyncMailBoxRead+0x2c>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f7ff ffa3 	bl	8000f80 <SyncMailBoxGet>
 800103a:	6178      	str	r0, [r7, #20]
    memcpy((void*)pBuffer, (void*)pMB, len);
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	6979      	ldr	r1, [r7, #20]
 8001040:	68b8      	ldr	r0, [r7, #8]
 8001042:	f007 fe78 	bl	8008d36 <memcpy>
    return 0;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <SyncGetTaskHandler>:
#define NUM_TASK_TYPES 2

task_handler_fn_t handlers[NUM_TASK_TYPES];

task_handler_fn_t SyncGetTaskHandler(uint32_t taskID)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    if(taskID > NUM_TASK_TYPES) return NULL;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d901      	bls.n	8001062 <SyncGetTaskHandler+0x12>
 800105e:	2300      	movs	r3, #0
 8001060:	e003      	b.n	800106a <SyncGetTaskHandler+0x1a>
    return handlers[taskID];
 8001062:	4a05      	ldr	r2, [pc, #20]	@ (8001078 <SyncGetTaskHandler+0x28>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	24000098 	.word	0x24000098

0800107c <SyncInit>:

/*
* \brief Each core needs to call SyncInit
*/
int8_t SyncInit(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
    memset(handlers, 0, sizeof(handlers));
 8001080:	2208      	movs	r2, #8
 8001082:	2100      	movs	r1, #0
 8001084:	4802      	ldr	r0, [pc, #8]	@ (8001090 <SyncInit+0x14>)
 8001086:	f007 fddb 	bl	8008c40 <memset>
    return 1;
 800108a:	2301      	movs	r3, #1
}
 800108c:	4618      	mov	r0, r3
 800108e:	bd80      	pop	{r7, pc}
 8001090:	24000098 	.word	0x24000098

08001094 <SyncRegisterHandler>:

int8_t SyncRegisterHandler(task_handler_fn_t fn, uint32_t taskID)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
    if(taskID > NUM_TASK_TYPES) return -1;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d902      	bls.n	80010aa <SyncRegisterHandler+0x16>
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295
 80010a8:	e005      	b.n	80010b6 <SyncRegisterHandler+0x22>
    handlers[taskID] = fn;
 80010aa:	4906      	ldr	r1, [pc, #24]	@ (80010c4 <SyncRegisterHandler+0x30>)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 1;
 80010b4:	2301      	movs	r3, #1
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	24000098 	.word	0x24000098

080010c8 <CM7_SEV_IRQHandler>:
* and the SEV IRQ handler for CM4 was called.
* This function was originally defined in CM4/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM7_SEV_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
    // CPUID == CM4
    uint32_t taskID = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 80010d2:	463b      	mov	r3, r7
 80010d4:	2204      	movs	r2, #4
 80010d6:	4619      	mov	r1, r3
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff ff9f 	bl	800101c <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ffb5 	bl	8001050 <SyncGetTaskHandler>
 80010e6:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <CM7_SEV_IRQHandler+0x2a>
    {
        fn();
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4798      	blx	r3
    }
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <CM4_SEV_IRQHandler>:
* and the SEV IRQ handler for CM7 was called.
* This function was originally defined in CM7/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM4_SEV_IRQHandler(void)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
    // CPUID == CM7
    uint32_t taskID = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM7_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 8001104:	463b      	mov	r3, r7
 8001106:	2204      	movs	r2, #4
 8001108:	4619      	mov	r1, r3
 800110a:	2001      	movs	r0, #1
 800110c:	f7ff ff86 	bl	800101c <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff9c 	bl	8001050 <SyncGetTaskHandler>
 8001118:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <CM4_SEV_IRQHandler+0x2a>
    {
        fn();
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4798      	blx	r3
    }
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_GPIO_EXTI_Callback>:
FilterMadgwickContext gFilterMadgwickContext;
PIDContext gPIDAngleContext;
TaskHandle_t gpTaskMotionControlUpdate;

void HAL_GPIO_EXTI_Callback(uint16_t gpioPin)
{
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b08d      	sub	sp, #52	@ 0x34
 8001130:	af04      	add	r7, sp, #16
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
    if(gpioPin == IMU_INT_Pin) 
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	2b80      	cmp	r3, #128	@ 0x80
 800113a:	d122      	bne.n	8001182 <HAL_GPIO_EXTI_Callback+0x56>
    {
        Vec3 accel, gyro;
        if(IMU2CPUInterruptHandler(&gIMU, &accel, &gyro) == IMU_OK)
 800113c:	f107 0208 	add.w	r2, r7, #8
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4811      	ldr	r0, [pc, #68]	@ (800118c <HAL_GPIO_EXTI_Callback+0x60>)
 8001148:	f7ff fec2 	bl	8000ed0 <IMU2CPUInterruptHandler>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d117      	bne.n	8001182 <HAL_GPIO_EXTI_Callback+0x56>
        {
            FlightContextUpdateIMUData(&gFlightContext, accel, gyro);
 8001152:	466c      	mov	r4, sp
 8001154:	f107 0308 	add.w	r3, r7, #8
 8001158:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800115c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001166:	480a      	ldr	r0, [pc, #40]	@ (8001190 <HAL_GPIO_EXTI_Callback+0x64>)
 8001168:	f7ff faa0 	bl	80006ac <FlightContextUpdateIMUData>
            if(gpTaskMotionControlUpdate != NULL) xTaskNotifyGive(gpTaskMotionControlUpdate);
 800116c:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <HAL_GPIO_EXTI_Callback+0x68>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d006      	beq.n	8001182 <HAL_GPIO_EXTI_Callback+0x56>
 8001174:	4b07      	ldr	r3, [pc, #28]	@ (8001194 <HAL_GPIO_EXTI_Callback+0x68>)
 8001176:	6818      	ldr	r0, [r3, #0]
 8001178:	2300      	movs	r3, #0
 800117a:	2202      	movs	r2, #2
 800117c:	2100      	movs	r1, #0
 800117e:	f007 fa9b 	bl	80086b8 <xTaskGenericNotify>
        }
    }
}
 8001182:	bf00      	nop
 8001184:	3724      	adds	r7, #36	@ 0x24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd90      	pop	{r4, r7, pc}
 800118a:	bf00      	nop
 800118c:	24000254 	.word	0x24000254
 8001190:	2400028c 	.word	0x2400028c
 8001194:	240002e0 	.word	0x240002e0

08001198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
    /* USER CODE END Boot_Mode_Sequence_0 */

    /* USER CODE BEGIN Boot_Mode_Sequence_1 */

    /* Wait until CPU2 boots and enters in stop mode or timeout*/
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm volatile ("NOP"); }
 800119e:	e000      	b.n	80011a2 <main+0xa>
 80011a0:	bf00      	nop
 80011a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001258 <main+0xc0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f8      	bne.n	80011a0 <main+0x8>

    /* USER CODE END Boot_Mode_Sequence_1 */
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    if(HAL_Init() != HAL_OK)
 80011ae:	f000 fe7d 	bl	8001eac <HAL_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <main+0x24>
    {
        Error_Handler();
 80011b8:	f000 fafa 	bl	80017b0 <Error_Handler>
    /* USER CODE BEGIN Init */
    
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80011bc:	f000 f85a 	bl	8001274 <SystemClock_Config>
    /* USER CODE BEGIN Boot_Mode_Sequence_2 */

    MX_GPIO_Init();
 80011c0:	f000 fa5e 	bl	8001680 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 80011c4:	f000 fa10 	bl	80015e8 <MX_USART1_UART_Init>
    MX_SPI2_Init();
 80011c8:	f000 f8da 	bl	8001380 <MX_SPI2_Init>
    MX_TIM8_Init();
 80011cc:	f000 f92e 	bl	800142c <MX_TIM8_Init>
    MX_TIM13_Init();
 80011d0:	f000 f9bc 	bl	800154c <MX_TIM13_Init>

    if(SyncInit() != 1 || LoggerInit(&huart1) != 1)
 80011d4:	f7ff ff52 	bl	800107c <SyncInit>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d105      	bne.n	80011ea <main+0x52>
 80011de:	481f      	ldr	r0, [pc, #124]	@ (800125c <main+0xc4>)
 80011e0:	f7ff faf4 	bl	80007cc <LoggerInit>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d001      	beq.n	80011ee <main+0x56>
    {
        Error_Handler();
 80011ea:	f000 fae1 	bl	80017b0 <Error_Handler>
    }

    /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of HSEM notification */

    /*HW semaphore Clock enable*/
    __HAL_RCC_HSEM_CLK_ENABLE();
 80011ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <main+0xc0>)
 80011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f4:	4a18      	ldr	r2, [pc, #96]	@ (8001258 <main+0xc0>)
 80011f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011fe:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <main+0xc0>)
 8001200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
    // /*Take HSEM */
    HAL_HSEM_FastTake(HSEM_ID_0);
 800120c:	2000      	movs	r0, #0
 800120e:	f001 f995 	bl	800253c <HAL_HSEM_FastTake>
    // /*Release HSEM in order to notify the CPU2(CM4)*/
    HAL_HSEM_Release(HSEM_ID_0, 0);
 8001212:	2100      	movs	r1, #0
 8001214:	2000      	movs	r0, #0
 8001216:	f001 f9ab 	bl	8002570 <HAL_HSEM_Release>
    // /* wait until CPU2 wakes up from stop mode */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) { asm volatile ("NOP"); }
 800121a:	e000      	b.n	800121e <main+0x86>
 800121c:	bf00      	nop
 800121e:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <main+0xc0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f8      	beq.n	800121c <main+0x84>
    //   IMU_GYRO_ODR_100
    // );
    while (1)
    {
        /* USER CODE END WHILE */
        HAL_Delay(1000);
 800122a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800122e:	f000 fe99 	bl	8001f64 <HAL_Delay>
        LOG_INFO("Hello from CM7");
 8001232:	480b      	ldr	r0, [pc, #44]	@ (8001260 <main+0xc8>)
 8001234:	f007 fbbc 	bl	80089b0 <iprintf>
 8001238:	480a      	ldr	r0, [pc, #40]	@ (8001264 <main+0xcc>)
 800123a:	f007 fbb9 	bl	80089b0 <iprintf>
 800123e:	21f9      	movs	r1, #249	@ 0xf9
 8001240:	4809      	ldr	r0, [pc, #36]	@ (8001268 <main+0xd0>)
 8001242:	f007 fbb5 	bl	80089b0 <iprintf>
 8001246:	4809      	ldr	r0, [pc, #36]	@ (800126c <main+0xd4>)
 8001248:	f007 fbb2 	bl	80089b0 <iprintf>
 800124c:	4808      	ldr	r0, [pc, #32]	@ (8001270 <main+0xd8>)
 800124e:	f007 fc17 	bl	8008a80 <puts>
        HAL_Delay(1000);
 8001252:	bf00      	nop
 8001254:	e7e9      	b.n	800122a <main+0x92>
 8001256:	bf00      	nop
 8001258:	58024400 	.word	0x58024400
 800125c:	240001c0 	.word	0x240001c0
 8001260:	0800981c 	.word	0x0800981c
 8001264:	08009828 	.word	0x08009828
 8001268:	0800983c 	.word	0x0800983c
 800126c:	08009844 	.word	0x08009844
 8001270:	08009854 	.word	0x08009854

08001274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b09c      	sub	sp, #112	@ 0x70
 8001278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800127e:	224c      	movs	r2, #76	@ 0x4c
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f007 fcdc 	bl	8008c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2220      	movs	r2, #32
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f007 fcd6 	bl	8008c40 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001294:	2004      	movs	r0, #4
 8001296:	f001 f97f 	bl	8002598 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800129a:	2300      	movs	r3, #0
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	4b36      	ldr	r3, [pc, #216]	@ (8001378 <SystemClock_Config+0x104>)
 80012a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012a2:	4a35      	ldr	r2, [pc, #212]	@ (8001378 <SystemClock_Config+0x104>)
 80012a4:	f023 0301 	bic.w	r3, r3, #1
 80012a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80012aa:	4b33      	ldr	r3, [pc, #204]	@ (8001378 <SystemClock_Config+0x104>)
 80012ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	4b31      	ldr	r3, [pc, #196]	@ (800137c <SystemClock_Config+0x108>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a30      	ldr	r2, [pc, #192]	@ (800137c <SystemClock_Config+0x108>)
 80012ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b2e      	ldr	r3, [pc, #184]	@ (800137c <SystemClock_Config+0x108>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012cc:	bf00      	nop
 80012ce:	4b2b      	ldr	r3, [pc, #172]	@ (800137c <SystemClock_Config+0x108>)
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012da:	d1f8      	bne.n	80012ce <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80012dc:	230b      	movs	r3, #11
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80012e6:	2301      	movs	r3, #1
 80012e8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ea:	2340      	movs	r3, #64	@ 0x40
 80012ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012ee:	2301      	movs	r3, #1
 80012f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f2:	2302      	movs	r3, #2
 80012f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012f6:	2302      	movs	r3, #2
 80012f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80012fa:	2305      	movs	r3, #5
 80012fc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 80012fe:	2330      	movs	r3, #48	@ 0x30
 8001300:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001302:	2302      	movs	r3, #2
 8001304:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001306:	2305      	movs	r3, #5
 8001308:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800130a:	2302      	movs	r3, #2
 800130c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800130e:	2308      	movs	r3, #8
 8001310:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001312:	2300      	movs	r3, #0
 8001314:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800131e:	4618      	mov	r0, r3
 8001320:	f001 f994 	bl	800264c <HAL_RCC_OscConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800132a:	f000 fa41 	bl	80017b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132e:	233f      	movs	r3, #63	@ 0x3f
 8001330:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f001 fdd4 	bl	8002f00 <HAL_RCC_ClockConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800135e:	f000 fa27 	bl	80017b0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001362:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001366:	2100      	movs	r1, #0
 8001368:	2000      	movs	r0, #0
 800136a:	f001 ff7f 	bl	800326c <HAL_RCC_MCOConfig>
}
 800136e:	bf00      	nop
 8001370:	3770      	adds	r7, #112	@ 0x70
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	58000400 	.word	0x58000400
 800137c:	58024800 	.word	0x58024800

08001380 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001384:	4b27      	ldr	r3, [pc, #156]	@ (8001424 <MX_SPI2_Init+0xa4>)
 8001386:	4a28      	ldr	r2, [pc, #160]	@ (8001428 <MX_SPI2_Init+0xa8>)
 8001388:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800138a:	4b26      	ldr	r3, [pc, #152]	@ (8001424 <MX_SPI2_Init+0xa4>)
 800138c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001390:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001392:	4b24      	ldr	r3, [pc, #144]	@ (8001424 <MX_SPI2_Init+0xa4>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001398:	4b22      	ldr	r3, [pc, #136]	@ (8001424 <MX_SPI2_Init+0xa4>)
 800139a:	2207      	movs	r2, #7
 800139c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800139e:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <MX_SPI2_Init+0xa4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001424 <MX_SPI2_Init+0xa4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80013aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001424 <MX_SPI2_Init+0xa4>)
 80013ac:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80013b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001424 <MX_SPI2_Init+0xa4>)
 80013b4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80013b8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <MX_SPI2_Init+0xa4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c0:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <MX_SPI2_Init+0xa4>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c6:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <MX_SPI2_Init+0xa4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80013cc:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <MX_SPI2_Init+0xa4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013d2:	4b14      	ldr	r3, [pc, #80]	@ (8001424 <MX_SPI2_Init+0xa4>)
 80013d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013da:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <MX_SPI2_Init+0xa4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013e0:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <MX_SPI2_Init+0xa4>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <MX_SPI2_Init+0xa4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <MX_SPI2_Init+0xa4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <MX_SPI2_Init+0xa4>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <MX_SPI2_Init+0xa4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <MX_SPI2_Init+0xa4>)
 8001400:	2200      	movs	r2, #0
 8001402:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001404:	4b07      	ldr	r3, [pc, #28]	@ (8001424 <MX_SPI2_Init+0xa4>)
 8001406:	2200      	movs	r2, #0
 8001408:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800140a:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <MX_SPI2_Init+0xa4>)
 800140c:	2200      	movs	r2, #0
 800140e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001410:	4804      	ldr	r0, [pc, #16]	@ (8001424 <MX_SPI2_Init+0xa4>)
 8001412:	f004 f819 	bl	8005448 <HAL_SPI_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800141c:	f000 f9c8 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	240000a0 	.word	0x240000a0
 8001428:	40003800 	.word	0x40003800

0800142c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b096      	sub	sp, #88	@ 0x58
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001432:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800143e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]
 800144e:	615a      	str	r2, [r3, #20]
 8001450:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	222c      	movs	r2, #44	@ 0x2c
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f007 fbf1 	bl	8008c40 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800145e:	4b39      	ldr	r3, [pc, #228]	@ (8001544 <MX_TIM8_Init+0x118>)
 8001460:	4a39      	ldr	r2, [pc, #228]	@ (8001548 <MX_TIM8_Init+0x11c>)
 8001462:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001464:	4b37      	ldr	r3, [pc, #220]	@ (8001544 <MX_TIM8_Init+0x118>)
 8001466:	2200      	movs	r2, #0
 8001468:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146a:	4b36      	ldr	r3, [pc, #216]	@ (8001544 <MX_TIM8_Init+0x118>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001470:	4b34      	ldr	r3, [pc, #208]	@ (8001544 <MX_TIM8_Init+0x118>)
 8001472:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001476:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001478:	4b32      	ldr	r3, [pc, #200]	@ (8001544 <MX_TIM8_Init+0x118>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800147e:	4b31      	ldr	r3, [pc, #196]	@ (8001544 <MX_TIM8_Init+0x118>)
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001484:	4b2f      	ldr	r3, [pc, #188]	@ (8001544 <MX_TIM8_Init+0x118>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800148a:	482e      	ldr	r0, [pc, #184]	@ (8001544 <MX_TIM8_Init+0x118>)
 800148c:	f004 fdf2 	bl	8006074 <HAL_TIM_PWM_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001496:	f000 f98b 	bl	80017b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014a6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014aa:	4619      	mov	r1, r3
 80014ac:	4825      	ldr	r0, [pc, #148]	@ (8001544 <MX_TIM8_Init+0x118>)
 80014ae:	f005 fbf1 	bl	8006c94 <HAL_TIMEx_MasterConfigSynchronization>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80014b8:	f000 f97a 	bl	80017b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014bc:	2360      	movs	r3, #96	@ 0x60
 80014be:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c4:	2300      	movs	r3, #0
 80014c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014c8:	2300      	movs	r3, #0
 80014ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014d4:	2300      	movs	r3, #0
 80014d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014dc:	2200      	movs	r2, #0
 80014de:	4619      	mov	r1, r3
 80014e0:	4818      	ldr	r0, [pc, #96]	@ (8001544 <MX_TIM8_Init+0x118>)
 80014e2:	f004 ff25 	bl	8006330 <HAL_TIM_PWM_ConfigChannel>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80014ec:	f000 f960 	bl	80017b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001504:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001508:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001512:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001516:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	4619      	mov	r1, r3
 8001524:	4807      	ldr	r0, [pc, #28]	@ (8001544 <MX_TIM8_Init+0x118>)
 8001526:	f005 fc43 	bl	8006db0 <HAL_TIMEx_ConfigBreakDeadTime>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001530:	f000 f93e 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001534:	4803      	ldr	r0, [pc, #12]	@ (8001544 <MX_TIM8_Init+0x118>)
 8001536:	f000 fa61 	bl	80019fc <HAL_TIM_MspPostInit>

}
 800153a:	bf00      	nop
 800153c:	3758      	adds	r7, #88	@ 0x58
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	24000128 	.word	0x24000128
 8001548:	40010400 	.word	0x40010400

0800154c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
 8001560:	615a      	str	r2, [r3, #20]
 8001562:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001564:	4b1e      	ldr	r3, [pc, #120]	@ (80015e0 <MX_TIM13_Init+0x94>)
 8001566:	4a1f      	ldr	r2, [pc, #124]	@ (80015e4 <MX_TIM13_Init+0x98>)
 8001568:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800156a:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <MX_TIM13_Init+0x94>)
 800156c:	2200      	movs	r2, #0
 800156e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001570:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <MX_TIM13_Init+0x94>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001576:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <MX_TIM13_Init+0x94>)
 8001578:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800157c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157e:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <MX_TIM13_Init+0x94>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001584:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <MX_TIM13_Init+0x94>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800158a:	4815      	ldr	r0, [pc, #84]	@ (80015e0 <MX_TIM13_Init+0x94>)
 800158c:	f004 fca3 	bl	8005ed6 <HAL_TIM_Base_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001596:	f000 f90b 	bl	80017b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800159a:	4811      	ldr	r0, [pc, #68]	@ (80015e0 <MX_TIM13_Init+0x94>)
 800159c:	f004 fd6a 	bl	8006074 <HAL_TIM_PWM_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80015a6:	f000 f903 	bl	80017b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015aa:	2360      	movs	r3, #96	@ 0x60
 80015ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2200      	movs	r2, #0
 80015be:	4619      	mov	r1, r3
 80015c0:	4807      	ldr	r0, [pc, #28]	@ (80015e0 <MX_TIM13_Init+0x94>)
 80015c2:	f004 feb5 	bl	8006330 <HAL_TIM_PWM_ConfigChannel>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80015cc:	f000 f8f0 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80015d0:	4803      	ldr	r0, [pc, #12]	@ (80015e0 <MX_TIM13_Init+0x94>)
 80015d2:	f000 fa13 	bl	80019fc <HAL_TIM_MspPostInit>

}
 80015d6:	bf00      	nop
 80015d8:	3720      	adds	r7, #32
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	24000174 	.word	0x24000174
 80015e4:	40001c00 	.word	0x40001c00

080015e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015ec:	4b22      	ldr	r3, [pc, #136]	@ (8001678 <MX_USART1_UART_Init+0x90>)
 80015ee:	4a23      	ldr	r2, [pc, #140]	@ (800167c <MX_USART1_UART_Init+0x94>)
 80015f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015f2:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <MX_USART1_UART_Init+0x90>)
 80015f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <MX_USART1_UART_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001600:	4b1d      	ldr	r3, [pc, #116]	@ (8001678 <MX_USART1_UART_Init+0x90>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001606:	4b1c      	ldr	r3, [pc, #112]	@ (8001678 <MX_USART1_UART_Init+0x90>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800160c:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <MX_USART1_UART_Init+0x90>)
 800160e:	220c      	movs	r2, #12
 8001610:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001612:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <MX_USART1_UART_Init+0x90>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001618:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <MX_USART1_UART_Init+0x90>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161e:	4b16      	ldr	r3, [pc, #88]	@ (8001678 <MX_USART1_UART_Init+0x90>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001624:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <MX_USART1_UART_Init+0x90>)
 8001626:	2200      	movs	r2, #0
 8001628:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800162a:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <MX_USART1_UART_Init+0x90>)
 800162c:	2200      	movs	r2, #0
 800162e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001630:	4811      	ldr	r0, [pc, #68]	@ (8001678 <MX_USART1_UART_Init+0x90>)
 8001632:	f005 fc59 	bl	8006ee8 <HAL_UART_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800163c:	f000 f8b8 	bl	80017b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001640:	2100      	movs	r1, #0
 8001642:	480d      	ldr	r0, [pc, #52]	@ (8001678 <MX_USART1_UART_Init+0x90>)
 8001644:	f006 fcef 	bl	8008026 <HAL_UARTEx_SetTxFifoThreshold>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800164e:	f000 f8af 	bl	80017b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001652:	2100      	movs	r1, #0
 8001654:	4808      	ldr	r0, [pc, #32]	@ (8001678 <MX_USART1_UART_Init+0x90>)
 8001656:	f006 fd24 	bl	80080a2 <HAL_UARTEx_SetRxFifoThreshold>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001660:	f000 f8a6 	bl	80017b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001664:	4804      	ldr	r0, [pc, #16]	@ (8001678 <MX_USART1_UART_Init+0x90>)
 8001666:	f006 fca5 	bl	8007fb4 <HAL_UARTEx_DisableFifoMode>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001670:	f000 f89e 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	240001c0 	.word	0x240001c0
 800167c:	40011000 	.word	0x40011000

08001680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	@ 0x28
 8001684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001696:	4b3a      	ldr	r3, [pc, #232]	@ (8001780 <MX_GPIO_Init+0x100>)
 8001698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800169c:	4a38      	ldr	r2, [pc, #224]	@ (8001780 <MX_GPIO_Init+0x100>)
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016a6:	4b36      	ldr	r3, [pc, #216]	@ (8001780 <MX_GPIO_Init+0x100>)
 80016a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	4b32      	ldr	r3, [pc, #200]	@ (8001780 <MX_GPIO_Init+0x100>)
 80016b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ba:	4a31      	ldr	r2, [pc, #196]	@ (8001780 <MX_GPIO_Init+0x100>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001780 <MX_GPIO_Init+0x100>)
 80016c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001780 <MX_GPIO_Init+0x100>)
 80016d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d8:	4a29      	ldr	r2, [pc, #164]	@ (8001780 <MX_GPIO_Init+0x100>)
 80016da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016e2:	4b27      	ldr	r3, [pc, #156]	@ (8001780 <MX_GPIO_Init+0x100>)
 80016e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016f0:	4b23      	ldr	r3, [pc, #140]	@ (8001780 <MX_GPIO_Init+0x100>)
 80016f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f6:	4a22      	ldr	r2, [pc, #136]	@ (8001780 <MX_GPIO_Init+0x100>)
 80016f8:	f043 0320 	orr.w	r3, r3, #32
 80016fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001700:	4b1f      	ldr	r3, [pc, #124]	@ (8001780 <MX_GPIO_Init+0x100>)
 8001702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001706:	f003 0320 	and.w	r3, r3, #32
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800170e:	4b1c      	ldr	r3, [pc, #112]	@ (8001780 <MX_GPIO_Init+0x100>)
 8001710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001714:	4a1a      	ldr	r2, [pc, #104]	@ (8001780 <MX_GPIO_Init+0x100>)
 8001716:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800171a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800171e:	4b18      	ldr	r3, [pc, #96]	@ (8001780 <MX_GPIO_Init+0x100>)
 8001720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 800172c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	480e      	ldr	r0, [pc, #56]	@ (8001784 <MX_GPIO_Init+0x104>)
 800174a:	f000 fd2d 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 800174e:	2380      	movs	r3, #128	@ 0x80
 8001750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001752:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	4809      	ldr	r0, [pc, #36]	@ (8001788 <MX_GPIO_Init+0x108>)
 8001764:	f000 fd20 	bl	80021a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(IMU_INT_EXTI_IRQn, 5, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2105      	movs	r1, #5
 800176c:	2017      	movs	r0, #23
 800176e:	f000 fce1 	bl	8002134 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(IMU_INT_EXTI_IRQn);
 8001772:	2017      	movs	r0, #23
 8001774:	f000 fcf8 	bl	8002168 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001778:	bf00      	nop
 800177a:	3728      	adds	r7, #40	@ 0x28
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	58024400 	.word	0x58024400
 8001784:	58020000 	.word	0x58020000
 8001788:	58020800 	.word	0x58020800

0800178c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a04      	ldr	r2, [pc, #16]	@ (80017ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d101      	bne.n	80017a2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800179e:	f000 fbc1 	bl	8001f24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40000800 	.word	0x40000800

080017b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b4:	b672      	cpsid	i
}
 80017b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <Error_Handler+0x8>

080017bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <HAL_MspInit+0x48>)
 80017c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001804 <HAL_MspInit+0x48>)
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <HAL_MspInit+0x48>)
 80017d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	210f      	movs	r1, #15
 80017e4:	f06f 0001 	mvn.w	r0, #1
 80017e8:	f000 fca4 	bl	8002134 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 5, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2105      	movs	r1, #5
 80017f0:	2041      	movs	r0, #65	@ 0x41
 80017f2:	f000 fc9f 	bl	8002134 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 80017f6:	2041      	movs	r0, #65	@ 0x41
 80017f8:	f000 fcb6 	bl	8002168 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	58024400 	.word	0x58024400

08001808 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b0be      	sub	sp, #248	@ 0xf8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001820:	f107 0318 	add.w	r3, r7, #24
 8001824:	22c8      	movs	r2, #200	@ 0xc8
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f007 fa09 	bl	8008c40 <memset>
  if(hspi->Instance==SPI2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a38      	ldr	r2, [pc, #224]	@ (8001914 <HAL_SPI_MspInit+0x10c>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d169      	bne.n	800190c <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001838:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001844:	2300      	movs	r3, #0
 8001846:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001848:	f107 0318 	add.w	r3, r7, #24
 800184c:	4618      	mov	r0, r3
 800184e:	f001 ff8f 	bl	8003770 <HAL_RCCEx_PeriphCLKConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001858:	f7ff ffaa 	bl	80017b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800185c:	4b2e      	ldr	r3, [pc, #184]	@ (8001918 <HAL_SPI_MspInit+0x110>)
 800185e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001862:	4a2d      	ldr	r2, [pc, #180]	@ (8001918 <HAL_SPI_MspInit+0x110>)
 8001864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001868:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800186c:	4b2a      	ldr	r3, [pc, #168]	@ (8001918 <HAL_SPI_MspInit+0x110>)
 800186e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	4b27      	ldr	r3, [pc, #156]	@ (8001918 <HAL_SPI_MspInit+0x110>)
 800187c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001880:	4a25      	ldr	r2, [pc, #148]	@ (8001918 <HAL_SPI_MspInit+0x110>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800188a:	4b23      	ldr	r3, [pc, #140]	@ (8001918 <HAL_SPI_MspInit+0x110>)
 800188c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001898:	4b1f      	ldr	r3, [pc, #124]	@ (8001918 <HAL_SPI_MspInit+0x110>)
 800189a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800189e:	4a1e      	ldr	r2, [pc, #120]	@ (8001918 <HAL_SPI_MspInit+0x110>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001918 <HAL_SPI_MspInit+0x110>)
 80018aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_NSS_Pin;
 80018b6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80018ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018d0:	2305      	movs	r3, #5
 80018d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80018da:	4619      	mov	r1, r3
 80018dc:	480f      	ldr	r0, [pc, #60]	@ (800191c <HAL_SPI_MspInit+0x114>)
 80018de:	f000 fc63 	bl	80021a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_3_Pin|PMOD_2_Pin;
 80018e2:	230c      	movs	r3, #12
 80018e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018fa:	2305      	movs	r3, #5
 80018fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001900:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001904:	4619      	mov	r1, r3
 8001906:	4806      	ldr	r0, [pc, #24]	@ (8001920 <HAL_SPI_MspInit+0x118>)
 8001908:	f000 fc4e 	bl	80021a8 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 800190c:	bf00      	nop
 800190e:	37f8      	adds	r7, #248	@ 0xf8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40003800 	.word	0x40003800
 8001918:	58024400 	.word	0x58024400
 800191c:	58020000 	.word	0x58020000
 8001920:	58020800 	.word	0x58020800

08001924 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	@ 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a1a      	ldr	r2, [pc, #104]	@ (80019ac <HAL_TIM_PWM_MspInit+0x88>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d12d      	bne.n	80019a2 <HAL_TIM_PWM_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001946:	4b1a      	ldr	r3, [pc, #104]	@ (80019b0 <HAL_TIM_PWM_MspInit+0x8c>)
 8001948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800194c:	4a18      	ldr	r2, [pc, #96]	@ (80019b0 <HAL_TIM_PWM_MspInit+0x8c>)
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001956:	4b16      	ldr	r3, [pc, #88]	@ (80019b0 <HAL_TIM_PWM_MspInit+0x8c>)
 8001958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001964:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <HAL_TIM_PWM_MspInit+0x8c>)
 8001966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800196a:	4a11      	ldr	r2, [pc, #68]	@ (80019b0 <HAL_TIM_PWM_MspInit+0x8c>)
 800196c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001970:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001974:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <HAL_TIM_PWM_MspInit+0x8c>)
 8001976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800197a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001982:	2340      	movs	r3, #64	@ 0x40
 8001984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001992:	2303      	movs	r3, #3
 8001994:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	4805      	ldr	r0, [pc, #20]	@ (80019b4 <HAL_TIM_PWM_MspInit+0x90>)
 800199e:	f000 fc03 	bl	80021a8 <HAL_GPIO_Init>

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 80019a2:	bf00      	nop
 80019a4:	3728      	adds	r7, #40	@ 0x28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40010400 	.word	0x40010400
 80019b0:	58024400 	.word	0x58024400
 80019b4:	58022400 	.word	0x58022400

080019b8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0b      	ldr	r2, [pc, #44]	@ (80019f4 <HAL_TIM_Base_MspInit+0x3c>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d10e      	bne.n	80019e8 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80019ca:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <HAL_TIM_Base_MspInit+0x40>)
 80019cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019d0:	4a09      	ldr	r2, [pc, #36]	@ (80019f8 <HAL_TIM_Base_MspInit+0x40>)
 80019d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019da:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <HAL_TIM_Base_MspInit+0x40>)
 80019dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM13_MspInit 1 */

  }

}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	40001c00 	.word	0x40001c00
 80019f8:	58024400 	.word	0x58024400

080019fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	@ 0x28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a35      	ldr	r2, [pc, #212]	@ (8001af0 <HAL_TIM_MspPostInit+0xf4>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d13e      	bne.n	8001a9c <HAL_TIM_MspPostInit+0xa0>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1e:	4b35      	ldr	r3, [pc, #212]	@ (8001af4 <HAL_TIM_MspPostInit+0xf8>)
 8001a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a24:	4a33      	ldr	r2, [pc, #204]	@ (8001af4 <HAL_TIM_MspPostInit+0xf8>)
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a2e:	4b31      	ldr	r3, [pc, #196]	@ (8001af4 <HAL_TIM_MspPostInit+0xf8>)
 8001a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001af4 <HAL_TIM_MspPostInit+0xf8>)
 8001a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a42:	4a2c      	ldr	r2, [pc, #176]	@ (8001af4 <HAL_TIM_MspPostInit+0xf8>)
 8001a44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a4c:	4b29      	ldr	r3, [pc, #164]	@ (8001af4 <HAL_TIM_MspPostInit+0xf8>)
 8001a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PJ7     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a5a:	2340      	movs	r3, #64	@ 0x40
 8001a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4619      	mov	r1, r3
 8001a74:	4820      	ldr	r0, [pc, #128]	@ (8001af8 <HAL_TIM_MspPostInit+0xfc>)
 8001a76:	f000 fb97 	bl	80021a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001a7a:	2380      	movs	r3, #128	@ 0x80
 8001a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	4819      	ldr	r0, [pc, #100]	@ (8001afc <HAL_TIM_MspPostInit+0x100>)
 8001a96:	f000 fb87 	bl	80021a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM13_MspPostInit 1 */

    /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8001a9a:	e024      	b.n	8001ae6 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM13)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a17      	ldr	r2, [pc, #92]	@ (8001b00 <HAL_TIM_MspPostInit+0x104>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d11f      	bne.n	8001ae6 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aa6:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <HAL_TIM_MspPostInit+0xf8>)
 8001aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aac:	4a11      	ldr	r2, [pc, #68]	@ (8001af4 <HAL_TIM_MspPostInit+0xf8>)
 8001aae:	f043 0320 	orr.w	r3, r3, #32
 8001ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8001af4 <HAL_TIM_MspPostInit+0xf8>)
 8001ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001abc:	f003 0320 	and.w	r3, r3, #32
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 8001ac4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001ad6:	2309      	movs	r3, #9
 8001ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4808      	ldr	r0, [pc, #32]	@ (8001b04 <HAL_TIM_MspPostInit+0x108>)
 8001ae2:	f000 fb61 	bl	80021a8 <HAL_GPIO_Init>
}
 8001ae6:	bf00      	nop
 8001ae8:	3728      	adds	r7, #40	@ 0x28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40010400 	.word	0x40010400
 8001af4:	58024400 	.word	0x58024400
 8001af8:	58020800 	.word	0x58020800
 8001afc:	58022400 	.word	0x58022400
 8001b00:	40001c00 	.word	0x40001c00
 8001b04:	58021400 	.word	0x58021400

08001b08 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b0bc      	sub	sp, #240	@ 0xf0
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b20:	f107 0310 	add.w	r3, r7, #16
 8001b24:	22c8      	movs	r2, #200	@ 0xc8
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f007 f889 	bl	8008c40 <memset>
  if(huart->Instance==USART1)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a27      	ldr	r2, [pc, #156]	@ (8001bd0 <HAL_UART_MspInit+0xc8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d146      	bne.n	8001bc6 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b38:	f04f 0201 	mov.w	r2, #1
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b4a:	f107 0310 	add.w	r3, r7, #16
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f001 fe0e 	bl	8003770 <HAL_RCCEx_PeriphCLKConfig>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001b5a:	f7ff fe29 	bl	80017b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd4 <HAL_UART_MspInit+0xcc>)
 8001b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b64:	4a1b      	ldr	r2, [pc, #108]	@ (8001bd4 <HAL_UART_MspInit+0xcc>)
 8001b66:	f043 0310 	orr.w	r3, r3, #16
 8001b6a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b6e:	4b19      	ldr	r3, [pc, #100]	@ (8001bd4 <HAL_UART_MspInit+0xcc>)
 8001b70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b74:	f003 0310 	and.w	r3, r3, #16
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7c:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <HAL_UART_MspInit+0xcc>)
 8001b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b82:	4a14      	ldr	r2, [pc, #80]	@ (8001bd4 <HAL_UART_MspInit+0xcc>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b8c:	4b11      	ldr	r3, [pc, #68]	@ (8001bd4 <HAL_UART_MspInit+0xcc>)
 8001b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001b9a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bb4:	2307      	movs	r3, #7
 8001bb6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4805      	ldr	r0, [pc, #20]	@ (8001bd8 <HAL_UART_MspInit+0xd0>)
 8001bc2:	f000 faf1 	bl	80021a8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001bc6:	bf00      	nop
 8001bc8:	37f0      	adds	r7, #240	@ 0xf0
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40011000 	.word	0x40011000
 8001bd4:	58024400 	.word	0x58024400
 8001bd8:	58020000 	.word	0x58020000

08001bdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b090      	sub	sp, #64	@ 0x40
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b0f      	cmp	r3, #15
 8001be8:	d827      	bhi.n	8001c3a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	201e      	movs	r0, #30
 8001bf0:	f000 faa0 	bl	8002134 <HAL_NVIC_SetPriority>

     /* Enable the TIM4 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bf4:	201e      	movs	r0, #30
 8001bf6:	f000 fab7 	bl	8002168 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001bfa:	4a29      	ldr	r2, [pc, #164]	@ (8001ca0 <HAL_InitTick+0xc4>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001c00:	4b28      	ldr	r3, [pc, #160]	@ (8001ca4 <HAL_InitTick+0xc8>)
 8001c02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c06:	4a27      	ldr	r2, [pc, #156]	@ (8001ca4 <HAL_InitTick+0xc8>)
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c10:	4b24      	ldr	r3, [pc, #144]	@ (8001ca4 <HAL_InitTick+0xc8>)
 8001c12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c1e:	f107 0210 	add.w	r2, r7, #16
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f001 fd5f 	bl	80036ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c30:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d106      	bne.n	8001c46 <HAL_InitTick+0x6a>
 8001c38:	e001      	b.n	8001c3e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e02b      	b.n	8001c96 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c3e:	f001 fd29 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 8001c42:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001c44:	e004      	b.n	8001c50 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c46:	f001 fd25 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c52:	4a15      	ldr	r2, [pc, #84]	@ (8001ca8 <HAL_InitTick+0xcc>)
 8001c54:	fba2 2303 	umull	r2, r3, r2, r3
 8001c58:	0c9b      	lsrs	r3, r3, #18
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001c5e:	4b13      	ldr	r3, [pc, #76]	@ (8001cac <HAL_InitTick+0xd0>)
 8001c60:	4a13      	ldr	r2, [pc, #76]	@ (8001cb0 <HAL_InitTick+0xd4>)
 8001c62:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001c64:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <HAL_InitTick+0xd0>)
 8001c66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c6a:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001c6c:	4a0f      	ldr	r2, [pc, #60]	@ (8001cac <HAL_InitTick+0xd0>)
 8001c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c70:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	@ (8001cac <HAL_InitTick+0xd0>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c78:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <HAL_InitTick+0xd0>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001c7e:	480b      	ldr	r0, [pc, #44]	@ (8001cac <HAL_InitTick+0xd0>)
 8001c80:	f004 f929 	bl	8005ed6 <HAL_TIM_Base_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d104      	bne.n	8001c94 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001c8a:	4808      	ldr	r0, [pc, #32]	@ (8001cac <HAL_InitTick+0xd0>)
 8001c8c:	f004 f97a 	bl	8005f84 <HAL_TIM_Base_Start_IT>
 8001c90:	4603      	mov	r3, r0
 8001c92:	e000      	b.n	8001c96 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3740      	adds	r7, #64	@ 0x40
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	24000008 	.word	0x24000008
 8001ca4:	58024400 	.word	0x58024400
 8001ca8:	431bde83 	.word	0x431bde83
 8001cac:	240002e4 	.word	0x240002e4
 8001cb0:	40000800 	.word	0x40000800

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <NMI_Handler+0x4>

08001cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <HardFault_Handler+0x4>

08001cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <MemManage_Handler+0x4>

08001ccc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <BusFault_Handler+0x4>

08001cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <UsageFault_Handler+0x4>

08001cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8001cee:	2080      	movs	r0, #128	@ 0x80
 8001cf0:	f000 fc0a 	bl	8002508 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001cfc:	4802      	ldr	r0, [pc, #8]	@ (8001d08 <TIM4_IRQHandler+0x10>)
 8001cfe:	f004 fa10 	bl	8006122 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	240002e4 	.word	0x240002e4

08001d0c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	e00a      	b.n	8001d34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d1e:	f3af 8000 	nop.w
 8001d22:	4601      	mov	r1, r0
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	60ba      	str	r2, [r7, #8]
 8001d2a:	b2ca      	uxtb	r2, r1
 8001d2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	3301      	adds	r3, #1
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	dbf0      	blt.n	8001d1e <_read+0x12>
  }

  return len;
 8001d3c:	687b      	ldr	r3, [r7, #4]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	60f8      	str	r0, [r7, #12]
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	e009      	b.n	8001d6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	60ba      	str	r2, [r7, #8]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fcfb 	bl	800075c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	dbf1      	blt.n	8001d58 <_write+0x12>
  }
  return len;
 8001d74:	687b      	ldr	r3, [r7, #4]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <_close>:

int _close(int file)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001da6:	605a      	str	r2, [r3, #4]
  return 0;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <_isatty>:

int _isatty(int file)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df0:	4a14      	ldr	r2, [pc, #80]	@ (8001e44 <_sbrk+0x5c>)
 8001df2:	4b15      	ldr	r3, [pc, #84]	@ (8001e48 <_sbrk+0x60>)
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dfc:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <_sbrk+0x64>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d102      	bne.n	8001e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e04:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <_sbrk+0x64>)
 8001e06:	4a12      	ldr	r2, [pc, #72]	@ (8001e50 <_sbrk+0x68>)
 8001e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e0a:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <_sbrk+0x64>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d207      	bcs.n	8001e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e18:	f006 ff60 	bl	8008cdc <__errno>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	220c      	movs	r2, #12
 8001e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295
 8001e26:	e009      	b.n	8001e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e28:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <_sbrk+0x64>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e2e:	4b07      	ldr	r3, [pc, #28]	@ (8001e4c <_sbrk+0x64>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	4a05      	ldr	r2, [pc, #20]	@ (8001e4c <_sbrk+0x64>)
 8001e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	24080000 	.word	0x24080000
 8001e48:	00000400 	.word	0x00000400
 8001e4c:	24000330 	.word	0x24000330
 8001e50:	24000910 	.word	0x24000910

08001e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e54:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001e90 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001e58:	f7fe fdde 	bl	8000a18 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e5c:	f7fe fd2e 	bl	80008bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e60:	480c      	ldr	r0, [pc, #48]	@ (8001e94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e62:	490d      	ldr	r1, [pc, #52]	@ (8001e98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e64:	4a0d      	ldr	r2, [pc, #52]	@ (8001e9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e68:	e002      	b.n	8001e70 <LoopCopyDataInit>

08001e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e6e:	3304      	adds	r3, #4

08001e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e74:	d3f9      	bcc.n	8001e6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e78:	4c0a      	ldr	r4, [pc, #40]	@ (8001ea4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e7c:	e001      	b.n	8001e82 <LoopFillZerobss>

08001e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e80:	3204      	adds	r2, #4

08001e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e84:	d3fb      	bcc.n	8001e7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e86:	f006 ff2f 	bl	8008ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e8a:	f7ff f985 	bl	8001198 <main>
  bx  lr
 8001e8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e90:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001e94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e98:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001e9c:	080098d4 	.word	0x080098d4
  ldr r2, =_sbss
 8001ea0:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001ea4:	24000910 	.word	0x24000910

08001ea8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea8:	e7fe      	b.n	8001ea8 <ADC3_IRQHandler>
	...

08001eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb2:	2003      	movs	r0, #3
 8001eb4:	f000 f933 	bl	800211e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001eb8:	f001 fa42 	bl	8003340 <HAL_RCC_GetSysClockFreq>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <HAL_Init+0x68>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	0a1b      	lsrs	r3, r3, #8
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	4913      	ldr	r1, [pc, #76]	@ (8001f18 <HAL_Init+0x6c>)
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f14 <HAL_Init+0x68>)
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	4a0e      	ldr	r2, [pc, #56]	@ (8001f18 <HAL_Init+0x6c>)
 8001ee0:	5cd3      	ldrb	r3, [r2, r3]
 8001ee2:	f003 031f 	and.w	r3, r3, #31
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eec:	4a0b      	ldr	r2, [pc, #44]	@ (8001f1c <HAL_Init+0x70>)
 8001eee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8001f20 <HAL_Init+0x74>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ef6:	200f      	movs	r0, #15
 8001ef8:	f7ff fe70 	bl	8001bdc <HAL_InitTick>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e002      	b.n	8001f0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f06:	f7ff fc59 	bl	80017bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	58024400 	.word	0x58024400
 8001f18:	08009858 	.word	0x08009858
 8001f1c:	24000004 	.word	0x24000004
 8001f20:	24000000 	.word	0x24000000

08001f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f28:	4b06      	ldr	r3, [pc, #24]	@ (8001f44 <HAL_IncTick+0x20>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <HAL_IncTick+0x24>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4413      	add	r3, r2
 8001f34:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <HAL_IncTick+0x24>)
 8001f36:	6013      	str	r3, [r2, #0]
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	2400000c 	.word	0x2400000c
 8001f48:	24000334 	.word	0x24000334

08001f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f50:	4b03      	ldr	r3, [pc, #12]	@ (8001f60 <HAL_GetTick+0x14>)
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	24000334 	.word	0x24000334

08001f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f6c:	f7ff ffee 	bl	8001f4c <HAL_GetTick>
 8001f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7c:	d005      	beq.n	8001f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa8 <HAL_Delay+0x44>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4413      	add	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f8a:	bf00      	nop
 8001f8c:	f7ff ffde 	bl	8001f4c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d8f7      	bhi.n	8001f8c <HAL_Delay+0x28>
  {
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	2400000c 	.word	0x2400000c

08001fac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001fb0:	4b03      	ldr	r3, [pc, #12]	@ (8001fc0 <HAL_GetREVID+0x14>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	0c1b      	lsrs	r3, r3, #16
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	5c001000 	.word	0x5c001000

08001fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002004 <__NVIC_SetPriorityGrouping+0x40>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff2:	4a04      	ldr	r2, [pc, #16]	@ (8002004 <__NVIC_SetPriorityGrouping+0x40>)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	60d3      	str	r3, [r2, #12]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00
 8002008:	05fa0000 	.word	0x05fa0000

0800200c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002010:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <__NVIC_GetPriorityGrouping+0x18>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	f003 0307 	and.w	r3, r3, #7
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db0b      	blt.n	8002052 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	4907      	ldr	r1, [pc, #28]	@ (8002060 <__NVIC_EnableIRQ+0x38>)
 8002042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	2001      	movs	r0, #1
 800204a:	fa00 f202 	lsl.w	r2, r0, r2
 800204e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	e000e100 	.word	0xe000e100

08002064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	6039      	str	r1, [r7, #0]
 800206e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002070:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002074:	2b00      	cmp	r3, #0
 8002076:	db0a      	blt.n	800208e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	b2da      	uxtb	r2, r3
 800207c:	490c      	ldr	r1, [pc, #48]	@ (80020b0 <__NVIC_SetPriority+0x4c>)
 800207e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002082:	0112      	lsls	r2, r2, #4
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	440b      	add	r3, r1
 8002088:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800208c:	e00a      	b.n	80020a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4908      	ldr	r1, [pc, #32]	@ (80020b4 <__NVIC_SetPriority+0x50>)
 8002094:	88fb      	ldrh	r3, [r7, #6]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	3b04      	subs	r3, #4
 800209c:	0112      	lsls	r2, r2, #4
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	440b      	add	r3, r1
 80020a2:	761a      	strb	r2, [r3, #24]
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000e100 	.word	0xe000e100
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b089      	sub	sp, #36	@ 0x24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f1c3 0307 	rsb	r3, r3, #7
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	bf28      	it	cs
 80020d6:	2304      	movcs	r3, #4
 80020d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3304      	adds	r3, #4
 80020de:	2b06      	cmp	r3, #6
 80020e0:	d902      	bls.n	80020e8 <NVIC_EncodePriority+0x30>
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3b03      	subs	r3, #3
 80020e6:	e000      	b.n	80020ea <NVIC_EncodePriority+0x32>
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	f04f 32ff 	mov.w	r2, #4294967295
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43da      	mvns	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	401a      	ands	r2, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002100:	f04f 31ff 	mov.w	r1, #4294967295
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	43d9      	mvns	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	4313      	orrs	r3, r2
         );
}
 8002112:	4618      	mov	r0, r3
 8002114:	3724      	adds	r7, #36	@ 0x24
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ff4c 	bl	8001fc4 <__NVIC_SetPriorityGrouping>
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002142:	f7ff ff63 	bl	800200c <__NVIC_GetPriorityGrouping>
 8002146:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	6978      	ldr	r0, [r7, #20]
 800214e:	f7ff ffb3 	bl	80020b8 <NVIC_EncodePriority>
 8002152:	4602      	mov	r2, r0
 8002154:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002158:	4611      	mov	r1, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ff82 	bl	8002064 <__NVIC_SetPriority>
}
 8002160:	bf00      	nop
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ff56 	bl	8002028 <__NVIC_EnableIRQ>
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002188:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <HAL_GetCurrentCPUID+0x20>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002190:	2b70      	cmp	r3, #112	@ 0x70
 8002192:	d101      	bne.n	8002198 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8002194:	2303      	movs	r3, #3
 8002196:	e000      	b.n	800219a <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8002198:	2301      	movs	r3, #1
  }
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b089      	sub	sp, #36	@ 0x24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80021b6:	4b89      	ldr	r3, [pc, #548]	@ (80023dc <HAL_GPIO_Init+0x234>)
 80021b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021ba:	e194      	b.n	80024e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	2101      	movs	r1, #1
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	fa01 f303 	lsl.w	r3, r1, r3
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 8186 	beq.w	80024e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d005      	beq.n	80021ec <HAL_GPIO_Init+0x44>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d130      	bne.n	800224e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	2203      	movs	r2, #3
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002222:	2201      	movs	r2, #1
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	091b      	lsrs	r3, r3, #4
 8002238:	f003 0201 	and.w	r2, r3, #1
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b03      	cmp	r3, #3
 8002258:	d017      	beq.n	800228a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	2203      	movs	r2, #3
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d123      	bne.n	80022de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	08da      	lsrs	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3208      	adds	r2, #8
 800229e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	220f      	movs	r2, #15
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	08da      	lsrs	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3208      	adds	r2, #8
 80022d8:	69b9      	ldr	r1, [r7, #24]
 80022da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	2203      	movs	r2, #3
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0203 	and.w	r2, r3, #3
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 80e0 	beq.w	80024e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002320:	4b2f      	ldr	r3, [pc, #188]	@ (80023e0 <HAL_GPIO_Init+0x238>)
 8002322:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002326:	4a2e      	ldr	r2, [pc, #184]	@ (80023e0 <HAL_GPIO_Init+0x238>)
 8002328:	f043 0302 	orr.w	r3, r3, #2
 800232c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002330:	4b2b      	ldr	r3, [pc, #172]	@ (80023e0 <HAL_GPIO_Init+0x238>)
 8002332:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800233e:	4a29      	ldr	r2, [pc, #164]	@ (80023e4 <HAL_GPIO_Init+0x23c>)
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	089b      	lsrs	r3, r3, #2
 8002344:	3302      	adds	r3, #2
 8002346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	220f      	movs	r2, #15
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a20      	ldr	r2, [pc, #128]	@ (80023e8 <HAL_GPIO_Init+0x240>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d052      	beq.n	8002410 <HAL_GPIO_Init+0x268>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a1f      	ldr	r2, [pc, #124]	@ (80023ec <HAL_GPIO_Init+0x244>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d031      	beq.n	80023d6 <HAL_GPIO_Init+0x22e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a1e      	ldr	r2, [pc, #120]	@ (80023f0 <HAL_GPIO_Init+0x248>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d02b      	beq.n	80023d2 <HAL_GPIO_Init+0x22a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a1d      	ldr	r2, [pc, #116]	@ (80023f4 <HAL_GPIO_Init+0x24c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d025      	beq.n	80023ce <HAL_GPIO_Init+0x226>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a1c      	ldr	r2, [pc, #112]	@ (80023f8 <HAL_GPIO_Init+0x250>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d01f      	beq.n	80023ca <HAL_GPIO_Init+0x222>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a1b      	ldr	r2, [pc, #108]	@ (80023fc <HAL_GPIO_Init+0x254>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d019      	beq.n	80023c6 <HAL_GPIO_Init+0x21e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a1a      	ldr	r2, [pc, #104]	@ (8002400 <HAL_GPIO_Init+0x258>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d013      	beq.n	80023c2 <HAL_GPIO_Init+0x21a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a19      	ldr	r2, [pc, #100]	@ (8002404 <HAL_GPIO_Init+0x25c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00d      	beq.n	80023be <HAL_GPIO_Init+0x216>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a18      	ldr	r2, [pc, #96]	@ (8002408 <HAL_GPIO_Init+0x260>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d007      	beq.n	80023ba <HAL_GPIO_Init+0x212>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a17      	ldr	r2, [pc, #92]	@ (800240c <HAL_GPIO_Init+0x264>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d101      	bne.n	80023b6 <HAL_GPIO_Init+0x20e>
 80023b2:	2309      	movs	r3, #9
 80023b4:	e02d      	b.n	8002412 <HAL_GPIO_Init+0x26a>
 80023b6:	230a      	movs	r3, #10
 80023b8:	e02b      	b.n	8002412 <HAL_GPIO_Init+0x26a>
 80023ba:	2308      	movs	r3, #8
 80023bc:	e029      	b.n	8002412 <HAL_GPIO_Init+0x26a>
 80023be:	2307      	movs	r3, #7
 80023c0:	e027      	b.n	8002412 <HAL_GPIO_Init+0x26a>
 80023c2:	2306      	movs	r3, #6
 80023c4:	e025      	b.n	8002412 <HAL_GPIO_Init+0x26a>
 80023c6:	2305      	movs	r3, #5
 80023c8:	e023      	b.n	8002412 <HAL_GPIO_Init+0x26a>
 80023ca:	2304      	movs	r3, #4
 80023cc:	e021      	b.n	8002412 <HAL_GPIO_Init+0x26a>
 80023ce:	2303      	movs	r3, #3
 80023d0:	e01f      	b.n	8002412 <HAL_GPIO_Init+0x26a>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e01d      	b.n	8002412 <HAL_GPIO_Init+0x26a>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e01b      	b.n	8002412 <HAL_GPIO_Init+0x26a>
 80023da:	bf00      	nop
 80023dc:	58000080 	.word	0x58000080
 80023e0:	58024400 	.word	0x58024400
 80023e4:	58000400 	.word	0x58000400
 80023e8:	58020000 	.word	0x58020000
 80023ec:	58020400 	.word	0x58020400
 80023f0:	58020800 	.word	0x58020800
 80023f4:	58020c00 	.word	0x58020c00
 80023f8:	58021000 	.word	0x58021000
 80023fc:	58021400 	.word	0x58021400
 8002400:	58021800 	.word	0x58021800
 8002404:	58021c00 	.word	0x58021c00
 8002408:	58022000 	.word	0x58022000
 800240c:	58022400 	.word	0x58022400
 8002410:	2300      	movs	r3, #0
 8002412:	69fa      	ldr	r2, [r7, #28]
 8002414:	f002 0203 	and.w	r2, r2, #3
 8002418:	0092      	lsls	r2, r2, #2
 800241a:	4093      	lsls	r3, r2
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002422:	4938      	ldr	r1, [pc, #224]	@ (8002504 <HAL_GPIO_Init+0x35c>)
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	3302      	adds	r3, #2
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002430:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002456:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800245e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002484:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	3301      	adds	r3, #1
 80024e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f47f ae63 	bne.w	80021bc <HAL_GPIO_Init+0x14>
  }
}
 80024f6:	bf00      	nop
 80024f8:	bf00      	nop
 80024fa:	3724      	adds	r7, #36	@ 0x24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	58000400 	.word	0x58000400

08002508 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002516:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800251a:	88fb      	ldrh	r3, [r7, #6]
 800251c:	4013      	ands	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002522:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800252c:	88fb      	ldrh	r3, [r7, #6]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fdfc 	bl	800112c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002544:	4a08      	ldr	r2, [pc, #32]	@ (8002568 <HAL_HSEM_FastTake+0x2c>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3320      	adds	r3, #32
 800254a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254e:	4a07      	ldr	r2, [pc, #28]	@ (800256c <HAL_HSEM_FastTake+0x30>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d101      	bne.n	8002558 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	e000      	b.n	800255a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
}
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	58026400 	.word	0x58026400
 800256c:	80000300 	.word	0x80000300

08002570 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800257a:	4906      	ldr	r1, [pc, #24]	@ (8002594 <HAL_HSEM_Release+0x24>)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	58026400 	.word	0x58026400

08002598 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80025a0:	4b29      	ldr	r3, [pc, #164]	@ (8002648 <HAL_PWREx_ConfigSupply+0xb0>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	2b06      	cmp	r3, #6
 80025aa:	d00a      	beq.n	80025c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025ac:	4b26      	ldr	r3, [pc, #152]	@ (8002648 <HAL_PWREx_ConfigSupply+0xb0>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d001      	beq.n	80025be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e040      	b.n	8002640 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e03e      	b.n	8002640 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025c2:	4b21      	ldr	r3, [pc, #132]	@ (8002648 <HAL_PWREx_ConfigSupply+0xb0>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80025ca:	491f      	ldr	r1, [pc, #124]	@ (8002648 <HAL_PWREx_ConfigSupply+0xb0>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80025d2:	f7ff fcbb 	bl	8001f4c <HAL_GetTick>
 80025d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025d8:	e009      	b.n	80025ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025da:	f7ff fcb7 	bl	8001f4c <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025e8:	d901      	bls.n	80025ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e028      	b.n	8002640 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025ee:	4b16      	ldr	r3, [pc, #88]	@ (8002648 <HAL_PWREx_ConfigSupply+0xb0>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025fa:	d1ee      	bne.n	80025da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b1e      	cmp	r3, #30
 8002600:	d008      	beq.n	8002614 <HAL_PWREx_ConfigSupply+0x7c>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b2e      	cmp	r3, #46	@ 0x2e
 8002606:	d005      	beq.n	8002614 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b1d      	cmp	r3, #29
 800260c:	d002      	beq.n	8002614 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b2d      	cmp	r3, #45	@ 0x2d
 8002612:	d114      	bne.n	800263e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002614:	f7ff fc9a 	bl	8001f4c <HAL_GetTick>
 8002618:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800261a:	e009      	b.n	8002630 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800261c:	f7ff fc96 	bl	8001f4c <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800262a:	d901      	bls.n	8002630 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e007      	b.n	8002640 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002630:	4b05      	ldr	r3, [pc, #20]	@ (8002648 <HAL_PWREx_ConfigSupply+0xb0>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800263c:	d1ee      	bne.n	800261c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	58024800 	.word	0x58024800

0800264c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08c      	sub	sp, #48	@ 0x30
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d102      	bne.n	8002660 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	f000 bc48 	b.w	8002ef0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 8088 	beq.w	800277e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800266e:	4b99      	ldr	r3, [pc, #612]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002676:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002678:	4b96      	ldr	r3, [pc, #600]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 800267a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800267e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002680:	2b10      	cmp	r3, #16
 8002682:	d007      	beq.n	8002694 <HAL_RCC_OscConfig+0x48>
 8002684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002686:	2b18      	cmp	r3, #24
 8002688:	d111      	bne.n	80026ae <HAL_RCC_OscConfig+0x62>
 800268a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d10c      	bne.n	80026ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	4b8f      	ldr	r3, [pc, #572]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d06d      	beq.n	800277c <HAL_RCC_OscConfig+0x130>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d169      	bne.n	800277c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	f000 bc21 	b.w	8002ef0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026b6:	d106      	bne.n	80026c6 <HAL_RCC_OscConfig+0x7a>
 80026b8:	4b86      	ldr	r3, [pc, #536]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a85      	ldr	r2, [pc, #532]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 80026be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	e02e      	b.n	8002724 <HAL_RCC_OscConfig+0xd8>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10c      	bne.n	80026e8 <HAL_RCC_OscConfig+0x9c>
 80026ce:	4b81      	ldr	r3, [pc, #516]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a80      	ldr	r2, [pc, #512]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 80026d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	4b7e      	ldr	r3, [pc, #504]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a7d      	ldr	r2, [pc, #500]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 80026e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	e01d      	b.n	8002724 <HAL_RCC_OscConfig+0xd8>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026f0:	d10c      	bne.n	800270c <HAL_RCC_OscConfig+0xc0>
 80026f2:	4b78      	ldr	r3, [pc, #480]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a77      	ldr	r2, [pc, #476]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 80026f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	4b75      	ldr	r3, [pc, #468]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a74      	ldr	r2, [pc, #464]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 8002704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	e00b      	b.n	8002724 <HAL_RCC_OscConfig+0xd8>
 800270c:	4b71      	ldr	r3, [pc, #452]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a70      	ldr	r2, [pc, #448]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 8002712:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	4b6e      	ldr	r3, [pc, #440]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a6d      	ldr	r2, [pc, #436]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 800271e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d013      	beq.n	8002754 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7ff fc0e 	bl	8001f4c <HAL_GetTick>
 8002730:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002734:	f7ff fc0a 	bl	8001f4c <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	@ 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e3d4      	b.n	8002ef0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002746:	4b63      	ldr	r3, [pc, #396]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0xe8>
 8002752:	e014      	b.n	800277e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7ff fbfa 	bl	8001f4c <HAL_GetTick>
 8002758:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800275c:	f7ff fbf6 	bl	8001f4c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b64      	cmp	r3, #100	@ 0x64
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e3c0      	b.n	8002ef0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800276e:	4b59      	ldr	r3, [pc, #356]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x110>
 800277a:	e000      	b.n	800277e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 80ca 	beq.w	8002920 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800278c:	4b51      	ldr	r3, [pc, #324]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002794:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002796:	4b4f      	ldr	r3, [pc, #316]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 8002798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <HAL_RCC_OscConfig+0x166>
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	2b18      	cmp	r3, #24
 80027a6:	d156      	bne.n	8002856 <HAL_RCC_OscConfig+0x20a>
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d151      	bne.n	8002856 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027b2:	4b48      	ldr	r3, [pc, #288]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <HAL_RCC_OscConfig+0x17e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e392      	b.n	8002ef0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027ca:	4b42      	ldr	r3, [pc, #264]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 0219 	bic.w	r2, r3, #25
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	493f      	ldr	r1, [pc, #252]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7ff fbb6 	bl	8001f4c <HAL_GetTick>
 80027e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e4:	f7ff fbb2 	bl	8001f4c <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e37c      	b.n	8002ef0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027f6:	4b37      	ldr	r3, [pc, #220]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002802:	f7ff fbd3 	bl	8001fac <HAL_GetREVID>
 8002806:	4603      	mov	r3, r0
 8002808:	f241 0203 	movw	r2, #4099	@ 0x1003
 800280c:	4293      	cmp	r3, r2
 800280e:	d817      	bhi.n	8002840 <HAL_RCC_OscConfig+0x1f4>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	2b40      	cmp	r3, #64	@ 0x40
 8002816:	d108      	bne.n	800282a <HAL_RCC_OscConfig+0x1de>
 8002818:	4b2e      	ldr	r3, [pc, #184]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002820:	4a2c      	ldr	r2, [pc, #176]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 8002822:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002826:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002828:	e07a      	b.n	8002920 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282a:	4b2a      	ldr	r3, [pc, #168]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	031b      	lsls	r3, r3, #12
 8002838:	4926      	ldr	r1, [pc, #152]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800283e:	e06f      	b.n	8002920 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002840:	4b24      	ldr	r3, [pc, #144]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	061b      	lsls	r3, r3, #24
 800284e:	4921      	ldr	r1, [pc, #132]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002854:	e064      	b.n	8002920 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d047      	beq.n	80028ee <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800285e:	4b1d      	ldr	r3, [pc, #116]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 0219 	bic.w	r2, r3, #25
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	491a      	ldr	r1, [pc, #104]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 800286c:	4313      	orrs	r3, r2
 800286e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7ff fb6c 	bl	8001f4c <HAL_GetTick>
 8002874:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002878:	f7ff fb68 	bl	8001f4c <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e332      	b.n	8002ef0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800288a:	4b12      	ldr	r3, [pc, #72]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002896:	f7ff fb89 	bl	8001fac <HAL_GetREVID>
 800289a:	4603      	mov	r3, r0
 800289c:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d819      	bhi.n	80028d8 <HAL_RCC_OscConfig+0x28c>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	2b40      	cmp	r3, #64	@ 0x40
 80028aa:	d108      	bne.n	80028be <HAL_RCC_OscConfig+0x272>
 80028ac:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80028b4:	4a07      	ldr	r2, [pc, #28]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 80028b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028ba:	6053      	str	r3, [r2, #4]
 80028bc:	e030      	b.n	8002920 <HAL_RCC_OscConfig+0x2d4>
 80028be:	4b05      	ldr	r3, [pc, #20]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	031b      	lsls	r3, r3, #12
 80028cc:	4901      	ldr	r1, [pc, #4]	@ (80028d4 <HAL_RCC_OscConfig+0x288>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
 80028d2:	e025      	b.n	8002920 <HAL_RCC_OscConfig+0x2d4>
 80028d4:	58024400 	.word	0x58024400
 80028d8:	4b9a      	ldr	r3, [pc, #616]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	061b      	lsls	r3, r3, #24
 80028e6:	4997      	ldr	r1, [pc, #604]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	604b      	str	r3, [r1, #4]
 80028ec:	e018      	b.n	8002920 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ee:	4b95      	ldr	r3, [pc, #596]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a94      	ldr	r2, [pc, #592]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 80028f4:	f023 0301 	bic.w	r3, r3, #1
 80028f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fa:	f7ff fb27 	bl	8001f4c <HAL_GetTick>
 80028fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002902:	f7ff fb23 	bl	8001f4c <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e2ed      	b.n	8002ef0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002914:	4b8b      	ldr	r3, [pc, #556]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f0      	bne.n	8002902 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80a9 	beq.w	8002a80 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800292e:	4b85      	ldr	r3, [pc, #532]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002936:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002938:	4b82      	ldr	r3, [pc, #520]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 800293a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	2b08      	cmp	r3, #8
 8002942:	d007      	beq.n	8002954 <HAL_RCC_OscConfig+0x308>
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2b18      	cmp	r3, #24
 8002948:	d13a      	bne.n	80029c0 <HAL_RCC_OscConfig+0x374>
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d135      	bne.n	80029c0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002954:	4b7b      	ldr	r3, [pc, #492]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_OscConfig+0x320>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	2b80      	cmp	r3, #128	@ 0x80
 8002966:	d001      	beq.n	800296c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e2c1      	b.n	8002ef0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800296c:	f7ff fb1e 	bl	8001fac <HAL_GetREVID>
 8002970:	4603      	mov	r3, r0
 8002972:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002976:	4293      	cmp	r3, r2
 8002978:	d817      	bhi.n	80029aa <HAL_RCC_OscConfig+0x35e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	2b20      	cmp	r3, #32
 8002980:	d108      	bne.n	8002994 <HAL_RCC_OscConfig+0x348>
 8002982:	4b70      	ldr	r3, [pc, #448]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800298a:	4a6e      	ldr	r2, [pc, #440]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 800298c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002990:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002992:	e075      	b.n	8002a80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002994:	4b6b      	ldr	r3, [pc, #428]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	069b      	lsls	r3, r3, #26
 80029a2:	4968      	ldr	r1, [pc, #416]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029a8:	e06a      	b.n	8002a80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029aa:	4b66      	ldr	r3, [pc, #408]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	061b      	lsls	r3, r3, #24
 80029b8:	4962      	ldr	r1, [pc, #392]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029be:	e05f      	b.n	8002a80 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d042      	beq.n	8002a4e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029c8:	4b5e      	ldr	r3, [pc, #376]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a5d      	ldr	r2, [pc, #372]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 80029ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7ff faba 	bl	8001f4c <HAL_GetTick>
 80029d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029dc:	f7ff fab6 	bl	8001f4c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e280      	b.n	8002ef0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029ee:	4b55      	ldr	r3, [pc, #340]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029fa:	f7ff fad7 	bl	8001fac <HAL_GetREVID>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d817      	bhi.n	8002a38 <HAL_RCC_OscConfig+0x3ec>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d108      	bne.n	8002a22 <HAL_RCC_OscConfig+0x3d6>
 8002a10:	4b4c      	ldr	r3, [pc, #304]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002a18:	4a4a      	ldr	r2, [pc, #296]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002a1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a1e:	6053      	str	r3, [r2, #4]
 8002a20:	e02e      	b.n	8002a80 <HAL_RCC_OscConfig+0x434>
 8002a22:	4b48      	ldr	r3, [pc, #288]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	069b      	lsls	r3, r3, #26
 8002a30:	4944      	ldr	r1, [pc, #272]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	604b      	str	r3, [r1, #4]
 8002a36:	e023      	b.n	8002a80 <HAL_RCC_OscConfig+0x434>
 8002a38:	4b42      	ldr	r3, [pc, #264]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	061b      	lsls	r3, r3, #24
 8002a46:	493f      	ldr	r1, [pc, #252]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60cb      	str	r3, [r1, #12]
 8002a4c:	e018      	b.n	8002a80 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a3c      	ldr	r2, [pc, #240]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002a54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5a:	f7ff fa77 	bl	8001f4c <HAL_GetTick>
 8002a5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a62:	f7ff fa73 	bl	8001f4c <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e23d      	b.n	8002ef0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a74:	4b33      	ldr	r3, [pc, #204]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f0      	bne.n	8002a62 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d036      	beq.n	8002afa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d019      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a94:	4b2b      	ldr	r3, [pc, #172]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002a96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a98:	4a2a      	ldr	r2, [pc, #168]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7ff fa54 	bl	8001f4c <HAL_GetTick>
 8002aa4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa8:	f7ff fa50 	bl	8001f4c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e21a      	b.n	8002ef0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aba:	4b22      	ldr	r3, [pc, #136]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x45c>
 8002ac6:	e018      	b.n	8002afa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002acc:	4a1d      	ldr	r2, [pc, #116]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad4:	f7ff fa3a 	bl	8001f4c <HAL_GetTick>
 8002ad8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002adc:	f7ff fa36 	bl	8001f4c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e200      	b.n	8002ef0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002aee:	4b15      	ldr	r3, [pc, #84]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d039      	beq.n	8002b7a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d01c      	beq.n	8002b48 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a0c      	ldr	r2, [pc, #48]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002b14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b1a:	f7ff fa17 	bl	8001f4c <HAL_GetTick>
 8002b1e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b22:	f7ff fa13 	bl	8001f4c <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e1dd      	b.n	8002ef0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b34:	4b03      	ldr	r3, [pc, #12]	@ (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x4d6>
 8002b40:	e01b      	b.n	8002b7a <HAL_RCC_OscConfig+0x52e>
 8002b42:	bf00      	nop
 8002b44:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b48:	4b9b      	ldr	r3, [pc, #620]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a9a      	ldr	r2, [pc, #616]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002b4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b52:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b54:	f7ff f9fa 	bl	8001f4c <HAL_GetTick>
 8002b58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b5c:	f7ff f9f6 	bl	8001f4c <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e1c0      	b.n	8002ef0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b6e:	4b92      	ldr	r3, [pc, #584]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 8081 	beq.w	8002c8a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b88:	4b8c      	ldr	r3, [pc, #560]	@ (8002dbc <HAL_RCC_OscConfig+0x770>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a8b      	ldr	r2, [pc, #556]	@ (8002dbc <HAL_RCC_OscConfig+0x770>)
 8002b8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b94:	f7ff f9da 	bl	8001f4c <HAL_GetTick>
 8002b98:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b9c:	f7ff f9d6 	bl	8001f4c <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	@ 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e1a0      	b.n	8002ef0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bae:	4b83      	ldr	r3, [pc, #524]	@ (8002dbc <HAL_RCC_OscConfig+0x770>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d106      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x584>
 8002bc2:	4b7d      	ldr	r3, [pc, #500]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc6:	4a7c      	ldr	r2, [pc, #496]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bce:	e02d      	b.n	8002c2c <HAL_RCC_OscConfig+0x5e0>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10c      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x5a6>
 8002bd8:	4b77      	ldr	r3, [pc, #476]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bdc:	4a76      	ldr	r2, [pc, #472]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002bde:	f023 0301 	bic.w	r3, r3, #1
 8002be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be4:	4b74      	ldr	r3, [pc, #464]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be8:	4a73      	ldr	r2, [pc, #460]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002bea:	f023 0304 	bic.w	r3, r3, #4
 8002bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bf0:	e01c      	b.n	8002c2c <HAL_RCC_OscConfig+0x5e0>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x5c8>
 8002bfa:	4b6f      	ldr	r3, [pc, #444]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfe:	4a6e      	ldr	r2, [pc, #440]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002c00:	f043 0304 	orr.w	r3, r3, #4
 8002c04:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c06:	4b6c      	ldr	r3, [pc, #432]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0a:	4a6b      	ldr	r2, [pc, #428]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c12:	e00b      	b.n	8002c2c <HAL_RCC_OscConfig+0x5e0>
 8002c14:	4b68      	ldr	r3, [pc, #416]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c18:	4a67      	ldr	r2, [pc, #412]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c20:	4b65      	ldr	r3, [pc, #404]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c24:	4a64      	ldr	r2, [pc, #400]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002c26:	f023 0304 	bic.w	r3, r3, #4
 8002c2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d015      	beq.n	8002c60 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7ff f98a 	bl	8001f4c <HAL_GetTick>
 8002c38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7ff f986 	bl	8001f4c <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e14e      	b.n	8002ef0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c52:	4b59      	ldr	r3, [pc, #356]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0ee      	beq.n	8002c3c <HAL_RCC_OscConfig+0x5f0>
 8002c5e:	e014      	b.n	8002c8a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7ff f974 	bl	8001f4c <HAL_GetTick>
 8002c64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7ff f970 	bl	8001f4c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e138      	b.n	8002ef0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c7e:	4b4e      	ldr	r3, [pc, #312]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1ee      	bne.n	8002c68 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 812d 	beq.w	8002eee <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c94:	4b48      	ldr	r3, [pc, #288]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c9c:	2b18      	cmp	r3, #24
 8002c9e:	f000 80bd 	beq.w	8002e1c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	f040 809e 	bne.w	8002de8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cac:	4b42      	ldr	r3, [pc, #264]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a41      	ldr	r2, [pc, #260]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002cb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7ff f948 	bl	8001f4c <HAL_GetTick>
 8002cbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7ff f944 	bl	8001f4c <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e10e      	b.n	8002ef0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cd2:	4b39      	ldr	r3, [pc, #228]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cde:	4b36      	ldr	r3, [pc, #216]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002ce0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ce2:	4b37      	ldr	r3, [pc, #220]	@ (8002dc0 <HAL_RCC_OscConfig+0x774>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002cee:	0112      	lsls	r2, r2, #4
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	4931      	ldr	r1, [pc, #196]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	628b      	str	r3, [r1, #40]	@ 0x28
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d06:	3b01      	subs	r3, #1
 8002d08:	025b      	lsls	r3, r3, #9
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d12:	3b01      	subs	r3, #1
 8002d14:	041b      	lsls	r3, r3, #16
 8002d16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d20:	3b01      	subs	r3, #1
 8002d22:	061b      	lsls	r3, r3, #24
 8002d24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002d28:	4923      	ldr	r1, [pc, #140]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002d2e:	4b22      	ldr	r3, [pc, #136]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d32:	4a21      	ldr	r2, [pc, #132]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d3e:	4b21      	ldr	r3, [pc, #132]	@ (8002dc4 <HAL_RCC_OscConfig+0x778>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d46:	00d2      	lsls	r2, r2, #3
 8002d48:	491b      	ldr	r1, [pc, #108]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d52:	f023 020c 	bic.w	r2, r3, #12
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5a:	4917      	ldr	r1, [pc, #92]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d60:	4b15      	ldr	r3, [pc, #84]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d64:	f023 0202 	bic.w	r2, r3, #2
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6c:	4912      	ldr	r1, [pc, #72]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d72:	4b11      	ldr	r3, [pc, #68]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d76:	4a10      	ldr	r2, [pc, #64]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d82:	4a0d      	ldr	r2, [pc, #52]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002d96:	4b08      	ldr	r3, [pc, #32]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9a:	4a07      	ldr	r2, [pc, #28]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da2:	4b05      	ldr	r3, [pc, #20]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a04      	ldr	r2, [pc, #16]	@ (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002da8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dae:	f7ff f8cd 	bl	8001f4c <HAL_GetTick>
 8002db2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002db4:	e011      	b.n	8002dda <HAL_RCC_OscConfig+0x78e>
 8002db6:	bf00      	nop
 8002db8:	58024400 	.word	0x58024400
 8002dbc:	58024800 	.word	0x58024800
 8002dc0:	fffffc0c 	.word	0xfffffc0c
 8002dc4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7ff f8c0 	bl	8001f4c <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e08a      	b.n	8002ef0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dda:	4b47      	ldr	r3, [pc, #284]	@ (8002ef8 <HAL_RCC_OscConfig+0x8ac>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x77c>
 8002de6:	e082      	b.n	8002eee <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de8:	4b43      	ldr	r3, [pc, #268]	@ (8002ef8 <HAL_RCC_OscConfig+0x8ac>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a42      	ldr	r2, [pc, #264]	@ (8002ef8 <HAL_RCC_OscConfig+0x8ac>)
 8002dee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df4:	f7ff f8aa 	bl	8001f4c <HAL_GetTick>
 8002df8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfc:	f7ff f8a6 	bl	8001f4c <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e070      	b.n	8002ef0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e0e:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef8 <HAL_RCC_OscConfig+0x8ac>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x7b0>
 8002e1a:	e068      	b.n	8002eee <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e1c:	4b36      	ldr	r3, [pc, #216]	@ (8002ef8 <HAL_RCC_OscConfig+0x8ac>)
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e22:	4b35      	ldr	r3, [pc, #212]	@ (8002ef8 <HAL_RCC_OscConfig+0x8ac>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d031      	beq.n	8002e94 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f003 0203 	and.w	r2, r3, #3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d12a      	bne.n	8002e94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d122      	bne.n	8002e94 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e58:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d11a      	bne.n	8002e94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	0a5b      	lsrs	r3, r3, #9
 8002e62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e6a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d111      	bne.n	8002e94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	0c1b      	lsrs	r3, r3, #16
 8002e74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d108      	bne.n	8002e94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	0e1b      	lsrs	r3, r3, #24
 8002e86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e8e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e02b      	b.n	8002ef0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002e98:	4b17      	ldr	r3, [pc, #92]	@ (8002ef8 <HAL_RCC_OscConfig+0x8ac>)
 8002e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e9c:	08db      	lsrs	r3, r3, #3
 8002e9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ea2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d01f      	beq.n	8002eee <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002eae:	4b12      	ldr	r3, [pc, #72]	@ (8002ef8 <HAL_RCC_OscConfig+0x8ac>)
 8002eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb2:	4a11      	ldr	r2, [pc, #68]	@ (8002ef8 <HAL_RCC_OscConfig+0x8ac>)
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002eba:	f7ff f847 	bl	8001f4c <HAL_GetTick>
 8002ebe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ec0:	bf00      	nop
 8002ec2:	f7ff f843 	bl	8001f4c <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d0f9      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ece:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef8 <HAL_RCC_OscConfig+0x8ac>)
 8002ed0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8002efc <HAL_RCC_OscConfig+0x8b0>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002eda:	00d2      	lsls	r2, r2, #3
 8002edc:	4906      	ldr	r1, [pc, #24]	@ (8002ef8 <HAL_RCC_OscConfig+0x8ac>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ee2:	4b05      	ldr	r3, [pc, #20]	@ (8002ef8 <HAL_RCC_OscConfig+0x8ac>)
 8002ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee6:	4a04      	ldr	r2, [pc, #16]	@ (8002ef8 <HAL_RCC_OscConfig+0x8ac>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3730      	adds	r7, #48	@ 0x30
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	58024400 	.word	0x58024400
 8002efc:	ffff0007 	.word	0xffff0007

08002f00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e19c      	b.n	800324e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f14:	4b8a      	ldr	r3, [pc, #552]	@ (8003140 <HAL_RCC_ClockConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 030f 	and.w	r3, r3, #15
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d910      	bls.n	8002f44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f22:	4b87      	ldr	r3, [pc, #540]	@ (8003140 <HAL_RCC_ClockConfig+0x240>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f023 020f 	bic.w	r2, r3, #15
 8002f2a:	4985      	ldr	r1, [pc, #532]	@ (8003140 <HAL_RCC_ClockConfig+0x240>)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f32:	4b83      	ldr	r3, [pc, #524]	@ (8003140 <HAL_RCC_ClockConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d001      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e184      	b.n	800324e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d010      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	4b7b      	ldr	r3, [pc, #492]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d908      	bls.n	8002f72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f60:	4b78      	ldr	r3, [pc, #480]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	4975      	ldr	r1, [pc, #468]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d010      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	4b70      	ldr	r3, [pc, #448]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d908      	bls.n	8002fa0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f8e:	4b6d      	ldr	r3, [pc, #436]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	496a      	ldr	r1, [pc, #424]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0310 	and.w	r3, r3, #16
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d010      	beq.n	8002fce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699a      	ldr	r2, [r3, #24]
 8002fb0:	4b64      	ldr	r3, [pc, #400]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d908      	bls.n	8002fce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fbc:	4b61      	ldr	r3, [pc, #388]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	495e      	ldr	r1, [pc, #376]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d010      	beq.n	8002ffc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69da      	ldr	r2, [r3, #28]
 8002fde:	4b59      	ldr	r3, [pc, #356]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d908      	bls.n	8002ffc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002fea:	4b56      	ldr	r3, [pc, #344]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	4953      	ldr	r1, [pc, #332]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d010      	beq.n	800302a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	4b4d      	ldr	r3, [pc, #308]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	429a      	cmp	r2, r3
 8003016:	d908      	bls.n	800302a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003018:	4b4a      	ldr	r3, [pc, #296]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	f023 020f 	bic.w	r2, r3, #15
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	4947      	ldr	r1, [pc, #284]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 8003026:	4313      	orrs	r3, r2
 8003028:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d055      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003036:	4b43      	ldr	r3, [pc, #268]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	4940      	ldr	r1, [pc, #256]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 8003044:	4313      	orrs	r3, r2
 8003046:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d107      	bne.n	8003060 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003050:	4b3c      	ldr	r3, [pc, #240]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d121      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0f6      	b.n	800324e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b03      	cmp	r3, #3
 8003066:	d107      	bne.n	8003078 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003068:	4b36      	ldr	r3, [pc, #216]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d115      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0ea      	b.n	800324e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d107      	bne.n	8003090 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003080:	4b30      	ldr	r3, [pc, #192]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003088:	2b00      	cmp	r3, #0
 800308a:	d109      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0de      	b.n	800324e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003090:	4b2c      	ldr	r3, [pc, #176]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0d6      	b.n	800324e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030a0:	4b28      	ldr	r3, [pc, #160]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	f023 0207 	bic.w	r2, r3, #7
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4925      	ldr	r1, [pc, #148]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030b2:	f7fe ff4b 	bl	8001f4c <HAL_GetTick>
 80030b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b8:	e00a      	b.n	80030d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ba:	f7fe ff47 	bl	8001f4c <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e0be      	b.n	800324e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	429a      	cmp	r2, r3
 80030e0:	d1eb      	bne.n	80030ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d010      	beq.n	8003110 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	4b14      	ldr	r3, [pc, #80]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d208      	bcs.n	8003110 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030fe:	4b11      	ldr	r3, [pc, #68]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f023 020f 	bic.w	r2, r3, #15
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	490e      	ldr	r1, [pc, #56]	@ (8003144 <HAL_RCC_ClockConfig+0x244>)
 800310c:	4313      	orrs	r3, r2
 800310e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003110:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <HAL_RCC_ClockConfig+0x240>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d214      	bcs.n	8003148 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311e:	4b08      	ldr	r3, [pc, #32]	@ (8003140 <HAL_RCC_ClockConfig+0x240>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f023 020f 	bic.w	r2, r3, #15
 8003126:	4906      	ldr	r1, [pc, #24]	@ (8003140 <HAL_RCC_ClockConfig+0x240>)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312e:	4b04      	ldr	r3, [pc, #16]	@ (8003140 <HAL_RCC_ClockConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d005      	beq.n	8003148 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e086      	b.n	800324e <HAL_RCC_ClockConfig+0x34e>
 8003140:	52002000 	.word	0x52002000
 8003144:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d010      	beq.n	8003176 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	4b3f      	ldr	r3, [pc, #252]	@ (8003258 <HAL_RCC_ClockConfig+0x358>)
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003160:	429a      	cmp	r2, r3
 8003162:	d208      	bcs.n	8003176 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003164:	4b3c      	ldr	r3, [pc, #240]	@ (8003258 <HAL_RCC_ClockConfig+0x358>)
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	4939      	ldr	r1, [pc, #228]	@ (8003258 <HAL_RCC_ClockConfig+0x358>)
 8003172:	4313      	orrs	r3, r2
 8003174:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d010      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	4b34      	ldr	r3, [pc, #208]	@ (8003258 <HAL_RCC_ClockConfig+0x358>)
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800318e:	429a      	cmp	r2, r3
 8003190:	d208      	bcs.n	80031a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003192:	4b31      	ldr	r3, [pc, #196]	@ (8003258 <HAL_RCC_ClockConfig+0x358>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	492e      	ldr	r1, [pc, #184]	@ (8003258 <HAL_RCC_ClockConfig+0x358>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d010      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699a      	ldr	r2, [r3, #24]
 80031b4:	4b28      	ldr	r3, [pc, #160]	@ (8003258 <HAL_RCC_ClockConfig+0x358>)
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80031bc:	429a      	cmp	r2, r3
 80031be:	d208      	bcs.n	80031d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031c0:	4b25      	ldr	r3, [pc, #148]	@ (8003258 <HAL_RCC_ClockConfig+0x358>)
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	4922      	ldr	r1, [pc, #136]	@ (8003258 <HAL_RCC_ClockConfig+0x358>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d010      	beq.n	8003200 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69da      	ldr	r2, [r3, #28]
 80031e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003258 <HAL_RCC_ClockConfig+0x358>)
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d208      	bcs.n	8003200 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80031ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003258 <HAL_RCC_ClockConfig+0x358>)
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	4917      	ldr	r1, [pc, #92]	@ (8003258 <HAL_RCC_ClockConfig+0x358>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003200:	f000 f89e 	bl	8003340 <HAL_RCC_GetSysClockFreq>
 8003204:	4602      	mov	r2, r0
 8003206:	4b14      	ldr	r3, [pc, #80]	@ (8003258 <HAL_RCC_ClockConfig+0x358>)
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	0a1b      	lsrs	r3, r3, #8
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	4912      	ldr	r1, [pc, #72]	@ (800325c <HAL_RCC_ClockConfig+0x35c>)
 8003212:	5ccb      	ldrb	r3, [r1, r3]
 8003214:	f003 031f 	and.w	r3, r3, #31
 8003218:	fa22 f303 	lsr.w	r3, r2, r3
 800321c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800321e:	4b0e      	ldr	r3, [pc, #56]	@ (8003258 <HAL_RCC_ClockConfig+0x358>)
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	4a0d      	ldr	r2, [pc, #52]	@ (800325c <HAL_RCC_ClockConfig+0x35c>)
 8003228:	5cd3      	ldrb	r3, [r2, r3]
 800322a:	f003 031f 	and.w	r3, r3, #31
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
 8003234:	4a0a      	ldr	r2, [pc, #40]	@ (8003260 <HAL_RCC_ClockConfig+0x360>)
 8003236:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003238:	4a0a      	ldr	r2, [pc, #40]	@ (8003264 <HAL_RCC_ClockConfig+0x364>)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800323e:	4b0a      	ldr	r3, [pc, #40]	@ (8003268 <HAL_RCC_ClockConfig+0x368>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe fcca 	bl	8001bdc <HAL_InitTick>
 8003248:	4603      	mov	r3, r0
 800324a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800324c:	7bfb      	ldrb	r3, [r7, #15]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	58024400 	.word	0x58024400
 800325c:	08009858 	.word	0x08009858
 8003260:	24000004 	.word	0x24000004
 8003264:	24000000 	.word	0x24000000
 8003268:	24000008 	.word	0x24000008

0800326c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08c      	sub	sp, #48	@ 0x30
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d12a      	bne.n	80032d4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800327e:	4b2d      	ldr	r3, [pc, #180]	@ (8003334 <HAL_RCC_MCOConfig+0xc8>)
 8003280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003284:	4a2b      	ldr	r2, [pc, #172]	@ (8003334 <HAL_RCC_MCOConfig+0xc8>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800328e:	4b29      	ldr	r3, [pc, #164]	@ (8003334 <HAL_RCC_MCOConfig+0xc8>)
 8003290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	61bb      	str	r3, [r7, #24]
 800329a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800329c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a2:	2302      	movs	r3, #2
 80032a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a6:	2303      	movs	r3, #3
 80032a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80032ae:	2300      	movs	r3, #0
 80032b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80032b2:	f107 031c 	add.w	r3, r7, #28
 80032b6:	4619      	mov	r1, r3
 80032b8:	481f      	ldr	r0, [pc, #124]	@ (8003338 <HAL_RCC_MCOConfig+0xcc>)
 80032ba:	f7fe ff75 	bl	80021a8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80032be:	4b1d      	ldr	r3, [pc, #116]	@ (8003334 <HAL_RCC_MCOConfig+0xc8>)
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	430b      	orrs	r3, r1
 80032cc:	4919      	ldr	r1, [pc, #100]	@ (8003334 <HAL_RCC_MCOConfig+0xc8>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80032d2:	e02a      	b.n	800332a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80032d4:	4b17      	ldr	r3, [pc, #92]	@ (8003334 <HAL_RCC_MCOConfig+0xc8>)
 80032d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032da:	4a16      	ldr	r2, [pc, #88]	@ (8003334 <HAL_RCC_MCOConfig+0xc8>)
 80032dc:	f043 0304 	orr.w	r3, r3, #4
 80032e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032e4:	4b13      	ldr	r3, [pc, #76]	@ (8003334 <HAL_RCC_MCOConfig+0xc8>)
 80032e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80032f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f8:	2302      	movs	r3, #2
 80032fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032fc:	2303      	movs	r3, #3
 80032fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003300:	2300      	movs	r3, #0
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003304:	2300      	movs	r3, #0
 8003306:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003308:	f107 031c 	add.w	r3, r7, #28
 800330c:	4619      	mov	r1, r3
 800330e:	480b      	ldr	r0, [pc, #44]	@ (800333c <HAL_RCC_MCOConfig+0xd0>)
 8003310:	f7fe ff4a 	bl	80021a8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003314:	4b07      	ldr	r3, [pc, #28]	@ (8003334 <HAL_RCC_MCOConfig+0xc8>)
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	01d9      	lsls	r1, r3, #7
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	430b      	orrs	r3, r1
 8003324:	4903      	ldr	r1, [pc, #12]	@ (8003334 <HAL_RCC_MCOConfig+0xc8>)
 8003326:	4313      	orrs	r3, r2
 8003328:	610b      	str	r3, [r1, #16]
}
 800332a:	bf00      	nop
 800332c:	3730      	adds	r7, #48	@ 0x30
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	58024400 	.word	0x58024400
 8003338:	58020000 	.word	0x58020000
 800333c:	58020800 	.word	0x58020800

08003340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003340:	b480      	push	{r7}
 8003342:	b089      	sub	sp, #36	@ 0x24
 8003344:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003346:	4bb3      	ldr	r3, [pc, #716]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800334e:	2b18      	cmp	r3, #24
 8003350:	f200 8155 	bhi.w	80035fe <HAL_RCC_GetSysClockFreq+0x2be>
 8003354:	a201      	add	r2, pc, #4	@ (adr r2, 800335c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335a:	bf00      	nop
 800335c:	080033c1 	.word	0x080033c1
 8003360:	080035ff 	.word	0x080035ff
 8003364:	080035ff 	.word	0x080035ff
 8003368:	080035ff 	.word	0x080035ff
 800336c:	080035ff 	.word	0x080035ff
 8003370:	080035ff 	.word	0x080035ff
 8003374:	080035ff 	.word	0x080035ff
 8003378:	080035ff 	.word	0x080035ff
 800337c:	080033e7 	.word	0x080033e7
 8003380:	080035ff 	.word	0x080035ff
 8003384:	080035ff 	.word	0x080035ff
 8003388:	080035ff 	.word	0x080035ff
 800338c:	080035ff 	.word	0x080035ff
 8003390:	080035ff 	.word	0x080035ff
 8003394:	080035ff 	.word	0x080035ff
 8003398:	080035ff 	.word	0x080035ff
 800339c:	080033ed 	.word	0x080033ed
 80033a0:	080035ff 	.word	0x080035ff
 80033a4:	080035ff 	.word	0x080035ff
 80033a8:	080035ff 	.word	0x080035ff
 80033ac:	080035ff 	.word	0x080035ff
 80033b0:	080035ff 	.word	0x080035ff
 80033b4:	080035ff 	.word	0x080035ff
 80033b8:	080035ff 	.word	0x080035ff
 80033bc:	080033f3 	.word	0x080033f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033c0:	4b94      	ldr	r3, [pc, #592]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0320 	and.w	r3, r3, #32
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d009      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033cc:	4b91      	ldr	r3, [pc, #580]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	08db      	lsrs	r3, r3, #3
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	4a90      	ldr	r2, [pc, #576]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
 80033dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80033de:	e111      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80033e0:	4b8d      	ldr	r3, [pc, #564]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033e2:	61bb      	str	r3, [r7, #24]
      break;
 80033e4:	e10e      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80033e6:	4b8d      	ldr	r3, [pc, #564]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033e8:	61bb      	str	r3, [r7, #24]
      break;
 80033ea:	e10b      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80033ec:	4b8c      	ldr	r3, [pc, #560]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80033ee:	61bb      	str	r3, [r7, #24]
      break;
 80033f0:	e108      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033f2:	4b88      	ldr	r3, [pc, #544]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80033fc:	4b85      	ldr	r3, [pc, #532]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003406:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003408:	4b82      	ldr	r3, [pc, #520]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800340a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003412:	4b80      	ldr	r3, [pc, #512]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003416:	08db      	lsrs	r3, r3, #3
 8003418:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	fb02 f303 	mul.w	r3, r2, r3
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80e1 	beq.w	80035f8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b02      	cmp	r3, #2
 800343a:	f000 8083 	beq.w	8003544 <HAL_RCC_GetSysClockFreq+0x204>
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2b02      	cmp	r3, #2
 8003442:	f200 80a1 	bhi.w	8003588 <HAL_RCC_GetSysClockFreq+0x248>
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0x114>
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d056      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003452:	e099      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003454:	4b6f      	ldr	r3, [pc, #444]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b00      	cmp	r3, #0
 800345e:	d02d      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003460:	4b6c      	ldr	r3, [pc, #432]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	08db      	lsrs	r3, r3, #3
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	4a6b      	ldr	r2, [pc, #428]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800346c:	fa22 f303 	lsr.w	r3, r2, r3
 8003470:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	ee07 3a90 	vmov	s15, r3
 8003478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	ee07 3a90 	vmov	s15, r3
 8003482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800348a:	4b62      	ldr	r3, [pc, #392]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003492:	ee07 3a90 	vmov	s15, r3
 8003496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800349a:	ed97 6a02 	vldr	s12, [r7, #8]
 800349e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003624 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80034ba:	e087      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	ee07 3a90 	vmov	s15, r3
 80034c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003628 <HAL_RCC_GetSysClockFreq+0x2e8>
 80034ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ce:	4b51      	ldr	r3, [pc, #324]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d6:	ee07 3a90 	vmov	s15, r3
 80034da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034de:	ed97 6a02 	vldr	s12, [r7, #8]
 80034e2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003624 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034fe:	e065      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	ee07 3a90 	vmov	s15, r3
 8003506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800350a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800362c <HAL_RCC_GetSysClockFreq+0x2ec>
 800350e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003512:	4b40      	ldr	r3, [pc, #256]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800351a:	ee07 3a90 	vmov	s15, r3
 800351e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003522:	ed97 6a02 	vldr	s12, [r7, #8]
 8003526:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003624 <HAL_RCC_GetSysClockFreq+0x2e4>
 800352a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800352e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800353a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800353e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003542:	e043      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	ee07 3a90 	vmov	s15, r3
 800354a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800354e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003630 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003556:	4b2f      	ldr	r3, [pc, #188]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800355e:	ee07 3a90 	vmov	s15, r3
 8003562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003566:	ed97 6a02 	vldr	s12, [r7, #8]
 800356a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003624 <HAL_RCC_GetSysClockFreq+0x2e4>
 800356e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800357a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800357e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003582:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003586:	e021      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	ee07 3a90 	vmov	s15, r3
 800358e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003592:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800362c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800359a:	4b1e      	ldr	r3, [pc, #120]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a2:	ee07 3a90 	vmov	s15, r3
 80035a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80035ae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003624 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80035cc:	4b11      	ldr	r3, [pc, #68]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d0:	0a5b      	lsrs	r3, r3, #9
 80035d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035d6:	3301      	adds	r3, #1
 80035d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	ee07 3a90 	vmov	s15, r3
 80035e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80035e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035f0:	ee17 3a90 	vmov	r3, s15
 80035f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80035f6:	e005      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	61bb      	str	r3, [r7, #24]
      break;
 80035fc:	e002      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80035fe:	4b07      	ldr	r3, [pc, #28]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003600:	61bb      	str	r3, [r7, #24]
      break;
 8003602:	bf00      	nop
  }

  return sysclockfreq;
 8003604:	69bb      	ldr	r3, [r7, #24]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3724      	adds	r7, #36	@ 0x24
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	58024400 	.word	0x58024400
 8003618:	03d09000 	.word	0x03d09000
 800361c:	003d0900 	.word	0x003d0900
 8003620:	017d7840 	.word	0x017d7840
 8003624:	46000000 	.word	0x46000000
 8003628:	4c742400 	.word	0x4c742400
 800362c:	4a742400 	.word	0x4a742400
 8003630:	4bbebc20 	.word	0x4bbebc20

08003634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800363a:	f7ff fe81 	bl	8003340 <HAL_RCC_GetSysClockFreq>
 800363e:	4602      	mov	r2, r0
 8003640:	4b10      	ldr	r3, [pc, #64]	@ (8003684 <HAL_RCC_GetHCLKFreq+0x50>)
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	0a1b      	lsrs	r3, r3, #8
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	490f      	ldr	r1, [pc, #60]	@ (8003688 <HAL_RCC_GetHCLKFreq+0x54>)
 800364c:	5ccb      	ldrb	r3, [r1, r3]
 800364e:	f003 031f 	and.w	r3, r3, #31
 8003652:	fa22 f303 	lsr.w	r3, r2, r3
 8003656:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003658:	4b0a      	ldr	r3, [pc, #40]	@ (8003684 <HAL_RCC_GetHCLKFreq+0x50>)
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	4a09      	ldr	r2, [pc, #36]	@ (8003688 <HAL_RCC_GetHCLKFreq+0x54>)
 8003662:	5cd3      	ldrb	r3, [r2, r3]
 8003664:	f003 031f 	and.w	r3, r3, #31
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	fa22 f303 	lsr.w	r3, r2, r3
 800366e:	4a07      	ldr	r2, [pc, #28]	@ (800368c <HAL_RCC_GetHCLKFreq+0x58>)
 8003670:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003672:	4a07      	ldr	r2, [pc, #28]	@ (8003690 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003678:	4b04      	ldr	r3, [pc, #16]	@ (800368c <HAL_RCC_GetHCLKFreq+0x58>)
 800367a:	681b      	ldr	r3, [r3, #0]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	58024400 	.word	0x58024400
 8003688:	08009858 	.word	0x08009858
 800368c:	24000004 	.word	0x24000004
 8003690:	24000000 	.word	0x24000000

08003694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003698:	f7ff ffcc 	bl	8003634 <HAL_RCC_GetHCLKFreq>
 800369c:	4602      	mov	r2, r0
 800369e:	4b06      	ldr	r3, [pc, #24]	@ (80036b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	091b      	lsrs	r3, r3, #4
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	4904      	ldr	r1, [pc, #16]	@ (80036bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80036aa:	5ccb      	ldrb	r3, [r1, r3]
 80036ac:	f003 031f 	and.w	r3, r3, #31
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	58024400 	.word	0x58024400
 80036bc:	08009858 	.word	0x08009858

080036c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80036c4:	f7ff ffb6 	bl	8003634 <HAL_RCC_GetHCLKFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b06      	ldr	r3, [pc, #24]	@ (80036e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	0a1b      	lsrs	r3, r3, #8
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	4904      	ldr	r1, [pc, #16]	@ (80036e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	f003 031f 	and.w	r3, r3, #31
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	58024400 	.word	0x58024400
 80036e8:	08009858 	.word	0x08009858

080036ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	223f      	movs	r2, #63	@ 0x3f
 80036fa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003768 <HAL_RCC_GetClockConfig+0x7c>)
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	f003 0207 	and.w	r2, r3, #7
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003708:	4b17      	ldr	r3, [pc, #92]	@ (8003768 <HAL_RCC_GetClockConfig+0x7c>)
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003714:	4b14      	ldr	r3, [pc, #80]	@ (8003768 <HAL_RCC_GetClockConfig+0x7c>)
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	f003 020f 	and.w	r2, r3, #15
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003720:	4b11      	ldr	r3, [pc, #68]	@ (8003768 <HAL_RCC_GetClockConfig+0x7c>)
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800372c:	4b0e      	ldr	r3, [pc, #56]	@ (8003768 <HAL_RCC_GetClockConfig+0x7c>)
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003738:	4b0b      	ldr	r3, [pc, #44]	@ (8003768 <HAL_RCC_GetClockConfig+0x7c>)
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003744:	4b08      	ldr	r3, [pc, #32]	@ (8003768 <HAL_RCC_GetClockConfig+0x7c>)
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003750:	4b06      	ldr	r3, [pc, #24]	@ (800376c <HAL_RCC_GetClockConfig+0x80>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 020f 	and.w	r2, r3, #15
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	601a      	str	r2, [r3, #0]
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	58024400 	.word	0x58024400
 800376c:	52002000 	.word	0x52002000

08003770 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003774:	b0cc      	sub	sp, #304	@ 0x130
 8003776:	af00      	add	r7, sp, #0
 8003778:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800377c:	2300      	movs	r3, #0
 800377e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003782:	2300      	movs	r3, #0
 8003784:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003788:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003790:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003794:	2500      	movs	r5, #0
 8003796:	ea54 0305 	orrs.w	r3, r4, r5
 800379a:	d049      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800379c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037a6:	d02f      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80037a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037ac:	d828      	bhi.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037b2:	d01a      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80037b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037b8:	d822      	bhi.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80037be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037c2:	d007      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037c4:	e01c      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c6:	4bb8      	ldr	r3, [pc, #736]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ca:	4ab7      	ldr	r2, [pc, #732]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037d2:	e01a      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037d8:	3308      	adds	r3, #8
 80037da:	2102      	movs	r1, #2
 80037dc:	4618      	mov	r0, r3
 80037de:	f001 fccf 	bl	8005180 <RCCEx_PLL2_Config>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037e8:	e00f      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037ee:	3328      	adds	r3, #40	@ 0x28
 80037f0:	2102      	movs	r1, #2
 80037f2:	4618      	mov	r0, r3
 80037f4:	f001 fd76 	bl	80052e4 <RCCEx_PLL3_Config>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037fe:	e004      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003806:	e000      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800380a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10a      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003812:	4ba5      	ldr	r3, [pc, #660]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003816:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800381a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800381e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003820:	4aa1      	ldr	r2, [pc, #644]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003822:	430b      	orrs	r3, r1
 8003824:	6513      	str	r3, [r2, #80]	@ 0x50
 8003826:	e003      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003828:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800382c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003830:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003838:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800383c:	f04f 0900 	mov.w	r9, #0
 8003840:	ea58 0309 	orrs.w	r3, r8, r9
 8003844:	d047      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003846:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800384a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384c:	2b04      	cmp	r3, #4
 800384e:	d82a      	bhi.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003850:	a201      	add	r2, pc, #4	@ (adr r2, 8003858 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003856:	bf00      	nop
 8003858:	0800386d 	.word	0x0800386d
 800385c:	0800387b 	.word	0x0800387b
 8003860:	08003891 	.word	0x08003891
 8003864:	080038af 	.word	0x080038af
 8003868:	080038af 	.word	0x080038af
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800386c:	4b8e      	ldr	r3, [pc, #568]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800386e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003870:	4a8d      	ldr	r2, [pc, #564]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003872:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003876:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003878:	e01a      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800387a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800387e:	3308      	adds	r3, #8
 8003880:	2100      	movs	r1, #0
 8003882:	4618      	mov	r0, r3
 8003884:	f001 fc7c 	bl	8005180 <RCCEx_PLL2_Config>
 8003888:	4603      	mov	r3, r0
 800388a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800388e:	e00f      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003890:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003894:	3328      	adds	r3, #40	@ 0x28
 8003896:	2100      	movs	r1, #0
 8003898:	4618      	mov	r0, r3
 800389a:	f001 fd23 	bl	80052e4 <RCCEx_PLL3_Config>
 800389e:	4603      	mov	r3, r0
 80038a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038a4:	e004      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80038ac:	e000      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80038ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10a      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038b8:	4b7b      	ldr	r3, [pc, #492]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038bc:	f023 0107 	bic.w	r1, r3, #7
 80038c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c6:	4a78      	ldr	r2, [pc, #480]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038c8:	430b      	orrs	r3, r1
 80038ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80038cc:	e003      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80038d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038de:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80038e2:	f04f 0b00 	mov.w	fp, #0
 80038e6:	ea5a 030b 	orrs.w	r3, sl, fp
 80038ea:	d04c      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80038ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038f6:	d030      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80038f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038fc:	d829      	bhi.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003900:	d02d      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003902:	2bc0      	cmp	r3, #192	@ 0xc0
 8003904:	d825      	bhi.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003906:	2b80      	cmp	r3, #128	@ 0x80
 8003908:	d018      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800390a:	2b80      	cmp	r3, #128	@ 0x80
 800390c:	d821      	bhi.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003912:	2b40      	cmp	r3, #64	@ 0x40
 8003914:	d007      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003916:	e01c      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003918:	4b63      	ldr	r3, [pc, #396]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800391a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391c:	4a62      	ldr	r2, [pc, #392]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800391e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003924:	e01c      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003926:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800392a:	3308      	adds	r3, #8
 800392c:	2100      	movs	r1, #0
 800392e:	4618      	mov	r0, r3
 8003930:	f001 fc26 	bl	8005180 <RCCEx_PLL2_Config>
 8003934:	4603      	mov	r3, r0
 8003936:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800393a:	e011      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800393c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003940:	3328      	adds	r3, #40	@ 0x28
 8003942:	2100      	movs	r1, #0
 8003944:	4618      	mov	r0, r3
 8003946:	f001 fccd 	bl	80052e4 <RCCEx_PLL3_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003950:	e006      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003958:	e002      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800395a:	bf00      	nop
 800395c:	e000      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800395e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003960:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10a      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003968:	4b4f      	ldr	r3, [pc, #316]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800396a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800396c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003970:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003976:	4a4c      	ldr	r2, [pc, #304]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003978:	430b      	orrs	r3, r1
 800397a:	6513      	str	r3, [r2, #80]	@ 0x50
 800397c:	e003      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003982:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003986:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800398a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003992:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003996:	2300      	movs	r3, #0
 8003998:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800399c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80039a0:	460b      	mov	r3, r1
 80039a2:	4313      	orrs	r3, r2
 80039a4:	d053      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80039a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80039ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039b2:	d035      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80039b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039b8:	d82e      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80039be:	d031      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80039c0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80039c4:	d828      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039ca:	d01a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80039cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039d0:	d822      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80039d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039da:	d007      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80039dc:	e01c      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039de:	4b32      	ldr	r3, [pc, #200]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e2:	4a31      	ldr	r2, [pc, #196]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039ea:	e01c      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039f0:	3308      	adds	r3, #8
 80039f2:	2100      	movs	r1, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f001 fbc3 	bl	8005180 <RCCEx_PLL2_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a00:	e011      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a06:	3328      	adds	r3, #40	@ 0x28
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f001 fc6a 	bl	80052e4 <RCCEx_PLL3_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a16:	e006      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003a1e:	e002      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a20:	bf00      	nop
 8003a22:	e000      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a26:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10b      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a32:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003a36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a3e:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a40:	430b      	orrs	r3, r1
 8003a42:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a44:	e003      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a4a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a56:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003a5a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003a64:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	d056      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003a6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a7a:	d038      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003a7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a80:	d831      	bhi.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a86:	d034      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003a88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a8c:	d82b      	bhi.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a92:	d01d      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003a94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a98:	d825      	bhi.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d006      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003a9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003aa2:	d00a      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003aa4:	e01f      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003aa6:	bf00      	nop
 8003aa8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aac:	4ba2      	ldr	r3, [pc, #648]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab0:	4aa1      	ldr	r2, [pc, #644]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ab2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ab8:	e01c      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003aba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003abe:	3308      	adds	r3, #8
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f001 fb5c 	bl	8005180 <RCCEx_PLL2_Config>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003ace:	e011      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ad0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ad4:	3328      	adds	r3, #40	@ 0x28
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f001 fc03 	bl	80052e4 <RCCEx_PLL3_Config>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ae4:	e006      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003aec:	e002      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003aee:	bf00      	nop
 8003af0:	e000      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003af2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10b      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003afc:	4b8e      	ldr	r3, [pc, #568]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b00:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003b04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b0c:	4a8a      	ldr	r2, [pc, #552]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b12:	e003      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b18:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b24:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003b28:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003b32:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003b36:	460b      	mov	r3, r1
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	d03a      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003b3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b42:	2b30      	cmp	r3, #48	@ 0x30
 8003b44:	d01f      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003b46:	2b30      	cmp	r3, #48	@ 0x30
 8003b48:	d819      	bhi.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b4a:	2b20      	cmp	r3, #32
 8003b4c:	d00c      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d815      	bhi.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d019      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003b56:	2b10      	cmp	r3, #16
 8003b58:	d111      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b5a:	4b77      	ldr	r3, [pc, #476]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5e:	4a76      	ldr	r2, [pc, #472]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b66:	e011      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b6c:	3308      	adds	r3, #8
 8003b6e:	2102      	movs	r1, #2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f001 fb05 	bl	8005180 <RCCEx_PLL2_Config>
 8003b76:	4603      	mov	r3, r0
 8003b78:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b7c:	e006      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003b84:	e002      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003b86:	bf00      	nop
 8003b88:	e000      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b8c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10a      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b94:	4b68      	ldr	r3, [pc, #416]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b98:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003b9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ba2:	4a65      	ldr	r2, [pc, #404]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ba8:	e003      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003baa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003bae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003bb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003bbe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003bc8:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	d051      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003bd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bdc:	d035      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003bde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003be2:	d82e      	bhi.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003be4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003be8:	d031      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003bea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003bee:	d828      	bhi.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003bf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bf4:	d01a      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003bf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bfa:	d822      	bhi.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003c00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c04:	d007      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003c06:	e01c      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c08:	4b4b      	ldr	r3, [pc, #300]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0c:	4a4a      	ldr	r2, [pc, #296]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c14:	e01c      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c1a:	3308      	adds	r3, #8
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f001 faae 	bl	8005180 <RCCEx_PLL2_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c2a:	e011      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c30:	3328      	adds	r3, #40	@ 0x28
 8003c32:	2100      	movs	r1, #0
 8003c34:	4618      	mov	r0, r3
 8003c36:	f001 fb55 	bl	80052e4 <RCCEx_PLL3_Config>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c40:	e006      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003c48:	e002      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c4a:	bf00      	nop
 8003c4c:	e000      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c50:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10a      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c58:	4b37      	ldr	r3, [pc, #220]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c5c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003c60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c66:	4a34      	ldr	r2, [pc, #208]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c6c:	e003      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c72:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003c82:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003c86:	2300      	movs	r3, #0
 8003c88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003c8c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4313      	orrs	r3, r2
 8003c94:	d056      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003c96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ca0:	d033      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003ca2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ca6:	d82c      	bhi.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ca8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cac:	d02f      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003cae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cb2:	d826      	bhi.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cb4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cb8:	d02b      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003cba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cbe:	d820      	bhi.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003cc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cc4:	d012      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003cc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cca:	d81a      	bhi.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d022      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cd4:	d115      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cda:	3308      	adds	r3, #8
 8003cdc:	2101      	movs	r1, #1
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f001 fa4e 	bl	8005180 <RCCEx_PLL2_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003cea:	e015      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cf0:	3328      	adds	r3, #40	@ 0x28
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f001 faf5 	bl	80052e4 <RCCEx_PLL3_Config>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d00:	e00a      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003d08:	e006      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d0a:	bf00      	nop
 8003d0c:	e004      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d0e:	bf00      	nop
 8003d10:	e002      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d12:	bf00      	nop
 8003d14:	e000      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d18:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10d      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d20:	4b05      	ldr	r3, [pc, #20]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d24:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003d28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d2e:	4a02      	ldr	r2, [pc, #8]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d30:	430b      	orrs	r3, r1
 8003d32:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d34:	e006      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003d36:	bf00      	nop
 8003d38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d40:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003d50:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d54:	2300      	movs	r3, #0
 8003d56:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003d5a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4313      	orrs	r3, r2
 8003d62:	d055      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003d64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d70:	d033      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003d72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d76:	d82c      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d7c:	d02f      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d82:	d826      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d88:	d02b      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003d8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d8e:	d820      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d94:	d012      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003d96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d9a:	d81a      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d022      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003da0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003da4:	d115      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003da6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003daa:	3308      	adds	r3, #8
 8003dac:	2101      	movs	r1, #1
 8003dae:	4618      	mov	r0, r3
 8003db0:	f001 f9e6 	bl	8005180 <RCCEx_PLL2_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003dba:	e015      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dc0:	3328      	adds	r3, #40	@ 0x28
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f001 fa8d 	bl	80052e4 <RCCEx_PLL3_Config>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003dd0:	e00a      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003dd8:	e006      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003dda:	bf00      	nop
 8003ddc:	e004      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003dde:	bf00      	nop
 8003de0:	e002      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003de2:	bf00      	nop
 8003de4:	e000      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10b      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003df0:	4bb6      	ldr	r3, [pc, #728]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003df8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dfc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e00:	4ab2      	ldr	r2, [pc, #712]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003e02:	430b      	orrs	r3, r1
 8003e04:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e06:	e003      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e08:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e0c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003e10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e18:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e20:	2300      	movs	r3, #0
 8003e22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e26:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	d02a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8003e30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d011      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003e3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e3e:	d10a      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e44:	3308      	adds	r3, #8
 8003e46:	2101      	movs	r1, #1
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f001 f999 	bl	8005180 <RCCEx_PLL2_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8003e54:	e004      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003e5c:	e000      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8003e5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e60:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10a      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003e68:	4b98      	ldr	r3, [pc, #608]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e6c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8003e70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e76:	4a95      	ldr	r2, [pc, #596]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e7c:	e003      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e82:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003e92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e96:	2300      	movs	r3, #0
 8003e98:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003e9c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	d037      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003ea6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003eb0:	d00e      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8003eb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003eb6:	d816      	bhi.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d018      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8003ebc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ec0:	d111      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec2:	4b82      	ldr	r3, [pc, #520]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec6:	4a81      	ldr	r2, [pc, #516]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ecc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ece:	e00f      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ed0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ed4:	3308      	adds	r3, #8
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f001 f951 	bl	8005180 <RCCEx_PLL2_Config>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ee4:	e004      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003eec:	e000      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8003eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ef0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10a      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ef8:	4b74      	ldr	r3, [pc, #464]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003efc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003f00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f06:	4a71      	ldr	r2, [pc, #452]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f0c:	e003      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f12:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003f16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003f22:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f26:	2300      	movs	r3, #0
 8003f28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003f2c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4313      	orrs	r3, r2
 8003f34:	d03a      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003f36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d81d      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8003f40:	a201      	add	r2, pc, #4	@ (adr r2, 8003f48 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f46:	bf00      	nop
 8003f48:	08003f85 	.word	0x08003f85
 8003f4c:	08003f59 	.word	0x08003f59
 8003f50:	08003f67 	.word	0x08003f67
 8003f54:	08003f85 	.word	0x08003f85
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f58:	4b5c      	ldr	r3, [pc, #368]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5c:	4a5b      	ldr	r2, [pc, #364]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003f5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f64:	e00f      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	2102      	movs	r1, #2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f001 f906 	bl	8005180 <RCCEx_PLL2_Config>
 8003f74:	4603      	mov	r3, r0
 8003f76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f7a:	e004      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003f82:	e000      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8003f84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f86:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10a      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f8e:	4b4f      	ldr	r3, [pc, #316]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f92:	f023 0103 	bic.w	r1, r3, #3
 8003f96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f9c:	4a4b      	ldr	r2, [pc, #300]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003f9e:	430b      	orrs	r3, r1
 8003fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fa2:	e003      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003fa8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003fb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003fc2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f000 80a0 	beq.w	800410e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fce:	4b40      	ldr	r3, [pc, #256]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a3f      	ldr	r2, [pc, #252]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fda:	f7fd ffb7 	bl	8001f4c <HAL_GetTick>
 8003fde:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fe2:	e00b      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe4:	f7fd ffb2 	bl	8001f4c <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b64      	cmp	r3, #100	@ 0x64
 8003ff2:	d903      	bls.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003ffa:	e005      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ffc:	4b34      	ldr	r3, [pc, #208]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0ed      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8004008:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800400c:	2b00      	cmp	r3, #0
 800400e:	d17a      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004010:	4b2e      	ldr	r3, [pc, #184]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004012:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004014:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004018:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800401c:	4053      	eors	r3, r2
 800401e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004022:	2b00      	cmp	r3, #0
 8004024:	d015      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004026:	4b29      	ldr	r3, [pc, #164]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800402e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004032:	4b26      	ldr	r3, [pc, #152]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004036:	4a25      	ldr	r2, [pc, #148]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800403c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800403e:	4b23      	ldr	r3, [pc, #140]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004042:	4a22      	ldr	r2, [pc, #136]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004044:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004048:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800404a:	4a20      	ldr	r2, [pc, #128]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800404c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004050:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004052:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004056:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800405a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800405e:	d118      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004060:	f7fd ff74 	bl	8001f4c <HAL_GetTick>
 8004064:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004068:	e00d      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406a:	f7fd ff6f 	bl	8001f4c <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004074:	1ad2      	subs	r2, r2, r3
 8004076:	f241 3388 	movw	r3, #5000	@ 0x1388
 800407a:	429a      	cmp	r2, r3
 800407c:	d903      	bls.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8004084:	e005      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004086:	4b11      	ldr	r3, [pc, #68]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0eb      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8004092:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004096:	2b00      	cmp	r3, #0
 8004098:	d130      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800409a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800409e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80040a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040aa:	d115      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x968>
 80040ac:	4b07      	ldr	r3, [pc, #28]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80040b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80040bc:	091a      	lsrs	r2, r3, #4
 80040be:	4b05      	ldr	r3, [pc, #20]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	4a02      	ldr	r2, [pc, #8]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80040c4:	430b      	orrs	r3, r1
 80040c6:	6113      	str	r3, [r2, #16]
 80040c8:	e00c      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80040ca:	bf00      	nop
 80040cc:	58024400 	.word	0x58024400
 80040d0:	58024800 	.word	0x58024800
 80040d4:	00ffffcf 	.word	0x00ffffcf
 80040d8:	4bd4      	ldr	r3, [pc, #848]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	4ad3      	ldr	r2, [pc, #844]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80040de:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80040e2:	6113      	str	r3, [r2, #16]
 80040e4:	4bd1      	ldr	r3, [pc, #836]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80040e6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80040e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80040f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f4:	4acd      	ldr	r2, [pc, #820]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80040f6:	430b      	orrs	r3, r1
 80040f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80040fa:	e008      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004100:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8004104:	e003      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004106:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800410a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800410e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004116:	f002 0301 	and.w	r3, r2, #1
 800411a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800411e:	2300      	movs	r3, #0
 8004120:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004124:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004128:	460b      	mov	r3, r1
 800412a:	4313      	orrs	r3, r2
 800412c:	f000 808b 	beq.w	8004246 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004130:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004134:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004138:	2b28      	cmp	r3, #40	@ 0x28
 800413a:	d86b      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800413c:	a201      	add	r2, pc, #4	@ (adr r2, 8004144 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 800413e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004142:	bf00      	nop
 8004144:	0800421d 	.word	0x0800421d
 8004148:	08004215 	.word	0x08004215
 800414c:	08004215 	.word	0x08004215
 8004150:	08004215 	.word	0x08004215
 8004154:	08004215 	.word	0x08004215
 8004158:	08004215 	.word	0x08004215
 800415c:	08004215 	.word	0x08004215
 8004160:	08004215 	.word	0x08004215
 8004164:	080041e9 	.word	0x080041e9
 8004168:	08004215 	.word	0x08004215
 800416c:	08004215 	.word	0x08004215
 8004170:	08004215 	.word	0x08004215
 8004174:	08004215 	.word	0x08004215
 8004178:	08004215 	.word	0x08004215
 800417c:	08004215 	.word	0x08004215
 8004180:	08004215 	.word	0x08004215
 8004184:	080041ff 	.word	0x080041ff
 8004188:	08004215 	.word	0x08004215
 800418c:	08004215 	.word	0x08004215
 8004190:	08004215 	.word	0x08004215
 8004194:	08004215 	.word	0x08004215
 8004198:	08004215 	.word	0x08004215
 800419c:	08004215 	.word	0x08004215
 80041a0:	08004215 	.word	0x08004215
 80041a4:	0800421d 	.word	0x0800421d
 80041a8:	08004215 	.word	0x08004215
 80041ac:	08004215 	.word	0x08004215
 80041b0:	08004215 	.word	0x08004215
 80041b4:	08004215 	.word	0x08004215
 80041b8:	08004215 	.word	0x08004215
 80041bc:	08004215 	.word	0x08004215
 80041c0:	08004215 	.word	0x08004215
 80041c4:	0800421d 	.word	0x0800421d
 80041c8:	08004215 	.word	0x08004215
 80041cc:	08004215 	.word	0x08004215
 80041d0:	08004215 	.word	0x08004215
 80041d4:	08004215 	.word	0x08004215
 80041d8:	08004215 	.word	0x08004215
 80041dc:	08004215 	.word	0x08004215
 80041e0:	08004215 	.word	0x08004215
 80041e4:	0800421d 	.word	0x0800421d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041ec:	3308      	adds	r3, #8
 80041ee:	2101      	movs	r1, #1
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 ffc5 	bl	8005180 <RCCEx_PLL2_Config>
 80041f6:	4603      	mov	r3, r0
 80041f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041fc:	e00f      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004202:	3328      	adds	r3, #40	@ 0x28
 8004204:	2101      	movs	r1, #1
 8004206:	4618      	mov	r0, r3
 8004208:	f001 f86c 	bl	80052e4 <RCCEx_PLL3_Config>
 800420c:	4603      	mov	r3, r0
 800420e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004212:	e004      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800421a:	e000      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 800421c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800421e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10b      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004226:	4b81      	ldr	r3, [pc, #516]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800422e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004236:	4a7d      	ldr	r2, [pc, #500]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004238:	430b      	orrs	r3, r1
 800423a:	6553      	str	r3, [r2, #84]	@ 0x54
 800423c:	e003      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004242:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004246:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424e:	f002 0302 	and.w	r3, r2, #2
 8004252:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004256:	2300      	movs	r3, #0
 8004258:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800425c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004260:	460b      	mov	r3, r1
 8004262:	4313      	orrs	r3, r2
 8004264:	d042      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004266:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800426a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800426c:	2b05      	cmp	r3, #5
 800426e:	d825      	bhi.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8004270:	a201      	add	r2, pc, #4	@ (adr r2, 8004278 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8004272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004276:	bf00      	nop
 8004278:	080042c5 	.word	0x080042c5
 800427c:	08004291 	.word	0x08004291
 8004280:	080042a7 	.word	0x080042a7
 8004284:	080042c5 	.word	0x080042c5
 8004288:	080042c5 	.word	0x080042c5
 800428c:	080042c5 	.word	0x080042c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004290:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004294:	3308      	adds	r3, #8
 8004296:	2101      	movs	r1, #1
 8004298:	4618      	mov	r0, r3
 800429a:	f000 ff71 	bl	8005180 <RCCEx_PLL2_Config>
 800429e:	4603      	mov	r3, r0
 80042a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80042a4:	e00f      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042aa:	3328      	adds	r3, #40	@ 0x28
 80042ac:	2101      	movs	r1, #1
 80042ae:	4618      	mov	r0, r3
 80042b0:	f001 f818 	bl	80052e4 <RCCEx_PLL3_Config>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80042ba:	e004      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80042c2:	e000      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 80042c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10a      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80042ce:	4b57      	ldr	r3, [pc, #348]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80042d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d2:	f023 0107 	bic.w	r1, r3, #7
 80042d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042dc:	4a53      	ldr	r2, [pc, #332]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80042de:	430b      	orrs	r3, r1
 80042e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80042e2:	e003      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80042e8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f4:	f002 0304 	and.w	r3, r2, #4
 80042f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042fc:	2300      	movs	r3, #0
 80042fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004302:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004306:	460b      	mov	r3, r1
 8004308:	4313      	orrs	r3, r2
 800430a:	d044      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800430c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004310:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004314:	2b05      	cmp	r3, #5
 8004316:	d825      	bhi.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8004318:	a201      	add	r2, pc, #4	@ (adr r2, 8004320 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 800431a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431e:	bf00      	nop
 8004320:	0800436d 	.word	0x0800436d
 8004324:	08004339 	.word	0x08004339
 8004328:	0800434f 	.word	0x0800434f
 800432c:	0800436d 	.word	0x0800436d
 8004330:	0800436d 	.word	0x0800436d
 8004334:	0800436d 	.word	0x0800436d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004338:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800433c:	3308      	adds	r3, #8
 800433e:	2101      	movs	r1, #1
 8004340:	4618      	mov	r0, r3
 8004342:	f000 ff1d 	bl	8005180 <RCCEx_PLL2_Config>
 8004346:	4603      	mov	r3, r0
 8004348:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800434c:	e00f      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800434e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004352:	3328      	adds	r3, #40	@ 0x28
 8004354:	2101      	movs	r1, #1
 8004356:	4618      	mov	r0, r3
 8004358:	f000 ffc4 	bl	80052e4 <RCCEx_PLL3_Config>
 800435c:	4603      	mov	r3, r0
 800435e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004362:	e004      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800436a:	e000      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 800436c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800436e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10b      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004376:	4b2d      	ldr	r3, [pc, #180]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800437a:	f023 0107 	bic.w	r1, r3, #7
 800437e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004382:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004386:	4a29      	ldr	r2, [pc, #164]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004388:	430b      	orrs	r3, r1
 800438a:	6593      	str	r3, [r2, #88]	@ 0x58
 800438c:	e003      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004392:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004396:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800439a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439e:	f002 0320 	and.w	r3, r2, #32
 80043a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80043a6:	2300      	movs	r3, #0
 80043a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80043ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80043b0:	460b      	mov	r3, r1
 80043b2:	4313      	orrs	r3, r2
 80043b4:	d057      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80043b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043c2:	d035      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 80043c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043c8:	d82c      	bhi.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80043ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ce:	d031      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 80043d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043d4:	d826      	bhi.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80043d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80043da:	d02d      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80043dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80043e0:	d820      	bhi.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80043e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043e6:	d012      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 80043e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043ec:	d81a      	bhi.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d024      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80043f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043f6:	d115      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043fc:	3308      	adds	r3, #8
 80043fe:	2100      	movs	r1, #0
 8004400:	4618      	mov	r0, r3
 8004402:	f000 febd 	bl	8005180 <RCCEx_PLL2_Config>
 8004406:	4603      	mov	r3, r0
 8004408:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800440c:	e017      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800440e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004412:	3328      	adds	r3, #40	@ 0x28
 8004414:	2102      	movs	r1, #2
 8004416:	4618      	mov	r0, r3
 8004418:	f000 ff64 	bl	80052e4 <RCCEx_PLL3_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004422:	e00c      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800442a:	e008      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 800442c:	58024400 	.word	0x58024400
        break;
 8004430:	bf00      	nop
 8004432:	e004      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004434:	bf00      	nop
 8004436:	e002      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004438:	bf00      	nop
 800443a:	e000      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800443c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800443e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10b      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004446:	4bc2      	ldr	r3, [pc, #776]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800444a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800444e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004452:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004456:	4abe      	ldr	r2, [pc, #760]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004458:	430b      	orrs	r3, r1
 800445a:	6553      	str	r3, [r2, #84]	@ 0x54
 800445c:	e003      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004462:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004466:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800446a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004472:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004476:	2300      	movs	r3, #0
 8004478:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800447c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004480:	460b      	mov	r3, r1
 8004482:	4313      	orrs	r3, r2
 8004484:	d055      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004486:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800448a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800448e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004492:	d033      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8004494:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004498:	d82c      	bhi.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800449a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800449e:	d02f      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 80044a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044a4:	d826      	bhi.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80044a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044aa:	d02b      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 80044ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044b0:	d820      	bhi.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80044b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044b6:	d012      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 80044b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044bc:	d81a      	bhi.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d022      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 80044c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044c6:	d115      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044cc:	3308      	adds	r3, #8
 80044ce:	2100      	movs	r1, #0
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fe55 	bl	8005180 <RCCEx_PLL2_Config>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80044dc:	e015      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044e2:	3328      	adds	r3, #40	@ 0x28
 80044e4:	2102      	movs	r1, #2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fefc 	bl	80052e4 <RCCEx_PLL3_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80044f2:	e00a      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80044fa:	e006      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80044fc:	bf00      	nop
 80044fe:	e004      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004500:	bf00      	nop
 8004502:	e002      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004504:	bf00      	nop
 8004506:	e000      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800450a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10b      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004512:	4b8f      	ldr	r3, [pc, #572]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004516:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800451a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800451e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004522:	4a8b      	ldr	r2, [pc, #556]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004524:	430b      	orrs	r3, r1
 8004526:	6593      	str	r3, [r2, #88]	@ 0x58
 8004528:	e003      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800452e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004532:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453a:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800453e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004542:	2300      	movs	r3, #0
 8004544:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004548:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800454c:	460b      	mov	r3, r1
 800454e:	4313      	orrs	r3, r2
 8004550:	d055      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004552:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004556:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800455a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800455e:	d033      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004560:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004564:	d82c      	bhi.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004566:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800456a:	d02f      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800456c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004570:	d826      	bhi.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004572:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004576:	d02b      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004578:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800457c:	d820      	bhi.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800457e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004582:	d012      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8004584:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004588:	d81a      	bhi.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800458a:	2b00      	cmp	r3, #0
 800458c:	d022      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 800458e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004592:	d115      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004594:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004598:	3308      	adds	r3, #8
 800459a:	2100      	movs	r1, #0
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fdef 	bl	8005180 <RCCEx_PLL2_Config>
 80045a2:	4603      	mov	r3, r0
 80045a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80045a8:	e015      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045ae:	3328      	adds	r3, #40	@ 0x28
 80045b0:	2102      	movs	r1, #2
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 fe96 	bl	80052e4 <RCCEx_PLL3_Config>
 80045b8:	4603      	mov	r3, r0
 80045ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80045be:	e00a      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80045c6:	e006      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80045c8:	bf00      	nop
 80045ca:	e004      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80045cc:	bf00      	nop
 80045ce:	e002      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80045d0:	bf00      	nop
 80045d2:	e000      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80045d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10b      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80045de:	4b5c      	ldr	r3, [pc, #368]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e2:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80045e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80045ee:	4a58      	ldr	r2, [pc, #352]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045f0:	430b      	orrs	r3, r1
 80045f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80045f4:	e003      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80045fa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80045fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004606:	f002 0308 	and.w	r3, r2, #8
 800460a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800460e:	2300      	movs	r3, #0
 8004610:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004614:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004618:	460b      	mov	r3, r1
 800461a:	4313      	orrs	r3, r2
 800461c:	d01e      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800461e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800462a:	d10c      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800462c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004630:	3328      	adds	r3, #40	@ 0x28
 8004632:	2102      	movs	r1, #2
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fe55 	bl	80052e4 <RCCEx_PLL3_Config>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004646:	4b42      	ldr	r3, [pc, #264]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800464e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004656:	4a3e      	ldr	r2, [pc, #248]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004658:	430b      	orrs	r3, r1
 800465a:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800465c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004664:	f002 0310 	and.w	r3, r2, #16
 8004668:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800466c:	2300      	movs	r3, #0
 800466e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004672:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004676:	460b      	mov	r3, r1
 8004678:	4313      	orrs	r3, r2
 800467a:	d01e      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800467c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004680:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004684:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004688:	d10c      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800468a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800468e:	3328      	adds	r3, #40	@ 0x28
 8004690:	2102      	movs	r1, #2
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fe26 	bl	80052e4 <RCCEx_PLL3_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80046ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046b4:	4a26      	ldr	r2, [pc, #152]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046b6:	430b      	orrs	r3, r1
 80046b8:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80046c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046ca:	2300      	movs	r3, #0
 80046cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046d0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80046d4:	460b      	mov	r3, r1
 80046d6:	4313      	orrs	r3, r2
 80046d8:	d040      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80046da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80046e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046e6:	d022      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80046e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046ec:	d81b      	bhi.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80046f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046f6:	d00b      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80046f8:	e015      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046fe:	3308      	adds	r3, #8
 8004700:	2100      	movs	r1, #0
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fd3c 	bl	8005180 <RCCEx_PLL2_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800470e:	e00f      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004710:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004714:	3328      	adds	r3, #40	@ 0x28
 8004716:	2102      	movs	r1, #2
 8004718:	4618      	mov	r0, r3
 800471a:	f000 fde3 	bl	80052e4 <RCCEx_PLL3_Config>
 800471e:	4603      	mov	r3, r0
 8004720:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004724:	e004      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800472c:	e000      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800472e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004730:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10d      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004738:	4b05      	ldr	r3, [pc, #20]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800473a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800473c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004740:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004744:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004748:	4a01      	ldr	r2, [pc, #4]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800474a:	430b      	orrs	r3, r1
 800474c:	6593      	str	r3, [r2, #88]	@ 0x58
 800474e:	e005      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004750:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004754:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004758:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800475c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004764:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004768:	67bb      	str	r3, [r7, #120]	@ 0x78
 800476a:	2300      	movs	r3, #0
 800476c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800476e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004772:	460b      	mov	r3, r1
 8004774:	4313      	orrs	r3, r2
 8004776:	d03b      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004778:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800477c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004780:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004784:	d01f      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8004786:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800478a:	d818      	bhi.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x104e>
 800478c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004790:	d003      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8004792:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004796:	d007      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8004798:	e011      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800479a:	4b64      	ldr	r3, [pc, #400]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800479c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479e:	4a63      	ldr	r2, [pc, #396]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80047a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80047a6:	e00f      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047ac:	3328      	adds	r3, #40	@ 0x28
 80047ae:	2101      	movs	r1, #1
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 fd97 	bl	80052e4 <RCCEx_PLL3_Config>
 80047b6:	4603      	mov	r3, r0
 80047b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 80047bc:	e004      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80047c4:	e000      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80047c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10b      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047d0:	4b56      	ldr	r3, [pc, #344]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80047d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80047d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047e0:	4a52      	ldr	r2, [pc, #328]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80047e2:	430b      	orrs	r3, r1
 80047e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80047e6:	e003      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80047ec:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80047f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80047fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80047fe:	2300      	movs	r3, #0
 8004800:	677b      	str	r3, [r7, #116]	@ 0x74
 8004802:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004806:	460b      	mov	r3, r1
 8004808:	4313      	orrs	r3, r2
 800480a:	d031      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800480c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8004816:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800481a:	d007      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800481c:	e011      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800481e:	4b43      	ldr	r3, [pc, #268]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004822:	4a42      	ldr	r2, [pc, #264]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004828:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800482a:	e00e      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800482c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004830:	3308      	adds	r3, #8
 8004832:	2102      	movs	r1, #2
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fca3 	bl	8005180 <RCCEx_PLL2_Config>
 800483a:	4603      	mov	r3, r0
 800483c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004840:	e003      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800484a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10a      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004852:	4b36      	ldr	r3, [pc, #216]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004856:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800485a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800485e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004860:	4a32      	ldr	r2, [pc, #200]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004862:	430b      	orrs	r3, r1
 8004864:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004866:	e003      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004868:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800486c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004870:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004878:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800487c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800487e:	2300      	movs	r3, #0
 8004880:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004882:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004886:	460b      	mov	r3, r1
 8004888:	4313      	orrs	r3, r2
 800488a:	d00c      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800488c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004890:	3328      	adds	r3, #40	@ 0x28
 8004892:	2102      	movs	r1, #2
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fd25 	bl	80052e4 <RCCEx_PLL3_Config>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80048a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80048b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80048b4:	2300      	movs	r3, #0
 80048b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80048b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80048bc:	460b      	mov	r3, r1
 80048be:	4313      	orrs	r3, r2
 80048c0:	d03a      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 80048c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048ce:	d018      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80048d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048d4:	d811      	bhi.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80048d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048da:	d014      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80048dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048e0:	d80b      	bhi.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d011      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80048e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048ea:	d106      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ec:	4b0f      	ldr	r3, [pc, #60]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80048ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f0:	4a0e      	ldr	r2, [pc, #56]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80048f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80048f8:	e008      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004900:	e004      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004902:	bf00      	nop
 8004904:	e002      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004906:	bf00      	nop
 8004908:	e000      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800490a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800490c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10d      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004914:	4b05      	ldr	r3, [pc, #20]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004918:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800491c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004920:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004924:	4a01      	ldr	r2, [pc, #4]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004926:	430b      	orrs	r3, r1
 8004928:	6553      	str	r3, [r2, #84]	@ 0x54
 800492a:	e005      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 800492c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004930:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004934:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004938:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004944:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004946:	2300      	movs	r3, #0
 8004948:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800494a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800494e:	460b      	mov	r3, r1
 8004950:	4313      	orrs	r3, r2
 8004952:	d009      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004954:	4baa      	ldr	r3, [pc, #680]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004958:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800495c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004960:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004962:	4aa7      	ldr	r2, [pc, #668]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004964:	430b      	orrs	r3, r1
 8004966:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004968:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800496c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004970:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004974:	653b      	str	r3, [r7, #80]	@ 0x50
 8004976:	2300      	movs	r3, #0
 8004978:	657b      	str	r3, [r7, #84]	@ 0x54
 800497a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800497e:	460b      	mov	r3, r1
 8004980:	4313      	orrs	r3, r2
 8004982:	d00a      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004984:	4b9e      	ldr	r3, [pc, #632]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800498c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004990:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004994:	4a9a      	ldr	r2, [pc, #616]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004996:	430b      	orrs	r3, r1
 8004998:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800499a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800499e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80049a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049a8:	2300      	movs	r3, #0
 80049aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049ac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80049b0:	460b      	mov	r3, r1
 80049b2:	4313      	orrs	r3, r2
 80049b4:	d009      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049b6:	4b92      	ldr	r3, [pc, #584]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80049b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ba:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80049be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c4:	4a8e      	ldr	r2, [pc, #568]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80049c6:	430b      	orrs	r3, r1
 80049c8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80049ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80049d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80049d8:	2300      	movs	r3, #0
 80049da:	647b      	str	r3, [r7, #68]	@ 0x44
 80049dc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80049e0:	460b      	mov	r3, r1
 80049e2:	4313      	orrs	r3, r2
 80049e4:	d00e      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049e6:	4b86      	ldr	r3, [pc, #536]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	4a85      	ldr	r2, [pc, #532]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80049ec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80049f0:	6113      	str	r3, [r2, #16]
 80049f2:	4b83      	ldr	r3, [pc, #524]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80049f4:	6919      	ldr	r1, [r3, #16]
 80049f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049fa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80049fe:	4a80      	ldr	r2, [pc, #512]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004a00:	430b      	orrs	r3, r1
 8004a02:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004a10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a12:	2300      	movs	r3, #0
 8004a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a16:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	d009      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a20:	4b77      	ldr	r3, [pc, #476]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a24:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004a28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a2e:	4a74      	ldr	r2, [pc, #464]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004a30:	430b      	orrs	r3, r1
 8004a32:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004a40:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a42:	2300      	movs	r3, #0
 8004a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a46:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	d00a      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a50:	4b6b      	ldr	r3, [pc, #428]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a54:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004a58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a60:	4a67      	ldr	r2, [pc, #412]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004a62:	430b      	orrs	r3, r1
 8004a64:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004a66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6e:	2100      	movs	r1, #0
 8004a70:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a78:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	d011      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a86:	3308      	adds	r3, #8
 8004a88:	2100      	movs	r1, #0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fb78 	bl	8005180 <RCCEx_PLL2_Config>
 8004a90:	4603      	mov	r3, r0
 8004a92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004a96:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004aa2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004aa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aae:	2100      	movs	r1, #0
 8004ab0:	6239      	str	r1, [r7, #32]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ab8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004abc:	460b      	mov	r3, r1
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	d011      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ac2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ac6:	3308      	adds	r3, #8
 8004ac8:	2101      	movs	r1, #1
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fb58 	bl	8005180 <RCCEx_PLL2_Config>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004ad6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ade:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004ae2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004ae6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aee:	2100      	movs	r1, #0
 8004af0:	61b9      	str	r1, [r7, #24]
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	61fb      	str	r3, [r7, #28]
 8004af8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004afc:	460b      	mov	r3, r1
 8004afe:	4313      	orrs	r3, r2
 8004b00:	d011      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b06:	3308      	adds	r3, #8
 8004b08:	2102      	movs	r1, #2
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fb38 	bl	8005180 <RCCEx_PLL2_Config>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004b16:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b22:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004b26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2e:	2100      	movs	r1, #0
 8004b30:	6139      	str	r1, [r7, #16]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	d011      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b46:	3328      	adds	r3, #40	@ 0x28
 8004b48:	2100      	movs	r1, #0
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 fbca 	bl	80052e4 <RCCEx_PLL3_Config>
 8004b50:	4603      	mov	r3, r0
 8004b52:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8004b56:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b5e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b62:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004b66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	2100      	movs	r1, #0
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	f003 0310 	and.w	r3, r3, #16
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	d011      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b86:	3328      	adds	r3, #40	@ 0x28
 8004b88:	2101      	movs	r1, #1
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 fbaa 	bl	80052e4 <RCCEx_PLL3_Config>
 8004b90:	4603      	mov	r3, r0
 8004b92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004b96:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b9e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004ba2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004ba6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	2100      	movs	r1, #0
 8004bb0:	6039      	str	r1, [r7, #0]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	607b      	str	r3, [r7, #4]
 8004bb8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	d011      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bc6:	3328      	adds	r3, #40	@ 0x28
 8004bc8:	2102      	movs	r1, #2
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 fb8a 	bl	80052e4 <RCCEx_PLL3_Config>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004bd6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bde:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004be2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8004be6:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e000      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c00:	58024400 	.word	0x58024400

08004c04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004c08:	f7fe fd14 	bl	8003634 <HAL_RCC_GetHCLKFreq>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	4b06      	ldr	r3, [pc, #24]	@ (8004c28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	091b      	lsrs	r3, r3, #4
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	4904      	ldr	r1, [pc, #16]	@ (8004c2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004c1a:	5ccb      	ldrb	r3, [r1, r3]
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	58024400 	.word	0x58024400
 8004c2c:	08009858 	.word	0x08009858

08004c30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b089      	sub	sp, #36	@ 0x24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c38:	4ba1      	ldr	r3, [pc, #644]	@ (8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3c:	f003 0303 	and.w	r3, r3, #3
 8004c40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004c42:	4b9f      	ldr	r3, [pc, #636]	@ (8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c46:	0b1b      	lsrs	r3, r3, #12
 8004c48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004c4e:	4b9c      	ldr	r3, [pc, #624]	@ (8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c52:	091b      	lsrs	r3, r3, #4
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004c5a:	4b99      	ldr	r3, [pc, #612]	@ (8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5e:	08db      	lsrs	r3, r3, #3
 8004c60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	fb02 f303 	mul.w	r3, r2, r3
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 8111 	beq.w	8004ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	f000 8083 	beq.w	8004d8c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	f200 80a1 	bhi.w	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d056      	beq.n	8004d48 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004c9a:	e099      	b.n	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c9c:	4b88      	ldr	r3, [pc, #544]	@ (8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d02d      	beq.n	8004d04 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ca8:	4b85      	ldr	r3, [pc, #532]	@ (8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	08db      	lsrs	r3, r3, #3
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	4a84      	ldr	r2, [pc, #528]	@ (8004ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	ee07 3a90 	vmov	s15, r3
 8004cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	ee07 3a90 	vmov	s15, r3
 8004cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cd2:	4b7b      	ldr	r3, [pc, #492]	@ (8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ce6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d02:	e087      	b.n	8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	ee07 3a90 	vmov	s15, r3
 8004d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004ecc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d16:	4b6a      	ldr	r3, [pc, #424]	@ (8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d46:	e065      	b.n	8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d5a:	4b59      	ldr	r3, [pc, #356]	@ (8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d8a:	e043      	b.n	8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d9e:	4b48      	ldr	r3, [pc, #288]	@ (8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004db2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dce:	e021      	b.n	8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004de2:	4b37      	ldr	r3, [pc, #220]	@ (8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dea:	ee07 3a90 	vmov	s15, r3
 8004dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004df6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e12:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004e14:	4b2a      	ldr	r3, [pc, #168]	@ (8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e18:	0a5b      	lsrs	r3, r3, #9
 8004e1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e3a:	ee17 2a90 	vmov	r2, s15
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004e42:	4b1f      	ldr	r3, [pc, #124]	@ (8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e46:	0c1b      	lsrs	r3, r3, #16
 8004e48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e4c:	ee07 3a90 	vmov	s15, r3
 8004e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e68:	ee17 2a90 	vmov	r2, s15
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004e70:	4b13      	ldr	r3, [pc, #76]	@ (8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e74:	0e1b      	lsrs	r3, r3, #24
 8004e76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e96:	ee17 2a90 	vmov	r2, s15
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	609a      	str	r2, [r3, #8]
}
 8004eb2:	bf00      	nop
 8004eb4:	3724      	adds	r7, #36	@ 0x24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	58024400 	.word	0x58024400
 8004ec4:	03d09000 	.word	0x03d09000
 8004ec8:	46000000 	.word	0x46000000
 8004ecc:	4c742400 	.word	0x4c742400
 8004ed0:	4a742400 	.word	0x4a742400
 8004ed4:	4bbebc20 	.word	0x4bbebc20

08004ed8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b089      	sub	sp, #36	@ 0x24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ee0:	4ba1      	ldr	r3, [pc, #644]	@ (8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee4:	f003 0303 	and.w	r3, r3, #3
 8004ee8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004eea:	4b9f      	ldr	r3, [pc, #636]	@ (8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eee:	0d1b      	lsrs	r3, r3, #20
 8004ef0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ef4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ef6:	4b9c      	ldr	r3, [pc, #624]	@ (8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efa:	0a1b      	lsrs	r3, r3, #8
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004f02:	4b99      	ldr	r3, [pc, #612]	@ (8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f06:	08db      	lsrs	r3, r3, #3
 8004f08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	fb02 f303 	mul.w	r3, r2, r3
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 8111 	beq.w	8005148 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	f000 8083 	beq.w	8005034 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	f200 80a1 	bhi.w	8005078 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d056      	beq.n	8004ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004f42:	e099      	b.n	8005078 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f44:	4b88      	ldr	r3, [pc, #544]	@ (8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d02d      	beq.n	8004fac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f50:	4b85      	ldr	r3, [pc, #532]	@ (8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	08db      	lsrs	r3, r3, #3
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	4a84      	ldr	r2, [pc, #528]	@ (800516c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f60:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	ee07 3a90 	vmov	s15, r3
 8004f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f7a:	4b7b      	ldr	r3, [pc, #492]	@ (8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004faa:	e087      	b.n	80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	ee07 3a90 	vmov	s15, r3
 8004fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005174 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fbe:	4b6a      	ldr	r3, [pc, #424]	@ (8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fd2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fee:	e065      	b.n	80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	ee07 3a90 	vmov	s15, r3
 8004ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ffa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005178 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005002:	4b59      	ldr	r3, [pc, #356]	@ (8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800500a:	ee07 3a90 	vmov	s15, r3
 800500e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005012:	ed97 6a03 	vldr	s12, [r7, #12]
 8005016:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800501a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800501e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800502a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800502e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005032:	e043      	b.n	80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	ee07 3a90 	vmov	s15, r3
 800503a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800503e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800517c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005046:	4b48      	ldr	r3, [pc, #288]	@ (8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504e:	ee07 3a90 	vmov	s15, r3
 8005052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005056:	ed97 6a03 	vldr	s12, [r7, #12]
 800505a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800505e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800506a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800506e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005076:	e021      	b.n	80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	ee07 3a90 	vmov	s15, r3
 800507e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005082:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005178 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800508a:	4b37      	ldr	r3, [pc, #220]	@ (8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800508c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005092:	ee07 3a90 	vmov	s15, r3
 8005096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800509a:	ed97 6a03 	vldr	s12, [r7, #12]
 800509e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80050bc:	4b2a      	ldr	r3, [pc, #168]	@ (8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c0:	0a5b      	lsrs	r3, r3, #9
 80050c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050c6:	ee07 3a90 	vmov	s15, r3
 80050ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80050da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050e2:	ee17 2a90 	vmov	r2, s15
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80050ea:	4b1f      	ldr	r3, [pc, #124]	@ (8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ee:	0c1b      	lsrs	r3, r3, #16
 80050f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050f4:	ee07 3a90 	vmov	s15, r3
 80050f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005100:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005104:	edd7 6a07 	vldr	s13, [r7, #28]
 8005108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800510c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005110:	ee17 2a90 	vmov	r2, s15
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005118:	4b13      	ldr	r3, [pc, #76]	@ (8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800511a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511c:	0e1b      	lsrs	r3, r3, #24
 800511e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800512e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005132:	edd7 6a07 	vldr	s13, [r7, #28]
 8005136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800513a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800513e:	ee17 2a90 	vmov	r2, s15
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005146:	e008      	b.n	800515a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	609a      	str	r2, [r3, #8]
}
 800515a:	bf00      	nop
 800515c:	3724      	adds	r7, #36	@ 0x24
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	58024400 	.word	0x58024400
 800516c:	03d09000 	.word	0x03d09000
 8005170:	46000000 	.word	0x46000000
 8005174:	4c742400 	.word	0x4c742400
 8005178:	4a742400 	.word	0x4a742400
 800517c:	4bbebc20 	.word	0x4bbebc20

08005180 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800518e:	4b53      	ldr	r3, [pc, #332]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 8005190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	2b03      	cmp	r3, #3
 8005198:	d101      	bne.n	800519e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e099      	b.n	80052d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800519e:	4b4f      	ldr	r3, [pc, #316]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a4e      	ldr	r2, [pc, #312]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 80051a4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80051a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051aa:	f7fc fecf 	bl	8001f4c <HAL_GetTick>
 80051ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80051b0:	e008      	b.n	80051c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80051b2:	f7fc fecb 	bl	8001f4c <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d901      	bls.n	80051c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e086      	b.n	80052d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80051c4:	4b45      	ldr	r3, [pc, #276]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1f0      	bne.n	80051b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80051d0:	4b42      	ldr	r3, [pc, #264]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 80051d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	031b      	lsls	r3, r3, #12
 80051de:	493f      	ldr	r1, [pc, #252]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	3b01      	subs	r3, #1
 80051ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	025b      	lsls	r3, r3, #9
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	3b01      	subs	r3, #1
 8005200:	041b      	lsls	r3, r3, #16
 8005202:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	3b01      	subs	r3, #1
 800520e:	061b      	lsls	r3, r3, #24
 8005210:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005214:	4931      	ldr	r1, [pc, #196]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 8005216:	4313      	orrs	r3, r2
 8005218:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800521a:	4b30      	ldr	r3, [pc, #192]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 800521c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	492d      	ldr	r1, [pc, #180]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 8005228:	4313      	orrs	r3, r2
 800522a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800522c:	4b2b      	ldr	r3, [pc, #172]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 800522e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005230:	f023 0220 	bic.w	r2, r3, #32
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	4928      	ldr	r1, [pc, #160]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 800523a:	4313      	orrs	r3, r2
 800523c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800523e:	4b27      	ldr	r3, [pc, #156]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 8005240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005242:	4a26      	ldr	r2, [pc, #152]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 8005244:	f023 0310 	bic.w	r3, r3, #16
 8005248:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800524a:	4b24      	ldr	r3, [pc, #144]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 800524c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800524e:	4b24      	ldr	r3, [pc, #144]	@ (80052e0 <RCCEx_PLL2_Config+0x160>)
 8005250:	4013      	ands	r3, r2
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	69d2      	ldr	r2, [r2, #28]
 8005256:	00d2      	lsls	r2, r2, #3
 8005258:	4920      	ldr	r1, [pc, #128]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 800525a:	4313      	orrs	r3, r2
 800525c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800525e:	4b1f      	ldr	r3, [pc, #124]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 8005260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005262:	4a1e      	ldr	r2, [pc, #120]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 8005264:	f043 0310 	orr.w	r3, r3, #16
 8005268:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d106      	bne.n	800527e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005270:	4b1a      	ldr	r3, [pc, #104]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 8005272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005274:	4a19      	ldr	r2, [pc, #100]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 8005276:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800527a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800527c:	e00f      	b.n	800529e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d106      	bne.n	8005292 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005284:	4b15      	ldr	r3, [pc, #84]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 8005286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005288:	4a14      	ldr	r2, [pc, #80]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 800528a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800528e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005290:	e005      	b.n	800529e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005292:	4b12      	ldr	r3, [pc, #72]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 8005294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005296:	4a11      	ldr	r2, [pc, #68]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 8005298:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800529c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800529e:	4b0f      	ldr	r3, [pc, #60]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a0e      	ldr	r2, [pc, #56]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 80052a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80052a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052aa:	f7fc fe4f 	bl	8001f4c <HAL_GetTick>
 80052ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80052b0:	e008      	b.n	80052c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80052b2:	f7fc fe4b 	bl	8001f4c <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e006      	b.n	80052d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80052c4:	4b05      	ldr	r3, [pc, #20]	@ (80052dc <RCCEx_PLL2_Config+0x15c>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0f0      	beq.n	80052b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	58024400 	.word	0x58024400
 80052e0:	ffff0007 	.word	0xffff0007

080052e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052f2:	4b53      	ldr	r3, [pc, #332]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 80052f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d101      	bne.n	8005302 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e099      	b.n	8005436 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005302:	4b4f      	ldr	r3, [pc, #316]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a4e      	ldr	r2, [pc, #312]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 8005308:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800530c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530e:	f7fc fe1d 	bl	8001f4c <HAL_GetTick>
 8005312:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005314:	e008      	b.n	8005328 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005316:	f7fc fe19 	bl	8001f4c <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d901      	bls.n	8005328 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e086      	b.n	8005436 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005328:	4b45      	ldr	r3, [pc, #276]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1f0      	bne.n	8005316 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005334:	4b42      	ldr	r3, [pc, #264]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 8005336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005338:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	051b      	lsls	r3, r3, #20
 8005342:	493f      	ldr	r1, [pc, #252]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 8005344:	4313      	orrs	r3, r2
 8005346:	628b      	str	r3, [r1, #40]	@ 0x28
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	3b01      	subs	r3, #1
 800534e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	3b01      	subs	r3, #1
 8005358:	025b      	lsls	r3, r3, #9
 800535a:	b29b      	uxth	r3, r3
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	3b01      	subs	r3, #1
 8005364:	041b      	lsls	r3, r3, #16
 8005366:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	3b01      	subs	r3, #1
 8005372:	061b      	lsls	r3, r3, #24
 8005374:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005378:	4931      	ldr	r1, [pc, #196]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 800537a:	4313      	orrs	r3, r2
 800537c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800537e:	4b30      	ldr	r3, [pc, #192]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 8005380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005382:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	492d      	ldr	r1, [pc, #180]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 800538c:	4313      	orrs	r3, r2
 800538e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005390:	4b2b      	ldr	r3, [pc, #172]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 8005392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005394:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	4928      	ldr	r1, [pc, #160]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80053a2:	4b27      	ldr	r3, [pc, #156]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 80053a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a6:	4a26      	ldr	r2, [pc, #152]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 80053a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80053ae:	4b24      	ldr	r3, [pc, #144]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 80053b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053b2:	4b24      	ldr	r3, [pc, #144]	@ (8005444 <RCCEx_PLL3_Config+0x160>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	69d2      	ldr	r2, [r2, #28]
 80053ba:	00d2      	lsls	r2, r2, #3
 80053bc:	4920      	ldr	r1, [pc, #128]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80053c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 80053c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 80053c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d106      	bne.n	80053e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80053d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 80053d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d8:	4a19      	ldr	r2, [pc, #100]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 80053da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80053de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053e0:	e00f      	b.n	8005402 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d106      	bne.n	80053f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80053e8:	4b15      	ldr	r3, [pc, #84]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 80053ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ec:	4a14      	ldr	r2, [pc, #80]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 80053ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80053f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053f4:	e005      	b.n	8005402 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80053f6:	4b12      	ldr	r3, [pc, #72]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 80053f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fa:	4a11      	ldr	r2, [pc, #68]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 80053fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005400:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005402:	4b0f      	ldr	r3, [pc, #60]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a0e      	ldr	r2, [pc, #56]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 8005408:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800540c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800540e:	f7fc fd9d 	bl	8001f4c <HAL_GetTick>
 8005412:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005414:	e008      	b.n	8005428 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005416:	f7fc fd99 	bl	8001f4c <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d901      	bls.n	8005428 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e006      	b.n	8005436 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005428:	4b05      	ldr	r3, [pc, #20]	@ (8005440 <RCCEx_PLL3_Config+0x15c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0f0      	beq.n	8005416 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005434:	7bfb      	ldrb	r3, [r7, #15]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	58024400 	.word	0x58024400
 8005444:	ffff0007 	.word	0xffff0007

08005448 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e10f      	b.n	800567a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a87      	ldr	r2, [pc, #540]	@ (8005684 <HAL_SPI_Init+0x23c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00f      	beq.n	800548a <HAL_SPI_Init+0x42>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a86      	ldr	r2, [pc, #536]	@ (8005688 <HAL_SPI_Init+0x240>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00a      	beq.n	800548a <HAL_SPI_Init+0x42>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a84      	ldr	r2, [pc, #528]	@ (800568c <HAL_SPI_Init+0x244>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d005      	beq.n	800548a <HAL_SPI_Init+0x42>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	2b0f      	cmp	r3, #15
 8005484:	d901      	bls.n	800548a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e0f7      	b.n	800567a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fd08 	bl	8005ea0 <SPI_GetPacketSize>
 8005490:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a7b      	ldr	r2, [pc, #492]	@ (8005684 <HAL_SPI_Init+0x23c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00c      	beq.n	80054b6 <HAL_SPI_Init+0x6e>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a79      	ldr	r2, [pc, #484]	@ (8005688 <HAL_SPI_Init+0x240>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d007      	beq.n	80054b6 <HAL_SPI_Init+0x6e>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a78      	ldr	r2, [pc, #480]	@ (800568c <HAL_SPI_Init+0x244>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d002      	beq.n	80054b6 <HAL_SPI_Init+0x6e>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2b08      	cmp	r3, #8
 80054b4:	d811      	bhi.n	80054da <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80054ba:	4a72      	ldr	r2, [pc, #456]	@ (8005684 <HAL_SPI_Init+0x23c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d009      	beq.n	80054d4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a70      	ldr	r2, [pc, #448]	@ (8005688 <HAL_SPI_Init+0x240>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d004      	beq.n	80054d4 <HAL_SPI_Init+0x8c>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a6f      	ldr	r2, [pc, #444]	@ (800568c <HAL_SPI_Init+0x244>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d104      	bne.n	80054de <HAL_SPI_Init+0x96>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b10      	cmp	r3, #16
 80054d8:	d901      	bls.n	80054de <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e0cd      	b.n	800567a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d106      	bne.n	80054f8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7fc f988 	bl	8001808 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0201 	bic.w	r2, r2, #1
 800550e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800551a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005524:	d119      	bne.n	800555a <HAL_SPI_Init+0x112>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800552e:	d103      	bne.n	8005538 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005534:	2b00      	cmp	r3, #0
 8005536:	d008      	beq.n	800554a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10c      	bne.n	800555a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005544:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005548:	d107      	bne.n	800555a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005558:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00f      	beq.n	8005586 <HAL_SPI_Init+0x13e>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	2b06      	cmp	r3, #6
 800556c:	d90b      	bls.n	8005586 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	e007      	b.n	8005596 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005594:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69da      	ldr	r2, [r3, #28]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559e:	431a      	orrs	r2, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a8:	ea42 0103 	orr.w	r1, r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c0:	431a      	orrs	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	431a      	orrs	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	431a      	orrs	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055f6:	ea42 0103 	orr.w	r1, r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d113      	bne.n	8005636 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005620:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005634:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0201 	bic.w	r2, r2, #1
 8005644:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	40013000 	.word	0x40013000
 8005688:	40003800 	.word	0x40003800
 800568c:	40003c00 	.word	0x40003c00

08005690 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08e      	sub	sp, #56	@ 0x38
 8005694:	af02      	add	r7, sp, #8
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3320      	adds	r3, #32
 80056a4:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3330      	adds	r3, #48	@ 0x30
 80056ac:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	3301      	adds	r3, #1
 80056b8:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056ba:	f7fc fc47 	bl	8001f4c <HAL_GetTick>
 80056be:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80056c0:	887b      	ldrh	r3, [r7, #2]
 80056c2:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80056c4:	887b      	ldrh	r3, [r7, #2]
 80056c6:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d001      	beq.n	80056d8 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80056d4:	2302      	movs	r3, #2
 80056d6:	e310      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d005      	beq.n	80056ea <HAL_SPI_TransmitReceive+0x5a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <HAL_SPI_TransmitReceive+0x5a>
 80056e4:	887b      	ldrh	r3, [r7, #2]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e305      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_SPI_TransmitReceive+0x6c>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e2fe      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x66a>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2205      	movs	r2, #5
 8005708:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	887a      	ldrh	r2, [r7, #2]
 800571e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	887a      	ldrh	r2, [r7, #2]
 8005726:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	887a      	ldrh	r2, [r7, #2]
 8005734:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	887a      	ldrh	r2, [r7, #2]
 800573c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800575a:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a70      	ldr	r2, [pc, #448]	@ (8005924 <HAL_SPI_TransmitReceive+0x294>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d009      	beq.n	800577a <HAL_SPI_TransmitReceive+0xea>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a6f      	ldr	r2, [pc, #444]	@ (8005928 <HAL_SPI_TransmitReceive+0x298>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d004      	beq.n	800577a <HAL_SPI_TransmitReceive+0xea>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a6d      	ldr	r2, [pc, #436]	@ (800592c <HAL_SPI_TransmitReceive+0x29c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d102      	bne.n	8005780 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800577a:	2310      	movs	r3, #16
 800577c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800577e:	e001      	b.n	8005784 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8005780:	2308      	movs	r3, #8
 8005782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	4b69      	ldr	r3, [pc, #420]	@ (8005930 <HAL_SPI_TransmitReceive+0x2a0>)
 800578c:	4013      	ands	r3, r2
 800578e:	8879      	ldrh	r1, [r7, #2]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	6812      	ldr	r2, [r2, #0]
 8005794:	430b      	orrs	r3, r1
 8005796:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f042 0201 	orr.w	r2, r2, #1
 80057a6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057b0:	d107      	bne.n	80057c2 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	2b0f      	cmp	r3, #15
 80057c8:	f240 80a2 	bls.w	8005910 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80057cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ce:	089b      	lsrs	r3, r3, #2
 80057d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80057d2:	e094      	b.n	80058fe <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d120      	bne.n	8005824 <HAL_SPI_TransmitReceive+0x194>
 80057e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d01d      	beq.n	8005824 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80057e8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80057ea:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80057ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ee:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d217      	bcs.n	8005824 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6812      	ldr	r2, [r2, #0]
 80057fe:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005804:	1d1a      	adds	r2, r3, #4
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b01      	subs	r3, #1
 8005814:	b29a      	uxth	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005822:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800582c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800582e:	2b00      	cmp	r3, #0
 8005830:	d065      	beq.n	80058fe <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b01      	cmp	r3, #1
 800583e:	d118      	bne.n	8005872 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005848:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800584a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005850:	1d1a      	adds	r2, r3, #4
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b01      	subs	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800586e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005870:	e045      	b.n	80058fe <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005872:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005874:	8bfb      	ldrh	r3, [r7, #30]
 8005876:	429a      	cmp	r2, r3
 8005878:	d21d      	bcs.n	80058b6 <HAL_SPI_TransmitReceive+0x226>
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d018      	beq.n	80058b6 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800588c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800588e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005894:	1d1a      	adds	r2, r3, #4
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80058b2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80058b4:	e023      	b.n	80058fe <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058b6:	f7fc fb49 	bl	8001f4c <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d803      	bhi.n	80058ce <HAL_SPI_TransmitReceive+0x23e>
 80058c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058cc:	d102      	bne.n	80058d4 <HAL_SPI_TransmitReceive+0x244>
 80058ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d114      	bne.n	80058fe <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 fa15 	bl	8005d04 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e1fd      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80058fe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005900:	2b00      	cmp	r3, #0
 8005902:	f47f af67 	bne.w	80057d4 <HAL_SPI_TransmitReceive+0x144>
 8005906:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005908:	2b00      	cmp	r3, #0
 800590a:	f47f af63 	bne.w	80057d4 <HAL_SPI_TransmitReceive+0x144>
 800590e:	e1ce      	b.n	8005cae <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	2b07      	cmp	r3, #7
 8005916:	f240 81c2 	bls.w	8005c9e <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800591a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800591c:	085b      	lsrs	r3, r3, #1
 800591e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005920:	e0c9      	b.n	8005ab6 <HAL_SPI_TransmitReceive+0x426>
 8005922:	bf00      	nop
 8005924:	40013000 	.word	0x40013000
 8005928:	40003800 	.word	0x40003800
 800592c:	40003c00 	.word	0x40003c00
 8005930:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b02      	cmp	r3, #2
 8005940:	d11f      	bne.n	8005982 <HAL_SPI_TransmitReceive+0x2f2>
 8005942:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005944:	2b00      	cmp	r3, #0
 8005946:	d01c      	beq.n	8005982 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005948:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800594a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800594c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005950:	429a      	cmp	r2, r3
 8005952:	d216      	bcs.n	8005982 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005958:	881a      	ldrh	r2, [r3, #0]
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005962:	1c9a      	adds	r2, r3, #2
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800596e:	b29b      	uxth	r3, r3
 8005970:	3b01      	subs	r3, #1
 8005972:	b29a      	uxth	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005980:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800598a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 8092 	beq.w	8005ab6 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b01      	cmp	r3, #1
 800599e:	d118      	bne.n	80059d2 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059a4:	6a3a      	ldr	r2, [r7, #32]
 80059a6:	8812      	ldrh	r2, [r2, #0]
 80059a8:	b292      	uxth	r2, r2
 80059aa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059b0:	1c9a      	adds	r2, r3, #2
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059bc:	b29b      	uxth	r3, r3
 80059be:	3b01      	subs	r3, #1
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059ce:	853b      	strh	r3, [r7, #40]	@ 0x28
 80059d0:	e071      	b.n	8005ab6 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80059d2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80059d4:	8bfb      	ldrh	r3, [r7, #30]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d228      	bcs.n	8005a2c <HAL_SPI_TransmitReceive+0x39c>
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d023      	beq.n	8005a2c <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059e8:	6a3a      	ldr	r2, [r7, #32]
 80059ea:	8812      	ldrh	r2, [r2, #0]
 80059ec:	b292      	uxth	r2, r2
 80059ee:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059f4:	1c9a      	adds	r2, r3, #2
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059fe:	6a3a      	ldr	r2, [r7, #32]
 8005a00:	8812      	ldrh	r2, [r2, #0]
 8005a02:	b292      	uxth	r2, r2
 8005a04:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a0a:	1c9a      	adds	r2, r3, #2
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	3b02      	subs	r3, #2
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a28:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005a2a:	e044      	b.n	8005ab6 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005a2c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d11d      	bne.n	8005a6e <HAL_SPI_TransmitReceive+0x3de>
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d018      	beq.n	8005a6e <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a40:	6a3a      	ldr	r2, [r7, #32]
 8005a42:	8812      	ldrh	r2, [r2, #0]
 8005a44:	b292      	uxth	r2, r2
 8005a46:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a4c:	1c9a      	adds	r2, r3, #2
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a6a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005a6c:	e023      	b.n	8005ab6 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a6e:	f7fc fa6d 	bl	8001f4c <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d803      	bhi.n	8005a86 <HAL_SPI_TransmitReceive+0x3f6>
 8005a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a84:	d102      	bne.n	8005a8c <HAL_SPI_TransmitReceive+0x3fc>
 8005a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d114      	bne.n	8005ab6 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 f939 	bl	8005d04 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a98:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e121      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005ab6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f47f af3b 	bne.w	8005934 <HAL_SPI_TransmitReceive+0x2a4>
 8005abe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f47f af37 	bne.w	8005934 <HAL_SPI_TransmitReceive+0x2a4>
 8005ac6:	e0f2      	b.n	8005cae <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d121      	bne.n	8005b1a <HAL_SPI_TransmitReceive+0x48a>
 8005ad6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d01e      	beq.n	8005b1a <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005adc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005ade:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d218      	bcs.n	8005b1a <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3320      	adds	r3, #32
 8005af2:	7812      	ldrb	r2, [r2, #0]
 8005af4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005afa:	1c5a      	adds	r2, r3, #1
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005b18:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005b22:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 80ba 	beq.w	8005c9e <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d11b      	bne.n	8005b70 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b44:	7812      	ldrb	r2, [r2, #0]
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b6c:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005b6e:	e096      	b.n	8005c9e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005b70:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005b72:	8bfb      	ldrh	r3, [r7, #30]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d24a      	bcs.n	8005c0e <HAL_SPI_TransmitReceive+0x57e>
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d045      	beq.n	8005c0e <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b8e:	7812      	ldrb	r2, [r2, #0]
 8005b90:	b2d2      	uxtb	r2, r2
 8005b92:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005baa:	7812      	ldrb	r2, [r2, #0]
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bc6:	7812      	ldrb	r2, [r2, #0]
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005be2:	7812      	ldrb	r2, [r2, #0]
 8005be4:	b2d2      	uxtb	r2, r2
 8005be6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	3b04      	subs	r3, #4
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c0a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005c0c:	e047      	b.n	8005c9e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005c0e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005c10:	2b03      	cmp	r3, #3
 8005c12:	d820      	bhi.n	8005c56 <HAL_SPI_TransmitReceive+0x5c6>
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d01b      	beq.n	8005c56 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c2a:	7812      	ldrb	r2, [r2, #0]
 8005c2c:	b2d2      	uxtb	r2, r2
 8005c2e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c52:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005c54:	e023      	b.n	8005c9e <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c56:	f7fc f979 	bl	8001f4c <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d803      	bhi.n	8005c6e <HAL_SPI_TransmitReceive+0x5de>
 8005c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6c:	d102      	bne.n	8005c74 <HAL_SPI_TransmitReceive+0x5e4>
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d114      	bne.n	8005c9e <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f845 	bl	8005d04 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c80:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e02d      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005c9e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f47f af11 	bne.w	8005ac8 <HAL_SPI_TransmitReceive+0x438>
 8005ca6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f47f af0d 	bne.w	8005ac8 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	2108      	movs	r1, #8
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 f8c3 	bl	8005e44 <SPI_WaitOnFlagUntilTimeout>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d007      	beq.n	8005cd4 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cca:	f043 0220 	orr.w	r2, r3, #32
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 f815 	bl	8005d04 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e000      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
  }
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3730      	adds	r7, #48	@ 0x30
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop

08005d04 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0208 	orr.w	r2, r2, #8
 8005d22:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699a      	ldr	r2, [r3, #24]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0210 	orr.w	r2, r2, #16
 8005d32:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0201 	bic.w	r2, r2, #1
 8005d42:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6919      	ldr	r1, [r3, #16]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	4b3c      	ldr	r3, [pc, #240]	@ (8005e40 <SPI_CloseTransfer+0x13c>)
 8005d50:	400b      	ands	r3, r1
 8005d52:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689a      	ldr	r2, [r3, #8]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005d62:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	d014      	beq.n	8005d9a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f003 0320 	and.w	r3, r3, #32
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00f      	beq.n	8005d9a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d80:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	699a      	ldr	r2, [r3, #24]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f042 0220 	orr.w	r2, r2, #32
 8005d98:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d014      	beq.n	8005dd0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00f      	beq.n	8005dd0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005db6:	f043 0204 	orr.w	r2, r3, #4
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699a      	ldr	r2, [r3, #24]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005dce:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00f      	beq.n	8005dfa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005de0:	f043 0201 	orr.w	r2, r3, #1
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	699a      	ldr	r2, [r3, #24]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005df8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00f      	beq.n	8005e24 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e0a:	f043 0208 	orr.w	r2, r3, #8
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699a      	ldr	r2, [r3, #24]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e22:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005e34:	bf00      	nop
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	fffffc90 	.word	0xfffffc90

08005e44 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	603b      	str	r3, [r7, #0]
 8005e50:	4613      	mov	r3, r2
 8005e52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005e54:	e010      	b.n	8005e78 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e56:	f7fc f879 	bl	8001f4c <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d803      	bhi.n	8005e6e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6c:	d102      	bne.n	8005e74 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e00f      	b.n	8005e98 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695a      	ldr	r2, [r3, #20]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	4013      	ands	r3, r2
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	bf0c      	ite	eq
 8005e88:	2301      	moveq	r3, #1
 8005e8a:	2300      	movne	r3, #0
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	461a      	mov	r2, r3
 8005e90:	79fb      	ldrb	r3, [r7, #7]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d0df      	beq.n	8005e56 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eac:	095b      	lsrs	r3, r3, #5
 8005eae:	3301      	adds	r3, #1
 8005eb0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	3307      	adds	r3, #7
 8005ebe:	08db      	lsrs	r3, r3, #3
 8005ec0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	fb02 f303 	mul.w	r3, r2, r3
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b082      	sub	sp, #8
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e049      	b.n	8005f7c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d106      	bne.n	8005f02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7fb fd5b 	bl	80019b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2202      	movs	r2, #2
 8005f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	3304      	adds	r3, #4
 8005f12:	4619      	mov	r1, r3
 8005f14:	4610      	mov	r0, r2
 8005f16:	f000 fb47 	bl	80065a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d001      	beq.n	8005f9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e054      	b.n	8006046 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0201 	orr.w	r2, r2, #1
 8005fb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a26      	ldr	r2, [pc, #152]	@ (8006054 <HAL_TIM_Base_Start_IT+0xd0>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d022      	beq.n	8006004 <HAL_TIM_Base_Start_IT+0x80>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fc6:	d01d      	beq.n	8006004 <HAL_TIM_Base_Start_IT+0x80>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a22      	ldr	r2, [pc, #136]	@ (8006058 <HAL_TIM_Base_Start_IT+0xd4>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d018      	beq.n	8006004 <HAL_TIM_Base_Start_IT+0x80>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a21      	ldr	r2, [pc, #132]	@ (800605c <HAL_TIM_Base_Start_IT+0xd8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d013      	beq.n	8006004 <HAL_TIM_Base_Start_IT+0x80>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8006060 <HAL_TIM_Base_Start_IT+0xdc>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d00e      	beq.n	8006004 <HAL_TIM_Base_Start_IT+0x80>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a1e      	ldr	r2, [pc, #120]	@ (8006064 <HAL_TIM_Base_Start_IT+0xe0>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d009      	beq.n	8006004 <HAL_TIM_Base_Start_IT+0x80>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a1c      	ldr	r2, [pc, #112]	@ (8006068 <HAL_TIM_Base_Start_IT+0xe4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d004      	beq.n	8006004 <HAL_TIM_Base_Start_IT+0x80>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800606c <HAL_TIM_Base_Start_IT+0xe8>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d115      	bne.n	8006030 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	4b19      	ldr	r3, [pc, #100]	@ (8006070 <HAL_TIM_Base_Start_IT+0xec>)
 800600c:	4013      	ands	r3, r2
 800600e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b06      	cmp	r3, #6
 8006014:	d015      	beq.n	8006042 <HAL_TIM_Base_Start_IT+0xbe>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800601c:	d011      	beq.n	8006042 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f042 0201 	orr.w	r2, r2, #1
 800602c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800602e:	e008      	b.n	8006042 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 0201 	orr.w	r2, r2, #1
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	e000      	b.n	8006044 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006042:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	40010000 	.word	0x40010000
 8006058:	40000400 	.word	0x40000400
 800605c:	40000800 	.word	0x40000800
 8006060:	40000c00 	.word	0x40000c00
 8006064:	40010400 	.word	0x40010400
 8006068:	40001800 	.word	0x40001800
 800606c:	40014000 	.word	0x40014000
 8006070:	00010007 	.word	0x00010007

08006074 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e049      	b.n	800611a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d106      	bne.n	80060a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7fb fc42 	bl	8001924 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	3304      	adds	r3, #4
 80060b0:	4619      	mov	r1, r3
 80060b2:	4610      	mov	r0, r2
 80060b4:	f000 fa78 	bl	80065a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b084      	sub	sp, #16
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d020      	beq.n	8006186 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d01b      	beq.n	8006186 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f06f 0202 	mvn.w	r2, #2
 8006156:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	f003 0303 	and.w	r3, r3, #3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f9fd 	bl	800656c <HAL_TIM_IC_CaptureCallback>
 8006172:	e005      	b.n	8006180 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f9ef 	bl	8006558 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fa00 	bl	8006580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f003 0304 	and.w	r3, r3, #4
 800618c:	2b00      	cmp	r3, #0
 800618e:	d020      	beq.n	80061d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f003 0304 	and.w	r3, r3, #4
 8006196:	2b00      	cmp	r3, #0
 8006198:	d01b      	beq.n	80061d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f06f 0204 	mvn.w	r2, #4
 80061a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2202      	movs	r2, #2
 80061a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f9d7 	bl	800656c <HAL_TIM_IC_CaptureCallback>
 80061be:	e005      	b.n	80061cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f9c9 	bl	8006558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f9da 	bl	8006580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d020      	beq.n	800621e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f003 0308 	and.w	r3, r3, #8
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d01b      	beq.n	800621e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f06f 0208 	mvn.w	r2, #8
 80061ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2204      	movs	r2, #4
 80061f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	f003 0303 	and.w	r3, r3, #3
 8006200:	2b00      	cmp	r3, #0
 8006202:	d003      	beq.n	800620c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f9b1 	bl	800656c <HAL_TIM_IC_CaptureCallback>
 800620a:	e005      	b.n	8006218 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f9a3 	bl	8006558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f9b4 	bl	8006580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f003 0310 	and.w	r3, r3, #16
 8006224:	2b00      	cmp	r3, #0
 8006226:	d020      	beq.n	800626a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f003 0310 	and.w	r3, r3, #16
 800622e:	2b00      	cmp	r3, #0
 8006230:	d01b      	beq.n	800626a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f06f 0210 	mvn.w	r2, #16
 800623a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2208      	movs	r2, #8
 8006240:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f98b 	bl	800656c <HAL_TIM_IC_CaptureCallback>
 8006256:	e005      	b.n	8006264 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f97d 	bl	8006558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f98e 	bl	8006580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00c      	beq.n	800628e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	2b00      	cmp	r3, #0
 800627c:	d007      	beq.n	800628e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f06f 0201 	mvn.w	r2, #1
 8006286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7fb fa7f 	bl	800178c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006294:	2b00      	cmp	r3, #0
 8006296:	d104      	bne.n	80062a2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00c      	beq.n	80062bc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d007      	beq.n	80062bc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80062b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fe02 	bl	8006ec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00c      	beq.n	80062e0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d007      	beq.n	80062e0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80062d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fdfa 	bl	8006ed4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00c      	beq.n	8006304 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d007      	beq.n	8006304 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f948 	bl	8006594 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00c      	beq.n	8006328 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f003 0320 	and.w	r3, r3, #32
 8006314:	2b00      	cmp	r3, #0
 8006316:	d007      	beq.n	8006328 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f06f 0220 	mvn.w	r2, #32
 8006320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fdc2 	bl	8006eac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006328:	bf00      	nop
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800633c:	2300      	movs	r3, #0
 800633e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006346:	2b01      	cmp	r3, #1
 8006348:	d101      	bne.n	800634e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800634a:	2302      	movs	r3, #2
 800634c:	e0ff      	b.n	800654e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b14      	cmp	r3, #20
 800635a:	f200 80f0 	bhi.w	800653e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800635e:	a201      	add	r2, pc, #4	@ (adr r2, 8006364 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006364:	080063b9 	.word	0x080063b9
 8006368:	0800653f 	.word	0x0800653f
 800636c:	0800653f 	.word	0x0800653f
 8006370:	0800653f 	.word	0x0800653f
 8006374:	080063f9 	.word	0x080063f9
 8006378:	0800653f 	.word	0x0800653f
 800637c:	0800653f 	.word	0x0800653f
 8006380:	0800653f 	.word	0x0800653f
 8006384:	0800643b 	.word	0x0800643b
 8006388:	0800653f 	.word	0x0800653f
 800638c:	0800653f 	.word	0x0800653f
 8006390:	0800653f 	.word	0x0800653f
 8006394:	0800647b 	.word	0x0800647b
 8006398:	0800653f 	.word	0x0800653f
 800639c:	0800653f 	.word	0x0800653f
 80063a0:	0800653f 	.word	0x0800653f
 80063a4:	080064bd 	.word	0x080064bd
 80063a8:	0800653f 	.word	0x0800653f
 80063ac:	0800653f 	.word	0x0800653f
 80063b0:	0800653f 	.word	0x0800653f
 80063b4:	080064fd 	.word	0x080064fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68b9      	ldr	r1, [r7, #8]
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 f992 	bl	80066e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699a      	ldr	r2, [r3, #24]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0208 	orr.w	r2, r2, #8
 80063d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699a      	ldr	r2, [r3, #24]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0204 	bic.w	r2, r2, #4
 80063e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6999      	ldr	r1, [r3, #24]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	691a      	ldr	r2, [r3, #16]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	619a      	str	r2, [r3, #24]
      break;
 80063f6:	e0a5      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 fa02 	bl	8006808 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	699a      	ldr	r2, [r3, #24]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699a      	ldr	r2, [r3, #24]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6999      	ldr	r1, [r3, #24]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	021a      	lsls	r2, r3, #8
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	619a      	str	r2, [r3, #24]
      break;
 8006438:	e084      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68b9      	ldr	r1, [r7, #8]
 8006440:	4618      	mov	r0, r3
 8006442:	f000 fa6b 	bl	800691c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69da      	ldr	r2, [r3, #28]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f042 0208 	orr.w	r2, r2, #8
 8006454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69da      	ldr	r2, [r3, #28]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 0204 	bic.w	r2, r2, #4
 8006464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69d9      	ldr	r1, [r3, #28]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	691a      	ldr	r2, [r3, #16]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	61da      	str	r2, [r3, #28]
      break;
 8006478:	e064      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68b9      	ldr	r1, [r7, #8]
 8006480:	4618      	mov	r0, r3
 8006482:	f000 fad3 	bl	8006a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69da      	ldr	r2, [r3, #28]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	69da      	ldr	r2, [r3, #28]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	69d9      	ldr	r1, [r3, #28]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	021a      	lsls	r2, r3, #8
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	61da      	str	r2, [r3, #28]
      break;
 80064ba:	e043      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68b9      	ldr	r1, [r7, #8]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 fb1c 	bl	8006b00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0208 	orr.w	r2, r2, #8
 80064d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0204 	bic.w	r2, r2, #4
 80064e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	691a      	ldr	r2, [r3, #16]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80064fa:	e023      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68b9      	ldr	r1, [r7, #8]
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fb60 	bl	8006bc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006516:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006526:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	021a      	lsls	r2, r3, #8
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800653c:	e002      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	75fb      	strb	r3, [r7, #23]
      break;
 8006542:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800654c:	7dfb      	ldrb	r3, [r7, #23]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3718      	adds	r7, #24
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop

08006558 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a43      	ldr	r2, [pc, #268]	@ (80066c8 <TIM_Base_SetConfig+0x120>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d013      	beq.n	80065e8 <TIM_Base_SetConfig+0x40>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065c6:	d00f      	beq.n	80065e8 <TIM_Base_SetConfig+0x40>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a40      	ldr	r2, [pc, #256]	@ (80066cc <TIM_Base_SetConfig+0x124>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00b      	beq.n	80065e8 <TIM_Base_SetConfig+0x40>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a3f      	ldr	r2, [pc, #252]	@ (80066d0 <TIM_Base_SetConfig+0x128>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d007      	beq.n	80065e8 <TIM_Base_SetConfig+0x40>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a3e      	ldr	r2, [pc, #248]	@ (80066d4 <TIM_Base_SetConfig+0x12c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d003      	beq.n	80065e8 <TIM_Base_SetConfig+0x40>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a3d      	ldr	r2, [pc, #244]	@ (80066d8 <TIM_Base_SetConfig+0x130>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d108      	bne.n	80065fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a32      	ldr	r2, [pc, #200]	@ (80066c8 <TIM_Base_SetConfig+0x120>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d01f      	beq.n	8006642 <TIM_Base_SetConfig+0x9a>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006608:	d01b      	beq.n	8006642 <TIM_Base_SetConfig+0x9a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a2f      	ldr	r2, [pc, #188]	@ (80066cc <TIM_Base_SetConfig+0x124>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d017      	beq.n	8006642 <TIM_Base_SetConfig+0x9a>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a2e      	ldr	r2, [pc, #184]	@ (80066d0 <TIM_Base_SetConfig+0x128>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d013      	beq.n	8006642 <TIM_Base_SetConfig+0x9a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a2d      	ldr	r2, [pc, #180]	@ (80066d4 <TIM_Base_SetConfig+0x12c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d00f      	beq.n	8006642 <TIM_Base_SetConfig+0x9a>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a2c      	ldr	r2, [pc, #176]	@ (80066d8 <TIM_Base_SetConfig+0x130>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00b      	beq.n	8006642 <TIM_Base_SetConfig+0x9a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a2b      	ldr	r2, [pc, #172]	@ (80066dc <TIM_Base_SetConfig+0x134>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d007      	beq.n	8006642 <TIM_Base_SetConfig+0x9a>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a2a      	ldr	r2, [pc, #168]	@ (80066e0 <TIM_Base_SetConfig+0x138>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d003      	beq.n	8006642 <TIM_Base_SetConfig+0x9a>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a29      	ldr	r2, [pc, #164]	@ (80066e4 <TIM_Base_SetConfig+0x13c>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d108      	bne.n	8006654 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	4313      	orrs	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a14      	ldr	r2, [pc, #80]	@ (80066c8 <TIM_Base_SetConfig+0x120>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d00f      	beq.n	800669a <TIM_Base_SetConfig+0xf2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a16      	ldr	r2, [pc, #88]	@ (80066d8 <TIM_Base_SetConfig+0x130>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d00b      	beq.n	800669a <TIM_Base_SetConfig+0xf2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a15      	ldr	r2, [pc, #84]	@ (80066dc <TIM_Base_SetConfig+0x134>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d007      	beq.n	800669a <TIM_Base_SetConfig+0xf2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a14      	ldr	r2, [pc, #80]	@ (80066e0 <TIM_Base_SetConfig+0x138>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d003      	beq.n	800669a <TIM_Base_SetConfig+0xf2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a13      	ldr	r2, [pc, #76]	@ (80066e4 <TIM_Base_SetConfig+0x13c>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d103      	bne.n	80066a2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	691a      	ldr	r2, [r3, #16]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f043 0204 	orr.w	r2, r3, #4
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	601a      	str	r2, [r3, #0]
}
 80066ba:	bf00      	nop
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	40010000 	.word	0x40010000
 80066cc:	40000400 	.word	0x40000400
 80066d0:	40000800 	.word	0x40000800
 80066d4:	40000c00 	.word	0x40000c00
 80066d8:	40010400 	.word	0x40010400
 80066dc:	40014000 	.word	0x40014000
 80066e0:	40014400 	.word	0x40014400
 80066e4:	40014800 	.word	0x40014800

080066e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	f023 0201 	bic.w	r2, r3, #1
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	4b37      	ldr	r3, [pc, #220]	@ (80067f0 <TIM_OC1_SetConfig+0x108>)
 8006714:	4013      	ands	r3, r2
 8006716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f023 0303 	bic.w	r3, r3, #3
 800671e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	4313      	orrs	r3, r2
 8006728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f023 0302 	bic.w	r3, r3, #2
 8006730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	4313      	orrs	r3, r2
 800673a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a2d      	ldr	r2, [pc, #180]	@ (80067f4 <TIM_OC1_SetConfig+0x10c>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d00f      	beq.n	8006764 <TIM_OC1_SetConfig+0x7c>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a2c      	ldr	r2, [pc, #176]	@ (80067f8 <TIM_OC1_SetConfig+0x110>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d00b      	beq.n	8006764 <TIM_OC1_SetConfig+0x7c>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a2b      	ldr	r2, [pc, #172]	@ (80067fc <TIM_OC1_SetConfig+0x114>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d007      	beq.n	8006764 <TIM_OC1_SetConfig+0x7c>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a2a      	ldr	r2, [pc, #168]	@ (8006800 <TIM_OC1_SetConfig+0x118>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d003      	beq.n	8006764 <TIM_OC1_SetConfig+0x7c>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a29      	ldr	r2, [pc, #164]	@ (8006804 <TIM_OC1_SetConfig+0x11c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d10c      	bne.n	800677e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f023 0308 	bic.w	r3, r3, #8
 800676a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	4313      	orrs	r3, r2
 8006774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f023 0304 	bic.w	r3, r3, #4
 800677c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a1c      	ldr	r2, [pc, #112]	@ (80067f4 <TIM_OC1_SetConfig+0x10c>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d00f      	beq.n	80067a6 <TIM_OC1_SetConfig+0xbe>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a1b      	ldr	r2, [pc, #108]	@ (80067f8 <TIM_OC1_SetConfig+0x110>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d00b      	beq.n	80067a6 <TIM_OC1_SetConfig+0xbe>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a1a      	ldr	r2, [pc, #104]	@ (80067fc <TIM_OC1_SetConfig+0x114>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d007      	beq.n	80067a6 <TIM_OC1_SetConfig+0xbe>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a19      	ldr	r2, [pc, #100]	@ (8006800 <TIM_OC1_SetConfig+0x118>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d003      	beq.n	80067a6 <TIM_OC1_SetConfig+0xbe>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a18      	ldr	r2, [pc, #96]	@ (8006804 <TIM_OC1_SetConfig+0x11c>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d111      	bne.n	80067ca <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	621a      	str	r2, [r3, #32]
}
 80067e4:	bf00      	nop
 80067e6:	371c      	adds	r7, #28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	fffeff8f 	.word	0xfffeff8f
 80067f4:	40010000 	.word	0x40010000
 80067f8:	40010400 	.word	0x40010400
 80067fc:	40014000 	.word	0x40014000
 8006800:	40014400 	.word	0x40014400
 8006804:	40014800 	.word	0x40014800

08006808 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	f023 0210 	bic.w	r2, r3, #16
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	4b34      	ldr	r3, [pc, #208]	@ (8006904 <TIM_OC2_SetConfig+0xfc>)
 8006834:	4013      	ands	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800683e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	021b      	lsls	r3, r3, #8
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4313      	orrs	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f023 0320 	bic.w	r3, r3, #32
 8006852:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	4313      	orrs	r3, r2
 800685e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a29      	ldr	r2, [pc, #164]	@ (8006908 <TIM_OC2_SetConfig+0x100>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d003      	beq.n	8006870 <TIM_OC2_SetConfig+0x68>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a28      	ldr	r2, [pc, #160]	@ (800690c <TIM_OC2_SetConfig+0x104>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d10d      	bne.n	800688c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	011b      	lsls	r3, r3, #4
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	4313      	orrs	r3, r2
 8006882:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800688a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a1e      	ldr	r2, [pc, #120]	@ (8006908 <TIM_OC2_SetConfig+0x100>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d00f      	beq.n	80068b4 <TIM_OC2_SetConfig+0xac>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a1d      	ldr	r2, [pc, #116]	@ (800690c <TIM_OC2_SetConfig+0x104>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d00b      	beq.n	80068b4 <TIM_OC2_SetConfig+0xac>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a1c      	ldr	r2, [pc, #112]	@ (8006910 <TIM_OC2_SetConfig+0x108>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d007      	beq.n	80068b4 <TIM_OC2_SetConfig+0xac>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a1b      	ldr	r2, [pc, #108]	@ (8006914 <TIM_OC2_SetConfig+0x10c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d003      	beq.n	80068b4 <TIM_OC2_SetConfig+0xac>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a1a      	ldr	r2, [pc, #104]	@ (8006918 <TIM_OC2_SetConfig+0x110>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d113      	bne.n	80068dc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	621a      	str	r2, [r3, #32]
}
 80068f6:	bf00      	nop
 80068f8:	371c      	adds	r7, #28
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	feff8fff 	.word	0xfeff8fff
 8006908:	40010000 	.word	0x40010000
 800690c:	40010400 	.word	0x40010400
 8006910:	40014000 	.word	0x40014000
 8006914:	40014400 	.word	0x40014400
 8006918:	40014800 	.word	0x40014800

0800691c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a1b      	ldr	r3, [r3, #32]
 8006930:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4b33      	ldr	r3, [pc, #204]	@ (8006a14 <TIM_OC3_SetConfig+0xf8>)
 8006948:	4013      	ands	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f023 0303 	bic.w	r3, r3, #3
 8006952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	021b      	lsls	r3, r3, #8
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	4313      	orrs	r3, r2
 8006970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a28      	ldr	r2, [pc, #160]	@ (8006a18 <TIM_OC3_SetConfig+0xfc>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d003      	beq.n	8006982 <TIM_OC3_SetConfig+0x66>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a27      	ldr	r2, [pc, #156]	@ (8006a1c <TIM_OC3_SetConfig+0x100>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d10d      	bne.n	800699e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006988:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	021b      	lsls	r3, r3, #8
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800699c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a18 <TIM_OC3_SetConfig+0xfc>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d00f      	beq.n	80069c6 <TIM_OC3_SetConfig+0xaa>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a1c      	ldr	r2, [pc, #112]	@ (8006a1c <TIM_OC3_SetConfig+0x100>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d00b      	beq.n	80069c6 <TIM_OC3_SetConfig+0xaa>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a1b      	ldr	r2, [pc, #108]	@ (8006a20 <TIM_OC3_SetConfig+0x104>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d007      	beq.n	80069c6 <TIM_OC3_SetConfig+0xaa>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a1a      	ldr	r2, [pc, #104]	@ (8006a24 <TIM_OC3_SetConfig+0x108>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d003      	beq.n	80069c6 <TIM_OC3_SetConfig+0xaa>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a19      	ldr	r2, [pc, #100]	@ (8006a28 <TIM_OC3_SetConfig+0x10c>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d113      	bne.n	80069ee <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	4313      	orrs	r3, r2
 80069e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	621a      	str	r2, [r3, #32]
}
 8006a08:	bf00      	nop
 8006a0a:	371c      	adds	r7, #28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	fffeff8f 	.word	0xfffeff8f
 8006a18:	40010000 	.word	0x40010000
 8006a1c:	40010400 	.word	0x40010400
 8006a20:	40014000 	.word	0x40014000
 8006a24:	40014400 	.word	0x40014400
 8006a28:	40014800 	.word	0x40014800

08006a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	4b24      	ldr	r3, [pc, #144]	@ (8006ae8 <TIM_OC4_SetConfig+0xbc>)
 8006a58:	4013      	ands	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	021b      	lsls	r3, r3, #8
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	031b      	lsls	r3, r3, #12
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a19      	ldr	r2, [pc, #100]	@ (8006aec <TIM_OC4_SetConfig+0xc0>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d00f      	beq.n	8006aac <TIM_OC4_SetConfig+0x80>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a18      	ldr	r2, [pc, #96]	@ (8006af0 <TIM_OC4_SetConfig+0xc4>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00b      	beq.n	8006aac <TIM_OC4_SetConfig+0x80>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a17      	ldr	r2, [pc, #92]	@ (8006af4 <TIM_OC4_SetConfig+0xc8>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d007      	beq.n	8006aac <TIM_OC4_SetConfig+0x80>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a16      	ldr	r2, [pc, #88]	@ (8006af8 <TIM_OC4_SetConfig+0xcc>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d003      	beq.n	8006aac <TIM_OC4_SetConfig+0x80>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a15      	ldr	r2, [pc, #84]	@ (8006afc <TIM_OC4_SetConfig+0xd0>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d109      	bne.n	8006ac0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ab2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	019b      	lsls	r3, r3, #6
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	621a      	str	r2, [r3, #32]
}
 8006ada:	bf00      	nop
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	feff8fff 	.word	0xfeff8fff
 8006aec:	40010000 	.word	0x40010000
 8006af0:	40010400 	.word	0x40010400
 8006af4:	40014000 	.word	0x40014000
 8006af8:	40014400 	.word	0x40014400
 8006afc:	40014800 	.word	0x40014800

08006b00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b087      	sub	sp, #28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	4b21      	ldr	r3, [pc, #132]	@ (8006bb0 <TIM_OC5_SetConfig+0xb0>)
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006b40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	041b      	lsls	r3, r3, #16
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a18      	ldr	r2, [pc, #96]	@ (8006bb4 <TIM_OC5_SetConfig+0xb4>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d00f      	beq.n	8006b76 <TIM_OC5_SetConfig+0x76>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a17      	ldr	r2, [pc, #92]	@ (8006bb8 <TIM_OC5_SetConfig+0xb8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d00b      	beq.n	8006b76 <TIM_OC5_SetConfig+0x76>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a16      	ldr	r2, [pc, #88]	@ (8006bbc <TIM_OC5_SetConfig+0xbc>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d007      	beq.n	8006b76 <TIM_OC5_SetConfig+0x76>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a15      	ldr	r2, [pc, #84]	@ (8006bc0 <TIM_OC5_SetConfig+0xc0>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d003      	beq.n	8006b76 <TIM_OC5_SetConfig+0x76>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a14      	ldr	r2, [pc, #80]	@ (8006bc4 <TIM_OC5_SetConfig+0xc4>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d109      	bne.n	8006b8a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	021b      	lsls	r3, r3, #8
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	621a      	str	r2, [r3, #32]
}
 8006ba4:	bf00      	nop
 8006ba6:	371c      	adds	r7, #28
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr
 8006bb0:	fffeff8f 	.word	0xfffeff8f
 8006bb4:	40010000 	.word	0x40010000
 8006bb8:	40010400 	.word	0x40010400
 8006bbc:	40014000 	.word	0x40014000
 8006bc0:	40014400 	.word	0x40014400
 8006bc4:	40014800 	.word	0x40014800

08006bc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	4b22      	ldr	r3, [pc, #136]	@ (8006c7c <TIM_OC6_SetConfig+0xb4>)
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	021b      	lsls	r3, r3, #8
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	051b      	lsls	r3, r3, #20
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a19      	ldr	r2, [pc, #100]	@ (8006c80 <TIM_OC6_SetConfig+0xb8>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d00f      	beq.n	8006c40 <TIM_OC6_SetConfig+0x78>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a18      	ldr	r2, [pc, #96]	@ (8006c84 <TIM_OC6_SetConfig+0xbc>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d00b      	beq.n	8006c40 <TIM_OC6_SetConfig+0x78>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a17      	ldr	r2, [pc, #92]	@ (8006c88 <TIM_OC6_SetConfig+0xc0>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d007      	beq.n	8006c40 <TIM_OC6_SetConfig+0x78>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a16      	ldr	r2, [pc, #88]	@ (8006c8c <TIM_OC6_SetConfig+0xc4>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d003      	beq.n	8006c40 <TIM_OC6_SetConfig+0x78>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a15      	ldr	r2, [pc, #84]	@ (8006c90 <TIM_OC6_SetConfig+0xc8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d109      	bne.n	8006c54 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	029b      	lsls	r3, r3, #10
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	621a      	str	r2, [r3, #32]
}
 8006c6e:	bf00      	nop
 8006c70:	371c      	adds	r7, #28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	feff8fff 	.word	0xfeff8fff
 8006c80:	40010000 	.word	0x40010000
 8006c84:	40010400 	.word	0x40010400
 8006c88:	40014000 	.word	0x40014000
 8006c8c:	40014400 	.word	0x40014400
 8006c90:	40014800 	.word	0x40014800

08006c94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d101      	bne.n	8006cac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	e06d      	b.n	8006d88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a30      	ldr	r2, [pc, #192]	@ (8006d94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d004      	beq.n	8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a2f      	ldr	r2, [pc, #188]	@ (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d108      	bne.n	8006cf2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006ce6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cf8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a20      	ldr	r2, [pc, #128]	@ (8006d94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d022      	beq.n	8006d5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d1e:	d01d      	beq.n	8006d5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a1d      	ldr	r2, [pc, #116]	@ (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d018      	beq.n	8006d5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d013      	beq.n	8006d5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a1a      	ldr	r2, [pc, #104]	@ (8006da4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d00e      	beq.n	8006d5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a15      	ldr	r2, [pc, #84]	@ (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d009      	beq.n	8006d5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a16      	ldr	r2, [pc, #88]	@ (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d004      	beq.n	8006d5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a15      	ldr	r2, [pc, #84]	@ (8006dac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d10c      	bne.n	8006d76 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	40010000 	.word	0x40010000
 8006d98:	40010400 	.word	0x40010400
 8006d9c:	40000400 	.word	0x40000400
 8006da0:	40000800 	.word	0x40000800
 8006da4:	40000c00 	.word	0x40000c00
 8006da8:	40001800 	.word	0x40001800
 8006dac:	40014000 	.word	0x40014000

08006db0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d101      	bne.n	8006dcc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006dc8:	2302      	movs	r3, #2
 8006dca:	e065      	b.n	8006e98 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e32:	4313      	orrs	r3, r2
 8006e34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	041b      	lsls	r3, r3, #16
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a16      	ldr	r2, [pc, #88]	@ (8006ea4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d004      	beq.n	8006e5a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a14      	ldr	r2, [pc, #80]	@ (8006ea8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d115      	bne.n	8006e86 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e64:	051b      	lsls	r3, r3, #20
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	40010000 	.word	0x40010000
 8006ea8:	40010400 	.word	0x40010400

08006eac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e042      	b.n	8006f80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d106      	bne.n	8006f12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7fa fdfb 	bl	8001b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2224      	movs	r2, #36	@ 0x24
 8006f16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 0201 	bic.w	r2, r2, #1
 8006f28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d002      	beq.n	8006f38 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fe1e 	bl	8007b74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f8b3 	bl	80070a4 <UART_SetConfig>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d101      	bne.n	8006f48 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e01b      	b.n	8006f80 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689a      	ldr	r2, [r3, #8]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f042 0201 	orr.w	r2, r2, #1
 8006f76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fe9d 	bl	8007cb8 <UART_CheckIdleState>
 8006f7e:	4603      	mov	r3, r0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b08a      	sub	sp, #40	@ 0x28
 8006f8c:	af02      	add	r7, sp, #8
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	603b      	str	r3, [r7, #0]
 8006f94:	4613      	mov	r3, r2
 8006f96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f9e:	2b20      	cmp	r3, #32
 8006fa0:	d17b      	bne.n	800709a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d002      	beq.n	8006fae <HAL_UART_Transmit+0x26>
 8006fa8:	88fb      	ldrh	r3, [r7, #6]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e074      	b.n	800709c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2221      	movs	r2, #33	@ 0x21
 8006fbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fc2:	f7fa ffc3 	bl	8001f4c <HAL_GetTick>
 8006fc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	88fa      	ldrh	r2, [r7, #6]
 8006fcc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	88fa      	ldrh	r2, [r7, #6]
 8006fd4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fe0:	d108      	bne.n	8006ff4 <HAL_UART_Transmit+0x6c>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d104      	bne.n	8006ff4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	61bb      	str	r3, [r7, #24]
 8006ff2:	e003      	b.n	8006ffc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ffc:	e030      	b.n	8007060 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2200      	movs	r2, #0
 8007006:	2180      	movs	r1, #128	@ 0x80
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f000 feff 	bl	8007e0c <UART_WaitOnFlagUntilTimeout>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d005      	beq.n	8007020 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2220      	movs	r2, #32
 8007018:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e03d      	b.n	800709c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10b      	bne.n	800703e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	461a      	mov	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007034:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	3302      	adds	r3, #2
 800703a:	61bb      	str	r3, [r7, #24]
 800703c:	e007      	b.n	800704e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	781a      	ldrb	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	3301      	adds	r3, #1
 800704c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007054:	b29b      	uxth	r3, r3
 8007056:	3b01      	subs	r3, #1
 8007058:	b29a      	uxth	r2, r3
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007066:	b29b      	uxth	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1c8      	bne.n	8006ffe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	2200      	movs	r2, #0
 8007074:	2140      	movs	r1, #64	@ 0x40
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 fec8 	bl	8007e0c <UART_WaitOnFlagUntilTimeout>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2220      	movs	r2, #32
 8007086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e006      	b.n	800709c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2220      	movs	r2, #32
 8007092:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	e000      	b.n	800709c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800709a:	2302      	movs	r3, #2
  }
}
 800709c:	4618      	mov	r0, r3
 800709e:	3720      	adds	r7, #32
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070a8:	b092      	sub	sp, #72	@ 0x48
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	689a      	ldr	r2, [r3, #8]
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	431a      	orrs	r2, r3
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	431a      	orrs	r2, r3
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	69db      	ldr	r3, [r3, #28]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	4bbe      	ldr	r3, [pc, #760]	@ (80073cc <UART_SetConfig+0x328>)
 80070d4:	4013      	ands	r3, r2
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	6812      	ldr	r2, [r2, #0]
 80070da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80070dc:	430b      	orrs	r3, r1
 80070de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	68da      	ldr	r2, [r3, #12]
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4ab3      	ldr	r2, [pc, #716]	@ (80073d0 <UART_SetConfig+0x32c>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d004      	beq.n	8007110 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800710c:	4313      	orrs	r3, r2
 800710e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	689a      	ldr	r2, [r3, #8]
 8007116:	4baf      	ldr	r3, [pc, #700]	@ (80073d4 <UART_SetConfig+0x330>)
 8007118:	4013      	ands	r3, r2
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	6812      	ldr	r2, [r2, #0]
 800711e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007120:	430b      	orrs	r3, r1
 8007122:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712a:	f023 010f 	bic.w	r1, r3, #15
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	430a      	orrs	r2, r1
 8007138:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4aa6      	ldr	r2, [pc, #664]	@ (80073d8 <UART_SetConfig+0x334>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d177      	bne.n	8007234 <UART_SetConfig+0x190>
 8007144:	4ba5      	ldr	r3, [pc, #660]	@ (80073dc <UART_SetConfig+0x338>)
 8007146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007148:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800714c:	2b28      	cmp	r3, #40	@ 0x28
 800714e:	d86d      	bhi.n	800722c <UART_SetConfig+0x188>
 8007150:	a201      	add	r2, pc, #4	@ (adr r2, 8007158 <UART_SetConfig+0xb4>)
 8007152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007156:	bf00      	nop
 8007158:	080071fd 	.word	0x080071fd
 800715c:	0800722d 	.word	0x0800722d
 8007160:	0800722d 	.word	0x0800722d
 8007164:	0800722d 	.word	0x0800722d
 8007168:	0800722d 	.word	0x0800722d
 800716c:	0800722d 	.word	0x0800722d
 8007170:	0800722d 	.word	0x0800722d
 8007174:	0800722d 	.word	0x0800722d
 8007178:	08007205 	.word	0x08007205
 800717c:	0800722d 	.word	0x0800722d
 8007180:	0800722d 	.word	0x0800722d
 8007184:	0800722d 	.word	0x0800722d
 8007188:	0800722d 	.word	0x0800722d
 800718c:	0800722d 	.word	0x0800722d
 8007190:	0800722d 	.word	0x0800722d
 8007194:	0800722d 	.word	0x0800722d
 8007198:	0800720d 	.word	0x0800720d
 800719c:	0800722d 	.word	0x0800722d
 80071a0:	0800722d 	.word	0x0800722d
 80071a4:	0800722d 	.word	0x0800722d
 80071a8:	0800722d 	.word	0x0800722d
 80071ac:	0800722d 	.word	0x0800722d
 80071b0:	0800722d 	.word	0x0800722d
 80071b4:	0800722d 	.word	0x0800722d
 80071b8:	08007215 	.word	0x08007215
 80071bc:	0800722d 	.word	0x0800722d
 80071c0:	0800722d 	.word	0x0800722d
 80071c4:	0800722d 	.word	0x0800722d
 80071c8:	0800722d 	.word	0x0800722d
 80071cc:	0800722d 	.word	0x0800722d
 80071d0:	0800722d 	.word	0x0800722d
 80071d4:	0800722d 	.word	0x0800722d
 80071d8:	0800721d 	.word	0x0800721d
 80071dc:	0800722d 	.word	0x0800722d
 80071e0:	0800722d 	.word	0x0800722d
 80071e4:	0800722d 	.word	0x0800722d
 80071e8:	0800722d 	.word	0x0800722d
 80071ec:	0800722d 	.word	0x0800722d
 80071f0:	0800722d 	.word	0x0800722d
 80071f4:	0800722d 	.word	0x0800722d
 80071f8:	08007225 	.word	0x08007225
 80071fc:	2301      	movs	r3, #1
 80071fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007202:	e222      	b.n	800764a <UART_SetConfig+0x5a6>
 8007204:	2304      	movs	r3, #4
 8007206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800720a:	e21e      	b.n	800764a <UART_SetConfig+0x5a6>
 800720c:	2308      	movs	r3, #8
 800720e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007212:	e21a      	b.n	800764a <UART_SetConfig+0x5a6>
 8007214:	2310      	movs	r3, #16
 8007216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800721a:	e216      	b.n	800764a <UART_SetConfig+0x5a6>
 800721c:	2320      	movs	r3, #32
 800721e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007222:	e212      	b.n	800764a <UART_SetConfig+0x5a6>
 8007224:	2340      	movs	r3, #64	@ 0x40
 8007226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800722a:	e20e      	b.n	800764a <UART_SetConfig+0x5a6>
 800722c:	2380      	movs	r3, #128	@ 0x80
 800722e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007232:	e20a      	b.n	800764a <UART_SetConfig+0x5a6>
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a69      	ldr	r2, [pc, #420]	@ (80073e0 <UART_SetConfig+0x33c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d130      	bne.n	80072a0 <UART_SetConfig+0x1fc>
 800723e:	4b67      	ldr	r3, [pc, #412]	@ (80073dc <UART_SetConfig+0x338>)
 8007240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007242:	f003 0307 	and.w	r3, r3, #7
 8007246:	2b05      	cmp	r3, #5
 8007248:	d826      	bhi.n	8007298 <UART_SetConfig+0x1f4>
 800724a:	a201      	add	r2, pc, #4	@ (adr r2, 8007250 <UART_SetConfig+0x1ac>)
 800724c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007250:	08007269 	.word	0x08007269
 8007254:	08007271 	.word	0x08007271
 8007258:	08007279 	.word	0x08007279
 800725c:	08007281 	.word	0x08007281
 8007260:	08007289 	.word	0x08007289
 8007264:	08007291 	.word	0x08007291
 8007268:	2300      	movs	r3, #0
 800726a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800726e:	e1ec      	b.n	800764a <UART_SetConfig+0x5a6>
 8007270:	2304      	movs	r3, #4
 8007272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007276:	e1e8      	b.n	800764a <UART_SetConfig+0x5a6>
 8007278:	2308      	movs	r3, #8
 800727a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800727e:	e1e4      	b.n	800764a <UART_SetConfig+0x5a6>
 8007280:	2310      	movs	r3, #16
 8007282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007286:	e1e0      	b.n	800764a <UART_SetConfig+0x5a6>
 8007288:	2320      	movs	r3, #32
 800728a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800728e:	e1dc      	b.n	800764a <UART_SetConfig+0x5a6>
 8007290:	2340      	movs	r3, #64	@ 0x40
 8007292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007296:	e1d8      	b.n	800764a <UART_SetConfig+0x5a6>
 8007298:	2380      	movs	r3, #128	@ 0x80
 800729a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800729e:	e1d4      	b.n	800764a <UART_SetConfig+0x5a6>
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a4f      	ldr	r2, [pc, #316]	@ (80073e4 <UART_SetConfig+0x340>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d130      	bne.n	800730c <UART_SetConfig+0x268>
 80072aa:	4b4c      	ldr	r3, [pc, #304]	@ (80073dc <UART_SetConfig+0x338>)
 80072ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ae:	f003 0307 	and.w	r3, r3, #7
 80072b2:	2b05      	cmp	r3, #5
 80072b4:	d826      	bhi.n	8007304 <UART_SetConfig+0x260>
 80072b6:	a201      	add	r2, pc, #4	@ (adr r2, 80072bc <UART_SetConfig+0x218>)
 80072b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072bc:	080072d5 	.word	0x080072d5
 80072c0:	080072dd 	.word	0x080072dd
 80072c4:	080072e5 	.word	0x080072e5
 80072c8:	080072ed 	.word	0x080072ed
 80072cc:	080072f5 	.word	0x080072f5
 80072d0:	080072fd 	.word	0x080072fd
 80072d4:	2300      	movs	r3, #0
 80072d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072da:	e1b6      	b.n	800764a <UART_SetConfig+0x5a6>
 80072dc:	2304      	movs	r3, #4
 80072de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072e2:	e1b2      	b.n	800764a <UART_SetConfig+0x5a6>
 80072e4:	2308      	movs	r3, #8
 80072e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ea:	e1ae      	b.n	800764a <UART_SetConfig+0x5a6>
 80072ec:	2310      	movs	r3, #16
 80072ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072f2:	e1aa      	b.n	800764a <UART_SetConfig+0x5a6>
 80072f4:	2320      	movs	r3, #32
 80072f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072fa:	e1a6      	b.n	800764a <UART_SetConfig+0x5a6>
 80072fc:	2340      	movs	r3, #64	@ 0x40
 80072fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007302:	e1a2      	b.n	800764a <UART_SetConfig+0x5a6>
 8007304:	2380      	movs	r3, #128	@ 0x80
 8007306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800730a:	e19e      	b.n	800764a <UART_SetConfig+0x5a6>
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a35      	ldr	r2, [pc, #212]	@ (80073e8 <UART_SetConfig+0x344>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d130      	bne.n	8007378 <UART_SetConfig+0x2d4>
 8007316:	4b31      	ldr	r3, [pc, #196]	@ (80073dc <UART_SetConfig+0x338>)
 8007318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800731a:	f003 0307 	and.w	r3, r3, #7
 800731e:	2b05      	cmp	r3, #5
 8007320:	d826      	bhi.n	8007370 <UART_SetConfig+0x2cc>
 8007322:	a201      	add	r2, pc, #4	@ (adr r2, 8007328 <UART_SetConfig+0x284>)
 8007324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007328:	08007341 	.word	0x08007341
 800732c:	08007349 	.word	0x08007349
 8007330:	08007351 	.word	0x08007351
 8007334:	08007359 	.word	0x08007359
 8007338:	08007361 	.word	0x08007361
 800733c:	08007369 	.word	0x08007369
 8007340:	2300      	movs	r3, #0
 8007342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007346:	e180      	b.n	800764a <UART_SetConfig+0x5a6>
 8007348:	2304      	movs	r3, #4
 800734a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800734e:	e17c      	b.n	800764a <UART_SetConfig+0x5a6>
 8007350:	2308      	movs	r3, #8
 8007352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007356:	e178      	b.n	800764a <UART_SetConfig+0x5a6>
 8007358:	2310      	movs	r3, #16
 800735a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800735e:	e174      	b.n	800764a <UART_SetConfig+0x5a6>
 8007360:	2320      	movs	r3, #32
 8007362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007366:	e170      	b.n	800764a <UART_SetConfig+0x5a6>
 8007368:	2340      	movs	r3, #64	@ 0x40
 800736a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800736e:	e16c      	b.n	800764a <UART_SetConfig+0x5a6>
 8007370:	2380      	movs	r3, #128	@ 0x80
 8007372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007376:	e168      	b.n	800764a <UART_SetConfig+0x5a6>
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a1b      	ldr	r2, [pc, #108]	@ (80073ec <UART_SetConfig+0x348>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d142      	bne.n	8007408 <UART_SetConfig+0x364>
 8007382:	4b16      	ldr	r3, [pc, #88]	@ (80073dc <UART_SetConfig+0x338>)
 8007384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007386:	f003 0307 	and.w	r3, r3, #7
 800738a:	2b05      	cmp	r3, #5
 800738c:	d838      	bhi.n	8007400 <UART_SetConfig+0x35c>
 800738e:	a201      	add	r2, pc, #4	@ (adr r2, 8007394 <UART_SetConfig+0x2f0>)
 8007390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007394:	080073ad 	.word	0x080073ad
 8007398:	080073b5 	.word	0x080073b5
 800739c:	080073bd 	.word	0x080073bd
 80073a0:	080073c5 	.word	0x080073c5
 80073a4:	080073f1 	.word	0x080073f1
 80073a8:	080073f9 	.word	0x080073f9
 80073ac:	2300      	movs	r3, #0
 80073ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073b2:	e14a      	b.n	800764a <UART_SetConfig+0x5a6>
 80073b4:	2304      	movs	r3, #4
 80073b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ba:	e146      	b.n	800764a <UART_SetConfig+0x5a6>
 80073bc:	2308      	movs	r3, #8
 80073be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073c2:	e142      	b.n	800764a <UART_SetConfig+0x5a6>
 80073c4:	2310      	movs	r3, #16
 80073c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ca:	e13e      	b.n	800764a <UART_SetConfig+0x5a6>
 80073cc:	cfff69f3 	.word	0xcfff69f3
 80073d0:	58000c00 	.word	0x58000c00
 80073d4:	11fff4ff 	.word	0x11fff4ff
 80073d8:	40011000 	.word	0x40011000
 80073dc:	58024400 	.word	0x58024400
 80073e0:	40004400 	.word	0x40004400
 80073e4:	40004800 	.word	0x40004800
 80073e8:	40004c00 	.word	0x40004c00
 80073ec:	40005000 	.word	0x40005000
 80073f0:	2320      	movs	r3, #32
 80073f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073f6:	e128      	b.n	800764a <UART_SetConfig+0x5a6>
 80073f8:	2340      	movs	r3, #64	@ 0x40
 80073fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073fe:	e124      	b.n	800764a <UART_SetConfig+0x5a6>
 8007400:	2380      	movs	r3, #128	@ 0x80
 8007402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007406:	e120      	b.n	800764a <UART_SetConfig+0x5a6>
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4acb      	ldr	r2, [pc, #812]	@ (800773c <UART_SetConfig+0x698>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d176      	bne.n	8007500 <UART_SetConfig+0x45c>
 8007412:	4bcb      	ldr	r3, [pc, #812]	@ (8007740 <UART_SetConfig+0x69c>)
 8007414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007416:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800741a:	2b28      	cmp	r3, #40	@ 0x28
 800741c:	d86c      	bhi.n	80074f8 <UART_SetConfig+0x454>
 800741e:	a201      	add	r2, pc, #4	@ (adr r2, 8007424 <UART_SetConfig+0x380>)
 8007420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007424:	080074c9 	.word	0x080074c9
 8007428:	080074f9 	.word	0x080074f9
 800742c:	080074f9 	.word	0x080074f9
 8007430:	080074f9 	.word	0x080074f9
 8007434:	080074f9 	.word	0x080074f9
 8007438:	080074f9 	.word	0x080074f9
 800743c:	080074f9 	.word	0x080074f9
 8007440:	080074f9 	.word	0x080074f9
 8007444:	080074d1 	.word	0x080074d1
 8007448:	080074f9 	.word	0x080074f9
 800744c:	080074f9 	.word	0x080074f9
 8007450:	080074f9 	.word	0x080074f9
 8007454:	080074f9 	.word	0x080074f9
 8007458:	080074f9 	.word	0x080074f9
 800745c:	080074f9 	.word	0x080074f9
 8007460:	080074f9 	.word	0x080074f9
 8007464:	080074d9 	.word	0x080074d9
 8007468:	080074f9 	.word	0x080074f9
 800746c:	080074f9 	.word	0x080074f9
 8007470:	080074f9 	.word	0x080074f9
 8007474:	080074f9 	.word	0x080074f9
 8007478:	080074f9 	.word	0x080074f9
 800747c:	080074f9 	.word	0x080074f9
 8007480:	080074f9 	.word	0x080074f9
 8007484:	080074e1 	.word	0x080074e1
 8007488:	080074f9 	.word	0x080074f9
 800748c:	080074f9 	.word	0x080074f9
 8007490:	080074f9 	.word	0x080074f9
 8007494:	080074f9 	.word	0x080074f9
 8007498:	080074f9 	.word	0x080074f9
 800749c:	080074f9 	.word	0x080074f9
 80074a0:	080074f9 	.word	0x080074f9
 80074a4:	080074e9 	.word	0x080074e9
 80074a8:	080074f9 	.word	0x080074f9
 80074ac:	080074f9 	.word	0x080074f9
 80074b0:	080074f9 	.word	0x080074f9
 80074b4:	080074f9 	.word	0x080074f9
 80074b8:	080074f9 	.word	0x080074f9
 80074bc:	080074f9 	.word	0x080074f9
 80074c0:	080074f9 	.word	0x080074f9
 80074c4:	080074f1 	.word	0x080074f1
 80074c8:	2301      	movs	r3, #1
 80074ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ce:	e0bc      	b.n	800764a <UART_SetConfig+0x5a6>
 80074d0:	2304      	movs	r3, #4
 80074d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074d6:	e0b8      	b.n	800764a <UART_SetConfig+0x5a6>
 80074d8:	2308      	movs	r3, #8
 80074da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074de:	e0b4      	b.n	800764a <UART_SetConfig+0x5a6>
 80074e0:	2310      	movs	r3, #16
 80074e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074e6:	e0b0      	b.n	800764a <UART_SetConfig+0x5a6>
 80074e8:	2320      	movs	r3, #32
 80074ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ee:	e0ac      	b.n	800764a <UART_SetConfig+0x5a6>
 80074f0:	2340      	movs	r3, #64	@ 0x40
 80074f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074f6:	e0a8      	b.n	800764a <UART_SetConfig+0x5a6>
 80074f8:	2380      	movs	r3, #128	@ 0x80
 80074fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074fe:	e0a4      	b.n	800764a <UART_SetConfig+0x5a6>
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a8f      	ldr	r2, [pc, #572]	@ (8007744 <UART_SetConfig+0x6a0>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d130      	bne.n	800756c <UART_SetConfig+0x4c8>
 800750a:	4b8d      	ldr	r3, [pc, #564]	@ (8007740 <UART_SetConfig+0x69c>)
 800750c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800750e:	f003 0307 	and.w	r3, r3, #7
 8007512:	2b05      	cmp	r3, #5
 8007514:	d826      	bhi.n	8007564 <UART_SetConfig+0x4c0>
 8007516:	a201      	add	r2, pc, #4	@ (adr r2, 800751c <UART_SetConfig+0x478>)
 8007518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751c:	08007535 	.word	0x08007535
 8007520:	0800753d 	.word	0x0800753d
 8007524:	08007545 	.word	0x08007545
 8007528:	0800754d 	.word	0x0800754d
 800752c:	08007555 	.word	0x08007555
 8007530:	0800755d 	.word	0x0800755d
 8007534:	2300      	movs	r3, #0
 8007536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800753a:	e086      	b.n	800764a <UART_SetConfig+0x5a6>
 800753c:	2304      	movs	r3, #4
 800753e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007542:	e082      	b.n	800764a <UART_SetConfig+0x5a6>
 8007544:	2308      	movs	r3, #8
 8007546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800754a:	e07e      	b.n	800764a <UART_SetConfig+0x5a6>
 800754c:	2310      	movs	r3, #16
 800754e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007552:	e07a      	b.n	800764a <UART_SetConfig+0x5a6>
 8007554:	2320      	movs	r3, #32
 8007556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800755a:	e076      	b.n	800764a <UART_SetConfig+0x5a6>
 800755c:	2340      	movs	r3, #64	@ 0x40
 800755e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007562:	e072      	b.n	800764a <UART_SetConfig+0x5a6>
 8007564:	2380      	movs	r3, #128	@ 0x80
 8007566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800756a:	e06e      	b.n	800764a <UART_SetConfig+0x5a6>
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a75      	ldr	r2, [pc, #468]	@ (8007748 <UART_SetConfig+0x6a4>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d130      	bne.n	80075d8 <UART_SetConfig+0x534>
 8007576:	4b72      	ldr	r3, [pc, #456]	@ (8007740 <UART_SetConfig+0x69c>)
 8007578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800757a:	f003 0307 	and.w	r3, r3, #7
 800757e:	2b05      	cmp	r3, #5
 8007580:	d826      	bhi.n	80075d0 <UART_SetConfig+0x52c>
 8007582:	a201      	add	r2, pc, #4	@ (adr r2, 8007588 <UART_SetConfig+0x4e4>)
 8007584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007588:	080075a1 	.word	0x080075a1
 800758c:	080075a9 	.word	0x080075a9
 8007590:	080075b1 	.word	0x080075b1
 8007594:	080075b9 	.word	0x080075b9
 8007598:	080075c1 	.word	0x080075c1
 800759c:	080075c9 	.word	0x080075c9
 80075a0:	2300      	movs	r3, #0
 80075a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075a6:	e050      	b.n	800764a <UART_SetConfig+0x5a6>
 80075a8:	2304      	movs	r3, #4
 80075aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ae:	e04c      	b.n	800764a <UART_SetConfig+0x5a6>
 80075b0:	2308      	movs	r3, #8
 80075b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075b6:	e048      	b.n	800764a <UART_SetConfig+0x5a6>
 80075b8:	2310      	movs	r3, #16
 80075ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075be:	e044      	b.n	800764a <UART_SetConfig+0x5a6>
 80075c0:	2320      	movs	r3, #32
 80075c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075c6:	e040      	b.n	800764a <UART_SetConfig+0x5a6>
 80075c8:	2340      	movs	r3, #64	@ 0x40
 80075ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ce:	e03c      	b.n	800764a <UART_SetConfig+0x5a6>
 80075d0:	2380      	movs	r3, #128	@ 0x80
 80075d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075d6:	e038      	b.n	800764a <UART_SetConfig+0x5a6>
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a5b      	ldr	r2, [pc, #364]	@ (800774c <UART_SetConfig+0x6a8>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d130      	bne.n	8007644 <UART_SetConfig+0x5a0>
 80075e2:	4b57      	ldr	r3, [pc, #348]	@ (8007740 <UART_SetConfig+0x69c>)
 80075e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	2b05      	cmp	r3, #5
 80075ec:	d826      	bhi.n	800763c <UART_SetConfig+0x598>
 80075ee:	a201      	add	r2, pc, #4	@ (adr r2, 80075f4 <UART_SetConfig+0x550>)
 80075f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f4:	0800760d 	.word	0x0800760d
 80075f8:	08007615 	.word	0x08007615
 80075fc:	0800761d 	.word	0x0800761d
 8007600:	08007625 	.word	0x08007625
 8007604:	0800762d 	.word	0x0800762d
 8007608:	08007635 	.word	0x08007635
 800760c:	2302      	movs	r3, #2
 800760e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007612:	e01a      	b.n	800764a <UART_SetConfig+0x5a6>
 8007614:	2304      	movs	r3, #4
 8007616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800761a:	e016      	b.n	800764a <UART_SetConfig+0x5a6>
 800761c:	2308      	movs	r3, #8
 800761e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007622:	e012      	b.n	800764a <UART_SetConfig+0x5a6>
 8007624:	2310      	movs	r3, #16
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800762a:	e00e      	b.n	800764a <UART_SetConfig+0x5a6>
 800762c:	2320      	movs	r3, #32
 800762e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007632:	e00a      	b.n	800764a <UART_SetConfig+0x5a6>
 8007634:	2340      	movs	r3, #64	@ 0x40
 8007636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800763a:	e006      	b.n	800764a <UART_SetConfig+0x5a6>
 800763c:	2380      	movs	r3, #128	@ 0x80
 800763e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007642:	e002      	b.n	800764a <UART_SetConfig+0x5a6>
 8007644:	2380      	movs	r3, #128	@ 0x80
 8007646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a3f      	ldr	r2, [pc, #252]	@ (800774c <UART_SetConfig+0x6a8>)
 8007650:	4293      	cmp	r3, r2
 8007652:	f040 80f8 	bne.w	8007846 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007656:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800765a:	2b20      	cmp	r3, #32
 800765c:	dc46      	bgt.n	80076ec <UART_SetConfig+0x648>
 800765e:	2b02      	cmp	r3, #2
 8007660:	f2c0 8082 	blt.w	8007768 <UART_SetConfig+0x6c4>
 8007664:	3b02      	subs	r3, #2
 8007666:	2b1e      	cmp	r3, #30
 8007668:	d87e      	bhi.n	8007768 <UART_SetConfig+0x6c4>
 800766a:	a201      	add	r2, pc, #4	@ (adr r2, 8007670 <UART_SetConfig+0x5cc>)
 800766c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007670:	080076f3 	.word	0x080076f3
 8007674:	08007769 	.word	0x08007769
 8007678:	080076fb 	.word	0x080076fb
 800767c:	08007769 	.word	0x08007769
 8007680:	08007769 	.word	0x08007769
 8007684:	08007769 	.word	0x08007769
 8007688:	0800770b 	.word	0x0800770b
 800768c:	08007769 	.word	0x08007769
 8007690:	08007769 	.word	0x08007769
 8007694:	08007769 	.word	0x08007769
 8007698:	08007769 	.word	0x08007769
 800769c:	08007769 	.word	0x08007769
 80076a0:	08007769 	.word	0x08007769
 80076a4:	08007769 	.word	0x08007769
 80076a8:	0800771b 	.word	0x0800771b
 80076ac:	08007769 	.word	0x08007769
 80076b0:	08007769 	.word	0x08007769
 80076b4:	08007769 	.word	0x08007769
 80076b8:	08007769 	.word	0x08007769
 80076bc:	08007769 	.word	0x08007769
 80076c0:	08007769 	.word	0x08007769
 80076c4:	08007769 	.word	0x08007769
 80076c8:	08007769 	.word	0x08007769
 80076cc:	08007769 	.word	0x08007769
 80076d0:	08007769 	.word	0x08007769
 80076d4:	08007769 	.word	0x08007769
 80076d8:	08007769 	.word	0x08007769
 80076dc:	08007769 	.word	0x08007769
 80076e0:	08007769 	.word	0x08007769
 80076e4:	08007769 	.word	0x08007769
 80076e8:	0800775b 	.word	0x0800775b
 80076ec:	2b40      	cmp	r3, #64	@ 0x40
 80076ee:	d037      	beq.n	8007760 <UART_SetConfig+0x6bc>
 80076f0:	e03a      	b.n	8007768 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80076f2:	f7fd fa87 	bl	8004c04 <HAL_RCCEx_GetD3PCLK1Freq>
 80076f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076f8:	e03c      	b.n	8007774 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fd fa96 	bl	8004c30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007708:	e034      	b.n	8007774 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800770a:	f107 0318 	add.w	r3, r7, #24
 800770e:	4618      	mov	r0, r3
 8007710:	f7fd fbe2 	bl	8004ed8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007718:	e02c      	b.n	8007774 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800771a:	4b09      	ldr	r3, [pc, #36]	@ (8007740 <UART_SetConfig+0x69c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0320 	and.w	r3, r3, #32
 8007722:	2b00      	cmp	r3, #0
 8007724:	d016      	beq.n	8007754 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007726:	4b06      	ldr	r3, [pc, #24]	@ (8007740 <UART_SetConfig+0x69c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	08db      	lsrs	r3, r3, #3
 800772c:	f003 0303 	and.w	r3, r3, #3
 8007730:	4a07      	ldr	r2, [pc, #28]	@ (8007750 <UART_SetConfig+0x6ac>)
 8007732:	fa22 f303 	lsr.w	r3, r2, r3
 8007736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007738:	e01c      	b.n	8007774 <UART_SetConfig+0x6d0>
 800773a:	bf00      	nop
 800773c:	40011400 	.word	0x40011400
 8007740:	58024400 	.word	0x58024400
 8007744:	40007800 	.word	0x40007800
 8007748:	40007c00 	.word	0x40007c00
 800774c:	58000c00 	.word	0x58000c00
 8007750:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007754:	4b9d      	ldr	r3, [pc, #628]	@ (80079cc <UART_SetConfig+0x928>)
 8007756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007758:	e00c      	b.n	8007774 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800775a:	4b9d      	ldr	r3, [pc, #628]	@ (80079d0 <UART_SetConfig+0x92c>)
 800775c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800775e:	e009      	b.n	8007774 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007760:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007766:	e005      	b.n	8007774 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007768:	2300      	movs	r3, #0
 800776a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007772:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007776:	2b00      	cmp	r3, #0
 8007778:	f000 81de 	beq.w	8007b38 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007780:	4a94      	ldr	r2, [pc, #592]	@ (80079d4 <UART_SetConfig+0x930>)
 8007782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007786:	461a      	mov	r2, r3
 8007788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800778a:	fbb3 f3f2 	udiv	r3, r3, r2
 800778e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	685a      	ldr	r2, [r3, #4]
 8007794:	4613      	mov	r3, r2
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	4413      	add	r3, r2
 800779a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800779c:	429a      	cmp	r2, r3
 800779e:	d305      	bcc.n	80077ac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d903      	bls.n	80077b4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80077b2:	e1c1      	b.n	8007b38 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077b6:	2200      	movs	r2, #0
 80077b8:	60bb      	str	r3, [r7, #8]
 80077ba:	60fa      	str	r2, [r7, #12]
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c0:	4a84      	ldr	r2, [pc, #528]	@ (80079d4 <UART_SetConfig+0x930>)
 80077c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	2200      	movs	r2, #0
 80077ca:	603b      	str	r3, [r7, #0]
 80077cc:	607a      	str	r2, [r7, #4]
 80077ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077d6:	f7f8 fdd3 	bl	8000380 <__aeabi_uldivmod>
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	4610      	mov	r0, r2
 80077e0:	4619      	mov	r1, r3
 80077e2:	f04f 0200 	mov.w	r2, #0
 80077e6:	f04f 0300 	mov.w	r3, #0
 80077ea:	020b      	lsls	r3, r1, #8
 80077ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077f0:	0202      	lsls	r2, r0, #8
 80077f2:	6979      	ldr	r1, [r7, #20]
 80077f4:	6849      	ldr	r1, [r1, #4]
 80077f6:	0849      	lsrs	r1, r1, #1
 80077f8:	2000      	movs	r0, #0
 80077fa:	460c      	mov	r4, r1
 80077fc:	4605      	mov	r5, r0
 80077fe:	eb12 0804 	adds.w	r8, r2, r4
 8007802:	eb43 0905 	adc.w	r9, r3, r5
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	469a      	mov	sl, r3
 800780e:	4693      	mov	fp, r2
 8007810:	4652      	mov	r2, sl
 8007812:	465b      	mov	r3, fp
 8007814:	4640      	mov	r0, r8
 8007816:	4649      	mov	r1, r9
 8007818:	f7f8 fdb2 	bl	8000380 <__aeabi_uldivmod>
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	4613      	mov	r3, r2
 8007822:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007826:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800782a:	d308      	bcc.n	800783e <UART_SetConfig+0x79a>
 800782c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800782e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007832:	d204      	bcs.n	800783e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800783a:	60da      	str	r2, [r3, #12]
 800783c:	e17c      	b.n	8007b38 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007844:	e178      	b.n	8007b38 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	69db      	ldr	r3, [r3, #28]
 800784a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800784e:	f040 80c5 	bne.w	80079dc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007852:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007856:	2b20      	cmp	r3, #32
 8007858:	dc48      	bgt.n	80078ec <UART_SetConfig+0x848>
 800785a:	2b00      	cmp	r3, #0
 800785c:	db7b      	blt.n	8007956 <UART_SetConfig+0x8b2>
 800785e:	2b20      	cmp	r3, #32
 8007860:	d879      	bhi.n	8007956 <UART_SetConfig+0x8b2>
 8007862:	a201      	add	r2, pc, #4	@ (adr r2, 8007868 <UART_SetConfig+0x7c4>)
 8007864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007868:	080078f3 	.word	0x080078f3
 800786c:	080078fb 	.word	0x080078fb
 8007870:	08007957 	.word	0x08007957
 8007874:	08007957 	.word	0x08007957
 8007878:	08007903 	.word	0x08007903
 800787c:	08007957 	.word	0x08007957
 8007880:	08007957 	.word	0x08007957
 8007884:	08007957 	.word	0x08007957
 8007888:	08007913 	.word	0x08007913
 800788c:	08007957 	.word	0x08007957
 8007890:	08007957 	.word	0x08007957
 8007894:	08007957 	.word	0x08007957
 8007898:	08007957 	.word	0x08007957
 800789c:	08007957 	.word	0x08007957
 80078a0:	08007957 	.word	0x08007957
 80078a4:	08007957 	.word	0x08007957
 80078a8:	08007923 	.word	0x08007923
 80078ac:	08007957 	.word	0x08007957
 80078b0:	08007957 	.word	0x08007957
 80078b4:	08007957 	.word	0x08007957
 80078b8:	08007957 	.word	0x08007957
 80078bc:	08007957 	.word	0x08007957
 80078c0:	08007957 	.word	0x08007957
 80078c4:	08007957 	.word	0x08007957
 80078c8:	08007957 	.word	0x08007957
 80078cc:	08007957 	.word	0x08007957
 80078d0:	08007957 	.word	0x08007957
 80078d4:	08007957 	.word	0x08007957
 80078d8:	08007957 	.word	0x08007957
 80078dc:	08007957 	.word	0x08007957
 80078e0:	08007957 	.word	0x08007957
 80078e4:	08007957 	.word	0x08007957
 80078e8:	08007949 	.word	0x08007949
 80078ec:	2b40      	cmp	r3, #64	@ 0x40
 80078ee:	d02e      	beq.n	800794e <UART_SetConfig+0x8aa>
 80078f0:	e031      	b.n	8007956 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078f2:	f7fb fecf 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 80078f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80078f8:	e033      	b.n	8007962 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078fa:	f7fb fee1 	bl	80036c0 <HAL_RCC_GetPCLK2Freq>
 80078fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007900:	e02f      	b.n	8007962 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007906:	4618      	mov	r0, r3
 8007908:	f7fd f992 	bl	8004c30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800790c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800790e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007910:	e027      	b.n	8007962 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007912:	f107 0318 	add.w	r3, r7, #24
 8007916:	4618      	mov	r0, r3
 8007918:	f7fd fade 	bl	8004ed8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007920:	e01f      	b.n	8007962 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007922:	4b2d      	ldr	r3, [pc, #180]	@ (80079d8 <UART_SetConfig+0x934>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0320 	and.w	r3, r3, #32
 800792a:	2b00      	cmp	r3, #0
 800792c:	d009      	beq.n	8007942 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800792e:	4b2a      	ldr	r3, [pc, #168]	@ (80079d8 <UART_SetConfig+0x934>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	08db      	lsrs	r3, r3, #3
 8007934:	f003 0303 	and.w	r3, r3, #3
 8007938:	4a24      	ldr	r2, [pc, #144]	@ (80079cc <UART_SetConfig+0x928>)
 800793a:	fa22 f303 	lsr.w	r3, r2, r3
 800793e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007940:	e00f      	b.n	8007962 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007942:	4b22      	ldr	r3, [pc, #136]	@ (80079cc <UART_SetConfig+0x928>)
 8007944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007946:	e00c      	b.n	8007962 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007948:	4b21      	ldr	r3, [pc, #132]	@ (80079d0 <UART_SetConfig+0x92c>)
 800794a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800794c:	e009      	b.n	8007962 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800794e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007954:	e005      	b.n	8007962 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007960:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 80e7 	beq.w	8007b38 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800796e:	4a19      	ldr	r2, [pc, #100]	@ (80079d4 <UART_SetConfig+0x930>)
 8007970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007974:	461a      	mov	r2, r3
 8007976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007978:	fbb3 f3f2 	udiv	r3, r3, r2
 800797c:	005a      	lsls	r2, r3, #1
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	085b      	lsrs	r3, r3, #1
 8007984:	441a      	add	r2, r3
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	fbb2 f3f3 	udiv	r3, r2, r3
 800798e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007992:	2b0f      	cmp	r3, #15
 8007994:	d916      	bls.n	80079c4 <UART_SetConfig+0x920>
 8007996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800799c:	d212      	bcs.n	80079c4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800799e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	f023 030f 	bic.w	r3, r3, #15
 80079a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079aa:	085b      	lsrs	r3, r3, #1
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	f003 0307 	and.w	r3, r3, #7
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80079b6:	4313      	orrs	r3, r2
 80079b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80079c0:	60da      	str	r2, [r3, #12]
 80079c2:	e0b9      	b.n	8007b38 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80079ca:	e0b5      	b.n	8007b38 <UART_SetConfig+0xa94>
 80079cc:	03d09000 	.word	0x03d09000
 80079d0:	003d0900 	.word	0x003d0900
 80079d4:	08009868 	.word	0x08009868
 80079d8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80079dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80079e0:	2b20      	cmp	r3, #32
 80079e2:	dc49      	bgt.n	8007a78 <UART_SetConfig+0x9d4>
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	db7c      	blt.n	8007ae2 <UART_SetConfig+0xa3e>
 80079e8:	2b20      	cmp	r3, #32
 80079ea:	d87a      	bhi.n	8007ae2 <UART_SetConfig+0xa3e>
 80079ec:	a201      	add	r2, pc, #4	@ (adr r2, 80079f4 <UART_SetConfig+0x950>)
 80079ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f2:	bf00      	nop
 80079f4:	08007a7f 	.word	0x08007a7f
 80079f8:	08007a87 	.word	0x08007a87
 80079fc:	08007ae3 	.word	0x08007ae3
 8007a00:	08007ae3 	.word	0x08007ae3
 8007a04:	08007a8f 	.word	0x08007a8f
 8007a08:	08007ae3 	.word	0x08007ae3
 8007a0c:	08007ae3 	.word	0x08007ae3
 8007a10:	08007ae3 	.word	0x08007ae3
 8007a14:	08007a9f 	.word	0x08007a9f
 8007a18:	08007ae3 	.word	0x08007ae3
 8007a1c:	08007ae3 	.word	0x08007ae3
 8007a20:	08007ae3 	.word	0x08007ae3
 8007a24:	08007ae3 	.word	0x08007ae3
 8007a28:	08007ae3 	.word	0x08007ae3
 8007a2c:	08007ae3 	.word	0x08007ae3
 8007a30:	08007ae3 	.word	0x08007ae3
 8007a34:	08007aaf 	.word	0x08007aaf
 8007a38:	08007ae3 	.word	0x08007ae3
 8007a3c:	08007ae3 	.word	0x08007ae3
 8007a40:	08007ae3 	.word	0x08007ae3
 8007a44:	08007ae3 	.word	0x08007ae3
 8007a48:	08007ae3 	.word	0x08007ae3
 8007a4c:	08007ae3 	.word	0x08007ae3
 8007a50:	08007ae3 	.word	0x08007ae3
 8007a54:	08007ae3 	.word	0x08007ae3
 8007a58:	08007ae3 	.word	0x08007ae3
 8007a5c:	08007ae3 	.word	0x08007ae3
 8007a60:	08007ae3 	.word	0x08007ae3
 8007a64:	08007ae3 	.word	0x08007ae3
 8007a68:	08007ae3 	.word	0x08007ae3
 8007a6c:	08007ae3 	.word	0x08007ae3
 8007a70:	08007ae3 	.word	0x08007ae3
 8007a74:	08007ad5 	.word	0x08007ad5
 8007a78:	2b40      	cmp	r3, #64	@ 0x40
 8007a7a:	d02e      	beq.n	8007ada <UART_SetConfig+0xa36>
 8007a7c:	e031      	b.n	8007ae2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a7e:	f7fb fe09 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 8007a82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a84:	e033      	b.n	8007aee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a86:	f7fb fe1b 	bl	80036c0 <HAL_RCC_GetPCLK2Freq>
 8007a8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a8c:	e02f      	b.n	8007aee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fd f8cc 	bl	8004c30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a9c:	e027      	b.n	8007aee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a9e:	f107 0318 	add.w	r3, r7, #24
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fd fa18 	bl	8004ed8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aac:	e01f      	b.n	8007aee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007aae:	4b2d      	ldr	r3, [pc, #180]	@ (8007b64 <UART_SetConfig+0xac0>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 0320 	and.w	r3, r3, #32
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d009      	beq.n	8007ace <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007aba:	4b2a      	ldr	r3, [pc, #168]	@ (8007b64 <UART_SetConfig+0xac0>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	08db      	lsrs	r3, r3, #3
 8007ac0:	f003 0303 	and.w	r3, r3, #3
 8007ac4:	4a28      	ldr	r2, [pc, #160]	@ (8007b68 <UART_SetConfig+0xac4>)
 8007ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8007aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007acc:	e00f      	b.n	8007aee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007ace:	4b26      	ldr	r3, [pc, #152]	@ (8007b68 <UART_SetConfig+0xac4>)
 8007ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ad2:	e00c      	b.n	8007aee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ad4:	4b25      	ldr	r3, [pc, #148]	@ (8007b6c <UART_SetConfig+0xac8>)
 8007ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ad8:	e009      	b.n	8007aee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ada:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ae0:	e005      	b.n	8007aee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007aec:	bf00      	nop
    }

    if (pclk != 0U)
 8007aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d021      	beq.n	8007b38 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b70 <UART_SetConfig+0xacc>)
 8007afa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007afe:	461a      	mov	r2, r3
 8007b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b02:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	085b      	lsrs	r3, r3, #1
 8007b0c:	441a      	add	r2, r3
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b16:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b1a:	2b0f      	cmp	r3, #15
 8007b1c:	d909      	bls.n	8007b32 <UART_SetConfig+0xa8e>
 8007b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b24:	d205      	bcs.n	8007b32 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	60da      	str	r2, [r3, #12]
 8007b30:	e002      	b.n	8007b38 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	2200      	movs	r2, #0
 8007b52:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007b54:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3748      	adds	r7, #72	@ 0x48
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b62:	bf00      	nop
 8007b64:	58024400 	.word	0x58024400
 8007b68:	03d09000 	.word	0x03d09000
 8007b6c:	003d0900 	.word	0x003d0900
 8007b70:	08009868 	.word	0x08009868

08007b74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b80:	f003 0308 	and.w	r3, r3, #8
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00a      	beq.n	8007b9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	430a      	orrs	r2, r1
 8007b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00a      	beq.n	8007bc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00a      	beq.n	8007be2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be6:	f003 0304 	and.w	r3, r3, #4
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c08:	f003 0310 	and.w	r3, r3, #16
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00a      	beq.n	8007c26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2a:	f003 0320 	and.w	r3, r3, #32
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	430a      	orrs	r2, r1
 8007c46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d01a      	beq.n	8007c8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c72:	d10a      	bne.n	8007c8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00a      	beq.n	8007cac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	605a      	str	r2, [r3, #4]
  }
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b098      	sub	sp, #96	@ 0x60
 8007cbc:	af02      	add	r7, sp, #8
 8007cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cc8:	f7fa f940 	bl	8001f4c <HAL_GetTick>
 8007ccc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0308 	and.w	r3, r3, #8
 8007cd8:	2b08      	cmp	r3, #8
 8007cda:	d12f      	bne.n	8007d3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f88e 	bl	8007e0c <UART_WaitOnFlagUntilTimeout>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d022      	beq.n	8007d3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfe:	e853 3f00 	ldrex	r3, [r3]
 8007d02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	461a      	mov	r2, r3
 8007d12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d14:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d16:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d1c:	e841 2300 	strex	r3, r2, [r1]
 8007d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1e6      	bne.n	8007cf6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2220      	movs	r2, #32
 8007d2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e063      	b.n	8007e04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0304 	and.w	r3, r3, #4
 8007d46:	2b04      	cmp	r3, #4
 8007d48:	d149      	bne.n	8007dde <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d52:	2200      	movs	r2, #0
 8007d54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f857 	bl	8007e0c <UART_WaitOnFlagUntilTimeout>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d03c      	beq.n	8007dde <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d6c:	e853 3f00 	ldrex	r3, [r3]
 8007d70:	623b      	str	r3, [r7, #32]
   return(result);
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d82:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d84:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d8a:	e841 2300 	strex	r3, r2, [r1]
 8007d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1e6      	bne.n	8007d64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3308      	adds	r3, #8
 8007d9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f023 0301 	bic.w	r3, r3, #1
 8007dac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3308      	adds	r3, #8
 8007db4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007db6:	61fa      	str	r2, [r7, #28]
 8007db8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dba:	69b9      	ldr	r1, [r7, #24]
 8007dbc:	69fa      	ldr	r2, [r7, #28]
 8007dbe:	e841 2300 	strex	r3, r2, [r1]
 8007dc2:	617b      	str	r3, [r7, #20]
   return(result);
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1e5      	bne.n	8007d96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e012      	b.n	8007e04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2220      	movs	r2, #32
 8007de2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2220      	movs	r2, #32
 8007dea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3758      	adds	r7, #88	@ 0x58
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e1c:	e04f      	b.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e24:	d04b      	beq.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e26:	f7fa f891 	bl	8001f4c <HAL_GetTick>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d302      	bcc.n	8007e3c <UART_WaitOnFlagUntilTimeout+0x30>
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d101      	bne.n	8007e40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e04e      	b.n	8007ede <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 0304 	and.w	r3, r3, #4
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d037      	beq.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	2b80      	cmp	r3, #128	@ 0x80
 8007e52:	d034      	beq.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	2b40      	cmp	r3, #64	@ 0x40
 8007e58:	d031      	beq.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	69db      	ldr	r3, [r3, #28]
 8007e60:	f003 0308 	and.w	r3, r3, #8
 8007e64:	2b08      	cmp	r3, #8
 8007e66:	d110      	bne.n	8007e8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2208      	movs	r2, #8
 8007e6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f000 f839 	bl	8007ee8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2208      	movs	r2, #8
 8007e7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e029      	b.n	8007ede <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	69db      	ldr	r3, [r3, #28]
 8007e90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e98:	d111      	bne.n	8007ebe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ea2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f000 f81f 	bl	8007ee8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2220      	movs	r2, #32
 8007eae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e00f      	b.n	8007ede <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	69da      	ldr	r2, [r3, #28]
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	bf0c      	ite	eq
 8007ece:	2301      	moveq	r3, #1
 8007ed0:	2300      	movne	r3, #0
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	79fb      	ldrb	r3, [r7, #7]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d0a0      	beq.n	8007e1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
	...

08007ee8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b095      	sub	sp, #84	@ 0x54
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ef8:	e853 3f00 	ldrex	r3, [r3]
 8007efc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f10:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f16:	e841 2300 	strex	r3, r2, [r1]
 8007f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1e6      	bne.n	8007ef0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	3308      	adds	r3, #8
 8007f28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	e853 3f00 	ldrex	r3, [r3]
 8007f30:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f32:	69fa      	ldr	r2, [r7, #28]
 8007f34:	4b1e      	ldr	r3, [pc, #120]	@ (8007fb0 <UART_EndRxTransfer+0xc8>)
 8007f36:	4013      	ands	r3, r2
 8007f38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	3308      	adds	r3, #8
 8007f40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f4a:	e841 2300 	strex	r3, r2, [r1]
 8007f4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1e5      	bne.n	8007f22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d118      	bne.n	8007f90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	e853 3f00 	ldrex	r3, [r3]
 8007f6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	f023 0310 	bic.w	r3, r3, #16
 8007f72:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f7c:	61bb      	str	r3, [r7, #24]
 8007f7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f80:	6979      	ldr	r1, [r7, #20]
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	e841 2300 	strex	r3, r2, [r1]
 8007f88:	613b      	str	r3, [r7, #16]
   return(result);
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1e6      	bne.n	8007f5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2220      	movs	r2, #32
 8007f94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007fa4:	bf00      	nop
 8007fa6:	3754      	adds	r7, #84	@ 0x54
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	effffffe 	.word	0xeffffffe

08007fb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d101      	bne.n	8007fca <HAL_UARTEx_DisableFifoMode+0x16>
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	e027      	b.n	800801a <HAL_UARTEx_DisableFifoMode+0x66>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2224      	movs	r2, #36	@ 0x24
 8007fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f022 0201 	bic.w	r2, r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007ff8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2220      	movs	r2, #32
 800800c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b084      	sub	sp, #16
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008036:	2b01      	cmp	r3, #1
 8008038:	d101      	bne.n	800803e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800803a:	2302      	movs	r3, #2
 800803c:	e02d      	b.n	800809a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2224      	movs	r2, #36	@ 0x24
 800804a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f022 0201 	bic.w	r2, r2, #1
 8008064:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	683a      	ldr	r2, [r7, #0]
 8008076:	430a      	orrs	r2, r1
 8008078:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f850 	bl	8008120 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2220      	movs	r2, #32
 800808c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b084      	sub	sp, #16
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d101      	bne.n	80080ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80080b6:	2302      	movs	r3, #2
 80080b8:	e02d      	b.n	8008116 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2224      	movs	r2, #36	@ 0x24
 80080c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f022 0201 	bic.w	r2, r2, #1
 80080e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	683a      	ldr	r2, [r7, #0]
 80080f2:	430a      	orrs	r2, r1
 80080f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f812 	bl	8008120 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2220      	movs	r2, #32
 8008108:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
	...

08008120 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800812c:	2b00      	cmp	r3, #0
 800812e:	d108      	bne.n	8008142 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008140:	e031      	b.n	80081a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008142:	2310      	movs	r3, #16
 8008144:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008146:	2310      	movs	r3, #16
 8008148:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	0e5b      	lsrs	r3, r3, #25
 8008152:	b2db      	uxtb	r3, r3
 8008154:	f003 0307 	and.w	r3, r3, #7
 8008158:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	0f5b      	lsrs	r3, r3, #29
 8008162:	b2db      	uxtb	r3, r3
 8008164:	f003 0307 	and.w	r3, r3, #7
 8008168:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800816a:	7bbb      	ldrb	r3, [r7, #14]
 800816c:	7b3a      	ldrb	r2, [r7, #12]
 800816e:	4911      	ldr	r1, [pc, #68]	@ (80081b4 <UARTEx_SetNbDataToProcess+0x94>)
 8008170:	5c8a      	ldrb	r2, [r1, r2]
 8008172:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008176:	7b3a      	ldrb	r2, [r7, #12]
 8008178:	490f      	ldr	r1, [pc, #60]	@ (80081b8 <UARTEx_SetNbDataToProcess+0x98>)
 800817a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800817c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008180:	b29a      	uxth	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008188:	7bfb      	ldrb	r3, [r7, #15]
 800818a:	7b7a      	ldrb	r2, [r7, #13]
 800818c:	4909      	ldr	r1, [pc, #36]	@ (80081b4 <UARTEx_SetNbDataToProcess+0x94>)
 800818e:	5c8a      	ldrb	r2, [r1, r2]
 8008190:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008194:	7b7a      	ldrb	r2, [r7, #13]
 8008196:	4908      	ldr	r1, [pc, #32]	@ (80081b8 <UARTEx_SetNbDataToProcess+0x98>)
 8008198:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800819a:	fb93 f3f2 	sdiv	r3, r3, r2
 800819e:	b29a      	uxth	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80081a6:	bf00      	nop
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	08009880 	.word	0x08009880
 80081b8:	08009888 	.word	0x08009888

080081bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80081bc:	b580      	push	{r7, lr}
 80081be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80081c0:	4b05      	ldr	r3, [pc, #20]	@ (80081d8 <SysTick_Handler+0x1c>)
 80081c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80081c4:	f000 fa5a 	bl	800867c <xTaskGetSchedulerState>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d001      	beq.n	80081d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80081ce:	f000 f8fb 	bl	80083c8 <xPortSysTickHandler>
  }
}
 80081d2:	bf00      	nop
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	e000e010 	.word	0xe000e010

080081dc <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	689a      	ldr	r2, [r3, #8]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	683a      	ldr	r2, [r7, #0]
 8008206:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	1c5a      	adds	r2, r3, #1
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	601a      	str	r2, [r3, #0]
}
 8008218:	bf00      	nop
 800821a:	3714      	adds	r7, #20
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	6892      	ldr	r2, [r2, #8]
 800823a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	6852      	ldr	r2, [r2, #4]
 8008244:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	429a      	cmp	r2, r3
 800824e:	d103      	bne.n	8008258 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	689a      	ldr	r2, [r3, #8]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	1e5a      	subs	r2, r3, #1
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
	...

08008280 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008280:	4b07      	ldr	r3, [pc, #28]	@ (80082a0 <pxCurrentTCBConst2>)
 8008282:	6819      	ldr	r1, [r3, #0]
 8008284:	6808      	ldr	r0, [r1, #0]
 8008286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828a:	f380 8809 	msr	PSP, r0
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f04f 0000 	mov.w	r0, #0
 8008296:	f380 8811 	msr	BASEPRI, r0
 800829a:	4770      	bx	lr
 800829c:	f3af 8000 	nop.w

080082a0 <pxCurrentTCBConst2>:
 80082a0:	24000338 	.word	0x24000338
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80082a4:	bf00      	nop
 80082a6:	bf00      	nop

080082a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80082c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80082c2:	4b10      	ldr	r3, [pc, #64]	@ (8008304 <vPortEnterCritical+0x5c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3301      	adds	r3, #1
 80082c8:	4a0e      	ldr	r2, [pc, #56]	@ (8008304 <vPortEnterCritical+0x5c>)
 80082ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80082cc:	4b0d      	ldr	r3, [pc, #52]	@ (8008304 <vPortEnterCritical+0x5c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d110      	bne.n	80082f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008308 <vPortEnterCritical+0x60>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00b      	beq.n	80082f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80082de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	603b      	str	r3, [r7, #0]
}
 80082f0:	bf00      	nop
 80082f2:	bf00      	nop
 80082f4:	e7fd      	b.n	80082f2 <vPortEnterCritical+0x4a>
	}
}
 80082f6:	bf00      	nop
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	24000010 	.word	0x24000010
 8008308:	e000ed04 	.word	0xe000ed04

0800830c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008312:	4b12      	ldr	r3, [pc, #72]	@ (800835c <vPortExitCritical+0x50>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10b      	bne.n	8008332 <vPortExitCritical+0x26>
	__asm volatile
 800831a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	607b      	str	r3, [r7, #4]
}
 800832c:	bf00      	nop
 800832e:	bf00      	nop
 8008330:	e7fd      	b.n	800832e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008332:	4b0a      	ldr	r3, [pc, #40]	@ (800835c <vPortExitCritical+0x50>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	3b01      	subs	r3, #1
 8008338:	4a08      	ldr	r2, [pc, #32]	@ (800835c <vPortExitCritical+0x50>)
 800833a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800833c:	4b07      	ldr	r3, [pc, #28]	@ (800835c <vPortExitCritical+0x50>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d105      	bne.n	8008350 <vPortExitCritical+0x44>
 8008344:	2300      	movs	r3, #0
 8008346:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800834e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	24000010 	.word	0x24000010

08008360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008360:	f3ef 8009 	mrs	r0, PSP
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	4b15      	ldr	r3, [pc, #84]	@ (80083c0 <pxCurrentTCBConst>)
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	f01e 0f10 	tst.w	lr, #16
 8008370:	bf08      	it	eq
 8008372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837a:	6010      	str	r0, [r2, #0]
 800837c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008380:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008384:	f380 8811 	msr	BASEPRI, r0
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f000 f8f6 	bl	8008580 <vTaskSwitchContext>
 8008394:	f04f 0000 	mov.w	r0, #0
 8008398:	f380 8811 	msr	BASEPRI, r0
 800839c:	bc09      	pop	{r0, r3}
 800839e:	6819      	ldr	r1, [r3, #0]
 80083a0:	6808      	ldr	r0, [r1, #0]
 80083a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a6:	f01e 0f10 	tst.w	lr, #16
 80083aa:	bf08      	it	eq
 80083ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80083b0:	f380 8809 	msr	PSP, r0
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	f3af 8000 	nop.w

080083c0 <pxCurrentTCBConst>:
 80083c0:	24000338 	.word	0x24000338
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop

080083c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	607b      	str	r3, [r7, #4]
}
 80083e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083e2:	f000 f813 	bl	800840c <xTaskIncrementTick>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d003      	beq.n	80083f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083ec:	4b06      	ldr	r3, [pc, #24]	@ (8008408 <xPortSysTickHandler+0x40>)
 80083ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	2300      	movs	r3, #0
 80083f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	f383 8811 	msr	BASEPRI, r3
}
 80083fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008400:	bf00      	nop
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	e000ed04 	.word	0xe000ed04

0800840c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008412:	2300      	movs	r3, #0
 8008414:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008416:	4b4f      	ldr	r3, [pc, #316]	@ (8008554 <xTaskIncrementTick+0x148>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	f040 8090 	bne.w	8008540 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008420:	4b4d      	ldr	r3, [pc, #308]	@ (8008558 <xTaskIncrementTick+0x14c>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3301      	adds	r3, #1
 8008426:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008428:	4a4b      	ldr	r2, [pc, #300]	@ (8008558 <xTaskIncrementTick+0x14c>)
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d121      	bne.n	8008478 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008434:	4b49      	ldr	r3, [pc, #292]	@ (800855c <xTaskIncrementTick+0x150>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00b      	beq.n	8008456 <xTaskIncrementTick+0x4a>
	__asm volatile
 800843e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008442:	f383 8811 	msr	BASEPRI, r3
 8008446:	f3bf 8f6f 	isb	sy
 800844a:	f3bf 8f4f 	dsb	sy
 800844e:	603b      	str	r3, [r7, #0]
}
 8008450:	bf00      	nop
 8008452:	bf00      	nop
 8008454:	e7fd      	b.n	8008452 <xTaskIncrementTick+0x46>
 8008456:	4b41      	ldr	r3, [pc, #260]	@ (800855c <xTaskIncrementTick+0x150>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	60fb      	str	r3, [r7, #12]
 800845c:	4b40      	ldr	r3, [pc, #256]	@ (8008560 <xTaskIncrementTick+0x154>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a3e      	ldr	r2, [pc, #248]	@ (800855c <xTaskIncrementTick+0x150>)
 8008462:	6013      	str	r3, [r2, #0]
 8008464:	4a3e      	ldr	r2, [pc, #248]	@ (8008560 <xTaskIncrementTick+0x154>)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	4b3e      	ldr	r3, [pc, #248]	@ (8008564 <xTaskIncrementTick+0x158>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3301      	adds	r3, #1
 8008470:	4a3c      	ldr	r2, [pc, #240]	@ (8008564 <xTaskIncrementTick+0x158>)
 8008472:	6013      	str	r3, [r2, #0]
 8008474:	f000 f8e2 	bl	800863c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008478:	4b3b      	ldr	r3, [pc, #236]	@ (8008568 <xTaskIncrementTick+0x15c>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	693a      	ldr	r2, [r7, #16]
 800847e:	429a      	cmp	r2, r3
 8008480:	d349      	bcc.n	8008516 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008482:	4b36      	ldr	r3, [pc, #216]	@ (800855c <xTaskIncrementTick+0x150>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d104      	bne.n	8008496 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800848c:	4b36      	ldr	r3, [pc, #216]	@ (8008568 <xTaskIncrementTick+0x15c>)
 800848e:	f04f 32ff 	mov.w	r2, #4294967295
 8008492:	601a      	str	r2, [r3, #0]
					break;
 8008494:	e03f      	b.n	8008516 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008496:	4b31      	ldr	r3, [pc, #196]	@ (800855c <xTaskIncrementTick+0x150>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d203      	bcs.n	80084b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80084ae:	4a2e      	ldr	r2, [pc, #184]	@ (8008568 <xTaskIncrementTick+0x15c>)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80084b4:	e02f      	b.n	8008516 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	3304      	adds	r3, #4
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7ff feb2 	bl	8008224 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d004      	beq.n	80084d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	3318      	adds	r3, #24
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7ff fea9 	bl	8008224 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084d6:	4b25      	ldr	r3, [pc, #148]	@ (800856c <xTaskIncrementTick+0x160>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d903      	bls.n	80084e6 <xTaskIncrementTick+0xda>
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e2:	4a22      	ldr	r2, [pc, #136]	@ (800856c <xTaskIncrementTick+0x160>)
 80084e4:	6013      	str	r3, [r2, #0]
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ea:	4613      	mov	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4413      	add	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4a1f      	ldr	r2, [pc, #124]	@ (8008570 <xTaskIncrementTick+0x164>)
 80084f4:	441a      	add	r2, r3
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	3304      	adds	r3, #4
 80084fa:	4619      	mov	r1, r3
 80084fc:	4610      	mov	r0, r2
 80084fe:	f7ff fe6d 	bl	80081dc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008506:	4b1b      	ldr	r3, [pc, #108]	@ (8008574 <xTaskIncrementTick+0x168>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800850c:	429a      	cmp	r2, r3
 800850e:	d3b8      	bcc.n	8008482 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008510:	2301      	movs	r3, #1
 8008512:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008514:	e7b5      	b.n	8008482 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008516:	4b17      	ldr	r3, [pc, #92]	@ (8008574 <xTaskIncrementTick+0x168>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800851c:	4914      	ldr	r1, [pc, #80]	@ (8008570 <xTaskIncrementTick+0x164>)
 800851e:	4613      	mov	r3, r2
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	4413      	add	r3, r2
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	440b      	add	r3, r1
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d901      	bls.n	8008532 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800852e:	2301      	movs	r3, #1
 8008530:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008532:	4b11      	ldr	r3, [pc, #68]	@ (8008578 <xTaskIncrementTick+0x16c>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d007      	beq.n	800854a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800853a:	2301      	movs	r3, #1
 800853c:	617b      	str	r3, [r7, #20]
 800853e:	e004      	b.n	800854a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008540:	4b0e      	ldr	r3, [pc, #56]	@ (800857c <xTaskIncrementTick+0x170>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	3301      	adds	r3, #1
 8008546:	4a0d      	ldr	r2, [pc, #52]	@ (800857c <xTaskIncrementTick+0x170>)
 8008548:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800854a:	697b      	ldr	r3, [r7, #20]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	240007c0 	.word	0x240007c0
 8008558:	240007a4 	.word	0x240007a4
 800855c:	2400079c 	.word	0x2400079c
 8008560:	240007a0 	.word	0x240007a0
 8008564:	240007b8 	.word	0x240007b8
 8008568:	240007bc 	.word	0x240007bc
 800856c:	240007a8 	.word	0x240007a8
 8008570:	2400033c 	.word	0x2400033c
 8008574:	24000338 	.word	0x24000338
 8008578:	240007b4 	.word	0x240007b4
 800857c:	240007b0 	.word	0x240007b0

08008580 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008586:	4b28      	ldr	r3, [pc, #160]	@ (8008628 <vTaskSwitchContext+0xa8>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d003      	beq.n	8008596 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800858e:	4b27      	ldr	r3, [pc, #156]	@ (800862c <vTaskSwitchContext+0xac>)
 8008590:	2201      	movs	r2, #1
 8008592:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008594:	e042      	b.n	800861c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008596:	4b25      	ldr	r3, [pc, #148]	@ (800862c <vTaskSwitchContext+0xac>)
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800859c:	4b24      	ldr	r3, [pc, #144]	@ (8008630 <vTaskSwitchContext+0xb0>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	60fb      	str	r3, [r7, #12]
 80085a2:	e011      	b.n	80085c8 <vTaskSwitchContext+0x48>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10b      	bne.n	80085c2 <vTaskSwitchContext+0x42>
	__asm volatile
 80085aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ae:	f383 8811 	msr	BASEPRI, r3
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	607b      	str	r3, [r7, #4]
}
 80085bc:	bf00      	nop
 80085be:	bf00      	nop
 80085c0:	e7fd      	b.n	80085be <vTaskSwitchContext+0x3e>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	3b01      	subs	r3, #1
 80085c6:	60fb      	str	r3, [r7, #12]
 80085c8:	491a      	ldr	r1, [pc, #104]	@ (8008634 <vTaskSwitchContext+0xb4>)
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	4613      	mov	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4413      	add	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	440b      	add	r3, r1
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d0e3      	beq.n	80085a4 <vTaskSwitchContext+0x24>
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	4613      	mov	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4413      	add	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4a13      	ldr	r2, [pc, #76]	@ (8008634 <vTaskSwitchContext+0xb4>)
 80085e8:	4413      	add	r3, r2
 80085ea:	60bb      	str	r3, [r7, #8]
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	685a      	ldr	r2, [r3, #4]
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	605a      	str	r2, [r3, #4]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	685a      	ldr	r2, [r3, #4]
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	3308      	adds	r3, #8
 80085fe:	429a      	cmp	r2, r3
 8008600:	d104      	bne.n	800860c <vTaskSwitchContext+0x8c>
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	685a      	ldr	r2, [r3, #4]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	605a      	str	r2, [r3, #4]
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	4a09      	ldr	r2, [pc, #36]	@ (8008638 <vTaskSwitchContext+0xb8>)
 8008614:	6013      	str	r3, [r2, #0]
 8008616:	4a06      	ldr	r2, [pc, #24]	@ (8008630 <vTaskSwitchContext+0xb0>)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6013      	str	r3, [r2, #0]
}
 800861c:	bf00      	nop
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr
 8008628:	240007c0 	.word	0x240007c0
 800862c:	240007b4 	.word	0x240007b4
 8008630:	240007a8 	.word	0x240007a8
 8008634:	2400033c 	.word	0x2400033c
 8008638:	24000338 	.word	0x24000338

0800863c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008642:	4b0c      	ldr	r3, [pc, #48]	@ (8008674 <prvResetNextTaskUnblockTime+0x38>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d104      	bne.n	8008656 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800864c:	4b0a      	ldr	r3, [pc, #40]	@ (8008678 <prvResetNextTaskUnblockTime+0x3c>)
 800864e:	f04f 32ff 	mov.w	r2, #4294967295
 8008652:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008654:	e008      	b.n	8008668 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008656:	4b07      	ldr	r3, [pc, #28]	@ (8008674 <prvResetNextTaskUnblockTime+0x38>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	4a04      	ldr	r2, [pc, #16]	@ (8008678 <prvResetNextTaskUnblockTime+0x3c>)
 8008666:	6013      	str	r3, [r2, #0]
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr
 8008674:	2400079c 	.word	0x2400079c
 8008678:	240007bc 	.word	0x240007bc

0800867c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008682:	4b0b      	ldr	r3, [pc, #44]	@ (80086b0 <xTaskGetSchedulerState+0x34>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d102      	bne.n	8008690 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800868a:	2301      	movs	r3, #1
 800868c:	607b      	str	r3, [r7, #4]
 800868e:	e008      	b.n	80086a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008690:	4b08      	ldr	r3, [pc, #32]	@ (80086b4 <xTaskGetSchedulerState+0x38>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d102      	bne.n	800869e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008698:	2302      	movs	r3, #2
 800869a:	607b      	str	r3, [r7, #4]
 800869c:	e001      	b.n	80086a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800869e:	2300      	movs	r3, #0
 80086a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80086a2:	687b      	ldr	r3, [r7, #4]
	}
 80086a4:	4618      	mov	r0, r3
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	240007ac 	.word	0x240007ac
 80086b4:	240007c0 	.word	0x240007c0

080086b8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b08a      	sub	sp, #40	@ 0x28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	603b      	str	r3, [r7, #0]
 80086c4:	4613      	mov	r3, r2
 80086c6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80086c8:	2301      	movs	r3, #1
 80086ca:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10b      	bne.n	80086ea <xTaskGenericNotify+0x32>
	__asm volatile
 80086d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	61bb      	str	r3, [r7, #24]
}
 80086e4:	bf00      	nop
 80086e6:	bf00      	nop
 80086e8:	e7fd      	b.n	80086e6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80086ee:	f7ff fddb 	bl	80082a8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d003      	beq.n	8008700 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80086f8:	6a3b      	ldr	r3, [r7, #32]
 80086fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008700:	6a3b      	ldr	r3, [r7, #32]
 8008702:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008706:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008708:	6a3b      	ldr	r3, [r7, #32]
 800870a:	2202      	movs	r2, #2
 800870c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8008710:	79fb      	ldrb	r3, [r7, #7]
 8008712:	2b04      	cmp	r3, #4
 8008714:	d827      	bhi.n	8008766 <xTaskGenericNotify+0xae>
 8008716:	a201      	add	r2, pc, #4	@ (adr r2, 800871c <xTaskGenericNotify+0x64>)
 8008718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871c:	08008789 	.word	0x08008789
 8008720:	08008731 	.word	0x08008731
 8008724:	0800873f 	.word	0x0800873f
 8008728:	0800874b 	.word	0x0800874b
 800872c:	08008753 	.word	0x08008753
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	431a      	orrs	r2, r3
 8008738:	6a3b      	ldr	r3, [r7, #32]
 800873a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800873c:	e027      	b.n	800878e <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800873e:	6a3b      	ldr	r3, [r7, #32]
 8008740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8008748:	e021      	b.n	800878e <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800874a:	6a3b      	ldr	r3, [r7, #32]
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8008750:	e01d      	b.n	800878e <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008752:	7ffb      	ldrb	r3, [r7, #31]
 8008754:	2b02      	cmp	r3, #2
 8008756:	d003      	beq.n	8008760 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800875e:	e016      	b.n	800878e <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8008760:	2300      	movs	r3, #0
 8008762:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8008764:	e013      	b.n	800878e <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008766:	6a3b      	ldr	r3, [r7, #32]
 8008768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800876a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800876e:	d00d      	beq.n	800878c <xTaskGenericNotify+0xd4>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	617b      	str	r3, [r7, #20]
}
 8008782:	bf00      	nop
 8008784:	bf00      	nop
 8008786:	e7fd      	b.n	8008784 <xTaskGenericNotify+0xcc>
					break;
 8008788:	bf00      	nop
 800878a:	e000      	b.n	800878e <xTaskGenericNotify+0xd6>

					break;
 800878c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800878e:	7ffb      	ldrb	r3, [r7, #31]
 8008790:	2b01      	cmp	r3, #1
 8008792:	d13b      	bne.n	800880c <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008794:	6a3b      	ldr	r3, [r7, #32]
 8008796:	3304      	adds	r3, #4
 8008798:	4618      	mov	r0, r3
 800879a:	f7ff fd43 	bl	8008224 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087a2:	4b1e      	ldr	r3, [pc, #120]	@ (800881c <xTaskGenericNotify+0x164>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d903      	bls.n	80087b2 <xTaskGenericNotify+0xfa>
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ae:	4a1b      	ldr	r2, [pc, #108]	@ (800881c <xTaskGenericNotify+0x164>)
 80087b0:	6013      	str	r3, [r2, #0]
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087b6:	4613      	mov	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4413      	add	r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4a18      	ldr	r2, [pc, #96]	@ (8008820 <xTaskGenericNotify+0x168>)
 80087c0:	441a      	add	r2, r3
 80087c2:	6a3b      	ldr	r3, [r7, #32]
 80087c4:	3304      	adds	r3, #4
 80087c6:	4619      	mov	r1, r3
 80087c8:	4610      	mov	r0, r2
 80087ca:	f7ff fd07 	bl	80081dc <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80087ce:	6a3b      	ldr	r3, [r7, #32]
 80087d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00b      	beq.n	80087ee <xTaskGenericNotify+0x136>
	__asm volatile
 80087d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	613b      	str	r3, [r7, #16]
}
 80087e8:	bf00      	nop
 80087ea:	bf00      	nop
 80087ec:	e7fd      	b.n	80087ea <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087ee:	6a3b      	ldr	r3, [r7, #32]
 80087f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008824 <xTaskGenericNotify+0x16c>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d907      	bls.n	800880c <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80087fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008828 <xTaskGenericNotify+0x170>)
 80087fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800880c:	f7ff fd7e 	bl	800830c <vPortExitCritical>

		return xReturn;
 8008810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8008812:	4618      	mov	r0, r3
 8008814:	3728      	adds	r7, #40	@ 0x28
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	240007a8 	.word	0x240007a8
 8008820:	2400033c 	.word	0x2400033c
 8008824:	24000338 	.word	0x24000338
 8008828:	e000ed04 	.word	0xe000ed04

0800882c <std>:
 800882c:	2300      	movs	r3, #0
 800882e:	b510      	push	{r4, lr}
 8008830:	4604      	mov	r4, r0
 8008832:	e9c0 3300 	strd	r3, r3, [r0]
 8008836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800883a:	6083      	str	r3, [r0, #8]
 800883c:	8181      	strh	r1, [r0, #12]
 800883e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008840:	81c2      	strh	r2, [r0, #14]
 8008842:	6183      	str	r3, [r0, #24]
 8008844:	4619      	mov	r1, r3
 8008846:	2208      	movs	r2, #8
 8008848:	305c      	adds	r0, #92	@ 0x5c
 800884a:	f000 f9f9 	bl	8008c40 <memset>
 800884e:	4b0d      	ldr	r3, [pc, #52]	@ (8008884 <std+0x58>)
 8008850:	6263      	str	r3, [r4, #36]	@ 0x24
 8008852:	4b0d      	ldr	r3, [pc, #52]	@ (8008888 <std+0x5c>)
 8008854:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008856:	4b0d      	ldr	r3, [pc, #52]	@ (800888c <std+0x60>)
 8008858:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800885a:	4b0d      	ldr	r3, [pc, #52]	@ (8008890 <std+0x64>)
 800885c:	6323      	str	r3, [r4, #48]	@ 0x30
 800885e:	4b0d      	ldr	r3, [pc, #52]	@ (8008894 <std+0x68>)
 8008860:	6224      	str	r4, [r4, #32]
 8008862:	429c      	cmp	r4, r3
 8008864:	d006      	beq.n	8008874 <std+0x48>
 8008866:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800886a:	4294      	cmp	r4, r2
 800886c:	d002      	beq.n	8008874 <std+0x48>
 800886e:	33d0      	adds	r3, #208	@ 0xd0
 8008870:	429c      	cmp	r4, r3
 8008872:	d105      	bne.n	8008880 <std+0x54>
 8008874:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800887c:	f000 ba58 	b.w	8008d30 <__retarget_lock_init_recursive>
 8008880:	bd10      	pop	{r4, pc}
 8008882:	bf00      	nop
 8008884:	08008a91 	.word	0x08008a91
 8008888:	08008ab3 	.word	0x08008ab3
 800888c:	08008aeb 	.word	0x08008aeb
 8008890:	08008b0f 	.word	0x08008b0f
 8008894:	240007c4 	.word	0x240007c4

08008898 <stdio_exit_handler>:
 8008898:	4a02      	ldr	r2, [pc, #8]	@ (80088a4 <stdio_exit_handler+0xc>)
 800889a:	4903      	ldr	r1, [pc, #12]	@ (80088a8 <stdio_exit_handler+0x10>)
 800889c:	4803      	ldr	r0, [pc, #12]	@ (80088ac <stdio_exit_handler+0x14>)
 800889e:	f000 b869 	b.w	8008974 <_fwalk_sglue>
 80088a2:	bf00      	nop
 80088a4:	24000014 	.word	0x24000014
 80088a8:	080095e9 	.word	0x080095e9
 80088ac:	24000024 	.word	0x24000024

080088b0 <cleanup_stdio>:
 80088b0:	6841      	ldr	r1, [r0, #4]
 80088b2:	4b0c      	ldr	r3, [pc, #48]	@ (80088e4 <cleanup_stdio+0x34>)
 80088b4:	4299      	cmp	r1, r3
 80088b6:	b510      	push	{r4, lr}
 80088b8:	4604      	mov	r4, r0
 80088ba:	d001      	beq.n	80088c0 <cleanup_stdio+0x10>
 80088bc:	f000 fe94 	bl	80095e8 <_fflush_r>
 80088c0:	68a1      	ldr	r1, [r4, #8]
 80088c2:	4b09      	ldr	r3, [pc, #36]	@ (80088e8 <cleanup_stdio+0x38>)
 80088c4:	4299      	cmp	r1, r3
 80088c6:	d002      	beq.n	80088ce <cleanup_stdio+0x1e>
 80088c8:	4620      	mov	r0, r4
 80088ca:	f000 fe8d 	bl	80095e8 <_fflush_r>
 80088ce:	68e1      	ldr	r1, [r4, #12]
 80088d0:	4b06      	ldr	r3, [pc, #24]	@ (80088ec <cleanup_stdio+0x3c>)
 80088d2:	4299      	cmp	r1, r3
 80088d4:	d004      	beq.n	80088e0 <cleanup_stdio+0x30>
 80088d6:	4620      	mov	r0, r4
 80088d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088dc:	f000 be84 	b.w	80095e8 <_fflush_r>
 80088e0:	bd10      	pop	{r4, pc}
 80088e2:	bf00      	nop
 80088e4:	240007c4 	.word	0x240007c4
 80088e8:	2400082c 	.word	0x2400082c
 80088ec:	24000894 	.word	0x24000894

080088f0 <global_stdio_init.part.0>:
 80088f0:	b510      	push	{r4, lr}
 80088f2:	4b0b      	ldr	r3, [pc, #44]	@ (8008920 <global_stdio_init.part.0+0x30>)
 80088f4:	4c0b      	ldr	r4, [pc, #44]	@ (8008924 <global_stdio_init.part.0+0x34>)
 80088f6:	4a0c      	ldr	r2, [pc, #48]	@ (8008928 <global_stdio_init.part.0+0x38>)
 80088f8:	601a      	str	r2, [r3, #0]
 80088fa:	4620      	mov	r0, r4
 80088fc:	2200      	movs	r2, #0
 80088fe:	2104      	movs	r1, #4
 8008900:	f7ff ff94 	bl	800882c <std>
 8008904:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008908:	2201      	movs	r2, #1
 800890a:	2109      	movs	r1, #9
 800890c:	f7ff ff8e 	bl	800882c <std>
 8008910:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008914:	2202      	movs	r2, #2
 8008916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800891a:	2112      	movs	r1, #18
 800891c:	f7ff bf86 	b.w	800882c <std>
 8008920:	240008fc 	.word	0x240008fc
 8008924:	240007c4 	.word	0x240007c4
 8008928:	08008899 	.word	0x08008899

0800892c <__sfp_lock_acquire>:
 800892c:	4801      	ldr	r0, [pc, #4]	@ (8008934 <__sfp_lock_acquire+0x8>)
 800892e:	f000 ba00 	b.w	8008d32 <__retarget_lock_acquire_recursive>
 8008932:	bf00      	nop
 8008934:	24000905 	.word	0x24000905

08008938 <__sfp_lock_release>:
 8008938:	4801      	ldr	r0, [pc, #4]	@ (8008940 <__sfp_lock_release+0x8>)
 800893a:	f000 b9fb 	b.w	8008d34 <__retarget_lock_release_recursive>
 800893e:	bf00      	nop
 8008940:	24000905 	.word	0x24000905

08008944 <__sinit>:
 8008944:	b510      	push	{r4, lr}
 8008946:	4604      	mov	r4, r0
 8008948:	f7ff fff0 	bl	800892c <__sfp_lock_acquire>
 800894c:	6a23      	ldr	r3, [r4, #32]
 800894e:	b11b      	cbz	r3, 8008958 <__sinit+0x14>
 8008950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008954:	f7ff bff0 	b.w	8008938 <__sfp_lock_release>
 8008958:	4b04      	ldr	r3, [pc, #16]	@ (800896c <__sinit+0x28>)
 800895a:	6223      	str	r3, [r4, #32]
 800895c:	4b04      	ldr	r3, [pc, #16]	@ (8008970 <__sinit+0x2c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1f5      	bne.n	8008950 <__sinit+0xc>
 8008964:	f7ff ffc4 	bl	80088f0 <global_stdio_init.part.0>
 8008968:	e7f2      	b.n	8008950 <__sinit+0xc>
 800896a:	bf00      	nop
 800896c:	080088b1 	.word	0x080088b1
 8008970:	240008fc 	.word	0x240008fc

08008974 <_fwalk_sglue>:
 8008974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008978:	4607      	mov	r7, r0
 800897a:	4688      	mov	r8, r1
 800897c:	4614      	mov	r4, r2
 800897e:	2600      	movs	r6, #0
 8008980:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008984:	f1b9 0901 	subs.w	r9, r9, #1
 8008988:	d505      	bpl.n	8008996 <_fwalk_sglue+0x22>
 800898a:	6824      	ldr	r4, [r4, #0]
 800898c:	2c00      	cmp	r4, #0
 800898e:	d1f7      	bne.n	8008980 <_fwalk_sglue+0xc>
 8008990:	4630      	mov	r0, r6
 8008992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008996:	89ab      	ldrh	r3, [r5, #12]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d907      	bls.n	80089ac <_fwalk_sglue+0x38>
 800899c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089a0:	3301      	adds	r3, #1
 80089a2:	d003      	beq.n	80089ac <_fwalk_sglue+0x38>
 80089a4:	4629      	mov	r1, r5
 80089a6:	4638      	mov	r0, r7
 80089a8:	47c0      	blx	r8
 80089aa:	4306      	orrs	r6, r0
 80089ac:	3568      	adds	r5, #104	@ 0x68
 80089ae:	e7e9      	b.n	8008984 <_fwalk_sglue+0x10>

080089b0 <iprintf>:
 80089b0:	b40f      	push	{r0, r1, r2, r3}
 80089b2:	b507      	push	{r0, r1, r2, lr}
 80089b4:	4906      	ldr	r1, [pc, #24]	@ (80089d0 <iprintf+0x20>)
 80089b6:	ab04      	add	r3, sp, #16
 80089b8:	6808      	ldr	r0, [r1, #0]
 80089ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80089be:	6881      	ldr	r1, [r0, #8]
 80089c0:	9301      	str	r3, [sp, #4]
 80089c2:	f000 fae9 	bl	8008f98 <_vfiprintf_r>
 80089c6:	b003      	add	sp, #12
 80089c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80089cc:	b004      	add	sp, #16
 80089ce:	4770      	bx	lr
 80089d0:	24000020 	.word	0x24000020

080089d4 <_puts_r>:
 80089d4:	6a03      	ldr	r3, [r0, #32]
 80089d6:	b570      	push	{r4, r5, r6, lr}
 80089d8:	6884      	ldr	r4, [r0, #8]
 80089da:	4605      	mov	r5, r0
 80089dc:	460e      	mov	r6, r1
 80089de:	b90b      	cbnz	r3, 80089e4 <_puts_r+0x10>
 80089e0:	f7ff ffb0 	bl	8008944 <__sinit>
 80089e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089e6:	07db      	lsls	r3, r3, #31
 80089e8:	d405      	bmi.n	80089f6 <_puts_r+0x22>
 80089ea:	89a3      	ldrh	r3, [r4, #12]
 80089ec:	0598      	lsls	r0, r3, #22
 80089ee:	d402      	bmi.n	80089f6 <_puts_r+0x22>
 80089f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089f2:	f000 f99e 	bl	8008d32 <__retarget_lock_acquire_recursive>
 80089f6:	89a3      	ldrh	r3, [r4, #12]
 80089f8:	0719      	lsls	r1, r3, #28
 80089fa:	d502      	bpl.n	8008a02 <_puts_r+0x2e>
 80089fc:	6923      	ldr	r3, [r4, #16]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d135      	bne.n	8008a6e <_puts_r+0x9a>
 8008a02:	4621      	mov	r1, r4
 8008a04:	4628      	mov	r0, r5
 8008a06:	f000 f8c5 	bl	8008b94 <__swsetup_r>
 8008a0a:	b380      	cbz	r0, 8008a6e <_puts_r+0x9a>
 8008a0c:	f04f 35ff 	mov.w	r5, #4294967295
 8008a10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a12:	07da      	lsls	r2, r3, #31
 8008a14:	d405      	bmi.n	8008a22 <_puts_r+0x4e>
 8008a16:	89a3      	ldrh	r3, [r4, #12]
 8008a18:	059b      	lsls	r3, r3, #22
 8008a1a:	d402      	bmi.n	8008a22 <_puts_r+0x4e>
 8008a1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a1e:	f000 f989 	bl	8008d34 <__retarget_lock_release_recursive>
 8008a22:	4628      	mov	r0, r5
 8008a24:	bd70      	pop	{r4, r5, r6, pc}
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	da04      	bge.n	8008a34 <_puts_r+0x60>
 8008a2a:	69a2      	ldr	r2, [r4, #24]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	dc17      	bgt.n	8008a60 <_puts_r+0x8c>
 8008a30:	290a      	cmp	r1, #10
 8008a32:	d015      	beq.n	8008a60 <_puts_r+0x8c>
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	1c5a      	adds	r2, r3, #1
 8008a38:	6022      	str	r2, [r4, #0]
 8008a3a:	7019      	strb	r1, [r3, #0]
 8008a3c:	68a3      	ldr	r3, [r4, #8]
 8008a3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008a42:	3b01      	subs	r3, #1
 8008a44:	60a3      	str	r3, [r4, #8]
 8008a46:	2900      	cmp	r1, #0
 8008a48:	d1ed      	bne.n	8008a26 <_puts_r+0x52>
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	da11      	bge.n	8008a72 <_puts_r+0x9e>
 8008a4e:	4622      	mov	r2, r4
 8008a50:	210a      	movs	r1, #10
 8008a52:	4628      	mov	r0, r5
 8008a54:	f000 f85f 	bl	8008b16 <__swbuf_r>
 8008a58:	3001      	adds	r0, #1
 8008a5a:	d0d7      	beq.n	8008a0c <_puts_r+0x38>
 8008a5c:	250a      	movs	r5, #10
 8008a5e:	e7d7      	b.n	8008a10 <_puts_r+0x3c>
 8008a60:	4622      	mov	r2, r4
 8008a62:	4628      	mov	r0, r5
 8008a64:	f000 f857 	bl	8008b16 <__swbuf_r>
 8008a68:	3001      	adds	r0, #1
 8008a6a:	d1e7      	bne.n	8008a3c <_puts_r+0x68>
 8008a6c:	e7ce      	b.n	8008a0c <_puts_r+0x38>
 8008a6e:	3e01      	subs	r6, #1
 8008a70:	e7e4      	b.n	8008a3c <_puts_r+0x68>
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	1c5a      	adds	r2, r3, #1
 8008a76:	6022      	str	r2, [r4, #0]
 8008a78:	220a      	movs	r2, #10
 8008a7a:	701a      	strb	r2, [r3, #0]
 8008a7c:	e7ee      	b.n	8008a5c <_puts_r+0x88>
	...

08008a80 <puts>:
 8008a80:	4b02      	ldr	r3, [pc, #8]	@ (8008a8c <puts+0xc>)
 8008a82:	4601      	mov	r1, r0
 8008a84:	6818      	ldr	r0, [r3, #0]
 8008a86:	f7ff bfa5 	b.w	80089d4 <_puts_r>
 8008a8a:	bf00      	nop
 8008a8c:	24000020 	.word	0x24000020

08008a90 <__sread>:
 8008a90:	b510      	push	{r4, lr}
 8008a92:	460c      	mov	r4, r1
 8008a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a98:	f000 f8fc 	bl	8008c94 <_read_r>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	bfab      	itete	ge
 8008aa0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008aa2:	89a3      	ldrhlt	r3, [r4, #12]
 8008aa4:	181b      	addge	r3, r3, r0
 8008aa6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008aaa:	bfac      	ite	ge
 8008aac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008aae:	81a3      	strhlt	r3, [r4, #12]
 8008ab0:	bd10      	pop	{r4, pc}

08008ab2 <__swrite>:
 8008ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab6:	461f      	mov	r7, r3
 8008ab8:	898b      	ldrh	r3, [r1, #12]
 8008aba:	05db      	lsls	r3, r3, #23
 8008abc:	4605      	mov	r5, r0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	4616      	mov	r6, r2
 8008ac2:	d505      	bpl.n	8008ad0 <__swrite+0x1e>
 8008ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ac8:	2302      	movs	r3, #2
 8008aca:	2200      	movs	r2, #0
 8008acc:	f000 f8d0 	bl	8008c70 <_lseek_r>
 8008ad0:	89a3      	ldrh	r3, [r4, #12]
 8008ad2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ad6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ada:	81a3      	strh	r3, [r4, #12]
 8008adc:	4632      	mov	r2, r6
 8008ade:	463b      	mov	r3, r7
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae6:	f000 b8e7 	b.w	8008cb8 <_write_r>

08008aea <__sseek>:
 8008aea:	b510      	push	{r4, lr}
 8008aec:	460c      	mov	r4, r1
 8008aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008af2:	f000 f8bd 	bl	8008c70 <_lseek_r>
 8008af6:	1c43      	adds	r3, r0, #1
 8008af8:	89a3      	ldrh	r3, [r4, #12]
 8008afa:	bf15      	itete	ne
 8008afc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008afe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008b02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008b06:	81a3      	strheq	r3, [r4, #12]
 8008b08:	bf18      	it	ne
 8008b0a:	81a3      	strhne	r3, [r4, #12]
 8008b0c:	bd10      	pop	{r4, pc}

08008b0e <__sclose>:
 8008b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b12:	f000 b89d 	b.w	8008c50 <_close_r>

08008b16 <__swbuf_r>:
 8008b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b18:	460e      	mov	r6, r1
 8008b1a:	4614      	mov	r4, r2
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	b118      	cbz	r0, 8008b28 <__swbuf_r+0x12>
 8008b20:	6a03      	ldr	r3, [r0, #32]
 8008b22:	b90b      	cbnz	r3, 8008b28 <__swbuf_r+0x12>
 8008b24:	f7ff ff0e 	bl	8008944 <__sinit>
 8008b28:	69a3      	ldr	r3, [r4, #24]
 8008b2a:	60a3      	str	r3, [r4, #8]
 8008b2c:	89a3      	ldrh	r3, [r4, #12]
 8008b2e:	071a      	lsls	r2, r3, #28
 8008b30:	d501      	bpl.n	8008b36 <__swbuf_r+0x20>
 8008b32:	6923      	ldr	r3, [r4, #16]
 8008b34:	b943      	cbnz	r3, 8008b48 <__swbuf_r+0x32>
 8008b36:	4621      	mov	r1, r4
 8008b38:	4628      	mov	r0, r5
 8008b3a:	f000 f82b 	bl	8008b94 <__swsetup_r>
 8008b3e:	b118      	cbz	r0, 8008b48 <__swbuf_r+0x32>
 8008b40:	f04f 37ff 	mov.w	r7, #4294967295
 8008b44:	4638      	mov	r0, r7
 8008b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	6922      	ldr	r2, [r4, #16]
 8008b4c:	1a98      	subs	r0, r3, r2
 8008b4e:	6963      	ldr	r3, [r4, #20]
 8008b50:	b2f6      	uxtb	r6, r6
 8008b52:	4283      	cmp	r3, r0
 8008b54:	4637      	mov	r7, r6
 8008b56:	dc05      	bgt.n	8008b64 <__swbuf_r+0x4e>
 8008b58:	4621      	mov	r1, r4
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	f000 fd44 	bl	80095e8 <_fflush_r>
 8008b60:	2800      	cmp	r0, #0
 8008b62:	d1ed      	bne.n	8008b40 <__swbuf_r+0x2a>
 8008b64:	68a3      	ldr	r3, [r4, #8]
 8008b66:	3b01      	subs	r3, #1
 8008b68:	60a3      	str	r3, [r4, #8]
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	1c5a      	adds	r2, r3, #1
 8008b6e:	6022      	str	r2, [r4, #0]
 8008b70:	701e      	strb	r6, [r3, #0]
 8008b72:	6962      	ldr	r2, [r4, #20]
 8008b74:	1c43      	adds	r3, r0, #1
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d004      	beq.n	8008b84 <__swbuf_r+0x6e>
 8008b7a:	89a3      	ldrh	r3, [r4, #12]
 8008b7c:	07db      	lsls	r3, r3, #31
 8008b7e:	d5e1      	bpl.n	8008b44 <__swbuf_r+0x2e>
 8008b80:	2e0a      	cmp	r6, #10
 8008b82:	d1df      	bne.n	8008b44 <__swbuf_r+0x2e>
 8008b84:	4621      	mov	r1, r4
 8008b86:	4628      	mov	r0, r5
 8008b88:	f000 fd2e 	bl	80095e8 <_fflush_r>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	d0d9      	beq.n	8008b44 <__swbuf_r+0x2e>
 8008b90:	e7d6      	b.n	8008b40 <__swbuf_r+0x2a>
	...

08008b94 <__swsetup_r>:
 8008b94:	b538      	push	{r3, r4, r5, lr}
 8008b96:	4b29      	ldr	r3, [pc, #164]	@ (8008c3c <__swsetup_r+0xa8>)
 8008b98:	4605      	mov	r5, r0
 8008b9a:	6818      	ldr	r0, [r3, #0]
 8008b9c:	460c      	mov	r4, r1
 8008b9e:	b118      	cbz	r0, 8008ba8 <__swsetup_r+0x14>
 8008ba0:	6a03      	ldr	r3, [r0, #32]
 8008ba2:	b90b      	cbnz	r3, 8008ba8 <__swsetup_r+0x14>
 8008ba4:	f7ff fece 	bl	8008944 <__sinit>
 8008ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bac:	0719      	lsls	r1, r3, #28
 8008bae:	d422      	bmi.n	8008bf6 <__swsetup_r+0x62>
 8008bb0:	06da      	lsls	r2, r3, #27
 8008bb2:	d407      	bmi.n	8008bc4 <__swsetup_r+0x30>
 8008bb4:	2209      	movs	r2, #9
 8008bb6:	602a      	str	r2, [r5, #0]
 8008bb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bbc:	81a3      	strh	r3, [r4, #12]
 8008bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc2:	e033      	b.n	8008c2c <__swsetup_r+0x98>
 8008bc4:	0758      	lsls	r0, r3, #29
 8008bc6:	d512      	bpl.n	8008bee <__swsetup_r+0x5a>
 8008bc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008bca:	b141      	cbz	r1, 8008bde <__swsetup_r+0x4a>
 8008bcc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008bd0:	4299      	cmp	r1, r3
 8008bd2:	d002      	beq.n	8008bda <__swsetup_r+0x46>
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	f000 f8bd 	bl	8008d54 <_free_r>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	6363      	str	r3, [r4, #52]	@ 0x34
 8008bde:	89a3      	ldrh	r3, [r4, #12]
 8008be0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008be4:	81a3      	strh	r3, [r4, #12]
 8008be6:	2300      	movs	r3, #0
 8008be8:	6063      	str	r3, [r4, #4]
 8008bea:	6923      	ldr	r3, [r4, #16]
 8008bec:	6023      	str	r3, [r4, #0]
 8008bee:	89a3      	ldrh	r3, [r4, #12]
 8008bf0:	f043 0308 	orr.w	r3, r3, #8
 8008bf4:	81a3      	strh	r3, [r4, #12]
 8008bf6:	6923      	ldr	r3, [r4, #16]
 8008bf8:	b94b      	cbnz	r3, 8008c0e <__swsetup_r+0x7a>
 8008bfa:	89a3      	ldrh	r3, [r4, #12]
 8008bfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008c00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c04:	d003      	beq.n	8008c0e <__swsetup_r+0x7a>
 8008c06:	4621      	mov	r1, r4
 8008c08:	4628      	mov	r0, r5
 8008c0a:	f000 fd3b 	bl	8009684 <__smakebuf_r>
 8008c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c12:	f013 0201 	ands.w	r2, r3, #1
 8008c16:	d00a      	beq.n	8008c2e <__swsetup_r+0x9a>
 8008c18:	2200      	movs	r2, #0
 8008c1a:	60a2      	str	r2, [r4, #8]
 8008c1c:	6962      	ldr	r2, [r4, #20]
 8008c1e:	4252      	negs	r2, r2
 8008c20:	61a2      	str	r2, [r4, #24]
 8008c22:	6922      	ldr	r2, [r4, #16]
 8008c24:	b942      	cbnz	r2, 8008c38 <__swsetup_r+0xa4>
 8008c26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008c2a:	d1c5      	bne.n	8008bb8 <__swsetup_r+0x24>
 8008c2c:	bd38      	pop	{r3, r4, r5, pc}
 8008c2e:	0799      	lsls	r1, r3, #30
 8008c30:	bf58      	it	pl
 8008c32:	6962      	ldrpl	r2, [r4, #20]
 8008c34:	60a2      	str	r2, [r4, #8]
 8008c36:	e7f4      	b.n	8008c22 <__swsetup_r+0x8e>
 8008c38:	2000      	movs	r0, #0
 8008c3a:	e7f7      	b.n	8008c2c <__swsetup_r+0x98>
 8008c3c:	24000020 	.word	0x24000020

08008c40 <memset>:
 8008c40:	4402      	add	r2, r0
 8008c42:	4603      	mov	r3, r0
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d100      	bne.n	8008c4a <memset+0xa>
 8008c48:	4770      	bx	lr
 8008c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c4e:	e7f9      	b.n	8008c44 <memset+0x4>

08008c50 <_close_r>:
 8008c50:	b538      	push	{r3, r4, r5, lr}
 8008c52:	4d06      	ldr	r5, [pc, #24]	@ (8008c6c <_close_r+0x1c>)
 8008c54:	2300      	movs	r3, #0
 8008c56:	4604      	mov	r4, r0
 8008c58:	4608      	mov	r0, r1
 8008c5a:	602b      	str	r3, [r5, #0]
 8008c5c:	f7f9 f88f 	bl	8001d7e <_close>
 8008c60:	1c43      	adds	r3, r0, #1
 8008c62:	d102      	bne.n	8008c6a <_close_r+0x1a>
 8008c64:	682b      	ldr	r3, [r5, #0]
 8008c66:	b103      	cbz	r3, 8008c6a <_close_r+0x1a>
 8008c68:	6023      	str	r3, [r4, #0]
 8008c6a:	bd38      	pop	{r3, r4, r5, pc}
 8008c6c:	24000900 	.word	0x24000900

08008c70 <_lseek_r>:
 8008c70:	b538      	push	{r3, r4, r5, lr}
 8008c72:	4d07      	ldr	r5, [pc, #28]	@ (8008c90 <_lseek_r+0x20>)
 8008c74:	4604      	mov	r4, r0
 8008c76:	4608      	mov	r0, r1
 8008c78:	4611      	mov	r1, r2
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	602a      	str	r2, [r5, #0]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	f7f9 f8a4 	bl	8001dcc <_lseek>
 8008c84:	1c43      	adds	r3, r0, #1
 8008c86:	d102      	bne.n	8008c8e <_lseek_r+0x1e>
 8008c88:	682b      	ldr	r3, [r5, #0]
 8008c8a:	b103      	cbz	r3, 8008c8e <_lseek_r+0x1e>
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	bd38      	pop	{r3, r4, r5, pc}
 8008c90:	24000900 	.word	0x24000900

08008c94 <_read_r>:
 8008c94:	b538      	push	{r3, r4, r5, lr}
 8008c96:	4d07      	ldr	r5, [pc, #28]	@ (8008cb4 <_read_r+0x20>)
 8008c98:	4604      	mov	r4, r0
 8008c9a:	4608      	mov	r0, r1
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	602a      	str	r2, [r5, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	f7f9 f832 	bl	8001d0c <_read>
 8008ca8:	1c43      	adds	r3, r0, #1
 8008caa:	d102      	bne.n	8008cb2 <_read_r+0x1e>
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	b103      	cbz	r3, 8008cb2 <_read_r+0x1e>
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	bd38      	pop	{r3, r4, r5, pc}
 8008cb4:	24000900 	.word	0x24000900

08008cb8 <_write_r>:
 8008cb8:	b538      	push	{r3, r4, r5, lr}
 8008cba:	4d07      	ldr	r5, [pc, #28]	@ (8008cd8 <_write_r+0x20>)
 8008cbc:	4604      	mov	r4, r0
 8008cbe:	4608      	mov	r0, r1
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	602a      	str	r2, [r5, #0]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	f7f9 f83d 	bl	8001d46 <_write>
 8008ccc:	1c43      	adds	r3, r0, #1
 8008cce:	d102      	bne.n	8008cd6 <_write_r+0x1e>
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	b103      	cbz	r3, 8008cd6 <_write_r+0x1e>
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	bd38      	pop	{r3, r4, r5, pc}
 8008cd8:	24000900 	.word	0x24000900

08008cdc <__errno>:
 8008cdc:	4b01      	ldr	r3, [pc, #4]	@ (8008ce4 <__errno+0x8>)
 8008cde:	6818      	ldr	r0, [r3, #0]
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	24000020 	.word	0x24000020

08008ce8 <__libc_init_array>:
 8008ce8:	b570      	push	{r4, r5, r6, lr}
 8008cea:	4d0d      	ldr	r5, [pc, #52]	@ (8008d20 <__libc_init_array+0x38>)
 8008cec:	4c0d      	ldr	r4, [pc, #52]	@ (8008d24 <__libc_init_array+0x3c>)
 8008cee:	1b64      	subs	r4, r4, r5
 8008cf0:	10a4      	asrs	r4, r4, #2
 8008cf2:	2600      	movs	r6, #0
 8008cf4:	42a6      	cmp	r6, r4
 8008cf6:	d109      	bne.n	8008d0c <__libc_init_array+0x24>
 8008cf8:	4d0b      	ldr	r5, [pc, #44]	@ (8008d28 <__libc_init_array+0x40>)
 8008cfa:	4c0c      	ldr	r4, [pc, #48]	@ (8008d2c <__libc_init_array+0x44>)
 8008cfc:	f000 fd30 	bl	8009760 <_init>
 8008d00:	1b64      	subs	r4, r4, r5
 8008d02:	10a4      	asrs	r4, r4, #2
 8008d04:	2600      	movs	r6, #0
 8008d06:	42a6      	cmp	r6, r4
 8008d08:	d105      	bne.n	8008d16 <__libc_init_array+0x2e>
 8008d0a:	bd70      	pop	{r4, r5, r6, pc}
 8008d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d10:	4798      	blx	r3
 8008d12:	3601      	adds	r6, #1
 8008d14:	e7ee      	b.n	8008cf4 <__libc_init_array+0xc>
 8008d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d1a:	4798      	blx	r3
 8008d1c:	3601      	adds	r6, #1
 8008d1e:	e7f2      	b.n	8008d06 <__libc_init_array+0x1e>
 8008d20:	080098cc 	.word	0x080098cc
 8008d24:	080098cc 	.word	0x080098cc
 8008d28:	080098cc 	.word	0x080098cc
 8008d2c:	080098d0 	.word	0x080098d0

08008d30 <__retarget_lock_init_recursive>:
 8008d30:	4770      	bx	lr

08008d32 <__retarget_lock_acquire_recursive>:
 8008d32:	4770      	bx	lr

08008d34 <__retarget_lock_release_recursive>:
 8008d34:	4770      	bx	lr

08008d36 <memcpy>:
 8008d36:	440a      	add	r2, r1
 8008d38:	4291      	cmp	r1, r2
 8008d3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d3e:	d100      	bne.n	8008d42 <memcpy+0xc>
 8008d40:	4770      	bx	lr
 8008d42:	b510      	push	{r4, lr}
 8008d44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d4c:	4291      	cmp	r1, r2
 8008d4e:	d1f9      	bne.n	8008d44 <memcpy+0xe>
 8008d50:	bd10      	pop	{r4, pc}
	...

08008d54 <_free_r>:
 8008d54:	b538      	push	{r3, r4, r5, lr}
 8008d56:	4605      	mov	r5, r0
 8008d58:	2900      	cmp	r1, #0
 8008d5a:	d041      	beq.n	8008de0 <_free_r+0x8c>
 8008d5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d60:	1f0c      	subs	r4, r1, #4
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	bfb8      	it	lt
 8008d66:	18e4      	addlt	r4, r4, r3
 8008d68:	f000 f8e0 	bl	8008f2c <__malloc_lock>
 8008d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8008de4 <_free_r+0x90>)
 8008d6e:	6813      	ldr	r3, [r2, #0]
 8008d70:	b933      	cbnz	r3, 8008d80 <_free_r+0x2c>
 8008d72:	6063      	str	r3, [r4, #4]
 8008d74:	6014      	str	r4, [r2, #0]
 8008d76:	4628      	mov	r0, r5
 8008d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d7c:	f000 b8dc 	b.w	8008f38 <__malloc_unlock>
 8008d80:	42a3      	cmp	r3, r4
 8008d82:	d908      	bls.n	8008d96 <_free_r+0x42>
 8008d84:	6820      	ldr	r0, [r4, #0]
 8008d86:	1821      	adds	r1, r4, r0
 8008d88:	428b      	cmp	r3, r1
 8008d8a:	bf01      	itttt	eq
 8008d8c:	6819      	ldreq	r1, [r3, #0]
 8008d8e:	685b      	ldreq	r3, [r3, #4]
 8008d90:	1809      	addeq	r1, r1, r0
 8008d92:	6021      	streq	r1, [r4, #0]
 8008d94:	e7ed      	b.n	8008d72 <_free_r+0x1e>
 8008d96:	461a      	mov	r2, r3
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	b10b      	cbz	r3, 8008da0 <_free_r+0x4c>
 8008d9c:	42a3      	cmp	r3, r4
 8008d9e:	d9fa      	bls.n	8008d96 <_free_r+0x42>
 8008da0:	6811      	ldr	r1, [r2, #0]
 8008da2:	1850      	adds	r0, r2, r1
 8008da4:	42a0      	cmp	r0, r4
 8008da6:	d10b      	bne.n	8008dc0 <_free_r+0x6c>
 8008da8:	6820      	ldr	r0, [r4, #0]
 8008daa:	4401      	add	r1, r0
 8008dac:	1850      	adds	r0, r2, r1
 8008dae:	4283      	cmp	r3, r0
 8008db0:	6011      	str	r1, [r2, #0]
 8008db2:	d1e0      	bne.n	8008d76 <_free_r+0x22>
 8008db4:	6818      	ldr	r0, [r3, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	6053      	str	r3, [r2, #4]
 8008dba:	4408      	add	r0, r1
 8008dbc:	6010      	str	r0, [r2, #0]
 8008dbe:	e7da      	b.n	8008d76 <_free_r+0x22>
 8008dc0:	d902      	bls.n	8008dc8 <_free_r+0x74>
 8008dc2:	230c      	movs	r3, #12
 8008dc4:	602b      	str	r3, [r5, #0]
 8008dc6:	e7d6      	b.n	8008d76 <_free_r+0x22>
 8008dc8:	6820      	ldr	r0, [r4, #0]
 8008dca:	1821      	adds	r1, r4, r0
 8008dcc:	428b      	cmp	r3, r1
 8008dce:	bf04      	itt	eq
 8008dd0:	6819      	ldreq	r1, [r3, #0]
 8008dd2:	685b      	ldreq	r3, [r3, #4]
 8008dd4:	6063      	str	r3, [r4, #4]
 8008dd6:	bf04      	itt	eq
 8008dd8:	1809      	addeq	r1, r1, r0
 8008dda:	6021      	streq	r1, [r4, #0]
 8008ddc:	6054      	str	r4, [r2, #4]
 8008dde:	e7ca      	b.n	8008d76 <_free_r+0x22>
 8008de0:	bd38      	pop	{r3, r4, r5, pc}
 8008de2:	bf00      	nop
 8008de4:	2400090c 	.word	0x2400090c

08008de8 <sbrk_aligned>:
 8008de8:	b570      	push	{r4, r5, r6, lr}
 8008dea:	4e0f      	ldr	r6, [pc, #60]	@ (8008e28 <sbrk_aligned+0x40>)
 8008dec:	460c      	mov	r4, r1
 8008dee:	6831      	ldr	r1, [r6, #0]
 8008df0:	4605      	mov	r5, r0
 8008df2:	b911      	cbnz	r1, 8008dfa <sbrk_aligned+0x12>
 8008df4:	f000 fca4 	bl	8009740 <_sbrk_r>
 8008df8:	6030      	str	r0, [r6, #0]
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	f000 fc9f 	bl	8009740 <_sbrk_r>
 8008e02:	1c43      	adds	r3, r0, #1
 8008e04:	d103      	bne.n	8008e0e <sbrk_aligned+0x26>
 8008e06:	f04f 34ff 	mov.w	r4, #4294967295
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	bd70      	pop	{r4, r5, r6, pc}
 8008e0e:	1cc4      	adds	r4, r0, #3
 8008e10:	f024 0403 	bic.w	r4, r4, #3
 8008e14:	42a0      	cmp	r0, r4
 8008e16:	d0f8      	beq.n	8008e0a <sbrk_aligned+0x22>
 8008e18:	1a21      	subs	r1, r4, r0
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	f000 fc90 	bl	8009740 <_sbrk_r>
 8008e20:	3001      	adds	r0, #1
 8008e22:	d1f2      	bne.n	8008e0a <sbrk_aligned+0x22>
 8008e24:	e7ef      	b.n	8008e06 <sbrk_aligned+0x1e>
 8008e26:	bf00      	nop
 8008e28:	24000908 	.word	0x24000908

08008e2c <_malloc_r>:
 8008e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e30:	1ccd      	adds	r5, r1, #3
 8008e32:	f025 0503 	bic.w	r5, r5, #3
 8008e36:	3508      	adds	r5, #8
 8008e38:	2d0c      	cmp	r5, #12
 8008e3a:	bf38      	it	cc
 8008e3c:	250c      	movcc	r5, #12
 8008e3e:	2d00      	cmp	r5, #0
 8008e40:	4606      	mov	r6, r0
 8008e42:	db01      	blt.n	8008e48 <_malloc_r+0x1c>
 8008e44:	42a9      	cmp	r1, r5
 8008e46:	d904      	bls.n	8008e52 <_malloc_r+0x26>
 8008e48:	230c      	movs	r3, #12
 8008e4a:	6033      	str	r3, [r6, #0]
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f28 <_malloc_r+0xfc>
 8008e56:	f000 f869 	bl	8008f2c <__malloc_lock>
 8008e5a:	f8d8 3000 	ldr.w	r3, [r8]
 8008e5e:	461c      	mov	r4, r3
 8008e60:	bb44      	cbnz	r4, 8008eb4 <_malloc_r+0x88>
 8008e62:	4629      	mov	r1, r5
 8008e64:	4630      	mov	r0, r6
 8008e66:	f7ff ffbf 	bl	8008de8 <sbrk_aligned>
 8008e6a:	1c43      	adds	r3, r0, #1
 8008e6c:	4604      	mov	r4, r0
 8008e6e:	d158      	bne.n	8008f22 <_malloc_r+0xf6>
 8008e70:	f8d8 4000 	ldr.w	r4, [r8]
 8008e74:	4627      	mov	r7, r4
 8008e76:	2f00      	cmp	r7, #0
 8008e78:	d143      	bne.n	8008f02 <_malloc_r+0xd6>
 8008e7a:	2c00      	cmp	r4, #0
 8008e7c:	d04b      	beq.n	8008f16 <_malloc_r+0xea>
 8008e7e:	6823      	ldr	r3, [r4, #0]
 8008e80:	4639      	mov	r1, r7
 8008e82:	4630      	mov	r0, r6
 8008e84:	eb04 0903 	add.w	r9, r4, r3
 8008e88:	f000 fc5a 	bl	8009740 <_sbrk_r>
 8008e8c:	4581      	cmp	r9, r0
 8008e8e:	d142      	bne.n	8008f16 <_malloc_r+0xea>
 8008e90:	6821      	ldr	r1, [r4, #0]
 8008e92:	1a6d      	subs	r5, r5, r1
 8008e94:	4629      	mov	r1, r5
 8008e96:	4630      	mov	r0, r6
 8008e98:	f7ff ffa6 	bl	8008de8 <sbrk_aligned>
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	d03a      	beq.n	8008f16 <_malloc_r+0xea>
 8008ea0:	6823      	ldr	r3, [r4, #0]
 8008ea2:	442b      	add	r3, r5
 8008ea4:	6023      	str	r3, [r4, #0]
 8008ea6:	f8d8 3000 	ldr.w	r3, [r8]
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	bb62      	cbnz	r2, 8008f08 <_malloc_r+0xdc>
 8008eae:	f8c8 7000 	str.w	r7, [r8]
 8008eb2:	e00f      	b.n	8008ed4 <_malloc_r+0xa8>
 8008eb4:	6822      	ldr	r2, [r4, #0]
 8008eb6:	1b52      	subs	r2, r2, r5
 8008eb8:	d420      	bmi.n	8008efc <_malloc_r+0xd0>
 8008eba:	2a0b      	cmp	r2, #11
 8008ebc:	d917      	bls.n	8008eee <_malloc_r+0xc2>
 8008ebe:	1961      	adds	r1, r4, r5
 8008ec0:	42a3      	cmp	r3, r4
 8008ec2:	6025      	str	r5, [r4, #0]
 8008ec4:	bf18      	it	ne
 8008ec6:	6059      	strne	r1, [r3, #4]
 8008ec8:	6863      	ldr	r3, [r4, #4]
 8008eca:	bf08      	it	eq
 8008ecc:	f8c8 1000 	streq.w	r1, [r8]
 8008ed0:	5162      	str	r2, [r4, r5]
 8008ed2:	604b      	str	r3, [r1, #4]
 8008ed4:	4630      	mov	r0, r6
 8008ed6:	f000 f82f 	bl	8008f38 <__malloc_unlock>
 8008eda:	f104 000b 	add.w	r0, r4, #11
 8008ede:	1d23      	adds	r3, r4, #4
 8008ee0:	f020 0007 	bic.w	r0, r0, #7
 8008ee4:	1ac2      	subs	r2, r0, r3
 8008ee6:	bf1c      	itt	ne
 8008ee8:	1a1b      	subne	r3, r3, r0
 8008eea:	50a3      	strne	r3, [r4, r2]
 8008eec:	e7af      	b.n	8008e4e <_malloc_r+0x22>
 8008eee:	6862      	ldr	r2, [r4, #4]
 8008ef0:	42a3      	cmp	r3, r4
 8008ef2:	bf0c      	ite	eq
 8008ef4:	f8c8 2000 	streq.w	r2, [r8]
 8008ef8:	605a      	strne	r2, [r3, #4]
 8008efa:	e7eb      	b.n	8008ed4 <_malloc_r+0xa8>
 8008efc:	4623      	mov	r3, r4
 8008efe:	6864      	ldr	r4, [r4, #4]
 8008f00:	e7ae      	b.n	8008e60 <_malloc_r+0x34>
 8008f02:	463c      	mov	r4, r7
 8008f04:	687f      	ldr	r7, [r7, #4]
 8008f06:	e7b6      	b.n	8008e76 <_malloc_r+0x4a>
 8008f08:	461a      	mov	r2, r3
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	42a3      	cmp	r3, r4
 8008f0e:	d1fb      	bne.n	8008f08 <_malloc_r+0xdc>
 8008f10:	2300      	movs	r3, #0
 8008f12:	6053      	str	r3, [r2, #4]
 8008f14:	e7de      	b.n	8008ed4 <_malloc_r+0xa8>
 8008f16:	230c      	movs	r3, #12
 8008f18:	6033      	str	r3, [r6, #0]
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	f000 f80c 	bl	8008f38 <__malloc_unlock>
 8008f20:	e794      	b.n	8008e4c <_malloc_r+0x20>
 8008f22:	6005      	str	r5, [r0, #0]
 8008f24:	e7d6      	b.n	8008ed4 <_malloc_r+0xa8>
 8008f26:	bf00      	nop
 8008f28:	2400090c 	.word	0x2400090c

08008f2c <__malloc_lock>:
 8008f2c:	4801      	ldr	r0, [pc, #4]	@ (8008f34 <__malloc_lock+0x8>)
 8008f2e:	f7ff bf00 	b.w	8008d32 <__retarget_lock_acquire_recursive>
 8008f32:	bf00      	nop
 8008f34:	24000904 	.word	0x24000904

08008f38 <__malloc_unlock>:
 8008f38:	4801      	ldr	r0, [pc, #4]	@ (8008f40 <__malloc_unlock+0x8>)
 8008f3a:	f7ff befb 	b.w	8008d34 <__retarget_lock_release_recursive>
 8008f3e:	bf00      	nop
 8008f40:	24000904 	.word	0x24000904

08008f44 <__sfputc_r>:
 8008f44:	6893      	ldr	r3, [r2, #8]
 8008f46:	3b01      	subs	r3, #1
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	b410      	push	{r4}
 8008f4c:	6093      	str	r3, [r2, #8]
 8008f4e:	da08      	bge.n	8008f62 <__sfputc_r+0x1e>
 8008f50:	6994      	ldr	r4, [r2, #24]
 8008f52:	42a3      	cmp	r3, r4
 8008f54:	db01      	blt.n	8008f5a <__sfputc_r+0x16>
 8008f56:	290a      	cmp	r1, #10
 8008f58:	d103      	bne.n	8008f62 <__sfputc_r+0x1e>
 8008f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f5e:	f7ff bdda 	b.w	8008b16 <__swbuf_r>
 8008f62:	6813      	ldr	r3, [r2, #0]
 8008f64:	1c58      	adds	r0, r3, #1
 8008f66:	6010      	str	r0, [r2, #0]
 8008f68:	7019      	strb	r1, [r3, #0]
 8008f6a:	4608      	mov	r0, r1
 8008f6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f70:	4770      	bx	lr

08008f72 <__sfputs_r>:
 8008f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f74:	4606      	mov	r6, r0
 8008f76:	460f      	mov	r7, r1
 8008f78:	4614      	mov	r4, r2
 8008f7a:	18d5      	adds	r5, r2, r3
 8008f7c:	42ac      	cmp	r4, r5
 8008f7e:	d101      	bne.n	8008f84 <__sfputs_r+0x12>
 8008f80:	2000      	movs	r0, #0
 8008f82:	e007      	b.n	8008f94 <__sfputs_r+0x22>
 8008f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f88:	463a      	mov	r2, r7
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	f7ff ffda 	bl	8008f44 <__sfputc_r>
 8008f90:	1c43      	adds	r3, r0, #1
 8008f92:	d1f3      	bne.n	8008f7c <__sfputs_r+0xa>
 8008f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f98 <_vfiprintf_r>:
 8008f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f9c:	460d      	mov	r5, r1
 8008f9e:	b09d      	sub	sp, #116	@ 0x74
 8008fa0:	4614      	mov	r4, r2
 8008fa2:	4698      	mov	r8, r3
 8008fa4:	4606      	mov	r6, r0
 8008fa6:	b118      	cbz	r0, 8008fb0 <_vfiprintf_r+0x18>
 8008fa8:	6a03      	ldr	r3, [r0, #32]
 8008faa:	b90b      	cbnz	r3, 8008fb0 <_vfiprintf_r+0x18>
 8008fac:	f7ff fcca 	bl	8008944 <__sinit>
 8008fb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fb2:	07d9      	lsls	r1, r3, #31
 8008fb4:	d405      	bmi.n	8008fc2 <_vfiprintf_r+0x2a>
 8008fb6:	89ab      	ldrh	r3, [r5, #12]
 8008fb8:	059a      	lsls	r2, r3, #22
 8008fba:	d402      	bmi.n	8008fc2 <_vfiprintf_r+0x2a>
 8008fbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fbe:	f7ff feb8 	bl	8008d32 <__retarget_lock_acquire_recursive>
 8008fc2:	89ab      	ldrh	r3, [r5, #12]
 8008fc4:	071b      	lsls	r3, r3, #28
 8008fc6:	d501      	bpl.n	8008fcc <_vfiprintf_r+0x34>
 8008fc8:	692b      	ldr	r3, [r5, #16]
 8008fca:	b99b      	cbnz	r3, 8008ff4 <_vfiprintf_r+0x5c>
 8008fcc:	4629      	mov	r1, r5
 8008fce:	4630      	mov	r0, r6
 8008fd0:	f7ff fde0 	bl	8008b94 <__swsetup_r>
 8008fd4:	b170      	cbz	r0, 8008ff4 <_vfiprintf_r+0x5c>
 8008fd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fd8:	07dc      	lsls	r4, r3, #31
 8008fda:	d504      	bpl.n	8008fe6 <_vfiprintf_r+0x4e>
 8008fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe0:	b01d      	add	sp, #116	@ 0x74
 8008fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe6:	89ab      	ldrh	r3, [r5, #12]
 8008fe8:	0598      	lsls	r0, r3, #22
 8008fea:	d4f7      	bmi.n	8008fdc <_vfiprintf_r+0x44>
 8008fec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fee:	f7ff fea1 	bl	8008d34 <__retarget_lock_release_recursive>
 8008ff2:	e7f3      	b.n	8008fdc <_vfiprintf_r+0x44>
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ff8:	2320      	movs	r3, #32
 8008ffa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ffe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009002:	2330      	movs	r3, #48	@ 0x30
 8009004:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80091b4 <_vfiprintf_r+0x21c>
 8009008:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800900c:	f04f 0901 	mov.w	r9, #1
 8009010:	4623      	mov	r3, r4
 8009012:	469a      	mov	sl, r3
 8009014:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009018:	b10a      	cbz	r2, 800901e <_vfiprintf_r+0x86>
 800901a:	2a25      	cmp	r2, #37	@ 0x25
 800901c:	d1f9      	bne.n	8009012 <_vfiprintf_r+0x7a>
 800901e:	ebba 0b04 	subs.w	fp, sl, r4
 8009022:	d00b      	beq.n	800903c <_vfiprintf_r+0xa4>
 8009024:	465b      	mov	r3, fp
 8009026:	4622      	mov	r2, r4
 8009028:	4629      	mov	r1, r5
 800902a:	4630      	mov	r0, r6
 800902c:	f7ff ffa1 	bl	8008f72 <__sfputs_r>
 8009030:	3001      	adds	r0, #1
 8009032:	f000 80a7 	beq.w	8009184 <_vfiprintf_r+0x1ec>
 8009036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009038:	445a      	add	r2, fp
 800903a:	9209      	str	r2, [sp, #36]	@ 0x24
 800903c:	f89a 3000 	ldrb.w	r3, [sl]
 8009040:	2b00      	cmp	r3, #0
 8009042:	f000 809f 	beq.w	8009184 <_vfiprintf_r+0x1ec>
 8009046:	2300      	movs	r3, #0
 8009048:	f04f 32ff 	mov.w	r2, #4294967295
 800904c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009050:	f10a 0a01 	add.w	sl, sl, #1
 8009054:	9304      	str	r3, [sp, #16]
 8009056:	9307      	str	r3, [sp, #28]
 8009058:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800905c:	931a      	str	r3, [sp, #104]	@ 0x68
 800905e:	4654      	mov	r4, sl
 8009060:	2205      	movs	r2, #5
 8009062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009066:	4853      	ldr	r0, [pc, #332]	@ (80091b4 <_vfiprintf_r+0x21c>)
 8009068:	f7f7 f93a 	bl	80002e0 <memchr>
 800906c:	9a04      	ldr	r2, [sp, #16]
 800906e:	b9d8      	cbnz	r0, 80090a8 <_vfiprintf_r+0x110>
 8009070:	06d1      	lsls	r1, r2, #27
 8009072:	bf44      	itt	mi
 8009074:	2320      	movmi	r3, #32
 8009076:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800907a:	0713      	lsls	r3, r2, #28
 800907c:	bf44      	itt	mi
 800907e:	232b      	movmi	r3, #43	@ 0x2b
 8009080:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009084:	f89a 3000 	ldrb.w	r3, [sl]
 8009088:	2b2a      	cmp	r3, #42	@ 0x2a
 800908a:	d015      	beq.n	80090b8 <_vfiprintf_r+0x120>
 800908c:	9a07      	ldr	r2, [sp, #28]
 800908e:	4654      	mov	r4, sl
 8009090:	2000      	movs	r0, #0
 8009092:	f04f 0c0a 	mov.w	ip, #10
 8009096:	4621      	mov	r1, r4
 8009098:	f811 3b01 	ldrb.w	r3, [r1], #1
 800909c:	3b30      	subs	r3, #48	@ 0x30
 800909e:	2b09      	cmp	r3, #9
 80090a0:	d94b      	bls.n	800913a <_vfiprintf_r+0x1a2>
 80090a2:	b1b0      	cbz	r0, 80090d2 <_vfiprintf_r+0x13a>
 80090a4:	9207      	str	r2, [sp, #28]
 80090a6:	e014      	b.n	80090d2 <_vfiprintf_r+0x13a>
 80090a8:	eba0 0308 	sub.w	r3, r0, r8
 80090ac:	fa09 f303 	lsl.w	r3, r9, r3
 80090b0:	4313      	orrs	r3, r2
 80090b2:	9304      	str	r3, [sp, #16]
 80090b4:	46a2      	mov	sl, r4
 80090b6:	e7d2      	b.n	800905e <_vfiprintf_r+0xc6>
 80090b8:	9b03      	ldr	r3, [sp, #12]
 80090ba:	1d19      	adds	r1, r3, #4
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	9103      	str	r1, [sp, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	bfbb      	ittet	lt
 80090c4:	425b      	neglt	r3, r3
 80090c6:	f042 0202 	orrlt.w	r2, r2, #2
 80090ca:	9307      	strge	r3, [sp, #28]
 80090cc:	9307      	strlt	r3, [sp, #28]
 80090ce:	bfb8      	it	lt
 80090d0:	9204      	strlt	r2, [sp, #16]
 80090d2:	7823      	ldrb	r3, [r4, #0]
 80090d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80090d6:	d10a      	bne.n	80090ee <_vfiprintf_r+0x156>
 80090d8:	7863      	ldrb	r3, [r4, #1]
 80090da:	2b2a      	cmp	r3, #42	@ 0x2a
 80090dc:	d132      	bne.n	8009144 <_vfiprintf_r+0x1ac>
 80090de:	9b03      	ldr	r3, [sp, #12]
 80090e0:	1d1a      	adds	r2, r3, #4
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	9203      	str	r2, [sp, #12]
 80090e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090ea:	3402      	adds	r4, #2
 80090ec:	9305      	str	r3, [sp, #20]
 80090ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80091c4 <_vfiprintf_r+0x22c>
 80090f2:	7821      	ldrb	r1, [r4, #0]
 80090f4:	2203      	movs	r2, #3
 80090f6:	4650      	mov	r0, sl
 80090f8:	f7f7 f8f2 	bl	80002e0 <memchr>
 80090fc:	b138      	cbz	r0, 800910e <_vfiprintf_r+0x176>
 80090fe:	9b04      	ldr	r3, [sp, #16]
 8009100:	eba0 000a 	sub.w	r0, r0, sl
 8009104:	2240      	movs	r2, #64	@ 0x40
 8009106:	4082      	lsls	r2, r0
 8009108:	4313      	orrs	r3, r2
 800910a:	3401      	adds	r4, #1
 800910c:	9304      	str	r3, [sp, #16]
 800910e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009112:	4829      	ldr	r0, [pc, #164]	@ (80091b8 <_vfiprintf_r+0x220>)
 8009114:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009118:	2206      	movs	r2, #6
 800911a:	f7f7 f8e1 	bl	80002e0 <memchr>
 800911e:	2800      	cmp	r0, #0
 8009120:	d03f      	beq.n	80091a2 <_vfiprintf_r+0x20a>
 8009122:	4b26      	ldr	r3, [pc, #152]	@ (80091bc <_vfiprintf_r+0x224>)
 8009124:	bb1b      	cbnz	r3, 800916e <_vfiprintf_r+0x1d6>
 8009126:	9b03      	ldr	r3, [sp, #12]
 8009128:	3307      	adds	r3, #7
 800912a:	f023 0307 	bic.w	r3, r3, #7
 800912e:	3308      	adds	r3, #8
 8009130:	9303      	str	r3, [sp, #12]
 8009132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009134:	443b      	add	r3, r7
 8009136:	9309      	str	r3, [sp, #36]	@ 0x24
 8009138:	e76a      	b.n	8009010 <_vfiprintf_r+0x78>
 800913a:	fb0c 3202 	mla	r2, ip, r2, r3
 800913e:	460c      	mov	r4, r1
 8009140:	2001      	movs	r0, #1
 8009142:	e7a8      	b.n	8009096 <_vfiprintf_r+0xfe>
 8009144:	2300      	movs	r3, #0
 8009146:	3401      	adds	r4, #1
 8009148:	9305      	str	r3, [sp, #20]
 800914a:	4619      	mov	r1, r3
 800914c:	f04f 0c0a 	mov.w	ip, #10
 8009150:	4620      	mov	r0, r4
 8009152:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009156:	3a30      	subs	r2, #48	@ 0x30
 8009158:	2a09      	cmp	r2, #9
 800915a:	d903      	bls.n	8009164 <_vfiprintf_r+0x1cc>
 800915c:	2b00      	cmp	r3, #0
 800915e:	d0c6      	beq.n	80090ee <_vfiprintf_r+0x156>
 8009160:	9105      	str	r1, [sp, #20]
 8009162:	e7c4      	b.n	80090ee <_vfiprintf_r+0x156>
 8009164:	fb0c 2101 	mla	r1, ip, r1, r2
 8009168:	4604      	mov	r4, r0
 800916a:	2301      	movs	r3, #1
 800916c:	e7f0      	b.n	8009150 <_vfiprintf_r+0x1b8>
 800916e:	ab03      	add	r3, sp, #12
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	462a      	mov	r2, r5
 8009174:	4b12      	ldr	r3, [pc, #72]	@ (80091c0 <_vfiprintf_r+0x228>)
 8009176:	a904      	add	r1, sp, #16
 8009178:	4630      	mov	r0, r6
 800917a:	f3af 8000 	nop.w
 800917e:	4607      	mov	r7, r0
 8009180:	1c78      	adds	r0, r7, #1
 8009182:	d1d6      	bne.n	8009132 <_vfiprintf_r+0x19a>
 8009184:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009186:	07d9      	lsls	r1, r3, #31
 8009188:	d405      	bmi.n	8009196 <_vfiprintf_r+0x1fe>
 800918a:	89ab      	ldrh	r3, [r5, #12]
 800918c:	059a      	lsls	r2, r3, #22
 800918e:	d402      	bmi.n	8009196 <_vfiprintf_r+0x1fe>
 8009190:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009192:	f7ff fdcf 	bl	8008d34 <__retarget_lock_release_recursive>
 8009196:	89ab      	ldrh	r3, [r5, #12]
 8009198:	065b      	lsls	r3, r3, #25
 800919a:	f53f af1f 	bmi.w	8008fdc <_vfiprintf_r+0x44>
 800919e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80091a0:	e71e      	b.n	8008fe0 <_vfiprintf_r+0x48>
 80091a2:	ab03      	add	r3, sp, #12
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	462a      	mov	r2, r5
 80091a8:	4b05      	ldr	r3, [pc, #20]	@ (80091c0 <_vfiprintf_r+0x228>)
 80091aa:	a904      	add	r1, sp, #16
 80091ac:	4630      	mov	r0, r6
 80091ae:	f000 f879 	bl	80092a4 <_printf_i>
 80091b2:	e7e4      	b.n	800917e <_vfiprintf_r+0x1e6>
 80091b4:	08009890 	.word	0x08009890
 80091b8:	0800989a 	.word	0x0800989a
 80091bc:	00000000 	.word	0x00000000
 80091c0:	08008f73 	.word	0x08008f73
 80091c4:	08009896 	.word	0x08009896

080091c8 <_printf_common>:
 80091c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091cc:	4616      	mov	r6, r2
 80091ce:	4698      	mov	r8, r3
 80091d0:	688a      	ldr	r2, [r1, #8]
 80091d2:	690b      	ldr	r3, [r1, #16]
 80091d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091d8:	4293      	cmp	r3, r2
 80091da:	bfb8      	it	lt
 80091dc:	4613      	movlt	r3, r2
 80091de:	6033      	str	r3, [r6, #0]
 80091e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091e4:	4607      	mov	r7, r0
 80091e6:	460c      	mov	r4, r1
 80091e8:	b10a      	cbz	r2, 80091ee <_printf_common+0x26>
 80091ea:	3301      	adds	r3, #1
 80091ec:	6033      	str	r3, [r6, #0]
 80091ee:	6823      	ldr	r3, [r4, #0]
 80091f0:	0699      	lsls	r1, r3, #26
 80091f2:	bf42      	ittt	mi
 80091f4:	6833      	ldrmi	r3, [r6, #0]
 80091f6:	3302      	addmi	r3, #2
 80091f8:	6033      	strmi	r3, [r6, #0]
 80091fa:	6825      	ldr	r5, [r4, #0]
 80091fc:	f015 0506 	ands.w	r5, r5, #6
 8009200:	d106      	bne.n	8009210 <_printf_common+0x48>
 8009202:	f104 0a19 	add.w	sl, r4, #25
 8009206:	68e3      	ldr	r3, [r4, #12]
 8009208:	6832      	ldr	r2, [r6, #0]
 800920a:	1a9b      	subs	r3, r3, r2
 800920c:	42ab      	cmp	r3, r5
 800920e:	dc26      	bgt.n	800925e <_printf_common+0x96>
 8009210:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009214:	6822      	ldr	r2, [r4, #0]
 8009216:	3b00      	subs	r3, #0
 8009218:	bf18      	it	ne
 800921a:	2301      	movne	r3, #1
 800921c:	0692      	lsls	r2, r2, #26
 800921e:	d42b      	bmi.n	8009278 <_printf_common+0xb0>
 8009220:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009224:	4641      	mov	r1, r8
 8009226:	4638      	mov	r0, r7
 8009228:	47c8      	blx	r9
 800922a:	3001      	adds	r0, #1
 800922c:	d01e      	beq.n	800926c <_printf_common+0xa4>
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	6922      	ldr	r2, [r4, #16]
 8009232:	f003 0306 	and.w	r3, r3, #6
 8009236:	2b04      	cmp	r3, #4
 8009238:	bf02      	ittt	eq
 800923a:	68e5      	ldreq	r5, [r4, #12]
 800923c:	6833      	ldreq	r3, [r6, #0]
 800923e:	1aed      	subeq	r5, r5, r3
 8009240:	68a3      	ldr	r3, [r4, #8]
 8009242:	bf0c      	ite	eq
 8009244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009248:	2500      	movne	r5, #0
 800924a:	4293      	cmp	r3, r2
 800924c:	bfc4      	itt	gt
 800924e:	1a9b      	subgt	r3, r3, r2
 8009250:	18ed      	addgt	r5, r5, r3
 8009252:	2600      	movs	r6, #0
 8009254:	341a      	adds	r4, #26
 8009256:	42b5      	cmp	r5, r6
 8009258:	d11a      	bne.n	8009290 <_printf_common+0xc8>
 800925a:	2000      	movs	r0, #0
 800925c:	e008      	b.n	8009270 <_printf_common+0xa8>
 800925e:	2301      	movs	r3, #1
 8009260:	4652      	mov	r2, sl
 8009262:	4641      	mov	r1, r8
 8009264:	4638      	mov	r0, r7
 8009266:	47c8      	blx	r9
 8009268:	3001      	adds	r0, #1
 800926a:	d103      	bne.n	8009274 <_printf_common+0xac>
 800926c:	f04f 30ff 	mov.w	r0, #4294967295
 8009270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009274:	3501      	adds	r5, #1
 8009276:	e7c6      	b.n	8009206 <_printf_common+0x3e>
 8009278:	18e1      	adds	r1, r4, r3
 800927a:	1c5a      	adds	r2, r3, #1
 800927c:	2030      	movs	r0, #48	@ 0x30
 800927e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009282:	4422      	add	r2, r4
 8009284:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009288:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800928c:	3302      	adds	r3, #2
 800928e:	e7c7      	b.n	8009220 <_printf_common+0x58>
 8009290:	2301      	movs	r3, #1
 8009292:	4622      	mov	r2, r4
 8009294:	4641      	mov	r1, r8
 8009296:	4638      	mov	r0, r7
 8009298:	47c8      	blx	r9
 800929a:	3001      	adds	r0, #1
 800929c:	d0e6      	beq.n	800926c <_printf_common+0xa4>
 800929e:	3601      	adds	r6, #1
 80092a0:	e7d9      	b.n	8009256 <_printf_common+0x8e>
	...

080092a4 <_printf_i>:
 80092a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092a8:	7e0f      	ldrb	r7, [r1, #24]
 80092aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80092ac:	2f78      	cmp	r7, #120	@ 0x78
 80092ae:	4691      	mov	r9, r2
 80092b0:	4680      	mov	r8, r0
 80092b2:	460c      	mov	r4, r1
 80092b4:	469a      	mov	sl, r3
 80092b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80092ba:	d807      	bhi.n	80092cc <_printf_i+0x28>
 80092bc:	2f62      	cmp	r7, #98	@ 0x62
 80092be:	d80a      	bhi.n	80092d6 <_printf_i+0x32>
 80092c0:	2f00      	cmp	r7, #0
 80092c2:	f000 80d1 	beq.w	8009468 <_printf_i+0x1c4>
 80092c6:	2f58      	cmp	r7, #88	@ 0x58
 80092c8:	f000 80b8 	beq.w	800943c <_printf_i+0x198>
 80092cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092d4:	e03a      	b.n	800934c <_printf_i+0xa8>
 80092d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092da:	2b15      	cmp	r3, #21
 80092dc:	d8f6      	bhi.n	80092cc <_printf_i+0x28>
 80092de:	a101      	add	r1, pc, #4	@ (adr r1, 80092e4 <_printf_i+0x40>)
 80092e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092e4:	0800933d 	.word	0x0800933d
 80092e8:	08009351 	.word	0x08009351
 80092ec:	080092cd 	.word	0x080092cd
 80092f0:	080092cd 	.word	0x080092cd
 80092f4:	080092cd 	.word	0x080092cd
 80092f8:	080092cd 	.word	0x080092cd
 80092fc:	08009351 	.word	0x08009351
 8009300:	080092cd 	.word	0x080092cd
 8009304:	080092cd 	.word	0x080092cd
 8009308:	080092cd 	.word	0x080092cd
 800930c:	080092cd 	.word	0x080092cd
 8009310:	0800944f 	.word	0x0800944f
 8009314:	0800937b 	.word	0x0800937b
 8009318:	08009409 	.word	0x08009409
 800931c:	080092cd 	.word	0x080092cd
 8009320:	080092cd 	.word	0x080092cd
 8009324:	08009471 	.word	0x08009471
 8009328:	080092cd 	.word	0x080092cd
 800932c:	0800937b 	.word	0x0800937b
 8009330:	080092cd 	.word	0x080092cd
 8009334:	080092cd 	.word	0x080092cd
 8009338:	08009411 	.word	0x08009411
 800933c:	6833      	ldr	r3, [r6, #0]
 800933e:	1d1a      	adds	r2, r3, #4
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	6032      	str	r2, [r6, #0]
 8009344:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009348:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800934c:	2301      	movs	r3, #1
 800934e:	e09c      	b.n	800948a <_printf_i+0x1e6>
 8009350:	6833      	ldr	r3, [r6, #0]
 8009352:	6820      	ldr	r0, [r4, #0]
 8009354:	1d19      	adds	r1, r3, #4
 8009356:	6031      	str	r1, [r6, #0]
 8009358:	0606      	lsls	r6, r0, #24
 800935a:	d501      	bpl.n	8009360 <_printf_i+0xbc>
 800935c:	681d      	ldr	r5, [r3, #0]
 800935e:	e003      	b.n	8009368 <_printf_i+0xc4>
 8009360:	0645      	lsls	r5, r0, #25
 8009362:	d5fb      	bpl.n	800935c <_printf_i+0xb8>
 8009364:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009368:	2d00      	cmp	r5, #0
 800936a:	da03      	bge.n	8009374 <_printf_i+0xd0>
 800936c:	232d      	movs	r3, #45	@ 0x2d
 800936e:	426d      	negs	r5, r5
 8009370:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009374:	4858      	ldr	r0, [pc, #352]	@ (80094d8 <_printf_i+0x234>)
 8009376:	230a      	movs	r3, #10
 8009378:	e011      	b.n	800939e <_printf_i+0xfa>
 800937a:	6821      	ldr	r1, [r4, #0]
 800937c:	6833      	ldr	r3, [r6, #0]
 800937e:	0608      	lsls	r0, r1, #24
 8009380:	f853 5b04 	ldr.w	r5, [r3], #4
 8009384:	d402      	bmi.n	800938c <_printf_i+0xe8>
 8009386:	0649      	lsls	r1, r1, #25
 8009388:	bf48      	it	mi
 800938a:	b2ad      	uxthmi	r5, r5
 800938c:	2f6f      	cmp	r7, #111	@ 0x6f
 800938e:	4852      	ldr	r0, [pc, #328]	@ (80094d8 <_printf_i+0x234>)
 8009390:	6033      	str	r3, [r6, #0]
 8009392:	bf14      	ite	ne
 8009394:	230a      	movne	r3, #10
 8009396:	2308      	moveq	r3, #8
 8009398:	2100      	movs	r1, #0
 800939a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800939e:	6866      	ldr	r6, [r4, #4]
 80093a0:	60a6      	str	r6, [r4, #8]
 80093a2:	2e00      	cmp	r6, #0
 80093a4:	db05      	blt.n	80093b2 <_printf_i+0x10e>
 80093a6:	6821      	ldr	r1, [r4, #0]
 80093a8:	432e      	orrs	r6, r5
 80093aa:	f021 0104 	bic.w	r1, r1, #4
 80093ae:	6021      	str	r1, [r4, #0]
 80093b0:	d04b      	beq.n	800944a <_printf_i+0x1a6>
 80093b2:	4616      	mov	r6, r2
 80093b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80093b8:	fb03 5711 	mls	r7, r3, r1, r5
 80093bc:	5dc7      	ldrb	r7, [r0, r7]
 80093be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093c2:	462f      	mov	r7, r5
 80093c4:	42bb      	cmp	r3, r7
 80093c6:	460d      	mov	r5, r1
 80093c8:	d9f4      	bls.n	80093b4 <_printf_i+0x110>
 80093ca:	2b08      	cmp	r3, #8
 80093cc:	d10b      	bne.n	80093e6 <_printf_i+0x142>
 80093ce:	6823      	ldr	r3, [r4, #0]
 80093d0:	07df      	lsls	r7, r3, #31
 80093d2:	d508      	bpl.n	80093e6 <_printf_i+0x142>
 80093d4:	6923      	ldr	r3, [r4, #16]
 80093d6:	6861      	ldr	r1, [r4, #4]
 80093d8:	4299      	cmp	r1, r3
 80093da:	bfde      	ittt	le
 80093dc:	2330      	movle	r3, #48	@ 0x30
 80093de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093e6:	1b92      	subs	r2, r2, r6
 80093e8:	6122      	str	r2, [r4, #16]
 80093ea:	f8cd a000 	str.w	sl, [sp]
 80093ee:	464b      	mov	r3, r9
 80093f0:	aa03      	add	r2, sp, #12
 80093f2:	4621      	mov	r1, r4
 80093f4:	4640      	mov	r0, r8
 80093f6:	f7ff fee7 	bl	80091c8 <_printf_common>
 80093fa:	3001      	adds	r0, #1
 80093fc:	d14a      	bne.n	8009494 <_printf_i+0x1f0>
 80093fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009402:	b004      	add	sp, #16
 8009404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009408:	6823      	ldr	r3, [r4, #0]
 800940a:	f043 0320 	orr.w	r3, r3, #32
 800940e:	6023      	str	r3, [r4, #0]
 8009410:	4832      	ldr	r0, [pc, #200]	@ (80094dc <_printf_i+0x238>)
 8009412:	2778      	movs	r7, #120	@ 0x78
 8009414:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009418:	6823      	ldr	r3, [r4, #0]
 800941a:	6831      	ldr	r1, [r6, #0]
 800941c:	061f      	lsls	r7, r3, #24
 800941e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009422:	d402      	bmi.n	800942a <_printf_i+0x186>
 8009424:	065f      	lsls	r7, r3, #25
 8009426:	bf48      	it	mi
 8009428:	b2ad      	uxthmi	r5, r5
 800942a:	6031      	str	r1, [r6, #0]
 800942c:	07d9      	lsls	r1, r3, #31
 800942e:	bf44      	itt	mi
 8009430:	f043 0320 	orrmi.w	r3, r3, #32
 8009434:	6023      	strmi	r3, [r4, #0]
 8009436:	b11d      	cbz	r5, 8009440 <_printf_i+0x19c>
 8009438:	2310      	movs	r3, #16
 800943a:	e7ad      	b.n	8009398 <_printf_i+0xf4>
 800943c:	4826      	ldr	r0, [pc, #152]	@ (80094d8 <_printf_i+0x234>)
 800943e:	e7e9      	b.n	8009414 <_printf_i+0x170>
 8009440:	6823      	ldr	r3, [r4, #0]
 8009442:	f023 0320 	bic.w	r3, r3, #32
 8009446:	6023      	str	r3, [r4, #0]
 8009448:	e7f6      	b.n	8009438 <_printf_i+0x194>
 800944a:	4616      	mov	r6, r2
 800944c:	e7bd      	b.n	80093ca <_printf_i+0x126>
 800944e:	6833      	ldr	r3, [r6, #0]
 8009450:	6825      	ldr	r5, [r4, #0]
 8009452:	6961      	ldr	r1, [r4, #20]
 8009454:	1d18      	adds	r0, r3, #4
 8009456:	6030      	str	r0, [r6, #0]
 8009458:	062e      	lsls	r6, r5, #24
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	d501      	bpl.n	8009462 <_printf_i+0x1be>
 800945e:	6019      	str	r1, [r3, #0]
 8009460:	e002      	b.n	8009468 <_printf_i+0x1c4>
 8009462:	0668      	lsls	r0, r5, #25
 8009464:	d5fb      	bpl.n	800945e <_printf_i+0x1ba>
 8009466:	8019      	strh	r1, [r3, #0]
 8009468:	2300      	movs	r3, #0
 800946a:	6123      	str	r3, [r4, #16]
 800946c:	4616      	mov	r6, r2
 800946e:	e7bc      	b.n	80093ea <_printf_i+0x146>
 8009470:	6833      	ldr	r3, [r6, #0]
 8009472:	1d1a      	adds	r2, r3, #4
 8009474:	6032      	str	r2, [r6, #0]
 8009476:	681e      	ldr	r6, [r3, #0]
 8009478:	6862      	ldr	r2, [r4, #4]
 800947a:	2100      	movs	r1, #0
 800947c:	4630      	mov	r0, r6
 800947e:	f7f6 ff2f 	bl	80002e0 <memchr>
 8009482:	b108      	cbz	r0, 8009488 <_printf_i+0x1e4>
 8009484:	1b80      	subs	r0, r0, r6
 8009486:	6060      	str	r0, [r4, #4]
 8009488:	6863      	ldr	r3, [r4, #4]
 800948a:	6123      	str	r3, [r4, #16]
 800948c:	2300      	movs	r3, #0
 800948e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009492:	e7aa      	b.n	80093ea <_printf_i+0x146>
 8009494:	6923      	ldr	r3, [r4, #16]
 8009496:	4632      	mov	r2, r6
 8009498:	4649      	mov	r1, r9
 800949a:	4640      	mov	r0, r8
 800949c:	47d0      	blx	sl
 800949e:	3001      	adds	r0, #1
 80094a0:	d0ad      	beq.n	80093fe <_printf_i+0x15a>
 80094a2:	6823      	ldr	r3, [r4, #0]
 80094a4:	079b      	lsls	r3, r3, #30
 80094a6:	d413      	bmi.n	80094d0 <_printf_i+0x22c>
 80094a8:	68e0      	ldr	r0, [r4, #12]
 80094aa:	9b03      	ldr	r3, [sp, #12]
 80094ac:	4298      	cmp	r0, r3
 80094ae:	bfb8      	it	lt
 80094b0:	4618      	movlt	r0, r3
 80094b2:	e7a6      	b.n	8009402 <_printf_i+0x15e>
 80094b4:	2301      	movs	r3, #1
 80094b6:	4632      	mov	r2, r6
 80094b8:	4649      	mov	r1, r9
 80094ba:	4640      	mov	r0, r8
 80094bc:	47d0      	blx	sl
 80094be:	3001      	adds	r0, #1
 80094c0:	d09d      	beq.n	80093fe <_printf_i+0x15a>
 80094c2:	3501      	adds	r5, #1
 80094c4:	68e3      	ldr	r3, [r4, #12]
 80094c6:	9903      	ldr	r1, [sp, #12]
 80094c8:	1a5b      	subs	r3, r3, r1
 80094ca:	42ab      	cmp	r3, r5
 80094cc:	dcf2      	bgt.n	80094b4 <_printf_i+0x210>
 80094ce:	e7eb      	b.n	80094a8 <_printf_i+0x204>
 80094d0:	2500      	movs	r5, #0
 80094d2:	f104 0619 	add.w	r6, r4, #25
 80094d6:	e7f5      	b.n	80094c4 <_printf_i+0x220>
 80094d8:	080098a1 	.word	0x080098a1
 80094dc:	080098b2 	.word	0x080098b2

080094e0 <__sflush_r>:
 80094e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e8:	0716      	lsls	r6, r2, #28
 80094ea:	4605      	mov	r5, r0
 80094ec:	460c      	mov	r4, r1
 80094ee:	d454      	bmi.n	800959a <__sflush_r+0xba>
 80094f0:	684b      	ldr	r3, [r1, #4]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	dc02      	bgt.n	80094fc <__sflush_r+0x1c>
 80094f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	dd48      	ble.n	800958e <__sflush_r+0xae>
 80094fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094fe:	2e00      	cmp	r6, #0
 8009500:	d045      	beq.n	800958e <__sflush_r+0xae>
 8009502:	2300      	movs	r3, #0
 8009504:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009508:	682f      	ldr	r7, [r5, #0]
 800950a:	6a21      	ldr	r1, [r4, #32]
 800950c:	602b      	str	r3, [r5, #0]
 800950e:	d030      	beq.n	8009572 <__sflush_r+0x92>
 8009510:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009512:	89a3      	ldrh	r3, [r4, #12]
 8009514:	0759      	lsls	r1, r3, #29
 8009516:	d505      	bpl.n	8009524 <__sflush_r+0x44>
 8009518:	6863      	ldr	r3, [r4, #4]
 800951a:	1ad2      	subs	r2, r2, r3
 800951c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800951e:	b10b      	cbz	r3, 8009524 <__sflush_r+0x44>
 8009520:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009522:	1ad2      	subs	r2, r2, r3
 8009524:	2300      	movs	r3, #0
 8009526:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009528:	6a21      	ldr	r1, [r4, #32]
 800952a:	4628      	mov	r0, r5
 800952c:	47b0      	blx	r6
 800952e:	1c43      	adds	r3, r0, #1
 8009530:	89a3      	ldrh	r3, [r4, #12]
 8009532:	d106      	bne.n	8009542 <__sflush_r+0x62>
 8009534:	6829      	ldr	r1, [r5, #0]
 8009536:	291d      	cmp	r1, #29
 8009538:	d82b      	bhi.n	8009592 <__sflush_r+0xb2>
 800953a:	4a2a      	ldr	r2, [pc, #168]	@ (80095e4 <__sflush_r+0x104>)
 800953c:	40ca      	lsrs	r2, r1
 800953e:	07d6      	lsls	r6, r2, #31
 8009540:	d527      	bpl.n	8009592 <__sflush_r+0xb2>
 8009542:	2200      	movs	r2, #0
 8009544:	6062      	str	r2, [r4, #4]
 8009546:	04d9      	lsls	r1, r3, #19
 8009548:	6922      	ldr	r2, [r4, #16]
 800954a:	6022      	str	r2, [r4, #0]
 800954c:	d504      	bpl.n	8009558 <__sflush_r+0x78>
 800954e:	1c42      	adds	r2, r0, #1
 8009550:	d101      	bne.n	8009556 <__sflush_r+0x76>
 8009552:	682b      	ldr	r3, [r5, #0]
 8009554:	b903      	cbnz	r3, 8009558 <__sflush_r+0x78>
 8009556:	6560      	str	r0, [r4, #84]	@ 0x54
 8009558:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800955a:	602f      	str	r7, [r5, #0]
 800955c:	b1b9      	cbz	r1, 800958e <__sflush_r+0xae>
 800955e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009562:	4299      	cmp	r1, r3
 8009564:	d002      	beq.n	800956c <__sflush_r+0x8c>
 8009566:	4628      	mov	r0, r5
 8009568:	f7ff fbf4 	bl	8008d54 <_free_r>
 800956c:	2300      	movs	r3, #0
 800956e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009570:	e00d      	b.n	800958e <__sflush_r+0xae>
 8009572:	2301      	movs	r3, #1
 8009574:	4628      	mov	r0, r5
 8009576:	47b0      	blx	r6
 8009578:	4602      	mov	r2, r0
 800957a:	1c50      	adds	r0, r2, #1
 800957c:	d1c9      	bne.n	8009512 <__sflush_r+0x32>
 800957e:	682b      	ldr	r3, [r5, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d0c6      	beq.n	8009512 <__sflush_r+0x32>
 8009584:	2b1d      	cmp	r3, #29
 8009586:	d001      	beq.n	800958c <__sflush_r+0xac>
 8009588:	2b16      	cmp	r3, #22
 800958a:	d11e      	bne.n	80095ca <__sflush_r+0xea>
 800958c:	602f      	str	r7, [r5, #0]
 800958e:	2000      	movs	r0, #0
 8009590:	e022      	b.n	80095d8 <__sflush_r+0xf8>
 8009592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009596:	b21b      	sxth	r3, r3
 8009598:	e01b      	b.n	80095d2 <__sflush_r+0xf2>
 800959a:	690f      	ldr	r7, [r1, #16]
 800959c:	2f00      	cmp	r7, #0
 800959e:	d0f6      	beq.n	800958e <__sflush_r+0xae>
 80095a0:	0793      	lsls	r3, r2, #30
 80095a2:	680e      	ldr	r6, [r1, #0]
 80095a4:	bf08      	it	eq
 80095a6:	694b      	ldreq	r3, [r1, #20]
 80095a8:	600f      	str	r7, [r1, #0]
 80095aa:	bf18      	it	ne
 80095ac:	2300      	movne	r3, #0
 80095ae:	eba6 0807 	sub.w	r8, r6, r7
 80095b2:	608b      	str	r3, [r1, #8]
 80095b4:	f1b8 0f00 	cmp.w	r8, #0
 80095b8:	dde9      	ble.n	800958e <__sflush_r+0xae>
 80095ba:	6a21      	ldr	r1, [r4, #32]
 80095bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80095be:	4643      	mov	r3, r8
 80095c0:	463a      	mov	r2, r7
 80095c2:	4628      	mov	r0, r5
 80095c4:	47b0      	blx	r6
 80095c6:	2800      	cmp	r0, #0
 80095c8:	dc08      	bgt.n	80095dc <__sflush_r+0xfc>
 80095ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095d2:	81a3      	strh	r3, [r4, #12]
 80095d4:	f04f 30ff 	mov.w	r0, #4294967295
 80095d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095dc:	4407      	add	r7, r0
 80095de:	eba8 0800 	sub.w	r8, r8, r0
 80095e2:	e7e7      	b.n	80095b4 <__sflush_r+0xd4>
 80095e4:	20400001 	.word	0x20400001

080095e8 <_fflush_r>:
 80095e8:	b538      	push	{r3, r4, r5, lr}
 80095ea:	690b      	ldr	r3, [r1, #16]
 80095ec:	4605      	mov	r5, r0
 80095ee:	460c      	mov	r4, r1
 80095f0:	b913      	cbnz	r3, 80095f8 <_fflush_r+0x10>
 80095f2:	2500      	movs	r5, #0
 80095f4:	4628      	mov	r0, r5
 80095f6:	bd38      	pop	{r3, r4, r5, pc}
 80095f8:	b118      	cbz	r0, 8009602 <_fflush_r+0x1a>
 80095fa:	6a03      	ldr	r3, [r0, #32]
 80095fc:	b90b      	cbnz	r3, 8009602 <_fflush_r+0x1a>
 80095fe:	f7ff f9a1 	bl	8008944 <__sinit>
 8009602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d0f3      	beq.n	80095f2 <_fflush_r+0xa>
 800960a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800960c:	07d0      	lsls	r0, r2, #31
 800960e:	d404      	bmi.n	800961a <_fflush_r+0x32>
 8009610:	0599      	lsls	r1, r3, #22
 8009612:	d402      	bmi.n	800961a <_fflush_r+0x32>
 8009614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009616:	f7ff fb8c 	bl	8008d32 <__retarget_lock_acquire_recursive>
 800961a:	4628      	mov	r0, r5
 800961c:	4621      	mov	r1, r4
 800961e:	f7ff ff5f 	bl	80094e0 <__sflush_r>
 8009622:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009624:	07da      	lsls	r2, r3, #31
 8009626:	4605      	mov	r5, r0
 8009628:	d4e4      	bmi.n	80095f4 <_fflush_r+0xc>
 800962a:	89a3      	ldrh	r3, [r4, #12]
 800962c:	059b      	lsls	r3, r3, #22
 800962e:	d4e1      	bmi.n	80095f4 <_fflush_r+0xc>
 8009630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009632:	f7ff fb7f 	bl	8008d34 <__retarget_lock_release_recursive>
 8009636:	e7dd      	b.n	80095f4 <_fflush_r+0xc>

08009638 <__swhatbuf_r>:
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	460c      	mov	r4, r1
 800963c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009640:	2900      	cmp	r1, #0
 8009642:	b096      	sub	sp, #88	@ 0x58
 8009644:	4615      	mov	r5, r2
 8009646:	461e      	mov	r6, r3
 8009648:	da0d      	bge.n	8009666 <__swhatbuf_r+0x2e>
 800964a:	89a3      	ldrh	r3, [r4, #12]
 800964c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009650:	f04f 0100 	mov.w	r1, #0
 8009654:	bf14      	ite	ne
 8009656:	2340      	movne	r3, #64	@ 0x40
 8009658:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800965c:	2000      	movs	r0, #0
 800965e:	6031      	str	r1, [r6, #0]
 8009660:	602b      	str	r3, [r5, #0]
 8009662:	b016      	add	sp, #88	@ 0x58
 8009664:	bd70      	pop	{r4, r5, r6, pc}
 8009666:	466a      	mov	r2, sp
 8009668:	f000 f848 	bl	80096fc <_fstat_r>
 800966c:	2800      	cmp	r0, #0
 800966e:	dbec      	blt.n	800964a <__swhatbuf_r+0x12>
 8009670:	9901      	ldr	r1, [sp, #4]
 8009672:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009676:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800967a:	4259      	negs	r1, r3
 800967c:	4159      	adcs	r1, r3
 800967e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009682:	e7eb      	b.n	800965c <__swhatbuf_r+0x24>

08009684 <__smakebuf_r>:
 8009684:	898b      	ldrh	r3, [r1, #12]
 8009686:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009688:	079d      	lsls	r5, r3, #30
 800968a:	4606      	mov	r6, r0
 800968c:	460c      	mov	r4, r1
 800968e:	d507      	bpl.n	80096a0 <__smakebuf_r+0x1c>
 8009690:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	6123      	str	r3, [r4, #16]
 8009698:	2301      	movs	r3, #1
 800969a:	6163      	str	r3, [r4, #20]
 800969c:	b003      	add	sp, #12
 800969e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096a0:	ab01      	add	r3, sp, #4
 80096a2:	466a      	mov	r2, sp
 80096a4:	f7ff ffc8 	bl	8009638 <__swhatbuf_r>
 80096a8:	9f00      	ldr	r7, [sp, #0]
 80096aa:	4605      	mov	r5, r0
 80096ac:	4639      	mov	r1, r7
 80096ae:	4630      	mov	r0, r6
 80096b0:	f7ff fbbc 	bl	8008e2c <_malloc_r>
 80096b4:	b948      	cbnz	r0, 80096ca <__smakebuf_r+0x46>
 80096b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ba:	059a      	lsls	r2, r3, #22
 80096bc:	d4ee      	bmi.n	800969c <__smakebuf_r+0x18>
 80096be:	f023 0303 	bic.w	r3, r3, #3
 80096c2:	f043 0302 	orr.w	r3, r3, #2
 80096c6:	81a3      	strh	r3, [r4, #12]
 80096c8:	e7e2      	b.n	8009690 <__smakebuf_r+0xc>
 80096ca:	89a3      	ldrh	r3, [r4, #12]
 80096cc:	6020      	str	r0, [r4, #0]
 80096ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096d2:	81a3      	strh	r3, [r4, #12]
 80096d4:	9b01      	ldr	r3, [sp, #4]
 80096d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80096da:	b15b      	cbz	r3, 80096f4 <__smakebuf_r+0x70>
 80096dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096e0:	4630      	mov	r0, r6
 80096e2:	f000 f81d 	bl	8009720 <_isatty_r>
 80096e6:	b128      	cbz	r0, 80096f4 <__smakebuf_r+0x70>
 80096e8:	89a3      	ldrh	r3, [r4, #12]
 80096ea:	f023 0303 	bic.w	r3, r3, #3
 80096ee:	f043 0301 	orr.w	r3, r3, #1
 80096f2:	81a3      	strh	r3, [r4, #12]
 80096f4:	89a3      	ldrh	r3, [r4, #12]
 80096f6:	431d      	orrs	r5, r3
 80096f8:	81a5      	strh	r5, [r4, #12]
 80096fa:	e7cf      	b.n	800969c <__smakebuf_r+0x18>

080096fc <_fstat_r>:
 80096fc:	b538      	push	{r3, r4, r5, lr}
 80096fe:	4d07      	ldr	r5, [pc, #28]	@ (800971c <_fstat_r+0x20>)
 8009700:	2300      	movs	r3, #0
 8009702:	4604      	mov	r4, r0
 8009704:	4608      	mov	r0, r1
 8009706:	4611      	mov	r1, r2
 8009708:	602b      	str	r3, [r5, #0]
 800970a:	f7f8 fb44 	bl	8001d96 <_fstat>
 800970e:	1c43      	adds	r3, r0, #1
 8009710:	d102      	bne.n	8009718 <_fstat_r+0x1c>
 8009712:	682b      	ldr	r3, [r5, #0]
 8009714:	b103      	cbz	r3, 8009718 <_fstat_r+0x1c>
 8009716:	6023      	str	r3, [r4, #0]
 8009718:	bd38      	pop	{r3, r4, r5, pc}
 800971a:	bf00      	nop
 800971c:	24000900 	.word	0x24000900

08009720 <_isatty_r>:
 8009720:	b538      	push	{r3, r4, r5, lr}
 8009722:	4d06      	ldr	r5, [pc, #24]	@ (800973c <_isatty_r+0x1c>)
 8009724:	2300      	movs	r3, #0
 8009726:	4604      	mov	r4, r0
 8009728:	4608      	mov	r0, r1
 800972a:	602b      	str	r3, [r5, #0]
 800972c:	f7f8 fb43 	bl	8001db6 <_isatty>
 8009730:	1c43      	adds	r3, r0, #1
 8009732:	d102      	bne.n	800973a <_isatty_r+0x1a>
 8009734:	682b      	ldr	r3, [r5, #0]
 8009736:	b103      	cbz	r3, 800973a <_isatty_r+0x1a>
 8009738:	6023      	str	r3, [r4, #0]
 800973a:	bd38      	pop	{r3, r4, r5, pc}
 800973c:	24000900 	.word	0x24000900

08009740 <_sbrk_r>:
 8009740:	b538      	push	{r3, r4, r5, lr}
 8009742:	4d06      	ldr	r5, [pc, #24]	@ (800975c <_sbrk_r+0x1c>)
 8009744:	2300      	movs	r3, #0
 8009746:	4604      	mov	r4, r0
 8009748:	4608      	mov	r0, r1
 800974a:	602b      	str	r3, [r5, #0]
 800974c:	f7f8 fb4c 	bl	8001de8 <_sbrk>
 8009750:	1c43      	adds	r3, r0, #1
 8009752:	d102      	bne.n	800975a <_sbrk_r+0x1a>
 8009754:	682b      	ldr	r3, [r5, #0]
 8009756:	b103      	cbz	r3, 800975a <_sbrk_r+0x1a>
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	bd38      	pop	{r3, r4, r5, pc}
 800975c:	24000900 	.word	0x24000900

08009760 <_init>:
 8009760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009762:	bf00      	nop
 8009764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009766:	bc08      	pop	{r3}
 8009768:	469e      	mov	lr, r3
 800976a:	4770      	bx	lr

0800976c <_fini>:
 800976c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976e:	bf00      	nop
 8009770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009772:	bc08      	pop	{r3}
 8009774:	469e      	mov	lr, r3
 8009776:	4770      	bx	lr
