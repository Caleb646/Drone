
Drone_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c10c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000214c  0800c3ac  0800c3ac  0000d3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4f8  0800e4f8  00010070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e4f8  0800e4f8  0000f4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e500  0800e500  00010070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e500  0800e500  0000f500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e504  0800e504  0000f504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  24000000  0800e508  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d78  24000070  0800e578  00010070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004de8  0800e578  00010de8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002588e  00000000  00000000  0001009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c46  00000000  00000000  0003592c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d58  00000000  00000000  0003a578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016ab  00000000  00000000  0003c2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004314d  00000000  00000000  0003d97b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024f35  00000000  00000000  00080ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b43f6  00000000  00000000  000a59fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00259df3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000834c  00000000  00000000  00259e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00262184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c394 	.word	0x0800c394

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	0800c394 	.word	0x0800c394

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <FlightContextUpdateIMUData>:
#include "flight_context.h"

void FlightContextUpdateIMUData(FlightContext *pContext, Vec3 accel, Vec3 gyro)
{
 80006ac:	b490      	push	{r4, r7}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	4638      	mov	r0, r7
 80006b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    pContext->imuUnFilteredAccel = accel;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	461c      	mov	r4, r3
 80006be:	463b      	mov	r3, r7
 80006c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80006c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    pContext->imuUnFilteredGyro = gyro;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	3330      	adds	r3, #48	@ 0x30
 80006cc:	f107 0218 	add.w	r2, r7, #24
 80006d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80006d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 80006d6:	bf00      	nop
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc90      	pop	{r4, r7}
 80006de:	4770      	bx	lr

080006e0 <IMUReadReg>:
    0x2e, 0x00, 0xc1
};


IMU_STATUS IMUReadReg(IMU *pIMU, uint8_t reg, uint8_t *pBuf, uint32_t len)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b091      	sub	sp, #68	@ 0x44
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	607a      	str	r2, [r7, #4]
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	460b      	mov	r3, r1
 80006ee:	72fb      	strb	r3, [r7, #11]
	uint8_t pTx[16];
	memset(pTx, 0, sizeof(pTx));
 80006f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f4:	2210      	movs	r2, #16
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f00b f8bb 	bl	800b874 <memset>
	// 0x80 bmi270 read bit
	pTx[0] = 0x80 | reg;
 80006fe:	7afb      	ldrb	r3, [r7, #11]
 8000700:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000704:	b2db      	uxtb	r3, r3
 8000706:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	uint8_t pRx[16];
	memset(pRx, 0, sizeof(pRx));
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	2210      	movs	r2, #16
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f00b f8ae 	bl	800b874 <memset>
	// status = HAL_SPI_Transmit(pIMUSPIRef, pTemp, 1, 100);

	// set NSS high
	// HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

	if(len + 1 > 16)
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	3301      	adds	r3, #1
 800071c:	2b10      	cmp	r3, #16
 800071e:	d901      	bls.n	8000724 <IMUReadReg+0x44>
	{
		return IMU_ERROR;
 8000720:	2301      	movs	r3, #1
 8000722:	e01f      	b.n	8000764 <IMUReadReg+0x84>
	}

	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(pIMU->pSPI, pTx, pRx, len + 1, 100);
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	6818      	ldr	r0, [r3, #0]
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	b29b      	uxth	r3, r3
 800072c:	3301      	adds	r3, #1
 800072e:	b29b      	uxth	r3, r3
 8000730:	f107 0214 	add.w	r2, r7, #20
 8000734:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000738:	2464      	movs	r4, #100	@ 0x64
 800073a:	9400      	str	r4, [sp, #0]
 800073c:	f005 fa7a 	bl	8005c34 <HAL_SPI_TransmitReceive>
 8000740:	4603      	mov	r3, r0
 8000742:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if(status != HAL_OK)
 8000746:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <IMUReadReg+0x72>
	{
		return IMU_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	e008      	b.n	8000764 <IMUReadReg+0x84>
	}
	// 1st byte sent by bmi270 is a dummy byte
	memcpy(pBuf, &pRx[1], len);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	3301      	adds	r3, #1
 8000758:	683a      	ldr	r2, [r7, #0]
 800075a:	4619      	mov	r1, r3
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f00b f904 	bl	800b96a <memcpy>

	return IMU_OK;
 8000762:	2300      	movs	r3, #0
}
 8000764:	4618      	mov	r0, r3
 8000766:	373c      	adds	r7, #60	@ 0x3c
 8000768:	46bd      	mov	sp, r7
 800076a:	bd90      	pop	{r4, r7, pc}

0800076c <IMUWriteReg>:

IMU_STATUS IMUWriteReg(IMU *pIMU, uint8_t reg, uint8_t *pBuf, uint32_t len)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	@ 0x28
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	607a      	str	r2, [r7, #4]
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	460b      	mov	r3, r1
 800077a:	72fb      	strb	r3, [r7, #11]
	uint8_t pTx[16];
	memset(pTx, 0, sizeof(pTx));
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	2210      	movs	r2, #16
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f00b f875 	bl	800b874 <memset>

	if(len + 1 > 16)
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	3301      	adds	r3, #1
 800078e:	2b10      	cmp	r3, #16
 8000790:	d901      	bls.n	8000796 <IMUWriteReg+0x2a>
	{
		return IMU_OK;
 8000792:	2300      	movs	r3, #0
 8000794:	e01e      	b.n	80007d4 <IMUWriteReg+0x68>
	}

	pTx[0] = reg;
 8000796:	7afb      	ldrb	r3, [r7, #11]
 8000798:	753b      	strb	r3, [r7, #20]
	memcpy(&pTx[1], (void*)pBuf, len);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	3301      	adds	r3, #1
 80007a0:	683a      	ldr	r2, [r7, #0]
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f00b f8e0 	bl	800b96a <memcpy>

	HAL_StatusTypeDef status = HAL_SPI_Transmit(pIMU->pSPI, pTx, len + 1, 100);
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	6818      	ldr	r0, [r3, #0]
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	3301      	adds	r3, #1
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	f107 0114 	add.w	r1, r7, #20
 80007ba:	2364      	movs	r3, #100	@ 0x64
 80007bc:	f005 f84c 	bl	8005858 <HAL_SPI_Transmit>
 80007c0:	4603      	mov	r3, r0
 80007c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if(status != HAL_OK)
 80007c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <IMUWriteReg+0x66>
	{
		return IMU_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e000      	b.n	80007d4 <IMUWriteReg+0x68>
	}

	return IMU_OK;
 80007d2:	2300      	movs	r3, #0
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3728      	adds	r7, #40	@ 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <IMU2CPUInterruptHandler>:
}

IMU_STATUS IMU2CPUInterruptHandler(
  IMU *pIMU, Vec3 *pOutputAccel,Vec3 *pOutputGyro
)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
  if(pIMU == NULL || pIMU->pSPI == NULL || pOutputAccel == NULL || pOutputGyro == NULL)
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d009      	beq.n	8000802 <IMU2CPUInterruptHandler+0x26>
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d005      	beq.n	8000802 <IMU2CPUInterruptHandler+0x26>
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d002      	beq.n	8000802 <IMU2CPUInterruptHandler+0x26>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d112      	bne.n	8000828 <IMU2CPUInterruptHandler+0x4c>
  {
    LOG_ERROR("Invalid arguments");
 8000802:	481c      	ldr	r0, [pc, #112]	@ (8000874 <IMU2CPUInterruptHandler+0x98>)
 8000804:	f00a feee 	bl	800b5e4 <iprintf>
 8000808:	481b      	ldr	r0, [pc, #108]	@ (8000878 <IMU2CPUInterruptHandler+0x9c>)
 800080a:	f00a feeb 	bl	800b5e4 <iprintf>
 800080e:	f240 2145 	movw	r1, #581	@ 0x245
 8000812:	481a      	ldr	r0, [pc, #104]	@ (800087c <IMU2CPUInterruptHandler+0xa0>)
 8000814:	f00a fee6 	bl	800b5e4 <iprintf>
 8000818:	4819      	ldr	r0, [pc, #100]	@ (8000880 <IMU2CPUInterruptHandler+0xa4>)
 800081a:	f00a fee3 	bl	800b5e4 <iprintf>
 800081e:	4819      	ldr	r0, [pc, #100]	@ (8000884 <IMU2CPUInterruptHandler+0xa8>)
 8000820:	f00a ff48 	bl	800b6b4 <puts>
    return IMU_ERROR;
 8000824:	2301      	movs	r3, #1
 8000826:	e021      	b.n	800086c <IMU2CPUInterruptHandler+0x90>
  }

  // read both status registers
  uint8_t pBuf[2] = {0, 0};
 8000828:	2300      	movs	r3, #0
 800082a:	82bb      	strh	r3, [r7, #20]
  IMU_STATUS status = IMUReadReg(pIMU, BMI2_INT_STATUS_1_ADDR, pBuf, 2);
 800082c:	f107 0214 	add.w	r2, r7, #20
 8000830:	2302      	movs	r3, #2
 8000832:	211d      	movs	r1, #29
 8000834:	68f8      	ldr	r0, [r7, #12]
 8000836:	f7ff ff53 	bl	80006e0 <IMUReadReg>
 800083a:	4603      	mov	r3, r0
 800083c:	75fb      	strb	r3, [r7, #23]

  // uint8_t intStatus0 = pBuf[0];
  uint8_t intStatus1 = pBuf[1];
 800083e:	7d7b      	ldrb	r3, [r7, #21]
 8000840:	75bb      	strb	r3, [r7, #22]
  }

  if(BIT_ISSET(intStatus1, BMI2_INT_STATUS_ACC_RDY_BIT)) status |= IMUUpdateAccel(pIMU, *pOutputAccel, pOutputAccel);
  if(BIT_ISSET(intStatus1, BMI2_INT_STATUS_GYR_RDY_BIT)) status |= IMUUpdateGyro(pIMU, *pOutputGyro, pOutputGyro);

  if(status != IMU_OK) LOG_ERROR("Failed to update IMU position data");
 8000842:	7dfb      	ldrb	r3, [r7, #23]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d010      	beq.n	800086a <IMU2CPUInterruptHandler+0x8e>
 8000848:	480a      	ldr	r0, [pc, #40]	@ (8000874 <IMU2CPUInterruptHandler+0x98>)
 800084a:	f00a fecb 	bl	800b5e4 <iprintf>
 800084e:	480a      	ldr	r0, [pc, #40]	@ (8000878 <IMU2CPUInterruptHandler+0x9c>)
 8000850:	f00a fec8 	bl	800b5e4 <iprintf>
 8000854:	f240 215b 	movw	r1, #603	@ 0x25b
 8000858:	4808      	ldr	r0, [pc, #32]	@ (800087c <IMU2CPUInterruptHandler+0xa0>)
 800085a:	f00a fec3 	bl	800b5e4 <iprintf>
 800085e:	480a      	ldr	r0, [pc, #40]	@ (8000888 <IMU2CPUInterruptHandler+0xac>)
 8000860:	f00a fec0 	bl	800b5e4 <iprintf>
 8000864:	4807      	ldr	r0, [pc, #28]	@ (8000884 <IMU2CPUInterruptHandler+0xa8>)
 8000866:	f00a ff25 	bl	800b6b4 <puts>

  return status;
 800086a:	7dfb      	ldrb	r3, [r7, #23]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	0800c3ac 	.word	0x0800c3ac
 8000878:	0800c3b8 	.word	0x0800c3b8
 800087c:	0800c400 	.word	0x0800c400
 8000880:	0800c404 	.word	0x0800c404
 8000884:	0800c418 	.word	0x0800c418
 8000888:	0800c41c 	.word	0x0800c41c

0800088c <IMUInit>:
  IMU_ACC_RANGE accRange,
  IMU_ACC_ODR accODR,
  IMU_GYRO_RANGE gyroRange,
  IMU_GYRO_ODR gyroODR
)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	4611      	mov	r1, r2
 8000898:	461a      	mov	r2, r3
 800089a:	460b      	mov	r3, r1
 800089c:	71fb      	strb	r3, [r7, #7]
 800089e:	4613      	mov	r3, r2
 80008a0:	71bb      	strb	r3, [r7, #6]
  memset(pIMU, 0, sizeof(IMU));
 80008a2:	2238      	movs	r2, #56	@ 0x38
 80008a4:	2100      	movs	r1, #0
 80008a6:	68f8      	ldr	r0, [r7, #12]
 80008a8:	f00a ffe4 	bl	800b874 <memset>
	pIMU->pSPI = pSPI;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	601a      	str	r2, [r3, #0]
  pIMU->accRange = accRange;
 80008b2:	79fa      	ldrb	r2, [r7, #7]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	625a      	str	r2, [r3, #36]	@ 0x24
  pIMU->accODR = accODR;
 80008b8:	79ba      	ldrb	r2, [r7, #6]
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	629a      	str	r2, [r3, #40]	@ 0x28
  pIMU->gyroRange = gyroRange;
 80008be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  pIMU->gyroODR = gyroODR;
 80008c6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	631a      	str	r2, [r3, #48]	@ 0x30
  pIMU->msLastAccUpdateTime = HAL_GetTick();
 80008ce:	f001 fc21 	bl	8002114 <HAL_GetTick>
 80008d2:	4603      	mov	r3, r0
 80008d4:	461a      	mov	r2, r3
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	61da      	str	r2, [r3, #28]
  pIMU->msLastGyroUpdateTime = HAL_GetTick();
 80008da:	f001 fc1b 	bl	8002114 <HAL_GetTick>
 80008de:	4603      	mov	r3, r0
 80008e0:	461a      	mov	r2, r3
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	621a      	str	r2, [r3, #32]
  pIMU->magic = IMU_MAGIC;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	4a59      	ldr	r2, [pc, #356]	@ (8000a50 <IMUInit+0x1c4>)
 80008ea:	635a      	str	r2, [r3, #52]	@ 0x34

	IMU_STATUS status;
	uint8_t pBuffer[2];
  memset(pBuffer, 0, sizeof(pBuffer));
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2202      	movs	r2, #2
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f00a ffbd 	bl	800b874 <memset>

	// Dummy read to initialize SPI
	status = IMUReadReg(pIMU, BMI2_CHIP_ID_ADDR, pBuffer, 1);
 80008fa:	f107 0214 	add.w	r2, r7, #20
 80008fe:	2301      	movs	r3, #1
 8000900:	2100      	movs	r1, #0
 8000902:	68f8      	ldr	r0, [r7, #12]
 8000904:	f7ff feec 	bl	80006e0 <IMUReadReg>
 8000908:	4603      	mov	r3, r0
 800090a:	75fb      	strb	r3, [r7, #23]
	status = IMUReadReg(pIMU, BMI2_CHIP_ID_ADDR, pBuffer, 1);
 800090c:	f107 0214 	add.w	r2, r7, #20
 8000910:	2301      	movs	r3, #1
 8000912:	2100      	movs	r1, #0
 8000914:	68f8      	ldr	r0, [r7, #12]
 8000916:	f7ff fee3 	bl	80006e0 <IMUReadReg>
 800091a:	4603      	mov	r3, r0
 800091c:	75fb      	strb	r3, [r7, #23]

	// Disable PWR_CONF advanced power save
	pBuffer[0] = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	753b      	strb	r3, [r7, #20]
	status = IMUWriteReg(pIMU, BMI2_PWR_CONF_ADDR, pBuffer, 1);
 8000922:	f107 0214 	add.w	r2, r7, #20
 8000926:	2301      	movs	r3, #1
 8000928:	217c      	movs	r1, #124	@ 0x7c
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f7ff ff1e 	bl	800076c <IMUWriteReg>
 8000930:	4603      	mov	r3, r0
 8000932:	75fb      	strb	r3, [r7, #23]

	HAL_Delay(1);
 8000934:	2001      	movs	r0, #1
 8000936:	f001 fbf9 	bl	800212c <HAL_Delay>

	// Prepare config file
	pBuffer[0] = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	753b      	strb	r3, [r7, #20]
	status = IMUWriteReg(pIMU, BMI2_INIT_CTRL_ADDR, pBuffer, 1);
 800093e:	f107 0214 	add.w	r2, r7, #20
 8000942:	2301      	movs	r3, #1
 8000944:	2159      	movs	r1, #89	@ 0x59
 8000946:	68f8      	ldr	r0, [r7, #12]
 8000948:	f7ff ff10 	bl	800076c <IMUWriteReg>
 800094c:	4603      	mov	r3, r0
 800094e:	75fb      	strb	r3, [r7, #23]

	// I added the data write address directly to the config_file
	HAL_SPI_Transmit(pIMU->pSPI, bmi270_config_file, sizeof(bmi270_config_file), 100);
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	6818      	ldr	r0, [r3, #0]
 8000954:	2364      	movs	r3, #100	@ 0x64
 8000956:	f242 0201 	movw	r2, #8193	@ 0x2001
 800095a:	493e      	ldr	r1, [pc, #248]	@ (8000a54 <IMUInit+0x1c8>)
 800095c:	f004 ff7c 	bl	8005858 <HAL_SPI_Transmit>

	pBuffer[0] = 0x01;
 8000960:	2301      	movs	r3, #1
 8000962:	753b      	strb	r3, [r7, #20]
	status = IMUWriteReg(pIMU, BMI2_INIT_CTRL_ADDR, pBuffer, 1);
 8000964:	f107 0214 	add.w	r2, r7, #20
 8000968:	2301      	movs	r3, #1
 800096a:	2159      	movs	r1, #89	@ 0x59
 800096c:	68f8      	ldr	r0, [r7, #12]
 800096e:	f7ff fefd 	bl	800076c <IMUWriteReg>
 8000972:	4603      	mov	r3, r0
 8000974:	75fb      	strb	r3, [r7, #23]

	HAL_Delay(20);
 8000976:	2014      	movs	r0, #20
 8000978:	f001 fbd8 	bl	800212c <HAL_Delay>

	status = IMUReadReg(pIMU, BMI2_INTERNAL_STATUS_ADDR, pBuffer, 1);
 800097c:	f107 0214 	add.w	r2, r7, #20
 8000980:	2301      	movs	r3, #1
 8000982:	2121      	movs	r1, #33	@ 0x21
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f7ff feab 	bl	80006e0 <IMUReadReg>
 800098a:	4603      	mov	r3, r0
 800098c:	75fb      	strb	r3, [r7, #23]
	if(status == -1 || (pBuffer[0] & 1) == 0)
 800098e:	7d3b      	ldrb	r3, [r7, #20]
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	2b00      	cmp	r3, #0
 8000996:	d101      	bne.n	800099c <IMUInit+0x110>
	{
		return IMU_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	e054      	b.n	8000a46 <IMUInit+0x1ba>

  /*
  * Device Enable/Disable
  */
  // enable acceleration, gyro, and temp but disable auxillary interface
  pBuffer[0] = 0x0E;
 800099c:	230e      	movs	r3, #14
 800099e:	753b      	strb	r3, [r7, #20]
  status = IMUWriteReg(pIMU, BMI2_PWR_CTRL_ADDR, pBuffer, 1);
 80009a0:	f107 0214 	add.w	r2, r7, #20
 80009a4:	2301      	movs	r3, #1
 80009a6:	217d      	movs	r1, #125	@ 0x7d
 80009a8:	68f8      	ldr	r0, [r7, #12]
 80009aa:	f7ff fedf 	bl	800076c <IMUWriteReg>
 80009ae:	4603      	mov	r3, r0
 80009b0:	75fb      	strb	r3, [r7, #23]

  /*
  * Accelerometer Setup
  */
  // enable acc filter perf bit, set acc bwp to normal, and set acc_odr to 100 Hz
  pBuffer[0] = BMI2_ACC_CONF_PERF_MODE_BIT | BMI2_ACC_CONF_BWP_NORMAL_BIT | pIMU->accODR;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	753b      	strb	r3, [r7, #20]
  // Set acc range to pIMU->accRange
  pBuffer[1] = pIMU->accRange;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	757b      	strb	r3, [r7, #21]
  status = IMUWriteReg(pIMU, BMI2_ACC_CONF_ADDR, pBuffer, 2);
 80009c8:	f107 0214 	add.w	r2, r7, #20
 80009cc:	2302      	movs	r3, #2
 80009ce:	2140      	movs	r1, #64	@ 0x40
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f7ff fecb 	bl	800076c <IMUWriteReg>
 80009d6:	4603      	mov	r3, r0
 80009d8:	75fb      	strb	r3, [r7, #23]

  /*
  * Gyro Setup
  */
  // enable gyro filter perf bit, set gyr bwp to normal, and set gry_odr to 100 Hz
  pBuffer[0] = BMI2_GYRO_CONF_FILTER_PERF_BIT | BMI2_GYRO_CONF_NOISE_PERF_BIT | BMI2_GYRO_CONF_BWP_NORMAL_BIT | pIMU->gyroODR;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	f063 031f 	orn	r3, r3, #31
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	753b      	strb	r3, [r7, #20]
  // set gyro range
  pBuffer[1] = pIMU->gyroRange;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	757b      	strb	r3, [r7, #21]
  status = IMUWriteReg(pIMU, BMI2_GYR_CONF_ADDR, pBuffer, 2);
 80009f0:	f107 0214 	add.w	r2, r7, #20
 80009f4:	2302      	movs	r3, #2
 80009f6:	2142      	movs	r1, #66	@ 0x42
 80009f8:	68f8      	ldr	r0, [r7, #12]
 80009fa:	f7ff feb7 	bl	800076c <IMUWriteReg>
 80009fe:	4603      	mov	r3, r0
 8000a00:	75fb      	strb	r3, [r7, #23]

  /*
  * Power Setup
  */
  // disable adv power sav and leave fifo self wakeup enabled
  pBuffer[0] = 0x02;
 8000a02:	2302      	movs	r3, #2
 8000a04:	753b      	strb	r3, [r7, #20]
  status = IMUWriteReg(pIMU, BMI2_PWR_CONF_ADDR, pBuffer, 1);
 8000a06:	f107 0214 	add.w	r2, r7, #20
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	217c      	movs	r1, #124	@ 0x7c
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f7ff feac 	bl	800076c <IMUWriteReg>
 8000a14:	4603      	mov	r3, r0
 8000a16:	75fb      	strb	r3, [r7, #23]

  /*
  * Interrupt Setup
  */
  // enable INT1 w input disabled, output enabled, push pull, and active high
  pBuffer[0] = (0 << 3) | (1 << 2) | (0 << 1) | (1 << 0);
 8000a18:	2305      	movs	r3, #5
 8000a1a:	753b      	strb	r3, [r7, #20]
  status = IMUWriteReg(pIMU, BMI2_INT1_IO_CTRL_ADDR, pBuffer, 1);
 8000a1c:	f107 0214 	add.w	r2, r7, #20
 8000a20:	2301      	movs	r3, #1
 8000a22:	2153      	movs	r1, #83	@ 0x53
 8000a24:	68f8      	ldr	r0, [r7, #12]
 8000a26:	f7ff fea1 	bl	800076c <IMUWriteReg>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	75fb      	strb	r3, [r7, #23]
  // interrupts will NOT be cleared automatically. Have to be cleared by the
  // the host reading the int status registers
  pBuffer[0] = 1;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	753b      	strb	r3, [r7, #20]
  status = IMUWriteReg(pIMU, BMI2_INT_LATCH_ADDR, pBuffer, 1);
 8000a32:	f107 0214 	add.w	r2, r7, #20
 8000a36:	2301      	movs	r3, #1
 8000a38:	2155      	movs	r1, #85	@ 0x55
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f7ff fe96 	bl	800076c <IMUWriteReg>
 8000a40:	4603      	mov	r3, r0
 8000a42:	75fb      	strb	r3, [r7, #23]

	return IMU_OK;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	fafaafaf 	.word	0xfafaafaf
 8000a54:	0800c464 	.word	0x0800c464

08000a58 <__io_putchar>:

static void SyncUARTTaskHandler(void);
static int8_t LoggerWriteToUART(RingBuff volatile *pBuff);

PUTCHAR_PROTOTYPE
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 8000a60:	f001 fc74 	bl	800234c <HAL_GetCurrentCPUID>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b03      	cmp	r3, #3
 8000a68:	d110      	bne.n	8000a8c <__io_putchar+0x34>
  {
    RingBuffWrite(pCM7RingBuf, (void*)&ch, 1);
 8000a6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <__io_putchar+0x68>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	1d39      	adds	r1, r7, #4
 8000a70:	2201      	movs	r2, #1
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f990 	bl	8000d98 <RingBuffWrite>
    if((char)ch == '\n')
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b0a      	cmp	r3, #10
 8000a7e:	d119      	bne.n	8000ab4 <__io_putchar+0x5c>
    {
      LoggerWriteToUART(pCM7RingBuf);
 8000a80:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <__io_putchar+0x68>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 f859 	bl	8000b3c <LoggerWriteToUART>
 8000a8a:	e013      	b.n	8000ab4 <__io_putchar+0x5c>
    }
  }
  else 
  {
    RingBuffWrite(pCM4RingBuf, (void*)&ch, 1);
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac4 <__io_putchar+0x6c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	1d39      	adds	r1, r7, #4
 8000a92:	2201      	movs	r2, #1
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 f97f 	bl	8000d98 <RingBuffWrite>
    if((char)ch == '\n')
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b0a      	cmp	r3, #10
 8000aa0:	d108      	bne.n	8000ab4 <__io_putchar+0x5c>
    {
      /*
      * CM4 sends signal to CM7 to send CM4's ring buffer to the UART interface
      */
      uint32_t taskID = SYNC_TASKID_UART_OUT;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
      SyncMailBoxWriteNotify(MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	2204      	movs	r2, #4
 8000aac:	4619      	mov	r1, r3
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 fb72 	bl	8001198 <SyncMailBoxWriteNotify>
    }
  }
  return ch;
 8000ab4:	687b      	ldr	r3, [r7, #4]
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	24000090 	.word	0x24000090
 8000ac4:	2400008c 	.word	0x2400008c

08000ac8 <LoggerInit>:

int8_t LoggerInit(UART_HandleTypeDef *pUART_)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if(HAL_GetCurrentCPUID() != CM7_CPUID || pUART_ == NULL) 
 8000ad0:	f001 fc3c 	bl	800234c <HAL_GetCurrentCPUID>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d102      	bne.n	8000ae0 <LoggerInit+0x18>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d105      	bne.n	8000aec <LoggerInit+0x24>
  {
    pUART = NULL;
 8000ae0:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <LoggerInit+0x5c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
    return -1;
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aea:	e017      	b.n	8000b1c <LoggerInit+0x54>
  }

  pCM4RingBuf = RingBuffCreate((void*)MEM_SHARED_CM4_UART_RINGBUFF_START, MEM_SHARED_CM4_UART_RINGBUFF_TOTAL_LEN);
 8000aec:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000af0:	480d      	ldr	r0, [pc, #52]	@ (8000b28 <LoggerInit+0x60>)
 8000af2:	f000 f921 	bl	8000d38 <RingBuffCreate>
 8000af6:	4603      	mov	r3, r0
 8000af8:	4a0c      	ldr	r2, [pc, #48]	@ (8000b2c <LoggerInit+0x64>)
 8000afa:	6013      	str	r3, [r2, #0]
  pCM7RingBuf = RingBuffCreate((void*)MEM_SHARED_CM7_UART_RINGBUFF_START, MEM_SHARED_CM7_UART_RINGBUFF_TOTAL_LEN);
 8000afc:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000b00:	480b      	ldr	r0, [pc, #44]	@ (8000b30 <LoggerInit+0x68>)
 8000b02:	f000 f919 	bl	8000d38 <RingBuffCreate>
 8000b06:	4603      	mov	r3, r0
 8000b08:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <LoggerInit+0x6c>)
 8000b0a:	6013      	str	r3, [r2, #0]
  pUART = pUART_;
 8000b0c:	4a05      	ldr	r2, [pc, #20]	@ (8000b24 <LoggerInit+0x5c>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6013      	str	r3, [r2, #0]
  SyncRegisterHandler(SyncUARTTaskHandler, SYNC_TASKID_UART_OUT);
 8000b12:	2100      	movs	r1, #0
 8000b14:	4808      	ldr	r0, [pc, #32]	@ (8000b38 <LoggerInit+0x70>)
 8000b16:	f000 fb97 	bl	8001248 <SyncRegisterHandler>

  return 0;
 8000b1a:	2300      	movs	r3, #0
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	24000094 	.word	0x24000094
 8000b28:	38000008 	.word	0x38000008
 8000b2c:	2400008c 	.word	0x2400008c
 8000b30:	38000128 	.word	0x38000128
 8000b34:	24000090 	.word	0x24000090
 8000b38:	08000b8d 	.word	0x08000b8d

08000b3c <LoggerWriteToUART>:

static int8_t LoggerWriteToUART(RingBuff volatile *pRingBuf)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t len = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
  void *pBufToTransmit = NULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]

  send:
  len = RingBuffGetLinearBlockReadLength(pRingBuf);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f000 fa5f 	bl	8001010 <RingBuffGetLinearBlockReadLength>
 8000b52:	60f8      	str	r0, [r7, #12]
  if(len > 0)
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d011      	beq.n	8000b7e <LoggerWriteToUART+0x42>
  {
    pBufToTransmit = RingBuffGetLinearBlockReadAddress(pRingBuf);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f000 fa2e 	bl	8000fbc <RingBuffGetLinearBlockReadAddress>
 8000b60:	60b8      	str	r0, [r7, #8]
    HAL_UART_Transmit(pUART, pBufToTransmit, len, 1000);
 8000b62:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <LoggerWriteToUART+0x4c>)
 8000b64:	6818      	ldr	r0, [r3, #0]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b6e:	68b9      	ldr	r1, [r7, #8]
 8000b70:	f006 fcdc 	bl	800752c <HAL_UART_Transmit>
    RingBuffSkip(pRingBuf, len);
 8000b74:	68f9      	ldr	r1, [r7, #12]
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 fa8c 	bl	8001094 <RingBuffSkip>
    /* Check for anything in the overflow buffer */
    goto send;
 8000b7c:	e7e6      	b.n	8000b4c <LoggerWriteToUART+0x10>
  }
  return 0;
 8000b7e:	2300      	movs	r3, #0
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	24000094 	.word	0x24000094

08000b8c <SyncUARTTaskHandler>:

static void SyncUARTTaskHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 8000b90:	f001 fbdc 	bl	800234c <HAL_GetCurrentCPUID>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	d104      	bne.n	8000ba4 <SyncUARTTaskHandler+0x18>
  {
    LoggerWriteToUART(pCM4RingBuf);
 8000b9a:	4b03      	ldr	r3, [pc, #12]	@ (8000ba8 <SyncUARTTaskHandler+0x1c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ffcc 	bl	8000b3c <LoggerWriteToUART>
  }
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2400008c 	.word	0x2400008c

08000bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bb0:	4b49      	ldr	r3, [pc, #292]	@ (8000cd8 <SystemInit+0x12c>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bb6:	4a48      	ldr	r2, [pc, #288]	@ (8000cd8 <SystemInit+0x12c>)
 8000bb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000bc0:	4b45      	ldr	r3, [pc, #276]	@ (8000cd8 <SystemInit+0x12c>)
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	4a44      	ldr	r2, [pc, #272]	@ (8000cd8 <SystemInit+0x12c>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bcc:	4b43      	ldr	r3, [pc, #268]	@ (8000cdc <SystemInit+0x130>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f003 030f 	and.w	r3, r3, #15
 8000bd4:	2b06      	cmp	r3, #6
 8000bd6:	d807      	bhi.n	8000be8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bd8:	4b40      	ldr	r3, [pc, #256]	@ (8000cdc <SystemInit+0x130>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f023 030f 	bic.w	r3, r3, #15
 8000be0:	4a3e      	ldr	r2, [pc, #248]	@ (8000cdc <SystemInit+0x130>)
 8000be2:	f043 0307 	orr.w	r3, r3, #7
 8000be6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000be8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ce0 <SystemInit+0x134>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a3c      	ldr	r2, [pc, #240]	@ (8000ce0 <SystemInit+0x134>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bf4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ce0 <SystemInit+0x134>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bfa:	4b39      	ldr	r3, [pc, #228]	@ (8000ce0 <SystemInit+0x134>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	4938      	ldr	r1, [pc, #224]	@ (8000ce0 <SystemInit+0x134>)
 8000c00:	4b38      	ldr	r3, [pc, #224]	@ (8000ce4 <SystemInit+0x138>)
 8000c02:	4013      	ands	r3, r2
 8000c04:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c06:	4b35      	ldr	r3, [pc, #212]	@ (8000cdc <SystemInit+0x130>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f003 0308 	and.w	r3, r3, #8
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d007      	beq.n	8000c22 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c12:	4b32      	ldr	r3, [pc, #200]	@ (8000cdc <SystemInit+0x130>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f023 030f 	bic.w	r3, r3, #15
 8000c1a:	4a30      	ldr	r2, [pc, #192]	@ (8000cdc <SystemInit+0x130>)
 8000c1c:	f043 0307 	orr.w	r3, r3, #7
 8000c20:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c22:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce0 <SystemInit+0x134>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c28:	4b2d      	ldr	r3, [pc, #180]	@ (8000ce0 <SystemInit+0x134>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce0 <SystemInit+0x134>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce0 <SystemInit+0x134>)
 8000c36:	4a2c      	ldr	r2, [pc, #176]	@ (8000ce8 <SystemInit+0x13c>)
 8000c38:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c3a:	4b29      	ldr	r3, [pc, #164]	@ (8000ce0 <SystemInit+0x134>)
 8000c3c:	4a2b      	ldr	r2, [pc, #172]	@ (8000cec <SystemInit+0x140>)
 8000c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c40:	4b27      	ldr	r3, [pc, #156]	@ (8000ce0 <SystemInit+0x134>)
 8000c42:	4a2b      	ldr	r2, [pc, #172]	@ (8000cf0 <SystemInit+0x144>)
 8000c44:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c46:	4b26      	ldr	r3, [pc, #152]	@ (8000ce0 <SystemInit+0x134>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ce0 <SystemInit+0x134>)
 8000c4e:	4a28      	ldr	r2, [pc, #160]	@ (8000cf0 <SystemInit+0x144>)
 8000c50:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c52:	4b23      	ldr	r3, [pc, #140]	@ (8000ce0 <SystemInit+0x134>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c58:	4b21      	ldr	r3, [pc, #132]	@ (8000ce0 <SystemInit+0x134>)
 8000c5a:	4a25      	ldr	r2, [pc, #148]	@ (8000cf0 <SystemInit+0x144>)
 8000c5c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ce0 <SystemInit+0x134>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c64:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce0 <SystemInit+0x134>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a1d      	ldr	r2, [pc, #116]	@ (8000ce0 <SystemInit+0x134>)
 8000c6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c6e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce0 <SystemInit+0x134>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000c76:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf4 <SystemInit+0x148>)
 8000c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000cf4 <SystemInit+0x148>)
 8000c7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c80:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c82:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf8 <SystemInit+0x14c>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4b1d      	ldr	r3, [pc, #116]	@ (8000cfc <SystemInit+0x150>)
 8000c88:	4013      	ands	r3, r2
 8000c8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c8e:	d202      	bcs.n	8000c96 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	@ (8000d00 <SystemInit+0x154>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000c96:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <SystemInit+0x134>)
 8000c98:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d113      	bne.n	8000ccc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <SystemInit+0x134>)
 8000ca6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000caa:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce0 <SystemInit+0x134>)
 8000cac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cb0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cb4:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <SystemInit+0x158>)
 8000cb6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000cba:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000cbc:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <SystemInit+0x134>)
 8000cbe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000cc2:	4a07      	ldr	r2, [pc, #28]	@ (8000ce0 <SystemInit+0x134>)
 8000cc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000cc8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00
 8000cdc:	52002000 	.word	0x52002000
 8000ce0:	58024400 	.word	0x58024400
 8000ce4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ce8:	02020200 	.word	0x02020200
 8000cec:	01ff0000 	.word	0x01ff0000
 8000cf0:	01010280 	.word	0x01010280
 8000cf4:	580000c0 	.word	0x580000c0
 8000cf8:	5c001000 	.word	0x5c001000
 8000cfc:	ffff0000 	.word	0xffff0000
 8000d00:	51008108 	.word	0x51008108
 8000d04:	52004000 	.word	0x52004000

08000d08 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000d0c:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <ExitRun0Mode+0x2c>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	4a08      	ldr	r2, [pc, #32]	@ (8000d34 <ExitRun0Mode+0x2c>)
 8000d12:	f023 0302 	bic.w	r3, r3, #2
 8000d16:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000d18:	bf00      	nop
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <ExitRun0Mode+0x2c>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d0f9      	beq.n	8000d1a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	58024800 	.word	0x58024800

08000d38 <RingBuffCreate>:
 * \param[in]       buff: Buffer handle
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
RINGBUFF_VOLATILE RingBuff* RingBuffCreate(void* pBuff, size_t size) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
    if (pBuff == NULL || size == 0 || size < (sizeof(RingBuff) + 1)) {
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d005      	beq.n	8000d54 <RingBuffCreate+0x1c>
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d002      	beq.n	8000d54 <RingBuffCreate+0x1c>
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	2b20      	cmp	r3, #32
 8000d52:	d801      	bhi.n	8000d58 <RingBuffCreate+0x20>
        return NULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	e017      	b.n	8000d88 <RingBuffCreate+0x50>
    }

    RINGBUFF_VOLATILE RingBuff *pRingBuf = (RingBuff*)pBuff;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	60fb      	str	r3, [r7, #12]
    BUF_MEMSET((void *)pRingBuf, 0x00, sizeof(RingBuff));
 8000d5c:	2220      	movs	r2, #32
 8000d5e:	2100      	movs	r1, #0
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	f00a fd87 	bl	800b874 <memset>

    pRingBuf->size = size - sizeof(RingBuff);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	f1a3 0220 	sub.w	r2, r3, #32
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	609a      	str	r2, [r3, #8]
    pRingBuf->buff = ((uint8_t*) ((uintptr_t)pBuff) + sizeof(RingBuff));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f103 0220 	add.w	r2, r3, #32
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	605a      	str	r2, [r3, #4]

    pRingBuf->magic1 = 0xDEADBEEF;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	4a04      	ldr	r2, [pc, #16]	@ (8000d90 <RingBuffCreate+0x58>)
 8000d7e:	601a      	str	r2, [r3, #0]
    pRingBuf->magic2 = ~0xDEADBEEF;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4a04      	ldr	r2, [pc, #16]	@ (8000d94 <RingBuffCreate+0x5c>)
 8000d84:	619a      	str	r2, [r3, #24]

    return pRingBuf;
 8000d86:	68fb      	ldr	r3, [r7, #12]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	deadbeef 	.word	0xdeadbeef
 8000d94:	21524110 	.word	0x21524110

08000d98 <RingBuffWrite>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
RingBuffWrite(RINGBUFF_VOLATILE RingBuff* buff, const void* data, size_t btw) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d017      	beq.n	8000dde <RingBuffWrite+0x46>
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a3b      	ldr	r2, [pc, #236]	@ (8000ea0 <RingBuffWrite+0x108>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d112      	bne.n	8000dde <RingBuffWrite+0x46>
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a39      	ldr	r2, [pc, #228]	@ (8000ea4 <RingBuffWrite+0x10c>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d10d      	bne.n	8000dde <RingBuffWrite+0x46>
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d009      	beq.n	8000dde <RingBuffWrite+0x46>
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d005      	beq.n	8000dde <RingBuffWrite+0x46>
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d002      	beq.n	8000dde <RingBuffWrite+0x46>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <RingBuffWrite+0x4a>
        return 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	e059      	b.n	8000e96 <RingBuffWrite+0xfe>
    }

    /* Calculate maximum number of bytes available to write */
    free = RingBuffGetFree(buff);
 8000de2:	68f8      	ldr	r0, [r7, #12]
 8000de4:	f000 f860 	bl	8000ea8 <RingBuffGetFree>
 8000de8:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	4293      	cmp	r3, r2
 8000df0:	bf28      	it	cs
 8000df2:	4613      	movcs	r3, r2
 8000df4:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d101      	bne.n	8000e00 <RingBuffWrite+0x68>
        return 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	e04a      	b.n	8000e96 <RingBuffWrite+0xfe>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d905      	bls.n	8000e1c <RingBuffWrite+0x84>
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	691b      	ldr	r3, [r3, #16]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	e000      	b.n	8000e1e <RingBuffWrite+0x86>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	685a      	ldr	r2, [r3, #4]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	4413      	add	r3, r2
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	69f9      	ldr	r1, [r7, #28]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f00a fd9b 	bl	800b96a <memcpy>
    buff->w += tocopy;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	691a      	ldr	r2, [r3, #16]
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	441a      	add	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
    btw -= tocopy;
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d00b      	beq.n	8000e66 <RingBuffWrite+0xce>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	6858      	ldr	r0, [r3, #4]
 8000e52:	69fa      	ldr	r2, [r7, #28]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	4413      	add	r3, r2
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f00a fd85 	bl	800b96a <memcpy>
        buff->w = btw;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	611a      	str	r2, [r3, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	691a      	ldr	r2, [r3, #16]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d302      	bcc.n	8000e78 <RingBuffWrite+0xe0>
        buff->w = 0;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_WRITE, tocopy + btw);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	695b      	ldr	r3, [r3, #20]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d007      	beq.n	8000e90 <RingBuffWrite+0xf8>
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	6979      	ldr	r1, [r7, #20]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	440a      	add	r2, r1
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	68f8      	ldr	r0, [r7, #12]
 8000e8e:	4798      	blx	r3
    return tocopy + btw;
 8000e90:	697a      	ldr	r2, [r7, #20]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3720      	adds	r7, #32
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	deadbeef 	.word	0xdeadbeef
 8000ea4:	21524110 	.word	0x21524110

08000ea8 <RingBuffGetFree>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
RingBuffGetFree(RINGBUFF_VOLATILE RingBuff* buff) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d011      	beq.n	8000eda <RingBuffGetFree+0x32>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a1c      	ldr	r2, [pc, #112]	@ (8000f2c <RingBuffGetFree+0x84>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d10c      	bne.n	8000eda <RingBuffGetFree+0x32>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f30 <RingBuffGetFree+0x88>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d107      	bne.n	8000eda <RingBuffGetFree+0x32>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <RingBuffGetFree+0x32>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <RingBuffGetFree+0x36>
        return 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e01f      	b.n	8000f1e <RingBuffGetFree+0x76>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	691b      	ldr	r3, [r3, #16]
 8000ee2:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d103      	bne.n	8000efa <RingBuffGetFree+0x52>
        size = buff->size;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	e00f      	b.n	8000f1a <RingBuffGetFree+0x72>
    } else if (r > w) {
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d904      	bls.n	8000f0c <RingBuffGetFree+0x64>
        size = r - w;
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	e006      	b.n	8000f1a <RingBuffGetFree+0x72>
    } else {
        size = buff->size - (w - r);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	68f9      	ldr	r1, [r7, #12]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	1acb      	subs	r3, r1, r3
 8000f16:	4413      	add	r3, r2
 8000f18:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	3b01      	subs	r3, #1
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	371c      	adds	r7, #28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	deadbeef 	.word	0xdeadbeef
 8000f30:	21524110 	.word	0x21524110

08000f34 <RingBuffGetFull>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
RingBuffGetFull(RINGBUFF_VOLATILE RingBuff* buff) {
 8000f34:	b480      	push	{r7}
 8000f36:	b087      	sub	sp, #28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d011      	beq.n	8000f66 <RingBuffGetFull+0x32>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a1b      	ldr	r2, [pc, #108]	@ (8000fb4 <RingBuffGetFull+0x80>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d10c      	bne.n	8000f66 <RingBuffGetFull+0x32>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a19      	ldr	r2, [pc, #100]	@ (8000fb8 <RingBuffGetFull+0x84>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d107      	bne.n	8000f66 <RingBuffGetFull+0x32>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <RingBuffGetFull+0x32>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <RingBuffGetFull+0x36>
        return 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e01d      	b.n	8000fa6 <RingBuffGetFull+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d102      	bne.n	8000f84 <RingBuffGetFull+0x50>
        size = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	e00f      	b.n	8000fa4 <RingBuffGetFull+0x70>
    } else if (w > r) {
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d904      	bls.n	8000f96 <RingBuffGetFull+0x62>
        size = w - r;
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	e006      	b.n	8000fa4 <RingBuffGetFull+0x70>
    } else {
        size = buff->size - (r - w);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	6939      	ldr	r1, [r7, #16]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	1acb      	subs	r3, r1, r3
 8000fa0:	4413      	add	r3, r2
 8000fa2:	617b      	str	r3, [r7, #20]
    }
    return size;
 8000fa4:	697b      	ldr	r3, [r7, #20]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	371c      	adds	r7, #28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	deadbeef 	.word	0xdeadbeef
 8000fb8:	21524110 	.word	0x21524110

08000fbc <RingBuffGetLinearBlockReadAddress>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *
RingBuffGetLinearBlockReadAddress(RINGBUFF_VOLATILE RingBuff* buff) {
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d011      	beq.n	8000fee <RingBuffGetLinearBlockReadAddress+0x32>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a0e      	ldr	r2, [pc, #56]	@ (8001008 <RingBuffGetLinearBlockReadAddress+0x4c>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d10c      	bne.n	8000fee <RingBuffGetLinearBlockReadAddress+0x32>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a0c      	ldr	r2, [pc, #48]	@ (800100c <RingBuffGetLinearBlockReadAddress+0x50>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d107      	bne.n	8000fee <RingBuffGetLinearBlockReadAddress+0x32>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <RingBuffGetLinearBlockReadAddress+0x32>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <RingBuffGetLinearBlockReadAddress+0x36>
        return NULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e004      	b.n	8000ffc <RingBuffGetLinearBlockReadAddress+0x40>
    }
    return &buff->buff[buff->r];
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	4413      	add	r3, r2
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	deadbeef 	.word	0xdeadbeef
 800100c:	21524110 	.word	0x21524110

08001010 <RingBuffGetLinearBlockReadLength>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
RingBuffGetLinearBlockReadLength(RINGBUFF_VOLATILE RingBuff* buff) {
 8001010:	b480      	push	{r7}
 8001012:	b087      	sub	sp, #28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d011      	beq.n	8001042 <RingBuffGetLinearBlockReadLength+0x32>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a1a      	ldr	r2, [pc, #104]	@ (800108c <RingBuffGetLinearBlockReadLength+0x7c>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d10c      	bne.n	8001042 <RingBuffGetLinearBlockReadLength+0x32>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	4a18      	ldr	r2, [pc, #96]	@ (8001090 <RingBuffGetLinearBlockReadLength+0x80>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d107      	bne.n	8001042 <RingBuffGetLinearBlockReadLength+0x32>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <RingBuffGetLinearBlockReadLength+0x32>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <RingBuffGetLinearBlockReadLength+0x36>
        return 0;
 8001042:	2300      	movs	r3, #0
 8001044:	e01b      	b.n	800107e <RingBuffGetLinearBlockReadLength+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	613b      	str	r3, [r7, #16]
    r = buff->r;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	429a      	cmp	r2, r3
 8001058:	d904      	bls.n	8001064 <RingBuffGetLinearBlockReadLength+0x54>
        len = w - r;
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	e00b      	b.n	800107c <RingBuffGetLinearBlockReadLength+0x6c>
    } else if (r > w) {
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	429a      	cmp	r2, r3
 800106a:	d905      	bls.n	8001078 <RingBuffGetLinearBlockReadLength+0x68>
        len = buff->size - r;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	e001      	b.n	800107c <RingBuffGetLinearBlockReadLength+0x6c>
    } else {
        len = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
    }
    return len;
 800107c:	697b      	ldr	r3, [r7, #20]
}
 800107e:	4618      	mov	r0, r3
 8001080:	371c      	adds	r7, #28
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	deadbeef 	.word	0xdeadbeef
 8001090:	21524110 	.word	0x21524110

08001094 <RingBuffSkip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
RingBuffSkip(RINGBUFF_VOLATILE RingBuff* buff, size_t len) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d014      	beq.n	80010ce <RingBuffSkip+0x3a>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a20      	ldr	r2, [pc, #128]	@ (800112c <RingBuffSkip+0x98>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d10f      	bne.n	80010ce <RingBuffSkip+0x3a>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001130 <RingBuffSkip+0x9c>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d10a      	bne.n	80010ce <RingBuffSkip+0x3a>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d006      	beq.n	80010ce <RingBuffSkip+0x3a>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <RingBuffSkip+0x3a>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <RingBuffSkip+0x3e>
        return 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e027      	b.n	8001122 <RingBuffSkip+0x8e>
    }

    full = RingBuffGetFull(buff);             /* Get buffer used length */
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ff2e 	bl	8000f34 <RingBuffGetFull>
 80010d8:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);                   /* Calculate max skip */
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4293      	cmp	r3, r2
 80010e0:	bf28      	it	cs
 80010e2:	4613      	movcs	r3, r2
 80010e4:	603b      	str	r3, [r7, #0]
    buff->r += len;                             /* Advance read pointer */
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68da      	ldr	r2, [r3, #12]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	441a      	add	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68da      	ldr	r2, [r3, #12]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d306      	bcc.n	800110c <RingBuffSkip+0x78>
        buff->r -= buff->size;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68d2      	ldr	r2, [r2, #12]
 8001106:	1ad2      	subs	r2, r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, len);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d005      	beq.n	8001120 <RingBuffSkip+0x8c>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	2100      	movs	r1, #0
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	4798      	blx	r3
    return len;
 8001120:	683b      	ldr	r3, [r7, #0]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	deadbeef 	.word	0xdeadbeef
 8001130:	21524110 	.word	0x21524110

08001134 <SyncMailBoxGet>:
#include "mem/mem.h"

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID);

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
    uint8_t volatile *pMB = NULL;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
    if(mbID == MAILBOX_CM7_ID) pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM7_START;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d103      	bne.n	800114e <SyncMailBoxGet+0x1a>
 8001146:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	e001      	b.n	8001152 <SyncMailBoxGet+0x1e>
    else pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM4_START;
 800114e:	4b04      	ldr	r3, [pc, #16]	@ (8001160 <SyncMailBoxGet+0x2c>)
 8001150:	60fb      	str	r3, [r7, #12]
    return pMB;
 8001152:	68fb      	ldr	r3, [r7, #12]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	38000004 	.word	0x38000004

08001164 <SyncMailBoxWrite>:

int8_t SyncMailBoxWrite(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return -1;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b04      	cmp	r3, #4
 8001174:	d902      	bls.n	800117c <SyncMailBoxWrite+0x18>
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	e009      	b.n	8001190 <SyncMailBoxWrite+0x2c>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 800117c:	68f8      	ldr	r0, [r7, #12]
 800117e:	f7ff ffd9 	bl	8001134 <SyncMailBoxGet>
 8001182:	6178      	str	r0, [r7, #20]
    memcpy((void*)pMB, (void*)pBuffer, len);
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	68b9      	ldr	r1, [r7, #8]
 8001188:	6978      	ldr	r0, [r7, #20]
 800118a:	f00a fbee 	bl	800b96a <memcpy>
    return 0;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <SyncMailBoxWriteNotify>:

int8_t SyncMailBoxWriteNotify(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
    int8_t status = SyncMailBoxWrite(mbID, pBuffer, len);
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	68b9      	ldr	r1, [r7, #8]
 80011a8:	68f8      	ldr	r0, [r7, #12]
 80011aa:	f7ff ffdb 	bl	8001164 <SyncMailBoxWrite>
 80011ae:	4603      	mov	r3, r0
 80011b0:	75fb      	strb	r3, [r7, #23]
    if(status < 0) return status;
 80011b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	da02      	bge.n	80011c0 <SyncMailBoxWriteNotify+0x28>
 80011ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011be:	e003      	b.n	80011c8 <SyncMailBoxWriteNotify+0x30>
    asm volatile ("dsb");
 80011c0:	f3bf 8f4f 	dsb	sy
    asm volatile ("sev");
 80011c4:	bf40      	sev
    return 0;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <SyncMailBoxRead>:

int8_t SyncMailBoxRead(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return -1;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b04      	cmp	r3, #4
 80011e0:	d902      	bls.n	80011e8 <SyncMailBoxRead+0x18>
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	e009      	b.n	80011fc <SyncMailBoxRead+0x2c>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f7ff ffa3 	bl	8001134 <SyncMailBoxGet>
 80011ee:	6178      	str	r0, [r7, #20]
    memcpy((void*)pBuffer, (void*)pMB, len);
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6979      	ldr	r1, [r7, #20]
 80011f4:	68b8      	ldr	r0, [r7, #8]
 80011f6:	f00a fbb8 	bl	800b96a <memcpy>
    return 0;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <SyncGetTaskHandler>:
//     if(HAL_GetCurrentCPUID() == CM7_CPUID)  return 0;
//     else                                    return 1;
// }

static task_handler_fn_t SyncGetTaskHandler(uint32_t taskID)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
    if(taskID > NUM_TASK_TYPES) return NULL;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <SyncGetTaskHandler+0x12>
 8001212:	2300      	movs	r3, #0
 8001214:	e003      	b.n	800121e <SyncGetTaskHandler+0x1a>
    return handlers[taskID];
 8001216:	4a05      	ldr	r2, [pc, #20]	@ (800122c <SyncGetTaskHandler+0x28>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	24000098 	.word	0x24000098

08001230 <SyncInit>:

/*
* \brief Each core needs to call SyncInit
*/
int8_t SyncInit(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
    memset(handlers, 0, sizeof(handlers));
 8001234:	2208      	movs	r2, #8
 8001236:	2100      	movs	r1, #0
 8001238:	4802      	ldr	r0, [pc, #8]	@ (8001244 <SyncInit+0x14>)
 800123a:	f00a fb1b 	bl	800b874 <memset>
    return 0;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	bd80      	pop	{r7, pc}
 8001244:	24000098 	.word	0x24000098

08001248 <SyncRegisterHandler>:

int8_t SyncRegisterHandler(task_handler_fn_t fn, uint32_t taskID)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
    if(taskID > NUM_TASK_TYPES) return -1;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d902      	bls.n	800125e <SyncRegisterHandler+0x16>
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	e005      	b.n	800126a <SyncRegisterHandler+0x22>
    handlers[taskID] = fn;
 800125e:	4906      	ldr	r1, [pc, #24]	@ (8001278 <SyncRegisterHandler+0x30>)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 0;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	24000098 	.word	0x24000098

0800127c <CM7_SEV_IRQHandler>:
* and the SEV IRQ handler for CM4 was called.
* This function was originally defined in CM4/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM7_SEV_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
    // CPUID == CM4
    uint32_t taskID = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 8001286:	463b      	mov	r3, r7
 8001288:	2204      	movs	r2, #4
 800128a:	4619      	mov	r1, r3
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff ff9f 	bl	80011d0 <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ffb5 	bl	8001204 <SyncGetTaskHandler>
 800129a:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <CM7_SEV_IRQHandler+0x2a>
    {
        fn();
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4798      	blx	r3
    }
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <CM4_SEV_IRQHandler>:
* and the SEV IRQ handler for CM7 was called.
* This function was originally defined in CM7/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM4_SEV_IRQHandler(void)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
    // CPUID == CM7
    uint32_t taskID = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM7_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 80012b8:	463b      	mov	r3, r7
 80012ba:	2204      	movs	r2, #4
 80012bc:	4619      	mov	r1, r3
 80012be:	2001      	movs	r0, #1
 80012c0:	f7ff ff86 	bl	80011d0 <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ff9c 	bl	8001204 <SyncGetTaskHandler>
 80012cc:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <CM4_SEV_IRQHandler+0x2a>
    {
        fn();
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4798      	blx	r3
    }
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_GPIO_EXTI_Callback>:
PIDContext gPIDVelAngularContext;
TaskHandle_t gpTaskMotionControlUpdate;
// TaskHandle_t pPWMTaskHandler;

void HAL_GPIO_EXTI_Callback(uint16_t gpioPin)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b08d      	sub	sp, #52	@ 0x34
 80012e4:	af04      	add	r7, sp, #16
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
    if(gpioPin == IMU_INT_Pin) 
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	2b80      	cmp	r3, #128	@ 0x80
 80012ee:	d12f      	bne.n	8001350 <HAL_GPIO_EXTI_Callback+0x70>
    {
        Vec3 accel = gFlightContext.imuUnFilteredAccel;
 80012f0:	4a19      	ldr	r2, [pc, #100]	@ (8001358 <HAL_GPIO_EXTI_Callback+0x78>)
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        Vec3 gyro = gFlightContext.imuUnFilteredGyro;
 80012fc:	4a16      	ldr	r2, [pc, #88]	@ (8001358 <HAL_GPIO_EXTI_Callback+0x78>)
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	3230      	adds	r2, #48	@ 0x30
 8001304:	ca07      	ldmia	r2, {r0, r1, r2}
 8001306:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        if(IMU2CPUInterruptHandler(&gIMU, &accel, &gyro) == IMU_OK)
 800130a:	f107 0208 	add.w	r2, r7, #8
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4811      	ldr	r0, [pc, #68]	@ (800135c <HAL_GPIO_EXTI_Callback+0x7c>)
 8001316:	f7ff fa61 	bl	80007dc <IMU2CPUInterruptHandler>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d117      	bne.n	8001350 <HAL_GPIO_EXTI_Callback+0x70>
        {
            FlightContextUpdateIMUData(&gFlightContext, accel, gyro);
 8001320:	466c      	mov	r4, sp
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800132a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001334:	4808      	ldr	r0, [pc, #32]	@ (8001358 <HAL_GPIO_EXTI_Callback+0x78>)
 8001336:	f7ff f9b9 	bl	80006ac <FlightContextUpdateIMUData>
            if(gpTaskMotionControlUpdate != NULL) xTaskNotifyGive(gpTaskMotionControlUpdate);
 800133a:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <HAL_GPIO_EXTI_Callback+0x80>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d006      	beq.n	8001350 <HAL_GPIO_EXTI_Callback+0x70>
 8001342:	4b07      	ldr	r3, [pc, #28]	@ (8001360 <HAL_GPIO_EXTI_Callback+0x80>)
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	2300      	movs	r3, #0
 8001348:	2202      	movs	r2, #2
 800134a:	2100      	movs	r1, #0
 800134c:	f009 fc20 	bl	800ab90 <xTaskGenericNotify>
        }
    }
}
 8001350:	bf00      	nop
 8001352:	3724      	adds	r7, #36	@ 0x24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd90      	pop	{r4, r7, pc}
 8001358:	24000290 	.word	0x24000290
 800135c:	24000258 	.word	0x24000258
 8001360:	240002f4 	.word	0x240002f4

08001364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af02      	add	r7, sp, #8

/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm("NOP"); }
 800136a:	e000      	b.n	800136e <main+0xa>
 800136c:	bf00      	nop
 800136e:	4b28      	ldr	r3, [pc, #160]	@ (8001410 <main+0xac>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f8      	bne.n	800136c <main+0x8>
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137a:	f000 fe7b 	bl	8002074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137e:	f000 f855 	bl	800142c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001382:	4b23      	ldr	r3, [pc, #140]	@ (8001410 <main+0xac>)
 8001384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001388:	4a21      	ldr	r2, [pc, #132]	@ (8001410 <main+0xac>)
 800138a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800138e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001392:	4b1f      	ldr	r3, [pc, #124]	@ (8001410 <main+0xac>)
 8001394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80013a0:	2000      	movs	r0, #0
 80013a2:	f001 f9af 	bl	8002704 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80013a6:	2100      	movs	r1, #0
 80013a8:	2000      	movs	r0, #0
 80013aa:	f001 f9c5 	bl	8002738 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm("NOP"); }
 80013ae:	e000      	b.n	80013b2 <main+0x4e>
 80013b0:	bf00      	nop
 80013b2:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <main+0xac>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f8      	bne.n	80013b0 <main+0x4c>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013be:	f000 fa3b 	bl	8001838 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80013c2:	f000 f9ed 	bl	80017a0 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80013c6:	f000 f8b7 	bl	8001538 <MX_SPI2_Init>
  MX_TIM8_Init();
 80013ca:	f000 f90b 	bl	80015e4 <MX_TIM8_Init>
  MX_TIM13_Init();
 80013ce:	f000 f999 	bl	8001704 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  LoggerInit(&huart1);
 80013d2:	4810      	ldr	r0, [pc, #64]	@ (8001414 <main+0xb0>)
 80013d4:	f7ff fb78 	bl	8000ac8 <LoggerInit>
  SyncInit();
 80013d8:	f7ff ff2a 	bl	8001230 <SyncInit>
  IMUInit(
 80013dc:	2308      	movs	r3, #8
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	2303      	movs	r3, #3
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2308      	movs	r3, #8
 80013e6:	2201      	movs	r2, #1
 80013e8:	490b      	ldr	r1, [pc, #44]	@ (8001418 <main+0xb4>)
 80013ea:	480c      	ldr	r0, [pc, #48]	@ (800141c <main+0xb8>)
 80013ec:	f7ff fa4e 	bl	800088c <IMUInit>
    IMU_ACC_ODR_100,
    IMU_GYRO_RANGE_250,
    IMU_GYRO_ODR_100
  );

  vTaskStartScheduler();
 80013f0:	f008 fef2 	bl	800a1d8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013f4:	f007 f9f8 	bl	80087e8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013f8:	4a09      	ldr	r2, [pc, #36]	@ (8001420 <main+0xbc>)
 80013fa:	2100      	movs	r1, #0
 80013fc:	4809      	ldr	r0, [pc, #36]	@ (8001424 <main+0xc0>)
 80013fe:	f007 fa3d 	bl	800887c <osThreadNew>
 8001402:	4603      	mov	r3, r0
 8001404:	4a08      	ldr	r2, [pc, #32]	@ (8001428 <main+0xc4>)
 8001406:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001408:	f007 fa12 	bl	8008830 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <main+0xa8>
 8001410:	58024400 	.word	0x58024400
 8001414:	240001c0 	.word	0x240001c0
 8001418:	240000a0 	.word	0x240000a0
 800141c:	24000258 	.word	0x24000258
 8001420:	0800e478 	.word	0x0800e478
 8001424:	08001945 	.word	0x08001945
 8001428:	24000254 	.word	0x24000254

0800142c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b09c      	sub	sp, #112	@ 0x70
 8001430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001436:	224c      	movs	r2, #76	@ 0x4c
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f00a fa1a 	bl	800b874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	2220      	movs	r2, #32
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f00a fa14 	bl	800b874 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800144c:	2004      	movs	r0, #4
 800144e:	f001 f987 	bl	8002760 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001452:	2300      	movs	r3, #0
 8001454:	603b      	str	r3, [r7, #0]
 8001456:	4b36      	ldr	r3, [pc, #216]	@ (8001530 <SystemClock_Config+0x104>)
 8001458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800145a:	4a35      	ldr	r2, [pc, #212]	@ (8001530 <SystemClock_Config+0x104>)
 800145c:	f023 0301 	bic.w	r3, r3, #1
 8001460:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001462:	4b33      	ldr	r3, [pc, #204]	@ (8001530 <SystemClock_Config+0x104>)
 8001464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	4b31      	ldr	r3, [pc, #196]	@ (8001534 <SystemClock_Config+0x108>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	4a30      	ldr	r2, [pc, #192]	@ (8001534 <SystemClock_Config+0x108>)
 8001472:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001476:	6193      	str	r3, [r2, #24]
 8001478:	4b2e      	ldr	r3, [pc, #184]	@ (8001534 <SystemClock_Config+0x108>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001484:	bf00      	nop
 8001486:	4b2b      	ldr	r3, [pc, #172]	@ (8001534 <SystemClock_Config+0x108>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800148e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001492:	d1f8      	bne.n	8001486 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001494:	230b      	movs	r3, #11
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001498:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800149c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800149e:	2301      	movs	r3, #1
 80014a0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a2:	2340      	movs	r3, #64	@ 0x40
 80014a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80014a6:	2301      	movs	r3, #1
 80014a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014aa:	2302      	movs	r3, #2
 80014ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ae:	2302      	movs	r3, #2
 80014b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80014b2:	2305      	movs	r3, #5
 80014b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 80014b6:	2330      	movs	r3, #48	@ 0x30
 80014b8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80014ba:	2302      	movs	r3, #2
 80014bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80014be:	2305      	movs	r3, #5
 80014c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014c2:	2302      	movs	r3, #2
 80014c4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80014c6:	2308      	movs	r3, #8
 80014c8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014d6:	4618      	mov	r0, r3
 80014d8:	f001 f99c 	bl	8002814 <HAL_RCC_OscConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80014e2:	f000 fa49 	bl	8001978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e6:	233f      	movs	r3, #63	@ 0x3f
 80014e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f001 fddc 	bl	80030c8 <HAL_RCC_ClockConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001516:	f000 fa2f 	bl	8001978 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800151a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800151e:	2100      	movs	r1, #0
 8001520:	2000      	movs	r0, #0
 8001522:	f001 ff87 	bl	8003434 <HAL_RCC_MCOConfig>
}
 8001526:	bf00      	nop
 8001528:	3770      	adds	r7, #112	@ 0x70
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	58000400 	.word	0x58000400
 8001534:	58024800 	.word	0x58024800

08001538 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800153c:	4b27      	ldr	r3, [pc, #156]	@ (80015dc <MX_SPI2_Init+0xa4>)
 800153e:	4a28      	ldr	r2, [pc, #160]	@ (80015e0 <MX_SPI2_Init+0xa8>)
 8001540:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001542:	4b26      	ldr	r3, [pc, #152]	@ (80015dc <MX_SPI2_Init+0xa4>)
 8001544:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001548:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800154a:	4b24      	ldr	r3, [pc, #144]	@ (80015dc <MX_SPI2_Init+0xa4>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001550:	4b22      	ldr	r3, [pc, #136]	@ (80015dc <MX_SPI2_Init+0xa4>)
 8001552:	2207      	movs	r2, #7
 8001554:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001556:	4b21      	ldr	r3, [pc, #132]	@ (80015dc <MX_SPI2_Init+0xa4>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800155c:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <MX_SPI2_Init+0xa4>)
 800155e:	2200      	movs	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001562:	4b1e      	ldr	r3, [pc, #120]	@ (80015dc <MX_SPI2_Init+0xa4>)
 8001564:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001568:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800156a:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <MX_SPI2_Init+0xa4>)
 800156c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001570:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001572:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <MX_SPI2_Init+0xa4>)
 8001574:	2200      	movs	r2, #0
 8001576:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001578:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <MX_SPI2_Init+0xa4>)
 800157a:	2200      	movs	r2, #0
 800157c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800157e:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <MX_SPI2_Init+0xa4>)
 8001580:	2200      	movs	r2, #0
 8001582:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001584:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <MX_SPI2_Init+0xa4>)
 8001586:	2200      	movs	r2, #0
 8001588:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800158a:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <MX_SPI2_Init+0xa4>)
 800158c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001590:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001592:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <MX_SPI2_Init+0xa4>)
 8001594:	2200      	movs	r2, #0
 8001596:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001598:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <MX_SPI2_Init+0xa4>)
 800159a:	2200      	movs	r2, #0
 800159c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800159e:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <MX_SPI2_Init+0xa4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015a4:	4b0d      	ldr	r3, [pc, #52]	@ (80015dc <MX_SPI2_Init+0xa4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015aa:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <MX_SPI2_Init+0xa4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <MX_SPI2_Init+0xa4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015b6:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <MX_SPI2_Init+0xa4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015bc:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <MX_SPI2_Init+0xa4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80015c2:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <MX_SPI2_Init+0xa4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015c8:	4804      	ldr	r0, [pc, #16]	@ (80015dc <MX_SPI2_Init+0xa4>)
 80015ca:	f004 f821 	bl	8005610 <HAL_SPI_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80015d4:	f000 f9d0 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	240000a0 	.word	0x240000a0
 80015e0:	40003800 	.word	0x40003800

080015e4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b096      	sub	sp, #88	@ 0x58
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ea:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]
 8001606:	615a      	str	r2, [r3, #20]
 8001608:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	222c      	movs	r2, #44	@ 0x2c
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f00a f92f 	bl	800b874 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001616:	4b39      	ldr	r3, [pc, #228]	@ (80016fc <MX_TIM8_Init+0x118>)
 8001618:	4a39      	ldr	r2, [pc, #228]	@ (8001700 <MX_TIM8_Init+0x11c>)
 800161a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800161c:	4b37      	ldr	r3, [pc, #220]	@ (80016fc <MX_TIM8_Init+0x118>)
 800161e:	2200      	movs	r2, #0
 8001620:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001622:	4b36      	ldr	r3, [pc, #216]	@ (80016fc <MX_TIM8_Init+0x118>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001628:	4b34      	ldr	r3, [pc, #208]	@ (80016fc <MX_TIM8_Init+0x118>)
 800162a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800162e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001630:	4b32      	ldr	r3, [pc, #200]	@ (80016fc <MX_TIM8_Init+0x118>)
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001636:	4b31      	ldr	r3, [pc, #196]	@ (80016fc <MX_TIM8_Init+0x118>)
 8001638:	2200      	movs	r2, #0
 800163a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163c:	4b2f      	ldr	r3, [pc, #188]	@ (80016fc <MX_TIM8_Init+0x118>)
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001642:	482e      	ldr	r0, [pc, #184]	@ (80016fc <MX_TIM8_Init+0x118>)
 8001644:	f004 ffe8 	bl	8006618 <HAL_TIM_PWM_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800164e:	f000 f993 	bl	8001978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800165e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001662:	4619      	mov	r1, r3
 8001664:	4825      	ldr	r0, [pc, #148]	@ (80016fc <MX_TIM8_Init+0x118>)
 8001666:	f005 fde7 	bl	8007238 <HAL_TIMEx_MasterConfigSynchronization>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001670:	f000 f982 	bl	8001978 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001674:	2360      	movs	r3, #96	@ 0x60
 8001676:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167c:	2300      	movs	r3, #0
 800167e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001680:	2300      	movs	r3, #0
 8001682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001690:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001694:	2200      	movs	r2, #0
 8001696:	4619      	mov	r1, r3
 8001698:	4818      	ldr	r0, [pc, #96]	@ (80016fc <MX_TIM8_Init+0x118>)
 800169a:	f005 f91b 	bl	80068d4 <HAL_TIM_PWM_ConfigChannel>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80016a4:	f000 f968 	bl	8001978 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	4619      	mov	r1, r3
 80016dc:	4807      	ldr	r0, [pc, #28]	@ (80016fc <MX_TIM8_Init+0x118>)
 80016de:	f005 fe39 	bl	8007354 <HAL_TIMEx_ConfigBreakDeadTime>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80016e8:	f000 f946 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80016ec:	4803      	ldr	r0, [pc, #12]	@ (80016fc <MX_TIM8_Init+0x118>)
 80016ee:	f000 fa69 	bl	8001bc4 <HAL_TIM_MspPostInit>

}
 80016f2:	bf00      	nop
 80016f4:	3758      	adds	r7, #88	@ 0x58
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	24000128 	.word	0x24000128
 8001700:	40010400 	.word	0x40010400

08001704 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
 8001718:	615a      	str	r2, [r3, #20]
 800171a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800171c:	4b1e      	ldr	r3, [pc, #120]	@ (8001798 <MX_TIM13_Init+0x94>)
 800171e:	4a1f      	ldr	r2, [pc, #124]	@ (800179c <MX_TIM13_Init+0x98>)
 8001720:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8001722:	4b1d      	ldr	r3, [pc, #116]	@ (8001798 <MX_TIM13_Init+0x94>)
 8001724:	2200      	movs	r2, #0
 8001726:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001728:	4b1b      	ldr	r3, [pc, #108]	@ (8001798 <MX_TIM13_Init+0x94>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800172e:	4b1a      	ldr	r3, [pc, #104]	@ (8001798 <MX_TIM13_Init+0x94>)
 8001730:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001734:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001736:	4b18      	ldr	r3, [pc, #96]	@ (8001798 <MX_TIM13_Init+0x94>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173c:	4b16      	ldr	r3, [pc, #88]	@ (8001798 <MX_TIM13_Init+0x94>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001742:	4815      	ldr	r0, [pc, #84]	@ (8001798 <MX_TIM13_Init+0x94>)
 8001744:	f004 fe99 	bl	800647a <HAL_TIM_Base_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800174e:	f000 f913 	bl	8001978 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001752:	4811      	ldr	r0, [pc, #68]	@ (8001798 <MX_TIM13_Init+0x94>)
 8001754:	f004 ff60 	bl	8006618 <HAL_TIM_PWM_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800175e:	f000 f90b 	bl	8001978 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001762:	2360      	movs	r3, #96	@ 0x60
 8001764:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	2200      	movs	r2, #0
 8001776:	4619      	mov	r1, r3
 8001778:	4807      	ldr	r0, [pc, #28]	@ (8001798 <MX_TIM13_Init+0x94>)
 800177a:	f005 f8ab 	bl	80068d4 <HAL_TIM_PWM_ConfigChannel>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001784:	f000 f8f8 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001788:	4803      	ldr	r0, [pc, #12]	@ (8001798 <MX_TIM13_Init+0x94>)
 800178a:	f000 fa1b 	bl	8001bc4 <HAL_TIM_MspPostInit>

}
 800178e:	bf00      	nop
 8001790:	3720      	adds	r7, #32
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	24000174 	.word	0x24000174
 800179c:	40001c00 	.word	0x40001c00

080017a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017a4:	4b22      	ldr	r3, [pc, #136]	@ (8001830 <MX_USART1_UART_Init+0x90>)
 80017a6:	4a23      	ldr	r2, [pc, #140]	@ (8001834 <MX_USART1_UART_Init+0x94>)
 80017a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017aa:	4b21      	ldr	r3, [pc, #132]	@ (8001830 <MX_USART1_UART_Init+0x90>)
 80017ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001830 <MX_USART1_UART_Init+0x90>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001830 <MX_USART1_UART_Init+0x90>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017be:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <MX_USART1_UART_Init+0x90>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <MX_USART1_UART_Init+0x90>)
 80017c6:	220c      	movs	r2, #12
 80017c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ca:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <MX_USART1_UART_Init+0x90>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d0:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <MX_USART1_UART_Init+0x90>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d6:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <MX_USART1_UART_Init+0x90>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017dc:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <MX_USART1_UART_Init+0x90>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017e2:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <MX_USART1_UART_Init+0x90>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017e8:	4811      	ldr	r0, [pc, #68]	@ (8001830 <MX_USART1_UART_Init+0x90>)
 80017ea:	f005 fe4f 	bl	800748c <HAL_UART_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80017f4:	f000 f8c0 	bl	8001978 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017f8:	2100      	movs	r1, #0
 80017fa:	480d      	ldr	r0, [pc, #52]	@ (8001830 <MX_USART1_UART_Init+0x90>)
 80017fc:	f006 fee5 	bl	80085ca <HAL_UARTEx_SetTxFifoThreshold>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001806:	f000 f8b7 	bl	8001978 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800180a:	2100      	movs	r1, #0
 800180c:	4808      	ldr	r0, [pc, #32]	@ (8001830 <MX_USART1_UART_Init+0x90>)
 800180e:	f006 ff1a 	bl	8008646 <HAL_UARTEx_SetRxFifoThreshold>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001818:	f000 f8ae 	bl	8001978 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800181c:	4804      	ldr	r0, [pc, #16]	@ (8001830 <MX_USART1_UART_Init+0x90>)
 800181e:	f006 fe9b 	bl	8008558 <HAL_UARTEx_DisableFifoMode>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001828:	f000 f8a6 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	240001c0 	.word	0x240001c0
 8001834:	40011000 	.word	0x40011000

08001838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	@ 0x28
 800183c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800184e:	4b3a      	ldr	r3, [pc, #232]	@ (8001938 <MX_GPIO_Init+0x100>)
 8001850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001854:	4a38      	ldr	r2, [pc, #224]	@ (8001938 <MX_GPIO_Init+0x100>)
 8001856:	f043 0304 	orr.w	r3, r3, #4
 800185a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800185e:	4b36      	ldr	r3, [pc, #216]	@ (8001938 <MX_GPIO_Init+0x100>)
 8001860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186c:	4b32      	ldr	r3, [pc, #200]	@ (8001938 <MX_GPIO_Init+0x100>)
 800186e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001872:	4a31      	ldr	r2, [pc, #196]	@ (8001938 <MX_GPIO_Init+0x100>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800187c:	4b2e      	ldr	r3, [pc, #184]	@ (8001938 <MX_GPIO_Init+0x100>)
 800187e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800188a:	4b2b      	ldr	r3, [pc, #172]	@ (8001938 <MX_GPIO_Init+0x100>)
 800188c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001890:	4a29      	ldr	r2, [pc, #164]	@ (8001938 <MX_GPIO_Init+0x100>)
 8001892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001896:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800189a:	4b27      	ldr	r3, [pc, #156]	@ (8001938 <MX_GPIO_Init+0x100>)
 800189c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018a8:	4b23      	ldr	r3, [pc, #140]	@ (8001938 <MX_GPIO_Init+0x100>)
 80018aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ae:	4a22      	ldr	r2, [pc, #136]	@ (8001938 <MX_GPIO_Init+0x100>)
 80018b0:	f043 0320 	orr.w	r3, r3, #32
 80018b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001938 <MX_GPIO_Init+0x100>)
 80018ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018be:	f003 0320 	and.w	r3, r3, #32
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80018c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001938 <MX_GPIO_Init+0x100>)
 80018c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001938 <MX_GPIO_Init+0x100>)
 80018ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018d6:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <MX_GPIO_Init+0x100>)
 80018d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 80018e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	2302      	movs	r3, #2
 80018ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80018f6:	2300      	movs	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	480e      	ldr	r0, [pc, #56]	@ (800193c <MX_GPIO_Init+0x104>)
 8001902:	f000 fd35 	bl	8002370 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8001906:	2380      	movs	r3, #128	@ 0x80
 8001908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800190a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800190e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4619      	mov	r1, r3
 800191a:	4809      	ldr	r0, [pc, #36]	@ (8001940 <MX_GPIO_Init+0x108>)
 800191c:	f000 fd28 	bl	8002370 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(IMU_INT_EXTI_IRQn, 5, 0);
 8001920:	2200      	movs	r2, #0
 8001922:	2105      	movs	r1, #5
 8001924:	2017      	movs	r0, #23
 8001926:	f000 fce9 	bl	80022fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(IMU_INT_EXTI_IRQn);
 800192a:	2017      	movs	r0, #23
 800192c:	f000 fd00 	bl	8002330 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001930:	bf00      	nop
 8001932:	3728      	adds	r7, #40	@ 0x28
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	58024400 	.word	0x58024400
 800193c:	58020000 	.word	0x58020000
 8001940:	58020800 	.word	0x58020800

08001944 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800194c:	2001      	movs	r0, #1
 800194e:	f007 f827 	bl	80089a0 <osDelay>
 8001952:	e7fb      	b.n	800194c <StartDefaultTask+0x8>

08001954 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a04      	ldr	r2, [pc, #16]	@ (8001974 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d101      	bne.n	800196a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001966:	f000 fbc1 	bl	80020ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40000800 	.word	0x40000800

08001978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800197c:	b672      	cpsid	i
}
 800197e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <Error_Handler+0x8>

08001984 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <HAL_MspInit+0x48>)
 800198c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001990:	4a0e      	ldr	r2, [pc, #56]	@ (80019cc <HAL_MspInit+0x48>)
 8001992:	f043 0302 	orr.w	r3, r3, #2
 8001996:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800199a:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <HAL_MspInit+0x48>)
 800199c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	210f      	movs	r1, #15
 80019ac:	f06f 0001 	mvn.w	r0, #1
 80019b0:	f000 fca4 	bl	80022fc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 5, 0);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2105      	movs	r1, #5
 80019b8:	2041      	movs	r0, #65	@ 0x41
 80019ba:	f000 fc9f 	bl	80022fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 80019be:	2041      	movs	r0, #65	@ 0x41
 80019c0:	f000 fcb6 	bl	8002330 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	58024400 	.word	0x58024400

080019d0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b0be      	sub	sp, #248	@ 0xf8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019e8:	f107 0318 	add.w	r3, r7, #24
 80019ec:	22c8      	movs	r2, #200	@ 0xc8
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f009 ff3f 	bl	800b874 <memset>
  if(hspi->Instance==SPI2)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a38      	ldr	r2, [pc, #224]	@ (8001adc <HAL_SPI_MspInit+0x10c>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d169      	bne.n	8001ad4 <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001a00:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a10:	f107 0318 	add.w	r3, r7, #24
 8001a14:	4618      	mov	r0, r3
 8001a16:	f001 ff8f 	bl	8003938 <HAL_RCCEx_PeriphCLKConfig>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001a20:	f7ff ffaa 	bl	8001978 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a24:	4b2e      	ldr	r3, [pc, #184]	@ (8001ae0 <HAL_SPI_MspInit+0x110>)
 8001a26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ae0 <HAL_SPI_MspInit+0x110>)
 8001a2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a34:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae0 <HAL_SPI_MspInit+0x110>)
 8001a36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	4b27      	ldr	r3, [pc, #156]	@ (8001ae0 <HAL_SPI_MspInit+0x110>)
 8001a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a48:	4a25      	ldr	r2, [pc, #148]	@ (8001ae0 <HAL_SPI_MspInit+0x110>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a52:	4b23      	ldr	r3, [pc, #140]	@ (8001ae0 <HAL_SPI_MspInit+0x110>)
 8001a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae0 <HAL_SPI_MspInit+0x110>)
 8001a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a66:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae0 <HAL_SPI_MspInit+0x110>)
 8001a68:	f043 0304 	orr.w	r3, r3, #4
 8001a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae0 <HAL_SPI_MspInit+0x110>)
 8001a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_NSS_Pin;
 8001a7e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001a82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a98:	2305      	movs	r3, #5
 8001a9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	480f      	ldr	r0, [pc, #60]	@ (8001ae4 <HAL_SPI_MspInit+0x114>)
 8001aa6:	f000 fc63 	bl	8002370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_3_Pin|PMOD_2_Pin;
 8001aaa:	230c      	movs	r3, #12
 8001aac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ac2:	2305      	movs	r3, #5
 8001ac4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001acc:	4619      	mov	r1, r3
 8001ace:	4806      	ldr	r0, [pc, #24]	@ (8001ae8 <HAL_SPI_MspInit+0x118>)
 8001ad0:	f000 fc4e 	bl	8002370 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001ad4:	bf00      	nop
 8001ad6:	37f8      	adds	r7, #248	@ 0xf8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40003800 	.word	0x40003800
 8001ae0:	58024400 	.word	0x58024400
 8001ae4:	58020000 	.word	0x58020000
 8001ae8:	58020800 	.word	0x58020800

08001aec <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	@ 0x28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1a      	ldr	r2, [pc, #104]	@ (8001b74 <HAL_TIM_PWM_MspInit+0x88>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d12d      	bne.n	8001b6a <HAL_TIM_PWM_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b78 <HAL_TIM_PWM_MspInit+0x8c>)
 8001b10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b14:	4a18      	ldr	r2, [pc, #96]	@ (8001b78 <HAL_TIM_PWM_MspInit+0x8c>)
 8001b16:	f043 0302 	orr.w	r3, r3, #2
 8001b1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b1e:	4b16      	ldr	r3, [pc, #88]	@ (8001b78 <HAL_TIM_PWM_MspInit+0x8c>)
 8001b20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b2c:	4b12      	ldr	r3, [pc, #72]	@ (8001b78 <HAL_TIM_PWM_MspInit+0x8c>)
 8001b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b32:	4a11      	ldr	r2, [pc, #68]	@ (8001b78 <HAL_TIM_PWM_MspInit+0x8c>)
 8001b34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <HAL_TIM_PWM_MspInit+0x8c>)
 8001b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001b4a:	2340      	movs	r3, #64	@ 0x40
 8001b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4619      	mov	r1, r3
 8001b64:	4805      	ldr	r0, [pc, #20]	@ (8001b7c <HAL_TIM_PWM_MspInit+0x90>)
 8001b66:	f000 fc03 	bl	8002370 <HAL_GPIO_Init>

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 8001b6a:	bf00      	nop
 8001b6c:	3728      	adds	r7, #40	@ 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40010400 	.word	0x40010400
 8001b78:	58024400 	.word	0x58024400
 8001b7c:	58022400 	.word	0x58022400

08001b80 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001bbc <HAL_TIM_Base_MspInit+0x3c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d10e      	bne.n	8001bb0 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001b92:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc0 <HAL_TIM_Base_MspInit+0x40>)
 8001b94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b98:	4a09      	ldr	r2, [pc, #36]	@ (8001bc0 <HAL_TIM_Base_MspInit+0x40>)
 8001b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b9e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ba2:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <HAL_TIM_Base_MspInit+0x40>)
 8001ba4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM13_MspInit 1 */

  }

}
 8001bb0:	bf00      	nop
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	40001c00 	.word	0x40001c00
 8001bc0:	58024400 	.word	0x58024400

08001bc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	@ 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a35      	ldr	r2, [pc, #212]	@ (8001cb8 <HAL_TIM_MspPostInit+0xf4>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d13e      	bne.n	8001c64 <HAL_TIM_MspPostInit+0xa0>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be6:	4b35      	ldr	r3, [pc, #212]	@ (8001cbc <HAL_TIM_MspPostInit+0xf8>)
 8001be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bec:	4a33      	ldr	r2, [pc, #204]	@ (8001cbc <HAL_TIM_MspPostInit+0xf8>)
 8001bee:	f043 0304 	orr.w	r3, r3, #4
 8001bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bf6:	4b31      	ldr	r3, [pc, #196]	@ (8001cbc <HAL_TIM_MspPostInit+0xf8>)
 8001bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001c04:	4b2d      	ldr	r3, [pc, #180]	@ (8001cbc <HAL_TIM_MspPostInit+0xf8>)
 8001c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8001cbc <HAL_TIM_MspPostInit+0xf8>)
 8001c0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c14:	4b29      	ldr	r3, [pc, #164]	@ (8001cbc <HAL_TIM_MspPostInit+0xf8>)
 8001c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PJ7     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c22:	2340      	movs	r3, #64	@ 0x40
 8001c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c32:	2303      	movs	r3, #3
 8001c34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4820      	ldr	r0, [pc, #128]	@ (8001cc0 <HAL_TIM_MspPostInit+0xfc>)
 8001c3e:	f000 fb97 	bl	8002370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001c42:	2380      	movs	r3, #128	@ 0x80
 8001c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c52:	2303      	movs	r3, #3
 8001c54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4819      	ldr	r0, [pc, #100]	@ (8001cc4 <HAL_TIM_MspPostInit+0x100>)
 8001c5e:	f000 fb87 	bl	8002370 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM13_MspPostInit 1 */

    /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8001c62:	e024      	b.n	8001cae <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM13)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a17      	ldr	r2, [pc, #92]	@ (8001cc8 <HAL_TIM_MspPostInit+0x104>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d11f      	bne.n	8001cae <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c6e:	4b13      	ldr	r3, [pc, #76]	@ (8001cbc <HAL_TIM_MspPostInit+0xf8>)
 8001c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c74:	4a11      	ldr	r2, [pc, #68]	@ (8001cbc <HAL_TIM_MspPostInit+0xf8>)
 8001c76:	f043 0320 	orr.w	r3, r3, #32
 8001c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cbc <HAL_TIM_MspPostInit+0xf8>)
 8001c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c84:	f003 0320 	and.w	r3, r3, #32
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 8001c8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001c9e:	2309      	movs	r3, #9
 8001ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4808      	ldr	r0, [pc, #32]	@ (8001ccc <HAL_TIM_MspPostInit+0x108>)
 8001caa:	f000 fb61 	bl	8002370 <HAL_GPIO_Init>
}
 8001cae:	bf00      	nop
 8001cb0:	3728      	adds	r7, #40	@ 0x28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40010400 	.word	0x40010400
 8001cbc:	58024400 	.word	0x58024400
 8001cc0:	58020800 	.word	0x58020800
 8001cc4:	58022400 	.word	0x58022400
 8001cc8:	40001c00 	.word	0x40001c00
 8001ccc:	58021400 	.word	0x58021400

08001cd0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b0bc      	sub	sp, #240	@ 0xf0
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ce8:	f107 0310 	add.w	r3, r7, #16
 8001cec:	22c8      	movs	r2, #200	@ 0xc8
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f009 fdbf 	bl	800b874 <memset>
  if(huart->Instance==USART1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a27      	ldr	r2, [pc, #156]	@ (8001d98 <HAL_UART_MspInit+0xc8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d146      	bne.n	8001d8e <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d00:	f04f 0201 	mov.w	r2, #1
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d12:	f107 0310 	add.w	r3, r7, #16
 8001d16:	4618      	mov	r0, r3
 8001d18:	f001 fe0e 	bl	8003938 <HAL_RCCEx_PeriphCLKConfig>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001d22:	f7ff fe29 	bl	8001978 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d26:	4b1d      	ldr	r3, [pc, #116]	@ (8001d9c <HAL_UART_MspInit+0xcc>)
 8001d28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d9c <HAL_UART_MspInit+0xcc>)
 8001d2e:	f043 0310 	orr.w	r3, r3, #16
 8001d32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d36:	4b19      	ldr	r3, [pc, #100]	@ (8001d9c <HAL_UART_MspInit+0xcc>)
 8001d38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d44:	4b15      	ldr	r3, [pc, #84]	@ (8001d9c <HAL_UART_MspInit+0xcc>)
 8001d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d4a:	4a14      	ldr	r2, [pc, #80]	@ (8001d9c <HAL_UART_MspInit+0xcc>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d54:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <HAL_UART_MspInit+0xcc>)
 8001d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001d62:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d7c:	2307      	movs	r3, #7
 8001d7e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d86:	4619      	mov	r1, r3
 8001d88:	4805      	ldr	r0, [pc, #20]	@ (8001da0 <HAL_UART_MspInit+0xd0>)
 8001d8a:	f000 faf1 	bl	8002370 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001d8e:	bf00      	nop
 8001d90:	37f0      	adds	r7, #240	@ 0xf0
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40011000 	.word	0x40011000
 8001d9c:	58024400 	.word	0x58024400
 8001da0:	58020000 	.word	0x58020000

08001da4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b090      	sub	sp, #64	@ 0x40
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b0f      	cmp	r3, #15
 8001db0:	d827      	bhi.n	8001e02 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	201e      	movs	r0, #30
 8001db8:	f000 faa0 	bl	80022fc <HAL_NVIC_SetPriority>

     /* Enable the TIM4 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001dbc:	201e      	movs	r0, #30
 8001dbe:	f000 fab7 	bl	8002330 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001dc2:	4a29      	ldr	r2, [pc, #164]	@ (8001e68 <HAL_InitTick+0xc4>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001dc8:	4b28      	ldr	r3, [pc, #160]	@ (8001e6c <HAL_InitTick+0xc8>)
 8001dca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dce:	4a27      	ldr	r2, [pc, #156]	@ (8001e6c <HAL_InitTick+0xc8>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001dd8:	4b24      	ldr	r3, [pc, #144]	@ (8001e6c <HAL_InitTick+0xc8>)
 8001dda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001de6:	f107 0210 	add.w	r2, r7, #16
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f001 fd5f 	bl	80038b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df8:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d106      	bne.n	8001e0e <HAL_InitTick+0x6a>
 8001e00:	e001      	b.n	8001e06 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e02b      	b.n	8001e5e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e06:	f001 fd29 	bl	800385c <HAL_RCC_GetPCLK1Freq>
 8001e0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001e0c:	e004      	b.n	8001e18 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e0e:	f001 fd25 	bl	800385c <HAL_RCC_GetPCLK1Freq>
 8001e12:	4603      	mov	r3, r0
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e1a:	4a15      	ldr	r2, [pc, #84]	@ (8001e70 <HAL_InitTick+0xcc>)
 8001e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e20:	0c9b      	lsrs	r3, r3, #18
 8001e22:	3b01      	subs	r3, #1
 8001e24:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001e26:	4b13      	ldr	r3, [pc, #76]	@ (8001e74 <HAL_InitTick+0xd0>)
 8001e28:	4a13      	ldr	r2, [pc, #76]	@ (8001e78 <HAL_InitTick+0xd4>)
 8001e2a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <HAL_InitTick+0xd0>)
 8001e2e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e32:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001e34:	4a0f      	ldr	r2, [pc, #60]	@ (8001e74 <HAL_InitTick+0xd0>)
 8001e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e38:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e74 <HAL_InitTick+0xd0>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e40:	4b0c      	ldr	r3, [pc, #48]	@ (8001e74 <HAL_InitTick+0xd0>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001e46:	480b      	ldr	r0, [pc, #44]	@ (8001e74 <HAL_InitTick+0xd0>)
 8001e48:	f004 fb17 	bl	800647a <HAL_TIM_Base_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d104      	bne.n	8001e5c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001e52:	4808      	ldr	r0, [pc, #32]	@ (8001e74 <HAL_InitTick+0xd0>)
 8001e54:	f004 fb68 	bl	8006528 <HAL_TIM_Base_Start_IT>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	e000      	b.n	8001e5e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3740      	adds	r7, #64	@ 0x40
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	24000008 	.word	0x24000008
 8001e6c:	58024400 	.word	0x58024400
 8001e70:	431bde83 	.word	0x431bde83
 8001e74:	240002f8 	.word	0x240002f8
 8001e78:	40000800 	.word	0x40000800

08001e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <NMI_Handler+0x4>

08001e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <HardFault_Handler+0x4>

08001e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <MemManage_Handler+0x4>

08001e94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <BusFault_Handler+0x4>

08001e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea0:	bf00      	nop
 8001ea2:	e7fd      	b.n	8001ea0 <UsageFault_Handler+0x4>

08001ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8001eb6:	2080      	movs	r0, #128	@ 0x80
 8001eb8:	f000 fc0a 	bl	80026d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ec4:	4802      	ldr	r0, [pc, #8]	@ (8001ed0 <TIM4_IRQHandler+0x10>)
 8001ec6:	f004 fbfe 	bl	80066c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	240002f8 	.word	0x240002f8

08001ed4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	e00a      	b.n	8001efc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ee6:	f3af 8000 	nop.w
 8001eea:	4601      	mov	r1, r0
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	60ba      	str	r2, [r7, #8]
 8001ef2:	b2ca      	uxtb	r2, r1
 8001ef4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	dbf0      	blt.n	8001ee6 <_read+0x12>
  }

  return len;
 8001f04:	687b      	ldr	r3, [r7, #4]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	e009      	b.n	8001f34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	60ba      	str	r2, [r7, #8]
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fd95 	bl	8000a58 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	3301      	adds	r3, #1
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	dbf1      	blt.n	8001f20 <_write+0x12>
  }
  return len;
 8001f3c:	687b      	ldr	r3, [r7, #4]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <_close>:

int _close(int file)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f6e:	605a      	str	r2, [r3, #4]
  return 0;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <_isatty>:

int _isatty(int file)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f86:	2301      	movs	r3, #1
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb8:	4a14      	ldr	r2, [pc, #80]	@ (800200c <_sbrk+0x5c>)
 8001fba:	4b15      	ldr	r3, [pc, #84]	@ (8002010 <_sbrk+0x60>)
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fc4:	4b13      	ldr	r3, [pc, #76]	@ (8002014 <_sbrk+0x64>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d102      	bne.n	8001fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	@ (8002014 <_sbrk+0x64>)
 8001fce:	4a12      	ldr	r2, [pc, #72]	@ (8002018 <_sbrk+0x68>)
 8001fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fd2:	4b10      	ldr	r3, [pc, #64]	@ (8002014 <_sbrk+0x64>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d207      	bcs.n	8001ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fe0:	f009 fc96 	bl	800b910 <__errno>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fea:	f04f 33ff 	mov.w	r3, #4294967295
 8001fee:	e009      	b.n	8002004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ff0:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <_sbrk+0x64>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ff6:	4b07      	ldr	r3, [pc, #28]	@ (8002014 <_sbrk+0x64>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	4a05      	ldr	r2, [pc, #20]	@ (8002014 <_sbrk+0x64>)
 8002000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002002:	68fb      	ldr	r3, [r7, #12]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	24080000 	.word	0x24080000
 8002010:	00000400 	.word	0x00000400
 8002014:	24000344 	.word	0x24000344
 8002018:	24004de8 	.word	0x24004de8

0800201c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800201c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002058 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002020:	f7fe fe72 	bl	8000d08 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002024:	f7fe fdc2 	bl	8000bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002028:	480c      	ldr	r0, [pc, #48]	@ (800205c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800202a:	490d      	ldr	r1, [pc, #52]	@ (8002060 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800202c:	4a0d      	ldr	r2, [pc, #52]	@ (8002064 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002030:	e002      	b.n	8002038 <LoopCopyDataInit>

08002032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002036:	3304      	adds	r3, #4

08002038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800203a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800203c:	d3f9      	bcc.n	8002032 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800203e:	4a0a      	ldr	r2, [pc, #40]	@ (8002068 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002040:	4c0a      	ldr	r4, [pc, #40]	@ (800206c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002044:	e001      	b.n	800204a <LoopFillZerobss>

08002046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002048:	3204      	adds	r2, #4

0800204a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800204a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800204c:	d3fb      	bcc.n	8002046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800204e:	f009 fc65 	bl	800b91c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002052:	f7ff f987 	bl	8001364 <main>
  bx  lr
 8002056:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002058:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800205c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002060:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8002064:	0800e508 	.word	0x0800e508
  ldr r2, =_sbss
 8002068:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 800206c:	24004de8 	.word	0x24004de8

08002070 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002070:	e7fe      	b.n	8002070 <ADC3_IRQHandler>
	...

08002074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800207a:	2003      	movs	r0, #3
 800207c:	f000 f933 	bl	80022e6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002080:	f001 fa42 	bl	8003508 <HAL_RCC_GetSysClockFreq>
 8002084:	4602      	mov	r2, r0
 8002086:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <HAL_Init+0x68>)
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	0a1b      	lsrs	r3, r3, #8
 800208c:	f003 030f 	and.w	r3, r3, #15
 8002090:	4913      	ldr	r1, [pc, #76]	@ (80020e0 <HAL_Init+0x6c>)
 8002092:	5ccb      	ldrb	r3, [r1, r3]
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
 800209c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800209e:	4b0f      	ldr	r3, [pc, #60]	@ (80020dc <HAL_Init+0x68>)
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	4a0e      	ldr	r2, [pc, #56]	@ (80020e0 <HAL_Init+0x6c>)
 80020a8:	5cd3      	ldrb	r3, [r2, r3]
 80020aa:	f003 031f 	and.w	r3, r3, #31
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
 80020b4:	4a0b      	ldr	r2, [pc, #44]	@ (80020e4 <HAL_Init+0x70>)
 80020b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020b8:	4a0b      	ldr	r2, [pc, #44]	@ (80020e8 <HAL_Init+0x74>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020be:	200f      	movs	r0, #15
 80020c0:	f7ff fe70 	bl	8001da4 <HAL_InitTick>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e002      	b.n	80020d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80020ce:	f7ff fc59 	bl	8001984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	58024400 	.word	0x58024400
 80020e0:	0800e468 	.word	0x0800e468
 80020e4:	24000004 	.word	0x24000004
 80020e8:	24000000 	.word	0x24000000

080020ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020f0:	4b06      	ldr	r3, [pc, #24]	@ (800210c <HAL_IncTick+0x20>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <HAL_IncTick+0x24>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4413      	add	r3, r2
 80020fc:	4a04      	ldr	r2, [pc, #16]	@ (8002110 <HAL_IncTick+0x24>)
 80020fe:	6013      	str	r3, [r2, #0]
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	2400000c 	.word	0x2400000c
 8002110:	24000348 	.word	0x24000348

08002114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return uwTick;
 8002118:	4b03      	ldr	r3, [pc, #12]	@ (8002128 <HAL_GetTick+0x14>)
 800211a:	681b      	ldr	r3, [r3, #0]
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	24000348 	.word	0x24000348

0800212c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002134:	f7ff ffee 	bl	8002114 <HAL_GetTick>
 8002138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002144:	d005      	beq.n	8002152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002146:	4b0a      	ldr	r3, [pc, #40]	@ (8002170 <HAL_Delay+0x44>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4413      	add	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002152:	bf00      	nop
 8002154:	f7ff ffde 	bl	8002114 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	429a      	cmp	r2, r3
 8002162:	d8f7      	bhi.n	8002154 <HAL_Delay+0x28>
  {
  }
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	2400000c 	.word	0x2400000c

08002174 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002178:	4b03      	ldr	r3, [pc, #12]	@ (8002188 <HAL_GetREVID+0x14>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	0c1b      	lsrs	r3, r3, #16
}
 800217e:	4618      	mov	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	5c001000 	.word	0x5c001000

0800218c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800219c:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <__NVIC_SetPriorityGrouping+0x40>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021a8:	4013      	ands	r3, r2
 80021aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021b4:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ba:	4a04      	ldr	r2, [pc, #16]	@ (80021cc <__NVIC_SetPriorityGrouping+0x40>)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	60d3      	str	r3, [r2, #12]
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000ed00 	.word	0xe000ed00
 80021d0:	05fa0000 	.word	0x05fa0000

080021d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d8:	4b04      	ldr	r3, [pc, #16]	@ (80021ec <__NVIC_GetPriorityGrouping+0x18>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	0a1b      	lsrs	r3, r3, #8
 80021de:	f003 0307 	and.w	r3, r3, #7
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	db0b      	blt.n	800221a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	f003 021f 	and.w	r2, r3, #31
 8002208:	4907      	ldr	r1, [pc, #28]	@ (8002228 <__NVIC_EnableIRQ+0x38>)
 800220a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	2001      	movs	r0, #1
 8002212:	fa00 f202 	lsl.w	r2, r0, r2
 8002216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	e000e100 	.word	0xe000e100

0800222c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	6039      	str	r1, [r7, #0]
 8002236:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002238:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800223c:	2b00      	cmp	r3, #0
 800223e:	db0a      	blt.n	8002256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	b2da      	uxtb	r2, r3
 8002244:	490c      	ldr	r1, [pc, #48]	@ (8002278 <__NVIC_SetPriority+0x4c>)
 8002246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800224a:	0112      	lsls	r2, r2, #4
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	440b      	add	r3, r1
 8002250:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002254:	e00a      	b.n	800226c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	b2da      	uxtb	r2, r3
 800225a:	4908      	ldr	r1, [pc, #32]	@ (800227c <__NVIC_SetPriority+0x50>)
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	3b04      	subs	r3, #4
 8002264:	0112      	lsls	r2, r2, #4
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	440b      	add	r3, r1
 800226a:	761a      	strb	r2, [r3, #24]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	e000e100 	.word	0xe000e100
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	@ 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f1c3 0307 	rsb	r3, r3, #7
 800229a:	2b04      	cmp	r3, #4
 800229c:	bf28      	it	cs
 800229e:	2304      	movcs	r3, #4
 80022a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3304      	adds	r3, #4
 80022a6:	2b06      	cmp	r3, #6
 80022a8:	d902      	bls.n	80022b0 <NVIC_EncodePriority+0x30>
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3b03      	subs	r3, #3
 80022ae:	e000      	b.n	80022b2 <NVIC_EncodePriority+0x32>
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	f04f 32ff 	mov.w	r2, #4294967295
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43da      	mvns	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	401a      	ands	r2, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c8:	f04f 31ff 	mov.w	r1, #4294967295
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	fa01 f303 	lsl.w	r3, r1, r3
 80022d2:	43d9      	mvns	r1, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d8:	4313      	orrs	r3, r2
         );
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3724      	adds	r7, #36	@ 0x24
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ff4c 	bl	800218c <__NVIC_SetPriorityGrouping>
}
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800230a:	f7ff ff63 	bl	80021d4 <__NVIC_GetPriorityGrouping>
 800230e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	68b9      	ldr	r1, [r7, #8]
 8002314:	6978      	ldr	r0, [r7, #20]
 8002316:	f7ff ffb3 	bl	8002280 <NVIC_EncodePriority>
 800231a:	4602      	mov	r2, r0
 800231c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002320:	4611      	mov	r1, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff ff82 	bl	800222c <__NVIC_SetPriority>
}
 8002328:	bf00      	nop
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800233a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff ff56 	bl	80021f0 <__NVIC_EnableIRQ>
}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002350:	4b06      	ldr	r3, [pc, #24]	@ (800236c <HAL_GetCurrentCPUID+0x20>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002358:	2b70      	cmp	r3, #112	@ 0x70
 800235a:	d101      	bne.n	8002360 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 800235c:	2303      	movs	r3, #3
 800235e:	e000      	b.n	8002362 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8002360:	2301      	movs	r3, #1
  }
}
 8002362:	4618      	mov	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002370:	b480      	push	{r7}
 8002372:	b089      	sub	sp, #36	@ 0x24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800237e:	4b89      	ldr	r3, [pc, #548]	@ (80025a4 <HAL_GPIO_Init+0x234>)
 8002380:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002382:	e194      	b.n	80026ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	2101      	movs	r1, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa01 f303 	lsl.w	r3, r1, r3
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 8186 	beq.w	80026a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d005      	beq.n	80023b4 <HAL_GPIO_Init+0x44>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d130      	bne.n	8002416 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	2203      	movs	r2, #3
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023ea:	2201      	movs	r2, #1
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	091b      	lsrs	r3, r3, #4
 8002400:	f003 0201 	and.w	r2, r3, #1
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b03      	cmp	r3, #3
 8002420:	d017      	beq.n	8002452 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	2203      	movs	r2, #3
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d123      	bne.n	80024a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	08da      	lsrs	r2, r3, #3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3208      	adds	r2, #8
 8002466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	220f      	movs	r2, #15
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	691a      	ldr	r2, [r3, #16]
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	08da      	lsrs	r2, r3, #3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3208      	adds	r2, #8
 80024a0:	69b9      	ldr	r1, [r7, #24]
 80024a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	2203      	movs	r2, #3
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0203 	and.w	r2, r3, #3
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 80e0 	beq.w	80026a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e8:	4b2f      	ldr	r3, [pc, #188]	@ (80025a8 <HAL_GPIO_Init+0x238>)
 80024ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024ee:	4a2e      	ldr	r2, [pc, #184]	@ (80025a8 <HAL_GPIO_Init+0x238>)
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80024f8:	4b2b      	ldr	r3, [pc, #172]	@ (80025a8 <HAL_GPIO_Init+0x238>)
 80024fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002506:	4a29      	ldr	r2, [pc, #164]	@ (80025ac <HAL_GPIO_Init+0x23c>)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	3302      	adds	r3, #2
 800250e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	220f      	movs	r2, #15
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a20      	ldr	r2, [pc, #128]	@ (80025b0 <HAL_GPIO_Init+0x240>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d052      	beq.n	80025d8 <HAL_GPIO_Init+0x268>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a1f      	ldr	r2, [pc, #124]	@ (80025b4 <HAL_GPIO_Init+0x244>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d031      	beq.n	800259e <HAL_GPIO_Init+0x22e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a1e      	ldr	r2, [pc, #120]	@ (80025b8 <HAL_GPIO_Init+0x248>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d02b      	beq.n	800259a <HAL_GPIO_Init+0x22a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a1d      	ldr	r2, [pc, #116]	@ (80025bc <HAL_GPIO_Init+0x24c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d025      	beq.n	8002596 <HAL_GPIO_Init+0x226>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a1c      	ldr	r2, [pc, #112]	@ (80025c0 <HAL_GPIO_Init+0x250>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d01f      	beq.n	8002592 <HAL_GPIO_Init+0x222>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a1b      	ldr	r2, [pc, #108]	@ (80025c4 <HAL_GPIO_Init+0x254>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d019      	beq.n	800258e <HAL_GPIO_Init+0x21e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a1a      	ldr	r2, [pc, #104]	@ (80025c8 <HAL_GPIO_Init+0x258>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d013      	beq.n	800258a <HAL_GPIO_Init+0x21a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a19      	ldr	r2, [pc, #100]	@ (80025cc <HAL_GPIO_Init+0x25c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00d      	beq.n	8002586 <HAL_GPIO_Init+0x216>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a18      	ldr	r2, [pc, #96]	@ (80025d0 <HAL_GPIO_Init+0x260>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d007      	beq.n	8002582 <HAL_GPIO_Init+0x212>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a17      	ldr	r2, [pc, #92]	@ (80025d4 <HAL_GPIO_Init+0x264>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d101      	bne.n	800257e <HAL_GPIO_Init+0x20e>
 800257a:	2309      	movs	r3, #9
 800257c:	e02d      	b.n	80025da <HAL_GPIO_Init+0x26a>
 800257e:	230a      	movs	r3, #10
 8002580:	e02b      	b.n	80025da <HAL_GPIO_Init+0x26a>
 8002582:	2308      	movs	r3, #8
 8002584:	e029      	b.n	80025da <HAL_GPIO_Init+0x26a>
 8002586:	2307      	movs	r3, #7
 8002588:	e027      	b.n	80025da <HAL_GPIO_Init+0x26a>
 800258a:	2306      	movs	r3, #6
 800258c:	e025      	b.n	80025da <HAL_GPIO_Init+0x26a>
 800258e:	2305      	movs	r3, #5
 8002590:	e023      	b.n	80025da <HAL_GPIO_Init+0x26a>
 8002592:	2304      	movs	r3, #4
 8002594:	e021      	b.n	80025da <HAL_GPIO_Init+0x26a>
 8002596:	2303      	movs	r3, #3
 8002598:	e01f      	b.n	80025da <HAL_GPIO_Init+0x26a>
 800259a:	2302      	movs	r3, #2
 800259c:	e01d      	b.n	80025da <HAL_GPIO_Init+0x26a>
 800259e:	2301      	movs	r3, #1
 80025a0:	e01b      	b.n	80025da <HAL_GPIO_Init+0x26a>
 80025a2:	bf00      	nop
 80025a4:	58000080 	.word	0x58000080
 80025a8:	58024400 	.word	0x58024400
 80025ac:	58000400 	.word	0x58000400
 80025b0:	58020000 	.word	0x58020000
 80025b4:	58020400 	.word	0x58020400
 80025b8:	58020800 	.word	0x58020800
 80025bc:	58020c00 	.word	0x58020c00
 80025c0:	58021000 	.word	0x58021000
 80025c4:	58021400 	.word	0x58021400
 80025c8:	58021800 	.word	0x58021800
 80025cc:	58021c00 	.word	0x58021c00
 80025d0:	58022000 	.word	0x58022000
 80025d4:	58022400 	.word	0x58022400
 80025d8:	2300      	movs	r3, #0
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	f002 0203 	and.w	r2, r2, #3
 80025e0:	0092      	lsls	r2, r2, #2
 80025e2:	4093      	lsls	r3, r2
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ea:	4938      	ldr	r1, [pc, #224]	@ (80026cc <HAL_GPIO_Init+0x35c>)
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	089b      	lsrs	r3, r3, #2
 80025f0:	3302      	adds	r3, #2
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800261e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800264c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	3301      	adds	r3, #1
 80026ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa22 f303 	lsr.w	r3, r2, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f47f ae63 	bne.w	8002384 <HAL_GPIO_Init+0x14>
  }
}
 80026be:	bf00      	nop
 80026c0:	bf00      	nop
 80026c2:	3724      	adds	r7, #36	@ 0x24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	58000400 	.word	0x58000400

080026d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80026da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026de:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80026e2:	88fb      	ldrh	r3, [r7, #6]
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d008      	beq.n	80026fc <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe fdf2 	bl	80012e0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800270c:	4a08      	ldr	r2, [pc, #32]	@ (8002730 <HAL_HSEM_FastTake+0x2c>)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3320      	adds	r3, #32
 8002712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002716:	4a07      	ldr	r2, [pc, #28]	@ (8002734 <HAL_HSEM_FastTake+0x30>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d101      	bne.n	8002720 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	e000      	b.n	8002722 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	58026400 	.word	0x58026400
 8002734:	80000300 	.word	0x80000300

08002738 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002742:	4906      	ldr	r1, [pc, #24]	@ (800275c <HAL_HSEM_Release+0x24>)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	58026400 	.word	0x58026400

08002760 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002768:	4b29      	ldr	r3, [pc, #164]	@ (8002810 <HAL_PWREx_ConfigSupply+0xb0>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	2b06      	cmp	r3, #6
 8002772:	d00a      	beq.n	800278a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002774:	4b26      	ldr	r3, [pc, #152]	@ (8002810 <HAL_PWREx_ConfigSupply+0xb0>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	429a      	cmp	r2, r3
 8002780:	d001      	beq.n	8002786 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e040      	b.n	8002808 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	e03e      	b.n	8002808 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800278a:	4b21      	ldr	r3, [pc, #132]	@ (8002810 <HAL_PWREx_ConfigSupply+0xb0>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002792:	491f      	ldr	r1, [pc, #124]	@ (8002810 <HAL_PWREx_ConfigSupply+0xb0>)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4313      	orrs	r3, r2
 8002798:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800279a:	f7ff fcbb 	bl	8002114 <HAL_GetTick>
 800279e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027a0:	e009      	b.n	80027b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027a2:	f7ff fcb7 	bl	8002114 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027b0:	d901      	bls.n	80027b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e028      	b.n	8002808 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027b6:	4b16      	ldr	r3, [pc, #88]	@ (8002810 <HAL_PWREx_ConfigSupply+0xb0>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027c2:	d1ee      	bne.n	80027a2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b1e      	cmp	r3, #30
 80027c8:	d008      	beq.n	80027dc <HAL_PWREx_ConfigSupply+0x7c>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80027ce:	d005      	beq.n	80027dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b1d      	cmp	r3, #29
 80027d4:	d002      	beq.n	80027dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b2d      	cmp	r3, #45	@ 0x2d
 80027da:	d114      	bne.n	8002806 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80027dc:	f7ff fc9a 	bl	8002114 <HAL_GetTick>
 80027e0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80027e2:	e009      	b.n	80027f8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027e4:	f7ff fc96 	bl	8002114 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027f2:	d901      	bls.n	80027f8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e007      	b.n	8002808 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80027f8:	4b05      	ldr	r3, [pc, #20]	@ (8002810 <HAL_PWREx_ConfigSupply+0xb0>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002804:	d1ee      	bne.n	80027e4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	58024800 	.word	0x58024800

08002814 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08c      	sub	sp, #48	@ 0x30
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d102      	bne.n	8002828 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	f000 bc48 	b.w	80030b8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8088 	beq.w	8002946 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002836:	4b99      	ldr	r3, [pc, #612]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800283e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002840:	4b96      	ldr	r3, [pc, #600]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002844:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002848:	2b10      	cmp	r3, #16
 800284a:	d007      	beq.n	800285c <HAL_RCC_OscConfig+0x48>
 800284c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800284e:	2b18      	cmp	r3, #24
 8002850:	d111      	bne.n	8002876 <HAL_RCC_OscConfig+0x62>
 8002852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d10c      	bne.n	8002876 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285c:	4b8f      	ldr	r3, [pc, #572]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d06d      	beq.n	8002944 <HAL_RCC_OscConfig+0x130>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d169      	bne.n	8002944 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	f000 bc21 	b.w	80030b8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800287e:	d106      	bne.n	800288e <HAL_RCC_OscConfig+0x7a>
 8002880:	4b86      	ldr	r3, [pc, #536]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a85      	ldr	r2, [pc, #532]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002886:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	e02e      	b.n	80028ec <HAL_RCC_OscConfig+0xd8>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x9c>
 8002896:	4b81      	ldr	r3, [pc, #516]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a80      	ldr	r2, [pc, #512]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 800289c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	4b7e      	ldr	r3, [pc, #504]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a7d      	ldr	r2, [pc, #500]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 80028a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e01d      	b.n	80028ec <HAL_RCC_OscConfig+0xd8>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0xc0>
 80028ba:	4b78      	ldr	r3, [pc, #480]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a77      	ldr	r2, [pc, #476]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 80028c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b75      	ldr	r3, [pc, #468]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a74      	ldr	r2, [pc, #464]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e00b      	b.n	80028ec <HAL_RCC_OscConfig+0xd8>
 80028d4:	4b71      	ldr	r3, [pc, #452]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a70      	ldr	r2, [pc, #448]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 80028da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	4b6e      	ldr	r3, [pc, #440]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a6d      	ldr	r2, [pc, #436]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 80028e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d013      	beq.n	800291c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7ff fc0e 	bl	8002114 <HAL_GetTick>
 80028f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028fc:	f7ff fc0a 	bl	8002114 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	@ 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e3d4      	b.n	80030b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800290e:	4b63      	ldr	r3, [pc, #396]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0xe8>
 800291a:	e014      	b.n	8002946 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7ff fbfa 	bl	8002114 <HAL_GetTick>
 8002920:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002924:	f7ff fbf6 	bl	8002114 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	@ 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e3c0      	b.n	80030b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002936:	4b59      	ldr	r3, [pc, #356]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x110>
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 80ca 	beq.w	8002ae8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002954:	4b51      	ldr	r3, [pc, #324]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800295c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800295e:	4b4f      	ldr	r3, [pc, #316]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002962:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d007      	beq.n	800297a <HAL_RCC_OscConfig+0x166>
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	2b18      	cmp	r3, #24
 800296e:	d156      	bne.n	8002a1e <HAL_RCC_OscConfig+0x20a>
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d151      	bne.n	8002a1e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800297a:	4b48      	ldr	r3, [pc, #288]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <HAL_RCC_OscConfig+0x17e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e392      	b.n	80030b8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002992:	4b42      	ldr	r3, [pc, #264]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 0219 	bic.w	r2, r3, #25
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	493f      	ldr	r1, [pc, #252]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a4:	f7ff fbb6 	bl	8002114 <HAL_GetTick>
 80029a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ac:	f7ff fbb2 	bl	8002114 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e37c      	b.n	80030b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029be:	4b37      	ldr	r3, [pc, #220]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ca:	f7ff fbd3 	bl	8002174 <HAL_GetREVID>
 80029ce:	4603      	mov	r3, r0
 80029d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d817      	bhi.n	8002a08 <HAL_RCC_OscConfig+0x1f4>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	2b40      	cmp	r3, #64	@ 0x40
 80029de:	d108      	bne.n	80029f2 <HAL_RCC_OscConfig+0x1de>
 80029e0:	4b2e      	ldr	r3, [pc, #184]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80029e8:	4a2c      	ldr	r2, [pc, #176]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 80029ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ee:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029f0:	e07a      	b.n	8002ae8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	031b      	lsls	r3, r3, #12
 8002a00:	4926      	ldr	r1, [pc, #152]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a06:	e06f      	b.n	8002ae8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a08:	4b24      	ldr	r3, [pc, #144]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	061b      	lsls	r3, r3, #24
 8002a16:	4921      	ldr	r1, [pc, #132]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a1c:	e064      	b.n	8002ae8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d047      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a26:	4b1d      	ldr	r3, [pc, #116]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 0219 	bic.w	r2, r3, #25
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	491a      	ldr	r1, [pc, #104]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7ff fb6c 	bl	8002114 <HAL_GetTick>
 8002a3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a40:	f7ff fb68 	bl	8002114 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e332      	b.n	80030b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a52:	4b12      	ldr	r3, [pc, #72]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5e:	f7ff fb89 	bl	8002174 <HAL_GetREVID>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d819      	bhi.n	8002aa0 <HAL_RCC_OscConfig+0x28c>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	2b40      	cmp	r3, #64	@ 0x40
 8002a72:	d108      	bne.n	8002a86 <HAL_RCC_OscConfig+0x272>
 8002a74:	4b09      	ldr	r3, [pc, #36]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002a7c:	4a07      	ldr	r2, [pc, #28]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a82:	6053      	str	r3, [r2, #4]
 8002a84:	e030      	b.n	8002ae8 <HAL_RCC_OscConfig+0x2d4>
 8002a86:	4b05      	ldr	r3, [pc, #20]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	031b      	lsls	r3, r3, #12
 8002a94:	4901      	ldr	r1, [pc, #4]	@ (8002a9c <HAL_RCC_OscConfig+0x288>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	604b      	str	r3, [r1, #4]
 8002a9a:	e025      	b.n	8002ae8 <HAL_RCC_OscConfig+0x2d4>
 8002a9c:	58024400 	.word	0x58024400
 8002aa0:	4b9a      	ldr	r3, [pc, #616]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	061b      	lsls	r3, r3, #24
 8002aae:	4997      	ldr	r1, [pc, #604]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
 8002ab4:	e018      	b.n	8002ae8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ab6:	4b95      	ldr	r3, [pc, #596]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a94      	ldr	r2, [pc, #592]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002abc:	f023 0301 	bic.w	r3, r3, #1
 8002ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac2:	f7ff fb27 	bl	8002114 <HAL_GetTick>
 8002ac6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aca:	f7ff fb23 	bl	8002114 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e2ed      	b.n	80030b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002adc:	4b8b      	ldr	r3, [pc, #556]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f0      	bne.n	8002aca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80a9 	beq.w	8002c48 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002af6:	4b85      	ldr	r3, [pc, #532]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002afe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b00:	4b82      	ldr	r3, [pc, #520]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b04:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d007      	beq.n	8002b1c <HAL_RCC_OscConfig+0x308>
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	2b18      	cmp	r3, #24
 8002b10:	d13a      	bne.n	8002b88 <HAL_RCC_OscConfig+0x374>
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d135      	bne.n	8002b88 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b1c:	4b7b      	ldr	r3, [pc, #492]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_RCC_OscConfig+0x320>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	2b80      	cmp	r3, #128	@ 0x80
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e2c1      	b.n	80030b8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b34:	f7ff fb1e 	bl	8002174 <HAL_GetREVID>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d817      	bhi.n	8002b72 <HAL_RCC_OscConfig+0x35e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d108      	bne.n	8002b5c <HAL_RCC_OscConfig+0x348>
 8002b4a:	4b70      	ldr	r3, [pc, #448]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002b52:	4a6e      	ldr	r2, [pc, #440]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002b54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b58:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b5a:	e075      	b.n	8002c48 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b5c:	4b6b      	ldr	r3, [pc, #428]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	069b      	lsls	r3, r3, #26
 8002b6a:	4968      	ldr	r1, [pc, #416]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b70:	e06a      	b.n	8002c48 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b72:	4b66      	ldr	r3, [pc, #408]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	061b      	lsls	r3, r3, #24
 8002b80:	4962      	ldr	r1, [pc, #392]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b86:	e05f      	b.n	8002c48 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d042      	beq.n	8002c16 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b90:	4b5e      	ldr	r3, [pc, #376]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a5d      	ldr	r2, [pc, #372]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9c:	f7ff faba 	bl	8002114 <HAL_GetTick>
 8002ba0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ba4:	f7ff fab6 	bl	8002114 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e280      	b.n	80030b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bb6:	4b55      	ldr	r3, [pc, #340]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bc2:	f7ff fad7 	bl	8002174 <HAL_GetREVID>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d817      	bhi.n	8002c00 <HAL_RCC_OscConfig+0x3ec>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	d108      	bne.n	8002bea <HAL_RCC_OscConfig+0x3d6>
 8002bd8:	4b4c      	ldr	r3, [pc, #304]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002be0:	4a4a      	ldr	r2, [pc, #296]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002be2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002be6:	6053      	str	r3, [r2, #4]
 8002be8:	e02e      	b.n	8002c48 <HAL_RCC_OscConfig+0x434>
 8002bea:	4b48      	ldr	r3, [pc, #288]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	069b      	lsls	r3, r3, #26
 8002bf8:	4944      	ldr	r1, [pc, #272]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	604b      	str	r3, [r1, #4]
 8002bfe:	e023      	b.n	8002c48 <HAL_RCC_OscConfig+0x434>
 8002c00:	4b42      	ldr	r3, [pc, #264]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	061b      	lsls	r3, r3, #24
 8002c0e:	493f      	ldr	r1, [pc, #252]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60cb      	str	r3, [r1, #12]
 8002c14:	e018      	b.n	8002c48 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c16:	4b3d      	ldr	r3, [pc, #244]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a3c      	ldr	r2, [pc, #240]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002c1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c22:	f7ff fa77 	bl	8002114 <HAL_GetTick>
 8002c26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002c2a:	f7ff fa73 	bl	8002114 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e23d      	b.n	80030b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c3c:	4b33      	ldr	r3, [pc, #204]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f0      	bne.n	8002c2a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d036      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d019      	beq.n	8002c90 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5c:	4b2b      	ldr	r3, [pc, #172]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002c5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c60:	4a2a      	ldr	r2, [pc, #168]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c68:	f7ff fa54 	bl	8002114 <HAL_GetTick>
 8002c6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c70:	f7ff fa50 	bl	8002114 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e21a      	b.n	80030b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c82:	4b22      	ldr	r3, [pc, #136]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0x45c>
 8002c8e:	e018      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c90:	4b1e      	ldr	r3, [pc, #120]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c94:	4a1d      	ldr	r2, [pc, #116]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002c96:	f023 0301 	bic.w	r3, r3, #1
 8002c9a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9c:	f7ff fa3a 	bl	8002114 <HAL_GetTick>
 8002ca0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca4:	f7ff fa36 	bl	8002114 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e200      	b.n	80030b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cb6:	4b15      	ldr	r3, [pc, #84]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0320 	and.w	r3, r3, #32
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d039      	beq.n	8002d42 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d01c      	beq.n	8002d10 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a0c      	ldr	r2, [pc, #48]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002cdc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ce0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ce2:	f7ff fa17 	bl	8002114 <HAL_GetTick>
 8002ce6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cea:	f7ff fa13 	bl	8002114 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e1dd      	b.n	80030b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cfc:	4b03      	ldr	r3, [pc, #12]	@ (8002d0c <HAL_RCC_OscConfig+0x4f8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x4d6>
 8002d08:	e01b      	b.n	8002d42 <HAL_RCC_OscConfig+0x52e>
 8002d0a:	bf00      	nop
 8002d0c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d10:	4b9b      	ldr	r3, [pc, #620]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a9a      	ldr	r2, [pc, #616]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002d16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d1c:	f7ff f9fa 	bl	8002114 <HAL_GetTick>
 8002d20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d24:	f7ff f9f6 	bl	8002114 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e1c0      	b.n	80030b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d36:	4b92      	ldr	r3, [pc, #584]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8081 	beq.w	8002e52 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d50:	4b8c      	ldr	r3, [pc, #560]	@ (8002f84 <HAL_RCC_OscConfig+0x770>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a8b      	ldr	r2, [pc, #556]	@ (8002f84 <HAL_RCC_OscConfig+0x770>)
 8002d56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d5c:	f7ff f9da 	bl	8002114 <HAL_GetTick>
 8002d60:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d64:	f7ff f9d6 	bl	8002114 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b64      	cmp	r3, #100	@ 0x64
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e1a0      	b.n	80030b8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d76:	4b83      	ldr	r3, [pc, #524]	@ (8002f84 <HAL_RCC_OscConfig+0x770>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d106      	bne.n	8002d98 <HAL_RCC_OscConfig+0x584>
 8002d8a:	4b7d      	ldr	r3, [pc, #500]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d8e:	4a7c      	ldr	r2, [pc, #496]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d96:	e02d      	b.n	8002df4 <HAL_RCC_OscConfig+0x5e0>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10c      	bne.n	8002dba <HAL_RCC_OscConfig+0x5a6>
 8002da0:	4b77      	ldr	r3, [pc, #476]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da4:	4a76      	ldr	r2, [pc, #472]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002da6:	f023 0301 	bic.w	r3, r3, #1
 8002daa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dac:	4b74      	ldr	r3, [pc, #464]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db0:	4a73      	ldr	r2, [pc, #460]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002db2:	f023 0304 	bic.w	r3, r3, #4
 8002db6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002db8:	e01c      	b.n	8002df4 <HAL_RCC_OscConfig+0x5e0>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b05      	cmp	r3, #5
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0x5c8>
 8002dc2:	4b6f      	ldr	r3, [pc, #444]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc6:	4a6e      	ldr	r2, [pc, #440]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002dc8:	f043 0304 	orr.w	r3, r3, #4
 8002dcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dce:	4b6c      	ldr	r3, [pc, #432]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd2:	4a6b      	ldr	r2, [pc, #428]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dda:	e00b      	b.n	8002df4 <HAL_RCC_OscConfig+0x5e0>
 8002ddc:	4b68      	ldr	r3, [pc, #416]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de0:	4a67      	ldr	r2, [pc, #412]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002de2:	f023 0301 	bic.w	r3, r3, #1
 8002de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002de8:	4b65      	ldr	r3, [pc, #404]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dec:	4a64      	ldr	r2, [pc, #400]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002dee:	f023 0304 	bic.w	r3, r3, #4
 8002df2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d015      	beq.n	8002e28 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfc:	f7ff f98a 	bl	8002114 <HAL_GetTick>
 8002e00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e02:	e00a      	b.n	8002e1a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e04:	f7ff f986 	bl	8002114 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e14e      	b.n	80030b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e1a:	4b59      	ldr	r3, [pc, #356]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0ee      	beq.n	8002e04 <HAL_RCC_OscConfig+0x5f0>
 8002e26:	e014      	b.n	8002e52 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e28:	f7ff f974 	bl	8002114 <HAL_GetTick>
 8002e2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e2e:	e00a      	b.n	8002e46 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e30:	f7ff f970 	bl	8002114 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e138      	b.n	80030b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e46:	4b4e      	ldr	r3, [pc, #312]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1ee      	bne.n	8002e30 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 812d 	beq.w	80030b6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e5c:	4b48      	ldr	r3, [pc, #288]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e64:	2b18      	cmp	r3, #24
 8002e66:	f000 80bd 	beq.w	8002fe4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	f040 809e 	bne.w	8002fb0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e74:	4b42      	ldr	r3, [pc, #264]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a41      	ldr	r2, [pc, #260]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002e7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7ff f948 	bl	8002114 <HAL_GetTick>
 8002e84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e88:	f7ff f944 	bl	8002114 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e10e      	b.n	80030b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e9a:	4b39      	ldr	r3, [pc, #228]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea6:	4b36      	ldr	r3, [pc, #216]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002ea8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002eaa:	4b37      	ldr	r3, [pc, #220]	@ (8002f88 <HAL_RCC_OscConfig+0x774>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002eb6:	0112      	lsls	r2, r2, #4
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	4931      	ldr	r1, [pc, #196]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	628b      	str	r3, [r1, #40]	@ 0x28
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	025b      	lsls	r3, r3, #9
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eda:	3b01      	subs	r3, #1
 8002edc:	041b      	lsls	r3, r3, #16
 8002ede:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	061b      	lsls	r3, r3, #24
 8002eec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002ef0:	4923      	ldr	r1, [pc, #140]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002ef6:	4b22      	ldr	r3, [pc, #136]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efa:	4a21      	ldr	r2, [pc, #132]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f02:	4b1f      	ldr	r3, [pc, #124]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002f04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f06:	4b21      	ldr	r3, [pc, #132]	@ (8002f8c <HAL_RCC_OscConfig+0x778>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f0e:	00d2      	lsls	r2, r2, #3
 8002f10:	491b      	ldr	r1, [pc, #108]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f16:	4b1a      	ldr	r3, [pc, #104]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1a:	f023 020c 	bic.w	r2, r3, #12
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	4917      	ldr	r1, [pc, #92]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f28:	4b15      	ldr	r3, [pc, #84]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2c:	f023 0202 	bic.w	r2, r3, #2
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f34:	4912      	ldr	r1, [pc, #72]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f3a:	4b11      	ldr	r3, [pc, #68]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3e:	4a10      	ldr	r2, [pc, #64]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f46:	4b0e      	ldr	r3, [pc, #56]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4a:	4a0d      	ldr	r2, [pc, #52]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f52:	4b0b      	ldr	r3, [pc, #44]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f56:	4a0a      	ldr	r2, [pc, #40]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002f58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002f5e:	4b08      	ldr	r3, [pc, #32]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f62:	4a07      	ldr	r2, [pc, #28]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f6a:	4b05      	ldr	r3, [pc, #20]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a04      	ldr	r2, [pc, #16]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002f70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f76:	f7ff f8cd 	bl	8002114 <HAL_GetTick>
 8002f7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f7c:	e011      	b.n	8002fa2 <HAL_RCC_OscConfig+0x78e>
 8002f7e:	bf00      	nop
 8002f80:	58024400 	.word	0x58024400
 8002f84:	58024800 	.word	0x58024800
 8002f88:	fffffc0c 	.word	0xfffffc0c
 8002f8c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f90:	f7ff f8c0 	bl	8002114 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e08a      	b.n	80030b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fa2:	4b47      	ldr	r3, [pc, #284]	@ (80030c0 <HAL_RCC_OscConfig+0x8ac>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0x77c>
 8002fae:	e082      	b.n	80030b6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb0:	4b43      	ldr	r3, [pc, #268]	@ (80030c0 <HAL_RCC_OscConfig+0x8ac>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a42      	ldr	r2, [pc, #264]	@ (80030c0 <HAL_RCC_OscConfig+0x8ac>)
 8002fb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbc:	f7ff f8aa 	bl	8002114 <HAL_GetTick>
 8002fc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc4:	f7ff f8a6 	bl	8002114 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e070      	b.n	80030b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fd6:	4b3a      	ldr	r3, [pc, #232]	@ (80030c0 <HAL_RCC_OscConfig+0x8ac>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x7b0>
 8002fe2:	e068      	b.n	80030b6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002fe4:	4b36      	ldr	r3, [pc, #216]	@ (80030c0 <HAL_RCC_OscConfig+0x8ac>)
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002fea:	4b35      	ldr	r3, [pc, #212]	@ (80030c0 <HAL_RCC_OscConfig+0x8ac>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d031      	beq.n	800305c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f003 0203 	and.w	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003002:	429a      	cmp	r2, r3
 8003004:	d12a      	bne.n	800305c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	091b      	lsrs	r3, r3, #4
 800300a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d122      	bne.n	800305c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003020:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003022:	429a      	cmp	r2, r3
 8003024:	d11a      	bne.n	800305c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	0a5b      	lsrs	r3, r3, #9
 800302a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003032:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d111      	bne.n	800305c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	0c1b      	lsrs	r3, r3, #16
 800303c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003044:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003046:	429a      	cmp	r2, r3
 8003048:	d108      	bne.n	800305c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	0e1b      	lsrs	r3, r3, #24
 800304e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003056:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e02b      	b.n	80030b8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003060:	4b17      	ldr	r3, [pc, #92]	@ (80030c0 <HAL_RCC_OscConfig+0x8ac>)
 8003062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003064:	08db      	lsrs	r3, r3, #3
 8003066:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800306a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	429a      	cmp	r2, r3
 8003074:	d01f      	beq.n	80030b6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003076:	4b12      	ldr	r3, [pc, #72]	@ (80030c0 <HAL_RCC_OscConfig+0x8ac>)
 8003078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307a:	4a11      	ldr	r2, [pc, #68]	@ (80030c0 <HAL_RCC_OscConfig+0x8ac>)
 800307c:	f023 0301 	bic.w	r3, r3, #1
 8003080:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003082:	f7ff f847 	bl	8002114 <HAL_GetTick>
 8003086:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003088:	bf00      	nop
 800308a:	f7ff f843 	bl	8002114 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	4293      	cmp	r3, r2
 8003094:	d0f9      	beq.n	800308a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003096:	4b0a      	ldr	r3, [pc, #40]	@ (80030c0 <HAL_RCC_OscConfig+0x8ac>)
 8003098:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800309a:	4b0a      	ldr	r3, [pc, #40]	@ (80030c4 <HAL_RCC_OscConfig+0x8b0>)
 800309c:	4013      	ands	r3, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80030a2:	00d2      	lsls	r2, r2, #3
 80030a4:	4906      	ldr	r1, [pc, #24]	@ (80030c0 <HAL_RCC_OscConfig+0x8ac>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80030aa:	4b05      	ldr	r3, [pc, #20]	@ (80030c0 <HAL_RCC_OscConfig+0x8ac>)
 80030ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ae:	4a04      	ldr	r2, [pc, #16]	@ (80030c0 <HAL_RCC_OscConfig+0x8ac>)
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3730      	adds	r7, #48	@ 0x30
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	58024400 	.word	0x58024400
 80030c4:	ffff0007 	.word	0xffff0007

080030c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e19c      	b.n	8003416 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030dc:	4b8a      	ldr	r3, [pc, #552]	@ (8003308 <HAL_RCC_ClockConfig+0x240>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d910      	bls.n	800310c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b87      	ldr	r3, [pc, #540]	@ (8003308 <HAL_RCC_ClockConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 020f 	bic.w	r2, r3, #15
 80030f2:	4985      	ldr	r1, [pc, #532]	@ (8003308 <HAL_RCC_ClockConfig+0x240>)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b83      	ldr	r3, [pc, #524]	@ (8003308 <HAL_RCC_ClockConfig+0x240>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e184      	b.n	8003416 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d010      	beq.n	800313a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	4b7b      	ldr	r3, [pc, #492]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003124:	429a      	cmp	r2, r3
 8003126:	d908      	bls.n	800313a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003128:	4b78      	ldr	r3, [pc, #480]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	4975      	ldr	r1, [pc, #468]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 8003136:	4313      	orrs	r3, r2
 8003138:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d010      	beq.n	8003168 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	4b70      	ldr	r3, [pc, #448]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003152:	429a      	cmp	r2, r3
 8003154:	d908      	bls.n	8003168 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003156:	4b6d      	ldr	r3, [pc, #436]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	496a      	ldr	r1, [pc, #424]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 8003164:	4313      	orrs	r3, r2
 8003166:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0310 	and.w	r3, r3, #16
 8003170:	2b00      	cmp	r3, #0
 8003172:	d010      	beq.n	8003196 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699a      	ldr	r2, [r3, #24]
 8003178:	4b64      	ldr	r3, [pc, #400]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003180:	429a      	cmp	r2, r3
 8003182:	d908      	bls.n	8003196 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003184:	4b61      	ldr	r3, [pc, #388]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	495e      	ldr	r1, [pc, #376]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 8003192:	4313      	orrs	r3, r2
 8003194:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d010      	beq.n	80031c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69da      	ldr	r2, [r3, #28]
 80031a6:	4b59      	ldr	r3, [pc, #356]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d908      	bls.n	80031c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80031b2:	4b56      	ldr	r3, [pc, #344]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	4953      	ldr	r1, [pc, #332]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d010      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	4b4d      	ldr	r3, [pc, #308]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	429a      	cmp	r2, r3
 80031de:	d908      	bls.n	80031f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e0:	4b4a      	ldr	r3, [pc, #296]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	f023 020f 	bic.w	r2, r3, #15
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4947      	ldr	r1, [pc, #284]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d055      	beq.n	80032aa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80031fe:	4b43      	ldr	r3, [pc, #268]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	4940      	ldr	r1, [pc, #256]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 800320c:	4313      	orrs	r3, r2
 800320e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d107      	bne.n	8003228 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003218:	4b3c      	ldr	r3, [pc, #240]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d121      	bne.n	8003268 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0f6      	b.n	8003416 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b03      	cmp	r3, #3
 800322e:	d107      	bne.n	8003240 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003230:	4b36      	ldr	r3, [pc, #216]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d115      	bne.n	8003268 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0ea      	b.n	8003416 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d107      	bne.n	8003258 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003248:	4b30      	ldr	r3, [pc, #192]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d109      	bne.n	8003268 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0de      	b.n	8003416 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003258:	4b2c      	ldr	r3, [pc, #176]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0d6      	b.n	8003416 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003268:	4b28      	ldr	r3, [pc, #160]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	f023 0207 	bic.w	r2, r3, #7
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	4925      	ldr	r1, [pc, #148]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 8003276:	4313      	orrs	r3, r2
 8003278:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800327a:	f7fe ff4b 	bl	8002114 <HAL_GetTick>
 800327e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003280:	e00a      	b.n	8003298 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003282:	f7fe ff47 	bl	8002114 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003290:	4293      	cmp	r3, r2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e0be      	b.n	8003416 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003298:	4b1c      	ldr	r3, [pc, #112]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d1eb      	bne.n	8003282 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d010      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	4b14      	ldr	r3, [pc, #80]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d208      	bcs.n	80032d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c6:	4b11      	ldr	r3, [pc, #68]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f023 020f 	bic.w	r2, r3, #15
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	490e      	ldr	r1, [pc, #56]	@ (800330c <HAL_RCC_ClockConfig+0x244>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003308 <HAL_RCC_ClockConfig+0x240>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d214      	bcs.n	8003310 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	4b08      	ldr	r3, [pc, #32]	@ (8003308 <HAL_RCC_ClockConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 020f 	bic.w	r2, r3, #15
 80032ee:	4906      	ldr	r1, [pc, #24]	@ (8003308 <HAL_RCC_ClockConfig+0x240>)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f6:	4b04      	ldr	r3, [pc, #16]	@ (8003308 <HAL_RCC_ClockConfig+0x240>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d005      	beq.n	8003310 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e086      	b.n	8003416 <HAL_RCC_ClockConfig+0x34e>
 8003308:	52002000 	.word	0x52002000
 800330c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d010      	beq.n	800333e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	4b3f      	ldr	r3, [pc, #252]	@ (8003420 <HAL_RCC_ClockConfig+0x358>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003328:	429a      	cmp	r2, r3
 800332a:	d208      	bcs.n	800333e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800332c:	4b3c      	ldr	r3, [pc, #240]	@ (8003420 <HAL_RCC_ClockConfig+0x358>)
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	4939      	ldr	r1, [pc, #228]	@ (8003420 <HAL_RCC_ClockConfig+0x358>)
 800333a:	4313      	orrs	r3, r2
 800333c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d010      	beq.n	800336c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	4b34      	ldr	r3, [pc, #208]	@ (8003420 <HAL_RCC_ClockConfig+0x358>)
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003356:	429a      	cmp	r2, r3
 8003358:	d208      	bcs.n	800336c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800335a:	4b31      	ldr	r3, [pc, #196]	@ (8003420 <HAL_RCC_ClockConfig+0x358>)
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	492e      	ldr	r1, [pc, #184]	@ (8003420 <HAL_RCC_ClockConfig+0x358>)
 8003368:	4313      	orrs	r3, r2
 800336a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b00      	cmp	r3, #0
 8003376:	d010      	beq.n	800339a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699a      	ldr	r2, [r3, #24]
 800337c:	4b28      	ldr	r3, [pc, #160]	@ (8003420 <HAL_RCC_ClockConfig+0x358>)
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003384:	429a      	cmp	r2, r3
 8003386:	d208      	bcs.n	800339a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003388:	4b25      	ldr	r3, [pc, #148]	@ (8003420 <HAL_RCC_ClockConfig+0x358>)
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	4922      	ldr	r1, [pc, #136]	@ (8003420 <HAL_RCC_ClockConfig+0x358>)
 8003396:	4313      	orrs	r3, r2
 8003398:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0320 	and.w	r3, r3, #32
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d010      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69da      	ldr	r2, [r3, #28]
 80033aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003420 <HAL_RCC_ClockConfig+0x358>)
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d208      	bcs.n	80033c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80033b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003420 <HAL_RCC_ClockConfig+0x358>)
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	4917      	ldr	r1, [pc, #92]	@ (8003420 <HAL_RCC_ClockConfig+0x358>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033c8:	f000 f89e 	bl	8003508 <HAL_RCC_GetSysClockFreq>
 80033cc:	4602      	mov	r2, r0
 80033ce:	4b14      	ldr	r3, [pc, #80]	@ (8003420 <HAL_RCC_ClockConfig+0x358>)
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	0a1b      	lsrs	r3, r3, #8
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	4912      	ldr	r1, [pc, #72]	@ (8003424 <HAL_RCC_ClockConfig+0x35c>)
 80033da:	5ccb      	ldrb	r3, [r1, r3]
 80033dc:	f003 031f 	and.w	r3, r3, #31
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
 80033e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003420 <HAL_RCC_ClockConfig+0x358>)
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	4a0d      	ldr	r2, [pc, #52]	@ (8003424 <HAL_RCC_ClockConfig+0x35c>)
 80033f0:	5cd3      	ldrb	r3, [r2, r3]
 80033f2:	f003 031f 	and.w	r3, r3, #31
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	fa22 f303 	lsr.w	r3, r2, r3
 80033fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003428 <HAL_RCC_ClockConfig+0x360>)
 80033fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003400:	4a0a      	ldr	r2, [pc, #40]	@ (800342c <HAL_RCC_ClockConfig+0x364>)
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003406:	4b0a      	ldr	r3, [pc, #40]	@ (8003430 <HAL_RCC_ClockConfig+0x368>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7fe fcca 	bl	8001da4 <HAL_InitTick>
 8003410:	4603      	mov	r3, r0
 8003412:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003414:	7bfb      	ldrb	r3, [r7, #15]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	58024400 	.word	0x58024400
 8003424:	0800e468 	.word	0x0800e468
 8003428:	24000004 	.word	0x24000004
 800342c:	24000000 	.word	0x24000000
 8003430:	24000008 	.word	0x24000008

08003434 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08c      	sub	sp, #48	@ 0x30
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d12a      	bne.n	800349c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003446:	4b2d      	ldr	r3, [pc, #180]	@ (80034fc <HAL_RCC_MCOConfig+0xc8>)
 8003448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800344c:	4a2b      	ldr	r2, [pc, #172]	@ (80034fc <HAL_RCC_MCOConfig+0xc8>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003456:	4b29      	ldr	r3, [pc, #164]	@ (80034fc <HAL_RCC_MCOConfig+0xc8>)
 8003458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003464:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346a:	2302      	movs	r3, #2
 800346c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800346e:	2303      	movs	r3, #3
 8003470:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003476:	2300      	movs	r3, #0
 8003478:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800347a:	f107 031c 	add.w	r3, r7, #28
 800347e:	4619      	mov	r1, r3
 8003480:	481f      	ldr	r0, [pc, #124]	@ (8003500 <HAL_RCC_MCOConfig+0xcc>)
 8003482:	f7fe ff75 	bl	8002370 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003486:	4b1d      	ldr	r3, [pc, #116]	@ (80034fc <HAL_RCC_MCOConfig+0xc8>)
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800348e:	68b9      	ldr	r1, [r7, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	430b      	orrs	r3, r1
 8003494:	4919      	ldr	r1, [pc, #100]	@ (80034fc <HAL_RCC_MCOConfig+0xc8>)
 8003496:	4313      	orrs	r3, r2
 8003498:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800349a:	e02a      	b.n	80034f2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800349c:	4b17      	ldr	r3, [pc, #92]	@ (80034fc <HAL_RCC_MCOConfig+0xc8>)
 800349e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034a2:	4a16      	ldr	r2, [pc, #88]	@ (80034fc <HAL_RCC_MCOConfig+0xc8>)
 80034a4:	f043 0304 	orr.w	r3, r3, #4
 80034a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034ac:	4b13      	ldr	r3, [pc, #76]	@ (80034fc <HAL_RCC_MCOConfig+0xc8>)
 80034ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80034ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c0:	2302      	movs	r3, #2
 80034c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c4:	2303      	movs	r3, #3
 80034c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80034cc:	2300      	movs	r3, #0
 80034ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80034d0:	f107 031c 	add.w	r3, r7, #28
 80034d4:	4619      	mov	r1, r3
 80034d6:	480b      	ldr	r0, [pc, #44]	@ (8003504 <HAL_RCC_MCOConfig+0xd0>)
 80034d8:	f7fe ff4a 	bl	8002370 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80034dc:	4b07      	ldr	r3, [pc, #28]	@ (80034fc <HAL_RCC_MCOConfig+0xc8>)
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	01d9      	lsls	r1, r3, #7
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	430b      	orrs	r3, r1
 80034ec:	4903      	ldr	r1, [pc, #12]	@ (80034fc <HAL_RCC_MCOConfig+0xc8>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	610b      	str	r3, [r1, #16]
}
 80034f2:	bf00      	nop
 80034f4:	3730      	adds	r7, #48	@ 0x30
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	58024400 	.word	0x58024400
 8003500:	58020000 	.word	0x58020000
 8003504:	58020800 	.word	0x58020800

08003508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003508:	b480      	push	{r7}
 800350a:	b089      	sub	sp, #36	@ 0x24
 800350c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800350e:	4bb3      	ldr	r3, [pc, #716]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003516:	2b18      	cmp	r3, #24
 8003518:	f200 8155 	bhi.w	80037c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800351c:	a201      	add	r2, pc, #4	@ (adr r2, 8003524 <HAL_RCC_GetSysClockFreq+0x1c>)
 800351e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003522:	bf00      	nop
 8003524:	08003589 	.word	0x08003589
 8003528:	080037c7 	.word	0x080037c7
 800352c:	080037c7 	.word	0x080037c7
 8003530:	080037c7 	.word	0x080037c7
 8003534:	080037c7 	.word	0x080037c7
 8003538:	080037c7 	.word	0x080037c7
 800353c:	080037c7 	.word	0x080037c7
 8003540:	080037c7 	.word	0x080037c7
 8003544:	080035af 	.word	0x080035af
 8003548:	080037c7 	.word	0x080037c7
 800354c:	080037c7 	.word	0x080037c7
 8003550:	080037c7 	.word	0x080037c7
 8003554:	080037c7 	.word	0x080037c7
 8003558:	080037c7 	.word	0x080037c7
 800355c:	080037c7 	.word	0x080037c7
 8003560:	080037c7 	.word	0x080037c7
 8003564:	080035b5 	.word	0x080035b5
 8003568:	080037c7 	.word	0x080037c7
 800356c:	080037c7 	.word	0x080037c7
 8003570:	080037c7 	.word	0x080037c7
 8003574:	080037c7 	.word	0x080037c7
 8003578:	080037c7 	.word	0x080037c7
 800357c:	080037c7 	.word	0x080037c7
 8003580:	080037c7 	.word	0x080037c7
 8003584:	080035bb 	.word	0x080035bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003588:	4b94      	ldr	r3, [pc, #592]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b00      	cmp	r3, #0
 8003592:	d009      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003594:	4b91      	ldr	r3, [pc, #580]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	08db      	lsrs	r3, r3, #3
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	4a90      	ldr	r2, [pc, #576]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
 80035a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80035a6:	e111      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80035a8:	4b8d      	ldr	r3, [pc, #564]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035aa:	61bb      	str	r3, [r7, #24]
      break;
 80035ac:	e10e      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80035ae:	4b8d      	ldr	r3, [pc, #564]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035b0:	61bb      	str	r3, [r7, #24]
      break;
 80035b2:	e10b      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80035b4:	4b8c      	ldr	r3, [pc, #560]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80035b6:	61bb      	str	r3, [r7, #24]
      break;
 80035b8:	e108      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80035ba:	4b88      	ldr	r3, [pc, #544]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80035c4:	4b85      	ldr	r3, [pc, #532]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c8:	091b      	lsrs	r3, r3, #4
 80035ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035ce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80035d0:	4b82      	ldr	r3, [pc, #520]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80035da:	4b80      	ldr	r3, [pc, #512]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035de:	08db      	lsrs	r3, r3, #3
 80035e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	fb02 f303 	mul.w	r3, r2, r3
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035f2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 80e1 	beq.w	80037c0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b02      	cmp	r3, #2
 8003602:	f000 8083 	beq.w	800370c <HAL_RCC_GetSysClockFreq+0x204>
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b02      	cmp	r3, #2
 800360a:	f200 80a1 	bhi.w	8003750 <HAL_RCC_GetSysClockFreq+0x248>
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_RCC_GetSysClockFreq+0x114>
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d056      	beq.n	80036c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800361a:	e099      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800361c:	4b6f      	ldr	r3, [pc, #444]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b00      	cmp	r3, #0
 8003626:	d02d      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003628:	4b6c      	ldr	r3, [pc, #432]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	08db      	lsrs	r3, r3, #3
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	4a6b      	ldr	r2, [pc, #428]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003634:	fa22 f303 	lsr.w	r3, r2, r3
 8003638:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	ee07 3a90 	vmov	s15, r3
 8003640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	ee07 3a90 	vmov	s15, r3
 800364a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800364e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003652:	4b62      	ldr	r3, [pc, #392]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365a:	ee07 3a90 	vmov	s15, r3
 800365e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003662:	ed97 6a02 	vldr	s12, [r7, #8]
 8003666:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80037ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800366a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800366e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800367a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800367e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003682:	e087      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	ee07 3a90 	vmov	s15, r3
 800368a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800368e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80037f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003696:	4b51      	ldr	r3, [pc, #324]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800369e:	ee07 3a90 	vmov	s15, r3
 80036a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036aa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80037ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80036ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036c6:	e065      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	ee07 3a90 	vmov	s15, r3
 80036ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80037f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036da:	4b40      	ldr	r3, [pc, #256]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e2:	ee07 3a90 	vmov	s15, r3
 80036e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ee:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80037ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80036f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003706:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800370a:	e043      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	ee07 3a90 	vmov	s15, r3
 8003712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003716:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80037f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800371a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800371e:	4b2f      	ldr	r3, [pc, #188]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800372e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003732:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80037ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8003736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800373a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800373e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800374a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800374e:	e021      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	ee07 3a90 	vmov	s15, r3
 8003756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800375a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80037f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800375e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003762:	4b1e      	ldr	r3, [pc, #120]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800376a:	ee07 3a90 	vmov	s15, r3
 800376e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003772:	ed97 6a02 	vldr	s12, [r7, #8]
 8003776:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80037ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800377a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800377e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800378a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003792:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003794:	4b11      	ldr	r3, [pc, #68]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003798:	0a5b      	lsrs	r3, r3, #9
 800379a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800379e:	3301      	adds	r3, #1
 80037a0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	ee07 3a90 	vmov	s15, r3
 80037a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80037b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037b8:	ee17 3a90 	vmov	r3, s15
 80037bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80037be:	e005      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	61bb      	str	r3, [r7, #24]
      break;
 80037c4:	e002      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80037c6:	4b07      	ldr	r3, [pc, #28]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037c8:	61bb      	str	r3, [r7, #24]
      break;
 80037ca:	bf00      	nop
  }

  return sysclockfreq;
 80037cc:	69bb      	ldr	r3, [r7, #24]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3724      	adds	r7, #36	@ 0x24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	58024400 	.word	0x58024400
 80037e0:	03d09000 	.word	0x03d09000
 80037e4:	003d0900 	.word	0x003d0900
 80037e8:	017d7840 	.word	0x017d7840
 80037ec:	46000000 	.word	0x46000000
 80037f0:	4c742400 	.word	0x4c742400
 80037f4:	4a742400 	.word	0x4a742400
 80037f8:	4bbebc20 	.word	0x4bbebc20

080037fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003802:	f7ff fe81 	bl	8003508 <HAL_RCC_GetSysClockFreq>
 8003806:	4602      	mov	r2, r0
 8003808:	4b10      	ldr	r3, [pc, #64]	@ (800384c <HAL_RCC_GetHCLKFreq+0x50>)
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	0a1b      	lsrs	r3, r3, #8
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	490f      	ldr	r1, [pc, #60]	@ (8003850 <HAL_RCC_GetHCLKFreq+0x54>)
 8003814:	5ccb      	ldrb	r3, [r1, r3]
 8003816:	f003 031f 	and.w	r3, r3, #31
 800381a:	fa22 f303 	lsr.w	r3, r2, r3
 800381e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003820:	4b0a      	ldr	r3, [pc, #40]	@ (800384c <HAL_RCC_GetHCLKFreq+0x50>)
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	4a09      	ldr	r2, [pc, #36]	@ (8003850 <HAL_RCC_GetHCLKFreq+0x54>)
 800382a:	5cd3      	ldrb	r3, [r2, r3]
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	fa22 f303 	lsr.w	r3, r2, r3
 8003836:	4a07      	ldr	r2, [pc, #28]	@ (8003854 <HAL_RCC_GetHCLKFreq+0x58>)
 8003838:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800383a:	4a07      	ldr	r2, [pc, #28]	@ (8003858 <HAL_RCC_GetHCLKFreq+0x5c>)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003840:	4b04      	ldr	r3, [pc, #16]	@ (8003854 <HAL_RCC_GetHCLKFreq+0x58>)
 8003842:	681b      	ldr	r3, [r3, #0]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	58024400 	.word	0x58024400
 8003850:	0800e468 	.word	0x0800e468
 8003854:	24000004 	.word	0x24000004
 8003858:	24000000 	.word	0x24000000

0800385c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003860:	f7ff ffcc 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 8003864:	4602      	mov	r2, r0
 8003866:	4b06      	ldr	r3, [pc, #24]	@ (8003880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	091b      	lsrs	r3, r3, #4
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	4904      	ldr	r1, [pc, #16]	@ (8003884 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003872:	5ccb      	ldrb	r3, [r1, r3]
 8003874:	f003 031f 	and.w	r3, r3, #31
 8003878:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800387c:	4618      	mov	r0, r3
 800387e:	bd80      	pop	{r7, pc}
 8003880:	58024400 	.word	0x58024400
 8003884:	0800e468 	.word	0x0800e468

08003888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800388c:	f7ff ffb6 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 8003890:	4602      	mov	r2, r0
 8003892:	4b06      	ldr	r3, [pc, #24]	@ (80038ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	0a1b      	lsrs	r3, r3, #8
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	4904      	ldr	r1, [pc, #16]	@ (80038b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800389e:	5ccb      	ldrb	r3, [r1, r3]
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	58024400 	.word	0x58024400
 80038b0:	0800e468 	.word	0x0800e468

080038b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	223f      	movs	r2, #63	@ 0x3f
 80038c2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003930 <HAL_RCC_GetClockConfig+0x7c>)
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	f003 0207 	and.w	r2, r3, #7
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80038d0:	4b17      	ldr	r3, [pc, #92]	@ (8003930 <HAL_RCC_GetClockConfig+0x7c>)
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80038dc:	4b14      	ldr	r3, [pc, #80]	@ (8003930 <HAL_RCC_GetClockConfig+0x7c>)
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	f003 020f 	and.w	r2, r3, #15
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80038e8:	4b11      	ldr	r3, [pc, #68]	@ (8003930 <HAL_RCC_GetClockConfig+0x7c>)
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80038f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003930 <HAL_RCC_GetClockConfig+0x7c>)
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003900:	4b0b      	ldr	r3, [pc, #44]	@ (8003930 <HAL_RCC_GetClockConfig+0x7c>)
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800390c:	4b08      	ldr	r3, [pc, #32]	@ (8003930 <HAL_RCC_GetClockConfig+0x7c>)
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003918:	4b06      	ldr	r3, [pc, #24]	@ (8003934 <HAL_RCC_GetClockConfig+0x80>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 020f 	and.w	r2, r3, #15
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	601a      	str	r2, [r3, #0]
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	58024400 	.word	0x58024400
 8003934:	52002000 	.word	0x52002000

08003938 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800393c:	b0cc      	sub	sp, #304	@ 0x130
 800393e:	af00      	add	r7, sp, #0
 8003940:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003944:	2300      	movs	r3, #0
 8003946:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800394a:	2300      	movs	r3, #0
 800394c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003950:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003958:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800395c:	2500      	movs	r5, #0
 800395e:	ea54 0305 	orrs.w	r3, r4, r5
 8003962:	d049      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003964:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003968:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800396a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800396e:	d02f      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003970:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003974:	d828      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003976:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800397a:	d01a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800397c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003980:	d822      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003986:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800398a:	d007      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800398c:	e01c      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800398e:	4bb8      	ldr	r3, [pc, #736]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003992:	4ab7      	ldr	r2, [pc, #732]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003998:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800399a:	e01a      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800399c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039a0:	3308      	adds	r3, #8
 80039a2:	2102      	movs	r1, #2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f001 fccf 	bl	8005348 <RCCEx_PLL2_Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039b0:	e00f      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039b6:	3328      	adds	r3, #40	@ 0x28
 80039b8:	2102      	movs	r1, #2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f001 fd76 	bl	80054ac <RCCEx_PLL3_Config>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039c6:	e004      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80039ce:	e000      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80039d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10a      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80039da:	4ba5      	ldr	r3, [pc, #660]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80039e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039e8:	4aa1      	ldr	r2, [pc, #644]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039ea:	430b      	orrs	r3, r1
 80039ec:	6513      	str	r3, [r2, #80]	@ 0x50
 80039ee:	e003      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039f4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a00:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003a04:	f04f 0900 	mov.w	r9, #0
 8003a08:	ea58 0309 	orrs.w	r3, r8, r9
 8003a0c:	d047      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003a0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d82a      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003a18:	a201      	add	r2, pc, #4	@ (adr r2, 8003a20 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1e:	bf00      	nop
 8003a20:	08003a35 	.word	0x08003a35
 8003a24:	08003a43 	.word	0x08003a43
 8003a28:	08003a59 	.word	0x08003a59
 8003a2c:	08003a77 	.word	0x08003a77
 8003a30:	08003a77 	.word	0x08003a77
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a34:	4b8e      	ldr	r3, [pc, #568]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a38:	4a8d      	ldr	r2, [pc, #564]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a40:	e01a      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a46:	3308      	adds	r3, #8
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f001 fc7c 	bl	8005348 <RCCEx_PLL2_Config>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a56:	e00f      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a5c:	3328      	adds	r3, #40	@ 0x28
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4618      	mov	r0, r3
 8003a62:	f001 fd23 	bl	80054ac <RCCEx_PLL3_Config>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a6c:	e004      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003a74:	e000      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003a76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a78:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10a      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a80:	4b7b      	ldr	r3, [pc, #492]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a84:	f023 0107 	bic.w	r1, r3, #7
 8003a88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a8e:	4a78      	ldr	r2, [pc, #480]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a90:	430b      	orrs	r3, r1
 8003a92:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a94:	e003      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a96:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a9a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003a9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003aaa:	f04f 0b00 	mov.w	fp, #0
 8003aae:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ab2:	d04c      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003ab4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003abe:	d030      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003ac0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ac4:	d829      	bhi.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ac6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ac8:	d02d      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003aca:	2bc0      	cmp	r3, #192	@ 0xc0
 8003acc:	d825      	bhi.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ace:	2b80      	cmp	r3, #128	@ 0x80
 8003ad0:	d018      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003ad2:	2b80      	cmp	r3, #128	@ 0x80
 8003ad4:	d821      	bhi.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003ada:	2b40      	cmp	r3, #64	@ 0x40
 8003adc:	d007      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003ade:	e01c      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ae0:	4b63      	ldr	r3, [pc, #396]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae4:	4a62      	ldr	r2, [pc, #392]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003aec:	e01c      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003aee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003af2:	3308      	adds	r3, #8
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f001 fc26 	bl	8005348 <RCCEx_PLL2_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b02:	e011      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b08:	3328      	adds	r3, #40	@ 0x28
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f001 fccd 	bl	80054ac <RCCEx_PLL3_Config>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b18:	e006      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003b20:	e002      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b22:	bf00      	nop
 8003b24:	e000      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b28:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003b30:	4b4f      	ldr	r3, [pc, #316]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b34:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003b38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3e:	4a4c      	ldr	r2, [pc, #304]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b40:	430b      	orrs	r3, r1
 8003b42:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b44:	e003      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b4a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b56:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003b5a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003b64:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	d053      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003b6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b76:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b7a:	d035      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003b7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b80:	d82e      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b82:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003b86:	d031      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003b88:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003b8c:	d828      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b92:	d01a      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003b94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b98:	d822      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003b9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ba2:	d007      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003ba4:	e01c      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ba6:	4b32      	ldr	r3, [pc, #200]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003baa:	4a31      	ldr	r2, [pc, #196]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bb2:	e01c      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bb8:	3308      	adds	r3, #8
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f001 fbc3 	bl	8005348 <RCCEx_PLL2_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003bc8:	e011      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bce:	3328      	adds	r3, #40	@ 0x28
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f001 fc6a 	bl	80054ac <RCCEx_PLL3_Config>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bde:	e006      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003be6:	e002      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003be8:	bf00      	nop
 8003bea:	e000      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10b      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfa:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003bfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c06:	4a1a      	ldr	r2, [pc, #104]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c0c:	e003      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c12:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003c16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003c22:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003c26:	2300      	movs	r3, #0
 8003c28:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003c2c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003c30:	460b      	mov	r3, r1
 8003c32:	4313      	orrs	r3, r2
 8003c34:	d056      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003c36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c42:	d038      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003c44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c48:	d831      	bhi.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c4a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c4e:	d034      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003c50:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c54:	d82b      	bhi.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c5a:	d01d      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003c5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c60:	d825      	bhi.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d006      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003c66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c6a:	d00a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003c6c:	e01f      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c6e:	bf00      	nop
 8003c70:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c74:	4ba2      	ldr	r3, [pc, #648]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c78:	4aa1      	ldr	r2, [pc, #644]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c80:	e01c      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c86:	3308      	adds	r3, #8
 8003c88:	2100      	movs	r1, #0
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f001 fb5c 	bl	8005348 <RCCEx_PLL2_Config>
 8003c90:	4603      	mov	r3, r0
 8003c92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c96:	e011      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c9c:	3328      	adds	r3, #40	@ 0x28
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f001 fc03 	bl	80054ac <RCCEx_PLL3_Config>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cac:	e006      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003cb4:	e002      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003cb6:	bf00      	nop
 8003cb8:	e000      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cbc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10b      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003cc4:	4b8e      	ldr	r3, [pc, #568]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003ccc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003cd4:	4a8a      	ldr	r2, [pc, #552]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cd6:	430b      	orrs	r3, r1
 8003cd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cda:	e003      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cdc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ce0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ce4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cec:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003cf0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003cfa:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4313      	orrs	r3, r2
 8003d02:	d03a      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003d04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d0a:	2b30      	cmp	r3, #48	@ 0x30
 8003d0c:	d01f      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003d0e:	2b30      	cmp	r3, #48	@ 0x30
 8003d10:	d819      	bhi.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	d00c      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003d16:	2b20      	cmp	r3, #32
 8003d18:	d815      	bhi.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d019      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003d1e:	2b10      	cmp	r3, #16
 8003d20:	d111      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d22:	4b77      	ldr	r3, [pc, #476]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d26:	4a76      	ldr	r2, [pc, #472]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d2e:	e011      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d34:	3308      	adds	r3, #8
 8003d36:	2102      	movs	r1, #2
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f001 fb05 	bl	8005348 <RCCEx_PLL2_Config>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d44:	e006      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003d4c:	e002      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d4e:	bf00      	nop
 8003d50:	e000      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d54:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10a      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d5c:	4b68      	ldr	r3, [pc, #416]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d60:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003d64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d6a:	4a65      	ldr	r2, [pc, #404]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d70:	e003      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d76:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d82:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003d86:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003d90:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003d94:	460b      	mov	r3, r1
 8003d96:	4313      	orrs	r3, r2
 8003d98:	d051      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003d9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003da0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003da4:	d035      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003da6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003daa:	d82e      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003dac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003db0:	d031      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003db2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003db6:	d828      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003db8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dbc:	d01a      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003dbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dc2:	d822      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003dc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dcc:	d007      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003dce:	e01c      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd0:	4b4b      	ldr	r3, [pc, #300]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd4:	4a4a      	ldr	r2, [pc, #296]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ddc:	e01c      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003de2:	3308      	adds	r3, #8
 8003de4:	2100      	movs	r1, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f001 faae 	bl	8005348 <RCCEx_PLL2_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003df2:	e011      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003df4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003df8:	3328      	adds	r3, #40	@ 0x28
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f001 fb55 	bl	80054ac <RCCEx_PLL3_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e08:	e006      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003e10:	e002      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e12:	bf00      	nop
 8003e14:	e000      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e18:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10a      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e20:	4b37      	ldr	r3, [pc, #220]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e24:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003e28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e2e:	4a34      	ldr	r2, [pc, #208]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e30:	430b      	orrs	r3, r1
 8003e32:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e34:	e003      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e3a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e46:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003e4a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003e54:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	d056      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003e5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e68:	d033      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003e6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e6e:	d82c      	bhi.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e74:	d02f      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003e76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e7a:	d826      	bhi.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e80:	d02b      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003e82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e86:	d820      	bhi.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e8c:	d012      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003e8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e92:	d81a      	bhi.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d022      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e9c:	d115      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f001 fa4e 	bl	8005348 <RCCEx_PLL2_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003eb2:	e015      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003eb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003eb8:	3328      	adds	r3, #40	@ 0x28
 8003eba:	2101      	movs	r1, #1
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f001 faf5 	bl	80054ac <RCCEx_PLL3_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ec8:	e00a      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003ed0:	e006      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ed2:	bf00      	nop
 8003ed4:	e004      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ed6:	bf00      	nop
 8003ed8:	e002      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003eda:	bf00      	nop
 8003edc:	e000      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ede:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ee0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10d      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ee8:	4b05      	ldr	r3, [pc, #20]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003ef0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ef4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ef6:	4a02      	ldr	r2, [pc, #8]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	6513      	str	r3, [r2, #80]	@ 0x50
 8003efc:	e006      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003efe:	bf00      	nop
 8003f00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f04:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f08:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003f0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f14:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003f18:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003f22:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003f26:	460b      	mov	r3, r1
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	d055      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003f2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f38:	d033      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003f3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f3e:	d82c      	bhi.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f44:	d02f      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f4a:	d826      	bhi.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f50:	d02b      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003f52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f56:	d820      	bhi.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f5c:	d012      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003f5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f62:	d81a      	bhi.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d022      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003f68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f6c:	d115      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f72:	3308      	adds	r3, #8
 8003f74:	2101      	movs	r1, #1
 8003f76:	4618      	mov	r0, r3
 8003f78:	f001 f9e6 	bl	8005348 <RCCEx_PLL2_Config>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f82:	e015      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f88:	3328      	adds	r3, #40	@ 0x28
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f001 fa8d 	bl	80054ac <RCCEx_PLL3_Config>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f98:	e00a      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003fa0:	e006      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fa2:	bf00      	nop
 8003fa4:	e004      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fa6:	bf00      	nop
 8003fa8:	e002      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003faa:	bf00      	nop
 8003fac:	e000      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10b      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003fb8:	4bb6      	ldr	r3, [pc, #728]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fbc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003fc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fc8:	4ab2      	ldr	r2, [pc, #712]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fce:	e003      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003fd4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003fd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	d02a      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8003ff8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d011      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8004002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004006:	d10a      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004008:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800400c:	3308      	adds	r3, #8
 800400e:	2101      	movs	r1, #1
 8004010:	4618      	mov	r0, r3
 8004012:	f001 f999 	bl	8005348 <RCCEx_PLL2_Config>
 8004016:	4603      	mov	r3, r0
 8004018:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 800401c:	e004      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004024:	e000      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8004026:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004028:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10a      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004030:	4b98      	ldr	r3, [pc, #608]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004034:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004038:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800403c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800403e:	4a95      	ldr	r2, [pc, #596]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004040:	430b      	orrs	r3, r1
 8004042:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004044:	e003      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004046:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800404a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800404e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800405a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800405e:	2300      	movs	r3, #0
 8004060:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004064:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004068:	460b      	mov	r3, r1
 800406a:	4313      	orrs	r3, r2
 800406c:	d037      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800406e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004072:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004074:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004078:	d00e      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800407a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800407e:	d816      	bhi.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x776>
 8004080:	2b00      	cmp	r3, #0
 8004082:	d018      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004084:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004088:	d111      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800408a:	4b82      	ldr	r3, [pc, #520]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800408c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800408e:	4a81      	ldr	r2, [pc, #516]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004094:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004096:	e00f      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004098:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800409c:	3308      	adds	r3, #8
 800409e:	2101      	movs	r1, #1
 80040a0:	4618      	mov	r0, r3
 80040a2:	f001 f951 	bl	8005348 <RCCEx_PLL2_Config>
 80040a6:	4603      	mov	r3, r0
 80040a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80040ac:	e004      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80040b4:	e000      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80040b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10a      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040c0:	4b74      	ldr	r3, [pc, #464]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80040c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040c4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80040c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ce:	4a71      	ldr	r2, [pc, #452]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80040d4:	e003      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80040da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80040de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e6:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80040ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040ee:	2300      	movs	r3, #0
 80040f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80040f4:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4313      	orrs	r3, r2
 80040fc:	d03a      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80040fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004104:	2b03      	cmp	r3, #3
 8004106:	d81d      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8004108:	a201      	add	r2, pc, #4	@ (adr r2, 8004110 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800410a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410e:	bf00      	nop
 8004110:	0800414d 	.word	0x0800414d
 8004114:	08004121 	.word	0x08004121
 8004118:	0800412f 	.word	0x0800412f
 800411c:	0800414d 	.word	0x0800414d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004120:	4b5c      	ldr	r3, [pc, #368]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004124:	4a5b      	ldr	r2, [pc, #364]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004126:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800412a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800412c:	e00f      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800412e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004132:	3308      	adds	r3, #8
 8004134:	2102      	movs	r1, #2
 8004136:	4618      	mov	r0, r3
 8004138:	f001 f906 	bl	8005348 <RCCEx_PLL2_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004142:	e004      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800414a:	e000      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 800414c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800414e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10a      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004156:	4b4f      	ldr	r3, [pc, #316]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800415a:	f023 0103 	bic.w	r1, r3, #3
 800415e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004164:	4a4b      	ldr	r2, [pc, #300]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004166:	430b      	orrs	r3, r1
 8004168:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800416a:	e003      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004170:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004174:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004180:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004184:	2300      	movs	r3, #0
 8004186:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800418a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800418e:	460b      	mov	r3, r1
 8004190:	4313      	orrs	r3, r2
 8004192:	f000 80a0 	beq.w	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004196:	4b40      	ldr	r3, [pc, #256]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a3f      	ldr	r2, [pc, #252]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800419c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041a2:	f7fd ffb7 	bl	8002114 <HAL_GetTick>
 80041a6:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041aa:	e00b      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ac:	f7fd ffb2 	bl	8002114 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b64      	cmp	r3, #100	@ 0x64
 80041ba:	d903      	bls.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80041c2:	e005      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041c4:	4b34      	ldr	r3, [pc, #208]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0ed      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80041d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d17a      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80041d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80041da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80041dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80041e4:	4053      	eors	r3, r2
 80041e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d015      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041ee:	4b29      	ldr	r3, [pc, #164]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041fa:	4b26      	ldr	r3, [pc, #152]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041fe:	4a25      	ldr	r2, [pc, #148]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004204:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004206:	4b23      	ldr	r3, [pc, #140]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800420a:	4a22      	ldr	r2, [pc, #136]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800420c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004210:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004212:	4a20      	ldr	r2, [pc, #128]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004214:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004218:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800421a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800421e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004226:	d118      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fd ff74 	bl	8002114 <HAL_GetTick>
 800422c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004230:	e00d      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004232:	f7fd ff6f 	bl	8002114 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800423c:	1ad2      	subs	r2, r2, r3
 800423e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004242:	429a      	cmp	r2, r3
 8004244:	d903      	bls.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 800424c:	e005      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800424e:	4b11      	ldr	r3, [pc, #68]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0eb      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800425a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800425e:	2b00      	cmp	r3, #0
 8004260:	d130      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004262:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004266:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800426a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800426e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004272:	d115      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8004274:	4b07      	ldr	r3, [pc, #28]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800427c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004280:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004284:	091a      	lsrs	r2, r3, #4
 8004286:	4b05      	ldr	r3, [pc, #20]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004288:	4013      	ands	r3, r2
 800428a:	4a02      	ldr	r2, [pc, #8]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800428c:	430b      	orrs	r3, r1
 800428e:	6113      	str	r3, [r2, #16]
 8004290:	e00c      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x974>
 8004292:	bf00      	nop
 8004294:	58024400 	.word	0x58024400
 8004298:	58024800 	.word	0x58024800
 800429c:	00ffffcf 	.word	0x00ffffcf
 80042a0:	4bd4      	ldr	r3, [pc, #848]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	4ad3      	ldr	r2, [pc, #844]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80042a6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80042aa:	6113      	str	r3, [r2, #16]
 80042ac:	4bd1      	ldr	r3, [pc, #836]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80042ae:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80042b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80042b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042bc:	4acd      	ldr	r2, [pc, #820]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80042be:	430b      	orrs	r3, r1
 80042c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80042c2:	e008      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80042c8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80042cc:	e003      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80042d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80042d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042de:	f002 0301 	and.w	r3, r2, #1
 80042e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042e6:	2300      	movs	r3, #0
 80042e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80042f0:	460b      	mov	r3, r1
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f000 808b 	beq.w	800440e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80042f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004300:	2b28      	cmp	r3, #40	@ 0x28
 8004302:	d86b      	bhi.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004304:	a201      	add	r2, pc, #4	@ (adr r2, 800430c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8004306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430a:	bf00      	nop
 800430c:	080043e5 	.word	0x080043e5
 8004310:	080043dd 	.word	0x080043dd
 8004314:	080043dd 	.word	0x080043dd
 8004318:	080043dd 	.word	0x080043dd
 800431c:	080043dd 	.word	0x080043dd
 8004320:	080043dd 	.word	0x080043dd
 8004324:	080043dd 	.word	0x080043dd
 8004328:	080043dd 	.word	0x080043dd
 800432c:	080043b1 	.word	0x080043b1
 8004330:	080043dd 	.word	0x080043dd
 8004334:	080043dd 	.word	0x080043dd
 8004338:	080043dd 	.word	0x080043dd
 800433c:	080043dd 	.word	0x080043dd
 8004340:	080043dd 	.word	0x080043dd
 8004344:	080043dd 	.word	0x080043dd
 8004348:	080043dd 	.word	0x080043dd
 800434c:	080043c7 	.word	0x080043c7
 8004350:	080043dd 	.word	0x080043dd
 8004354:	080043dd 	.word	0x080043dd
 8004358:	080043dd 	.word	0x080043dd
 800435c:	080043dd 	.word	0x080043dd
 8004360:	080043dd 	.word	0x080043dd
 8004364:	080043dd 	.word	0x080043dd
 8004368:	080043dd 	.word	0x080043dd
 800436c:	080043e5 	.word	0x080043e5
 8004370:	080043dd 	.word	0x080043dd
 8004374:	080043dd 	.word	0x080043dd
 8004378:	080043dd 	.word	0x080043dd
 800437c:	080043dd 	.word	0x080043dd
 8004380:	080043dd 	.word	0x080043dd
 8004384:	080043dd 	.word	0x080043dd
 8004388:	080043dd 	.word	0x080043dd
 800438c:	080043e5 	.word	0x080043e5
 8004390:	080043dd 	.word	0x080043dd
 8004394:	080043dd 	.word	0x080043dd
 8004398:	080043dd 	.word	0x080043dd
 800439c:	080043dd 	.word	0x080043dd
 80043a0:	080043dd 	.word	0x080043dd
 80043a4:	080043dd 	.word	0x080043dd
 80043a8:	080043dd 	.word	0x080043dd
 80043ac:	080043e5 	.word	0x080043e5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043b4:	3308      	adds	r3, #8
 80043b6:	2101      	movs	r1, #1
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 ffc5 	bl	8005348 <RCCEx_PLL2_Config>
 80043be:	4603      	mov	r3, r0
 80043c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80043c4:	e00f      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043ca:	3328      	adds	r3, #40	@ 0x28
 80043cc:	2101      	movs	r1, #1
 80043ce:	4618      	mov	r0, r3
 80043d0:	f001 f86c 	bl	80054ac <RCCEx_PLL3_Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80043da:	e004      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80043e2:	e000      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80043e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10b      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80043ee:	4b81      	ldr	r3, [pc, #516]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80043f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80043f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043fe:	4a7d      	ldr	r2, [pc, #500]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004400:	430b      	orrs	r3, r1
 8004402:	6553      	str	r3, [r2, #84]	@ 0x54
 8004404:	e003      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004406:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800440a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800440e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004416:	f002 0302 	and.w	r3, r2, #2
 800441a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800441e:	2300      	movs	r3, #0
 8004420:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004424:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004428:	460b      	mov	r3, r1
 800442a:	4313      	orrs	r3, r2
 800442c:	d042      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800442e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004432:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004434:	2b05      	cmp	r3, #5
 8004436:	d825      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8004438:	a201      	add	r2, pc, #4	@ (adr r2, 8004440 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 800443a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443e:	bf00      	nop
 8004440:	0800448d 	.word	0x0800448d
 8004444:	08004459 	.word	0x08004459
 8004448:	0800446f 	.word	0x0800446f
 800444c:	0800448d 	.word	0x0800448d
 8004450:	0800448d 	.word	0x0800448d
 8004454:	0800448d 	.word	0x0800448d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004458:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800445c:	3308      	adds	r3, #8
 800445e:	2101      	movs	r1, #1
 8004460:	4618      	mov	r0, r3
 8004462:	f000 ff71 	bl	8005348 <RCCEx_PLL2_Config>
 8004466:	4603      	mov	r3, r0
 8004468:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800446c:	e00f      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800446e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004472:	3328      	adds	r3, #40	@ 0x28
 8004474:	2101      	movs	r1, #1
 8004476:	4618      	mov	r0, r3
 8004478:	f001 f818 	bl	80054ac <RCCEx_PLL3_Config>
 800447c:	4603      	mov	r3, r0
 800447e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004482:	e004      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800448a:	e000      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 800448c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800448e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10a      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004496:	4b57      	ldr	r3, [pc, #348]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800449a:	f023 0107 	bic.w	r1, r3, #7
 800449e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044a4:	4a53      	ldr	r2, [pc, #332]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80044a6:	430b      	orrs	r3, r1
 80044a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80044aa:	e003      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80044b0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	f002 0304 	and.w	r3, r2, #4
 80044c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044c4:	2300      	movs	r3, #0
 80044c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044ca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4313      	orrs	r3, r2
 80044d2:	d044      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80044d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044dc:	2b05      	cmp	r3, #5
 80044de:	d825      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80044e0:	a201      	add	r2, pc, #4	@ (adr r2, 80044e8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80044e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e6:	bf00      	nop
 80044e8:	08004535 	.word	0x08004535
 80044ec:	08004501 	.word	0x08004501
 80044f0:	08004517 	.word	0x08004517
 80044f4:	08004535 	.word	0x08004535
 80044f8:	08004535 	.word	0x08004535
 80044fc:	08004535 	.word	0x08004535
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004500:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004504:	3308      	adds	r3, #8
 8004506:	2101      	movs	r1, #1
 8004508:	4618      	mov	r0, r3
 800450a:	f000 ff1d 	bl	8005348 <RCCEx_PLL2_Config>
 800450e:	4603      	mov	r3, r0
 8004510:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004514:	e00f      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004516:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800451a:	3328      	adds	r3, #40	@ 0x28
 800451c:	2101      	movs	r1, #1
 800451e:	4618      	mov	r0, r3
 8004520:	f000 ffc4 	bl	80054ac <RCCEx_PLL3_Config>
 8004524:	4603      	mov	r3, r0
 8004526:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800452a:	e004      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004532:	e000      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8004534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004536:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10b      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800453e:	4b2d      	ldr	r3, [pc, #180]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004542:	f023 0107 	bic.w	r1, r3, #7
 8004546:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800454a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800454e:	4a29      	ldr	r2, [pc, #164]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004550:	430b      	orrs	r3, r1
 8004552:	6593      	str	r3, [r2, #88]	@ 0x58
 8004554:	e003      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004556:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800455a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800455e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004566:	f002 0320 	and.w	r3, r2, #32
 800456a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800456e:	2300      	movs	r3, #0
 8004570:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004574:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004578:	460b      	mov	r3, r1
 800457a:	4313      	orrs	r3, r2
 800457c:	d057      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800457e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004582:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004586:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800458a:	d035      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 800458c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004590:	d82c      	bhi.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004596:	d031      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8004598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800459c:	d826      	bhi.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800459e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045a2:	d02d      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80045a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045a8:	d820      	bhi.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80045aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045ae:	d012      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 80045b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045b4:	d81a      	bhi.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d024      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80045ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045be:	d115      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045c4:	3308      	adds	r3, #8
 80045c6:	2100      	movs	r1, #0
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 febd 	bl	8005348 <RCCEx_PLL2_Config>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80045d4:	e017      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045da:	3328      	adds	r3, #40	@ 0x28
 80045dc:	2102      	movs	r1, #2
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 ff64 	bl	80054ac <RCCEx_PLL3_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80045ea:	e00c      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80045f2:	e008      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80045f4:	58024400 	.word	0x58024400
        break;
 80045f8:	bf00      	nop
 80045fa:	e004      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80045fc:	bf00      	nop
 80045fe:	e002      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004600:	bf00      	nop
 8004602:	e000      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004604:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004606:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10b      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800460e:	4bc2      	ldr	r3, [pc, #776]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004612:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004616:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800461a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800461e:	4abe      	ldr	r2, [pc, #760]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004620:	430b      	orrs	r3, r1
 8004622:	6553      	str	r3, [r2, #84]	@ 0x54
 8004624:	e003      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004626:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800462a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800462e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004636:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800463a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800463e:	2300      	movs	r3, #0
 8004640:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004644:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004648:	460b      	mov	r3, r1
 800464a:	4313      	orrs	r3, r2
 800464c:	d055      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800464e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004652:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004656:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800465a:	d033      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 800465c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004660:	d82c      	bhi.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004666:	d02f      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8004668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800466c:	d826      	bhi.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800466e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004672:	d02b      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8004674:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004678:	d820      	bhi.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800467a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800467e:	d012      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8004680:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004684:	d81a      	bhi.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004686:	2b00      	cmp	r3, #0
 8004688:	d022      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800468a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800468e:	d115      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004690:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004694:	3308      	adds	r3, #8
 8004696:	2100      	movs	r1, #0
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fe55 	bl	8005348 <RCCEx_PLL2_Config>
 800469e:	4603      	mov	r3, r0
 80046a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80046a4:	e015      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046aa:	3328      	adds	r3, #40	@ 0x28
 80046ac:	2102      	movs	r1, #2
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fefc 	bl	80054ac <RCCEx_PLL3_Config>
 80046b4:	4603      	mov	r3, r0
 80046b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80046ba:	e00a      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80046c2:	e006      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80046c4:	bf00      	nop
 80046c6:	e004      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80046c8:	bf00      	nop
 80046ca:	e002      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80046cc:	bf00      	nop
 80046ce:	e000      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80046d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10b      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046da:	4b8f      	ldr	r3, [pc, #572]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046de:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80046e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80046ea:	4a8b      	ldr	r2, [pc, #556]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046ec:	430b      	orrs	r3, r1
 80046ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80046f0:	e003      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80046fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004702:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004706:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800470a:	2300      	movs	r3, #0
 800470c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004710:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004714:	460b      	mov	r3, r1
 8004716:	4313      	orrs	r3, r2
 8004718:	d055      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800471a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800471e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004722:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004726:	d033      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004728:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800472c:	d82c      	bhi.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800472e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004732:	d02f      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004734:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004738:	d826      	bhi.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800473a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800473e:	d02b      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004740:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004744:	d820      	bhi.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004746:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800474a:	d012      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 800474c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004750:	d81a      	bhi.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004752:	2b00      	cmp	r3, #0
 8004754:	d022      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8004756:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800475a:	d115      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800475c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004760:	3308      	adds	r3, #8
 8004762:	2100      	movs	r1, #0
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fdef 	bl	8005348 <RCCEx_PLL2_Config>
 800476a:	4603      	mov	r3, r0
 800476c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004770:	e015      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004772:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004776:	3328      	adds	r3, #40	@ 0x28
 8004778:	2102      	movs	r1, #2
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fe96 	bl	80054ac <RCCEx_PLL3_Config>
 8004780:	4603      	mov	r3, r0
 8004782:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004786:	e00a      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800478e:	e006      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004790:	bf00      	nop
 8004792:	e004      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004794:	bf00      	nop
 8004796:	e002      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004798:	bf00      	nop
 800479a:	e000      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800479c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800479e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10b      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80047a6:	4b5c      	ldr	r3, [pc, #368]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047aa:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80047ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80047b6:	4a58      	ldr	r2, [pc, #352]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047b8:	430b      	orrs	r3, r1
 80047ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80047bc:	e003      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80047c2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80047c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ce:	f002 0308 	and.w	r3, r2, #8
 80047d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047d6:	2300      	movs	r3, #0
 80047d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80047dc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80047e0:	460b      	mov	r3, r1
 80047e2:	4313      	orrs	r3, r2
 80047e4:	d01e      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80047e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047f2:	d10c      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047f8:	3328      	adds	r3, #40	@ 0x28
 80047fa:	2102      	movs	r1, #2
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 fe55 	bl	80054ac <RCCEx_PLL3_Config>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800480e:	4b42      	ldr	r3, [pc, #264]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004812:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004816:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481e:	4a3e      	ldr	r2, [pc, #248]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004820:	430b      	orrs	r3, r1
 8004822:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004824:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482c:	f002 0310 	and.w	r3, r2, #16
 8004830:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004834:	2300      	movs	r3, #0
 8004836:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800483a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800483e:	460b      	mov	r3, r1
 8004840:	4313      	orrs	r3, r2
 8004842:	d01e      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004844:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004848:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800484c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004850:	d10c      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004852:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004856:	3328      	adds	r3, #40	@ 0x28
 8004858:	2102      	movs	r1, #2
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fe26 	bl	80054ac <RCCEx_PLL3_Config>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800486c:	4b2a      	ldr	r3, [pc, #168]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800486e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004870:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004874:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004878:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800487c:	4a26      	ldr	r2, [pc, #152]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800487e:	430b      	orrs	r3, r1
 8004880:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004882:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800488e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004892:	2300      	movs	r3, #0
 8004894:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004898:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800489c:	460b      	mov	r3, r1
 800489e:	4313      	orrs	r3, r2
 80048a0:	d040      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80048a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80048aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048ae:	d022      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80048b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048b4:	d81b      	bhi.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80048ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048be:	d00b      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80048c0:	e015      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048c6:	3308      	adds	r3, #8
 80048c8:	2100      	movs	r1, #0
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fd3c 	bl	8005348 <RCCEx_PLL2_Config>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80048d6:	e00f      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048dc:	3328      	adds	r3, #40	@ 0x28
 80048de:	2102      	movs	r1, #2
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fde3 	bl	80054ac <RCCEx_PLL3_Config>
 80048e6:	4603      	mov	r3, r0
 80048e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80048ec:	e004      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80048f4:	e000      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80048f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10d      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004900:	4b05      	ldr	r3, [pc, #20]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004904:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004908:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800490c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004910:	4a01      	ldr	r2, [pc, #4]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004912:	430b      	orrs	r3, r1
 8004914:	6593      	str	r3, [r2, #88]	@ 0x58
 8004916:	e005      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004918:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004920:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004924:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004930:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004932:	2300      	movs	r3, #0
 8004934:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004936:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800493a:	460b      	mov	r3, r1
 800493c:	4313      	orrs	r3, r2
 800493e:	d03b      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004940:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004944:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004948:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800494c:	d01f      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800494e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004952:	d818      	bhi.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8004954:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004958:	d003      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800495a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800495e:	d007      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8004960:	e011      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004962:	4b64      	ldr	r3, [pc, #400]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004966:	4a63      	ldr	r2, [pc, #396]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800496c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800496e:	e00f      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004970:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004974:	3328      	adds	r3, #40	@ 0x28
 8004976:	2101      	movs	r1, #1
 8004978:	4618      	mov	r0, r3
 800497a:	f000 fd97 	bl	80054ac <RCCEx_PLL3_Config>
 800497e:	4603      	mov	r3, r0
 8004980:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004984:	e004      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800498c:	e000      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800498e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004990:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10b      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004998:	4b56      	ldr	r3, [pc, #344]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800499a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800499c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80049a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049a8:	4a52      	ldr	r2, [pc, #328]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80049aa:	430b      	orrs	r3, r1
 80049ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80049ae:	e003      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80049b4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80049b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80049c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80049c6:	2300      	movs	r3, #0
 80049c8:	677b      	str	r3, [r7, #116]	@ 0x74
 80049ca:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80049ce:	460b      	mov	r3, r1
 80049d0:	4313      	orrs	r3, r2
 80049d2:	d031      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80049d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80049de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049e2:	d007      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80049e4:	e011      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049e6:	4b43      	ldr	r3, [pc, #268]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80049e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ea:	4a42      	ldr	r2, [pc, #264]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80049ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80049f2:	e00e      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049f8:	3308      	adds	r3, #8
 80049fa:	2102      	movs	r1, #2
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 fca3 	bl	8005348 <RCCEx_PLL2_Config>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a08:	e003      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a12:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10a      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004a1a:	4b36      	ldr	r3, [pc, #216]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a28:	4a32      	ldr	r2, [pc, #200]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004a2a:	430b      	orrs	r3, r1
 8004a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a2e:	e003      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a30:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004a34:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a40:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004a44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a46:	2300      	movs	r3, #0
 8004a48:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a4a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4313      	orrs	r3, r2
 8004a52:	d00c      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a58:	3328      	adds	r3, #40	@ 0x28
 8004a5a:	2102      	movs	r1, #2
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 fd25 	bl	80054ac <RCCEx_PLL3_Config>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a76:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004a7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a80:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004a84:	460b      	mov	r3, r1
 8004a86:	4313      	orrs	r3, r2
 8004a88:	d03a      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004a8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a96:	d018      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8004a98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a9c:	d811      	bhi.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8004a9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aa2:	d014      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8004aa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aa8:	d80b      	bhi.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d011      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8004aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ab2:	d106      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab8:	4a0e      	ldr	r2, [pc, #56]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004aba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004abe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004ac8:	e004      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004aca:	bf00      	nop
 8004acc:	e002      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004ace:	bf00      	nop
 8004ad0:	e000      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004ad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ad4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10d      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004adc:	4b05      	ldr	r3, [pc, #20]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ae4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aec:	4a01      	ldr	r2, [pc, #4]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004aee:	430b      	orrs	r3, r1
 8004af0:	6553      	str	r3, [r2, #84]	@ 0x54
 8004af2:	e005      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8004af4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004afc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b08:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004b0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b0e:	2300      	movs	r3, #0
 8004b10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b12:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004b16:	460b      	mov	r3, r1
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	d009      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b1c:	4baa      	ldr	r3, [pc, #680]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004b1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b20:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004b24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b2a:	4aa7      	ldr	r2, [pc, #668]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004b30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b38:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004b3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b3e:	2300      	movs	r3, #0
 8004b40:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b42:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004b46:	460b      	mov	r3, r1
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	d00a      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004b4c:	4b9e      	ldr	r3, [pc, #632]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004b54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b58:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b5c:	4a9a      	ldr	r2, [pc, #616]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b70:	2300      	movs	r3, #0
 8004b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b74:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	d009      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b7e:	4b92      	ldr	r3, [pc, #584]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b82:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004b86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8c:	4a8e      	ldr	r2, [pc, #568]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004b8e:	430b      	orrs	r3, r1
 8004b90:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004b9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ba4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4313      	orrs	r3, r2
 8004bac:	d00e      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bae:	4b86      	ldr	r3, [pc, #536]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	4a85      	ldr	r2, [pc, #532]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004bb4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004bb8:	6113      	str	r3, [r2, #16]
 8004bba:	4b83      	ldr	r3, [pc, #524]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004bbc:	6919      	ldr	r1, [r3, #16]
 8004bbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bc2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004bc6:	4a80      	ldr	r2, [pc, #512]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004bcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bda:	2300      	movs	r3, #0
 8004bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bde:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004be2:	460b      	mov	r3, r1
 8004be4:	4313      	orrs	r3, r2
 8004be6:	d009      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004be8:	4b77      	ldr	r3, [pc, #476]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bec:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004bf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf6:	4a74      	ldr	r2, [pc, #464]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004c08:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c0e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004c12:	460b      	mov	r3, r1
 8004c14:	4313      	orrs	r3, r2
 8004c16:	d00a      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c18:	4b6b      	ldr	r3, [pc, #428]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c1c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004c20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c28:	4a67      	ldr	r2, [pc, #412]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004c2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c36:	2100      	movs	r1, #0
 8004c38:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c40:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004c44:	460b      	mov	r3, r1
 8004c46:	4313      	orrs	r3, r2
 8004c48:	d011      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c4e:	3308      	adds	r3, #8
 8004c50:	2100      	movs	r1, #0
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fb78 	bl	8005348 <RCCEx_PLL2_Config>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004c5e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c66:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c6a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004c6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	2100      	movs	r1, #0
 8004c78:	6239      	str	r1, [r7, #32]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c80:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004c84:	460b      	mov	r3, r1
 8004c86:	4313      	orrs	r3, r2
 8004c88:	d011      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c8e:	3308      	adds	r3, #8
 8004c90:	2101      	movs	r1, #1
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 fb58 	bl	8005348 <RCCEx_PLL2_Config>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004c9e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004caa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004cae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	61b9      	str	r1, [r7, #24]
 8004cba:	f003 0304 	and.w	r3, r3, #4
 8004cbe:	61fb      	str	r3, [r7, #28]
 8004cc0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	d011      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004cca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cce:	3308      	adds	r3, #8
 8004cd0:	2102      	movs	r1, #2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 fb38 	bl	8005348 <RCCEx_PLL2_Config>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004cde:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004cea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004cee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	6139      	str	r1, [r7, #16]
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004d04:	460b      	mov	r3, r1
 8004d06:	4313      	orrs	r3, r2
 8004d08:	d011      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d0e:	3328      	adds	r3, #40	@ 0x28
 8004d10:	2100      	movs	r1, #0
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 fbca 	bl	80054ac <RCCEx_PLL3_Config>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8004d1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d26:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d2a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004d2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d36:	2100      	movs	r1, #0
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	f003 0310 	and.w	r3, r3, #16
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004d44:	460b      	mov	r3, r1
 8004d46:	4313      	orrs	r3, r2
 8004d48:	d011      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d4e:	3328      	adds	r3, #40	@ 0x28
 8004d50:	2101      	movs	r1, #1
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 fbaa 	bl	80054ac <RCCEx_PLL3_Config>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004d5e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d66:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d6a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004d6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d76:	2100      	movs	r1, #0
 8004d78:	6039      	str	r1, [r7, #0]
 8004d7a:	f003 0320 	and.w	r3, r3, #32
 8004d7e:	607b      	str	r3, [r7, #4]
 8004d80:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d84:	460b      	mov	r3, r1
 8004d86:	4313      	orrs	r3, r2
 8004d88:	d011      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d8e:	3328      	adds	r3, #40	@ 0x28
 8004d90:	2102      	movs	r1, #2
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fb8a 	bl	80054ac <RCCEx_PLL3_Config>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004d9e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004daa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8004dae:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	e000      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dc8:	58024400 	.word	0x58024400

08004dcc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004dd0:	f7fe fd14 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	4b06      	ldr	r3, [pc, #24]	@ (8004df0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	091b      	lsrs	r3, r3, #4
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	4904      	ldr	r1, [pc, #16]	@ (8004df4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004de2:	5ccb      	ldrb	r3, [r1, r3]
 8004de4:	f003 031f 	and.w	r3, r3, #31
 8004de8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	58024400 	.word	0x58024400
 8004df4:	0800e468 	.word	0x0800e468

08004df8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b089      	sub	sp, #36	@ 0x24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e00:	4ba1      	ldr	r3, [pc, #644]	@ (8005088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e04:	f003 0303 	and.w	r3, r3, #3
 8004e08:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004e0a:	4b9f      	ldr	r3, [pc, #636]	@ (8005088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0e:	0b1b      	lsrs	r3, r3, #12
 8004e10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e14:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004e16:	4b9c      	ldr	r3, [pc, #624]	@ (8005088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1a:	091b      	lsrs	r3, r3, #4
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004e22:	4b99      	ldr	r3, [pc, #612]	@ (8005088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e26:	08db      	lsrs	r3, r3, #3
 8004e28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	fb02 f303 	mul.w	r3, r2, r3
 8004e32:	ee07 3a90 	vmov	s15, r3
 8004e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 8111 	beq.w	8005068 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	f000 8083 	beq.w	8004f54 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	f200 80a1 	bhi.w	8004f98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d056      	beq.n	8004f10 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004e62:	e099      	b.n	8004f98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e64:	4b88      	ldr	r3, [pc, #544]	@ (8005088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0320 	and.w	r3, r3, #32
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d02d      	beq.n	8004ecc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e70:	4b85      	ldr	r3, [pc, #532]	@ (8005088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	08db      	lsrs	r3, r3, #3
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	4a84      	ldr	r2, [pc, #528]	@ (800508c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e80:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	ee07 3a90 	vmov	s15, r3
 8004e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e9a:	4b7b      	ldr	r3, [pc, #492]	@ (8005088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005090 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004eca:	e087      	b.n	8004fdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005094 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ede:	4b6a      	ldr	r3, [pc, #424]	@ (8005088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ef2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005090 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f0e:	e065      	b.n	8004fdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005098 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f22:	4b59      	ldr	r3, [pc, #356]	@ (8005088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2a:	ee07 3a90 	vmov	s15, r3
 8004f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f36:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005090 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f52:	e043      	b.n	8004fdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800509c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f66:	4b48      	ldr	r3, [pc, #288]	@ (8005088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f7a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005090 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f96:	e021      	b.n	8004fdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005098 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004faa:	4b37      	ldr	r3, [pc, #220]	@ (8005088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fbe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005090 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fda:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8005088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe0:	0a5b      	lsrs	r3, r3, #9
 8004fe2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ff2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ff6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005002:	ee17 2a90 	vmov	r2, s15
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800500a:	4b1f      	ldr	r3, [pc, #124]	@ (8005088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800500c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500e:	0c1b      	lsrs	r3, r3, #16
 8005010:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005014:	ee07 3a90 	vmov	s15, r3
 8005018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005020:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005024:	edd7 6a07 	vldr	s13, [r7, #28]
 8005028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800502c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005030:	ee17 2a90 	vmov	r2, s15
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005038:	4b13      	ldr	r3, [pc, #76]	@ (8005088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800503a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503c:	0e1b      	lsrs	r3, r3, #24
 800503e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800504e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005052:	edd7 6a07 	vldr	s13, [r7, #28]
 8005056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800505a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800505e:	ee17 2a90 	vmov	r2, s15
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005066:	e008      	b.n	800507a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	609a      	str	r2, [r3, #8]
}
 800507a:	bf00      	nop
 800507c:	3724      	adds	r7, #36	@ 0x24
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	58024400 	.word	0x58024400
 800508c:	03d09000 	.word	0x03d09000
 8005090:	46000000 	.word	0x46000000
 8005094:	4c742400 	.word	0x4c742400
 8005098:	4a742400 	.word	0x4a742400
 800509c:	4bbebc20 	.word	0x4bbebc20

080050a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b089      	sub	sp, #36	@ 0x24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050a8:	4ba1      	ldr	r3, [pc, #644]	@ (8005330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ac:	f003 0303 	and.w	r3, r3, #3
 80050b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80050b2:	4b9f      	ldr	r3, [pc, #636]	@ (8005330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b6:	0d1b      	lsrs	r3, r3, #20
 80050b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80050be:	4b9c      	ldr	r3, [pc, #624]	@ (8005330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c2:	0a1b      	lsrs	r3, r3, #8
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80050ca:	4b99      	ldr	r3, [pc, #612]	@ (8005330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ce:	08db      	lsrs	r3, r3, #3
 80050d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	fb02 f303 	mul.w	r3, r2, r3
 80050da:	ee07 3a90 	vmov	s15, r3
 80050de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 8111 	beq.w	8005310 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	f000 8083 	beq.w	80051fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	f200 80a1 	bhi.w	8005240 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d056      	beq.n	80051b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800510a:	e099      	b.n	8005240 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800510c:	4b88      	ldr	r3, [pc, #544]	@ (8005330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0320 	and.w	r3, r3, #32
 8005114:	2b00      	cmp	r3, #0
 8005116:	d02d      	beq.n	8005174 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005118:	4b85      	ldr	r3, [pc, #532]	@ (8005330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	08db      	lsrs	r3, r3, #3
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	4a84      	ldr	r2, [pc, #528]	@ (8005334 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005124:	fa22 f303 	lsr.w	r3, r2, r3
 8005128:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	ee07 3a90 	vmov	s15, r3
 8005130:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	ee07 3a90 	vmov	s15, r3
 800513a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800513e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005142:	4b7b      	ldr	r3, [pc, #492]	@ (8005330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800514a:	ee07 3a90 	vmov	s15, r3
 800514e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005152:	ed97 6a03 	vldr	s12, [r7, #12]
 8005156:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005338 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800515a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800515e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005162:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800516a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800516e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005172:	e087      	b.n	8005284 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	ee07 3a90 	vmov	s15, r3
 800517a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800517e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800533c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005186:	4b6a      	ldr	r3, [pc, #424]	@ (8005330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005196:	ed97 6a03 	vldr	s12, [r7, #12]
 800519a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005338 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800519e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051b6:	e065      	b.n	8005284 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005340 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80051c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ca:	4b59      	ldr	r3, [pc, #356]	@ (8005330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d2:	ee07 3a90 	vmov	s15, r3
 80051d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051da:	ed97 6a03 	vldr	s12, [r7, #12]
 80051de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005338 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051fa:	e043      	b.n	8005284 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	ee07 3a90 	vmov	s15, r3
 8005202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005206:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005344 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800520a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800520e:	4b48      	ldr	r3, [pc, #288]	@ (8005330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005216:	ee07 3a90 	vmov	s15, r3
 800521a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800521e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005222:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005338 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800522a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800522e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800523a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800523e:	e021      	b.n	8005284 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	ee07 3a90 	vmov	s15, r3
 8005246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800524a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005340 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800524e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005252:	4b37      	ldr	r3, [pc, #220]	@ (8005330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005262:	ed97 6a03 	vldr	s12, [r7, #12]
 8005266:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005338 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800526a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800526e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800527a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800527e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005282:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005284:	4b2a      	ldr	r3, [pc, #168]	@ (8005330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005288:	0a5b      	lsrs	r3, r3, #9
 800528a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800528e:	ee07 3a90 	vmov	s15, r3
 8005292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005296:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800529a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800529e:	edd7 6a07 	vldr	s13, [r7, #28]
 80052a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052aa:	ee17 2a90 	vmov	r2, s15
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80052b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b6:	0c1b      	lsrs	r3, r3, #16
 80052b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052bc:	ee07 3a90 	vmov	s15, r3
 80052c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80052d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052d8:	ee17 2a90 	vmov	r2, s15
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80052e0:	4b13      	ldr	r3, [pc, #76]	@ (8005330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e4:	0e1b      	lsrs	r3, r3, #24
 80052e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80052fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005306:	ee17 2a90 	vmov	r2, s15
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800530e:	e008      	b.n	8005322 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	609a      	str	r2, [r3, #8]
}
 8005322:	bf00      	nop
 8005324:	3724      	adds	r7, #36	@ 0x24
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	58024400 	.word	0x58024400
 8005334:	03d09000 	.word	0x03d09000
 8005338:	46000000 	.word	0x46000000
 800533c:	4c742400 	.word	0x4c742400
 8005340:	4a742400 	.word	0x4a742400
 8005344:	4bbebc20 	.word	0x4bbebc20

08005348 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005356:	4b53      	ldr	r3, [pc, #332]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 8005358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535a:	f003 0303 	and.w	r3, r3, #3
 800535e:	2b03      	cmp	r3, #3
 8005360:	d101      	bne.n	8005366 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e099      	b.n	800549a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005366:	4b4f      	ldr	r3, [pc, #316]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a4e      	ldr	r2, [pc, #312]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 800536c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005372:	f7fc fecf 	bl	8002114 <HAL_GetTick>
 8005376:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005378:	e008      	b.n	800538c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800537a:	f7fc fecb 	bl	8002114 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e086      	b.n	800549a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800538c:	4b45      	ldr	r3, [pc, #276]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1f0      	bne.n	800537a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005398:	4b42      	ldr	r3, [pc, #264]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 800539a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	031b      	lsls	r3, r3, #12
 80053a6:	493f      	ldr	r1, [pc, #252]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	3b01      	subs	r3, #1
 80053b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	025b      	lsls	r3, r3, #9
 80053be:	b29b      	uxth	r3, r3
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	041b      	lsls	r3, r3, #16
 80053ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	3b01      	subs	r3, #1
 80053d6:	061b      	lsls	r3, r3, #24
 80053d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80053dc:	4931      	ldr	r1, [pc, #196]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80053e2:	4b30      	ldr	r3, [pc, #192]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 80053e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	492d      	ldr	r1, [pc, #180]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80053f4:	4b2b      	ldr	r3, [pc, #172]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 80053f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f8:	f023 0220 	bic.w	r2, r3, #32
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	4928      	ldr	r1, [pc, #160]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 8005402:	4313      	orrs	r3, r2
 8005404:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005406:	4b27      	ldr	r3, [pc, #156]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 8005408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540a:	4a26      	ldr	r2, [pc, #152]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 800540c:	f023 0310 	bic.w	r3, r3, #16
 8005410:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005412:	4b24      	ldr	r3, [pc, #144]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 8005414:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005416:	4b24      	ldr	r3, [pc, #144]	@ (80054a8 <RCCEx_PLL2_Config+0x160>)
 8005418:	4013      	ands	r3, r2
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	69d2      	ldr	r2, [r2, #28]
 800541e:	00d2      	lsls	r2, r2, #3
 8005420:	4920      	ldr	r1, [pc, #128]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 8005422:	4313      	orrs	r3, r2
 8005424:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005426:	4b1f      	ldr	r3, [pc, #124]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 8005428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542a:	4a1e      	ldr	r2, [pc, #120]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 800542c:	f043 0310 	orr.w	r3, r3, #16
 8005430:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d106      	bne.n	8005446 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005438:	4b1a      	ldr	r3, [pc, #104]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 800543a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543c:	4a19      	ldr	r2, [pc, #100]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 800543e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005442:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005444:	e00f      	b.n	8005466 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d106      	bne.n	800545a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800544c:	4b15      	ldr	r3, [pc, #84]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 800544e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005450:	4a14      	ldr	r2, [pc, #80]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 8005452:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005456:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005458:	e005      	b.n	8005466 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800545a:	4b12      	ldr	r3, [pc, #72]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 800545c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545e:	4a11      	ldr	r2, [pc, #68]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 8005460:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005464:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005466:	4b0f      	ldr	r3, [pc, #60]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a0e      	ldr	r2, [pc, #56]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 800546c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005472:	f7fc fe4f 	bl	8002114 <HAL_GetTick>
 8005476:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005478:	e008      	b.n	800548c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800547a:	f7fc fe4b 	bl	8002114 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d901      	bls.n	800548c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e006      	b.n	800549a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800548c:	4b05      	ldr	r3, [pc, #20]	@ (80054a4 <RCCEx_PLL2_Config+0x15c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0f0      	beq.n	800547a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005498:	7bfb      	ldrb	r3, [r7, #15]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	58024400 	.word	0x58024400
 80054a8:	ffff0007 	.word	0xffff0007

080054ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054ba:	4b53      	ldr	r3, [pc, #332]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 80054bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d101      	bne.n	80054ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e099      	b.n	80055fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80054ca:	4b4f      	ldr	r3, [pc, #316]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a4e      	ldr	r2, [pc, #312]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 80054d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d6:	f7fc fe1d 	bl	8002114 <HAL_GetTick>
 80054da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80054dc:	e008      	b.n	80054f0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80054de:	f7fc fe19 	bl	8002114 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e086      	b.n	80055fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80054f0:	4b45      	ldr	r3, [pc, #276]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1f0      	bne.n	80054de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80054fc:	4b42      	ldr	r3, [pc, #264]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 80054fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005500:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	051b      	lsls	r3, r3, #20
 800550a:	493f      	ldr	r1, [pc, #252]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 800550c:	4313      	orrs	r3, r2
 800550e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	3b01      	subs	r3, #1
 8005516:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	3b01      	subs	r3, #1
 8005520:	025b      	lsls	r3, r3, #9
 8005522:	b29b      	uxth	r3, r3
 8005524:	431a      	orrs	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	3b01      	subs	r3, #1
 800552c:	041b      	lsls	r3, r3, #16
 800552e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	3b01      	subs	r3, #1
 800553a:	061b      	lsls	r3, r3, #24
 800553c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005540:	4931      	ldr	r1, [pc, #196]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 8005542:	4313      	orrs	r3, r2
 8005544:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005546:	4b30      	ldr	r3, [pc, #192]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 8005548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	492d      	ldr	r1, [pc, #180]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 8005554:	4313      	orrs	r3, r2
 8005556:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005558:	4b2b      	ldr	r3, [pc, #172]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 800555a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	4928      	ldr	r1, [pc, #160]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 8005566:	4313      	orrs	r3, r2
 8005568:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800556a:	4b27      	ldr	r3, [pc, #156]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 800556c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556e:	4a26      	ldr	r2, [pc, #152]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 8005570:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005574:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005576:	4b24      	ldr	r3, [pc, #144]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 8005578:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800557a:	4b24      	ldr	r3, [pc, #144]	@ (800560c <RCCEx_PLL3_Config+0x160>)
 800557c:	4013      	ands	r3, r2
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	69d2      	ldr	r2, [r2, #28]
 8005582:	00d2      	lsls	r2, r2, #3
 8005584:	4920      	ldr	r1, [pc, #128]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 8005586:	4313      	orrs	r3, r2
 8005588:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800558a:	4b1f      	ldr	r3, [pc, #124]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 800558c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558e:	4a1e      	ldr	r2, [pc, #120]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 8005590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005594:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d106      	bne.n	80055aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800559c:	4b1a      	ldr	r3, [pc, #104]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 800559e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a0:	4a19      	ldr	r2, [pc, #100]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 80055a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80055a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80055a8:	e00f      	b.n	80055ca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d106      	bne.n	80055be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80055b0:	4b15      	ldr	r3, [pc, #84]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 80055b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b4:	4a14      	ldr	r2, [pc, #80]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 80055b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80055ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80055bc:	e005      	b.n	80055ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80055be:	4b12      	ldr	r3, [pc, #72]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 80055c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c2:	4a11      	ldr	r2, [pc, #68]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 80055c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80055ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a0e      	ldr	r2, [pc, #56]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 80055d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055d6:	f7fc fd9d 	bl	8002114 <HAL_GetTick>
 80055da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80055dc:	e008      	b.n	80055f0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80055de:	f7fc fd99 	bl	8002114 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d901      	bls.n	80055f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e006      	b.n	80055fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80055f0:	4b05      	ldr	r3, [pc, #20]	@ (8005608 <RCCEx_PLL3_Config+0x15c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0f0      	beq.n	80055de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	58024400 	.word	0x58024400
 800560c:	ffff0007 	.word	0xffff0007

08005610 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e10f      	b.n	8005842 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a87      	ldr	r2, [pc, #540]	@ (800584c <HAL_SPI_Init+0x23c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d00f      	beq.n	8005652 <HAL_SPI_Init+0x42>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a86      	ldr	r2, [pc, #536]	@ (8005850 <HAL_SPI_Init+0x240>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d00a      	beq.n	8005652 <HAL_SPI_Init+0x42>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a84      	ldr	r2, [pc, #528]	@ (8005854 <HAL_SPI_Init+0x244>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d005      	beq.n	8005652 <HAL_SPI_Init+0x42>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	2b0f      	cmp	r3, #15
 800564c:	d901      	bls.n	8005652 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e0f7      	b.n	8005842 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fef6 	bl	8006444 <SPI_GetPacketSize>
 8005658:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a7b      	ldr	r2, [pc, #492]	@ (800584c <HAL_SPI_Init+0x23c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d00c      	beq.n	800567e <HAL_SPI_Init+0x6e>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a79      	ldr	r2, [pc, #484]	@ (8005850 <HAL_SPI_Init+0x240>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d007      	beq.n	800567e <HAL_SPI_Init+0x6e>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a78      	ldr	r2, [pc, #480]	@ (8005854 <HAL_SPI_Init+0x244>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d002      	beq.n	800567e <HAL_SPI_Init+0x6e>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2b08      	cmp	r3, #8
 800567c:	d811      	bhi.n	80056a2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005682:	4a72      	ldr	r2, [pc, #456]	@ (800584c <HAL_SPI_Init+0x23c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d009      	beq.n	800569c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a70      	ldr	r2, [pc, #448]	@ (8005850 <HAL_SPI_Init+0x240>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d004      	beq.n	800569c <HAL_SPI_Init+0x8c>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a6f      	ldr	r2, [pc, #444]	@ (8005854 <HAL_SPI_Init+0x244>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d104      	bne.n	80056a6 <HAL_SPI_Init+0x96>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b10      	cmp	r3, #16
 80056a0:	d901      	bls.n	80056a6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e0cd      	b.n	8005842 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d106      	bne.n	80056c0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7fc f988 	bl	80019d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0201 	bic.w	r2, r2, #1
 80056d6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80056e2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056ec:	d119      	bne.n	8005722 <HAL_SPI_Init+0x112>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056f6:	d103      	bne.n	8005700 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d008      	beq.n	8005712 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10c      	bne.n	8005722 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800570c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005710:	d107      	bne.n	8005722 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005720:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00f      	beq.n	800574e <HAL_SPI_Init+0x13e>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	2b06      	cmp	r3, #6
 8005734:	d90b      	bls.n	800574e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	e007      	b.n	800575e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800575c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69da      	ldr	r2, [r3, #28]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005766:	431a      	orrs	r2, r3
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005770:	ea42 0103 	orr.w	r1, r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005788:	431a      	orrs	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800578e:	431a      	orrs	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	431a      	orrs	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	431a      	orrs	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	431a      	orrs	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057be:	ea42 0103 	orr.w	r1, r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d113      	bne.n	80057fe <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057e8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80057fc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 0201 	bic.w	r2, r2, #1
 800580c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	40013000 	.word	0x40013000
 8005850:	40003800 	.word	0x40003800
 8005854:	40003c00 	.word	0x40003c00

08005858 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af02      	add	r7, sp, #8
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	603b      	str	r3, [r7, #0]
 8005864:	4613      	mov	r3, r2
 8005866:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3320      	adds	r3, #32
 800586e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005870:	f7fc fc50 	bl	8002114 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b01      	cmp	r3, #1
 8005880:	d001      	beq.n	8005886 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005882:	2302      	movs	r3, #2
 8005884:	e1d1      	b.n	8005c2a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <HAL_SPI_Transmit+0x3a>
 800588c:	88fb      	ldrh	r3, [r7, #6]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e1c9      	b.n	8005c2a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_SPI_Transmit+0x4c>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e1c2      	b.n	8005c2a <HAL_SPI_Transmit+0x3d2>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2203      	movs	r2, #3
 80058b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	88fa      	ldrh	r2, [r7, #6]
 80058c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	88fa      	ldrh	r2, [r7, #6]
 80058ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80058fc:	d108      	bne.n	8005910 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	e009      	b.n	8005924 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005922:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	4b96      	ldr	r3, [pc, #600]	@ (8005b84 <HAL_SPI_Transmit+0x32c>)
 800592c:	4013      	ands	r3, r2
 800592e:	88f9      	ldrh	r1, [r7, #6]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	6812      	ldr	r2, [r2, #0]
 8005934:	430b      	orrs	r3, r1
 8005936:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0201 	orr.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005950:	d107      	bne.n	8005962 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005960:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	2b0f      	cmp	r3, #15
 8005968:	d947      	bls.n	80059fa <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800596a:	e03f      	b.n	80059ec <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b02      	cmp	r3, #2
 8005978:	d114      	bne.n	80059a4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6812      	ldr	r2, [r2, #0]
 8005984:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800598a:	1d1a      	adds	r2, r3, #4
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005996:	b29b      	uxth	r3, r3
 8005998:	3b01      	subs	r3, #1
 800599a:	b29a      	uxth	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80059a2:	e023      	b.n	80059ec <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059a4:	f7fc fbb6 	bl	8002114 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d803      	bhi.n	80059bc <HAL_SPI_Transmit+0x164>
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ba:	d102      	bne.n	80059c2 <HAL_SPI_Transmit+0x16a>
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d114      	bne.n	80059ec <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 fc70 	bl	80062a8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e11e      	b.n	8005c2a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1b9      	bne.n	800596c <HAL_SPI_Transmit+0x114>
 80059f8:	e0f1      	b.n	8005bde <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	2b07      	cmp	r3, #7
 8005a00:	f240 80e6 	bls.w	8005bd0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005a04:	e05d      	b.n	8005ac2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d132      	bne.n	8005a7a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d918      	bls.n	8005a52 <HAL_SPI_Transmit+0x1fa>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d014      	beq.n	8005a52 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6812      	ldr	r2, [r2, #0]
 8005a32:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a38:	1d1a      	adds	r2, r3, #4
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b02      	subs	r3, #2
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005a50:	e037      	b.n	8005ac2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a56:	881a      	ldrh	r2, [r3, #0]
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a60:	1c9a      	adds	r2, r3, #2
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005a78:	e023      	b.n	8005ac2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a7a:	f7fc fb4b 	bl	8002114 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d803      	bhi.n	8005a92 <HAL_SPI_Transmit+0x23a>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a90:	d102      	bne.n	8005a98 <HAL_SPI_Transmit+0x240>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d114      	bne.n	8005ac2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 fc05 	bl	80062a8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aa4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e0b3      	b.n	8005c2a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d19b      	bne.n	8005a06 <HAL_SPI_Transmit+0x1ae>
 8005ace:	e086      	b.n	8005bde <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d154      	bne.n	8005b88 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d918      	bls.n	8005b1c <HAL_SPI_Transmit+0x2c4>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aee:	2b40      	cmp	r3, #64	@ 0x40
 8005af0:	d914      	bls.n	8005b1c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6812      	ldr	r2, [r2, #0]
 8005afc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b02:	1d1a      	adds	r2, r3, #4
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	3b04      	subs	r3, #4
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005b1a:	e059      	b.n	8005bd0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d917      	bls.n	8005b58 <HAL_SPI_Transmit+0x300>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d013      	beq.n	8005b58 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b34:	881a      	ldrh	r2, [r3, #0]
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b3e:	1c9a      	adds	r2, r3, #2
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b02      	subs	r3, #2
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005b56:	e03b      	b.n	8005bd0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	3320      	adds	r3, #32
 8005b62:	7812      	ldrb	r2, [r2, #0]
 8005b64:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005b82:	e025      	b.n	8005bd0 <HAL_SPI_Transmit+0x378>
 8005b84:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b88:	f7fc fac4 	bl	8002114 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d803      	bhi.n	8005ba0 <HAL_SPI_Transmit+0x348>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9e:	d102      	bne.n	8005ba6 <HAL_SPI_Transmit+0x34e>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d114      	bne.n	8005bd0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 fb7e 	bl	80062a8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bb2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e02c      	b.n	8005c2a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f47f af79 	bne.w	8005ad0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2200      	movs	r2, #0
 8005be6:	2108      	movs	r1, #8
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 fbfd 	bl	80063e8 <SPI_WaitOnFlagUntilTimeout>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d007      	beq.n	8005c04 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bfa:	f043 0220 	orr.w	r2, r3, #32
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 fb4f 	bl	80062a8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e000      	b.n	8005c2a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8005c28:	2300      	movs	r3, #0
  }
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop

08005c34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08e      	sub	sp, #56	@ 0x38
 8005c38:	af02      	add	r7, sp, #8
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3320      	adds	r3, #32
 8005c48:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	3330      	adds	r3, #48	@ 0x30
 8005c50:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c56:	095b      	lsrs	r3, r3, #5
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c5e:	f7fc fa59 	bl	8002114 <HAL_GetTick>
 8005c62:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8005c64:	887b      	ldrh	r3, [r7, #2]
 8005c66:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8005c68:	887b      	ldrh	r3, [r7, #2]
 8005c6a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d001      	beq.n	8005c7c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e310      	b.n	800629e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d005      	beq.n	8005c8e <HAL_SPI_TransmitReceive+0x5a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d002      	beq.n	8005c8e <HAL_SPI_TransmitReceive+0x5a>
 8005c88:	887b      	ldrh	r3, [r7, #2]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e305      	b.n	800629e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d101      	bne.n	8005ca0 <HAL_SPI_TransmitReceive+0x6c>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e2fe      	b.n	800629e <HAL_SPI_TransmitReceive+0x66a>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2205      	movs	r2, #5
 8005cac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	887a      	ldrh	r2, [r7, #2]
 8005cc2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	887a      	ldrh	r2, [r7, #2]
 8005cca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	887a      	ldrh	r2, [r7, #2]
 8005cd8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	887a      	ldrh	r2, [r7, #2]
 8005ce0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8005cfe:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a70      	ldr	r2, [pc, #448]	@ (8005ec8 <HAL_SPI_TransmitReceive+0x294>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d009      	beq.n	8005d1e <HAL_SPI_TransmitReceive+0xea>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a6f      	ldr	r2, [pc, #444]	@ (8005ecc <HAL_SPI_TransmitReceive+0x298>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d004      	beq.n	8005d1e <HAL_SPI_TransmitReceive+0xea>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a6d      	ldr	r2, [pc, #436]	@ (8005ed0 <HAL_SPI_TransmitReceive+0x29c>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d102      	bne.n	8005d24 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8005d1e:	2310      	movs	r3, #16
 8005d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d22:	e001      	b.n	8005d28 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8005d24:	2308      	movs	r3, #8
 8005d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	4b69      	ldr	r3, [pc, #420]	@ (8005ed4 <HAL_SPI_TransmitReceive+0x2a0>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	8879      	ldrh	r1, [r7, #2]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	6812      	ldr	r2, [r2, #0]
 8005d38:	430b      	orrs	r3, r1
 8005d3a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0201 	orr.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d54:	d107      	bne.n	8005d66 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	2b0f      	cmp	r3, #15
 8005d6c:	f240 80a2 	bls.w	8005eb4 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8005d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d72:	089b      	lsrs	r3, r3, #2
 8005d74:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005d76:	e094      	b.n	8005ea2 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d120      	bne.n	8005dc8 <HAL_SPI_TransmitReceive+0x194>
 8005d86:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01d      	beq.n	8005dc8 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005d8c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005d8e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d92:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d217      	bcs.n	8005dc8 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6812      	ldr	r2, [r2, #0]
 8005da2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005da8:	1d1a      	adds	r2, r3, #4
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005dc6:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005dd0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d065      	beq.n	8005ea2 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d118      	bne.n	8005e16 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005dee:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005df4:	1d1a      	adds	r2, r3, #4
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e12:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005e14:	e045      	b.n	8005ea2 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005e16:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005e18:	8bfb      	ldrh	r3, [r7, #30]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d21d      	bcs.n	8005e5a <HAL_SPI_TransmitReceive+0x226>
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d018      	beq.n	8005e5a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e30:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005e32:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e38:	1d1a      	adds	r2, r3, #4
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e56:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005e58:	e023      	b.n	8005ea2 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e5a:	f7fc f95b 	bl	8002114 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d803      	bhi.n	8005e72 <HAL_SPI_TransmitReceive+0x23e>
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e70:	d102      	bne.n	8005e78 <HAL_SPI_TransmitReceive+0x244>
 8005e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d114      	bne.n	8005ea2 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f000 fa15 	bl	80062a8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e84:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e1fd      	b.n	800629e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005ea2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f47f af67 	bne.w	8005d78 <HAL_SPI_TransmitReceive+0x144>
 8005eaa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f47f af63 	bne.w	8005d78 <HAL_SPI_TransmitReceive+0x144>
 8005eb2:	e1ce      	b.n	8006252 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	2b07      	cmp	r3, #7
 8005eba:	f240 81c2 	bls.w	8006242 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8005ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec0:	085b      	lsrs	r3, r3, #1
 8005ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005ec4:	e0c9      	b.n	800605a <HAL_SPI_TransmitReceive+0x426>
 8005ec6:	bf00      	nop
 8005ec8:	40013000 	.word	0x40013000
 8005ecc:	40003800 	.word	0x40003800
 8005ed0:	40003c00 	.word	0x40003c00
 8005ed4:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d11f      	bne.n	8005f26 <HAL_SPI_TransmitReceive+0x2f2>
 8005ee6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d01c      	beq.n	8005f26 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005eec:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005eee:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d216      	bcs.n	8005f26 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005efc:	881a      	ldrh	r2, [r3, #0]
 8005efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f00:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f06:	1c9a      	adds	r2, r3, #2
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005f24:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	695b      	ldr	r3, [r3, #20]
 8005f2c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005f2e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 8092 	beq.w	800605a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	f003 0301 	and.w	r3, r3, #1
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d118      	bne.n	8005f76 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f48:	6a3a      	ldr	r2, [r7, #32]
 8005f4a:	8812      	ldrh	r2, [r2, #0]
 8005f4c:	b292      	uxth	r2, r2
 8005f4e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f54:	1c9a      	adds	r2, r3, #2
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f72:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005f74:	e071      	b.n	800605a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005f76:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005f78:	8bfb      	ldrh	r3, [r7, #30]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d228      	bcs.n	8005fd0 <HAL_SPI_TransmitReceive+0x39c>
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d023      	beq.n	8005fd0 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f8c:	6a3a      	ldr	r2, [r7, #32]
 8005f8e:	8812      	ldrh	r2, [r2, #0]
 8005f90:	b292      	uxth	r2, r2
 8005f92:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f98:	1c9a      	adds	r2, r3, #2
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fa2:	6a3a      	ldr	r2, [r7, #32]
 8005fa4:	8812      	ldrh	r2, [r2, #0]
 8005fa6:	b292      	uxth	r2, r2
 8005fa8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fae:	1c9a      	adds	r2, r3, #2
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	3b02      	subs	r3, #2
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005fcc:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005fce:	e044      	b.n	800605a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005fd0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d11d      	bne.n	8006012 <HAL_SPI_TransmitReceive+0x3de>
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d018      	beq.n	8006012 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fe4:	6a3a      	ldr	r2, [r7, #32]
 8005fe6:	8812      	ldrh	r2, [r2, #0]
 8005fe8:	b292      	uxth	r2, r2
 8005fea:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ff0:	1c9a      	adds	r2, r3, #2
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	3b01      	subs	r3, #1
 8006000:	b29a      	uxth	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800600e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006010:	e023      	b.n	800605a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006012:	f7fc f87f 	bl	8002114 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800601e:	429a      	cmp	r2, r3
 8006020:	d803      	bhi.n	800602a <HAL_SPI_TransmitReceive+0x3f6>
 8006022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006028:	d102      	bne.n	8006030 <HAL_SPI_TransmitReceive+0x3fc>
 800602a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800602c:	2b00      	cmp	r3, #0
 800602e:	d114      	bne.n	800605a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 f939 	bl	80062a8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800603c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e121      	b.n	800629e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800605a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800605c:	2b00      	cmp	r3, #0
 800605e:	f47f af3b 	bne.w	8005ed8 <HAL_SPI_TransmitReceive+0x2a4>
 8006062:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006064:	2b00      	cmp	r3, #0
 8006066:	f47f af37 	bne.w	8005ed8 <HAL_SPI_TransmitReceive+0x2a4>
 800606a:	e0f2      	b.n	8006252 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b02      	cmp	r3, #2
 8006078:	d121      	bne.n	80060be <HAL_SPI_TransmitReceive+0x48a>
 800607a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800607c:	2b00      	cmp	r3, #0
 800607e:	d01e      	beq.n	80060be <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006080:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006082:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006086:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006088:	429a      	cmp	r2, r3
 800608a:	d218      	bcs.n	80060be <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3320      	adds	r3, #32
 8006096:	7812      	ldrb	r2, [r2, #0]
 8006098:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80060bc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80060c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 80ba 	beq.w	8006242 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d11b      	bne.n	8006114 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060e8:	7812      	ldrb	r2, [r2, #0]
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006110:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006112:	e096      	b.n	8006242 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006114:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006116:	8bfb      	ldrh	r3, [r7, #30]
 8006118:	429a      	cmp	r2, r3
 800611a:	d24a      	bcs.n	80061b2 <HAL_SPI_TransmitReceive+0x57e>
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d045      	beq.n	80061b2 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006132:	7812      	ldrb	r2, [r2, #0]
 8006134:	b2d2      	uxtb	r2, r2
 8006136:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800614e:	7812      	ldrb	r2, [r2, #0]
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800616a:	7812      	ldrb	r2, [r2, #0]
 800616c:	b2d2      	uxtb	r2, r2
 800616e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006174:	1c5a      	adds	r2, r3, #1
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006186:	7812      	ldrb	r2, [r2, #0]
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800619c:	b29b      	uxth	r3, r3
 800619e:	3b04      	subs	r3, #4
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061ae:	853b      	strh	r3, [r7, #40]	@ 0x28
 80061b0:	e047      	b.n	8006242 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80061b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d820      	bhi.n	80061fa <HAL_SPI_TransmitReceive+0x5c6>
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d01b      	beq.n	80061fa <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061ce:	7812      	ldrb	r2, [r2, #0]
 80061d0:	b2d2      	uxtb	r2, r2
 80061d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	3b01      	subs	r3, #1
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061f6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80061f8:	e023      	b.n	8006242 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061fa:	f7fb ff8b 	bl	8002114 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006206:	429a      	cmp	r2, r3
 8006208:	d803      	bhi.n	8006212 <HAL_SPI_TransmitReceive+0x5de>
 800620a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800620c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006210:	d102      	bne.n	8006218 <HAL_SPI_TransmitReceive+0x5e4>
 8006212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006214:	2b00      	cmp	r3, #0
 8006216:	d114      	bne.n	8006242 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 f845 	bl	80062a8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006224:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e02d      	b.n	800629e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006242:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006244:	2b00      	cmp	r3, #0
 8006246:	f47f af11 	bne.w	800606c <HAL_SPI_TransmitReceive+0x438>
 800624a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800624c:	2b00      	cmp	r3, #0
 800624e:	f47f af0d 	bne.w	800606c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006258:	2200      	movs	r2, #0
 800625a:	2108      	movs	r1, #8
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 f8c3 	bl	80063e8 <SPI_WaitOnFlagUntilTimeout>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d007      	beq.n	8006278 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800626e:	f043 0220 	orr.w	r2, r3, #32
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f000 f815 	bl	80062a8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e000      	b.n	800629e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800629c:	2300      	movs	r3, #0
  }
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3730      	adds	r7, #48	@ 0x30
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop

080062a8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	699a      	ldr	r2, [r3, #24]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0208 	orr.w	r2, r2, #8
 80062c6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	699a      	ldr	r2, [r3, #24]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0210 	orr.w	r2, r2, #16
 80062d6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0201 	bic.w	r2, r2, #1
 80062e6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6919      	ldr	r1, [r3, #16]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	4b3c      	ldr	r3, [pc, #240]	@ (80063e4 <SPI_CloseTransfer+0x13c>)
 80062f4:	400b      	ands	r3, r1
 80062f6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689a      	ldr	r2, [r3, #8]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006306:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b04      	cmp	r3, #4
 8006312:	d014      	beq.n	800633e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00f      	beq.n	800633e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006324:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	699a      	ldr	r2, [r3, #24]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f042 0220 	orr.w	r2, r2, #32
 800633c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b03      	cmp	r3, #3
 8006348:	d014      	beq.n	8006374 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00f      	beq.n	8006374 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800635a:	f043 0204 	orr.w	r2, r3, #4
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	699a      	ldr	r2, [r3, #24]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006372:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00f      	beq.n	800639e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006384:	f043 0201 	orr.w	r2, r3, #1
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	699a      	ldr	r2, [r3, #24]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800639c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00f      	beq.n	80063c8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063ae:	f043 0208 	orr.w	r2, r3, #8
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	699a      	ldr	r2, [r3, #24]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063c6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80063d8:	bf00      	nop
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	fffffc90 	.word	0xfffffc90

080063e8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	603b      	str	r3, [r7, #0]
 80063f4:	4613      	mov	r3, r2
 80063f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80063f8:	e010      	b.n	800641c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063fa:	f7fb fe8b 	bl	8002114 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	429a      	cmp	r2, r3
 8006408:	d803      	bhi.n	8006412 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006410:	d102      	bne.n	8006418 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d101      	bne.n	800641c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e00f      	b.n	800643c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695a      	ldr	r2, [r3, #20]
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	4013      	ands	r3, r2
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	429a      	cmp	r2, r3
 800642a:	bf0c      	ite	eq
 800642c:	2301      	moveq	r3, #1
 800642e:	2300      	movne	r3, #0
 8006430:	b2db      	uxtb	r3, r3
 8006432:	461a      	mov	r2, r3
 8006434:	79fb      	ldrb	r3, [r7, #7]
 8006436:	429a      	cmp	r2, r3
 8006438:	d0df      	beq.n	80063fa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006450:	095b      	lsrs	r3, r3, #5
 8006452:	3301      	adds	r3, #1
 8006454:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	3301      	adds	r3, #1
 800645c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	3307      	adds	r3, #7
 8006462:	08db      	lsrs	r3, r3, #3
 8006464:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	fb02 f303 	mul.w	r3, r2, r3
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b082      	sub	sp, #8
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e049      	b.n	8006520 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d106      	bne.n	80064a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7fb fb6d 	bl	8001b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2202      	movs	r2, #2
 80064aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	3304      	adds	r3, #4
 80064b6:	4619      	mov	r1, r3
 80064b8:	4610      	mov	r0, r2
 80064ba:	f000 fb47 	bl	8006b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b01      	cmp	r3, #1
 800653a:	d001      	beq.n	8006540 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e054      	b.n	80065ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2202      	movs	r2, #2
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0201 	orr.w	r2, r2, #1
 8006556:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a26      	ldr	r2, [pc, #152]	@ (80065f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d022      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x80>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800656a:	d01d      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x80>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a22      	ldr	r2, [pc, #136]	@ (80065fc <HAL_TIM_Base_Start_IT+0xd4>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d018      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x80>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a21      	ldr	r2, [pc, #132]	@ (8006600 <HAL_TIM_Base_Start_IT+0xd8>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d013      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x80>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a1f      	ldr	r2, [pc, #124]	@ (8006604 <HAL_TIM_Base_Start_IT+0xdc>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00e      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x80>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a1e      	ldr	r2, [pc, #120]	@ (8006608 <HAL_TIM_Base_Start_IT+0xe0>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d009      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x80>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a1c      	ldr	r2, [pc, #112]	@ (800660c <HAL_TIM_Base_Start_IT+0xe4>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d004      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x80>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a1b      	ldr	r2, [pc, #108]	@ (8006610 <HAL_TIM_Base_Start_IT+0xe8>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d115      	bne.n	80065d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689a      	ldr	r2, [r3, #8]
 80065ae:	4b19      	ldr	r3, [pc, #100]	@ (8006614 <HAL_TIM_Base_Start_IT+0xec>)
 80065b0:	4013      	ands	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2b06      	cmp	r3, #6
 80065b8:	d015      	beq.n	80065e6 <HAL_TIM_Base_Start_IT+0xbe>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065c0:	d011      	beq.n	80065e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f042 0201 	orr.w	r2, r2, #1
 80065d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d2:	e008      	b.n	80065e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0201 	orr.w	r2, r2, #1
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	e000      	b.n	80065e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	40010000 	.word	0x40010000
 80065fc:	40000400 	.word	0x40000400
 8006600:	40000800 	.word	0x40000800
 8006604:	40000c00 	.word	0x40000c00
 8006608:	40010400 	.word	0x40010400
 800660c:	40001800 	.word	0x40001800
 8006610:	40014000 	.word	0x40014000
 8006614:	00010007 	.word	0x00010007

08006618 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e049      	b.n	80066be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7fb fa54 	bl	8001aec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3304      	adds	r3, #4
 8006654:	4619      	mov	r1, r3
 8006656:	4610      	mov	r0, r2
 8006658:	f000 fa78 	bl	8006b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d020      	beq.n	800672a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d01b      	beq.n	800672a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f06f 0202 	mvn.w	r2, #2
 80066fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	f003 0303 	and.w	r3, r3, #3
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f9fd 	bl	8006b10 <HAL_TIM_IC_CaptureCallback>
 8006716:	e005      	b.n	8006724 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f9ef 	bl	8006afc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fa00 	bl	8006b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b00      	cmp	r3, #0
 8006732:	d020      	beq.n	8006776 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f003 0304 	and.w	r3, r3, #4
 800673a:	2b00      	cmp	r3, #0
 800673c:	d01b      	beq.n	8006776 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f06f 0204 	mvn.w	r2, #4
 8006746:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006758:	2b00      	cmp	r3, #0
 800675a:	d003      	beq.n	8006764 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f9d7 	bl	8006b10 <HAL_TIM_IC_CaptureCallback>
 8006762:	e005      	b.n	8006770 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f9c9 	bl	8006afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f9da 	bl	8006b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f003 0308 	and.w	r3, r3, #8
 800677c:	2b00      	cmp	r3, #0
 800677e:	d020      	beq.n	80067c2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f003 0308 	and.w	r3, r3, #8
 8006786:	2b00      	cmp	r3, #0
 8006788:	d01b      	beq.n	80067c2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f06f 0208 	mvn.w	r2, #8
 8006792:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2204      	movs	r2, #4
 8006798:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	f003 0303 	and.w	r3, r3, #3
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f9b1 	bl	8006b10 <HAL_TIM_IC_CaptureCallback>
 80067ae:	e005      	b.n	80067bc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f9a3 	bl	8006afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f9b4 	bl	8006b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	f003 0310 	and.w	r3, r3, #16
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d020      	beq.n	800680e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f003 0310 	and.w	r3, r3, #16
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d01b      	beq.n	800680e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f06f 0210 	mvn.w	r2, #16
 80067de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2208      	movs	r2, #8
 80067e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	69db      	ldr	r3, [r3, #28]
 80067ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d003      	beq.n	80067fc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f98b 	bl	8006b10 <HAL_TIM_IC_CaptureCallback>
 80067fa:	e005      	b.n	8006808 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f97d 	bl	8006afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f98e 	bl	8006b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00c      	beq.n	8006832 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d007      	beq.n	8006832 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f06f 0201 	mvn.w	r2, #1
 800682a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7fb f891 	bl	8001954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006838:	2b00      	cmp	r3, #0
 800683a:	d104      	bne.n	8006846 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00c      	beq.n	8006860 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800684c:	2b00      	cmp	r3, #0
 800684e:	d007      	beq.n	8006860 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fe02 	bl	8007464 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00c      	beq.n	8006884 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006870:	2b00      	cmp	r3, #0
 8006872:	d007      	beq.n	8006884 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800687c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fdfa 	bl	8007478 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00c      	beq.n	80068a8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006894:	2b00      	cmp	r3, #0
 8006896:	d007      	beq.n	80068a8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80068a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f948 	bl	8006b38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f003 0320 	and.w	r3, r3, #32
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00c      	beq.n	80068cc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f003 0320 	and.w	r3, r3, #32
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d007      	beq.n	80068cc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f06f 0220 	mvn.w	r2, #32
 80068c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fdc2 	bl	8007450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068cc:	bf00      	nop
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068e0:	2300      	movs	r3, #0
 80068e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d101      	bne.n	80068f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068ee:	2302      	movs	r3, #2
 80068f0:	e0ff      	b.n	8006af2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b14      	cmp	r3, #20
 80068fe:	f200 80f0 	bhi.w	8006ae2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006902:	a201      	add	r2, pc, #4	@ (adr r2, 8006908 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006908:	0800695d 	.word	0x0800695d
 800690c:	08006ae3 	.word	0x08006ae3
 8006910:	08006ae3 	.word	0x08006ae3
 8006914:	08006ae3 	.word	0x08006ae3
 8006918:	0800699d 	.word	0x0800699d
 800691c:	08006ae3 	.word	0x08006ae3
 8006920:	08006ae3 	.word	0x08006ae3
 8006924:	08006ae3 	.word	0x08006ae3
 8006928:	080069df 	.word	0x080069df
 800692c:	08006ae3 	.word	0x08006ae3
 8006930:	08006ae3 	.word	0x08006ae3
 8006934:	08006ae3 	.word	0x08006ae3
 8006938:	08006a1f 	.word	0x08006a1f
 800693c:	08006ae3 	.word	0x08006ae3
 8006940:	08006ae3 	.word	0x08006ae3
 8006944:	08006ae3 	.word	0x08006ae3
 8006948:	08006a61 	.word	0x08006a61
 800694c:	08006ae3 	.word	0x08006ae3
 8006950:	08006ae3 	.word	0x08006ae3
 8006954:	08006ae3 	.word	0x08006ae3
 8006958:	08006aa1 	.word	0x08006aa1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68b9      	ldr	r1, [r7, #8]
 8006962:	4618      	mov	r0, r3
 8006964:	f000 f992 	bl	8006c8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699a      	ldr	r2, [r3, #24]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0208 	orr.w	r2, r2, #8
 8006976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699a      	ldr	r2, [r3, #24]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 0204 	bic.w	r2, r2, #4
 8006986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6999      	ldr	r1, [r3, #24]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	691a      	ldr	r2, [r3, #16]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	619a      	str	r2, [r3, #24]
      break;
 800699a:	e0a5      	b.n	8006ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68b9      	ldr	r1, [r7, #8]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fa02 	bl	8006dac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699a      	ldr	r2, [r3, #24]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699a      	ldr	r2, [r3, #24]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6999      	ldr	r1, [r3, #24]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	021a      	lsls	r2, r3, #8
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	619a      	str	r2, [r3, #24]
      break;
 80069dc:	e084      	b.n	8006ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68b9      	ldr	r1, [r7, #8]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 fa6b 	bl	8006ec0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69da      	ldr	r2, [r3, #28]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f042 0208 	orr.w	r2, r2, #8
 80069f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69da      	ldr	r2, [r3, #28]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f022 0204 	bic.w	r2, r2, #4
 8006a08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	69d9      	ldr	r1, [r3, #28]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	691a      	ldr	r2, [r3, #16]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	61da      	str	r2, [r3, #28]
      break;
 8006a1c:	e064      	b.n	8006ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68b9      	ldr	r1, [r7, #8]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 fad3 	bl	8006fd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	69da      	ldr	r2, [r3, #28]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	69da      	ldr	r2, [r3, #28]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	69d9      	ldr	r1, [r3, #28]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	021a      	lsls	r2, r3, #8
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	61da      	str	r2, [r3, #28]
      break;
 8006a5e:	e043      	b.n	8006ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68b9      	ldr	r1, [r7, #8]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 fb1c 	bl	80070a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 0208 	orr.w	r2, r2, #8
 8006a7a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 0204 	bic.w	r2, r2, #4
 8006a8a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	691a      	ldr	r2, [r3, #16]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006a9e:	e023      	b.n	8006ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68b9      	ldr	r1, [r7, #8]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 fb60 	bl	800716c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006aba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006aca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	021a      	lsls	r2, r3, #8
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006ae0:	e002      	b.n	8006ae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ae6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop

08006afc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a43      	ldr	r2, [pc, #268]	@ (8006c6c <TIM_Base_SetConfig+0x120>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d013      	beq.n	8006b8c <TIM_Base_SetConfig+0x40>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b6a:	d00f      	beq.n	8006b8c <TIM_Base_SetConfig+0x40>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a40      	ldr	r2, [pc, #256]	@ (8006c70 <TIM_Base_SetConfig+0x124>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d00b      	beq.n	8006b8c <TIM_Base_SetConfig+0x40>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a3f      	ldr	r2, [pc, #252]	@ (8006c74 <TIM_Base_SetConfig+0x128>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d007      	beq.n	8006b8c <TIM_Base_SetConfig+0x40>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a3e      	ldr	r2, [pc, #248]	@ (8006c78 <TIM_Base_SetConfig+0x12c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d003      	beq.n	8006b8c <TIM_Base_SetConfig+0x40>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a3d      	ldr	r2, [pc, #244]	@ (8006c7c <TIM_Base_SetConfig+0x130>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d108      	bne.n	8006b9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a32      	ldr	r2, [pc, #200]	@ (8006c6c <TIM_Base_SetConfig+0x120>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d01f      	beq.n	8006be6 <TIM_Base_SetConfig+0x9a>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bac:	d01b      	beq.n	8006be6 <TIM_Base_SetConfig+0x9a>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a2f      	ldr	r2, [pc, #188]	@ (8006c70 <TIM_Base_SetConfig+0x124>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d017      	beq.n	8006be6 <TIM_Base_SetConfig+0x9a>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a2e      	ldr	r2, [pc, #184]	@ (8006c74 <TIM_Base_SetConfig+0x128>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d013      	beq.n	8006be6 <TIM_Base_SetConfig+0x9a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a2d      	ldr	r2, [pc, #180]	@ (8006c78 <TIM_Base_SetConfig+0x12c>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d00f      	beq.n	8006be6 <TIM_Base_SetConfig+0x9a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a2c      	ldr	r2, [pc, #176]	@ (8006c7c <TIM_Base_SetConfig+0x130>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d00b      	beq.n	8006be6 <TIM_Base_SetConfig+0x9a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a2b      	ldr	r2, [pc, #172]	@ (8006c80 <TIM_Base_SetConfig+0x134>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d007      	beq.n	8006be6 <TIM_Base_SetConfig+0x9a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a2a      	ldr	r2, [pc, #168]	@ (8006c84 <TIM_Base_SetConfig+0x138>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d003      	beq.n	8006be6 <TIM_Base_SetConfig+0x9a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a29      	ldr	r2, [pc, #164]	@ (8006c88 <TIM_Base_SetConfig+0x13c>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d108      	bne.n	8006bf8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a14      	ldr	r2, [pc, #80]	@ (8006c6c <TIM_Base_SetConfig+0x120>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00f      	beq.n	8006c3e <TIM_Base_SetConfig+0xf2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a16      	ldr	r2, [pc, #88]	@ (8006c7c <TIM_Base_SetConfig+0x130>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d00b      	beq.n	8006c3e <TIM_Base_SetConfig+0xf2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a15      	ldr	r2, [pc, #84]	@ (8006c80 <TIM_Base_SetConfig+0x134>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d007      	beq.n	8006c3e <TIM_Base_SetConfig+0xf2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a14      	ldr	r2, [pc, #80]	@ (8006c84 <TIM_Base_SetConfig+0x138>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d003      	beq.n	8006c3e <TIM_Base_SetConfig+0xf2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a13      	ldr	r2, [pc, #76]	@ (8006c88 <TIM_Base_SetConfig+0x13c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d103      	bne.n	8006c46 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	691a      	ldr	r2, [r3, #16]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f043 0204 	orr.w	r2, r3, #4
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	601a      	str	r2, [r3, #0]
}
 8006c5e:	bf00      	nop
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	40010000 	.word	0x40010000
 8006c70:	40000400 	.word	0x40000400
 8006c74:	40000800 	.word	0x40000800
 8006c78:	40000c00 	.word	0x40000c00
 8006c7c:	40010400 	.word	0x40010400
 8006c80:	40014000 	.word	0x40014000
 8006c84:	40014400 	.word	0x40014400
 8006c88:	40014800 	.word	0x40014800

08006c8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	f023 0201 	bic.w	r2, r3, #1
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	4b37      	ldr	r3, [pc, #220]	@ (8006d94 <TIM_OC1_SetConfig+0x108>)
 8006cb8:	4013      	ands	r3, r2
 8006cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f023 0303 	bic.w	r3, r3, #3
 8006cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f023 0302 	bic.w	r3, r3, #2
 8006cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a2d      	ldr	r2, [pc, #180]	@ (8006d98 <TIM_OC1_SetConfig+0x10c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d00f      	beq.n	8006d08 <TIM_OC1_SetConfig+0x7c>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a2c      	ldr	r2, [pc, #176]	@ (8006d9c <TIM_OC1_SetConfig+0x110>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d00b      	beq.n	8006d08 <TIM_OC1_SetConfig+0x7c>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a2b      	ldr	r2, [pc, #172]	@ (8006da0 <TIM_OC1_SetConfig+0x114>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d007      	beq.n	8006d08 <TIM_OC1_SetConfig+0x7c>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a2a      	ldr	r2, [pc, #168]	@ (8006da4 <TIM_OC1_SetConfig+0x118>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d003      	beq.n	8006d08 <TIM_OC1_SetConfig+0x7c>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a29      	ldr	r2, [pc, #164]	@ (8006da8 <TIM_OC1_SetConfig+0x11c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d10c      	bne.n	8006d22 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f023 0308 	bic.w	r3, r3, #8
 8006d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f023 0304 	bic.w	r3, r3, #4
 8006d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a1c      	ldr	r2, [pc, #112]	@ (8006d98 <TIM_OC1_SetConfig+0x10c>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d00f      	beq.n	8006d4a <TIM_OC1_SetConfig+0xbe>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8006d9c <TIM_OC1_SetConfig+0x110>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d00b      	beq.n	8006d4a <TIM_OC1_SetConfig+0xbe>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a1a      	ldr	r2, [pc, #104]	@ (8006da0 <TIM_OC1_SetConfig+0x114>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d007      	beq.n	8006d4a <TIM_OC1_SetConfig+0xbe>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a19      	ldr	r2, [pc, #100]	@ (8006da4 <TIM_OC1_SetConfig+0x118>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d003      	beq.n	8006d4a <TIM_OC1_SetConfig+0xbe>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a18      	ldr	r2, [pc, #96]	@ (8006da8 <TIM_OC1_SetConfig+0x11c>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d111      	bne.n	8006d6e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	621a      	str	r2, [r3, #32]
}
 8006d88:	bf00      	nop
 8006d8a:	371c      	adds	r7, #28
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	fffeff8f 	.word	0xfffeff8f
 8006d98:	40010000 	.word	0x40010000
 8006d9c:	40010400 	.word	0x40010400
 8006da0:	40014000 	.word	0x40014000
 8006da4:	40014400 	.word	0x40014400
 8006da8:	40014800 	.word	0x40014800

08006dac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b087      	sub	sp, #28
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	f023 0210 	bic.w	r2, r3, #16
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	4b34      	ldr	r3, [pc, #208]	@ (8006ea8 <TIM_OC2_SetConfig+0xfc>)
 8006dd8:	4013      	ands	r3, r2
 8006dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	021b      	lsls	r3, r3, #8
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f023 0320 	bic.w	r3, r3, #32
 8006df6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	011b      	lsls	r3, r3, #4
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a29      	ldr	r2, [pc, #164]	@ (8006eac <TIM_OC2_SetConfig+0x100>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d003      	beq.n	8006e14 <TIM_OC2_SetConfig+0x68>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a28      	ldr	r2, [pc, #160]	@ (8006eb0 <TIM_OC2_SetConfig+0x104>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d10d      	bne.n	8006e30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	011b      	lsls	r3, r3, #4
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a1e      	ldr	r2, [pc, #120]	@ (8006eac <TIM_OC2_SetConfig+0x100>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00f      	beq.n	8006e58 <TIM_OC2_SetConfig+0xac>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a1d      	ldr	r2, [pc, #116]	@ (8006eb0 <TIM_OC2_SetConfig+0x104>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d00b      	beq.n	8006e58 <TIM_OC2_SetConfig+0xac>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a1c      	ldr	r2, [pc, #112]	@ (8006eb4 <TIM_OC2_SetConfig+0x108>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d007      	beq.n	8006e58 <TIM_OC2_SetConfig+0xac>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8006eb8 <TIM_OC2_SetConfig+0x10c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d003      	beq.n	8006e58 <TIM_OC2_SetConfig+0xac>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a1a      	ldr	r2, [pc, #104]	@ (8006ebc <TIM_OC2_SetConfig+0x110>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d113      	bne.n	8006e80 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	621a      	str	r2, [r3, #32]
}
 8006e9a:	bf00      	nop
 8006e9c:	371c      	adds	r7, #28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	feff8fff 	.word	0xfeff8fff
 8006eac:	40010000 	.word	0x40010000
 8006eb0:	40010400 	.word	0x40010400
 8006eb4:	40014000 	.word	0x40014000
 8006eb8:	40014400 	.word	0x40014400
 8006ebc:	40014800 	.word	0x40014800

08006ec0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	4b33      	ldr	r3, [pc, #204]	@ (8006fb8 <TIM_OC3_SetConfig+0xf8>)
 8006eec:	4013      	ands	r3, r2
 8006eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f023 0303 	bic.w	r3, r3, #3
 8006ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	021b      	lsls	r3, r3, #8
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a28      	ldr	r2, [pc, #160]	@ (8006fbc <TIM_OC3_SetConfig+0xfc>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d003      	beq.n	8006f26 <TIM_OC3_SetConfig+0x66>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a27      	ldr	r2, [pc, #156]	@ (8006fc0 <TIM_OC3_SetConfig+0x100>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d10d      	bne.n	8006f42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	021b      	lsls	r3, r3, #8
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a1d      	ldr	r2, [pc, #116]	@ (8006fbc <TIM_OC3_SetConfig+0xfc>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d00f      	beq.n	8006f6a <TIM_OC3_SetConfig+0xaa>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a1c      	ldr	r2, [pc, #112]	@ (8006fc0 <TIM_OC3_SetConfig+0x100>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d00b      	beq.n	8006f6a <TIM_OC3_SetConfig+0xaa>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a1b      	ldr	r2, [pc, #108]	@ (8006fc4 <TIM_OC3_SetConfig+0x104>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d007      	beq.n	8006f6a <TIM_OC3_SetConfig+0xaa>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a1a      	ldr	r2, [pc, #104]	@ (8006fc8 <TIM_OC3_SetConfig+0x108>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d003      	beq.n	8006f6a <TIM_OC3_SetConfig+0xaa>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a19      	ldr	r2, [pc, #100]	@ (8006fcc <TIM_OC3_SetConfig+0x10c>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d113      	bne.n	8006f92 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	011b      	lsls	r3, r3, #4
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	011b      	lsls	r3, r3, #4
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	621a      	str	r2, [r3, #32]
}
 8006fac:	bf00      	nop
 8006fae:	371c      	adds	r7, #28
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	fffeff8f 	.word	0xfffeff8f
 8006fbc:	40010000 	.word	0x40010000
 8006fc0:	40010400 	.word	0x40010400
 8006fc4:	40014000 	.word	0x40014000
 8006fc8:	40014400 	.word	0x40014400
 8006fcc:	40014800 	.word	0x40014800

08006fd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	4b24      	ldr	r3, [pc, #144]	@ (800708c <TIM_OC4_SetConfig+0xbc>)
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	021b      	lsls	r3, r3, #8
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	4313      	orrs	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800701a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	031b      	lsls	r3, r3, #12
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	4313      	orrs	r3, r2
 8007026:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a19      	ldr	r2, [pc, #100]	@ (8007090 <TIM_OC4_SetConfig+0xc0>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d00f      	beq.n	8007050 <TIM_OC4_SetConfig+0x80>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a18      	ldr	r2, [pc, #96]	@ (8007094 <TIM_OC4_SetConfig+0xc4>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d00b      	beq.n	8007050 <TIM_OC4_SetConfig+0x80>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a17      	ldr	r2, [pc, #92]	@ (8007098 <TIM_OC4_SetConfig+0xc8>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d007      	beq.n	8007050 <TIM_OC4_SetConfig+0x80>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a16      	ldr	r2, [pc, #88]	@ (800709c <TIM_OC4_SetConfig+0xcc>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d003      	beq.n	8007050 <TIM_OC4_SetConfig+0x80>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a15      	ldr	r2, [pc, #84]	@ (80070a0 <TIM_OC4_SetConfig+0xd0>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d109      	bne.n	8007064 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007056:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	019b      	lsls	r3, r3, #6
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	4313      	orrs	r3, r2
 8007062:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	621a      	str	r2, [r3, #32]
}
 800707e:	bf00      	nop
 8007080:	371c      	adds	r7, #28
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	feff8fff 	.word	0xfeff8fff
 8007090:	40010000 	.word	0x40010000
 8007094:	40010400 	.word	0x40010400
 8007098:	40014000 	.word	0x40014000
 800709c:	40014400 	.word	0x40014400
 80070a0:	40014800 	.word	0x40014800

080070a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b087      	sub	sp, #28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a1b      	ldr	r3, [r3, #32]
 80070b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	4b21      	ldr	r3, [pc, #132]	@ (8007154 <TIM_OC5_SetConfig+0xb0>)
 80070d0:	4013      	ands	r3, r2
 80070d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	4313      	orrs	r3, r2
 80070dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80070e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	041b      	lsls	r3, r3, #16
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a18      	ldr	r2, [pc, #96]	@ (8007158 <TIM_OC5_SetConfig+0xb4>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d00f      	beq.n	800711a <TIM_OC5_SetConfig+0x76>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a17      	ldr	r2, [pc, #92]	@ (800715c <TIM_OC5_SetConfig+0xb8>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d00b      	beq.n	800711a <TIM_OC5_SetConfig+0x76>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a16      	ldr	r2, [pc, #88]	@ (8007160 <TIM_OC5_SetConfig+0xbc>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d007      	beq.n	800711a <TIM_OC5_SetConfig+0x76>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a15      	ldr	r2, [pc, #84]	@ (8007164 <TIM_OC5_SetConfig+0xc0>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d003      	beq.n	800711a <TIM_OC5_SetConfig+0x76>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a14      	ldr	r2, [pc, #80]	@ (8007168 <TIM_OC5_SetConfig+0xc4>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d109      	bne.n	800712e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007120:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	021b      	lsls	r3, r3, #8
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	4313      	orrs	r3, r2
 800712c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	621a      	str	r2, [r3, #32]
}
 8007148:	bf00      	nop
 800714a:	371c      	adds	r7, #28
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	fffeff8f 	.word	0xfffeff8f
 8007158:	40010000 	.word	0x40010000
 800715c:	40010400 	.word	0x40010400
 8007160:	40014000 	.word	0x40014000
 8007164:	40014400 	.word	0x40014400
 8007168:	40014800 	.word	0x40014800

0800716c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a1b      	ldr	r3, [r3, #32]
 8007180:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	4b22      	ldr	r3, [pc, #136]	@ (8007220 <TIM_OC6_SetConfig+0xb4>)
 8007198:	4013      	ands	r3, r2
 800719a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	021b      	lsls	r3, r3, #8
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80071ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	051b      	lsls	r3, r3, #20
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a19      	ldr	r2, [pc, #100]	@ (8007224 <TIM_OC6_SetConfig+0xb8>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d00f      	beq.n	80071e4 <TIM_OC6_SetConfig+0x78>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a18      	ldr	r2, [pc, #96]	@ (8007228 <TIM_OC6_SetConfig+0xbc>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d00b      	beq.n	80071e4 <TIM_OC6_SetConfig+0x78>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a17      	ldr	r2, [pc, #92]	@ (800722c <TIM_OC6_SetConfig+0xc0>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d007      	beq.n	80071e4 <TIM_OC6_SetConfig+0x78>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a16      	ldr	r2, [pc, #88]	@ (8007230 <TIM_OC6_SetConfig+0xc4>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d003      	beq.n	80071e4 <TIM_OC6_SetConfig+0x78>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a15      	ldr	r2, [pc, #84]	@ (8007234 <TIM_OC6_SetConfig+0xc8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d109      	bne.n	80071f8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	029b      	lsls	r3, r3, #10
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	621a      	str	r2, [r3, #32]
}
 8007212:	bf00      	nop
 8007214:	371c      	adds	r7, #28
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	feff8fff 	.word	0xfeff8fff
 8007224:	40010000 	.word	0x40010000
 8007228:	40010400 	.word	0x40010400
 800722c:	40014000 	.word	0x40014000
 8007230:	40014400 	.word	0x40014400
 8007234:	40014800 	.word	0x40014800

08007238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007248:	2b01      	cmp	r3, #1
 800724a:	d101      	bne.n	8007250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800724c:	2302      	movs	r3, #2
 800724e:	e06d      	b.n	800732c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a30      	ldr	r2, [pc, #192]	@ (8007338 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d004      	beq.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a2f      	ldr	r2, [pc, #188]	@ (800733c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d108      	bne.n	8007296 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800728a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	4313      	orrs	r3, r2
 8007294:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800729c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a20      	ldr	r2, [pc, #128]	@ (8007338 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d022      	beq.n	8007300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072c2:	d01d      	beq.n	8007300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007340 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d018      	beq.n	8007300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a1c      	ldr	r2, [pc, #112]	@ (8007344 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d013      	beq.n	8007300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a1a      	ldr	r2, [pc, #104]	@ (8007348 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d00e      	beq.n	8007300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a15      	ldr	r2, [pc, #84]	@ (800733c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d009      	beq.n	8007300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a16      	ldr	r2, [pc, #88]	@ (800734c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d004      	beq.n	8007300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a15      	ldr	r2, [pc, #84]	@ (8007350 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d10c      	bne.n	800731a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007306:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	4313      	orrs	r3, r2
 8007310:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3714      	adds	r7, #20
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	40010000 	.word	0x40010000
 800733c:	40010400 	.word	0x40010400
 8007340:	40000400 	.word	0x40000400
 8007344:	40000800 	.word	0x40000800
 8007348:	40000c00 	.word	0x40000c00
 800734c:	40001800 	.word	0x40001800
 8007350:	40014000 	.word	0x40014000

08007354 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007368:	2b01      	cmp	r3, #1
 800736a:	d101      	bne.n	8007370 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800736c:	2302      	movs	r3, #2
 800736e:	e065      	b.n	800743c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	4313      	orrs	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	4313      	orrs	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	4313      	orrs	r3, r2
 80073a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d6:	4313      	orrs	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	041b      	lsls	r3, r3, #16
 80073e6:	4313      	orrs	r3, r2
 80073e8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a16      	ldr	r2, [pc, #88]	@ (8007448 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d004      	beq.n	80073fe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a14      	ldr	r2, [pc, #80]	@ (800744c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d115      	bne.n	800742a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007408:	051b      	lsls	r3, r3, #20
 800740a:	4313      	orrs	r3, r2
 800740c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	4313      	orrs	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	4313      	orrs	r3, r2
 8007428:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	40010000 	.word	0x40010000
 800744c:	40010400 	.word	0x40010400

08007450 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e042      	b.n	8007524 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d106      	bne.n	80074b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7fa fc0d 	bl	8001cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2224      	movs	r2, #36	@ 0x24
 80074ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f022 0201 	bic.w	r2, r2, #1
 80074cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d002      	beq.n	80074dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fe1e 	bl	8008118 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 f8b3 	bl	8007648 <UART_SetConfig>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d101      	bne.n	80074ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e01b      	b.n	8007524 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80074fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689a      	ldr	r2, [r3, #8]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800750a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0201 	orr.w	r2, r2, #1
 800751a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fe9d 	bl	800825c <UART_CheckIdleState>
 8007522:	4603      	mov	r3, r0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b08a      	sub	sp, #40	@ 0x28
 8007530:	af02      	add	r7, sp, #8
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	603b      	str	r3, [r7, #0]
 8007538:	4613      	mov	r3, r2
 800753a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007542:	2b20      	cmp	r3, #32
 8007544:	d17b      	bne.n	800763e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d002      	beq.n	8007552 <HAL_UART_Transmit+0x26>
 800754c:	88fb      	ldrh	r3, [r7, #6]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e074      	b.n	8007640 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2221      	movs	r2, #33	@ 0x21
 8007562:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007566:	f7fa fdd5 	bl	8002114 <HAL_GetTick>
 800756a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	88fa      	ldrh	r2, [r7, #6]
 8007570:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	88fa      	ldrh	r2, [r7, #6]
 8007578:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007584:	d108      	bne.n	8007598 <HAL_UART_Transmit+0x6c>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d104      	bne.n	8007598 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800758e:	2300      	movs	r3, #0
 8007590:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	61bb      	str	r3, [r7, #24]
 8007596:	e003      	b.n	80075a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800759c:	2300      	movs	r3, #0
 800759e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80075a0:	e030      	b.n	8007604 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2200      	movs	r2, #0
 80075aa:	2180      	movs	r1, #128	@ 0x80
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 feff 	bl	80083b0 <UART_WaitOnFlagUntilTimeout>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d005      	beq.n	80075c4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2220      	movs	r2, #32
 80075bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e03d      	b.n	8007640 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10b      	bne.n	80075e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	881b      	ldrh	r3, [r3, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075d8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	3302      	adds	r3, #2
 80075de:	61bb      	str	r3, [r7, #24]
 80075e0:	e007      	b.n	80075f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	781a      	ldrb	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	3301      	adds	r3, #1
 80075f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	3b01      	subs	r3, #1
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800760a:	b29b      	uxth	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1c8      	bne.n	80075a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	2200      	movs	r2, #0
 8007618:	2140      	movs	r1, #64	@ 0x40
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 fec8 	bl	80083b0 <UART_WaitOnFlagUntilTimeout>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d005      	beq.n	8007632 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2220      	movs	r2, #32
 800762a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e006      	b.n	8007640 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2220      	movs	r2, #32
 8007636:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	e000      	b.n	8007640 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800763e:	2302      	movs	r3, #2
  }
}
 8007640:	4618      	mov	r0, r3
 8007642:	3720      	adds	r7, #32
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800764c:	b092      	sub	sp, #72	@ 0x48
 800764e:	af00      	add	r7, sp, #0
 8007650:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	689a      	ldr	r2, [r3, #8]
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	431a      	orrs	r2, r3
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	431a      	orrs	r2, r3
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	69db      	ldr	r3, [r3, #28]
 800766c:	4313      	orrs	r3, r2
 800766e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	4bbe      	ldr	r3, [pc, #760]	@ (8007970 <UART_SetConfig+0x328>)
 8007678:	4013      	ands	r3, r2
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	6812      	ldr	r2, [r2, #0]
 800767e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007680:	430b      	orrs	r3, r1
 8007682:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	68da      	ldr	r2, [r3, #12]
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	430a      	orrs	r2, r1
 8007698:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4ab3      	ldr	r2, [pc, #716]	@ (8007974 <UART_SetConfig+0x32c>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d004      	beq.n	80076b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076b0:	4313      	orrs	r3, r2
 80076b2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689a      	ldr	r2, [r3, #8]
 80076ba:	4baf      	ldr	r3, [pc, #700]	@ (8007978 <UART_SetConfig+0x330>)
 80076bc:	4013      	ands	r3, r2
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	6812      	ldr	r2, [r2, #0]
 80076c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80076c4:	430b      	orrs	r3, r1
 80076c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ce:	f023 010f 	bic.w	r1, r3, #15
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	430a      	orrs	r2, r1
 80076dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4aa6      	ldr	r2, [pc, #664]	@ (800797c <UART_SetConfig+0x334>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d177      	bne.n	80077d8 <UART_SetConfig+0x190>
 80076e8:	4ba5      	ldr	r3, [pc, #660]	@ (8007980 <UART_SetConfig+0x338>)
 80076ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076f0:	2b28      	cmp	r3, #40	@ 0x28
 80076f2:	d86d      	bhi.n	80077d0 <UART_SetConfig+0x188>
 80076f4:	a201      	add	r2, pc, #4	@ (adr r2, 80076fc <UART_SetConfig+0xb4>)
 80076f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fa:	bf00      	nop
 80076fc:	080077a1 	.word	0x080077a1
 8007700:	080077d1 	.word	0x080077d1
 8007704:	080077d1 	.word	0x080077d1
 8007708:	080077d1 	.word	0x080077d1
 800770c:	080077d1 	.word	0x080077d1
 8007710:	080077d1 	.word	0x080077d1
 8007714:	080077d1 	.word	0x080077d1
 8007718:	080077d1 	.word	0x080077d1
 800771c:	080077a9 	.word	0x080077a9
 8007720:	080077d1 	.word	0x080077d1
 8007724:	080077d1 	.word	0x080077d1
 8007728:	080077d1 	.word	0x080077d1
 800772c:	080077d1 	.word	0x080077d1
 8007730:	080077d1 	.word	0x080077d1
 8007734:	080077d1 	.word	0x080077d1
 8007738:	080077d1 	.word	0x080077d1
 800773c:	080077b1 	.word	0x080077b1
 8007740:	080077d1 	.word	0x080077d1
 8007744:	080077d1 	.word	0x080077d1
 8007748:	080077d1 	.word	0x080077d1
 800774c:	080077d1 	.word	0x080077d1
 8007750:	080077d1 	.word	0x080077d1
 8007754:	080077d1 	.word	0x080077d1
 8007758:	080077d1 	.word	0x080077d1
 800775c:	080077b9 	.word	0x080077b9
 8007760:	080077d1 	.word	0x080077d1
 8007764:	080077d1 	.word	0x080077d1
 8007768:	080077d1 	.word	0x080077d1
 800776c:	080077d1 	.word	0x080077d1
 8007770:	080077d1 	.word	0x080077d1
 8007774:	080077d1 	.word	0x080077d1
 8007778:	080077d1 	.word	0x080077d1
 800777c:	080077c1 	.word	0x080077c1
 8007780:	080077d1 	.word	0x080077d1
 8007784:	080077d1 	.word	0x080077d1
 8007788:	080077d1 	.word	0x080077d1
 800778c:	080077d1 	.word	0x080077d1
 8007790:	080077d1 	.word	0x080077d1
 8007794:	080077d1 	.word	0x080077d1
 8007798:	080077d1 	.word	0x080077d1
 800779c:	080077c9 	.word	0x080077c9
 80077a0:	2301      	movs	r3, #1
 80077a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077a6:	e222      	b.n	8007bee <UART_SetConfig+0x5a6>
 80077a8:	2304      	movs	r3, #4
 80077aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ae:	e21e      	b.n	8007bee <UART_SetConfig+0x5a6>
 80077b0:	2308      	movs	r3, #8
 80077b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077b6:	e21a      	b.n	8007bee <UART_SetConfig+0x5a6>
 80077b8:	2310      	movs	r3, #16
 80077ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077be:	e216      	b.n	8007bee <UART_SetConfig+0x5a6>
 80077c0:	2320      	movs	r3, #32
 80077c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077c6:	e212      	b.n	8007bee <UART_SetConfig+0x5a6>
 80077c8:	2340      	movs	r3, #64	@ 0x40
 80077ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ce:	e20e      	b.n	8007bee <UART_SetConfig+0x5a6>
 80077d0:	2380      	movs	r3, #128	@ 0x80
 80077d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077d6:	e20a      	b.n	8007bee <UART_SetConfig+0x5a6>
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a69      	ldr	r2, [pc, #420]	@ (8007984 <UART_SetConfig+0x33c>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d130      	bne.n	8007844 <UART_SetConfig+0x1fc>
 80077e2:	4b67      	ldr	r3, [pc, #412]	@ (8007980 <UART_SetConfig+0x338>)
 80077e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077e6:	f003 0307 	and.w	r3, r3, #7
 80077ea:	2b05      	cmp	r3, #5
 80077ec:	d826      	bhi.n	800783c <UART_SetConfig+0x1f4>
 80077ee:	a201      	add	r2, pc, #4	@ (adr r2, 80077f4 <UART_SetConfig+0x1ac>)
 80077f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f4:	0800780d 	.word	0x0800780d
 80077f8:	08007815 	.word	0x08007815
 80077fc:	0800781d 	.word	0x0800781d
 8007800:	08007825 	.word	0x08007825
 8007804:	0800782d 	.word	0x0800782d
 8007808:	08007835 	.word	0x08007835
 800780c:	2300      	movs	r3, #0
 800780e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007812:	e1ec      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007814:	2304      	movs	r3, #4
 8007816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800781a:	e1e8      	b.n	8007bee <UART_SetConfig+0x5a6>
 800781c:	2308      	movs	r3, #8
 800781e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007822:	e1e4      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007824:	2310      	movs	r3, #16
 8007826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800782a:	e1e0      	b.n	8007bee <UART_SetConfig+0x5a6>
 800782c:	2320      	movs	r3, #32
 800782e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007832:	e1dc      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007834:	2340      	movs	r3, #64	@ 0x40
 8007836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783a:	e1d8      	b.n	8007bee <UART_SetConfig+0x5a6>
 800783c:	2380      	movs	r3, #128	@ 0x80
 800783e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007842:	e1d4      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a4f      	ldr	r2, [pc, #316]	@ (8007988 <UART_SetConfig+0x340>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d130      	bne.n	80078b0 <UART_SetConfig+0x268>
 800784e:	4b4c      	ldr	r3, [pc, #304]	@ (8007980 <UART_SetConfig+0x338>)
 8007850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007852:	f003 0307 	and.w	r3, r3, #7
 8007856:	2b05      	cmp	r3, #5
 8007858:	d826      	bhi.n	80078a8 <UART_SetConfig+0x260>
 800785a:	a201      	add	r2, pc, #4	@ (adr r2, 8007860 <UART_SetConfig+0x218>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	08007879 	.word	0x08007879
 8007864:	08007881 	.word	0x08007881
 8007868:	08007889 	.word	0x08007889
 800786c:	08007891 	.word	0x08007891
 8007870:	08007899 	.word	0x08007899
 8007874:	080078a1 	.word	0x080078a1
 8007878:	2300      	movs	r3, #0
 800787a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800787e:	e1b6      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007880:	2304      	movs	r3, #4
 8007882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007886:	e1b2      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007888:	2308      	movs	r3, #8
 800788a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788e:	e1ae      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007890:	2310      	movs	r3, #16
 8007892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007896:	e1aa      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007898:	2320      	movs	r3, #32
 800789a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800789e:	e1a6      	b.n	8007bee <UART_SetConfig+0x5a6>
 80078a0:	2340      	movs	r3, #64	@ 0x40
 80078a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a6:	e1a2      	b.n	8007bee <UART_SetConfig+0x5a6>
 80078a8:	2380      	movs	r3, #128	@ 0x80
 80078aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ae:	e19e      	b.n	8007bee <UART_SetConfig+0x5a6>
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a35      	ldr	r2, [pc, #212]	@ (800798c <UART_SetConfig+0x344>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d130      	bne.n	800791c <UART_SetConfig+0x2d4>
 80078ba:	4b31      	ldr	r3, [pc, #196]	@ (8007980 <UART_SetConfig+0x338>)
 80078bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078be:	f003 0307 	and.w	r3, r3, #7
 80078c2:	2b05      	cmp	r3, #5
 80078c4:	d826      	bhi.n	8007914 <UART_SetConfig+0x2cc>
 80078c6:	a201      	add	r2, pc, #4	@ (adr r2, 80078cc <UART_SetConfig+0x284>)
 80078c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078cc:	080078e5 	.word	0x080078e5
 80078d0:	080078ed 	.word	0x080078ed
 80078d4:	080078f5 	.word	0x080078f5
 80078d8:	080078fd 	.word	0x080078fd
 80078dc:	08007905 	.word	0x08007905
 80078e0:	0800790d 	.word	0x0800790d
 80078e4:	2300      	movs	r3, #0
 80078e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ea:	e180      	b.n	8007bee <UART_SetConfig+0x5a6>
 80078ec:	2304      	movs	r3, #4
 80078ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f2:	e17c      	b.n	8007bee <UART_SetConfig+0x5a6>
 80078f4:	2308      	movs	r3, #8
 80078f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fa:	e178      	b.n	8007bee <UART_SetConfig+0x5a6>
 80078fc:	2310      	movs	r3, #16
 80078fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007902:	e174      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007904:	2320      	movs	r3, #32
 8007906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790a:	e170      	b.n	8007bee <UART_SetConfig+0x5a6>
 800790c:	2340      	movs	r3, #64	@ 0x40
 800790e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007912:	e16c      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007914:	2380      	movs	r3, #128	@ 0x80
 8007916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791a:	e168      	b.n	8007bee <UART_SetConfig+0x5a6>
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a1b      	ldr	r2, [pc, #108]	@ (8007990 <UART_SetConfig+0x348>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d142      	bne.n	80079ac <UART_SetConfig+0x364>
 8007926:	4b16      	ldr	r3, [pc, #88]	@ (8007980 <UART_SetConfig+0x338>)
 8007928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800792a:	f003 0307 	and.w	r3, r3, #7
 800792e:	2b05      	cmp	r3, #5
 8007930:	d838      	bhi.n	80079a4 <UART_SetConfig+0x35c>
 8007932:	a201      	add	r2, pc, #4	@ (adr r2, 8007938 <UART_SetConfig+0x2f0>)
 8007934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007938:	08007951 	.word	0x08007951
 800793c:	08007959 	.word	0x08007959
 8007940:	08007961 	.word	0x08007961
 8007944:	08007969 	.word	0x08007969
 8007948:	08007995 	.word	0x08007995
 800794c:	0800799d 	.word	0x0800799d
 8007950:	2300      	movs	r3, #0
 8007952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007956:	e14a      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007958:	2304      	movs	r3, #4
 800795a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795e:	e146      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007960:	2308      	movs	r3, #8
 8007962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007966:	e142      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007968:	2310      	movs	r3, #16
 800796a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796e:	e13e      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007970:	cfff69f3 	.word	0xcfff69f3
 8007974:	58000c00 	.word	0x58000c00
 8007978:	11fff4ff 	.word	0x11fff4ff
 800797c:	40011000 	.word	0x40011000
 8007980:	58024400 	.word	0x58024400
 8007984:	40004400 	.word	0x40004400
 8007988:	40004800 	.word	0x40004800
 800798c:	40004c00 	.word	0x40004c00
 8007990:	40005000 	.word	0x40005000
 8007994:	2320      	movs	r3, #32
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799a:	e128      	b.n	8007bee <UART_SetConfig+0x5a6>
 800799c:	2340      	movs	r3, #64	@ 0x40
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a2:	e124      	b.n	8007bee <UART_SetConfig+0x5a6>
 80079a4:	2380      	movs	r3, #128	@ 0x80
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079aa:	e120      	b.n	8007bee <UART_SetConfig+0x5a6>
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4acb      	ldr	r2, [pc, #812]	@ (8007ce0 <UART_SetConfig+0x698>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d176      	bne.n	8007aa4 <UART_SetConfig+0x45c>
 80079b6:	4bcb      	ldr	r3, [pc, #812]	@ (8007ce4 <UART_SetConfig+0x69c>)
 80079b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079be:	2b28      	cmp	r3, #40	@ 0x28
 80079c0:	d86c      	bhi.n	8007a9c <UART_SetConfig+0x454>
 80079c2:	a201      	add	r2, pc, #4	@ (adr r2, 80079c8 <UART_SetConfig+0x380>)
 80079c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c8:	08007a6d 	.word	0x08007a6d
 80079cc:	08007a9d 	.word	0x08007a9d
 80079d0:	08007a9d 	.word	0x08007a9d
 80079d4:	08007a9d 	.word	0x08007a9d
 80079d8:	08007a9d 	.word	0x08007a9d
 80079dc:	08007a9d 	.word	0x08007a9d
 80079e0:	08007a9d 	.word	0x08007a9d
 80079e4:	08007a9d 	.word	0x08007a9d
 80079e8:	08007a75 	.word	0x08007a75
 80079ec:	08007a9d 	.word	0x08007a9d
 80079f0:	08007a9d 	.word	0x08007a9d
 80079f4:	08007a9d 	.word	0x08007a9d
 80079f8:	08007a9d 	.word	0x08007a9d
 80079fc:	08007a9d 	.word	0x08007a9d
 8007a00:	08007a9d 	.word	0x08007a9d
 8007a04:	08007a9d 	.word	0x08007a9d
 8007a08:	08007a7d 	.word	0x08007a7d
 8007a0c:	08007a9d 	.word	0x08007a9d
 8007a10:	08007a9d 	.word	0x08007a9d
 8007a14:	08007a9d 	.word	0x08007a9d
 8007a18:	08007a9d 	.word	0x08007a9d
 8007a1c:	08007a9d 	.word	0x08007a9d
 8007a20:	08007a9d 	.word	0x08007a9d
 8007a24:	08007a9d 	.word	0x08007a9d
 8007a28:	08007a85 	.word	0x08007a85
 8007a2c:	08007a9d 	.word	0x08007a9d
 8007a30:	08007a9d 	.word	0x08007a9d
 8007a34:	08007a9d 	.word	0x08007a9d
 8007a38:	08007a9d 	.word	0x08007a9d
 8007a3c:	08007a9d 	.word	0x08007a9d
 8007a40:	08007a9d 	.word	0x08007a9d
 8007a44:	08007a9d 	.word	0x08007a9d
 8007a48:	08007a8d 	.word	0x08007a8d
 8007a4c:	08007a9d 	.word	0x08007a9d
 8007a50:	08007a9d 	.word	0x08007a9d
 8007a54:	08007a9d 	.word	0x08007a9d
 8007a58:	08007a9d 	.word	0x08007a9d
 8007a5c:	08007a9d 	.word	0x08007a9d
 8007a60:	08007a9d 	.word	0x08007a9d
 8007a64:	08007a9d 	.word	0x08007a9d
 8007a68:	08007a95 	.word	0x08007a95
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a72:	e0bc      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007a74:	2304      	movs	r3, #4
 8007a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a7a:	e0b8      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007a7c:	2308      	movs	r3, #8
 8007a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a82:	e0b4      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007a84:	2310      	movs	r3, #16
 8007a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a8a:	e0b0      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007a8c:	2320      	movs	r3, #32
 8007a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a92:	e0ac      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007a94:	2340      	movs	r3, #64	@ 0x40
 8007a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a9a:	e0a8      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007a9c:	2380      	movs	r3, #128	@ 0x80
 8007a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aa2:	e0a4      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a8f      	ldr	r2, [pc, #572]	@ (8007ce8 <UART_SetConfig+0x6a0>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d130      	bne.n	8007b10 <UART_SetConfig+0x4c8>
 8007aae:	4b8d      	ldr	r3, [pc, #564]	@ (8007ce4 <UART_SetConfig+0x69c>)
 8007ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ab2:	f003 0307 	and.w	r3, r3, #7
 8007ab6:	2b05      	cmp	r3, #5
 8007ab8:	d826      	bhi.n	8007b08 <UART_SetConfig+0x4c0>
 8007aba:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac0 <UART_SetConfig+0x478>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007ad9 	.word	0x08007ad9
 8007ac4:	08007ae1 	.word	0x08007ae1
 8007ac8:	08007ae9 	.word	0x08007ae9
 8007acc:	08007af1 	.word	0x08007af1
 8007ad0:	08007af9 	.word	0x08007af9
 8007ad4:	08007b01 	.word	0x08007b01
 8007ad8:	2300      	movs	r3, #0
 8007ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ade:	e086      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007ae0:	2304      	movs	r3, #4
 8007ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ae6:	e082      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007ae8:	2308      	movs	r3, #8
 8007aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aee:	e07e      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007af0:	2310      	movs	r3, #16
 8007af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007af6:	e07a      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007af8:	2320      	movs	r3, #32
 8007afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007afe:	e076      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b00:	2340      	movs	r3, #64	@ 0x40
 8007b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b06:	e072      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b08:	2380      	movs	r3, #128	@ 0x80
 8007b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b0e:	e06e      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a75      	ldr	r2, [pc, #468]	@ (8007cec <UART_SetConfig+0x6a4>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d130      	bne.n	8007b7c <UART_SetConfig+0x534>
 8007b1a:	4b72      	ldr	r3, [pc, #456]	@ (8007ce4 <UART_SetConfig+0x69c>)
 8007b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b1e:	f003 0307 	and.w	r3, r3, #7
 8007b22:	2b05      	cmp	r3, #5
 8007b24:	d826      	bhi.n	8007b74 <UART_SetConfig+0x52c>
 8007b26:	a201      	add	r2, pc, #4	@ (adr r2, 8007b2c <UART_SetConfig+0x4e4>)
 8007b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2c:	08007b45 	.word	0x08007b45
 8007b30:	08007b4d 	.word	0x08007b4d
 8007b34:	08007b55 	.word	0x08007b55
 8007b38:	08007b5d 	.word	0x08007b5d
 8007b3c:	08007b65 	.word	0x08007b65
 8007b40:	08007b6d 	.word	0x08007b6d
 8007b44:	2300      	movs	r3, #0
 8007b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b4a:	e050      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b4c:	2304      	movs	r3, #4
 8007b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b52:	e04c      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b54:	2308      	movs	r3, #8
 8007b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b5a:	e048      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b5c:	2310      	movs	r3, #16
 8007b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b62:	e044      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b64:	2320      	movs	r3, #32
 8007b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b6a:	e040      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b6c:	2340      	movs	r3, #64	@ 0x40
 8007b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b72:	e03c      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b74:	2380      	movs	r3, #128	@ 0x80
 8007b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b7a:	e038      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a5b      	ldr	r2, [pc, #364]	@ (8007cf0 <UART_SetConfig+0x6a8>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d130      	bne.n	8007be8 <UART_SetConfig+0x5a0>
 8007b86:	4b57      	ldr	r3, [pc, #348]	@ (8007ce4 <UART_SetConfig+0x69c>)
 8007b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b8a:	f003 0307 	and.w	r3, r3, #7
 8007b8e:	2b05      	cmp	r3, #5
 8007b90:	d826      	bhi.n	8007be0 <UART_SetConfig+0x598>
 8007b92:	a201      	add	r2, pc, #4	@ (adr r2, 8007b98 <UART_SetConfig+0x550>)
 8007b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b98:	08007bb1 	.word	0x08007bb1
 8007b9c:	08007bb9 	.word	0x08007bb9
 8007ba0:	08007bc1 	.word	0x08007bc1
 8007ba4:	08007bc9 	.word	0x08007bc9
 8007ba8:	08007bd1 	.word	0x08007bd1
 8007bac:	08007bd9 	.word	0x08007bd9
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bb6:	e01a      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007bb8:	2304      	movs	r3, #4
 8007bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bbe:	e016      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007bc0:	2308      	movs	r3, #8
 8007bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bc6:	e012      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007bc8:	2310      	movs	r3, #16
 8007bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bce:	e00e      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007bd0:	2320      	movs	r3, #32
 8007bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bd6:	e00a      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007bd8:	2340      	movs	r3, #64	@ 0x40
 8007bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bde:	e006      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007be0:	2380      	movs	r3, #128	@ 0x80
 8007be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007be6:	e002      	b.n	8007bee <UART_SetConfig+0x5a6>
 8007be8:	2380      	movs	r3, #128	@ 0x80
 8007bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a3f      	ldr	r2, [pc, #252]	@ (8007cf0 <UART_SetConfig+0x6a8>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	f040 80f8 	bne.w	8007dea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bfa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007bfe:	2b20      	cmp	r3, #32
 8007c00:	dc46      	bgt.n	8007c90 <UART_SetConfig+0x648>
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	f2c0 8082 	blt.w	8007d0c <UART_SetConfig+0x6c4>
 8007c08:	3b02      	subs	r3, #2
 8007c0a:	2b1e      	cmp	r3, #30
 8007c0c:	d87e      	bhi.n	8007d0c <UART_SetConfig+0x6c4>
 8007c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c14 <UART_SetConfig+0x5cc>)
 8007c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c14:	08007c97 	.word	0x08007c97
 8007c18:	08007d0d 	.word	0x08007d0d
 8007c1c:	08007c9f 	.word	0x08007c9f
 8007c20:	08007d0d 	.word	0x08007d0d
 8007c24:	08007d0d 	.word	0x08007d0d
 8007c28:	08007d0d 	.word	0x08007d0d
 8007c2c:	08007caf 	.word	0x08007caf
 8007c30:	08007d0d 	.word	0x08007d0d
 8007c34:	08007d0d 	.word	0x08007d0d
 8007c38:	08007d0d 	.word	0x08007d0d
 8007c3c:	08007d0d 	.word	0x08007d0d
 8007c40:	08007d0d 	.word	0x08007d0d
 8007c44:	08007d0d 	.word	0x08007d0d
 8007c48:	08007d0d 	.word	0x08007d0d
 8007c4c:	08007cbf 	.word	0x08007cbf
 8007c50:	08007d0d 	.word	0x08007d0d
 8007c54:	08007d0d 	.word	0x08007d0d
 8007c58:	08007d0d 	.word	0x08007d0d
 8007c5c:	08007d0d 	.word	0x08007d0d
 8007c60:	08007d0d 	.word	0x08007d0d
 8007c64:	08007d0d 	.word	0x08007d0d
 8007c68:	08007d0d 	.word	0x08007d0d
 8007c6c:	08007d0d 	.word	0x08007d0d
 8007c70:	08007d0d 	.word	0x08007d0d
 8007c74:	08007d0d 	.word	0x08007d0d
 8007c78:	08007d0d 	.word	0x08007d0d
 8007c7c:	08007d0d 	.word	0x08007d0d
 8007c80:	08007d0d 	.word	0x08007d0d
 8007c84:	08007d0d 	.word	0x08007d0d
 8007c88:	08007d0d 	.word	0x08007d0d
 8007c8c:	08007cff 	.word	0x08007cff
 8007c90:	2b40      	cmp	r3, #64	@ 0x40
 8007c92:	d037      	beq.n	8007d04 <UART_SetConfig+0x6bc>
 8007c94:	e03a      	b.n	8007d0c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007c96:	f7fd f899 	bl	8004dcc <HAL_RCCEx_GetD3PCLK1Freq>
 8007c9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c9c:	e03c      	b.n	8007d18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fd f8a8 	bl	8004df8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cac:	e034      	b.n	8007d18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cae:	f107 0318 	add.w	r3, r7, #24
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fd f9f4 	bl	80050a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cbc:	e02c      	b.n	8007d18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cbe:	4b09      	ldr	r3, [pc, #36]	@ (8007ce4 <UART_SetConfig+0x69c>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0320 	and.w	r3, r3, #32
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d016      	beq.n	8007cf8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cca:	4b06      	ldr	r3, [pc, #24]	@ (8007ce4 <UART_SetConfig+0x69c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	08db      	lsrs	r3, r3, #3
 8007cd0:	f003 0303 	and.w	r3, r3, #3
 8007cd4:	4a07      	ldr	r2, [pc, #28]	@ (8007cf4 <UART_SetConfig+0x6ac>)
 8007cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8007cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007cdc:	e01c      	b.n	8007d18 <UART_SetConfig+0x6d0>
 8007cde:	bf00      	nop
 8007ce0:	40011400 	.word	0x40011400
 8007ce4:	58024400 	.word	0x58024400
 8007ce8:	40007800 	.word	0x40007800
 8007cec:	40007c00 	.word	0x40007c00
 8007cf0:	58000c00 	.word	0x58000c00
 8007cf4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007cf8:	4b9d      	ldr	r3, [pc, #628]	@ (8007f70 <UART_SetConfig+0x928>)
 8007cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cfc:	e00c      	b.n	8007d18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cfe:	4b9d      	ldr	r3, [pc, #628]	@ (8007f74 <UART_SetConfig+0x92c>)
 8007d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d02:	e009      	b.n	8007d18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d0a:	e005      	b.n	8007d18 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007d16:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 81de 	beq.w	80080dc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d24:	4a94      	ldr	r2, [pc, #592]	@ (8007f78 <UART_SetConfig+0x930>)
 8007d26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d32:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	005b      	lsls	r3, r3, #1
 8007d3c:	4413      	add	r3, r2
 8007d3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d305      	bcc.n	8007d50 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d903      	bls.n	8007d58 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d56:	e1c1      	b.n	80080dc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	60bb      	str	r3, [r7, #8]
 8007d5e:	60fa      	str	r2, [r7, #12]
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d64:	4a84      	ldr	r2, [pc, #528]	@ (8007f78 <UART_SetConfig+0x930>)
 8007d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	603b      	str	r3, [r7, #0]
 8007d70:	607a      	str	r2, [r7, #4]
 8007d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d7a:	f7f8 fb01 	bl	8000380 <__aeabi_uldivmod>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	4610      	mov	r0, r2
 8007d84:	4619      	mov	r1, r3
 8007d86:	f04f 0200 	mov.w	r2, #0
 8007d8a:	f04f 0300 	mov.w	r3, #0
 8007d8e:	020b      	lsls	r3, r1, #8
 8007d90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d94:	0202      	lsls	r2, r0, #8
 8007d96:	6979      	ldr	r1, [r7, #20]
 8007d98:	6849      	ldr	r1, [r1, #4]
 8007d9a:	0849      	lsrs	r1, r1, #1
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	460c      	mov	r4, r1
 8007da0:	4605      	mov	r5, r0
 8007da2:	eb12 0804 	adds.w	r8, r2, r4
 8007da6:	eb43 0905 	adc.w	r9, r3, r5
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	469a      	mov	sl, r3
 8007db2:	4693      	mov	fp, r2
 8007db4:	4652      	mov	r2, sl
 8007db6:	465b      	mov	r3, fp
 8007db8:	4640      	mov	r0, r8
 8007dba:	4649      	mov	r1, r9
 8007dbc:	f7f8 fae0 	bl	8000380 <__aeabi_uldivmod>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dce:	d308      	bcc.n	8007de2 <UART_SetConfig+0x79a>
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dd6:	d204      	bcs.n	8007de2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007dde:	60da      	str	r2, [r3, #12]
 8007de0:	e17c      	b.n	80080dc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007de8:	e178      	b.n	80080dc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007df2:	f040 80c5 	bne.w	8007f80 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007df6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007dfa:	2b20      	cmp	r3, #32
 8007dfc:	dc48      	bgt.n	8007e90 <UART_SetConfig+0x848>
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	db7b      	blt.n	8007efa <UART_SetConfig+0x8b2>
 8007e02:	2b20      	cmp	r3, #32
 8007e04:	d879      	bhi.n	8007efa <UART_SetConfig+0x8b2>
 8007e06:	a201      	add	r2, pc, #4	@ (adr r2, 8007e0c <UART_SetConfig+0x7c4>)
 8007e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0c:	08007e97 	.word	0x08007e97
 8007e10:	08007e9f 	.word	0x08007e9f
 8007e14:	08007efb 	.word	0x08007efb
 8007e18:	08007efb 	.word	0x08007efb
 8007e1c:	08007ea7 	.word	0x08007ea7
 8007e20:	08007efb 	.word	0x08007efb
 8007e24:	08007efb 	.word	0x08007efb
 8007e28:	08007efb 	.word	0x08007efb
 8007e2c:	08007eb7 	.word	0x08007eb7
 8007e30:	08007efb 	.word	0x08007efb
 8007e34:	08007efb 	.word	0x08007efb
 8007e38:	08007efb 	.word	0x08007efb
 8007e3c:	08007efb 	.word	0x08007efb
 8007e40:	08007efb 	.word	0x08007efb
 8007e44:	08007efb 	.word	0x08007efb
 8007e48:	08007efb 	.word	0x08007efb
 8007e4c:	08007ec7 	.word	0x08007ec7
 8007e50:	08007efb 	.word	0x08007efb
 8007e54:	08007efb 	.word	0x08007efb
 8007e58:	08007efb 	.word	0x08007efb
 8007e5c:	08007efb 	.word	0x08007efb
 8007e60:	08007efb 	.word	0x08007efb
 8007e64:	08007efb 	.word	0x08007efb
 8007e68:	08007efb 	.word	0x08007efb
 8007e6c:	08007efb 	.word	0x08007efb
 8007e70:	08007efb 	.word	0x08007efb
 8007e74:	08007efb 	.word	0x08007efb
 8007e78:	08007efb 	.word	0x08007efb
 8007e7c:	08007efb 	.word	0x08007efb
 8007e80:	08007efb 	.word	0x08007efb
 8007e84:	08007efb 	.word	0x08007efb
 8007e88:	08007efb 	.word	0x08007efb
 8007e8c:	08007eed 	.word	0x08007eed
 8007e90:	2b40      	cmp	r3, #64	@ 0x40
 8007e92:	d02e      	beq.n	8007ef2 <UART_SetConfig+0x8aa>
 8007e94:	e031      	b.n	8007efa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e96:	f7fb fce1 	bl	800385c <HAL_RCC_GetPCLK1Freq>
 8007e9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e9c:	e033      	b.n	8007f06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e9e:	f7fb fcf3 	bl	8003888 <HAL_RCC_GetPCLK2Freq>
 8007ea2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ea4:	e02f      	b.n	8007f06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fc ffa4 	bl	8004df8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eb4:	e027      	b.n	8007f06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eb6:	f107 0318 	add.w	r3, r7, #24
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fd f8f0 	bl	80050a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ec4:	e01f      	b.n	8007f06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ec6:	4b2d      	ldr	r3, [pc, #180]	@ (8007f7c <UART_SetConfig+0x934>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 0320 	and.w	r3, r3, #32
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d009      	beq.n	8007ee6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8007f7c <UART_SetConfig+0x934>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	08db      	lsrs	r3, r3, #3
 8007ed8:	f003 0303 	and.w	r3, r3, #3
 8007edc:	4a24      	ldr	r2, [pc, #144]	@ (8007f70 <UART_SetConfig+0x928>)
 8007ede:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ee4:	e00f      	b.n	8007f06 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007ee6:	4b22      	ldr	r3, [pc, #136]	@ (8007f70 <UART_SetConfig+0x928>)
 8007ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eea:	e00c      	b.n	8007f06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007eec:	4b21      	ldr	r3, [pc, #132]	@ (8007f74 <UART_SetConfig+0x92c>)
 8007eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef0:	e009      	b.n	8007f06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ef2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef8:	e005      	b.n	8007f06 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007f04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 80e7 	beq.w	80080dc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f12:	4a19      	ldr	r2, [pc, #100]	@ (8007f78 <UART_SetConfig+0x930>)
 8007f14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f18:	461a      	mov	r2, r3
 8007f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f20:	005a      	lsls	r2, r3, #1
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	085b      	lsrs	r3, r3, #1
 8007f28:	441a      	add	r2, r3
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f32:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f36:	2b0f      	cmp	r3, #15
 8007f38:	d916      	bls.n	8007f68 <UART_SetConfig+0x920>
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f40:	d212      	bcs.n	8007f68 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	f023 030f 	bic.w	r3, r3, #15
 8007f4a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4e:	085b      	lsrs	r3, r3, #1
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	f003 0307 	and.w	r3, r3, #7
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007f64:	60da      	str	r2, [r3, #12]
 8007f66:	e0b9      	b.n	80080dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007f6e:	e0b5      	b.n	80080dc <UART_SetConfig+0xa94>
 8007f70:	03d09000 	.word	0x03d09000
 8007f74:	003d0900 	.word	0x003d0900
 8007f78:	0800e49c 	.word	0x0800e49c
 8007f7c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f80:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007f84:	2b20      	cmp	r3, #32
 8007f86:	dc49      	bgt.n	800801c <UART_SetConfig+0x9d4>
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	db7c      	blt.n	8008086 <UART_SetConfig+0xa3e>
 8007f8c:	2b20      	cmp	r3, #32
 8007f8e:	d87a      	bhi.n	8008086 <UART_SetConfig+0xa3e>
 8007f90:	a201      	add	r2, pc, #4	@ (adr r2, 8007f98 <UART_SetConfig+0x950>)
 8007f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f96:	bf00      	nop
 8007f98:	08008023 	.word	0x08008023
 8007f9c:	0800802b 	.word	0x0800802b
 8007fa0:	08008087 	.word	0x08008087
 8007fa4:	08008087 	.word	0x08008087
 8007fa8:	08008033 	.word	0x08008033
 8007fac:	08008087 	.word	0x08008087
 8007fb0:	08008087 	.word	0x08008087
 8007fb4:	08008087 	.word	0x08008087
 8007fb8:	08008043 	.word	0x08008043
 8007fbc:	08008087 	.word	0x08008087
 8007fc0:	08008087 	.word	0x08008087
 8007fc4:	08008087 	.word	0x08008087
 8007fc8:	08008087 	.word	0x08008087
 8007fcc:	08008087 	.word	0x08008087
 8007fd0:	08008087 	.word	0x08008087
 8007fd4:	08008087 	.word	0x08008087
 8007fd8:	08008053 	.word	0x08008053
 8007fdc:	08008087 	.word	0x08008087
 8007fe0:	08008087 	.word	0x08008087
 8007fe4:	08008087 	.word	0x08008087
 8007fe8:	08008087 	.word	0x08008087
 8007fec:	08008087 	.word	0x08008087
 8007ff0:	08008087 	.word	0x08008087
 8007ff4:	08008087 	.word	0x08008087
 8007ff8:	08008087 	.word	0x08008087
 8007ffc:	08008087 	.word	0x08008087
 8008000:	08008087 	.word	0x08008087
 8008004:	08008087 	.word	0x08008087
 8008008:	08008087 	.word	0x08008087
 800800c:	08008087 	.word	0x08008087
 8008010:	08008087 	.word	0x08008087
 8008014:	08008087 	.word	0x08008087
 8008018:	08008079 	.word	0x08008079
 800801c:	2b40      	cmp	r3, #64	@ 0x40
 800801e:	d02e      	beq.n	800807e <UART_SetConfig+0xa36>
 8008020:	e031      	b.n	8008086 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008022:	f7fb fc1b 	bl	800385c <HAL_RCC_GetPCLK1Freq>
 8008026:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008028:	e033      	b.n	8008092 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800802a:	f7fb fc2d 	bl	8003888 <HAL_RCC_GetPCLK2Freq>
 800802e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008030:	e02f      	b.n	8008092 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008036:	4618      	mov	r0, r3
 8008038:	f7fc fede 	bl	8004df8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800803c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800803e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008040:	e027      	b.n	8008092 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008042:	f107 0318 	add.w	r3, r7, #24
 8008046:	4618      	mov	r0, r3
 8008048:	f7fd f82a 	bl	80050a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008050:	e01f      	b.n	8008092 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008052:	4b2d      	ldr	r3, [pc, #180]	@ (8008108 <UART_SetConfig+0xac0>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0320 	and.w	r3, r3, #32
 800805a:	2b00      	cmp	r3, #0
 800805c:	d009      	beq.n	8008072 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800805e:	4b2a      	ldr	r3, [pc, #168]	@ (8008108 <UART_SetConfig+0xac0>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	08db      	lsrs	r3, r3, #3
 8008064:	f003 0303 	and.w	r3, r3, #3
 8008068:	4a28      	ldr	r2, [pc, #160]	@ (800810c <UART_SetConfig+0xac4>)
 800806a:	fa22 f303 	lsr.w	r3, r2, r3
 800806e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008070:	e00f      	b.n	8008092 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008072:	4b26      	ldr	r3, [pc, #152]	@ (800810c <UART_SetConfig+0xac4>)
 8008074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008076:	e00c      	b.n	8008092 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008078:	4b25      	ldr	r3, [pc, #148]	@ (8008110 <UART_SetConfig+0xac8>)
 800807a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800807c:	e009      	b.n	8008092 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800807e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008084:	e005      	b.n	8008092 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008086:	2300      	movs	r3, #0
 8008088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008090:	bf00      	nop
    }

    if (pclk != 0U)
 8008092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008094:	2b00      	cmp	r3, #0
 8008096:	d021      	beq.n	80080dc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800809c:	4a1d      	ldr	r2, [pc, #116]	@ (8008114 <UART_SetConfig+0xacc>)
 800809e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080a2:	461a      	mov	r2, r3
 80080a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	085b      	lsrs	r3, r3, #1
 80080b0:	441a      	add	r2, r3
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080be:	2b0f      	cmp	r3, #15
 80080c0:	d909      	bls.n	80080d6 <UART_SetConfig+0xa8e>
 80080c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080c8:	d205      	bcs.n	80080d6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	60da      	str	r2, [r3, #12]
 80080d4:	e002      	b.n	80080dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	2201      	movs	r2, #1
 80080e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	2200      	movs	r2, #0
 80080f0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	2200      	movs	r2, #0
 80080f6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80080f8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3748      	adds	r7, #72	@ 0x48
 8008100:	46bd      	mov	sp, r7
 8008102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008106:	bf00      	nop
 8008108:	58024400 	.word	0x58024400
 800810c:	03d09000 	.word	0x03d09000
 8008110:	003d0900 	.word	0x003d0900
 8008114:	0800e49c 	.word	0x0800e49c

08008118 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008124:	f003 0308 	and.w	r3, r3, #8
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00a      	beq.n	8008142 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	430a      	orrs	r2, r1
 8008140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00a      	beq.n	8008164 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	430a      	orrs	r2, r1
 8008162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008168:	f003 0302 	and.w	r3, r3, #2
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00a      	beq.n	8008186 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	430a      	orrs	r2, r1
 8008184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800818a:	f003 0304 	and.w	r3, r3, #4
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00a      	beq.n	80081a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	430a      	orrs	r2, r1
 80081a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ac:	f003 0310 	and.w	r3, r3, #16
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00a      	beq.n	80081ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ce:	f003 0320 	and.w	r3, r3, #32
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00a      	beq.n	80081ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	430a      	orrs	r2, r1
 80081ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d01a      	beq.n	800822e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	430a      	orrs	r2, r1
 800820c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008212:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008216:	d10a      	bne.n	800822e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	430a      	orrs	r2, r1
 800822c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00a      	beq.n	8008250 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	430a      	orrs	r2, r1
 800824e:	605a      	str	r2, [r3, #4]
  }
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b098      	sub	sp, #96	@ 0x60
 8008260:	af02      	add	r7, sp, #8
 8008262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800826c:	f7f9 ff52 	bl	8002114 <HAL_GetTick>
 8008270:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 0308 	and.w	r3, r3, #8
 800827c:	2b08      	cmp	r3, #8
 800827e:	d12f      	bne.n	80082e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008280:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008288:	2200      	movs	r2, #0
 800828a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f88e 	bl	80083b0 <UART_WaitOnFlagUntilTimeout>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d022      	beq.n	80082e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a2:	e853 3f00 	ldrex	r3, [r3]
 80082a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	461a      	mov	r2, r3
 80082b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80082ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082c0:	e841 2300 	strex	r3, r2, [r1]
 80082c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1e6      	bne.n	800829a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	e063      	b.n	80083a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0304 	and.w	r3, r3, #4
 80082ea:	2b04      	cmp	r3, #4
 80082ec:	d149      	bne.n	8008382 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082f6:	2200      	movs	r2, #0
 80082f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f857 	bl	80083b0 <UART_WaitOnFlagUntilTimeout>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d03c      	beq.n	8008382 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008310:	e853 3f00 	ldrex	r3, [r3]
 8008314:	623b      	str	r3, [r7, #32]
   return(result);
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800831c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	461a      	mov	r2, r3
 8008324:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008326:	633b      	str	r3, [r7, #48]	@ 0x30
 8008328:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800832c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800832e:	e841 2300 	strex	r3, r2, [r1]
 8008332:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1e6      	bne.n	8008308 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3308      	adds	r3, #8
 8008340:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	e853 3f00 	ldrex	r3, [r3]
 8008348:	60fb      	str	r3, [r7, #12]
   return(result);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f023 0301 	bic.w	r3, r3, #1
 8008350:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	3308      	adds	r3, #8
 8008358:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800835a:	61fa      	str	r2, [r7, #28]
 800835c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835e:	69b9      	ldr	r1, [r7, #24]
 8008360:	69fa      	ldr	r2, [r7, #28]
 8008362:	e841 2300 	strex	r3, r2, [r1]
 8008366:	617b      	str	r3, [r7, #20]
   return(result);
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1e5      	bne.n	800833a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2220      	movs	r2, #32
 8008372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e012      	b.n	80083a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2220      	movs	r2, #32
 8008386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2220      	movs	r2, #32
 800838e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3758      	adds	r7, #88	@ 0x58
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	603b      	str	r3, [r7, #0]
 80083bc:	4613      	mov	r3, r2
 80083be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083c0:	e04f      	b.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c8:	d04b      	beq.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083ca:	f7f9 fea3 	bl	8002114 <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d302      	bcc.n	80083e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d101      	bne.n	80083e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e04e      	b.n	8008482 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0304 	and.w	r3, r3, #4
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d037      	beq.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb2>
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	2b80      	cmp	r3, #128	@ 0x80
 80083f6:	d034      	beq.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb2>
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	2b40      	cmp	r3, #64	@ 0x40
 80083fc:	d031      	beq.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	69db      	ldr	r3, [r3, #28]
 8008404:	f003 0308 	and.w	r3, r3, #8
 8008408:	2b08      	cmp	r3, #8
 800840a:	d110      	bne.n	800842e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2208      	movs	r2, #8
 8008412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 f839 	bl	800848c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2208      	movs	r2, #8
 800841e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e029      	b.n	8008482 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800843c:	d111      	bne.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008446:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f000 f81f 	bl	800848c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2220      	movs	r2, #32
 8008452:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e00f      	b.n	8008482 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	69da      	ldr	r2, [r3, #28]
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	4013      	ands	r3, r2
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	429a      	cmp	r2, r3
 8008470:	bf0c      	ite	eq
 8008472:	2301      	moveq	r3, #1
 8008474:	2300      	movne	r3, #0
 8008476:	b2db      	uxtb	r3, r3
 8008478:	461a      	mov	r2, r3
 800847a:	79fb      	ldrb	r3, [r7, #7]
 800847c:	429a      	cmp	r2, r3
 800847e:	d0a0      	beq.n	80083c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800848c:	b480      	push	{r7}
 800848e:	b095      	sub	sp, #84	@ 0x54
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800849c:	e853 3f00 	ldrex	r3, [r3]
 80084a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80084a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	461a      	mov	r2, r3
 80084b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80084b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80084b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80084ba:	e841 2300 	strex	r3, r2, [r1]
 80084be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80084c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1e6      	bne.n	8008494 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	3308      	adds	r3, #8
 80084cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ce:	6a3b      	ldr	r3, [r7, #32]
 80084d0:	e853 3f00 	ldrex	r3, [r3]
 80084d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80084d6:	69fa      	ldr	r2, [r7, #28]
 80084d8:	4b1e      	ldr	r3, [pc, #120]	@ (8008554 <UART_EndRxTransfer+0xc8>)
 80084da:	4013      	ands	r3, r2
 80084dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	3308      	adds	r3, #8
 80084e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80084e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084ee:	e841 2300 	strex	r3, r2, [r1]
 80084f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e5      	bne.n	80084c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d118      	bne.n	8008534 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	e853 3f00 	ldrex	r3, [r3]
 800850e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	f023 0310 	bic.w	r3, r3, #16
 8008516:	647b      	str	r3, [r7, #68]	@ 0x44
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	461a      	mov	r2, r3
 800851e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008520:	61bb      	str	r3, [r7, #24]
 8008522:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008524:	6979      	ldr	r1, [r7, #20]
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	e841 2300 	strex	r3, r2, [r1]
 800852c:	613b      	str	r3, [r7, #16]
   return(result);
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1e6      	bne.n	8008502 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2220      	movs	r2, #32
 8008538:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008548:	bf00      	nop
 800854a:	3754      	adds	r7, #84	@ 0x54
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	effffffe 	.word	0xeffffffe

08008558 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008566:	2b01      	cmp	r3, #1
 8008568:	d101      	bne.n	800856e <HAL_UARTEx_DisableFifoMode+0x16>
 800856a:	2302      	movs	r3, #2
 800856c:	e027      	b.n	80085be <HAL_UARTEx_DisableFifoMode+0x66>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2224      	movs	r2, #36	@ 0x24
 800857a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f022 0201 	bic.w	r2, r2, #1
 8008594:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800859c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2220      	movs	r2, #32
 80085b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3714      	adds	r7, #20
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b084      	sub	sp, #16
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d101      	bne.n	80085e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80085de:	2302      	movs	r3, #2
 80085e0:	e02d      	b.n	800863e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2224      	movs	r2, #36	@ 0x24
 80085ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f022 0201 	bic.w	r2, r2, #1
 8008608:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	683a      	ldr	r2, [r7, #0]
 800861a:	430a      	orrs	r2, r1
 800861c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f850 	bl	80086c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2220      	movs	r2, #32
 8008630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b084      	sub	sp, #16
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008656:	2b01      	cmp	r3, #1
 8008658:	d101      	bne.n	800865e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800865a:	2302      	movs	r3, #2
 800865c:	e02d      	b.n	80086ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2224      	movs	r2, #36	@ 0x24
 800866a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f022 0201 	bic.w	r2, r2, #1
 8008684:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	683a      	ldr	r2, [r7, #0]
 8008696:	430a      	orrs	r2, r1
 8008698:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f812 	bl	80086c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2220      	movs	r2, #32
 80086ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
	...

080086c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d108      	bne.n	80086e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80086e4:	e031      	b.n	800874a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80086e6:	2310      	movs	r3, #16
 80086e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80086ea:	2310      	movs	r3, #16
 80086ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	0e5b      	lsrs	r3, r3, #25
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	f003 0307 	and.w	r3, r3, #7
 80086fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	0f5b      	lsrs	r3, r3, #29
 8008706:	b2db      	uxtb	r3, r3
 8008708:	f003 0307 	and.w	r3, r3, #7
 800870c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800870e:	7bbb      	ldrb	r3, [r7, #14]
 8008710:	7b3a      	ldrb	r2, [r7, #12]
 8008712:	4911      	ldr	r1, [pc, #68]	@ (8008758 <UARTEx_SetNbDataToProcess+0x94>)
 8008714:	5c8a      	ldrb	r2, [r1, r2]
 8008716:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800871a:	7b3a      	ldrb	r2, [r7, #12]
 800871c:	490f      	ldr	r1, [pc, #60]	@ (800875c <UARTEx_SetNbDataToProcess+0x98>)
 800871e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008720:	fb93 f3f2 	sdiv	r3, r3, r2
 8008724:	b29a      	uxth	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800872c:	7bfb      	ldrb	r3, [r7, #15]
 800872e:	7b7a      	ldrb	r2, [r7, #13]
 8008730:	4909      	ldr	r1, [pc, #36]	@ (8008758 <UARTEx_SetNbDataToProcess+0x94>)
 8008732:	5c8a      	ldrb	r2, [r1, r2]
 8008734:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008738:	7b7a      	ldrb	r2, [r7, #13]
 800873a:	4908      	ldr	r1, [pc, #32]	@ (800875c <UARTEx_SetNbDataToProcess+0x98>)
 800873c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800873e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008742:	b29a      	uxth	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800874a:	bf00      	nop
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop
 8008758:	0800e4b4 	.word	0x0800e4b4
 800875c:	0800e4bc 	.word	0x0800e4bc

08008760 <__NVIC_SetPriority>:
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	4603      	mov	r3, r0
 8008768:	6039      	str	r1, [r7, #0]
 800876a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800876c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008770:	2b00      	cmp	r3, #0
 8008772:	db0a      	blt.n	800878a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	b2da      	uxtb	r2, r3
 8008778:	490c      	ldr	r1, [pc, #48]	@ (80087ac <__NVIC_SetPriority+0x4c>)
 800877a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800877e:	0112      	lsls	r2, r2, #4
 8008780:	b2d2      	uxtb	r2, r2
 8008782:	440b      	add	r3, r1
 8008784:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008788:	e00a      	b.n	80087a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	b2da      	uxtb	r2, r3
 800878e:	4908      	ldr	r1, [pc, #32]	@ (80087b0 <__NVIC_SetPriority+0x50>)
 8008790:	88fb      	ldrh	r3, [r7, #6]
 8008792:	f003 030f 	and.w	r3, r3, #15
 8008796:	3b04      	subs	r3, #4
 8008798:	0112      	lsls	r2, r2, #4
 800879a:	b2d2      	uxtb	r2, r2
 800879c:	440b      	add	r3, r1
 800879e:	761a      	strb	r2, [r3, #24]
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	e000e100 	.word	0xe000e100
 80087b0:	e000ed00 	.word	0xe000ed00

080087b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80087b4:	b580      	push	{r7, lr}
 80087b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80087b8:	4b05      	ldr	r3, [pc, #20]	@ (80087d0 <SysTick_Handler+0x1c>)
 80087ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80087bc:	f002 f95a 	bl	800aa74 <xTaskGetSchedulerState>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d001      	beq.n	80087ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80087c6:	f000 fd9f 	bl	8009308 <xPortSysTickHandler>
  }
}
 80087ca:	bf00      	nop
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	e000e010 	.word	0xe000e010

080087d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80087d4:	b580      	push	{r7, lr}
 80087d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80087d8:	2100      	movs	r1, #0
 80087da:	f06f 0004 	mvn.w	r0, #4
 80087de:	f7ff ffbf 	bl	8008760 <__NVIC_SetPriority>
#endif
}
 80087e2:	bf00      	nop
 80087e4:	bd80      	pop	{r7, pc}
	...

080087e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087ee:	f3ef 8305 	mrs	r3, IPSR
 80087f2:	603b      	str	r3, [r7, #0]
  return(result);
 80087f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d003      	beq.n	8008802 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80087fa:	f06f 0305 	mvn.w	r3, #5
 80087fe:	607b      	str	r3, [r7, #4]
 8008800:	e00c      	b.n	800881c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008802:	4b0a      	ldr	r3, [pc, #40]	@ (800882c <osKernelInitialize+0x44>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d105      	bne.n	8008816 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800880a:	4b08      	ldr	r3, [pc, #32]	@ (800882c <osKernelInitialize+0x44>)
 800880c:	2201      	movs	r2, #1
 800880e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008810:	2300      	movs	r3, #0
 8008812:	607b      	str	r3, [r7, #4]
 8008814:	e002      	b.n	800881c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008816:	f04f 33ff 	mov.w	r3, #4294967295
 800881a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800881c:	687b      	ldr	r3, [r7, #4]
}
 800881e:	4618      	mov	r0, r3
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	2400034c 	.word	0x2400034c

08008830 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008836:	f3ef 8305 	mrs	r3, IPSR
 800883a:	603b      	str	r3, [r7, #0]
  return(result);
 800883c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800883e:	2b00      	cmp	r3, #0
 8008840:	d003      	beq.n	800884a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008842:	f06f 0305 	mvn.w	r3, #5
 8008846:	607b      	str	r3, [r7, #4]
 8008848:	e010      	b.n	800886c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800884a:	4b0b      	ldr	r3, [pc, #44]	@ (8008878 <osKernelStart+0x48>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2b01      	cmp	r3, #1
 8008850:	d109      	bne.n	8008866 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008852:	f7ff ffbf 	bl	80087d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008856:	4b08      	ldr	r3, [pc, #32]	@ (8008878 <osKernelStart+0x48>)
 8008858:	2202      	movs	r2, #2
 800885a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800885c:	f001 fcbc 	bl	800a1d8 <vTaskStartScheduler>
      stat = osOK;
 8008860:	2300      	movs	r3, #0
 8008862:	607b      	str	r3, [r7, #4]
 8008864:	e002      	b.n	800886c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008866:	f04f 33ff 	mov.w	r3, #4294967295
 800886a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800886c:	687b      	ldr	r3, [r7, #4]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	2400034c 	.word	0x2400034c

0800887c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800887c:	b580      	push	{r7, lr}
 800887e:	b08e      	sub	sp, #56	@ 0x38
 8008880:	af04      	add	r7, sp, #16
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008888:	2300      	movs	r3, #0
 800888a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800888c:	f3ef 8305 	mrs	r3, IPSR
 8008890:	617b      	str	r3, [r7, #20]
  return(result);
 8008892:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008894:	2b00      	cmp	r3, #0
 8008896:	d17e      	bne.n	8008996 <osThreadNew+0x11a>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d07b      	beq.n	8008996 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800889e:	2380      	movs	r3, #128	@ 0x80
 80088a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80088a2:	2318      	movs	r3, #24
 80088a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80088a6:	2300      	movs	r3, #0
 80088a8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80088aa:	f04f 33ff 	mov.w	r3, #4294967295
 80088ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d045      	beq.n	8008942 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d002      	beq.n	80088c4 <osThreadNew+0x48>
        name = attr->name;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d002      	beq.n	80088d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d008      	beq.n	80088ea <osThreadNew+0x6e>
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	2b38      	cmp	r3, #56	@ 0x38
 80088dc:	d805      	bhi.n	80088ea <osThreadNew+0x6e>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f003 0301 	and.w	r3, r3, #1
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d001      	beq.n	80088ee <osThreadNew+0x72>
        return (NULL);
 80088ea:	2300      	movs	r3, #0
 80088ec:	e054      	b.n	8008998 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d003      	beq.n	80088fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	695b      	ldr	r3, [r3, #20]
 80088fa:	089b      	lsrs	r3, r3, #2
 80088fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00e      	beq.n	8008924 <osThreadNew+0xa8>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	2b5b      	cmp	r3, #91	@ 0x5b
 800890c:	d90a      	bls.n	8008924 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008912:	2b00      	cmp	r3, #0
 8008914:	d006      	beq.n	8008924 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d002      	beq.n	8008924 <osThreadNew+0xa8>
        mem = 1;
 800891e:	2301      	movs	r3, #1
 8008920:	61bb      	str	r3, [r7, #24]
 8008922:	e010      	b.n	8008946 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10c      	bne.n	8008946 <osThreadNew+0xca>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d108      	bne.n	8008946 <osThreadNew+0xca>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d104      	bne.n	8008946 <osThreadNew+0xca>
          mem = 0;
 800893c:	2300      	movs	r3, #0
 800893e:	61bb      	str	r3, [r7, #24]
 8008940:	e001      	b.n	8008946 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008942:	2300      	movs	r3, #0
 8008944:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d110      	bne.n	800896e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008954:	9202      	str	r2, [sp, #8]
 8008956:	9301      	str	r3, [sp, #4]
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	6a3a      	ldr	r2, [r7, #32]
 8008960:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f001 fa5c 	bl	8009e20 <xTaskCreateStatic>
 8008968:	4603      	mov	r3, r0
 800896a:	613b      	str	r3, [r7, #16]
 800896c:	e013      	b.n	8008996 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d110      	bne.n	8008996 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	b29a      	uxth	r2, r3
 8008978:	f107 0310 	add.w	r3, r7, #16
 800897c:	9301      	str	r3, [sp, #4]
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f001 faaa 	bl	8009ee0 <xTaskCreate>
 800898c:	4603      	mov	r3, r0
 800898e:	2b01      	cmp	r3, #1
 8008990:	d001      	beq.n	8008996 <osThreadNew+0x11a>
            hTask = NULL;
 8008992:	2300      	movs	r3, #0
 8008994:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008996:	693b      	ldr	r3, [r7, #16]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3728      	adds	r7, #40	@ 0x28
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089a8:	f3ef 8305 	mrs	r3, IPSR
 80089ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80089ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d003      	beq.n	80089bc <osDelay+0x1c>
    stat = osErrorISR;
 80089b4:	f06f 0305 	mvn.w	r3, #5
 80089b8:	60fb      	str	r3, [r7, #12]
 80089ba:	e007      	b.n	80089cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80089bc:	2300      	movs	r3, #0
 80089be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d002      	beq.n	80089cc <osDelay+0x2c>
      vTaskDelay(ticks);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f001 fbd0 	bl	800a16c <vTaskDelay>
    }
  }

  return (stat);
 80089cc:	68fb      	ldr	r3, [r7, #12]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
	...

080089d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	4a07      	ldr	r2, [pc, #28]	@ (8008a04 <vApplicationGetIdleTaskMemory+0x2c>)
 80089e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	4a06      	ldr	r2, [pc, #24]	@ (8008a08 <vApplicationGetIdleTaskMemory+0x30>)
 80089ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2280      	movs	r2, #128	@ 0x80
 80089f4:	601a      	str	r2, [r3, #0]
}
 80089f6:	bf00      	nop
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	24000350 	.word	0x24000350
 8008a08:	240003ac 	.word	0x240003ac

08008a0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	4a07      	ldr	r2, [pc, #28]	@ (8008a38 <vApplicationGetTimerTaskMemory+0x2c>)
 8008a1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	4a06      	ldr	r2, [pc, #24]	@ (8008a3c <vApplicationGetTimerTaskMemory+0x30>)
 8008a22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a2a:	601a      	str	r2, [r3, #0]
}
 8008a2c:	bf00      	nop
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr
 8008a38:	240005ac 	.word	0x240005ac
 8008a3c:	24000608 	.word	0x24000608

08008a40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b08a      	sub	sp, #40	@ 0x28
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a4c:	f001 fc2c 	bl	800a2a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a50:	4b5c      	ldr	r3, [pc, #368]	@ (8008bc4 <pvPortMalloc+0x184>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d101      	bne.n	8008a5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a58:	f000 f924 	bl	8008ca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a5c:	4b5a      	ldr	r3, [pc, #360]	@ (8008bc8 <pvPortMalloc+0x188>)
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4013      	ands	r3, r2
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f040 8095 	bne.w	8008b94 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d01e      	beq.n	8008aae <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008a70:	2208      	movs	r2, #8
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4413      	add	r3, r2
 8008a76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f003 0307 	and.w	r3, r3, #7
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d015      	beq.n	8008aae <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f023 0307 	bic.w	r3, r3, #7
 8008a88:	3308      	adds	r3, #8
 8008a8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f003 0307 	and.w	r3, r3, #7
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00b      	beq.n	8008aae <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a9a:	f383 8811 	msr	BASEPRI, r3
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008aa8:	bf00      	nop
 8008aaa:	bf00      	nop
 8008aac:	e7fd      	b.n	8008aaa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d06f      	beq.n	8008b94 <pvPortMalloc+0x154>
 8008ab4:	4b45      	ldr	r3, [pc, #276]	@ (8008bcc <pvPortMalloc+0x18c>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d86a      	bhi.n	8008b94 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008abe:	4b44      	ldr	r3, [pc, #272]	@ (8008bd0 <pvPortMalloc+0x190>)
 8008ac0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ac2:	4b43      	ldr	r3, [pc, #268]	@ (8008bd0 <pvPortMalloc+0x190>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ac8:	e004      	b.n	8008ad4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008acc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d903      	bls.n	8008ae6 <pvPortMalloc+0xa6>
 8008ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1f1      	bne.n	8008aca <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ae6:	4b37      	ldr	r3, [pc, #220]	@ (8008bc4 <pvPortMalloc+0x184>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d051      	beq.n	8008b94 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008af0:	6a3b      	ldr	r3, [r7, #32]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2208      	movs	r2, #8
 8008af6:	4413      	add	r3, r2
 8008af8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	6a3b      	ldr	r3, [r7, #32]
 8008b00:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	1ad2      	subs	r2, r2, r3
 8008b0a:	2308      	movs	r3, #8
 8008b0c:	005b      	lsls	r3, r3, #1
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d920      	bls.n	8008b54 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4413      	add	r3, r2
 8008b18:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	f003 0307 	and.w	r3, r3, #7
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00b      	beq.n	8008b3c <pvPortMalloc+0xfc>
	__asm volatile
 8008b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b28:	f383 8811 	msr	BASEPRI, r3
 8008b2c:	f3bf 8f6f 	isb	sy
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	613b      	str	r3, [r7, #16]
}
 8008b36:	bf00      	nop
 8008b38:	bf00      	nop
 8008b3a:	e7fd      	b.n	8008b38 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3e:	685a      	ldr	r2, [r3, #4]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	1ad2      	subs	r2, r2, r3
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b4e:	69b8      	ldr	r0, [r7, #24]
 8008b50:	f000 f90a 	bl	8008d68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b54:	4b1d      	ldr	r3, [pc, #116]	@ (8008bcc <pvPortMalloc+0x18c>)
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	4a1b      	ldr	r2, [pc, #108]	@ (8008bcc <pvPortMalloc+0x18c>)
 8008b60:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b62:	4b1a      	ldr	r3, [pc, #104]	@ (8008bcc <pvPortMalloc+0x18c>)
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	4b1b      	ldr	r3, [pc, #108]	@ (8008bd4 <pvPortMalloc+0x194>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d203      	bcs.n	8008b76 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b6e:	4b17      	ldr	r3, [pc, #92]	@ (8008bcc <pvPortMalloc+0x18c>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a18      	ldr	r2, [pc, #96]	@ (8008bd4 <pvPortMalloc+0x194>)
 8008b74:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b78:	685a      	ldr	r2, [r3, #4]
 8008b7a:	4b13      	ldr	r3, [pc, #76]	@ (8008bc8 <pvPortMalloc+0x188>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	431a      	orrs	r2, r3
 8008b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b82:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b86:	2200      	movs	r2, #0
 8008b88:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008b8a:	4b13      	ldr	r3, [pc, #76]	@ (8008bd8 <pvPortMalloc+0x198>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	4a11      	ldr	r2, [pc, #68]	@ (8008bd8 <pvPortMalloc+0x198>)
 8008b92:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b94:	f001 fb96 	bl	800a2c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	f003 0307 	and.w	r3, r3, #7
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00b      	beq.n	8008bba <pvPortMalloc+0x17a>
	__asm volatile
 8008ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba6:	f383 8811 	msr	BASEPRI, r3
 8008baa:	f3bf 8f6f 	isb	sy
 8008bae:	f3bf 8f4f 	dsb	sy
 8008bb2:	60fb      	str	r3, [r7, #12]
}
 8008bb4:	bf00      	nop
 8008bb6:	bf00      	nop
 8008bb8:	e7fd      	b.n	8008bb6 <pvPortMalloc+0x176>
	return pvReturn;
 8008bba:	69fb      	ldr	r3, [r7, #28]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3728      	adds	r7, #40	@ 0x28
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	24004610 	.word	0x24004610
 8008bc8:	24004624 	.word	0x24004624
 8008bcc:	24004614 	.word	0x24004614
 8008bd0:	24004608 	.word	0x24004608
 8008bd4:	24004618 	.word	0x24004618
 8008bd8:	2400461c 	.word	0x2400461c

08008bdc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d04f      	beq.n	8008c8e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008bee:	2308      	movs	r3, #8
 8008bf0:	425b      	negs	r3, r3
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	685a      	ldr	r2, [r3, #4]
 8008c00:	4b25      	ldr	r3, [pc, #148]	@ (8008c98 <vPortFree+0xbc>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4013      	ands	r3, r2
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d10b      	bne.n	8008c22 <vPortFree+0x46>
	__asm volatile
 8008c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c0e:	f383 8811 	msr	BASEPRI, r3
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	60fb      	str	r3, [r7, #12]
}
 8008c1c:	bf00      	nop
 8008c1e:	bf00      	nop
 8008c20:	e7fd      	b.n	8008c1e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00b      	beq.n	8008c42 <vPortFree+0x66>
	__asm volatile
 8008c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c2e:	f383 8811 	msr	BASEPRI, r3
 8008c32:	f3bf 8f6f 	isb	sy
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	60bb      	str	r3, [r7, #8]
}
 8008c3c:	bf00      	nop
 8008c3e:	bf00      	nop
 8008c40:	e7fd      	b.n	8008c3e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	4b14      	ldr	r3, [pc, #80]	@ (8008c98 <vPortFree+0xbc>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d01e      	beq.n	8008c8e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d11a      	bne.n	8008c8e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8008c98 <vPortFree+0xbc>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	43db      	mvns	r3, r3
 8008c62:	401a      	ands	r2, r3
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c68:	f001 fb1e 	bl	800a2a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	685a      	ldr	r2, [r3, #4]
 8008c70:	4b0a      	ldr	r3, [pc, #40]	@ (8008c9c <vPortFree+0xc0>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4413      	add	r3, r2
 8008c76:	4a09      	ldr	r2, [pc, #36]	@ (8008c9c <vPortFree+0xc0>)
 8008c78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c7a:	6938      	ldr	r0, [r7, #16]
 8008c7c:	f000 f874 	bl	8008d68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008c80:	4b07      	ldr	r3, [pc, #28]	@ (8008ca0 <vPortFree+0xc4>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	3301      	adds	r3, #1
 8008c86:	4a06      	ldr	r2, [pc, #24]	@ (8008ca0 <vPortFree+0xc4>)
 8008c88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008c8a:	f001 fb1b 	bl	800a2c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c8e:	bf00      	nop
 8008c90:	3718      	adds	r7, #24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	24004624 	.word	0x24004624
 8008c9c:	24004614 	.word	0x24004614
 8008ca0:	24004620 	.word	0x24004620

08008ca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008caa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008cae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008cb0:	4b27      	ldr	r3, [pc, #156]	@ (8008d50 <prvHeapInit+0xac>)
 8008cb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f003 0307 	and.w	r3, r3, #7
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00c      	beq.n	8008cd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3307      	adds	r3, #7
 8008cc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f023 0307 	bic.w	r3, r3, #7
 8008cca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8008d50 <prvHeapInit+0xac>)
 8008cd4:	4413      	add	r3, r2
 8008cd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8008d54 <prvHeapInit+0xb0>)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8008d54 <prvHeapInit+0xb0>)
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	4413      	add	r3, r2
 8008cee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008cf0:	2208      	movs	r2, #8
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	1a9b      	subs	r3, r3, r2
 8008cf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f023 0307 	bic.w	r3, r3, #7
 8008cfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	4a15      	ldr	r2, [pc, #84]	@ (8008d58 <prvHeapInit+0xb4>)
 8008d04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d06:	4b14      	ldr	r3, [pc, #80]	@ (8008d58 <prvHeapInit+0xb4>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d0e:	4b12      	ldr	r3, [pc, #72]	@ (8008d58 <prvHeapInit+0xb4>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2200      	movs	r2, #0
 8008d14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	1ad2      	subs	r2, r2, r3
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d24:	4b0c      	ldr	r3, [pc, #48]	@ (8008d58 <prvHeapInit+0xb4>)
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	4a0a      	ldr	r2, [pc, #40]	@ (8008d5c <prvHeapInit+0xb8>)
 8008d32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	4a09      	ldr	r2, [pc, #36]	@ (8008d60 <prvHeapInit+0xbc>)
 8008d3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d3c:	4b09      	ldr	r3, [pc, #36]	@ (8008d64 <prvHeapInit+0xc0>)
 8008d3e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008d42:	601a      	str	r2, [r3, #0]
}
 8008d44:	bf00      	nop
 8008d46:	3714      	adds	r7, #20
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr
 8008d50:	24000a08 	.word	0x24000a08
 8008d54:	24004608 	.word	0x24004608
 8008d58:	24004610 	.word	0x24004610
 8008d5c:	24004618 	.word	0x24004618
 8008d60:	24004614 	.word	0x24004614
 8008d64:	24004624 	.word	0x24004624

08008d68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d70:	4b28      	ldr	r3, [pc, #160]	@ (8008e14 <prvInsertBlockIntoFreeList+0xac>)
 8008d72:	60fb      	str	r3, [r7, #12]
 8008d74:	e002      	b.n	8008d7c <prvInsertBlockIntoFreeList+0x14>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	60fb      	str	r3, [r7, #12]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d8f7      	bhi.n	8008d76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	68ba      	ldr	r2, [r7, #8]
 8008d90:	4413      	add	r3, r2
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d108      	bne.n	8008daa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	685a      	ldr	r2, [r3, #4]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	441a      	add	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	441a      	add	r2, r3
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d118      	bne.n	8008df0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	4b15      	ldr	r3, [pc, #84]	@ (8008e18 <prvInsertBlockIntoFreeList+0xb0>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d00d      	beq.n	8008de6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	685a      	ldr	r2, [r3, #4]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	441a      	add	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	601a      	str	r2, [r3, #0]
 8008de4:	e008      	b.n	8008df8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008de6:	4b0c      	ldr	r3, [pc, #48]	@ (8008e18 <prvInsertBlockIntoFreeList+0xb0>)
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	e003      	b.n	8008df8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d002      	beq.n	8008e06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e06:	bf00      	nop
 8008e08:	3714      	adds	r7, #20
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	24004608 	.word	0x24004608
 8008e18:	24004610 	.word	0x24004610

08008e1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f103 0208 	add.w	r2, r3, #8
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f04f 32ff 	mov.w	r2, #4294967295
 8008e34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f103 0208 	add.w	r2, r3, #8
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f103 0208 	add.w	r2, r3, #8
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008e6a:	bf00      	nop
 8008e6c:	370c      	adds	r7, #12
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e76:	b480      	push	{r7}
 8008e78:	b085      	sub	sp, #20
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	689a      	ldr	r2, [r3, #8]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	683a      	ldr	r2, [r7, #0]
 8008e9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	683a      	ldr	r2, [r7, #0]
 8008ea0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	1c5a      	adds	r2, r3, #1
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	601a      	str	r2, [r3, #0]
}
 8008eb2:	bf00      	nop
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ebe:	b480      	push	{r7}
 8008ec0:	b085      	sub	sp, #20
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
 8008ec6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed4:	d103      	bne.n	8008ede <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	60fb      	str	r3, [r7, #12]
 8008edc:	e00c      	b.n	8008ef8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	60fb      	str	r3, [r7, #12]
 8008ee4:	e002      	b.n	8008eec <vListInsert+0x2e>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	60fb      	str	r3, [r7, #12]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68ba      	ldr	r2, [r7, #8]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d2f6      	bcs.n	8008ee6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	685a      	ldr	r2, [r3, #4]
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	683a      	ldr	r2, [r7, #0]
 8008f12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	1c5a      	adds	r2, r3, #1
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	601a      	str	r2, [r3, #0]
}
 8008f24:	bf00      	nop
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	6892      	ldr	r2, [r2, #8]
 8008f46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	6852      	ldr	r2, [r2, #4]
 8008f50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d103      	bne.n	8008f64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	689a      	ldr	r2, [r3, #8]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	1e5a      	subs	r2, r3, #1
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3714      	adds	r7, #20
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	3b04      	subs	r3, #4
 8008f94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008f9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	3b04      	subs	r3, #4
 8008fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	f023 0201 	bic.w	r2, r3, #1
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	3b04      	subs	r3, #4
 8008fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8008fe8 <pxPortInitialiseStack+0x64>)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	3b14      	subs	r3, #20
 8008fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	3b04      	subs	r3, #4
 8008fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f06f 0202 	mvn.w	r2, #2
 8008fd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	3b20      	subs	r3, #32
 8008fd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008fda:	68fb      	ldr	r3, [r7, #12]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3714      	adds	r7, #20
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr
 8008fe8:	08008fed 	.word	0x08008fed

08008fec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008ff6:	4b13      	ldr	r3, [pc, #76]	@ (8009044 <prvTaskExitError+0x58>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffe:	d00b      	beq.n	8009018 <prvTaskExitError+0x2c>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	60fb      	str	r3, [r7, #12]
}
 8009012:	bf00      	nop
 8009014:	bf00      	nop
 8009016:	e7fd      	b.n	8009014 <prvTaskExitError+0x28>
	__asm volatile
 8009018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800901c:	f383 8811 	msr	BASEPRI, r3
 8009020:	f3bf 8f6f 	isb	sy
 8009024:	f3bf 8f4f 	dsb	sy
 8009028:	60bb      	str	r3, [r7, #8]
}
 800902a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800902c:	bf00      	nop
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d0fc      	beq.n	800902e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009034:	bf00      	nop
 8009036:	bf00      	nop
 8009038:	3714      	adds	r7, #20
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	24000010 	.word	0x24000010
	...

08009050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009050:	4b07      	ldr	r3, [pc, #28]	@ (8009070 <pxCurrentTCBConst2>)
 8009052:	6819      	ldr	r1, [r3, #0]
 8009054:	6808      	ldr	r0, [r1, #0]
 8009056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800905a:	f380 8809 	msr	PSP, r0
 800905e:	f3bf 8f6f 	isb	sy
 8009062:	f04f 0000 	mov.w	r0, #0
 8009066:	f380 8811 	msr	BASEPRI, r0
 800906a:	4770      	bx	lr
 800906c:	f3af 8000 	nop.w

08009070 <pxCurrentTCBConst2>:
 8009070:	24004670 	.word	0x24004670
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009074:	bf00      	nop
 8009076:	bf00      	nop

08009078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009078:	4808      	ldr	r0, [pc, #32]	@ (800909c <prvPortStartFirstTask+0x24>)
 800907a:	6800      	ldr	r0, [r0, #0]
 800907c:	6800      	ldr	r0, [r0, #0]
 800907e:	f380 8808 	msr	MSP, r0
 8009082:	f04f 0000 	mov.w	r0, #0
 8009086:	f380 8814 	msr	CONTROL, r0
 800908a:	b662      	cpsie	i
 800908c:	b661      	cpsie	f
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	f3bf 8f6f 	isb	sy
 8009096:	df00      	svc	0
 8009098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800909a:	bf00      	nop
 800909c:	e000ed08 	.word	0xe000ed08

080090a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80090a6:	4b47      	ldr	r3, [pc, #284]	@ (80091c4 <xPortStartScheduler+0x124>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a47      	ldr	r2, [pc, #284]	@ (80091c8 <xPortStartScheduler+0x128>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d10b      	bne.n	80090c8 <xPortStartScheduler+0x28>
	__asm volatile
 80090b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	60fb      	str	r3, [r7, #12]
}
 80090c2:	bf00      	nop
 80090c4:	bf00      	nop
 80090c6:	e7fd      	b.n	80090c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80090c8:	4b3e      	ldr	r3, [pc, #248]	@ (80091c4 <xPortStartScheduler+0x124>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a3f      	ldr	r2, [pc, #252]	@ (80091cc <xPortStartScheduler+0x12c>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d10b      	bne.n	80090ea <xPortStartScheduler+0x4a>
	__asm volatile
 80090d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d6:	f383 8811 	msr	BASEPRI, r3
 80090da:	f3bf 8f6f 	isb	sy
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	613b      	str	r3, [r7, #16]
}
 80090e4:	bf00      	nop
 80090e6:	bf00      	nop
 80090e8:	e7fd      	b.n	80090e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80090ea:	4b39      	ldr	r3, [pc, #228]	@ (80091d0 <xPortStartScheduler+0x130>)
 80090ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	22ff      	movs	r2, #255	@ 0xff
 80090fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	b2db      	uxtb	r3, r3
 8009102:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009104:	78fb      	ldrb	r3, [r7, #3]
 8009106:	b2db      	uxtb	r3, r3
 8009108:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800910c:	b2da      	uxtb	r2, r3
 800910e:	4b31      	ldr	r3, [pc, #196]	@ (80091d4 <xPortStartScheduler+0x134>)
 8009110:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009112:	4b31      	ldr	r3, [pc, #196]	@ (80091d8 <xPortStartScheduler+0x138>)
 8009114:	2207      	movs	r2, #7
 8009116:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009118:	e009      	b.n	800912e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800911a:	4b2f      	ldr	r3, [pc, #188]	@ (80091d8 <xPortStartScheduler+0x138>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	3b01      	subs	r3, #1
 8009120:	4a2d      	ldr	r2, [pc, #180]	@ (80091d8 <xPortStartScheduler+0x138>)
 8009122:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009124:	78fb      	ldrb	r3, [r7, #3]
 8009126:	b2db      	uxtb	r3, r3
 8009128:	005b      	lsls	r3, r3, #1
 800912a:	b2db      	uxtb	r3, r3
 800912c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800912e:	78fb      	ldrb	r3, [r7, #3]
 8009130:	b2db      	uxtb	r3, r3
 8009132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009136:	2b80      	cmp	r3, #128	@ 0x80
 8009138:	d0ef      	beq.n	800911a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800913a:	4b27      	ldr	r3, [pc, #156]	@ (80091d8 <xPortStartScheduler+0x138>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f1c3 0307 	rsb	r3, r3, #7
 8009142:	2b04      	cmp	r3, #4
 8009144:	d00b      	beq.n	800915e <xPortStartScheduler+0xbe>
	__asm volatile
 8009146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800914a:	f383 8811 	msr	BASEPRI, r3
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	60bb      	str	r3, [r7, #8]
}
 8009158:	bf00      	nop
 800915a:	bf00      	nop
 800915c:	e7fd      	b.n	800915a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800915e:	4b1e      	ldr	r3, [pc, #120]	@ (80091d8 <xPortStartScheduler+0x138>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	021b      	lsls	r3, r3, #8
 8009164:	4a1c      	ldr	r2, [pc, #112]	@ (80091d8 <xPortStartScheduler+0x138>)
 8009166:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009168:	4b1b      	ldr	r3, [pc, #108]	@ (80091d8 <xPortStartScheduler+0x138>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009170:	4a19      	ldr	r2, [pc, #100]	@ (80091d8 <xPortStartScheduler+0x138>)
 8009172:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	b2da      	uxtb	r2, r3
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800917c:	4b17      	ldr	r3, [pc, #92]	@ (80091dc <xPortStartScheduler+0x13c>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a16      	ldr	r2, [pc, #88]	@ (80091dc <xPortStartScheduler+0x13c>)
 8009182:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009186:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009188:	4b14      	ldr	r3, [pc, #80]	@ (80091dc <xPortStartScheduler+0x13c>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a13      	ldr	r2, [pc, #76]	@ (80091dc <xPortStartScheduler+0x13c>)
 800918e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009192:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009194:	f000 f8da 	bl	800934c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009198:	4b11      	ldr	r3, [pc, #68]	@ (80091e0 <xPortStartScheduler+0x140>)
 800919a:	2200      	movs	r2, #0
 800919c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800919e:	f000 f8f9 	bl	8009394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80091a2:	4b10      	ldr	r3, [pc, #64]	@ (80091e4 <xPortStartScheduler+0x144>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a0f      	ldr	r2, [pc, #60]	@ (80091e4 <xPortStartScheduler+0x144>)
 80091a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80091ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80091ae:	f7ff ff63 	bl	8009078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80091b2:	f001 f9ef 	bl	800a594 <vTaskSwitchContext>
	prvTaskExitError();
 80091b6:	f7ff ff19 	bl	8008fec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3718      	adds	r7, #24
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	e000ed00 	.word	0xe000ed00
 80091c8:	410fc271 	.word	0x410fc271
 80091cc:	410fc270 	.word	0x410fc270
 80091d0:	e000e400 	.word	0xe000e400
 80091d4:	24004628 	.word	0x24004628
 80091d8:	2400462c 	.word	0x2400462c
 80091dc:	e000ed20 	.word	0xe000ed20
 80091e0:	24000010 	.word	0x24000010
 80091e4:	e000ef34 	.word	0xe000ef34

080091e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
	__asm volatile
 80091ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f2:	f383 8811 	msr	BASEPRI, r3
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	f3bf 8f4f 	dsb	sy
 80091fe:	607b      	str	r3, [r7, #4]
}
 8009200:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009202:	4b10      	ldr	r3, [pc, #64]	@ (8009244 <vPortEnterCritical+0x5c>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	3301      	adds	r3, #1
 8009208:	4a0e      	ldr	r2, [pc, #56]	@ (8009244 <vPortEnterCritical+0x5c>)
 800920a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800920c:	4b0d      	ldr	r3, [pc, #52]	@ (8009244 <vPortEnterCritical+0x5c>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d110      	bne.n	8009236 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009214:	4b0c      	ldr	r3, [pc, #48]	@ (8009248 <vPortEnterCritical+0x60>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	b2db      	uxtb	r3, r3
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00b      	beq.n	8009236 <vPortEnterCritical+0x4e>
	__asm volatile
 800921e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009222:	f383 8811 	msr	BASEPRI, r3
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	f3bf 8f4f 	dsb	sy
 800922e:	603b      	str	r3, [r7, #0]
}
 8009230:	bf00      	nop
 8009232:	bf00      	nop
 8009234:	e7fd      	b.n	8009232 <vPortEnterCritical+0x4a>
	}
}
 8009236:	bf00      	nop
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	24000010 	.word	0x24000010
 8009248:	e000ed04 	.word	0xe000ed04

0800924c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009252:	4b12      	ldr	r3, [pc, #72]	@ (800929c <vPortExitCritical+0x50>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10b      	bne.n	8009272 <vPortExitCritical+0x26>
	__asm volatile
 800925a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925e:	f383 8811 	msr	BASEPRI, r3
 8009262:	f3bf 8f6f 	isb	sy
 8009266:	f3bf 8f4f 	dsb	sy
 800926a:	607b      	str	r3, [r7, #4]
}
 800926c:	bf00      	nop
 800926e:	bf00      	nop
 8009270:	e7fd      	b.n	800926e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009272:	4b0a      	ldr	r3, [pc, #40]	@ (800929c <vPortExitCritical+0x50>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	3b01      	subs	r3, #1
 8009278:	4a08      	ldr	r2, [pc, #32]	@ (800929c <vPortExitCritical+0x50>)
 800927a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800927c:	4b07      	ldr	r3, [pc, #28]	@ (800929c <vPortExitCritical+0x50>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d105      	bne.n	8009290 <vPortExitCritical+0x44>
 8009284:	2300      	movs	r3, #0
 8009286:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800928e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr
 800929c:	24000010 	.word	0x24000010

080092a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80092a0:	f3ef 8009 	mrs	r0, PSP
 80092a4:	f3bf 8f6f 	isb	sy
 80092a8:	4b15      	ldr	r3, [pc, #84]	@ (8009300 <pxCurrentTCBConst>)
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	f01e 0f10 	tst.w	lr, #16
 80092b0:	bf08      	it	eq
 80092b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80092b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ba:	6010      	str	r0, [r2, #0]
 80092bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80092c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80092c4:	f380 8811 	msr	BASEPRI, r0
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	f3bf 8f6f 	isb	sy
 80092d0:	f001 f960 	bl	800a594 <vTaskSwitchContext>
 80092d4:	f04f 0000 	mov.w	r0, #0
 80092d8:	f380 8811 	msr	BASEPRI, r0
 80092dc:	bc09      	pop	{r0, r3}
 80092de:	6819      	ldr	r1, [r3, #0]
 80092e0:	6808      	ldr	r0, [r1, #0]
 80092e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e6:	f01e 0f10 	tst.w	lr, #16
 80092ea:	bf08      	it	eq
 80092ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80092f0:	f380 8809 	msr	PSP, r0
 80092f4:	f3bf 8f6f 	isb	sy
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	f3af 8000 	nop.w

08009300 <pxCurrentTCBConst>:
 8009300:	24004670 	.word	0x24004670
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009304:	bf00      	nop
 8009306:	bf00      	nop

08009308 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
	__asm volatile
 800930e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	607b      	str	r3, [r7, #4]
}
 8009320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009322:	f001 f87d 	bl	800a420 <xTaskIncrementTick>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d003      	beq.n	8009334 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800932c:	4b06      	ldr	r3, [pc, #24]	@ (8009348 <xPortSysTickHandler+0x40>)
 800932e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009332:	601a      	str	r2, [r3, #0]
 8009334:	2300      	movs	r3, #0
 8009336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	f383 8811 	msr	BASEPRI, r3
}
 800933e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009340:	bf00      	nop
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	e000ed04 	.word	0xe000ed04

0800934c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800934c:	b480      	push	{r7}
 800934e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009350:	4b0b      	ldr	r3, [pc, #44]	@ (8009380 <vPortSetupTimerInterrupt+0x34>)
 8009352:	2200      	movs	r2, #0
 8009354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009356:	4b0b      	ldr	r3, [pc, #44]	@ (8009384 <vPortSetupTimerInterrupt+0x38>)
 8009358:	2200      	movs	r2, #0
 800935a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800935c:	4b0a      	ldr	r3, [pc, #40]	@ (8009388 <vPortSetupTimerInterrupt+0x3c>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a0a      	ldr	r2, [pc, #40]	@ (800938c <vPortSetupTimerInterrupt+0x40>)
 8009362:	fba2 2303 	umull	r2, r3, r2, r3
 8009366:	099b      	lsrs	r3, r3, #6
 8009368:	4a09      	ldr	r2, [pc, #36]	@ (8009390 <vPortSetupTimerInterrupt+0x44>)
 800936a:	3b01      	subs	r3, #1
 800936c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800936e:	4b04      	ldr	r3, [pc, #16]	@ (8009380 <vPortSetupTimerInterrupt+0x34>)
 8009370:	2207      	movs	r2, #7
 8009372:	601a      	str	r2, [r3, #0]
}
 8009374:	bf00      	nop
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	e000e010 	.word	0xe000e010
 8009384:	e000e018 	.word	0xe000e018
 8009388:	24000000 	.word	0x24000000
 800938c:	10624dd3 	.word	0x10624dd3
 8009390:	e000e014 	.word	0xe000e014

08009394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009394:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80093a4 <vPortEnableVFP+0x10>
 8009398:	6801      	ldr	r1, [r0, #0]
 800939a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800939e:	6001      	str	r1, [r0, #0]
 80093a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80093a2:	bf00      	nop
 80093a4:	e000ed88 	.word	0xe000ed88

080093a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80093ae:	f3ef 8305 	mrs	r3, IPSR
 80093b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2b0f      	cmp	r3, #15
 80093b8:	d915      	bls.n	80093e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80093ba:	4a18      	ldr	r2, [pc, #96]	@ (800941c <vPortValidateInterruptPriority+0x74>)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	4413      	add	r3, r2
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80093c4:	4b16      	ldr	r3, [pc, #88]	@ (8009420 <vPortValidateInterruptPriority+0x78>)
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	7afa      	ldrb	r2, [r7, #11]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d20b      	bcs.n	80093e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80093ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	607b      	str	r3, [r7, #4]
}
 80093e0:	bf00      	nop
 80093e2:	bf00      	nop
 80093e4:	e7fd      	b.n	80093e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80093e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009424 <vPortValidateInterruptPriority+0x7c>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80093ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009428 <vPortValidateInterruptPriority+0x80>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d90b      	bls.n	800940e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80093f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093fa:	f383 8811 	msr	BASEPRI, r3
 80093fe:	f3bf 8f6f 	isb	sy
 8009402:	f3bf 8f4f 	dsb	sy
 8009406:	603b      	str	r3, [r7, #0]
}
 8009408:	bf00      	nop
 800940a:	bf00      	nop
 800940c:	e7fd      	b.n	800940a <vPortValidateInterruptPriority+0x62>
	}
 800940e:	bf00      	nop
 8009410:	3714      	adds	r7, #20
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	e000e3f0 	.word	0xe000e3f0
 8009420:	24004628 	.word	0x24004628
 8009424:	e000ed0c 	.word	0xe000ed0c
 8009428:	2400462c 	.word	0x2400462c

0800942c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d10b      	bne.n	8009458 <xQueueGenericReset+0x2c>
	__asm volatile
 8009440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	60bb      	str	r3, [r7, #8]
}
 8009452:	bf00      	nop
 8009454:	bf00      	nop
 8009456:	e7fd      	b.n	8009454 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009458:	f7ff fec6 	bl	80091e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009464:	68f9      	ldr	r1, [r7, #12]
 8009466:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009468:	fb01 f303 	mul.w	r3, r1, r3
 800946c:	441a      	add	r2, r3
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2200      	movs	r2, #0
 8009476:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009488:	3b01      	subs	r3, #1
 800948a:	68f9      	ldr	r1, [r7, #12]
 800948c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800948e:	fb01 f303 	mul.w	r3, r1, r3
 8009492:	441a      	add	r2, r3
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	22ff      	movs	r2, #255	@ 0xff
 800949c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	22ff      	movs	r2, #255	@ 0xff
 80094a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d114      	bne.n	80094d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d01a      	beq.n	80094ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	3310      	adds	r3, #16
 80094ba:	4618      	mov	r0, r3
 80094bc:	f001 f91a 	bl	800a6f4 <xTaskRemoveFromEventList>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d012      	beq.n	80094ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80094c6:	4b0d      	ldr	r3, [pc, #52]	@ (80094fc <xQueueGenericReset+0xd0>)
 80094c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094cc:	601a      	str	r2, [r3, #0]
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	f3bf 8f6f 	isb	sy
 80094d6:	e009      	b.n	80094ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	3310      	adds	r3, #16
 80094dc:	4618      	mov	r0, r3
 80094de:	f7ff fc9d 	bl	8008e1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	3324      	adds	r3, #36	@ 0x24
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7ff fc98 	bl	8008e1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80094ec:	f7ff feae 	bl	800924c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80094f0:	2301      	movs	r3, #1
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	e000ed04 	.word	0xe000ed04

08009500 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009500:	b580      	push	{r7, lr}
 8009502:	b08e      	sub	sp, #56	@ 0x38
 8009504:	af02      	add	r7, sp, #8
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
 800950c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10b      	bne.n	800952c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009526:	bf00      	nop
 8009528:	bf00      	nop
 800952a:	e7fd      	b.n	8009528 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10b      	bne.n	800954a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009536:	f383 8811 	msr	BASEPRI, r3
 800953a:	f3bf 8f6f 	isb	sy
 800953e:	f3bf 8f4f 	dsb	sy
 8009542:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009544:	bf00      	nop
 8009546:	bf00      	nop
 8009548:	e7fd      	b.n	8009546 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d002      	beq.n	8009556 <xQueueGenericCreateStatic+0x56>
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d001      	beq.n	800955a <xQueueGenericCreateStatic+0x5a>
 8009556:	2301      	movs	r3, #1
 8009558:	e000      	b.n	800955c <xQueueGenericCreateStatic+0x5c>
 800955a:	2300      	movs	r3, #0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10b      	bne.n	8009578 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	623b      	str	r3, [r7, #32]
}
 8009572:	bf00      	nop
 8009574:	bf00      	nop
 8009576:	e7fd      	b.n	8009574 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d102      	bne.n	8009584 <xQueueGenericCreateStatic+0x84>
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d101      	bne.n	8009588 <xQueueGenericCreateStatic+0x88>
 8009584:	2301      	movs	r3, #1
 8009586:	e000      	b.n	800958a <xQueueGenericCreateStatic+0x8a>
 8009588:	2300      	movs	r3, #0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10b      	bne.n	80095a6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800958e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009592:	f383 8811 	msr	BASEPRI, r3
 8009596:	f3bf 8f6f 	isb	sy
 800959a:	f3bf 8f4f 	dsb	sy
 800959e:	61fb      	str	r3, [r7, #28]
}
 80095a0:	bf00      	nop
 80095a2:	bf00      	nop
 80095a4:	e7fd      	b.n	80095a2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80095a6:	2350      	movs	r3, #80	@ 0x50
 80095a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	2b50      	cmp	r3, #80	@ 0x50
 80095ae:	d00b      	beq.n	80095c8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	61bb      	str	r3, [r7, #24]
}
 80095c2:	bf00      	nop
 80095c4:	bf00      	nop
 80095c6:	e7fd      	b.n	80095c4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80095c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80095ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00d      	beq.n	80095f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80095d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095d6:	2201      	movs	r2, #1
 80095d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80095dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80095e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	4613      	mov	r3, r2
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	68b9      	ldr	r1, [r7, #8]
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f000 f805 	bl	80095fa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80095f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3730      	adds	r7, #48	@ 0x30
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b084      	sub	sp, #16
 80095fe:	af00      	add	r7, sp, #0
 8009600:	60f8      	str	r0, [r7, #12]
 8009602:	60b9      	str	r1, [r7, #8]
 8009604:	607a      	str	r2, [r7, #4]
 8009606:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d103      	bne.n	8009616 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	69ba      	ldr	r2, [r7, #24]
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	e002      	b.n	800961c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	68ba      	ldr	r2, [r7, #8]
 8009626:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009628:	2101      	movs	r1, #1
 800962a:	69b8      	ldr	r0, [r7, #24]
 800962c:	f7ff fefe 	bl	800942c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	78fa      	ldrb	r2, [r7, #3]
 8009634:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009638:	bf00      	nop
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b08e      	sub	sp, #56	@ 0x38
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	607a      	str	r2, [r7, #4]
 800964c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800964e:	2300      	movs	r3, #0
 8009650:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10b      	bne.n	8009674 <xQueueGenericSend+0x34>
	__asm volatile
 800965c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009660:	f383 8811 	msr	BASEPRI, r3
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	f3bf 8f4f 	dsb	sy
 800966c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800966e:	bf00      	nop
 8009670:	bf00      	nop
 8009672:	e7fd      	b.n	8009670 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d103      	bne.n	8009682 <xQueueGenericSend+0x42>
 800967a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800967c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800967e:	2b00      	cmp	r3, #0
 8009680:	d101      	bne.n	8009686 <xQueueGenericSend+0x46>
 8009682:	2301      	movs	r3, #1
 8009684:	e000      	b.n	8009688 <xQueueGenericSend+0x48>
 8009686:	2300      	movs	r3, #0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10b      	bne.n	80096a4 <xQueueGenericSend+0x64>
	__asm volatile
 800968c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009690:	f383 8811 	msr	BASEPRI, r3
 8009694:	f3bf 8f6f 	isb	sy
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800969e:	bf00      	nop
 80096a0:	bf00      	nop
 80096a2:	e7fd      	b.n	80096a0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d103      	bne.n	80096b2 <xQueueGenericSend+0x72>
 80096aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d101      	bne.n	80096b6 <xQueueGenericSend+0x76>
 80096b2:	2301      	movs	r3, #1
 80096b4:	e000      	b.n	80096b8 <xQueueGenericSend+0x78>
 80096b6:	2300      	movs	r3, #0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10b      	bne.n	80096d4 <xQueueGenericSend+0x94>
	__asm volatile
 80096bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	623b      	str	r3, [r7, #32]
}
 80096ce:	bf00      	nop
 80096d0:	bf00      	nop
 80096d2:	e7fd      	b.n	80096d0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80096d4:	f001 f9ce 	bl	800aa74 <xTaskGetSchedulerState>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d102      	bne.n	80096e4 <xQueueGenericSend+0xa4>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d101      	bne.n	80096e8 <xQueueGenericSend+0xa8>
 80096e4:	2301      	movs	r3, #1
 80096e6:	e000      	b.n	80096ea <xQueueGenericSend+0xaa>
 80096e8:	2300      	movs	r3, #0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10b      	bne.n	8009706 <xQueueGenericSend+0xc6>
	__asm volatile
 80096ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f2:	f383 8811 	msr	BASEPRI, r3
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	61fb      	str	r3, [r7, #28]
}
 8009700:	bf00      	nop
 8009702:	bf00      	nop
 8009704:	e7fd      	b.n	8009702 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009706:	f7ff fd6f 	bl	80091e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800970a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800970c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800970e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009712:	429a      	cmp	r2, r3
 8009714:	d302      	bcc.n	800971c <xQueueGenericSend+0xdc>
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	2b02      	cmp	r3, #2
 800971a:	d129      	bne.n	8009770 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800971c:	683a      	ldr	r2, [r7, #0]
 800971e:	68b9      	ldr	r1, [r7, #8]
 8009720:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009722:	f000 fa0f 	bl	8009b44 <prvCopyDataToQueue>
 8009726:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800972a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800972c:	2b00      	cmp	r3, #0
 800972e:	d010      	beq.n	8009752 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009732:	3324      	adds	r3, #36	@ 0x24
 8009734:	4618      	mov	r0, r3
 8009736:	f000 ffdd 	bl	800a6f4 <xTaskRemoveFromEventList>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d013      	beq.n	8009768 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009740:	4b3f      	ldr	r3, [pc, #252]	@ (8009840 <xQueueGenericSend+0x200>)
 8009742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009746:	601a      	str	r2, [r3, #0]
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	f3bf 8f6f 	isb	sy
 8009750:	e00a      	b.n	8009768 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009754:	2b00      	cmp	r3, #0
 8009756:	d007      	beq.n	8009768 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009758:	4b39      	ldr	r3, [pc, #228]	@ (8009840 <xQueueGenericSend+0x200>)
 800975a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800975e:	601a      	str	r2, [r3, #0]
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009768:	f7ff fd70 	bl	800924c <vPortExitCritical>
				return pdPASS;
 800976c:	2301      	movs	r3, #1
 800976e:	e063      	b.n	8009838 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d103      	bne.n	800977e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009776:	f7ff fd69 	bl	800924c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800977a:	2300      	movs	r3, #0
 800977c:	e05c      	b.n	8009838 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800977e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009780:	2b00      	cmp	r3, #0
 8009782:	d106      	bne.n	8009792 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009784:	f107 0314 	add.w	r3, r7, #20
 8009788:	4618      	mov	r0, r3
 800978a:	f001 f817 	bl	800a7bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800978e:	2301      	movs	r3, #1
 8009790:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009792:	f7ff fd5b 	bl	800924c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009796:	f000 fd87 	bl	800a2a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800979a:	f7ff fd25 	bl	80091e8 <vPortEnterCritical>
 800979e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80097a4:	b25b      	sxtb	r3, r3
 80097a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097aa:	d103      	bne.n	80097b4 <xQueueGenericSend+0x174>
 80097ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80097b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80097ba:	b25b      	sxtb	r3, r3
 80097bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c0:	d103      	bne.n	80097ca <xQueueGenericSend+0x18a>
 80097c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c4:	2200      	movs	r2, #0
 80097c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80097ca:	f7ff fd3f 	bl	800924c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097ce:	1d3a      	adds	r2, r7, #4
 80097d0:	f107 0314 	add.w	r3, r7, #20
 80097d4:	4611      	mov	r1, r2
 80097d6:	4618      	mov	r0, r3
 80097d8:	f001 f806 	bl	800a7e8 <xTaskCheckForTimeOut>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d124      	bne.n	800982c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80097e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80097e4:	f000 faa6 	bl	8009d34 <prvIsQueueFull>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d018      	beq.n	8009820 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80097ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f0:	3310      	adds	r3, #16
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	4611      	mov	r1, r2
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 ff2a 	bl	800a650 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80097fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80097fe:	f000 fa31 	bl	8009c64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009802:	f000 fd5f 	bl	800a2c4 <xTaskResumeAll>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	f47f af7c 	bne.w	8009706 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800980e:	4b0c      	ldr	r3, [pc, #48]	@ (8009840 <xQueueGenericSend+0x200>)
 8009810:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009814:	601a      	str	r2, [r3, #0]
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	e772      	b.n	8009706 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009820:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009822:	f000 fa1f 	bl	8009c64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009826:	f000 fd4d 	bl	800a2c4 <xTaskResumeAll>
 800982a:	e76c      	b.n	8009706 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800982c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800982e:	f000 fa19 	bl	8009c64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009832:	f000 fd47 	bl	800a2c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009836:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009838:	4618      	mov	r0, r3
 800983a:	3738      	adds	r7, #56	@ 0x38
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	e000ed04 	.word	0xe000ed04

08009844 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b090      	sub	sp, #64	@ 0x40
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
 8009850:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009858:	2b00      	cmp	r3, #0
 800985a:	d10b      	bne.n	8009874 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800985c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009860:	f383 8811 	msr	BASEPRI, r3
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	f3bf 8f4f 	dsb	sy
 800986c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800986e:	bf00      	nop
 8009870:	bf00      	nop
 8009872:	e7fd      	b.n	8009870 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d103      	bne.n	8009882 <xQueueGenericSendFromISR+0x3e>
 800987a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800987c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800987e:	2b00      	cmp	r3, #0
 8009880:	d101      	bne.n	8009886 <xQueueGenericSendFromISR+0x42>
 8009882:	2301      	movs	r3, #1
 8009884:	e000      	b.n	8009888 <xQueueGenericSendFromISR+0x44>
 8009886:	2300      	movs	r3, #0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10b      	bne.n	80098a4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800988c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800989e:	bf00      	nop
 80098a0:	bf00      	nop
 80098a2:	e7fd      	b.n	80098a0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	d103      	bne.n	80098b2 <xQueueGenericSendFromISR+0x6e>
 80098aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d101      	bne.n	80098b6 <xQueueGenericSendFromISR+0x72>
 80098b2:	2301      	movs	r3, #1
 80098b4:	e000      	b.n	80098b8 <xQueueGenericSendFromISR+0x74>
 80098b6:	2300      	movs	r3, #0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d10b      	bne.n	80098d4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80098bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c0:	f383 8811 	msr	BASEPRI, r3
 80098c4:	f3bf 8f6f 	isb	sy
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	623b      	str	r3, [r7, #32]
}
 80098ce:	bf00      	nop
 80098d0:	bf00      	nop
 80098d2:	e7fd      	b.n	80098d0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80098d4:	f7ff fd68 	bl	80093a8 <vPortValidateInterruptPriority>
	__asm volatile
 80098d8:	f3ef 8211 	mrs	r2, BASEPRI
 80098dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e0:	f383 8811 	msr	BASEPRI, r3
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	61fa      	str	r2, [r7, #28]
 80098ee:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80098f0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80098f2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80098f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80098f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d302      	bcc.n	8009906 <xQueueGenericSendFromISR+0xc2>
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	2b02      	cmp	r3, #2
 8009904:	d12f      	bne.n	8009966 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009908:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800990c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009914:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009916:	683a      	ldr	r2, [r7, #0]
 8009918:	68b9      	ldr	r1, [r7, #8]
 800991a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800991c:	f000 f912 	bl	8009b44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009920:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009928:	d112      	bne.n	8009950 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800992a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800992c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800992e:	2b00      	cmp	r3, #0
 8009930:	d016      	beq.n	8009960 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009934:	3324      	adds	r3, #36	@ 0x24
 8009936:	4618      	mov	r0, r3
 8009938:	f000 fedc 	bl	800a6f4 <xTaskRemoveFromEventList>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00e      	beq.n	8009960 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00b      	beq.n	8009960 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	601a      	str	r2, [r3, #0]
 800994e:	e007      	b.n	8009960 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009950:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009954:	3301      	adds	r3, #1
 8009956:	b2db      	uxtb	r3, r3
 8009958:	b25a      	sxtb	r2, r3
 800995a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800995c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009960:	2301      	movs	r3, #1
 8009962:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009964:	e001      	b.n	800996a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009966:	2300      	movs	r3, #0
 8009968:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800996a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800996c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	f383 8811 	msr	BASEPRI, r3
}
 8009974:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009978:	4618      	mov	r0, r3
 800997a:	3740      	adds	r7, #64	@ 0x40
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b08c      	sub	sp, #48	@ 0x30
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800998c:	2300      	movs	r3, #0
 800998e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009996:	2b00      	cmp	r3, #0
 8009998:	d10b      	bne.n	80099b2 <xQueueReceive+0x32>
	__asm volatile
 800999a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	623b      	str	r3, [r7, #32]
}
 80099ac:	bf00      	nop
 80099ae:	bf00      	nop
 80099b0:	e7fd      	b.n	80099ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d103      	bne.n	80099c0 <xQueueReceive+0x40>
 80099b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d101      	bne.n	80099c4 <xQueueReceive+0x44>
 80099c0:	2301      	movs	r3, #1
 80099c2:	e000      	b.n	80099c6 <xQueueReceive+0x46>
 80099c4:	2300      	movs	r3, #0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d10b      	bne.n	80099e2 <xQueueReceive+0x62>
	__asm volatile
 80099ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ce:	f383 8811 	msr	BASEPRI, r3
 80099d2:	f3bf 8f6f 	isb	sy
 80099d6:	f3bf 8f4f 	dsb	sy
 80099da:	61fb      	str	r3, [r7, #28]
}
 80099dc:	bf00      	nop
 80099de:	bf00      	nop
 80099e0:	e7fd      	b.n	80099de <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099e2:	f001 f847 	bl	800aa74 <xTaskGetSchedulerState>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d102      	bne.n	80099f2 <xQueueReceive+0x72>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d101      	bne.n	80099f6 <xQueueReceive+0x76>
 80099f2:	2301      	movs	r3, #1
 80099f4:	e000      	b.n	80099f8 <xQueueReceive+0x78>
 80099f6:	2300      	movs	r3, #0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d10b      	bne.n	8009a14 <xQueueReceive+0x94>
	__asm volatile
 80099fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a00:	f383 8811 	msr	BASEPRI, r3
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	61bb      	str	r3, [r7, #24]
}
 8009a0e:	bf00      	nop
 8009a10:	bf00      	nop
 8009a12:	e7fd      	b.n	8009a10 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a14:	f7ff fbe8 	bl	80091e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a1c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d01f      	beq.n	8009a64 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009a24:	68b9      	ldr	r1, [r7, #8]
 8009a26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a28:	f000 f8f6 	bl	8009c18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2e:	1e5a      	subs	r2, r3, #1
 8009a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a32:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a36:	691b      	ldr	r3, [r3, #16]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00f      	beq.n	8009a5c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a3e:	3310      	adds	r3, #16
 8009a40:	4618      	mov	r0, r3
 8009a42:	f000 fe57 	bl	800a6f4 <xTaskRemoveFromEventList>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d007      	beq.n	8009a5c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a4c:	4b3c      	ldr	r3, [pc, #240]	@ (8009b40 <xQueueReceive+0x1c0>)
 8009a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	f3bf 8f4f 	dsb	sy
 8009a58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a5c:	f7ff fbf6 	bl	800924c <vPortExitCritical>
				return pdPASS;
 8009a60:	2301      	movs	r3, #1
 8009a62:	e069      	b.n	8009b38 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d103      	bne.n	8009a72 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009a6a:	f7ff fbef 	bl	800924c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	e062      	b.n	8009b38 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d106      	bne.n	8009a86 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a78:	f107 0310 	add.w	r3, r7, #16
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f000 fe9d 	bl	800a7bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a82:	2301      	movs	r3, #1
 8009a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a86:	f7ff fbe1 	bl	800924c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a8a:	f000 fc0d 	bl	800a2a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a8e:	f7ff fbab 	bl	80091e8 <vPortEnterCritical>
 8009a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a98:	b25b      	sxtb	r3, r3
 8009a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a9e:	d103      	bne.n	8009aa8 <xQueueReceive+0x128>
 8009aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aaa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009aae:	b25b      	sxtb	r3, r3
 8009ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab4:	d103      	bne.n	8009abe <xQueueReceive+0x13e>
 8009ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009abe:	f7ff fbc5 	bl	800924c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ac2:	1d3a      	adds	r2, r7, #4
 8009ac4:	f107 0310 	add.w	r3, r7, #16
 8009ac8:	4611      	mov	r1, r2
 8009aca:	4618      	mov	r0, r3
 8009acc:	f000 fe8c 	bl	800a7e8 <xTaskCheckForTimeOut>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d123      	bne.n	8009b1e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ad6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ad8:	f000 f916 	bl	8009d08 <prvIsQueueEmpty>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d017      	beq.n	8009b12 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae4:	3324      	adds	r3, #36	@ 0x24
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	4611      	mov	r1, r2
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 fdb0 	bl	800a650 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009af0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009af2:	f000 f8b7 	bl	8009c64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009af6:	f000 fbe5 	bl	800a2c4 <xTaskResumeAll>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d189      	bne.n	8009a14 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009b00:	4b0f      	ldr	r3, [pc, #60]	@ (8009b40 <xQueueReceive+0x1c0>)
 8009b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b06:	601a      	str	r2, [r3, #0]
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	e780      	b.n	8009a14 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009b12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b14:	f000 f8a6 	bl	8009c64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b18:	f000 fbd4 	bl	800a2c4 <xTaskResumeAll>
 8009b1c:	e77a      	b.n	8009a14 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009b1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b20:	f000 f8a0 	bl	8009c64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b24:	f000 fbce 	bl	800a2c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b2a:	f000 f8ed 	bl	8009d08 <prvIsQueueEmpty>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f43f af6f 	beq.w	8009a14 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3730      	adds	r7, #48	@ 0x30
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	e000ed04 	.word	0xe000ed04

08009b44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009b50:	2300      	movs	r3, #0
 8009b52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10d      	bne.n	8009b7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d14d      	bne.n	8009c06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f000 ff9e 	bl	800aab0 <xTaskPriorityDisinherit>
 8009b74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	609a      	str	r2, [r3, #8]
 8009b7c:	e043      	b.n	8009c06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d119      	bne.n	8009bb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6858      	ldr	r0, [r3, #4]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	68b9      	ldr	r1, [r7, #8]
 8009b90:	f001 feeb 	bl	800b96a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	685a      	ldr	r2, [r3, #4]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b9c:	441a      	add	r2, r3
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	685a      	ldr	r2, [r3, #4]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d32b      	bcc.n	8009c06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	605a      	str	r2, [r3, #4]
 8009bb6:	e026      	b.n	8009c06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	68d8      	ldr	r0, [r3, #12]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	68b9      	ldr	r1, [r7, #8]
 8009bc4:	f001 fed1 	bl	800b96a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	68da      	ldr	r2, [r3, #12]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bd0:	425b      	negs	r3, r3
 8009bd2:	441a      	add	r2, r3
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	68da      	ldr	r2, [r3, #12]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d207      	bcs.n	8009bf4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	689a      	ldr	r2, [r3, #8]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bec:	425b      	negs	r3, r3
 8009bee:	441a      	add	r2, r3
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d105      	bne.n	8009c06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d002      	beq.n	8009c06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	3b01      	subs	r3, #1
 8009c04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	1c5a      	adds	r2, r3, #1
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009c0e:	697b      	ldr	r3, [r7, #20]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3718      	adds	r7, #24
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d018      	beq.n	8009c5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	68da      	ldr	r2, [r3, #12]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c32:	441a      	add	r2, r3
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	68da      	ldr	r2, [r3, #12]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d303      	bcc.n	8009c4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	68d9      	ldr	r1, [r3, #12]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c54:	461a      	mov	r2, r3
 8009c56:	6838      	ldr	r0, [r7, #0]
 8009c58:	f001 fe87 	bl	800b96a <memcpy>
	}
}
 8009c5c:	bf00      	nop
 8009c5e:	3708      	adds	r7, #8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009c6c:	f7ff fabc 	bl	80091e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c78:	e011      	b.n	8009c9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d012      	beq.n	8009ca8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	3324      	adds	r3, #36	@ 0x24
 8009c86:	4618      	mov	r0, r3
 8009c88:	f000 fd34 	bl	800a6f4 <xTaskRemoveFromEventList>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d001      	beq.n	8009c96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009c92:	f000 fe0d 	bl	800a8b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009c96:	7bfb      	ldrb	r3, [r7, #15]
 8009c98:	3b01      	subs	r3, #1
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	dce9      	bgt.n	8009c7a <prvUnlockQueue+0x16>
 8009ca6:	e000      	b.n	8009caa <prvUnlockQueue+0x46>
					break;
 8009ca8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	22ff      	movs	r2, #255	@ 0xff
 8009cae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009cb2:	f7ff facb 	bl	800924c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009cb6:	f7ff fa97 	bl	80091e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009cc0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009cc2:	e011      	b.n	8009ce8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d012      	beq.n	8009cf2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	3310      	adds	r3, #16
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f000 fd0f 	bl	800a6f4 <xTaskRemoveFromEventList>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d001      	beq.n	8009ce0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009cdc:	f000 fde8 	bl	800a8b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009ce0:	7bbb      	ldrb	r3, [r7, #14]
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ce8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	dce9      	bgt.n	8009cc4 <prvUnlockQueue+0x60>
 8009cf0:	e000      	b.n	8009cf4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009cf2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	22ff      	movs	r2, #255	@ 0xff
 8009cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009cfc:	f7ff faa6 	bl	800924c <vPortExitCritical>
}
 8009d00:	bf00      	nop
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d10:	f7ff fa6a 	bl	80091e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d102      	bne.n	8009d22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	60fb      	str	r3, [r7, #12]
 8009d20:	e001      	b.n	8009d26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009d22:	2300      	movs	r3, #0
 8009d24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d26:	f7ff fa91 	bl	800924c <vPortExitCritical>

	return xReturn;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3710      	adds	r7, #16
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d3c:	f7ff fa54 	bl	80091e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d102      	bne.n	8009d52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	60fb      	str	r3, [r7, #12]
 8009d50:	e001      	b.n	8009d56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009d52:	2300      	movs	r3, #0
 8009d54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d56:	f7ff fa79 	bl	800924c <vPortExitCritical>

	return xReturn;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d6e:	2300      	movs	r3, #0
 8009d70:	60fb      	str	r3, [r7, #12]
 8009d72:	e014      	b.n	8009d9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009d74:	4a0f      	ldr	r2, [pc, #60]	@ (8009db4 <vQueueAddToRegistry+0x50>)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d10b      	bne.n	8009d98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009d80:	490c      	ldr	r1, [pc, #48]	@ (8009db4 <vQueueAddToRegistry+0x50>)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	683a      	ldr	r2, [r7, #0]
 8009d86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8009db4 <vQueueAddToRegistry+0x50>)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	00db      	lsls	r3, r3, #3
 8009d90:	4413      	add	r3, r2
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009d96:	e006      	b.n	8009da6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	60fb      	str	r3, [r7, #12]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2b07      	cmp	r3, #7
 8009da2:	d9e7      	bls.n	8009d74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009da4:	bf00      	nop
 8009da6:	bf00      	nop
 8009da8:	3714      	adds	r7, #20
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	24004630 	.word	0x24004630

08009db8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b086      	sub	sp, #24
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009dc8:	f7ff fa0e 	bl	80091e8 <vPortEnterCritical>
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009dd2:	b25b      	sxtb	r3, r3
 8009dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd8:	d103      	bne.n	8009de2 <vQueueWaitForMessageRestricted+0x2a>
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009de8:	b25b      	sxtb	r3, r3
 8009dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dee:	d103      	bne.n	8009df8 <vQueueWaitForMessageRestricted+0x40>
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009df8:	f7ff fa28 	bl	800924c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d106      	bne.n	8009e12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	3324      	adds	r3, #36	@ 0x24
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	68b9      	ldr	r1, [r7, #8]
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f000 fc45 	bl	800a69c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009e12:	6978      	ldr	r0, [r7, #20]
 8009e14:	f7ff ff26 	bl	8009c64 <prvUnlockQueue>
	}
 8009e18:	bf00      	nop
 8009e1a:	3718      	adds	r7, #24
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b08e      	sub	sp, #56	@ 0x38
 8009e24:	af04      	add	r7, sp, #16
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	607a      	str	r2, [r7, #4]
 8009e2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10b      	bne.n	8009e4c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e38:	f383 8811 	msr	BASEPRI, r3
 8009e3c:	f3bf 8f6f 	isb	sy
 8009e40:	f3bf 8f4f 	dsb	sy
 8009e44:	623b      	str	r3, [r7, #32]
}
 8009e46:	bf00      	nop
 8009e48:	bf00      	nop
 8009e4a:	e7fd      	b.n	8009e48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d10b      	bne.n	8009e6a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	61fb      	str	r3, [r7, #28]
}
 8009e64:	bf00      	nop
 8009e66:	bf00      	nop
 8009e68:	e7fd      	b.n	8009e66 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009e6a:	235c      	movs	r3, #92	@ 0x5c
 8009e6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	2b5c      	cmp	r3, #92	@ 0x5c
 8009e72:	d00b      	beq.n	8009e8c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e78:	f383 8811 	msr	BASEPRI, r3
 8009e7c:	f3bf 8f6f 	isb	sy
 8009e80:	f3bf 8f4f 	dsb	sy
 8009e84:	61bb      	str	r3, [r7, #24]
}
 8009e86:	bf00      	nop
 8009e88:	bf00      	nop
 8009e8a:	e7fd      	b.n	8009e88 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009e8c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d01e      	beq.n	8009ed2 <xTaskCreateStatic+0xb2>
 8009e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d01b      	beq.n	8009ed2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e9c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ea2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea6:	2202      	movs	r2, #2
 8009ea8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009eac:	2300      	movs	r3, #0
 8009eae:	9303      	str	r3, [sp, #12]
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb2:	9302      	str	r3, [sp, #8]
 8009eb4:	f107 0314 	add.w	r3, r7, #20
 8009eb8:	9301      	str	r3, [sp, #4]
 8009eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ebc:	9300      	str	r3, [sp, #0]
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	68b9      	ldr	r1, [r7, #8]
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	f000 f850 	bl	8009f6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009eca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009ecc:	f000 f8de 	bl	800a08c <prvAddNewTaskToReadyList>
 8009ed0:	e001      	b.n	8009ed6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009ed6:	697b      	ldr	r3, [r7, #20]
	}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3728      	adds	r7, #40	@ 0x28
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b08c      	sub	sp, #48	@ 0x30
 8009ee4:	af04      	add	r7, sp, #16
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	603b      	str	r3, [r7, #0]
 8009eec:	4613      	mov	r3, r2
 8009eee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009ef0:	88fb      	ldrh	r3, [r7, #6]
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7fe fda3 	bl	8008a40 <pvPortMalloc>
 8009efa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00e      	beq.n	8009f20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009f02:	205c      	movs	r0, #92	@ 0x5c
 8009f04:	f7fe fd9c 	bl	8008a40 <pvPortMalloc>
 8009f08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d003      	beq.n	8009f18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	697a      	ldr	r2, [r7, #20]
 8009f14:	631a      	str	r2, [r3, #48]	@ 0x30
 8009f16:	e005      	b.n	8009f24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009f18:	6978      	ldr	r0, [r7, #20]
 8009f1a:	f7fe fe5f 	bl	8008bdc <vPortFree>
 8009f1e:	e001      	b.n	8009f24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009f20:	2300      	movs	r3, #0
 8009f22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d017      	beq.n	8009f5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009f32:	88fa      	ldrh	r2, [r7, #6]
 8009f34:	2300      	movs	r3, #0
 8009f36:	9303      	str	r3, [sp, #12]
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	9302      	str	r3, [sp, #8]
 8009f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f3e:	9301      	str	r3, [sp, #4]
 8009f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f42:	9300      	str	r3, [sp, #0]
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	68b9      	ldr	r1, [r7, #8]
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f000 f80e 	bl	8009f6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f4e:	69f8      	ldr	r0, [r7, #28]
 8009f50:	f000 f89c 	bl	800a08c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009f54:	2301      	movs	r3, #1
 8009f56:	61bb      	str	r3, [r7, #24]
 8009f58:	e002      	b.n	8009f60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009f60:	69bb      	ldr	r3, [r7, #24]
	}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3720      	adds	r7, #32
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b088      	sub	sp, #32
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	60f8      	str	r0, [r7, #12]
 8009f72:	60b9      	str	r1, [r7, #8]
 8009f74:	607a      	str	r2, [r7, #4]
 8009f76:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f7a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	461a      	mov	r2, r3
 8009f82:	21a5      	movs	r1, #165	@ 0xa5
 8009f84:	f001 fc76 	bl	800b874 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f8c:	6879      	ldr	r1, [r7, #4]
 8009f8e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8009f92:	440b      	add	r3, r1
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4413      	add	r3, r2
 8009f98:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	f023 0307 	bic.w	r3, r3, #7
 8009fa0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	f003 0307 	and.w	r3, r3, #7
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00b      	beq.n	8009fc4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb0:	f383 8811 	msr	BASEPRI, r3
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	617b      	str	r3, [r7, #20]
}
 8009fbe:	bf00      	nop
 8009fc0:	bf00      	nop
 8009fc2:	e7fd      	b.n	8009fc0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d01f      	beq.n	800a00a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009fca:	2300      	movs	r3, #0
 8009fcc:	61fb      	str	r3, [r7, #28]
 8009fce:	e012      	b.n	8009ff6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	7819      	ldrb	r1, [r3, #0]
 8009fd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	4413      	add	r3, r2
 8009fde:	3334      	adds	r3, #52	@ 0x34
 8009fe0:	460a      	mov	r2, r1
 8009fe2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009fe4:	68ba      	ldr	r2, [r7, #8]
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	4413      	add	r3, r2
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d006      	beq.n	8009ffe <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	61fb      	str	r3, [r7, #28]
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	2b0f      	cmp	r3, #15
 8009ffa:	d9e9      	bls.n	8009fd0 <prvInitialiseNewTask+0x66>
 8009ffc:	e000      	b.n	800a000 <prvInitialiseNewTask+0x96>
			{
				break;
 8009ffe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a002:	2200      	movs	r2, #0
 800a004:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a008:	e003      	b.n	800a012 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00c:	2200      	movs	r2, #0
 800a00e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a014:	2b37      	cmp	r3, #55	@ 0x37
 800a016:	d901      	bls.n	800a01c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a018:	2337      	movs	r3, #55	@ 0x37
 800a01a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a01e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a020:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a024:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a026:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02a:	2200      	movs	r2, #0
 800a02c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a030:	3304      	adds	r3, #4
 800a032:	4618      	mov	r0, r3
 800a034:	f7fe ff12 	bl	8008e5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03a:	3318      	adds	r3, #24
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7fe ff0d 	bl	8008e5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a046:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a04a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a050:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a056:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a05a:	2200      	movs	r2, #0
 800a05c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a060:	2200      	movs	r2, #0
 800a062:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a066:	683a      	ldr	r2, [r7, #0]
 800a068:	68f9      	ldr	r1, [r7, #12]
 800a06a:	69b8      	ldr	r0, [r7, #24]
 800a06c:	f7fe ff8a 	bl	8008f84 <pxPortInitialiseStack>
 800a070:	4602      	mov	r2, r0
 800a072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a074:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d002      	beq.n	800a082 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a07e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a080:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a082:	bf00      	nop
 800a084:	3720      	adds	r7, #32
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
	...

0800a08c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a094:	f7ff f8a8 	bl	80091e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a098:	4b2d      	ldr	r3, [pc, #180]	@ (800a150 <prvAddNewTaskToReadyList+0xc4>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	3301      	adds	r3, #1
 800a09e:	4a2c      	ldr	r2, [pc, #176]	@ (800a150 <prvAddNewTaskToReadyList+0xc4>)
 800a0a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a0a2:	4b2c      	ldr	r3, [pc, #176]	@ (800a154 <prvAddNewTaskToReadyList+0xc8>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d109      	bne.n	800a0be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a0aa:	4a2a      	ldr	r2, [pc, #168]	@ (800a154 <prvAddNewTaskToReadyList+0xc8>)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a0b0:	4b27      	ldr	r3, [pc, #156]	@ (800a150 <prvAddNewTaskToReadyList+0xc4>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d110      	bne.n	800a0da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a0b8:	f000 fc1e 	bl	800a8f8 <prvInitialiseTaskLists>
 800a0bc:	e00d      	b.n	800a0da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a0be:	4b26      	ldr	r3, [pc, #152]	@ (800a158 <prvAddNewTaskToReadyList+0xcc>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d109      	bne.n	800a0da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a0c6:	4b23      	ldr	r3, [pc, #140]	@ (800a154 <prvAddNewTaskToReadyList+0xc8>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d802      	bhi.n	800a0da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a0d4:	4a1f      	ldr	r2, [pc, #124]	@ (800a154 <prvAddNewTaskToReadyList+0xc8>)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a0da:	4b20      	ldr	r3, [pc, #128]	@ (800a15c <prvAddNewTaskToReadyList+0xd0>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	4a1e      	ldr	r2, [pc, #120]	@ (800a15c <prvAddNewTaskToReadyList+0xd0>)
 800a0e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a0e4:	4b1d      	ldr	r3, [pc, #116]	@ (800a15c <prvAddNewTaskToReadyList+0xd0>)
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0f0:	4b1b      	ldr	r3, [pc, #108]	@ (800a160 <prvAddNewTaskToReadyList+0xd4>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d903      	bls.n	800a100 <prvAddNewTaskToReadyList+0x74>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0fc:	4a18      	ldr	r2, [pc, #96]	@ (800a160 <prvAddNewTaskToReadyList+0xd4>)
 800a0fe:	6013      	str	r3, [r2, #0]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a104:	4613      	mov	r3, r2
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4413      	add	r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4a15      	ldr	r2, [pc, #84]	@ (800a164 <prvAddNewTaskToReadyList+0xd8>)
 800a10e:	441a      	add	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	3304      	adds	r3, #4
 800a114:	4619      	mov	r1, r3
 800a116:	4610      	mov	r0, r2
 800a118:	f7fe fead 	bl	8008e76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a11c:	f7ff f896 	bl	800924c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a120:	4b0d      	ldr	r3, [pc, #52]	@ (800a158 <prvAddNewTaskToReadyList+0xcc>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00e      	beq.n	800a146 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a128:	4b0a      	ldr	r3, [pc, #40]	@ (800a154 <prvAddNewTaskToReadyList+0xc8>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a132:	429a      	cmp	r2, r3
 800a134:	d207      	bcs.n	800a146 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a136:	4b0c      	ldr	r3, [pc, #48]	@ (800a168 <prvAddNewTaskToReadyList+0xdc>)
 800a138:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a13c:	601a      	str	r2, [r3, #0]
 800a13e:	f3bf 8f4f 	dsb	sy
 800a142:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a146:	bf00      	nop
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	24004b44 	.word	0x24004b44
 800a154:	24004670 	.word	0x24004670
 800a158:	24004b50 	.word	0x24004b50
 800a15c:	24004b60 	.word	0x24004b60
 800a160:	24004b4c 	.word	0x24004b4c
 800a164:	24004674 	.word	0x24004674
 800a168:	e000ed04 	.word	0xe000ed04

0800a16c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a174:	2300      	movs	r3, #0
 800a176:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d018      	beq.n	800a1b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a17e:	4b14      	ldr	r3, [pc, #80]	@ (800a1d0 <vTaskDelay+0x64>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00b      	beq.n	800a19e <vTaskDelay+0x32>
	__asm volatile
 800a186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18a:	f383 8811 	msr	BASEPRI, r3
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f3bf 8f4f 	dsb	sy
 800a196:	60bb      	str	r3, [r7, #8]
}
 800a198:	bf00      	nop
 800a19a:	bf00      	nop
 800a19c:	e7fd      	b.n	800a19a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a19e:	f000 f883 	bl	800a2a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a1a2:	2100      	movs	r1, #0
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 fdad 	bl	800ad04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a1aa:	f000 f88b 	bl	800a2c4 <xTaskResumeAll>
 800a1ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d107      	bne.n	800a1c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a1b6:	4b07      	ldr	r3, [pc, #28]	@ (800a1d4 <vTaskDelay+0x68>)
 800a1b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1bc:	601a      	str	r2, [r3, #0]
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a1c6:	bf00      	nop
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	24004b6c 	.word	0x24004b6c
 800a1d4:	e000ed04 	.word	0xe000ed04

0800a1d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b08a      	sub	sp, #40	@ 0x28
 800a1dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a1e6:	463a      	mov	r2, r7
 800a1e8:	1d39      	adds	r1, r7, #4
 800a1ea:	f107 0308 	add.w	r3, r7, #8
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fe fbf2 	bl	80089d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a1f4:	6839      	ldr	r1, [r7, #0]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	68ba      	ldr	r2, [r7, #8]
 800a1fa:	9202      	str	r2, [sp, #8]
 800a1fc:	9301      	str	r3, [sp, #4]
 800a1fe:	2300      	movs	r3, #0
 800a200:	9300      	str	r3, [sp, #0]
 800a202:	2300      	movs	r3, #0
 800a204:	460a      	mov	r2, r1
 800a206:	4922      	ldr	r1, [pc, #136]	@ (800a290 <vTaskStartScheduler+0xb8>)
 800a208:	4822      	ldr	r0, [pc, #136]	@ (800a294 <vTaskStartScheduler+0xbc>)
 800a20a:	f7ff fe09 	bl	8009e20 <xTaskCreateStatic>
 800a20e:	4603      	mov	r3, r0
 800a210:	4a21      	ldr	r2, [pc, #132]	@ (800a298 <vTaskStartScheduler+0xc0>)
 800a212:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a214:	4b20      	ldr	r3, [pc, #128]	@ (800a298 <vTaskStartScheduler+0xc0>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d002      	beq.n	800a222 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a21c:	2301      	movs	r3, #1
 800a21e:	617b      	str	r3, [r7, #20]
 800a220:	e001      	b.n	800a226 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a222:	2300      	movs	r3, #0
 800a224:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d102      	bne.n	800a232 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a22c:	f000 fdbe 	bl	800adac <xTimerCreateTimerTask>
 800a230:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d116      	bne.n	800a266 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23c:	f383 8811 	msr	BASEPRI, r3
 800a240:	f3bf 8f6f 	isb	sy
 800a244:	f3bf 8f4f 	dsb	sy
 800a248:	613b      	str	r3, [r7, #16]
}
 800a24a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a24c:	4b13      	ldr	r3, [pc, #76]	@ (800a29c <vTaskStartScheduler+0xc4>)
 800a24e:	f04f 32ff 	mov.w	r2, #4294967295
 800a252:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a254:	4b12      	ldr	r3, [pc, #72]	@ (800a2a0 <vTaskStartScheduler+0xc8>)
 800a256:	2201      	movs	r2, #1
 800a258:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a25a:	4b12      	ldr	r3, [pc, #72]	@ (800a2a4 <vTaskStartScheduler+0xcc>)
 800a25c:	2200      	movs	r2, #0
 800a25e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a260:	f7fe ff1e 	bl	80090a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a264:	e00f      	b.n	800a286 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a26c:	d10b      	bne.n	800a286 <vTaskStartScheduler+0xae>
	__asm volatile
 800a26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a272:	f383 8811 	msr	BASEPRI, r3
 800a276:	f3bf 8f6f 	isb	sy
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	60fb      	str	r3, [r7, #12]
}
 800a280:	bf00      	nop
 800a282:	bf00      	nop
 800a284:	e7fd      	b.n	800a282 <vTaskStartScheduler+0xaa>
}
 800a286:	bf00      	nop
 800a288:	3718      	adds	r7, #24
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	0800c44c 	.word	0x0800c44c
 800a294:	0800a8c9 	.word	0x0800a8c9
 800a298:	24004b68 	.word	0x24004b68
 800a29c:	24004b64 	.word	0x24004b64
 800a2a0:	24004b50 	.word	0x24004b50
 800a2a4:	24004b48 	.word	0x24004b48

0800a2a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a2ac:	4b04      	ldr	r3, [pc, #16]	@ (800a2c0 <vTaskSuspendAll+0x18>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	4a03      	ldr	r2, [pc, #12]	@ (800a2c0 <vTaskSuspendAll+0x18>)
 800a2b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a2b6:	bf00      	nop
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr
 800a2c0:	24004b6c 	.word	0x24004b6c

0800a2c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a2d2:	4b42      	ldr	r3, [pc, #264]	@ (800a3dc <xTaskResumeAll+0x118>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10b      	bne.n	800a2f2 <xTaskResumeAll+0x2e>
	__asm volatile
 800a2da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2de:	f383 8811 	msr	BASEPRI, r3
 800a2e2:	f3bf 8f6f 	isb	sy
 800a2e6:	f3bf 8f4f 	dsb	sy
 800a2ea:	603b      	str	r3, [r7, #0]
}
 800a2ec:	bf00      	nop
 800a2ee:	bf00      	nop
 800a2f0:	e7fd      	b.n	800a2ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a2f2:	f7fe ff79 	bl	80091e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a2f6:	4b39      	ldr	r3, [pc, #228]	@ (800a3dc <xTaskResumeAll+0x118>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	4a37      	ldr	r2, [pc, #220]	@ (800a3dc <xTaskResumeAll+0x118>)
 800a2fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a300:	4b36      	ldr	r3, [pc, #216]	@ (800a3dc <xTaskResumeAll+0x118>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d162      	bne.n	800a3ce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a308:	4b35      	ldr	r3, [pc, #212]	@ (800a3e0 <xTaskResumeAll+0x11c>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d05e      	beq.n	800a3ce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a310:	e02f      	b.n	800a372 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a312:	4b34      	ldr	r3, [pc, #208]	@ (800a3e4 <xTaskResumeAll+0x120>)
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	3318      	adds	r3, #24
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fe fe06 	bl	8008f30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	3304      	adds	r3, #4
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fe fe01 	bl	8008f30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a332:	4b2d      	ldr	r3, [pc, #180]	@ (800a3e8 <xTaskResumeAll+0x124>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	429a      	cmp	r2, r3
 800a338:	d903      	bls.n	800a342 <xTaskResumeAll+0x7e>
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a33e:	4a2a      	ldr	r2, [pc, #168]	@ (800a3e8 <xTaskResumeAll+0x124>)
 800a340:	6013      	str	r3, [r2, #0]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a346:	4613      	mov	r3, r2
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	4413      	add	r3, r2
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	4a27      	ldr	r2, [pc, #156]	@ (800a3ec <xTaskResumeAll+0x128>)
 800a350:	441a      	add	r2, r3
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	3304      	adds	r3, #4
 800a356:	4619      	mov	r1, r3
 800a358:	4610      	mov	r0, r2
 800a35a:	f7fe fd8c 	bl	8008e76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a362:	4b23      	ldr	r3, [pc, #140]	@ (800a3f0 <xTaskResumeAll+0x12c>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a368:	429a      	cmp	r2, r3
 800a36a:	d302      	bcc.n	800a372 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a36c:	4b21      	ldr	r3, [pc, #132]	@ (800a3f4 <xTaskResumeAll+0x130>)
 800a36e:	2201      	movs	r2, #1
 800a370:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a372:	4b1c      	ldr	r3, [pc, #112]	@ (800a3e4 <xTaskResumeAll+0x120>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d1cb      	bne.n	800a312 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d001      	beq.n	800a384 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a380:	f000 fb58 	bl	800aa34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a384:	4b1c      	ldr	r3, [pc, #112]	@ (800a3f8 <xTaskResumeAll+0x134>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d010      	beq.n	800a3b2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a390:	f000 f846 	bl	800a420 <xTaskIncrementTick>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d002      	beq.n	800a3a0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a39a:	4b16      	ldr	r3, [pc, #88]	@ (800a3f4 <xTaskResumeAll+0x130>)
 800a39c:	2201      	movs	r2, #1
 800a39e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1f1      	bne.n	800a390 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a3ac:	4b12      	ldr	r3, [pc, #72]	@ (800a3f8 <xTaskResumeAll+0x134>)
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a3b2:	4b10      	ldr	r3, [pc, #64]	@ (800a3f4 <xTaskResumeAll+0x130>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d009      	beq.n	800a3ce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a3be:	4b0f      	ldr	r3, [pc, #60]	@ (800a3fc <xTaskResumeAll+0x138>)
 800a3c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3c4:	601a      	str	r2, [r3, #0]
 800a3c6:	f3bf 8f4f 	dsb	sy
 800a3ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3ce:	f7fe ff3d 	bl	800924c <vPortExitCritical>

	return xAlreadyYielded;
 800a3d2:	68bb      	ldr	r3, [r7, #8]
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3710      	adds	r7, #16
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	24004b6c 	.word	0x24004b6c
 800a3e0:	24004b44 	.word	0x24004b44
 800a3e4:	24004b04 	.word	0x24004b04
 800a3e8:	24004b4c 	.word	0x24004b4c
 800a3ec:	24004674 	.word	0x24004674
 800a3f0:	24004670 	.word	0x24004670
 800a3f4:	24004b58 	.word	0x24004b58
 800a3f8:	24004b54 	.word	0x24004b54
 800a3fc:	e000ed04 	.word	0xe000ed04

0800a400 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a406:	4b05      	ldr	r3, [pc, #20]	@ (800a41c <xTaskGetTickCount+0x1c>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a40c:	687b      	ldr	r3, [r7, #4]
}
 800a40e:	4618      	mov	r0, r3
 800a410:	370c      	adds	r7, #12
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	24004b48 	.word	0x24004b48

0800a420 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a426:	2300      	movs	r3, #0
 800a428:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a42a:	4b4f      	ldr	r3, [pc, #316]	@ (800a568 <xTaskIncrementTick+0x148>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f040 8090 	bne.w	800a554 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a434:	4b4d      	ldr	r3, [pc, #308]	@ (800a56c <xTaskIncrementTick+0x14c>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	3301      	adds	r3, #1
 800a43a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a43c:	4a4b      	ldr	r2, [pc, #300]	@ (800a56c <xTaskIncrementTick+0x14c>)
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d121      	bne.n	800a48c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a448:	4b49      	ldr	r3, [pc, #292]	@ (800a570 <xTaskIncrementTick+0x150>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00b      	beq.n	800a46a <xTaskIncrementTick+0x4a>
	__asm volatile
 800a452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a456:	f383 8811 	msr	BASEPRI, r3
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	603b      	str	r3, [r7, #0]
}
 800a464:	bf00      	nop
 800a466:	bf00      	nop
 800a468:	e7fd      	b.n	800a466 <xTaskIncrementTick+0x46>
 800a46a:	4b41      	ldr	r3, [pc, #260]	@ (800a570 <xTaskIncrementTick+0x150>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	60fb      	str	r3, [r7, #12]
 800a470:	4b40      	ldr	r3, [pc, #256]	@ (800a574 <xTaskIncrementTick+0x154>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a3e      	ldr	r2, [pc, #248]	@ (800a570 <xTaskIncrementTick+0x150>)
 800a476:	6013      	str	r3, [r2, #0]
 800a478:	4a3e      	ldr	r2, [pc, #248]	@ (800a574 <xTaskIncrementTick+0x154>)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6013      	str	r3, [r2, #0]
 800a47e:	4b3e      	ldr	r3, [pc, #248]	@ (800a578 <xTaskIncrementTick+0x158>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	3301      	adds	r3, #1
 800a484:	4a3c      	ldr	r2, [pc, #240]	@ (800a578 <xTaskIncrementTick+0x158>)
 800a486:	6013      	str	r3, [r2, #0]
 800a488:	f000 fad4 	bl	800aa34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a48c:	4b3b      	ldr	r3, [pc, #236]	@ (800a57c <xTaskIncrementTick+0x15c>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	693a      	ldr	r2, [r7, #16]
 800a492:	429a      	cmp	r2, r3
 800a494:	d349      	bcc.n	800a52a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a496:	4b36      	ldr	r3, [pc, #216]	@ (800a570 <xTaskIncrementTick+0x150>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d104      	bne.n	800a4aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4a0:	4b36      	ldr	r3, [pc, #216]	@ (800a57c <xTaskIncrementTick+0x15c>)
 800a4a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a6:	601a      	str	r2, [r3, #0]
					break;
 800a4a8:	e03f      	b.n	800a52a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4aa:	4b31      	ldr	r3, [pc, #196]	@ (800a570 <xTaskIncrementTick+0x150>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a4ba:	693a      	ldr	r2, [r7, #16]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d203      	bcs.n	800a4ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a4c2:	4a2e      	ldr	r2, [pc, #184]	@ (800a57c <xTaskIncrementTick+0x15c>)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a4c8:	e02f      	b.n	800a52a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	3304      	adds	r3, #4
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7fe fd2e 	bl	8008f30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d004      	beq.n	800a4e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	3318      	adds	r3, #24
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7fe fd25 	bl	8008f30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4ea:	4b25      	ldr	r3, [pc, #148]	@ (800a580 <xTaskIncrementTick+0x160>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d903      	bls.n	800a4fa <xTaskIncrementTick+0xda>
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f6:	4a22      	ldr	r2, [pc, #136]	@ (800a580 <xTaskIncrementTick+0x160>)
 800a4f8:	6013      	str	r3, [r2, #0]
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4fe:	4613      	mov	r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	4413      	add	r3, r2
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	4a1f      	ldr	r2, [pc, #124]	@ (800a584 <xTaskIncrementTick+0x164>)
 800a508:	441a      	add	r2, r3
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	3304      	adds	r3, #4
 800a50e:	4619      	mov	r1, r3
 800a510:	4610      	mov	r0, r2
 800a512:	f7fe fcb0 	bl	8008e76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a51a:	4b1b      	ldr	r3, [pc, #108]	@ (800a588 <xTaskIncrementTick+0x168>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a520:	429a      	cmp	r2, r3
 800a522:	d3b8      	bcc.n	800a496 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a524:	2301      	movs	r3, #1
 800a526:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a528:	e7b5      	b.n	800a496 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a52a:	4b17      	ldr	r3, [pc, #92]	@ (800a588 <xTaskIncrementTick+0x168>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a530:	4914      	ldr	r1, [pc, #80]	@ (800a584 <xTaskIncrementTick+0x164>)
 800a532:	4613      	mov	r3, r2
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	4413      	add	r3, r2
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	440b      	add	r3, r1
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d901      	bls.n	800a546 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a542:	2301      	movs	r3, #1
 800a544:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a546:	4b11      	ldr	r3, [pc, #68]	@ (800a58c <xTaskIncrementTick+0x16c>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d007      	beq.n	800a55e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a54e:	2301      	movs	r3, #1
 800a550:	617b      	str	r3, [r7, #20]
 800a552:	e004      	b.n	800a55e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a554:	4b0e      	ldr	r3, [pc, #56]	@ (800a590 <xTaskIncrementTick+0x170>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	3301      	adds	r3, #1
 800a55a:	4a0d      	ldr	r2, [pc, #52]	@ (800a590 <xTaskIncrementTick+0x170>)
 800a55c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a55e:	697b      	ldr	r3, [r7, #20]
}
 800a560:	4618      	mov	r0, r3
 800a562:	3718      	adds	r7, #24
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	24004b6c 	.word	0x24004b6c
 800a56c:	24004b48 	.word	0x24004b48
 800a570:	24004afc 	.word	0x24004afc
 800a574:	24004b00 	.word	0x24004b00
 800a578:	24004b5c 	.word	0x24004b5c
 800a57c:	24004b64 	.word	0x24004b64
 800a580:	24004b4c 	.word	0x24004b4c
 800a584:	24004674 	.word	0x24004674
 800a588:	24004670 	.word	0x24004670
 800a58c:	24004b58 	.word	0x24004b58
 800a590:	24004b54 	.word	0x24004b54

0800a594 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a59a:	4b28      	ldr	r3, [pc, #160]	@ (800a63c <vTaskSwitchContext+0xa8>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d003      	beq.n	800a5aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5a2:	4b27      	ldr	r3, [pc, #156]	@ (800a640 <vTaskSwitchContext+0xac>)
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a5a8:	e042      	b.n	800a630 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a5aa:	4b25      	ldr	r3, [pc, #148]	@ (800a640 <vTaskSwitchContext+0xac>)
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5b0:	4b24      	ldr	r3, [pc, #144]	@ (800a644 <vTaskSwitchContext+0xb0>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	60fb      	str	r3, [r7, #12]
 800a5b6:	e011      	b.n	800a5dc <vTaskSwitchContext+0x48>
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10b      	bne.n	800a5d6 <vTaskSwitchContext+0x42>
	__asm volatile
 800a5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	607b      	str	r3, [r7, #4]
}
 800a5d0:	bf00      	nop
 800a5d2:	bf00      	nop
 800a5d4:	e7fd      	b.n	800a5d2 <vTaskSwitchContext+0x3e>
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	60fb      	str	r3, [r7, #12]
 800a5dc:	491a      	ldr	r1, [pc, #104]	@ (800a648 <vTaskSwitchContext+0xb4>)
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	4613      	mov	r3, r2
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	4413      	add	r3, r2
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	440b      	add	r3, r1
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d0e3      	beq.n	800a5b8 <vTaskSwitchContext+0x24>
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	4413      	add	r3, r2
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	4a13      	ldr	r2, [pc, #76]	@ (800a648 <vTaskSwitchContext+0xb4>)
 800a5fc:	4413      	add	r3, r2
 800a5fe:	60bb      	str	r3, [r7, #8]
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	685a      	ldr	r2, [r3, #4]
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	605a      	str	r2, [r3, #4]
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	685a      	ldr	r2, [r3, #4]
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	3308      	adds	r3, #8
 800a612:	429a      	cmp	r2, r3
 800a614:	d104      	bne.n	800a620 <vTaskSwitchContext+0x8c>
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	685a      	ldr	r2, [r3, #4]
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	605a      	str	r2, [r3, #4]
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	4a09      	ldr	r2, [pc, #36]	@ (800a64c <vTaskSwitchContext+0xb8>)
 800a628:	6013      	str	r3, [r2, #0]
 800a62a:	4a06      	ldr	r2, [pc, #24]	@ (800a644 <vTaskSwitchContext+0xb0>)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6013      	str	r3, [r2, #0]
}
 800a630:	bf00      	nop
 800a632:	3714      	adds	r7, #20
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr
 800a63c:	24004b6c 	.word	0x24004b6c
 800a640:	24004b58 	.word	0x24004b58
 800a644:	24004b4c 	.word	0x24004b4c
 800a648:	24004674 	.word	0x24004674
 800a64c:	24004670 	.word	0x24004670

0800a650 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d10b      	bne.n	800a678 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a664:	f383 8811 	msr	BASEPRI, r3
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	60fb      	str	r3, [r7, #12]
}
 800a672:	bf00      	nop
 800a674:	bf00      	nop
 800a676:	e7fd      	b.n	800a674 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a678:	4b07      	ldr	r3, [pc, #28]	@ (800a698 <vTaskPlaceOnEventList+0x48>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	3318      	adds	r3, #24
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f7fe fc1c 	bl	8008ebe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a686:	2101      	movs	r1, #1
 800a688:	6838      	ldr	r0, [r7, #0]
 800a68a:	f000 fb3b 	bl	800ad04 <prvAddCurrentTaskToDelayedList>
}
 800a68e:	bf00      	nop
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	24004670 	.word	0x24004670

0800a69c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b086      	sub	sp, #24
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d10b      	bne.n	800a6c6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6b2:	f383 8811 	msr	BASEPRI, r3
 800a6b6:	f3bf 8f6f 	isb	sy
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	617b      	str	r3, [r7, #20]
}
 800a6c0:	bf00      	nop
 800a6c2:	bf00      	nop
 800a6c4:	e7fd      	b.n	800a6c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6c6:	4b0a      	ldr	r3, [pc, #40]	@ (800a6f0 <vTaskPlaceOnEventListRestricted+0x54>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	3318      	adds	r3, #24
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f7fe fbd1 	bl	8008e76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d002      	beq.n	800a6e0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a6da:	f04f 33ff 	mov.w	r3, #4294967295
 800a6de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a6e0:	6879      	ldr	r1, [r7, #4]
 800a6e2:	68b8      	ldr	r0, [r7, #8]
 800a6e4:	f000 fb0e 	bl	800ad04 <prvAddCurrentTaskToDelayedList>
	}
 800a6e8:	bf00      	nop
 800a6ea:	3718      	adds	r7, #24
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	24004670 	.word	0x24004670

0800a6f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d10b      	bne.n	800a722 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70e:	f383 8811 	msr	BASEPRI, r3
 800a712:	f3bf 8f6f 	isb	sy
 800a716:	f3bf 8f4f 	dsb	sy
 800a71a:	60fb      	str	r3, [r7, #12]
}
 800a71c:	bf00      	nop
 800a71e:	bf00      	nop
 800a720:	e7fd      	b.n	800a71e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	3318      	adds	r3, #24
 800a726:	4618      	mov	r0, r3
 800a728:	f7fe fc02 	bl	8008f30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a72c:	4b1d      	ldr	r3, [pc, #116]	@ (800a7a4 <xTaskRemoveFromEventList+0xb0>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d11d      	bne.n	800a770 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	3304      	adds	r3, #4
 800a738:	4618      	mov	r0, r3
 800a73a:	f7fe fbf9 	bl	8008f30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a742:	4b19      	ldr	r3, [pc, #100]	@ (800a7a8 <xTaskRemoveFromEventList+0xb4>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	429a      	cmp	r2, r3
 800a748:	d903      	bls.n	800a752 <xTaskRemoveFromEventList+0x5e>
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a74e:	4a16      	ldr	r2, [pc, #88]	@ (800a7a8 <xTaskRemoveFromEventList+0xb4>)
 800a750:	6013      	str	r3, [r2, #0]
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a756:	4613      	mov	r3, r2
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	4413      	add	r3, r2
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	4a13      	ldr	r2, [pc, #76]	@ (800a7ac <xTaskRemoveFromEventList+0xb8>)
 800a760:	441a      	add	r2, r3
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	3304      	adds	r3, #4
 800a766:	4619      	mov	r1, r3
 800a768:	4610      	mov	r0, r2
 800a76a:	f7fe fb84 	bl	8008e76 <vListInsertEnd>
 800a76e:	e005      	b.n	800a77c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	3318      	adds	r3, #24
 800a774:	4619      	mov	r1, r3
 800a776:	480e      	ldr	r0, [pc, #56]	@ (800a7b0 <xTaskRemoveFromEventList+0xbc>)
 800a778:	f7fe fb7d 	bl	8008e76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a780:	4b0c      	ldr	r3, [pc, #48]	@ (800a7b4 <xTaskRemoveFromEventList+0xc0>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a786:	429a      	cmp	r2, r3
 800a788:	d905      	bls.n	800a796 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a78a:	2301      	movs	r3, #1
 800a78c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a78e:	4b0a      	ldr	r3, [pc, #40]	@ (800a7b8 <xTaskRemoveFromEventList+0xc4>)
 800a790:	2201      	movs	r2, #1
 800a792:	601a      	str	r2, [r3, #0]
 800a794:	e001      	b.n	800a79a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a796:	2300      	movs	r3, #0
 800a798:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a79a:	697b      	ldr	r3, [r7, #20]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3718      	adds	r7, #24
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	24004b6c 	.word	0x24004b6c
 800a7a8:	24004b4c 	.word	0x24004b4c
 800a7ac:	24004674 	.word	0x24004674
 800a7b0:	24004b04 	.word	0x24004b04
 800a7b4:	24004670 	.word	0x24004670
 800a7b8:	24004b58 	.word	0x24004b58

0800a7bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a7c4:	4b06      	ldr	r3, [pc, #24]	@ (800a7e0 <vTaskInternalSetTimeOutState+0x24>)
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a7cc:	4b05      	ldr	r3, [pc, #20]	@ (800a7e4 <vTaskInternalSetTimeOutState+0x28>)
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	605a      	str	r2, [r3, #4]
}
 800a7d4:	bf00      	nop
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr
 800a7e0:	24004b5c 	.word	0x24004b5c
 800a7e4:	24004b48 	.word	0x24004b48

0800a7e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b088      	sub	sp, #32
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d10b      	bne.n	800a810 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	613b      	str	r3, [r7, #16]
}
 800a80a:	bf00      	nop
 800a80c:	bf00      	nop
 800a80e:	e7fd      	b.n	800a80c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d10b      	bne.n	800a82e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a81a:	f383 8811 	msr	BASEPRI, r3
 800a81e:	f3bf 8f6f 	isb	sy
 800a822:	f3bf 8f4f 	dsb	sy
 800a826:	60fb      	str	r3, [r7, #12]
}
 800a828:	bf00      	nop
 800a82a:	bf00      	nop
 800a82c:	e7fd      	b.n	800a82a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a82e:	f7fe fcdb 	bl	80091e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a832:	4b1d      	ldr	r3, [pc, #116]	@ (800a8a8 <xTaskCheckForTimeOut+0xc0>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	69ba      	ldr	r2, [r7, #24]
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84a:	d102      	bne.n	800a852 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a84c:	2300      	movs	r3, #0
 800a84e:	61fb      	str	r3, [r7, #28]
 800a850:	e023      	b.n	800a89a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	4b15      	ldr	r3, [pc, #84]	@ (800a8ac <xTaskCheckForTimeOut+0xc4>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d007      	beq.n	800a86e <xTaskCheckForTimeOut+0x86>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	69ba      	ldr	r2, [r7, #24]
 800a864:	429a      	cmp	r2, r3
 800a866:	d302      	bcc.n	800a86e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a868:	2301      	movs	r3, #1
 800a86a:	61fb      	str	r3, [r7, #28]
 800a86c:	e015      	b.n	800a89a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	697a      	ldr	r2, [r7, #20]
 800a874:	429a      	cmp	r2, r3
 800a876:	d20b      	bcs.n	800a890 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	1ad2      	subs	r2, r2, r3
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f7ff ff99 	bl	800a7bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a88a:	2300      	movs	r3, #0
 800a88c:	61fb      	str	r3, [r7, #28]
 800a88e:	e004      	b.n	800a89a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	2200      	movs	r2, #0
 800a894:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a896:	2301      	movs	r3, #1
 800a898:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a89a:	f7fe fcd7 	bl	800924c <vPortExitCritical>

	return xReturn;
 800a89e:	69fb      	ldr	r3, [r7, #28]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3720      	adds	r7, #32
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	24004b48 	.word	0x24004b48
 800a8ac:	24004b5c 	.word	0x24004b5c

0800a8b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a8b4:	4b03      	ldr	r3, [pc, #12]	@ (800a8c4 <vTaskMissedYield+0x14>)
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	601a      	str	r2, [r3, #0]
}
 800a8ba:	bf00      	nop
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr
 800a8c4:	24004b58 	.word	0x24004b58

0800a8c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a8d0:	f000 f852 	bl	800a978 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a8d4:	4b06      	ldr	r3, [pc, #24]	@ (800a8f0 <prvIdleTask+0x28>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d9f9      	bls.n	800a8d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a8dc:	4b05      	ldr	r3, [pc, #20]	@ (800a8f4 <prvIdleTask+0x2c>)
 800a8de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8e2:	601a      	str	r2, [r3, #0]
 800a8e4:	f3bf 8f4f 	dsb	sy
 800a8e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a8ec:	e7f0      	b.n	800a8d0 <prvIdleTask+0x8>
 800a8ee:	bf00      	nop
 800a8f0:	24004674 	.word	0x24004674
 800a8f4:	e000ed04 	.word	0xe000ed04

0800a8f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8fe:	2300      	movs	r3, #0
 800a900:	607b      	str	r3, [r7, #4]
 800a902:	e00c      	b.n	800a91e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	4613      	mov	r3, r2
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	4413      	add	r3, r2
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	4a12      	ldr	r2, [pc, #72]	@ (800a958 <prvInitialiseTaskLists+0x60>)
 800a910:	4413      	add	r3, r2
 800a912:	4618      	mov	r0, r3
 800a914:	f7fe fa82 	bl	8008e1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	3301      	adds	r3, #1
 800a91c:	607b      	str	r3, [r7, #4]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2b37      	cmp	r3, #55	@ 0x37
 800a922:	d9ef      	bls.n	800a904 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a924:	480d      	ldr	r0, [pc, #52]	@ (800a95c <prvInitialiseTaskLists+0x64>)
 800a926:	f7fe fa79 	bl	8008e1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a92a:	480d      	ldr	r0, [pc, #52]	@ (800a960 <prvInitialiseTaskLists+0x68>)
 800a92c:	f7fe fa76 	bl	8008e1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a930:	480c      	ldr	r0, [pc, #48]	@ (800a964 <prvInitialiseTaskLists+0x6c>)
 800a932:	f7fe fa73 	bl	8008e1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a936:	480c      	ldr	r0, [pc, #48]	@ (800a968 <prvInitialiseTaskLists+0x70>)
 800a938:	f7fe fa70 	bl	8008e1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a93c:	480b      	ldr	r0, [pc, #44]	@ (800a96c <prvInitialiseTaskLists+0x74>)
 800a93e:	f7fe fa6d 	bl	8008e1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a942:	4b0b      	ldr	r3, [pc, #44]	@ (800a970 <prvInitialiseTaskLists+0x78>)
 800a944:	4a05      	ldr	r2, [pc, #20]	@ (800a95c <prvInitialiseTaskLists+0x64>)
 800a946:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a948:	4b0a      	ldr	r3, [pc, #40]	@ (800a974 <prvInitialiseTaskLists+0x7c>)
 800a94a:	4a05      	ldr	r2, [pc, #20]	@ (800a960 <prvInitialiseTaskLists+0x68>)
 800a94c:	601a      	str	r2, [r3, #0]
}
 800a94e:	bf00      	nop
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	24004674 	.word	0x24004674
 800a95c:	24004ad4 	.word	0x24004ad4
 800a960:	24004ae8 	.word	0x24004ae8
 800a964:	24004b04 	.word	0x24004b04
 800a968:	24004b18 	.word	0x24004b18
 800a96c:	24004b30 	.word	0x24004b30
 800a970:	24004afc 	.word	0x24004afc
 800a974:	24004b00 	.word	0x24004b00

0800a978 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a97e:	e019      	b.n	800a9b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a980:	f7fe fc32 	bl	80091e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a984:	4b10      	ldr	r3, [pc, #64]	@ (800a9c8 <prvCheckTasksWaitingTermination+0x50>)
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	3304      	adds	r3, #4
 800a990:	4618      	mov	r0, r3
 800a992:	f7fe facd 	bl	8008f30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a996:	4b0d      	ldr	r3, [pc, #52]	@ (800a9cc <prvCheckTasksWaitingTermination+0x54>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	3b01      	subs	r3, #1
 800a99c:	4a0b      	ldr	r2, [pc, #44]	@ (800a9cc <prvCheckTasksWaitingTermination+0x54>)
 800a99e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a9a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a9d0 <prvCheckTasksWaitingTermination+0x58>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	3b01      	subs	r3, #1
 800a9a6:	4a0a      	ldr	r2, [pc, #40]	@ (800a9d0 <prvCheckTasksWaitingTermination+0x58>)
 800a9a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a9aa:	f7fe fc4f 	bl	800924c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f810 	bl	800a9d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9b4:	4b06      	ldr	r3, [pc, #24]	@ (800a9d0 <prvCheckTasksWaitingTermination+0x58>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1e1      	bne.n	800a980 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a9bc:	bf00      	nop
 800a9be:	bf00      	nop
 800a9c0:	3708      	adds	r7, #8
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	24004b18 	.word	0x24004b18
 800a9cc:	24004b44 	.word	0x24004b44
 800a9d0:	24004b2c 	.word	0x24004b2c

0800a9d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d108      	bne.n	800a9f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fe f8f6 	bl	8008bdc <vPortFree>
				vPortFree( pxTCB );
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f7fe f8f3 	bl	8008bdc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a9f6:	e019      	b.n	800aa2c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d103      	bne.n	800aa0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f7fe f8ea 	bl	8008bdc <vPortFree>
	}
 800aa08:	e010      	b.n	800aa2c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	d00b      	beq.n	800aa2c <prvDeleteTCB+0x58>
	__asm volatile
 800aa14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa18:	f383 8811 	msr	BASEPRI, r3
 800aa1c:	f3bf 8f6f 	isb	sy
 800aa20:	f3bf 8f4f 	dsb	sy
 800aa24:	60fb      	str	r3, [r7, #12]
}
 800aa26:	bf00      	nop
 800aa28:	bf00      	nop
 800aa2a:	e7fd      	b.n	800aa28 <prvDeleteTCB+0x54>
	}
 800aa2c:	bf00      	nop
 800aa2e:	3710      	adds	r7, #16
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa3a:	4b0c      	ldr	r3, [pc, #48]	@ (800aa6c <prvResetNextTaskUnblockTime+0x38>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d104      	bne.n	800aa4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa44:	4b0a      	ldr	r3, [pc, #40]	@ (800aa70 <prvResetNextTaskUnblockTime+0x3c>)
 800aa46:	f04f 32ff 	mov.w	r2, #4294967295
 800aa4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa4c:	e008      	b.n	800aa60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa4e:	4b07      	ldr	r3, [pc, #28]	@ (800aa6c <prvResetNextTaskUnblockTime+0x38>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	4a04      	ldr	r2, [pc, #16]	@ (800aa70 <prvResetNextTaskUnblockTime+0x3c>)
 800aa5e:	6013      	str	r3, [r2, #0]
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr
 800aa6c:	24004afc 	.word	0x24004afc
 800aa70:	24004b64 	.word	0x24004b64

0800aa74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa7a:	4b0b      	ldr	r3, [pc, #44]	@ (800aaa8 <xTaskGetSchedulerState+0x34>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d102      	bne.n	800aa88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa82:	2301      	movs	r3, #1
 800aa84:	607b      	str	r3, [r7, #4]
 800aa86:	e008      	b.n	800aa9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa88:	4b08      	ldr	r3, [pc, #32]	@ (800aaac <xTaskGetSchedulerState+0x38>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d102      	bne.n	800aa96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aa90:	2302      	movs	r3, #2
 800aa92:	607b      	str	r3, [r7, #4]
 800aa94:	e001      	b.n	800aa9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aa96:	2300      	movs	r3, #0
 800aa98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aa9a:	687b      	ldr	r3, [r7, #4]
	}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	24004b50 	.word	0x24004b50
 800aaac:	24004b6c 	.word	0x24004b6c

0800aab0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b086      	sub	sp, #24
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aabc:	2300      	movs	r3, #0
 800aabe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d058      	beq.n	800ab78 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aac6:	4b2f      	ldr	r3, [pc, #188]	@ (800ab84 <xTaskPriorityDisinherit+0xd4>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	693a      	ldr	r2, [r7, #16]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d00b      	beq.n	800aae8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800aad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	60fb      	str	r3, [r7, #12]
}
 800aae2:	bf00      	nop
 800aae4:	bf00      	nop
 800aae6:	e7fd      	b.n	800aae4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d10b      	bne.n	800ab08 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	60bb      	str	r3, [r7, #8]
}
 800ab02:	bf00      	nop
 800ab04:	bf00      	nop
 800ab06:	e7fd      	b.n	800ab04 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab0c:	1e5a      	subs	r2, r3, #1
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d02c      	beq.n	800ab78 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d128      	bne.n	800ab78 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	3304      	adds	r3, #4
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7fe fa00 	bl	8008f30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab48:	4b0f      	ldr	r3, [pc, #60]	@ (800ab88 <xTaskPriorityDisinherit+0xd8>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d903      	bls.n	800ab58 <xTaskPriorityDisinherit+0xa8>
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab54:	4a0c      	ldr	r2, [pc, #48]	@ (800ab88 <xTaskPriorityDisinherit+0xd8>)
 800ab56:	6013      	str	r3, [r2, #0]
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	4413      	add	r3, r2
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	4a09      	ldr	r2, [pc, #36]	@ (800ab8c <xTaskPriorityDisinherit+0xdc>)
 800ab66:	441a      	add	r2, r3
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	3304      	adds	r3, #4
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	4610      	mov	r0, r2
 800ab70:	f7fe f981 	bl	8008e76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab74:	2301      	movs	r3, #1
 800ab76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab78:	697b      	ldr	r3, [r7, #20]
	}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3718      	adds	r7, #24
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	24004670 	.word	0x24004670
 800ab88:	24004b4c 	.word	0x24004b4c
 800ab8c:	24004674 	.word	0x24004674

0800ab90 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b08a      	sub	sp, #40	@ 0x28
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	603b      	str	r3, [r7, #0]
 800ab9c:	4613      	mov	r3, r2
 800ab9e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800aba0:	2301      	movs	r3, #1
 800aba2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d10b      	bne.n	800abc2 <xTaskGenericNotify+0x32>
	__asm volatile
 800abaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abae:	f383 8811 	msr	BASEPRI, r3
 800abb2:	f3bf 8f6f 	isb	sy
 800abb6:	f3bf 8f4f 	dsb	sy
 800abba:	61bb      	str	r3, [r7, #24]
}
 800abbc:	bf00      	nop
 800abbe:	bf00      	nop
 800abc0:	e7fd      	b.n	800abbe <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800abc6:	f7fe fb0f 	bl	80091e8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d003      	beq.n	800abd8 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800abd0:	6a3b      	ldr	r3, [r7, #32]
 800abd2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800abd8:	6a3b      	ldr	r3, [r7, #32]
 800abda:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800abde:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800abe0:	6a3b      	ldr	r3, [r7, #32]
 800abe2:	2202      	movs	r2, #2
 800abe4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 800abe8:	79fb      	ldrb	r3, [r7, #7]
 800abea:	2b04      	cmp	r3, #4
 800abec:	d827      	bhi.n	800ac3e <xTaskGenericNotify+0xae>
 800abee:	a201      	add	r2, pc, #4	@ (adr r2, 800abf4 <xTaskGenericNotify+0x64>)
 800abf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf4:	0800ac61 	.word	0x0800ac61
 800abf8:	0800ac09 	.word	0x0800ac09
 800abfc:	0800ac17 	.word	0x0800ac17
 800ac00:	0800ac23 	.word	0x0800ac23
 800ac04:	0800ac2b 	.word	0x0800ac2b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ac08:	6a3b      	ldr	r3, [r7, #32]
 800ac0a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	431a      	orrs	r2, r3
 800ac10:	6a3b      	ldr	r3, [r7, #32]
 800ac12:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800ac14:	e027      	b.n	800ac66 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ac16:	6a3b      	ldr	r3, [r7, #32]
 800ac18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac1a:	1c5a      	adds	r2, r3, #1
 800ac1c:	6a3b      	ldr	r3, [r7, #32]
 800ac1e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800ac20:	e021      	b.n	800ac66 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ac22:	6a3b      	ldr	r3, [r7, #32]
 800ac24:	68ba      	ldr	r2, [r7, #8]
 800ac26:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800ac28:	e01d      	b.n	800ac66 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ac2a:	7ffb      	ldrb	r3, [r7, #31]
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	d003      	beq.n	800ac38 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ac30:	6a3b      	ldr	r3, [r7, #32]
 800ac32:	68ba      	ldr	r2, [r7, #8]
 800ac34:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ac36:	e016      	b.n	800ac66 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800ac3c:	e013      	b.n	800ac66 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ac3e:	6a3b      	ldr	r3, [r7, #32]
 800ac40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac46:	d00d      	beq.n	800ac64 <xTaskGenericNotify+0xd4>
	__asm volatile
 800ac48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac4c:	f383 8811 	msr	BASEPRI, r3
 800ac50:	f3bf 8f6f 	isb	sy
 800ac54:	f3bf 8f4f 	dsb	sy
 800ac58:	617b      	str	r3, [r7, #20]
}
 800ac5a:	bf00      	nop
 800ac5c:	bf00      	nop
 800ac5e:	e7fd      	b.n	800ac5c <xTaskGenericNotify+0xcc>
					break;
 800ac60:	bf00      	nop
 800ac62:	e000      	b.n	800ac66 <xTaskGenericNotify+0xd6>

					break;
 800ac64:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ac66:	7ffb      	ldrb	r3, [r7, #31]
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d13b      	bne.n	800ace4 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac6c:	6a3b      	ldr	r3, [r7, #32]
 800ac6e:	3304      	adds	r3, #4
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7fe f95d 	bl	8008f30 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ac76:	6a3b      	ldr	r3, [r7, #32]
 800ac78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac7a:	4b1e      	ldr	r3, [pc, #120]	@ (800acf4 <xTaskGenericNotify+0x164>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d903      	bls.n	800ac8a <xTaskGenericNotify+0xfa>
 800ac82:	6a3b      	ldr	r3, [r7, #32]
 800ac84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac86:	4a1b      	ldr	r2, [pc, #108]	@ (800acf4 <xTaskGenericNotify+0x164>)
 800ac88:	6013      	str	r3, [r2, #0]
 800ac8a:	6a3b      	ldr	r3, [r7, #32]
 800ac8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac8e:	4613      	mov	r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	4413      	add	r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4a18      	ldr	r2, [pc, #96]	@ (800acf8 <xTaskGenericNotify+0x168>)
 800ac98:	441a      	add	r2, r3
 800ac9a:	6a3b      	ldr	r3, [r7, #32]
 800ac9c:	3304      	adds	r3, #4
 800ac9e:	4619      	mov	r1, r3
 800aca0:	4610      	mov	r0, r2
 800aca2:	f7fe f8e8 	bl	8008e76 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800aca6:	6a3b      	ldr	r3, [r7, #32]
 800aca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00b      	beq.n	800acc6 <xTaskGenericNotify+0x136>
	__asm volatile
 800acae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	613b      	str	r3, [r7, #16]
}
 800acc0:	bf00      	nop
 800acc2:	bf00      	nop
 800acc4:	e7fd      	b.n	800acc2 <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800acc6:	6a3b      	ldr	r3, [r7, #32]
 800acc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acca:	4b0c      	ldr	r3, [pc, #48]	@ (800acfc <xTaskGenericNotify+0x16c>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d907      	bls.n	800ace4 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800acd4:	4b0a      	ldr	r3, [pc, #40]	@ (800ad00 <xTaskGenericNotify+0x170>)
 800acd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acda:	601a      	str	r2, [r3, #0]
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ace4:	f7fe fab2 	bl	800924c <vPortExitCritical>

		return xReturn;
 800ace8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800acea:	4618      	mov	r0, r3
 800acec:	3728      	adds	r7, #40	@ 0x28
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	24004b4c 	.word	0x24004b4c
 800acf8:	24004674 	.word	0x24004674
 800acfc:	24004670 	.word	0x24004670
 800ad00:	e000ed04 	.word	0xe000ed04

0800ad04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad0e:	4b21      	ldr	r3, [pc, #132]	@ (800ad94 <prvAddCurrentTaskToDelayedList+0x90>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad14:	4b20      	ldr	r3, [pc, #128]	@ (800ad98 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	3304      	adds	r3, #4
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7fe f908 	bl	8008f30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad26:	d10a      	bne.n	800ad3e <prvAddCurrentTaskToDelayedList+0x3a>
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d007      	beq.n	800ad3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad2e:	4b1a      	ldr	r3, [pc, #104]	@ (800ad98 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	3304      	adds	r3, #4
 800ad34:	4619      	mov	r1, r3
 800ad36:	4819      	ldr	r0, [pc, #100]	@ (800ad9c <prvAddCurrentTaskToDelayedList+0x98>)
 800ad38:	f7fe f89d 	bl	8008e76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad3c:	e026      	b.n	800ad8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad3e:	68fa      	ldr	r2, [r7, #12]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4413      	add	r3, r2
 800ad44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad46:	4b14      	ldr	r3, [pc, #80]	@ (800ad98 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	68ba      	ldr	r2, [r7, #8]
 800ad4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad4e:	68ba      	ldr	r2, [r7, #8]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d209      	bcs.n	800ad6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad56:	4b12      	ldr	r3, [pc, #72]	@ (800ada0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	4b0f      	ldr	r3, [pc, #60]	@ (800ad98 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	3304      	adds	r3, #4
 800ad60:	4619      	mov	r1, r3
 800ad62:	4610      	mov	r0, r2
 800ad64:	f7fe f8ab 	bl	8008ebe <vListInsert>
}
 800ad68:	e010      	b.n	800ad8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad6a:	4b0e      	ldr	r3, [pc, #56]	@ (800ada4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	4b0a      	ldr	r3, [pc, #40]	@ (800ad98 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	3304      	adds	r3, #4
 800ad74:	4619      	mov	r1, r3
 800ad76:	4610      	mov	r0, r2
 800ad78:	f7fe f8a1 	bl	8008ebe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ad7c:	4b0a      	ldr	r3, [pc, #40]	@ (800ada8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d202      	bcs.n	800ad8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ad86:	4a08      	ldr	r2, [pc, #32]	@ (800ada8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	6013      	str	r3, [r2, #0]
}
 800ad8c:	bf00      	nop
 800ad8e:	3710      	adds	r7, #16
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	24004b48 	.word	0x24004b48
 800ad98:	24004670 	.word	0x24004670
 800ad9c:	24004b30 	.word	0x24004b30
 800ada0:	24004b00 	.word	0x24004b00
 800ada4:	24004afc 	.word	0x24004afc
 800ada8:	24004b64 	.word	0x24004b64

0800adac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b08a      	sub	sp, #40	@ 0x28
 800adb0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800adb2:	2300      	movs	r3, #0
 800adb4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800adb6:	f000 fb13 	bl	800b3e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800adba:	4b1d      	ldr	r3, [pc, #116]	@ (800ae30 <xTimerCreateTimerTask+0x84>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d021      	beq.n	800ae06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800adc2:	2300      	movs	r3, #0
 800adc4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800adc6:	2300      	movs	r3, #0
 800adc8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800adca:	1d3a      	adds	r2, r7, #4
 800adcc:	f107 0108 	add.w	r1, r7, #8
 800add0:	f107 030c 	add.w	r3, r7, #12
 800add4:	4618      	mov	r0, r3
 800add6:	f7fd fe19 	bl	8008a0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800adda:	6879      	ldr	r1, [r7, #4]
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	9202      	str	r2, [sp, #8]
 800ade2:	9301      	str	r3, [sp, #4]
 800ade4:	2302      	movs	r3, #2
 800ade6:	9300      	str	r3, [sp, #0]
 800ade8:	2300      	movs	r3, #0
 800adea:	460a      	mov	r2, r1
 800adec:	4911      	ldr	r1, [pc, #68]	@ (800ae34 <xTimerCreateTimerTask+0x88>)
 800adee:	4812      	ldr	r0, [pc, #72]	@ (800ae38 <xTimerCreateTimerTask+0x8c>)
 800adf0:	f7ff f816 	bl	8009e20 <xTaskCreateStatic>
 800adf4:	4603      	mov	r3, r0
 800adf6:	4a11      	ldr	r2, [pc, #68]	@ (800ae3c <xTimerCreateTimerTask+0x90>)
 800adf8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800adfa:	4b10      	ldr	r3, [pc, #64]	@ (800ae3c <xTimerCreateTimerTask+0x90>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d001      	beq.n	800ae06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ae02:	2301      	movs	r3, #1
 800ae04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10b      	bne.n	800ae24 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ae0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae10:	f383 8811 	msr	BASEPRI, r3
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	613b      	str	r3, [r7, #16]
}
 800ae1e:	bf00      	nop
 800ae20:	bf00      	nop
 800ae22:	e7fd      	b.n	800ae20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ae24:	697b      	ldr	r3, [r7, #20]
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3718      	adds	r7, #24
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	24004ba0 	.word	0x24004ba0
 800ae34:	0800c454 	.word	0x0800c454
 800ae38:	0800af79 	.word	0x0800af79
 800ae3c:	24004ba4 	.word	0x24004ba4

0800ae40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b08a      	sub	sp, #40	@ 0x28
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	607a      	str	r2, [r7, #4]
 800ae4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d10b      	bne.n	800ae70 <xTimerGenericCommand+0x30>
	__asm volatile
 800ae58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae5c:	f383 8811 	msr	BASEPRI, r3
 800ae60:	f3bf 8f6f 	isb	sy
 800ae64:	f3bf 8f4f 	dsb	sy
 800ae68:	623b      	str	r3, [r7, #32]
}
 800ae6a:	bf00      	nop
 800ae6c:	bf00      	nop
 800ae6e:	e7fd      	b.n	800ae6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ae70:	4b19      	ldr	r3, [pc, #100]	@ (800aed8 <xTimerGenericCommand+0x98>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d02a      	beq.n	800aece <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	2b05      	cmp	r3, #5
 800ae88:	dc18      	bgt.n	800aebc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ae8a:	f7ff fdf3 	bl	800aa74 <xTaskGetSchedulerState>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b02      	cmp	r3, #2
 800ae92:	d109      	bne.n	800aea8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ae94:	4b10      	ldr	r3, [pc, #64]	@ (800aed8 <xTimerGenericCommand+0x98>)
 800ae96:	6818      	ldr	r0, [r3, #0]
 800ae98:	f107 0110 	add.w	r1, r7, #16
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aea0:	f7fe fbce 	bl	8009640 <xQueueGenericSend>
 800aea4:	6278      	str	r0, [r7, #36]	@ 0x24
 800aea6:	e012      	b.n	800aece <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aea8:	4b0b      	ldr	r3, [pc, #44]	@ (800aed8 <xTimerGenericCommand+0x98>)
 800aeaa:	6818      	ldr	r0, [r3, #0]
 800aeac:	f107 0110 	add.w	r1, r7, #16
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f7fe fbc4 	bl	8009640 <xQueueGenericSend>
 800aeb8:	6278      	str	r0, [r7, #36]	@ 0x24
 800aeba:	e008      	b.n	800aece <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aebc:	4b06      	ldr	r3, [pc, #24]	@ (800aed8 <xTimerGenericCommand+0x98>)
 800aebe:	6818      	ldr	r0, [r3, #0]
 800aec0:	f107 0110 	add.w	r1, r7, #16
 800aec4:	2300      	movs	r3, #0
 800aec6:	683a      	ldr	r2, [r7, #0]
 800aec8:	f7fe fcbc 	bl	8009844 <xQueueGenericSendFromISR>
 800aecc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3728      	adds	r7, #40	@ 0x28
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	24004ba0 	.word	0x24004ba0

0800aedc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b088      	sub	sp, #32
 800aee0:	af02      	add	r7, sp, #8
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aee6:	4b23      	ldr	r3, [pc, #140]	@ (800af74 <prvProcessExpiredTimer+0x98>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	68db      	ldr	r3, [r3, #12]
 800aeec:	68db      	ldr	r3, [r3, #12]
 800aeee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	3304      	adds	r3, #4
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7fe f81b 	bl	8008f30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af00:	f003 0304 	and.w	r3, r3, #4
 800af04:	2b00      	cmp	r3, #0
 800af06:	d023      	beq.n	800af50 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	699a      	ldr	r2, [r3, #24]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	18d1      	adds	r1, r2, r3
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	683a      	ldr	r2, [r7, #0]
 800af14:	6978      	ldr	r0, [r7, #20]
 800af16:	f000 f8d5 	bl	800b0c4 <prvInsertTimerInActiveList>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d020      	beq.n	800af62 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af20:	2300      	movs	r3, #0
 800af22:	9300      	str	r3, [sp, #0]
 800af24:	2300      	movs	r3, #0
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	2100      	movs	r1, #0
 800af2a:	6978      	ldr	r0, [r7, #20]
 800af2c:	f7ff ff88 	bl	800ae40 <xTimerGenericCommand>
 800af30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d114      	bne.n	800af62 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800af38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af3c:	f383 8811 	msr	BASEPRI, r3
 800af40:	f3bf 8f6f 	isb	sy
 800af44:	f3bf 8f4f 	dsb	sy
 800af48:	60fb      	str	r3, [r7, #12]
}
 800af4a:	bf00      	nop
 800af4c:	bf00      	nop
 800af4e:	e7fd      	b.n	800af4c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af56:	f023 0301 	bic.w	r3, r3, #1
 800af5a:	b2da      	uxtb	r2, r3
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	6a1b      	ldr	r3, [r3, #32]
 800af66:	6978      	ldr	r0, [r7, #20]
 800af68:	4798      	blx	r3
}
 800af6a:	bf00      	nop
 800af6c:	3718      	adds	r7, #24
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	24004b98 	.word	0x24004b98

0800af78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af80:	f107 0308 	add.w	r3, r7, #8
 800af84:	4618      	mov	r0, r3
 800af86:	f000 f859 	bl	800b03c <prvGetNextExpireTime>
 800af8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	4619      	mov	r1, r3
 800af90:	68f8      	ldr	r0, [r7, #12]
 800af92:	f000 f805 	bl	800afa0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800af96:	f000 f8d7 	bl	800b148 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af9a:	bf00      	nop
 800af9c:	e7f0      	b.n	800af80 <prvTimerTask+0x8>
	...

0800afa0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800afaa:	f7ff f97d 	bl	800a2a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800afae:	f107 0308 	add.w	r3, r7, #8
 800afb2:	4618      	mov	r0, r3
 800afb4:	f000 f866 	bl	800b084 <prvSampleTimeNow>
 800afb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d130      	bne.n	800b022 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d10a      	bne.n	800afdc <prvProcessTimerOrBlockTask+0x3c>
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d806      	bhi.n	800afdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800afce:	f7ff f979 	bl	800a2c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800afd2:	68f9      	ldr	r1, [r7, #12]
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f7ff ff81 	bl	800aedc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800afda:	e024      	b.n	800b026 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d008      	beq.n	800aff4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800afe2:	4b13      	ldr	r3, [pc, #76]	@ (800b030 <prvProcessTimerOrBlockTask+0x90>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d101      	bne.n	800aff0 <prvProcessTimerOrBlockTask+0x50>
 800afec:	2301      	movs	r3, #1
 800afee:	e000      	b.n	800aff2 <prvProcessTimerOrBlockTask+0x52>
 800aff0:	2300      	movs	r3, #0
 800aff2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aff4:	4b0f      	ldr	r3, [pc, #60]	@ (800b034 <prvProcessTimerOrBlockTask+0x94>)
 800aff6:	6818      	ldr	r0, [r3, #0]
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	1ad3      	subs	r3, r2, r3
 800affe:	683a      	ldr	r2, [r7, #0]
 800b000:	4619      	mov	r1, r3
 800b002:	f7fe fed9 	bl	8009db8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b006:	f7ff f95d 	bl	800a2c4 <xTaskResumeAll>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10a      	bne.n	800b026 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b010:	4b09      	ldr	r3, [pc, #36]	@ (800b038 <prvProcessTimerOrBlockTask+0x98>)
 800b012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b016:	601a      	str	r2, [r3, #0]
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	f3bf 8f6f 	isb	sy
}
 800b020:	e001      	b.n	800b026 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b022:	f7ff f94f 	bl	800a2c4 <xTaskResumeAll>
}
 800b026:	bf00      	nop
 800b028:	3710      	adds	r7, #16
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	24004b9c 	.word	0x24004b9c
 800b034:	24004ba0 	.word	0x24004ba0
 800b038:	e000ed04 	.word	0xe000ed04

0800b03c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b03c:	b480      	push	{r7}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b044:	4b0e      	ldr	r3, [pc, #56]	@ (800b080 <prvGetNextExpireTime+0x44>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d101      	bne.n	800b052 <prvGetNextExpireTime+0x16>
 800b04e:	2201      	movs	r2, #1
 800b050:	e000      	b.n	800b054 <prvGetNextExpireTime+0x18>
 800b052:	2200      	movs	r2, #0
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d105      	bne.n	800b06c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b060:	4b07      	ldr	r3, [pc, #28]	@ (800b080 <prvGetNextExpireTime+0x44>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	60fb      	str	r3, [r7, #12]
 800b06a:	e001      	b.n	800b070 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b06c:	2300      	movs	r3, #0
 800b06e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b070:	68fb      	ldr	r3, [r7, #12]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3714      	adds	r7, #20
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop
 800b080:	24004b98 	.word	0x24004b98

0800b084 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b08c:	f7ff f9b8 	bl	800a400 <xTaskGetTickCount>
 800b090:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b092:	4b0b      	ldr	r3, [pc, #44]	@ (800b0c0 <prvSampleTimeNow+0x3c>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d205      	bcs.n	800b0a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b09c:	f000 f93a 	bl	800b314 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	601a      	str	r2, [r3, #0]
 800b0a6:	e002      	b.n	800b0ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b0ae:	4a04      	ldr	r2, [pc, #16]	@ (800b0c0 <prvSampleTimeNow+0x3c>)
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	24004ba8 	.word	0x24004ba8

0800b0c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b086      	sub	sp, #24
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
 800b0d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	68ba      	ldr	r2, [r7, #8]
 800b0da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b0e2:	68ba      	ldr	r2, [r7, #8]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d812      	bhi.n	800b110 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	1ad2      	subs	r2, r2, r3
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	699b      	ldr	r3, [r3, #24]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d302      	bcc.n	800b0fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	617b      	str	r3, [r7, #20]
 800b0fc:	e01b      	b.n	800b136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b0fe:	4b10      	ldr	r3, [pc, #64]	@ (800b140 <prvInsertTimerInActiveList+0x7c>)
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	3304      	adds	r3, #4
 800b106:	4619      	mov	r1, r3
 800b108:	4610      	mov	r0, r2
 800b10a:	f7fd fed8 	bl	8008ebe <vListInsert>
 800b10e:	e012      	b.n	800b136 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	429a      	cmp	r2, r3
 800b116:	d206      	bcs.n	800b126 <prvInsertTimerInActiveList+0x62>
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d302      	bcc.n	800b126 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b120:	2301      	movs	r3, #1
 800b122:	617b      	str	r3, [r7, #20]
 800b124:	e007      	b.n	800b136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b126:	4b07      	ldr	r3, [pc, #28]	@ (800b144 <prvInsertTimerInActiveList+0x80>)
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	3304      	adds	r3, #4
 800b12e:	4619      	mov	r1, r3
 800b130:	4610      	mov	r0, r2
 800b132:	f7fd fec4 	bl	8008ebe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b136:	697b      	ldr	r3, [r7, #20]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3718      	adds	r7, #24
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	24004b9c 	.word	0x24004b9c
 800b144:	24004b98 	.word	0x24004b98

0800b148 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b08e      	sub	sp, #56	@ 0x38
 800b14c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b14e:	e0ce      	b.n	800b2ee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2b00      	cmp	r3, #0
 800b154:	da19      	bge.n	800b18a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b156:	1d3b      	adds	r3, r7, #4
 800b158:	3304      	adds	r3, #4
 800b15a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d10b      	bne.n	800b17a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	61fb      	str	r3, [r7, #28]
}
 800b174:	bf00      	nop
 800b176:	bf00      	nop
 800b178:	e7fd      	b.n	800b176 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b17a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b180:	6850      	ldr	r0, [r2, #4]
 800b182:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b184:	6892      	ldr	r2, [r2, #8]
 800b186:	4611      	mov	r1, r2
 800b188:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	f2c0 80ae 	blt.w	800b2ee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b198:	695b      	ldr	r3, [r3, #20]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d004      	beq.n	800b1a8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a0:	3304      	adds	r3, #4
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fd fec4 	bl	8008f30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1a8:	463b      	mov	r3, r7
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7ff ff6a 	bl	800b084 <prvSampleTimeNow>
 800b1b0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2b09      	cmp	r3, #9
 800b1b6:	f200 8097 	bhi.w	800b2e8 <prvProcessReceivedCommands+0x1a0>
 800b1ba:	a201      	add	r2, pc, #4	@ (adr r2, 800b1c0 <prvProcessReceivedCommands+0x78>)
 800b1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c0:	0800b1e9 	.word	0x0800b1e9
 800b1c4:	0800b1e9 	.word	0x0800b1e9
 800b1c8:	0800b1e9 	.word	0x0800b1e9
 800b1cc:	0800b25f 	.word	0x0800b25f
 800b1d0:	0800b273 	.word	0x0800b273
 800b1d4:	0800b2bf 	.word	0x0800b2bf
 800b1d8:	0800b1e9 	.word	0x0800b1e9
 800b1dc:	0800b1e9 	.word	0x0800b1e9
 800b1e0:	0800b25f 	.word	0x0800b25f
 800b1e4:	0800b273 	.word	0x0800b273
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b1ee:	f043 0301 	orr.w	r3, r3, #1
 800b1f2:	b2da      	uxtb	r2, r3
 800b1f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b1fa:	68ba      	ldr	r2, [r7, #8]
 800b1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1fe:	699b      	ldr	r3, [r3, #24]
 800b200:	18d1      	adds	r1, r2, r3
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b206:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b208:	f7ff ff5c 	bl	800b0c4 <prvInsertTimerInActiveList>
 800b20c:	4603      	mov	r3, r0
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d06c      	beq.n	800b2ec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b214:	6a1b      	ldr	r3, [r3, #32]
 800b216:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b218:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b21c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b220:	f003 0304 	and.w	r3, r3, #4
 800b224:	2b00      	cmp	r3, #0
 800b226:	d061      	beq.n	800b2ec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b228:	68ba      	ldr	r2, [r7, #8]
 800b22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b22c:	699b      	ldr	r3, [r3, #24]
 800b22e:	441a      	add	r2, r3
 800b230:	2300      	movs	r3, #0
 800b232:	9300      	str	r3, [sp, #0]
 800b234:	2300      	movs	r3, #0
 800b236:	2100      	movs	r1, #0
 800b238:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b23a:	f7ff fe01 	bl	800ae40 <xTimerGenericCommand>
 800b23e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b240:	6a3b      	ldr	r3, [r7, #32]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d152      	bne.n	800b2ec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b24a:	f383 8811 	msr	BASEPRI, r3
 800b24e:	f3bf 8f6f 	isb	sy
 800b252:	f3bf 8f4f 	dsb	sy
 800b256:	61bb      	str	r3, [r7, #24]
}
 800b258:	bf00      	nop
 800b25a:	bf00      	nop
 800b25c:	e7fd      	b.n	800b25a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b260:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b264:	f023 0301 	bic.w	r3, r3, #1
 800b268:	b2da      	uxtb	r2, r3
 800b26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b26c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b270:	e03d      	b.n	800b2ee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b274:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b278:	f043 0301 	orr.w	r3, r3, #1
 800b27c:	b2da      	uxtb	r2, r3
 800b27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b280:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b284:	68ba      	ldr	r2, [r7, #8]
 800b286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b288:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b28a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b28c:	699b      	ldr	r3, [r3, #24]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d10b      	bne.n	800b2aa <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b296:	f383 8811 	msr	BASEPRI, r3
 800b29a:	f3bf 8f6f 	isb	sy
 800b29e:	f3bf 8f4f 	dsb	sy
 800b2a2:	617b      	str	r3, [r7, #20]
}
 800b2a4:	bf00      	nop
 800b2a6:	bf00      	nop
 800b2a8:	e7fd      	b.n	800b2a6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ac:	699a      	ldr	r2, [r3, #24]
 800b2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b0:	18d1      	adds	r1, r2, r3
 800b2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2b8:	f7ff ff04 	bl	800b0c4 <prvInsertTimerInActiveList>
					break;
 800b2bc:	e017      	b.n	800b2ee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2c4:	f003 0302 	and.w	r3, r3, #2
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d103      	bne.n	800b2d4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b2cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2ce:	f7fd fc85 	bl	8008bdc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b2d2:	e00c      	b.n	800b2ee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2da:	f023 0301 	bic.w	r3, r3, #1
 800b2de:	b2da      	uxtb	r2, r3
 800b2e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b2e6:	e002      	b.n	800b2ee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b2e8:	bf00      	nop
 800b2ea:	e000      	b.n	800b2ee <prvProcessReceivedCommands+0x1a6>
					break;
 800b2ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b2ee:	4b08      	ldr	r3, [pc, #32]	@ (800b310 <prvProcessReceivedCommands+0x1c8>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	1d39      	adds	r1, r7, #4
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7fe fb42 	bl	8009980 <xQueueReceive>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f47f af26 	bne.w	800b150 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b304:	bf00      	nop
 800b306:	bf00      	nop
 800b308:	3730      	adds	r7, #48	@ 0x30
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	24004ba0 	.word	0x24004ba0

0800b314 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b088      	sub	sp, #32
 800b318:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b31a:	e049      	b.n	800b3b0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b31c:	4b2e      	ldr	r3, [pc, #184]	@ (800b3d8 <prvSwitchTimerLists+0xc4>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b326:	4b2c      	ldr	r3, [pc, #176]	@ (800b3d8 <prvSwitchTimerLists+0xc4>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	3304      	adds	r3, #4
 800b334:	4618      	mov	r0, r3
 800b336:	f7fd fdfb 	bl	8008f30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	6a1b      	ldr	r3, [r3, #32]
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b348:	f003 0304 	and.w	r3, r3, #4
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d02f      	beq.n	800b3b0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	699b      	ldr	r3, [r3, #24]
 800b354:	693a      	ldr	r2, [r7, #16]
 800b356:	4413      	add	r3, r2
 800b358:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b35a:	68ba      	ldr	r2, [r7, #8]
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	429a      	cmp	r2, r3
 800b360:	d90e      	bls.n	800b380 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	68fa      	ldr	r2, [r7, #12]
 800b36c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b36e:	4b1a      	ldr	r3, [pc, #104]	@ (800b3d8 <prvSwitchTimerLists+0xc4>)
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	3304      	adds	r3, #4
 800b376:	4619      	mov	r1, r3
 800b378:	4610      	mov	r0, r2
 800b37a:	f7fd fda0 	bl	8008ebe <vListInsert>
 800b37e:	e017      	b.n	800b3b0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b380:	2300      	movs	r3, #0
 800b382:	9300      	str	r3, [sp, #0]
 800b384:	2300      	movs	r3, #0
 800b386:	693a      	ldr	r2, [r7, #16]
 800b388:	2100      	movs	r1, #0
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f7ff fd58 	bl	800ae40 <xTimerGenericCommand>
 800b390:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d10b      	bne.n	800b3b0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b39c:	f383 8811 	msr	BASEPRI, r3
 800b3a0:	f3bf 8f6f 	isb	sy
 800b3a4:	f3bf 8f4f 	dsb	sy
 800b3a8:	603b      	str	r3, [r7, #0]
}
 800b3aa:	bf00      	nop
 800b3ac:	bf00      	nop
 800b3ae:	e7fd      	b.n	800b3ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3b0:	4b09      	ldr	r3, [pc, #36]	@ (800b3d8 <prvSwitchTimerLists+0xc4>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d1b0      	bne.n	800b31c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b3ba:	4b07      	ldr	r3, [pc, #28]	@ (800b3d8 <prvSwitchTimerLists+0xc4>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b3c0:	4b06      	ldr	r3, [pc, #24]	@ (800b3dc <prvSwitchTimerLists+0xc8>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a04      	ldr	r2, [pc, #16]	@ (800b3d8 <prvSwitchTimerLists+0xc4>)
 800b3c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b3c8:	4a04      	ldr	r2, [pc, #16]	@ (800b3dc <prvSwitchTimerLists+0xc8>)
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	6013      	str	r3, [r2, #0]
}
 800b3ce:	bf00      	nop
 800b3d0:	3718      	adds	r7, #24
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	24004b98 	.word	0x24004b98
 800b3dc:	24004b9c 	.word	0x24004b9c

0800b3e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b3e6:	f7fd feff 	bl	80091e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b3ea:	4b15      	ldr	r3, [pc, #84]	@ (800b440 <prvCheckForValidListAndQueue+0x60>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d120      	bne.n	800b434 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b3f2:	4814      	ldr	r0, [pc, #80]	@ (800b444 <prvCheckForValidListAndQueue+0x64>)
 800b3f4:	f7fd fd12 	bl	8008e1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b3f8:	4813      	ldr	r0, [pc, #76]	@ (800b448 <prvCheckForValidListAndQueue+0x68>)
 800b3fa:	f7fd fd0f 	bl	8008e1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b3fe:	4b13      	ldr	r3, [pc, #76]	@ (800b44c <prvCheckForValidListAndQueue+0x6c>)
 800b400:	4a10      	ldr	r2, [pc, #64]	@ (800b444 <prvCheckForValidListAndQueue+0x64>)
 800b402:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b404:	4b12      	ldr	r3, [pc, #72]	@ (800b450 <prvCheckForValidListAndQueue+0x70>)
 800b406:	4a10      	ldr	r2, [pc, #64]	@ (800b448 <prvCheckForValidListAndQueue+0x68>)
 800b408:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b40a:	2300      	movs	r3, #0
 800b40c:	9300      	str	r3, [sp, #0]
 800b40e:	4b11      	ldr	r3, [pc, #68]	@ (800b454 <prvCheckForValidListAndQueue+0x74>)
 800b410:	4a11      	ldr	r2, [pc, #68]	@ (800b458 <prvCheckForValidListAndQueue+0x78>)
 800b412:	2110      	movs	r1, #16
 800b414:	200a      	movs	r0, #10
 800b416:	f7fe f873 	bl	8009500 <xQueueGenericCreateStatic>
 800b41a:	4603      	mov	r3, r0
 800b41c:	4a08      	ldr	r2, [pc, #32]	@ (800b440 <prvCheckForValidListAndQueue+0x60>)
 800b41e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b420:	4b07      	ldr	r3, [pc, #28]	@ (800b440 <prvCheckForValidListAndQueue+0x60>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d005      	beq.n	800b434 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b428:	4b05      	ldr	r3, [pc, #20]	@ (800b440 <prvCheckForValidListAndQueue+0x60>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	490b      	ldr	r1, [pc, #44]	@ (800b45c <prvCheckForValidListAndQueue+0x7c>)
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fe fc98 	bl	8009d64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b434:	f7fd ff0a 	bl	800924c <vPortExitCritical>
}
 800b438:	bf00      	nop
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	24004ba0 	.word	0x24004ba0
 800b444:	24004b70 	.word	0x24004b70
 800b448:	24004b84 	.word	0x24004b84
 800b44c:	24004b98 	.word	0x24004b98
 800b450:	24004b9c 	.word	0x24004b9c
 800b454:	24004c4c 	.word	0x24004c4c
 800b458:	24004bac 	.word	0x24004bac
 800b45c:	0800c45c 	.word	0x0800c45c

0800b460 <std>:
 800b460:	2300      	movs	r3, #0
 800b462:	b510      	push	{r4, lr}
 800b464:	4604      	mov	r4, r0
 800b466:	e9c0 3300 	strd	r3, r3, [r0]
 800b46a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b46e:	6083      	str	r3, [r0, #8]
 800b470:	8181      	strh	r1, [r0, #12]
 800b472:	6643      	str	r3, [r0, #100]	@ 0x64
 800b474:	81c2      	strh	r2, [r0, #14]
 800b476:	6183      	str	r3, [r0, #24]
 800b478:	4619      	mov	r1, r3
 800b47a:	2208      	movs	r2, #8
 800b47c:	305c      	adds	r0, #92	@ 0x5c
 800b47e:	f000 f9f9 	bl	800b874 <memset>
 800b482:	4b0d      	ldr	r3, [pc, #52]	@ (800b4b8 <std+0x58>)
 800b484:	6263      	str	r3, [r4, #36]	@ 0x24
 800b486:	4b0d      	ldr	r3, [pc, #52]	@ (800b4bc <std+0x5c>)
 800b488:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b48a:	4b0d      	ldr	r3, [pc, #52]	@ (800b4c0 <std+0x60>)
 800b48c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b48e:	4b0d      	ldr	r3, [pc, #52]	@ (800b4c4 <std+0x64>)
 800b490:	6323      	str	r3, [r4, #48]	@ 0x30
 800b492:	4b0d      	ldr	r3, [pc, #52]	@ (800b4c8 <std+0x68>)
 800b494:	6224      	str	r4, [r4, #32]
 800b496:	429c      	cmp	r4, r3
 800b498:	d006      	beq.n	800b4a8 <std+0x48>
 800b49a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b49e:	4294      	cmp	r4, r2
 800b4a0:	d002      	beq.n	800b4a8 <std+0x48>
 800b4a2:	33d0      	adds	r3, #208	@ 0xd0
 800b4a4:	429c      	cmp	r4, r3
 800b4a6:	d105      	bne.n	800b4b4 <std+0x54>
 800b4a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b4ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4b0:	f000 ba58 	b.w	800b964 <__retarget_lock_init_recursive>
 800b4b4:	bd10      	pop	{r4, pc}
 800b4b6:	bf00      	nop
 800b4b8:	0800b6c5 	.word	0x0800b6c5
 800b4bc:	0800b6e7 	.word	0x0800b6e7
 800b4c0:	0800b71f 	.word	0x0800b71f
 800b4c4:	0800b743 	.word	0x0800b743
 800b4c8:	24004c9c 	.word	0x24004c9c

0800b4cc <stdio_exit_handler>:
 800b4cc:	4a02      	ldr	r2, [pc, #8]	@ (800b4d8 <stdio_exit_handler+0xc>)
 800b4ce:	4903      	ldr	r1, [pc, #12]	@ (800b4dc <stdio_exit_handler+0x10>)
 800b4d0:	4803      	ldr	r0, [pc, #12]	@ (800b4e0 <stdio_exit_handler+0x14>)
 800b4d2:	f000 b869 	b.w	800b5a8 <_fwalk_sglue>
 800b4d6:	bf00      	nop
 800b4d8:	24000014 	.word	0x24000014
 800b4dc:	0800c21d 	.word	0x0800c21d
 800b4e0:	24000024 	.word	0x24000024

0800b4e4 <cleanup_stdio>:
 800b4e4:	6841      	ldr	r1, [r0, #4]
 800b4e6:	4b0c      	ldr	r3, [pc, #48]	@ (800b518 <cleanup_stdio+0x34>)
 800b4e8:	4299      	cmp	r1, r3
 800b4ea:	b510      	push	{r4, lr}
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	d001      	beq.n	800b4f4 <cleanup_stdio+0x10>
 800b4f0:	f000 fe94 	bl	800c21c <_fflush_r>
 800b4f4:	68a1      	ldr	r1, [r4, #8]
 800b4f6:	4b09      	ldr	r3, [pc, #36]	@ (800b51c <cleanup_stdio+0x38>)
 800b4f8:	4299      	cmp	r1, r3
 800b4fa:	d002      	beq.n	800b502 <cleanup_stdio+0x1e>
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	f000 fe8d 	bl	800c21c <_fflush_r>
 800b502:	68e1      	ldr	r1, [r4, #12]
 800b504:	4b06      	ldr	r3, [pc, #24]	@ (800b520 <cleanup_stdio+0x3c>)
 800b506:	4299      	cmp	r1, r3
 800b508:	d004      	beq.n	800b514 <cleanup_stdio+0x30>
 800b50a:	4620      	mov	r0, r4
 800b50c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b510:	f000 be84 	b.w	800c21c <_fflush_r>
 800b514:	bd10      	pop	{r4, pc}
 800b516:	bf00      	nop
 800b518:	24004c9c 	.word	0x24004c9c
 800b51c:	24004d04 	.word	0x24004d04
 800b520:	24004d6c 	.word	0x24004d6c

0800b524 <global_stdio_init.part.0>:
 800b524:	b510      	push	{r4, lr}
 800b526:	4b0b      	ldr	r3, [pc, #44]	@ (800b554 <global_stdio_init.part.0+0x30>)
 800b528:	4c0b      	ldr	r4, [pc, #44]	@ (800b558 <global_stdio_init.part.0+0x34>)
 800b52a:	4a0c      	ldr	r2, [pc, #48]	@ (800b55c <global_stdio_init.part.0+0x38>)
 800b52c:	601a      	str	r2, [r3, #0]
 800b52e:	4620      	mov	r0, r4
 800b530:	2200      	movs	r2, #0
 800b532:	2104      	movs	r1, #4
 800b534:	f7ff ff94 	bl	800b460 <std>
 800b538:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b53c:	2201      	movs	r2, #1
 800b53e:	2109      	movs	r1, #9
 800b540:	f7ff ff8e 	bl	800b460 <std>
 800b544:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b548:	2202      	movs	r2, #2
 800b54a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b54e:	2112      	movs	r1, #18
 800b550:	f7ff bf86 	b.w	800b460 <std>
 800b554:	24004dd4 	.word	0x24004dd4
 800b558:	24004c9c 	.word	0x24004c9c
 800b55c:	0800b4cd 	.word	0x0800b4cd

0800b560 <__sfp_lock_acquire>:
 800b560:	4801      	ldr	r0, [pc, #4]	@ (800b568 <__sfp_lock_acquire+0x8>)
 800b562:	f000 ba00 	b.w	800b966 <__retarget_lock_acquire_recursive>
 800b566:	bf00      	nop
 800b568:	24004ddd 	.word	0x24004ddd

0800b56c <__sfp_lock_release>:
 800b56c:	4801      	ldr	r0, [pc, #4]	@ (800b574 <__sfp_lock_release+0x8>)
 800b56e:	f000 b9fb 	b.w	800b968 <__retarget_lock_release_recursive>
 800b572:	bf00      	nop
 800b574:	24004ddd 	.word	0x24004ddd

0800b578 <__sinit>:
 800b578:	b510      	push	{r4, lr}
 800b57a:	4604      	mov	r4, r0
 800b57c:	f7ff fff0 	bl	800b560 <__sfp_lock_acquire>
 800b580:	6a23      	ldr	r3, [r4, #32]
 800b582:	b11b      	cbz	r3, 800b58c <__sinit+0x14>
 800b584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b588:	f7ff bff0 	b.w	800b56c <__sfp_lock_release>
 800b58c:	4b04      	ldr	r3, [pc, #16]	@ (800b5a0 <__sinit+0x28>)
 800b58e:	6223      	str	r3, [r4, #32]
 800b590:	4b04      	ldr	r3, [pc, #16]	@ (800b5a4 <__sinit+0x2c>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1f5      	bne.n	800b584 <__sinit+0xc>
 800b598:	f7ff ffc4 	bl	800b524 <global_stdio_init.part.0>
 800b59c:	e7f2      	b.n	800b584 <__sinit+0xc>
 800b59e:	bf00      	nop
 800b5a0:	0800b4e5 	.word	0x0800b4e5
 800b5a4:	24004dd4 	.word	0x24004dd4

0800b5a8 <_fwalk_sglue>:
 800b5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5ac:	4607      	mov	r7, r0
 800b5ae:	4688      	mov	r8, r1
 800b5b0:	4614      	mov	r4, r2
 800b5b2:	2600      	movs	r6, #0
 800b5b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5b8:	f1b9 0901 	subs.w	r9, r9, #1
 800b5bc:	d505      	bpl.n	800b5ca <_fwalk_sglue+0x22>
 800b5be:	6824      	ldr	r4, [r4, #0]
 800b5c0:	2c00      	cmp	r4, #0
 800b5c2:	d1f7      	bne.n	800b5b4 <_fwalk_sglue+0xc>
 800b5c4:	4630      	mov	r0, r6
 800b5c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ca:	89ab      	ldrh	r3, [r5, #12]
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d907      	bls.n	800b5e0 <_fwalk_sglue+0x38>
 800b5d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	d003      	beq.n	800b5e0 <_fwalk_sglue+0x38>
 800b5d8:	4629      	mov	r1, r5
 800b5da:	4638      	mov	r0, r7
 800b5dc:	47c0      	blx	r8
 800b5de:	4306      	orrs	r6, r0
 800b5e0:	3568      	adds	r5, #104	@ 0x68
 800b5e2:	e7e9      	b.n	800b5b8 <_fwalk_sglue+0x10>

0800b5e4 <iprintf>:
 800b5e4:	b40f      	push	{r0, r1, r2, r3}
 800b5e6:	b507      	push	{r0, r1, r2, lr}
 800b5e8:	4906      	ldr	r1, [pc, #24]	@ (800b604 <iprintf+0x20>)
 800b5ea:	ab04      	add	r3, sp, #16
 800b5ec:	6808      	ldr	r0, [r1, #0]
 800b5ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5f2:	6881      	ldr	r1, [r0, #8]
 800b5f4:	9301      	str	r3, [sp, #4]
 800b5f6:	f000 fae9 	bl	800bbcc <_vfiprintf_r>
 800b5fa:	b003      	add	sp, #12
 800b5fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b600:	b004      	add	sp, #16
 800b602:	4770      	bx	lr
 800b604:	24000020 	.word	0x24000020

0800b608 <_puts_r>:
 800b608:	6a03      	ldr	r3, [r0, #32]
 800b60a:	b570      	push	{r4, r5, r6, lr}
 800b60c:	6884      	ldr	r4, [r0, #8]
 800b60e:	4605      	mov	r5, r0
 800b610:	460e      	mov	r6, r1
 800b612:	b90b      	cbnz	r3, 800b618 <_puts_r+0x10>
 800b614:	f7ff ffb0 	bl	800b578 <__sinit>
 800b618:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b61a:	07db      	lsls	r3, r3, #31
 800b61c:	d405      	bmi.n	800b62a <_puts_r+0x22>
 800b61e:	89a3      	ldrh	r3, [r4, #12]
 800b620:	0598      	lsls	r0, r3, #22
 800b622:	d402      	bmi.n	800b62a <_puts_r+0x22>
 800b624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b626:	f000 f99e 	bl	800b966 <__retarget_lock_acquire_recursive>
 800b62a:	89a3      	ldrh	r3, [r4, #12]
 800b62c:	0719      	lsls	r1, r3, #28
 800b62e:	d502      	bpl.n	800b636 <_puts_r+0x2e>
 800b630:	6923      	ldr	r3, [r4, #16]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d135      	bne.n	800b6a2 <_puts_r+0x9a>
 800b636:	4621      	mov	r1, r4
 800b638:	4628      	mov	r0, r5
 800b63a:	f000 f8c5 	bl	800b7c8 <__swsetup_r>
 800b63e:	b380      	cbz	r0, 800b6a2 <_puts_r+0x9a>
 800b640:	f04f 35ff 	mov.w	r5, #4294967295
 800b644:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b646:	07da      	lsls	r2, r3, #31
 800b648:	d405      	bmi.n	800b656 <_puts_r+0x4e>
 800b64a:	89a3      	ldrh	r3, [r4, #12]
 800b64c:	059b      	lsls	r3, r3, #22
 800b64e:	d402      	bmi.n	800b656 <_puts_r+0x4e>
 800b650:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b652:	f000 f989 	bl	800b968 <__retarget_lock_release_recursive>
 800b656:	4628      	mov	r0, r5
 800b658:	bd70      	pop	{r4, r5, r6, pc}
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	da04      	bge.n	800b668 <_puts_r+0x60>
 800b65e:	69a2      	ldr	r2, [r4, #24]
 800b660:	429a      	cmp	r2, r3
 800b662:	dc17      	bgt.n	800b694 <_puts_r+0x8c>
 800b664:	290a      	cmp	r1, #10
 800b666:	d015      	beq.n	800b694 <_puts_r+0x8c>
 800b668:	6823      	ldr	r3, [r4, #0]
 800b66a:	1c5a      	adds	r2, r3, #1
 800b66c:	6022      	str	r2, [r4, #0]
 800b66e:	7019      	strb	r1, [r3, #0]
 800b670:	68a3      	ldr	r3, [r4, #8]
 800b672:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b676:	3b01      	subs	r3, #1
 800b678:	60a3      	str	r3, [r4, #8]
 800b67a:	2900      	cmp	r1, #0
 800b67c:	d1ed      	bne.n	800b65a <_puts_r+0x52>
 800b67e:	2b00      	cmp	r3, #0
 800b680:	da11      	bge.n	800b6a6 <_puts_r+0x9e>
 800b682:	4622      	mov	r2, r4
 800b684:	210a      	movs	r1, #10
 800b686:	4628      	mov	r0, r5
 800b688:	f000 f85f 	bl	800b74a <__swbuf_r>
 800b68c:	3001      	adds	r0, #1
 800b68e:	d0d7      	beq.n	800b640 <_puts_r+0x38>
 800b690:	250a      	movs	r5, #10
 800b692:	e7d7      	b.n	800b644 <_puts_r+0x3c>
 800b694:	4622      	mov	r2, r4
 800b696:	4628      	mov	r0, r5
 800b698:	f000 f857 	bl	800b74a <__swbuf_r>
 800b69c:	3001      	adds	r0, #1
 800b69e:	d1e7      	bne.n	800b670 <_puts_r+0x68>
 800b6a0:	e7ce      	b.n	800b640 <_puts_r+0x38>
 800b6a2:	3e01      	subs	r6, #1
 800b6a4:	e7e4      	b.n	800b670 <_puts_r+0x68>
 800b6a6:	6823      	ldr	r3, [r4, #0]
 800b6a8:	1c5a      	adds	r2, r3, #1
 800b6aa:	6022      	str	r2, [r4, #0]
 800b6ac:	220a      	movs	r2, #10
 800b6ae:	701a      	strb	r2, [r3, #0]
 800b6b0:	e7ee      	b.n	800b690 <_puts_r+0x88>
	...

0800b6b4 <puts>:
 800b6b4:	4b02      	ldr	r3, [pc, #8]	@ (800b6c0 <puts+0xc>)
 800b6b6:	4601      	mov	r1, r0
 800b6b8:	6818      	ldr	r0, [r3, #0]
 800b6ba:	f7ff bfa5 	b.w	800b608 <_puts_r>
 800b6be:	bf00      	nop
 800b6c0:	24000020 	.word	0x24000020

0800b6c4 <__sread>:
 800b6c4:	b510      	push	{r4, lr}
 800b6c6:	460c      	mov	r4, r1
 800b6c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6cc:	f000 f8fc 	bl	800b8c8 <_read_r>
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	bfab      	itete	ge
 800b6d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b6d6:	89a3      	ldrhlt	r3, [r4, #12]
 800b6d8:	181b      	addge	r3, r3, r0
 800b6da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b6de:	bfac      	ite	ge
 800b6e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b6e2:	81a3      	strhlt	r3, [r4, #12]
 800b6e4:	bd10      	pop	{r4, pc}

0800b6e6 <__swrite>:
 800b6e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ea:	461f      	mov	r7, r3
 800b6ec:	898b      	ldrh	r3, [r1, #12]
 800b6ee:	05db      	lsls	r3, r3, #23
 800b6f0:	4605      	mov	r5, r0
 800b6f2:	460c      	mov	r4, r1
 800b6f4:	4616      	mov	r6, r2
 800b6f6:	d505      	bpl.n	800b704 <__swrite+0x1e>
 800b6f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6fc:	2302      	movs	r3, #2
 800b6fe:	2200      	movs	r2, #0
 800b700:	f000 f8d0 	bl	800b8a4 <_lseek_r>
 800b704:	89a3      	ldrh	r3, [r4, #12]
 800b706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b70a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b70e:	81a3      	strh	r3, [r4, #12]
 800b710:	4632      	mov	r2, r6
 800b712:	463b      	mov	r3, r7
 800b714:	4628      	mov	r0, r5
 800b716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b71a:	f000 b8e7 	b.w	800b8ec <_write_r>

0800b71e <__sseek>:
 800b71e:	b510      	push	{r4, lr}
 800b720:	460c      	mov	r4, r1
 800b722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b726:	f000 f8bd 	bl	800b8a4 <_lseek_r>
 800b72a:	1c43      	adds	r3, r0, #1
 800b72c:	89a3      	ldrh	r3, [r4, #12]
 800b72e:	bf15      	itete	ne
 800b730:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b732:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b736:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b73a:	81a3      	strheq	r3, [r4, #12]
 800b73c:	bf18      	it	ne
 800b73e:	81a3      	strhne	r3, [r4, #12]
 800b740:	bd10      	pop	{r4, pc}

0800b742 <__sclose>:
 800b742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b746:	f000 b89d 	b.w	800b884 <_close_r>

0800b74a <__swbuf_r>:
 800b74a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b74c:	460e      	mov	r6, r1
 800b74e:	4614      	mov	r4, r2
 800b750:	4605      	mov	r5, r0
 800b752:	b118      	cbz	r0, 800b75c <__swbuf_r+0x12>
 800b754:	6a03      	ldr	r3, [r0, #32]
 800b756:	b90b      	cbnz	r3, 800b75c <__swbuf_r+0x12>
 800b758:	f7ff ff0e 	bl	800b578 <__sinit>
 800b75c:	69a3      	ldr	r3, [r4, #24]
 800b75e:	60a3      	str	r3, [r4, #8]
 800b760:	89a3      	ldrh	r3, [r4, #12]
 800b762:	071a      	lsls	r2, r3, #28
 800b764:	d501      	bpl.n	800b76a <__swbuf_r+0x20>
 800b766:	6923      	ldr	r3, [r4, #16]
 800b768:	b943      	cbnz	r3, 800b77c <__swbuf_r+0x32>
 800b76a:	4621      	mov	r1, r4
 800b76c:	4628      	mov	r0, r5
 800b76e:	f000 f82b 	bl	800b7c8 <__swsetup_r>
 800b772:	b118      	cbz	r0, 800b77c <__swbuf_r+0x32>
 800b774:	f04f 37ff 	mov.w	r7, #4294967295
 800b778:	4638      	mov	r0, r7
 800b77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b77c:	6823      	ldr	r3, [r4, #0]
 800b77e:	6922      	ldr	r2, [r4, #16]
 800b780:	1a98      	subs	r0, r3, r2
 800b782:	6963      	ldr	r3, [r4, #20]
 800b784:	b2f6      	uxtb	r6, r6
 800b786:	4283      	cmp	r3, r0
 800b788:	4637      	mov	r7, r6
 800b78a:	dc05      	bgt.n	800b798 <__swbuf_r+0x4e>
 800b78c:	4621      	mov	r1, r4
 800b78e:	4628      	mov	r0, r5
 800b790:	f000 fd44 	bl	800c21c <_fflush_r>
 800b794:	2800      	cmp	r0, #0
 800b796:	d1ed      	bne.n	800b774 <__swbuf_r+0x2a>
 800b798:	68a3      	ldr	r3, [r4, #8]
 800b79a:	3b01      	subs	r3, #1
 800b79c:	60a3      	str	r3, [r4, #8]
 800b79e:	6823      	ldr	r3, [r4, #0]
 800b7a0:	1c5a      	adds	r2, r3, #1
 800b7a2:	6022      	str	r2, [r4, #0]
 800b7a4:	701e      	strb	r6, [r3, #0]
 800b7a6:	6962      	ldr	r2, [r4, #20]
 800b7a8:	1c43      	adds	r3, r0, #1
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d004      	beq.n	800b7b8 <__swbuf_r+0x6e>
 800b7ae:	89a3      	ldrh	r3, [r4, #12]
 800b7b0:	07db      	lsls	r3, r3, #31
 800b7b2:	d5e1      	bpl.n	800b778 <__swbuf_r+0x2e>
 800b7b4:	2e0a      	cmp	r6, #10
 800b7b6:	d1df      	bne.n	800b778 <__swbuf_r+0x2e>
 800b7b8:	4621      	mov	r1, r4
 800b7ba:	4628      	mov	r0, r5
 800b7bc:	f000 fd2e 	bl	800c21c <_fflush_r>
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	d0d9      	beq.n	800b778 <__swbuf_r+0x2e>
 800b7c4:	e7d6      	b.n	800b774 <__swbuf_r+0x2a>
	...

0800b7c8 <__swsetup_r>:
 800b7c8:	b538      	push	{r3, r4, r5, lr}
 800b7ca:	4b29      	ldr	r3, [pc, #164]	@ (800b870 <__swsetup_r+0xa8>)
 800b7cc:	4605      	mov	r5, r0
 800b7ce:	6818      	ldr	r0, [r3, #0]
 800b7d0:	460c      	mov	r4, r1
 800b7d2:	b118      	cbz	r0, 800b7dc <__swsetup_r+0x14>
 800b7d4:	6a03      	ldr	r3, [r0, #32]
 800b7d6:	b90b      	cbnz	r3, 800b7dc <__swsetup_r+0x14>
 800b7d8:	f7ff fece 	bl	800b578 <__sinit>
 800b7dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7e0:	0719      	lsls	r1, r3, #28
 800b7e2:	d422      	bmi.n	800b82a <__swsetup_r+0x62>
 800b7e4:	06da      	lsls	r2, r3, #27
 800b7e6:	d407      	bmi.n	800b7f8 <__swsetup_r+0x30>
 800b7e8:	2209      	movs	r2, #9
 800b7ea:	602a      	str	r2, [r5, #0]
 800b7ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7f0:	81a3      	strh	r3, [r4, #12]
 800b7f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f6:	e033      	b.n	800b860 <__swsetup_r+0x98>
 800b7f8:	0758      	lsls	r0, r3, #29
 800b7fa:	d512      	bpl.n	800b822 <__swsetup_r+0x5a>
 800b7fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7fe:	b141      	cbz	r1, 800b812 <__swsetup_r+0x4a>
 800b800:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b804:	4299      	cmp	r1, r3
 800b806:	d002      	beq.n	800b80e <__swsetup_r+0x46>
 800b808:	4628      	mov	r0, r5
 800b80a:	f000 f8bd 	bl	800b988 <_free_r>
 800b80e:	2300      	movs	r3, #0
 800b810:	6363      	str	r3, [r4, #52]	@ 0x34
 800b812:	89a3      	ldrh	r3, [r4, #12]
 800b814:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b818:	81a3      	strh	r3, [r4, #12]
 800b81a:	2300      	movs	r3, #0
 800b81c:	6063      	str	r3, [r4, #4]
 800b81e:	6923      	ldr	r3, [r4, #16]
 800b820:	6023      	str	r3, [r4, #0]
 800b822:	89a3      	ldrh	r3, [r4, #12]
 800b824:	f043 0308 	orr.w	r3, r3, #8
 800b828:	81a3      	strh	r3, [r4, #12]
 800b82a:	6923      	ldr	r3, [r4, #16]
 800b82c:	b94b      	cbnz	r3, 800b842 <__swsetup_r+0x7a>
 800b82e:	89a3      	ldrh	r3, [r4, #12]
 800b830:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b838:	d003      	beq.n	800b842 <__swsetup_r+0x7a>
 800b83a:	4621      	mov	r1, r4
 800b83c:	4628      	mov	r0, r5
 800b83e:	f000 fd3b 	bl	800c2b8 <__smakebuf_r>
 800b842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b846:	f013 0201 	ands.w	r2, r3, #1
 800b84a:	d00a      	beq.n	800b862 <__swsetup_r+0x9a>
 800b84c:	2200      	movs	r2, #0
 800b84e:	60a2      	str	r2, [r4, #8]
 800b850:	6962      	ldr	r2, [r4, #20]
 800b852:	4252      	negs	r2, r2
 800b854:	61a2      	str	r2, [r4, #24]
 800b856:	6922      	ldr	r2, [r4, #16]
 800b858:	b942      	cbnz	r2, 800b86c <__swsetup_r+0xa4>
 800b85a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b85e:	d1c5      	bne.n	800b7ec <__swsetup_r+0x24>
 800b860:	bd38      	pop	{r3, r4, r5, pc}
 800b862:	0799      	lsls	r1, r3, #30
 800b864:	bf58      	it	pl
 800b866:	6962      	ldrpl	r2, [r4, #20]
 800b868:	60a2      	str	r2, [r4, #8]
 800b86a:	e7f4      	b.n	800b856 <__swsetup_r+0x8e>
 800b86c:	2000      	movs	r0, #0
 800b86e:	e7f7      	b.n	800b860 <__swsetup_r+0x98>
 800b870:	24000020 	.word	0x24000020

0800b874 <memset>:
 800b874:	4402      	add	r2, r0
 800b876:	4603      	mov	r3, r0
 800b878:	4293      	cmp	r3, r2
 800b87a:	d100      	bne.n	800b87e <memset+0xa>
 800b87c:	4770      	bx	lr
 800b87e:	f803 1b01 	strb.w	r1, [r3], #1
 800b882:	e7f9      	b.n	800b878 <memset+0x4>

0800b884 <_close_r>:
 800b884:	b538      	push	{r3, r4, r5, lr}
 800b886:	4d06      	ldr	r5, [pc, #24]	@ (800b8a0 <_close_r+0x1c>)
 800b888:	2300      	movs	r3, #0
 800b88a:	4604      	mov	r4, r0
 800b88c:	4608      	mov	r0, r1
 800b88e:	602b      	str	r3, [r5, #0]
 800b890:	f7f6 fb59 	bl	8001f46 <_close>
 800b894:	1c43      	adds	r3, r0, #1
 800b896:	d102      	bne.n	800b89e <_close_r+0x1a>
 800b898:	682b      	ldr	r3, [r5, #0]
 800b89a:	b103      	cbz	r3, 800b89e <_close_r+0x1a>
 800b89c:	6023      	str	r3, [r4, #0]
 800b89e:	bd38      	pop	{r3, r4, r5, pc}
 800b8a0:	24004dd8 	.word	0x24004dd8

0800b8a4 <_lseek_r>:
 800b8a4:	b538      	push	{r3, r4, r5, lr}
 800b8a6:	4d07      	ldr	r5, [pc, #28]	@ (800b8c4 <_lseek_r+0x20>)
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	4608      	mov	r0, r1
 800b8ac:	4611      	mov	r1, r2
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	602a      	str	r2, [r5, #0]
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	f7f6 fb6e 	bl	8001f94 <_lseek>
 800b8b8:	1c43      	adds	r3, r0, #1
 800b8ba:	d102      	bne.n	800b8c2 <_lseek_r+0x1e>
 800b8bc:	682b      	ldr	r3, [r5, #0]
 800b8be:	b103      	cbz	r3, 800b8c2 <_lseek_r+0x1e>
 800b8c0:	6023      	str	r3, [r4, #0]
 800b8c2:	bd38      	pop	{r3, r4, r5, pc}
 800b8c4:	24004dd8 	.word	0x24004dd8

0800b8c8 <_read_r>:
 800b8c8:	b538      	push	{r3, r4, r5, lr}
 800b8ca:	4d07      	ldr	r5, [pc, #28]	@ (800b8e8 <_read_r+0x20>)
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	4608      	mov	r0, r1
 800b8d0:	4611      	mov	r1, r2
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	602a      	str	r2, [r5, #0]
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	f7f6 fafc 	bl	8001ed4 <_read>
 800b8dc:	1c43      	adds	r3, r0, #1
 800b8de:	d102      	bne.n	800b8e6 <_read_r+0x1e>
 800b8e0:	682b      	ldr	r3, [r5, #0]
 800b8e2:	b103      	cbz	r3, 800b8e6 <_read_r+0x1e>
 800b8e4:	6023      	str	r3, [r4, #0]
 800b8e6:	bd38      	pop	{r3, r4, r5, pc}
 800b8e8:	24004dd8 	.word	0x24004dd8

0800b8ec <_write_r>:
 800b8ec:	b538      	push	{r3, r4, r5, lr}
 800b8ee:	4d07      	ldr	r5, [pc, #28]	@ (800b90c <_write_r+0x20>)
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	4608      	mov	r0, r1
 800b8f4:	4611      	mov	r1, r2
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	602a      	str	r2, [r5, #0]
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	f7f6 fb07 	bl	8001f0e <_write>
 800b900:	1c43      	adds	r3, r0, #1
 800b902:	d102      	bne.n	800b90a <_write_r+0x1e>
 800b904:	682b      	ldr	r3, [r5, #0]
 800b906:	b103      	cbz	r3, 800b90a <_write_r+0x1e>
 800b908:	6023      	str	r3, [r4, #0]
 800b90a:	bd38      	pop	{r3, r4, r5, pc}
 800b90c:	24004dd8 	.word	0x24004dd8

0800b910 <__errno>:
 800b910:	4b01      	ldr	r3, [pc, #4]	@ (800b918 <__errno+0x8>)
 800b912:	6818      	ldr	r0, [r3, #0]
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	24000020 	.word	0x24000020

0800b91c <__libc_init_array>:
 800b91c:	b570      	push	{r4, r5, r6, lr}
 800b91e:	4d0d      	ldr	r5, [pc, #52]	@ (800b954 <__libc_init_array+0x38>)
 800b920:	4c0d      	ldr	r4, [pc, #52]	@ (800b958 <__libc_init_array+0x3c>)
 800b922:	1b64      	subs	r4, r4, r5
 800b924:	10a4      	asrs	r4, r4, #2
 800b926:	2600      	movs	r6, #0
 800b928:	42a6      	cmp	r6, r4
 800b92a:	d109      	bne.n	800b940 <__libc_init_array+0x24>
 800b92c:	4d0b      	ldr	r5, [pc, #44]	@ (800b95c <__libc_init_array+0x40>)
 800b92e:	4c0c      	ldr	r4, [pc, #48]	@ (800b960 <__libc_init_array+0x44>)
 800b930:	f000 fd30 	bl	800c394 <_init>
 800b934:	1b64      	subs	r4, r4, r5
 800b936:	10a4      	asrs	r4, r4, #2
 800b938:	2600      	movs	r6, #0
 800b93a:	42a6      	cmp	r6, r4
 800b93c:	d105      	bne.n	800b94a <__libc_init_array+0x2e>
 800b93e:	bd70      	pop	{r4, r5, r6, pc}
 800b940:	f855 3b04 	ldr.w	r3, [r5], #4
 800b944:	4798      	blx	r3
 800b946:	3601      	adds	r6, #1
 800b948:	e7ee      	b.n	800b928 <__libc_init_array+0xc>
 800b94a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b94e:	4798      	blx	r3
 800b950:	3601      	adds	r6, #1
 800b952:	e7f2      	b.n	800b93a <__libc_init_array+0x1e>
 800b954:	0800e500 	.word	0x0800e500
 800b958:	0800e500 	.word	0x0800e500
 800b95c:	0800e500 	.word	0x0800e500
 800b960:	0800e504 	.word	0x0800e504

0800b964 <__retarget_lock_init_recursive>:
 800b964:	4770      	bx	lr

0800b966 <__retarget_lock_acquire_recursive>:
 800b966:	4770      	bx	lr

0800b968 <__retarget_lock_release_recursive>:
 800b968:	4770      	bx	lr

0800b96a <memcpy>:
 800b96a:	440a      	add	r2, r1
 800b96c:	4291      	cmp	r1, r2
 800b96e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b972:	d100      	bne.n	800b976 <memcpy+0xc>
 800b974:	4770      	bx	lr
 800b976:	b510      	push	{r4, lr}
 800b978:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b97c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b980:	4291      	cmp	r1, r2
 800b982:	d1f9      	bne.n	800b978 <memcpy+0xe>
 800b984:	bd10      	pop	{r4, pc}
	...

0800b988 <_free_r>:
 800b988:	b538      	push	{r3, r4, r5, lr}
 800b98a:	4605      	mov	r5, r0
 800b98c:	2900      	cmp	r1, #0
 800b98e:	d041      	beq.n	800ba14 <_free_r+0x8c>
 800b990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b994:	1f0c      	subs	r4, r1, #4
 800b996:	2b00      	cmp	r3, #0
 800b998:	bfb8      	it	lt
 800b99a:	18e4      	addlt	r4, r4, r3
 800b99c:	f000 f8e0 	bl	800bb60 <__malloc_lock>
 800b9a0:	4a1d      	ldr	r2, [pc, #116]	@ (800ba18 <_free_r+0x90>)
 800b9a2:	6813      	ldr	r3, [r2, #0]
 800b9a4:	b933      	cbnz	r3, 800b9b4 <_free_r+0x2c>
 800b9a6:	6063      	str	r3, [r4, #4]
 800b9a8:	6014      	str	r4, [r2, #0]
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9b0:	f000 b8dc 	b.w	800bb6c <__malloc_unlock>
 800b9b4:	42a3      	cmp	r3, r4
 800b9b6:	d908      	bls.n	800b9ca <_free_r+0x42>
 800b9b8:	6820      	ldr	r0, [r4, #0]
 800b9ba:	1821      	adds	r1, r4, r0
 800b9bc:	428b      	cmp	r3, r1
 800b9be:	bf01      	itttt	eq
 800b9c0:	6819      	ldreq	r1, [r3, #0]
 800b9c2:	685b      	ldreq	r3, [r3, #4]
 800b9c4:	1809      	addeq	r1, r1, r0
 800b9c6:	6021      	streq	r1, [r4, #0]
 800b9c8:	e7ed      	b.n	800b9a6 <_free_r+0x1e>
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	b10b      	cbz	r3, 800b9d4 <_free_r+0x4c>
 800b9d0:	42a3      	cmp	r3, r4
 800b9d2:	d9fa      	bls.n	800b9ca <_free_r+0x42>
 800b9d4:	6811      	ldr	r1, [r2, #0]
 800b9d6:	1850      	adds	r0, r2, r1
 800b9d8:	42a0      	cmp	r0, r4
 800b9da:	d10b      	bne.n	800b9f4 <_free_r+0x6c>
 800b9dc:	6820      	ldr	r0, [r4, #0]
 800b9de:	4401      	add	r1, r0
 800b9e0:	1850      	adds	r0, r2, r1
 800b9e2:	4283      	cmp	r3, r0
 800b9e4:	6011      	str	r1, [r2, #0]
 800b9e6:	d1e0      	bne.n	800b9aa <_free_r+0x22>
 800b9e8:	6818      	ldr	r0, [r3, #0]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	6053      	str	r3, [r2, #4]
 800b9ee:	4408      	add	r0, r1
 800b9f0:	6010      	str	r0, [r2, #0]
 800b9f2:	e7da      	b.n	800b9aa <_free_r+0x22>
 800b9f4:	d902      	bls.n	800b9fc <_free_r+0x74>
 800b9f6:	230c      	movs	r3, #12
 800b9f8:	602b      	str	r3, [r5, #0]
 800b9fa:	e7d6      	b.n	800b9aa <_free_r+0x22>
 800b9fc:	6820      	ldr	r0, [r4, #0]
 800b9fe:	1821      	adds	r1, r4, r0
 800ba00:	428b      	cmp	r3, r1
 800ba02:	bf04      	itt	eq
 800ba04:	6819      	ldreq	r1, [r3, #0]
 800ba06:	685b      	ldreq	r3, [r3, #4]
 800ba08:	6063      	str	r3, [r4, #4]
 800ba0a:	bf04      	itt	eq
 800ba0c:	1809      	addeq	r1, r1, r0
 800ba0e:	6021      	streq	r1, [r4, #0]
 800ba10:	6054      	str	r4, [r2, #4]
 800ba12:	e7ca      	b.n	800b9aa <_free_r+0x22>
 800ba14:	bd38      	pop	{r3, r4, r5, pc}
 800ba16:	bf00      	nop
 800ba18:	24004de4 	.word	0x24004de4

0800ba1c <sbrk_aligned>:
 800ba1c:	b570      	push	{r4, r5, r6, lr}
 800ba1e:	4e0f      	ldr	r6, [pc, #60]	@ (800ba5c <sbrk_aligned+0x40>)
 800ba20:	460c      	mov	r4, r1
 800ba22:	6831      	ldr	r1, [r6, #0]
 800ba24:	4605      	mov	r5, r0
 800ba26:	b911      	cbnz	r1, 800ba2e <sbrk_aligned+0x12>
 800ba28:	f000 fca4 	bl	800c374 <_sbrk_r>
 800ba2c:	6030      	str	r0, [r6, #0]
 800ba2e:	4621      	mov	r1, r4
 800ba30:	4628      	mov	r0, r5
 800ba32:	f000 fc9f 	bl	800c374 <_sbrk_r>
 800ba36:	1c43      	adds	r3, r0, #1
 800ba38:	d103      	bne.n	800ba42 <sbrk_aligned+0x26>
 800ba3a:	f04f 34ff 	mov.w	r4, #4294967295
 800ba3e:	4620      	mov	r0, r4
 800ba40:	bd70      	pop	{r4, r5, r6, pc}
 800ba42:	1cc4      	adds	r4, r0, #3
 800ba44:	f024 0403 	bic.w	r4, r4, #3
 800ba48:	42a0      	cmp	r0, r4
 800ba4a:	d0f8      	beq.n	800ba3e <sbrk_aligned+0x22>
 800ba4c:	1a21      	subs	r1, r4, r0
 800ba4e:	4628      	mov	r0, r5
 800ba50:	f000 fc90 	bl	800c374 <_sbrk_r>
 800ba54:	3001      	adds	r0, #1
 800ba56:	d1f2      	bne.n	800ba3e <sbrk_aligned+0x22>
 800ba58:	e7ef      	b.n	800ba3a <sbrk_aligned+0x1e>
 800ba5a:	bf00      	nop
 800ba5c:	24004de0 	.word	0x24004de0

0800ba60 <_malloc_r>:
 800ba60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba64:	1ccd      	adds	r5, r1, #3
 800ba66:	f025 0503 	bic.w	r5, r5, #3
 800ba6a:	3508      	adds	r5, #8
 800ba6c:	2d0c      	cmp	r5, #12
 800ba6e:	bf38      	it	cc
 800ba70:	250c      	movcc	r5, #12
 800ba72:	2d00      	cmp	r5, #0
 800ba74:	4606      	mov	r6, r0
 800ba76:	db01      	blt.n	800ba7c <_malloc_r+0x1c>
 800ba78:	42a9      	cmp	r1, r5
 800ba7a:	d904      	bls.n	800ba86 <_malloc_r+0x26>
 800ba7c:	230c      	movs	r3, #12
 800ba7e:	6033      	str	r3, [r6, #0]
 800ba80:	2000      	movs	r0, #0
 800ba82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bb5c <_malloc_r+0xfc>
 800ba8a:	f000 f869 	bl	800bb60 <__malloc_lock>
 800ba8e:	f8d8 3000 	ldr.w	r3, [r8]
 800ba92:	461c      	mov	r4, r3
 800ba94:	bb44      	cbnz	r4, 800bae8 <_malloc_r+0x88>
 800ba96:	4629      	mov	r1, r5
 800ba98:	4630      	mov	r0, r6
 800ba9a:	f7ff ffbf 	bl	800ba1c <sbrk_aligned>
 800ba9e:	1c43      	adds	r3, r0, #1
 800baa0:	4604      	mov	r4, r0
 800baa2:	d158      	bne.n	800bb56 <_malloc_r+0xf6>
 800baa4:	f8d8 4000 	ldr.w	r4, [r8]
 800baa8:	4627      	mov	r7, r4
 800baaa:	2f00      	cmp	r7, #0
 800baac:	d143      	bne.n	800bb36 <_malloc_r+0xd6>
 800baae:	2c00      	cmp	r4, #0
 800bab0:	d04b      	beq.n	800bb4a <_malloc_r+0xea>
 800bab2:	6823      	ldr	r3, [r4, #0]
 800bab4:	4639      	mov	r1, r7
 800bab6:	4630      	mov	r0, r6
 800bab8:	eb04 0903 	add.w	r9, r4, r3
 800babc:	f000 fc5a 	bl	800c374 <_sbrk_r>
 800bac0:	4581      	cmp	r9, r0
 800bac2:	d142      	bne.n	800bb4a <_malloc_r+0xea>
 800bac4:	6821      	ldr	r1, [r4, #0]
 800bac6:	1a6d      	subs	r5, r5, r1
 800bac8:	4629      	mov	r1, r5
 800baca:	4630      	mov	r0, r6
 800bacc:	f7ff ffa6 	bl	800ba1c <sbrk_aligned>
 800bad0:	3001      	adds	r0, #1
 800bad2:	d03a      	beq.n	800bb4a <_malloc_r+0xea>
 800bad4:	6823      	ldr	r3, [r4, #0]
 800bad6:	442b      	add	r3, r5
 800bad8:	6023      	str	r3, [r4, #0]
 800bada:	f8d8 3000 	ldr.w	r3, [r8]
 800bade:	685a      	ldr	r2, [r3, #4]
 800bae0:	bb62      	cbnz	r2, 800bb3c <_malloc_r+0xdc>
 800bae2:	f8c8 7000 	str.w	r7, [r8]
 800bae6:	e00f      	b.n	800bb08 <_malloc_r+0xa8>
 800bae8:	6822      	ldr	r2, [r4, #0]
 800baea:	1b52      	subs	r2, r2, r5
 800baec:	d420      	bmi.n	800bb30 <_malloc_r+0xd0>
 800baee:	2a0b      	cmp	r2, #11
 800baf0:	d917      	bls.n	800bb22 <_malloc_r+0xc2>
 800baf2:	1961      	adds	r1, r4, r5
 800baf4:	42a3      	cmp	r3, r4
 800baf6:	6025      	str	r5, [r4, #0]
 800baf8:	bf18      	it	ne
 800bafa:	6059      	strne	r1, [r3, #4]
 800bafc:	6863      	ldr	r3, [r4, #4]
 800bafe:	bf08      	it	eq
 800bb00:	f8c8 1000 	streq.w	r1, [r8]
 800bb04:	5162      	str	r2, [r4, r5]
 800bb06:	604b      	str	r3, [r1, #4]
 800bb08:	4630      	mov	r0, r6
 800bb0a:	f000 f82f 	bl	800bb6c <__malloc_unlock>
 800bb0e:	f104 000b 	add.w	r0, r4, #11
 800bb12:	1d23      	adds	r3, r4, #4
 800bb14:	f020 0007 	bic.w	r0, r0, #7
 800bb18:	1ac2      	subs	r2, r0, r3
 800bb1a:	bf1c      	itt	ne
 800bb1c:	1a1b      	subne	r3, r3, r0
 800bb1e:	50a3      	strne	r3, [r4, r2]
 800bb20:	e7af      	b.n	800ba82 <_malloc_r+0x22>
 800bb22:	6862      	ldr	r2, [r4, #4]
 800bb24:	42a3      	cmp	r3, r4
 800bb26:	bf0c      	ite	eq
 800bb28:	f8c8 2000 	streq.w	r2, [r8]
 800bb2c:	605a      	strne	r2, [r3, #4]
 800bb2e:	e7eb      	b.n	800bb08 <_malloc_r+0xa8>
 800bb30:	4623      	mov	r3, r4
 800bb32:	6864      	ldr	r4, [r4, #4]
 800bb34:	e7ae      	b.n	800ba94 <_malloc_r+0x34>
 800bb36:	463c      	mov	r4, r7
 800bb38:	687f      	ldr	r7, [r7, #4]
 800bb3a:	e7b6      	b.n	800baaa <_malloc_r+0x4a>
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	42a3      	cmp	r3, r4
 800bb42:	d1fb      	bne.n	800bb3c <_malloc_r+0xdc>
 800bb44:	2300      	movs	r3, #0
 800bb46:	6053      	str	r3, [r2, #4]
 800bb48:	e7de      	b.n	800bb08 <_malloc_r+0xa8>
 800bb4a:	230c      	movs	r3, #12
 800bb4c:	6033      	str	r3, [r6, #0]
 800bb4e:	4630      	mov	r0, r6
 800bb50:	f000 f80c 	bl	800bb6c <__malloc_unlock>
 800bb54:	e794      	b.n	800ba80 <_malloc_r+0x20>
 800bb56:	6005      	str	r5, [r0, #0]
 800bb58:	e7d6      	b.n	800bb08 <_malloc_r+0xa8>
 800bb5a:	bf00      	nop
 800bb5c:	24004de4 	.word	0x24004de4

0800bb60 <__malloc_lock>:
 800bb60:	4801      	ldr	r0, [pc, #4]	@ (800bb68 <__malloc_lock+0x8>)
 800bb62:	f7ff bf00 	b.w	800b966 <__retarget_lock_acquire_recursive>
 800bb66:	bf00      	nop
 800bb68:	24004ddc 	.word	0x24004ddc

0800bb6c <__malloc_unlock>:
 800bb6c:	4801      	ldr	r0, [pc, #4]	@ (800bb74 <__malloc_unlock+0x8>)
 800bb6e:	f7ff befb 	b.w	800b968 <__retarget_lock_release_recursive>
 800bb72:	bf00      	nop
 800bb74:	24004ddc 	.word	0x24004ddc

0800bb78 <__sfputc_r>:
 800bb78:	6893      	ldr	r3, [r2, #8]
 800bb7a:	3b01      	subs	r3, #1
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	b410      	push	{r4}
 800bb80:	6093      	str	r3, [r2, #8]
 800bb82:	da08      	bge.n	800bb96 <__sfputc_r+0x1e>
 800bb84:	6994      	ldr	r4, [r2, #24]
 800bb86:	42a3      	cmp	r3, r4
 800bb88:	db01      	blt.n	800bb8e <__sfputc_r+0x16>
 800bb8a:	290a      	cmp	r1, #10
 800bb8c:	d103      	bne.n	800bb96 <__sfputc_r+0x1e>
 800bb8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb92:	f7ff bdda 	b.w	800b74a <__swbuf_r>
 800bb96:	6813      	ldr	r3, [r2, #0]
 800bb98:	1c58      	adds	r0, r3, #1
 800bb9a:	6010      	str	r0, [r2, #0]
 800bb9c:	7019      	strb	r1, [r3, #0]
 800bb9e:	4608      	mov	r0, r1
 800bba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bba4:	4770      	bx	lr

0800bba6 <__sfputs_r>:
 800bba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bba8:	4606      	mov	r6, r0
 800bbaa:	460f      	mov	r7, r1
 800bbac:	4614      	mov	r4, r2
 800bbae:	18d5      	adds	r5, r2, r3
 800bbb0:	42ac      	cmp	r4, r5
 800bbb2:	d101      	bne.n	800bbb8 <__sfputs_r+0x12>
 800bbb4:	2000      	movs	r0, #0
 800bbb6:	e007      	b.n	800bbc8 <__sfputs_r+0x22>
 800bbb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbbc:	463a      	mov	r2, r7
 800bbbe:	4630      	mov	r0, r6
 800bbc0:	f7ff ffda 	bl	800bb78 <__sfputc_r>
 800bbc4:	1c43      	adds	r3, r0, #1
 800bbc6:	d1f3      	bne.n	800bbb0 <__sfputs_r+0xa>
 800bbc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bbcc <_vfiprintf_r>:
 800bbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd0:	460d      	mov	r5, r1
 800bbd2:	b09d      	sub	sp, #116	@ 0x74
 800bbd4:	4614      	mov	r4, r2
 800bbd6:	4698      	mov	r8, r3
 800bbd8:	4606      	mov	r6, r0
 800bbda:	b118      	cbz	r0, 800bbe4 <_vfiprintf_r+0x18>
 800bbdc:	6a03      	ldr	r3, [r0, #32]
 800bbde:	b90b      	cbnz	r3, 800bbe4 <_vfiprintf_r+0x18>
 800bbe0:	f7ff fcca 	bl	800b578 <__sinit>
 800bbe4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbe6:	07d9      	lsls	r1, r3, #31
 800bbe8:	d405      	bmi.n	800bbf6 <_vfiprintf_r+0x2a>
 800bbea:	89ab      	ldrh	r3, [r5, #12]
 800bbec:	059a      	lsls	r2, r3, #22
 800bbee:	d402      	bmi.n	800bbf6 <_vfiprintf_r+0x2a>
 800bbf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbf2:	f7ff feb8 	bl	800b966 <__retarget_lock_acquire_recursive>
 800bbf6:	89ab      	ldrh	r3, [r5, #12]
 800bbf8:	071b      	lsls	r3, r3, #28
 800bbfa:	d501      	bpl.n	800bc00 <_vfiprintf_r+0x34>
 800bbfc:	692b      	ldr	r3, [r5, #16]
 800bbfe:	b99b      	cbnz	r3, 800bc28 <_vfiprintf_r+0x5c>
 800bc00:	4629      	mov	r1, r5
 800bc02:	4630      	mov	r0, r6
 800bc04:	f7ff fde0 	bl	800b7c8 <__swsetup_r>
 800bc08:	b170      	cbz	r0, 800bc28 <_vfiprintf_r+0x5c>
 800bc0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc0c:	07dc      	lsls	r4, r3, #31
 800bc0e:	d504      	bpl.n	800bc1a <_vfiprintf_r+0x4e>
 800bc10:	f04f 30ff 	mov.w	r0, #4294967295
 800bc14:	b01d      	add	sp, #116	@ 0x74
 800bc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc1a:	89ab      	ldrh	r3, [r5, #12]
 800bc1c:	0598      	lsls	r0, r3, #22
 800bc1e:	d4f7      	bmi.n	800bc10 <_vfiprintf_r+0x44>
 800bc20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc22:	f7ff fea1 	bl	800b968 <__retarget_lock_release_recursive>
 800bc26:	e7f3      	b.n	800bc10 <_vfiprintf_r+0x44>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc2c:	2320      	movs	r3, #32
 800bc2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc32:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc36:	2330      	movs	r3, #48	@ 0x30
 800bc38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bde8 <_vfiprintf_r+0x21c>
 800bc3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc40:	f04f 0901 	mov.w	r9, #1
 800bc44:	4623      	mov	r3, r4
 800bc46:	469a      	mov	sl, r3
 800bc48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc4c:	b10a      	cbz	r2, 800bc52 <_vfiprintf_r+0x86>
 800bc4e:	2a25      	cmp	r2, #37	@ 0x25
 800bc50:	d1f9      	bne.n	800bc46 <_vfiprintf_r+0x7a>
 800bc52:	ebba 0b04 	subs.w	fp, sl, r4
 800bc56:	d00b      	beq.n	800bc70 <_vfiprintf_r+0xa4>
 800bc58:	465b      	mov	r3, fp
 800bc5a:	4622      	mov	r2, r4
 800bc5c:	4629      	mov	r1, r5
 800bc5e:	4630      	mov	r0, r6
 800bc60:	f7ff ffa1 	bl	800bba6 <__sfputs_r>
 800bc64:	3001      	adds	r0, #1
 800bc66:	f000 80a7 	beq.w	800bdb8 <_vfiprintf_r+0x1ec>
 800bc6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc6c:	445a      	add	r2, fp
 800bc6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc70:	f89a 3000 	ldrb.w	r3, [sl]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f000 809f 	beq.w	800bdb8 <_vfiprintf_r+0x1ec>
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc84:	f10a 0a01 	add.w	sl, sl, #1
 800bc88:	9304      	str	r3, [sp, #16]
 800bc8a:	9307      	str	r3, [sp, #28]
 800bc8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc90:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc92:	4654      	mov	r4, sl
 800bc94:	2205      	movs	r2, #5
 800bc96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc9a:	4853      	ldr	r0, [pc, #332]	@ (800bde8 <_vfiprintf_r+0x21c>)
 800bc9c:	f7f4 fb20 	bl	80002e0 <memchr>
 800bca0:	9a04      	ldr	r2, [sp, #16]
 800bca2:	b9d8      	cbnz	r0, 800bcdc <_vfiprintf_r+0x110>
 800bca4:	06d1      	lsls	r1, r2, #27
 800bca6:	bf44      	itt	mi
 800bca8:	2320      	movmi	r3, #32
 800bcaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcae:	0713      	lsls	r3, r2, #28
 800bcb0:	bf44      	itt	mi
 800bcb2:	232b      	movmi	r3, #43	@ 0x2b
 800bcb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcb8:	f89a 3000 	ldrb.w	r3, [sl]
 800bcbc:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcbe:	d015      	beq.n	800bcec <_vfiprintf_r+0x120>
 800bcc0:	9a07      	ldr	r2, [sp, #28]
 800bcc2:	4654      	mov	r4, sl
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	f04f 0c0a 	mov.w	ip, #10
 800bcca:	4621      	mov	r1, r4
 800bccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcd0:	3b30      	subs	r3, #48	@ 0x30
 800bcd2:	2b09      	cmp	r3, #9
 800bcd4:	d94b      	bls.n	800bd6e <_vfiprintf_r+0x1a2>
 800bcd6:	b1b0      	cbz	r0, 800bd06 <_vfiprintf_r+0x13a>
 800bcd8:	9207      	str	r2, [sp, #28]
 800bcda:	e014      	b.n	800bd06 <_vfiprintf_r+0x13a>
 800bcdc:	eba0 0308 	sub.w	r3, r0, r8
 800bce0:	fa09 f303 	lsl.w	r3, r9, r3
 800bce4:	4313      	orrs	r3, r2
 800bce6:	9304      	str	r3, [sp, #16]
 800bce8:	46a2      	mov	sl, r4
 800bcea:	e7d2      	b.n	800bc92 <_vfiprintf_r+0xc6>
 800bcec:	9b03      	ldr	r3, [sp, #12]
 800bcee:	1d19      	adds	r1, r3, #4
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	9103      	str	r1, [sp, #12]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	bfbb      	ittet	lt
 800bcf8:	425b      	neglt	r3, r3
 800bcfa:	f042 0202 	orrlt.w	r2, r2, #2
 800bcfe:	9307      	strge	r3, [sp, #28]
 800bd00:	9307      	strlt	r3, [sp, #28]
 800bd02:	bfb8      	it	lt
 800bd04:	9204      	strlt	r2, [sp, #16]
 800bd06:	7823      	ldrb	r3, [r4, #0]
 800bd08:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd0a:	d10a      	bne.n	800bd22 <_vfiprintf_r+0x156>
 800bd0c:	7863      	ldrb	r3, [r4, #1]
 800bd0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd10:	d132      	bne.n	800bd78 <_vfiprintf_r+0x1ac>
 800bd12:	9b03      	ldr	r3, [sp, #12]
 800bd14:	1d1a      	adds	r2, r3, #4
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	9203      	str	r2, [sp, #12]
 800bd1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd1e:	3402      	adds	r4, #2
 800bd20:	9305      	str	r3, [sp, #20]
 800bd22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bdf8 <_vfiprintf_r+0x22c>
 800bd26:	7821      	ldrb	r1, [r4, #0]
 800bd28:	2203      	movs	r2, #3
 800bd2a:	4650      	mov	r0, sl
 800bd2c:	f7f4 fad8 	bl	80002e0 <memchr>
 800bd30:	b138      	cbz	r0, 800bd42 <_vfiprintf_r+0x176>
 800bd32:	9b04      	ldr	r3, [sp, #16]
 800bd34:	eba0 000a 	sub.w	r0, r0, sl
 800bd38:	2240      	movs	r2, #64	@ 0x40
 800bd3a:	4082      	lsls	r2, r0
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	3401      	adds	r4, #1
 800bd40:	9304      	str	r3, [sp, #16]
 800bd42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd46:	4829      	ldr	r0, [pc, #164]	@ (800bdec <_vfiprintf_r+0x220>)
 800bd48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd4c:	2206      	movs	r2, #6
 800bd4e:	f7f4 fac7 	bl	80002e0 <memchr>
 800bd52:	2800      	cmp	r0, #0
 800bd54:	d03f      	beq.n	800bdd6 <_vfiprintf_r+0x20a>
 800bd56:	4b26      	ldr	r3, [pc, #152]	@ (800bdf0 <_vfiprintf_r+0x224>)
 800bd58:	bb1b      	cbnz	r3, 800bda2 <_vfiprintf_r+0x1d6>
 800bd5a:	9b03      	ldr	r3, [sp, #12]
 800bd5c:	3307      	adds	r3, #7
 800bd5e:	f023 0307 	bic.w	r3, r3, #7
 800bd62:	3308      	adds	r3, #8
 800bd64:	9303      	str	r3, [sp, #12]
 800bd66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd68:	443b      	add	r3, r7
 800bd6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd6c:	e76a      	b.n	800bc44 <_vfiprintf_r+0x78>
 800bd6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd72:	460c      	mov	r4, r1
 800bd74:	2001      	movs	r0, #1
 800bd76:	e7a8      	b.n	800bcca <_vfiprintf_r+0xfe>
 800bd78:	2300      	movs	r3, #0
 800bd7a:	3401      	adds	r4, #1
 800bd7c:	9305      	str	r3, [sp, #20]
 800bd7e:	4619      	mov	r1, r3
 800bd80:	f04f 0c0a 	mov.w	ip, #10
 800bd84:	4620      	mov	r0, r4
 800bd86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd8a:	3a30      	subs	r2, #48	@ 0x30
 800bd8c:	2a09      	cmp	r2, #9
 800bd8e:	d903      	bls.n	800bd98 <_vfiprintf_r+0x1cc>
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d0c6      	beq.n	800bd22 <_vfiprintf_r+0x156>
 800bd94:	9105      	str	r1, [sp, #20]
 800bd96:	e7c4      	b.n	800bd22 <_vfiprintf_r+0x156>
 800bd98:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e7f0      	b.n	800bd84 <_vfiprintf_r+0x1b8>
 800bda2:	ab03      	add	r3, sp, #12
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	462a      	mov	r2, r5
 800bda8:	4b12      	ldr	r3, [pc, #72]	@ (800bdf4 <_vfiprintf_r+0x228>)
 800bdaa:	a904      	add	r1, sp, #16
 800bdac:	4630      	mov	r0, r6
 800bdae:	f3af 8000 	nop.w
 800bdb2:	4607      	mov	r7, r0
 800bdb4:	1c78      	adds	r0, r7, #1
 800bdb6:	d1d6      	bne.n	800bd66 <_vfiprintf_r+0x19a>
 800bdb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdba:	07d9      	lsls	r1, r3, #31
 800bdbc:	d405      	bmi.n	800bdca <_vfiprintf_r+0x1fe>
 800bdbe:	89ab      	ldrh	r3, [r5, #12]
 800bdc0:	059a      	lsls	r2, r3, #22
 800bdc2:	d402      	bmi.n	800bdca <_vfiprintf_r+0x1fe>
 800bdc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdc6:	f7ff fdcf 	bl	800b968 <__retarget_lock_release_recursive>
 800bdca:	89ab      	ldrh	r3, [r5, #12]
 800bdcc:	065b      	lsls	r3, r3, #25
 800bdce:	f53f af1f 	bmi.w	800bc10 <_vfiprintf_r+0x44>
 800bdd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bdd4:	e71e      	b.n	800bc14 <_vfiprintf_r+0x48>
 800bdd6:	ab03      	add	r3, sp, #12
 800bdd8:	9300      	str	r3, [sp, #0]
 800bdda:	462a      	mov	r2, r5
 800bddc:	4b05      	ldr	r3, [pc, #20]	@ (800bdf4 <_vfiprintf_r+0x228>)
 800bdde:	a904      	add	r1, sp, #16
 800bde0:	4630      	mov	r0, r6
 800bde2:	f000 f879 	bl	800bed8 <_printf_i>
 800bde6:	e7e4      	b.n	800bdb2 <_vfiprintf_r+0x1e6>
 800bde8:	0800e4c4 	.word	0x0800e4c4
 800bdec:	0800e4ce 	.word	0x0800e4ce
 800bdf0:	00000000 	.word	0x00000000
 800bdf4:	0800bba7 	.word	0x0800bba7
 800bdf8:	0800e4ca 	.word	0x0800e4ca

0800bdfc <_printf_common>:
 800bdfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be00:	4616      	mov	r6, r2
 800be02:	4698      	mov	r8, r3
 800be04:	688a      	ldr	r2, [r1, #8]
 800be06:	690b      	ldr	r3, [r1, #16]
 800be08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be0c:	4293      	cmp	r3, r2
 800be0e:	bfb8      	it	lt
 800be10:	4613      	movlt	r3, r2
 800be12:	6033      	str	r3, [r6, #0]
 800be14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be18:	4607      	mov	r7, r0
 800be1a:	460c      	mov	r4, r1
 800be1c:	b10a      	cbz	r2, 800be22 <_printf_common+0x26>
 800be1e:	3301      	adds	r3, #1
 800be20:	6033      	str	r3, [r6, #0]
 800be22:	6823      	ldr	r3, [r4, #0]
 800be24:	0699      	lsls	r1, r3, #26
 800be26:	bf42      	ittt	mi
 800be28:	6833      	ldrmi	r3, [r6, #0]
 800be2a:	3302      	addmi	r3, #2
 800be2c:	6033      	strmi	r3, [r6, #0]
 800be2e:	6825      	ldr	r5, [r4, #0]
 800be30:	f015 0506 	ands.w	r5, r5, #6
 800be34:	d106      	bne.n	800be44 <_printf_common+0x48>
 800be36:	f104 0a19 	add.w	sl, r4, #25
 800be3a:	68e3      	ldr	r3, [r4, #12]
 800be3c:	6832      	ldr	r2, [r6, #0]
 800be3e:	1a9b      	subs	r3, r3, r2
 800be40:	42ab      	cmp	r3, r5
 800be42:	dc26      	bgt.n	800be92 <_printf_common+0x96>
 800be44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800be48:	6822      	ldr	r2, [r4, #0]
 800be4a:	3b00      	subs	r3, #0
 800be4c:	bf18      	it	ne
 800be4e:	2301      	movne	r3, #1
 800be50:	0692      	lsls	r2, r2, #26
 800be52:	d42b      	bmi.n	800beac <_printf_common+0xb0>
 800be54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800be58:	4641      	mov	r1, r8
 800be5a:	4638      	mov	r0, r7
 800be5c:	47c8      	blx	r9
 800be5e:	3001      	adds	r0, #1
 800be60:	d01e      	beq.n	800bea0 <_printf_common+0xa4>
 800be62:	6823      	ldr	r3, [r4, #0]
 800be64:	6922      	ldr	r2, [r4, #16]
 800be66:	f003 0306 	and.w	r3, r3, #6
 800be6a:	2b04      	cmp	r3, #4
 800be6c:	bf02      	ittt	eq
 800be6e:	68e5      	ldreq	r5, [r4, #12]
 800be70:	6833      	ldreq	r3, [r6, #0]
 800be72:	1aed      	subeq	r5, r5, r3
 800be74:	68a3      	ldr	r3, [r4, #8]
 800be76:	bf0c      	ite	eq
 800be78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be7c:	2500      	movne	r5, #0
 800be7e:	4293      	cmp	r3, r2
 800be80:	bfc4      	itt	gt
 800be82:	1a9b      	subgt	r3, r3, r2
 800be84:	18ed      	addgt	r5, r5, r3
 800be86:	2600      	movs	r6, #0
 800be88:	341a      	adds	r4, #26
 800be8a:	42b5      	cmp	r5, r6
 800be8c:	d11a      	bne.n	800bec4 <_printf_common+0xc8>
 800be8e:	2000      	movs	r0, #0
 800be90:	e008      	b.n	800bea4 <_printf_common+0xa8>
 800be92:	2301      	movs	r3, #1
 800be94:	4652      	mov	r2, sl
 800be96:	4641      	mov	r1, r8
 800be98:	4638      	mov	r0, r7
 800be9a:	47c8      	blx	r9
 800be9c:	3001      	adds	r0, #1
 800be9e:	d103      	bne.n	800bea8 <_printf_common+0xac>
 800bea0:	f04f 30ff 	mov.w	r0, #4294967295
 800bea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bea8:	3501      	adds	r5, #1
 800beaa:	e7c6      	b.n	800be3a <_printf_common+0x3e>
 800beac:	18e1      	adds	r1, r4, r3
 800beae:	1c5a      	adds	r2, r3, #1
 800beb0:	2030      	movs	r0, #48	@ 0x30
 800beb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800beb6:	4422      	add	r2, r4
 800beb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bebc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bec0:	3302      	adds	r3, #2
 800bec2:	e7c7      	b.n	800be54 <_printf_common+0x58>
 800bec4:	2301      	movs	r3, #1
 800bec6:	4622      	mov	r2, r4
 800bec8:	4641      	mov	r1, r8
 800beca:	4638      	mov	r0, r7
 800becc:	47c8      	blx	r9
 800bece:	3001      	adds	r0, #1
 800bed0:	d0e6      	beq.n	800bea0 <_printf_common+0xa4>
 800bed2:	3601      	adds	r6, #1
 800bed4:	e7d9      	b.n	800be8a <_printf_common+0x8e>
	...

0800bed8 <_printf_i>:
 800bed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bedc:	7e0f      	ldrb	r7, [r1, #24]
 800bede:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bee0:	2f78      	cmp	r7, #120	@ 0x78
 800bee2:	4691      	mov	r9, r2
 800bee4:	4680      	mov	r8, r0
 800bee6:	460c      	mov	r4, r1
 800bee8:	469a      	mov	sl, r3
 800beea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800beee:	d807      	bhi.n	800bf00 <_printf_i+0x28>
 800bef0:	2f62      	cmp	r7, #98	@ 0x62
 800bef2:	d80a      	bhi.n	800bf0a <_printf_i+0x32>
 800bef4:	2f00      	cmp	r7, #0
 800bef6:	f000 80d1 	beq.w	800c09c <_printf_i+0x1c4>
 800befa:	2f58      	cmp	r7, #88	@ 0x58
 800befc:	f000 80b8 	beq.w	800c070 <_printf_i+0x198>
 800bf00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bf08:	e03a      	b.n	800bf80 <_printf_i+0xa8>
 800bf0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bf0e:	2b15      	cmp	r3, #21
 800bf10:	d8f6      	bhi.n	800bf00 <_printf_i+0x28>
 800bf12:	a101      	add	r1, pc, #4	@ (adr r1, 800bf18 <_printf_i+0x40>)
 800bf14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf18:	0800bf71 	.word	0x0800bf71
 800bf1c:	0800bf85 	.word	0x0800bf85
 800bf20:	0800bf01 	.word	0x0800bf01
 800bf24:	0800bf01 	.word	0x0800bf01
 800bf28:	0800bf01 	.word	0x0800bf01
 800bf2c:	0800bf01 	.word	0x0800bf01
 800bf30:	0800bf85 	.word	0x0800bf85
 800bf34:	0800bf01 	.word	0x0800bf01
 800bf38:	0800bf01 	.word	0x0800bf01
 800bf3c:	0800bf01 	.word	0x0800bf01
 800bf40:	0800bf01 	.word	0x0800bf01
 800bf44:	0800c083 	.word	0x0800c083
 800bf48:	0800bfaf 	.word	0x0800bfaf
 800bf4c:	0800c03d 	.word	0x0800c03d
 800bf50:	0800bf01 	.word	0x0800bf01
 800bf54:	0800bf01 	.word	0x0800bf01
 800bf58:	0800c0a5 	.word	0x0800c0a5
 800bf5c:	0800bf01 	.word	0x0800bf01
 800bf60:	0800bfaf 	.word	0x0800bfaf
 800bf64:	0800bf01 	.word	0x0800bf01
 800bf68:	0800bf01 	.word	0x0800bf01
 800bf6c:	0800c045 	.word	0x0800c045
 800bf70:	6833      	ldr	r3, [r6, #0]
 800bf72:	1d1a      	adds	r2, r3, #4
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	6032      	str	r2, [r6, #0]
 800bf78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bf80:	2301      	movs	r3, #1
 800bf82:	e09c      	b.n	800c0be <_printf_i+0x1e6>
 800bf84:	6833      	ldr	r3, [r6, #0]
 800bf86:	6820      	ldr	r0, [r4, #0]
 800bf88:	1d19      	adds	r1, r3, #4
 800bf8a:	6031      	str	r1, [r6, #0]
 800bf8c:	0606      	lsls	r6, r0, #24
 800bf8e:	d501      	bpl.n	800bf94 <_printf_i+0xbc>
 800bf90:	681d      	ldr	r5, [r3, #0]
 800bf92:	e003      	b.n	800bf9c <_printf_i+0xc4>
 800bf94:	0645      	lsls	r5, r0, #25
 800bf96:	d5fb      	bpl.n	800bf90 <_printf_i+0xb8>
 800bf98:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bf9c:	2d00      	cmp	r5, #0
 800bf9e:	da03      	bge.n	800bfa8 <_printf_i+0xd0>
 800bfa0:	232d      	movs	r3, #45	@ 0x2d
 800bfa2:	426d      	negs	r5, r5
 800bfa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfa8:	4858      	ldr	r0, [pc, #352]	@ (800c10c <_printf_i+0x234>)
 800bfaa:	230a      	movs	r3, #10
 800bfac:	e011      	b.n	800bfd2 <_printf_i+0xfa>
 800bfae:	6821      	ldr	r1, [r4, #0]
 800bfb0:	6833      	ldr	r3, [r6, #0]
 800bfb2:	0608      	lsls	r0, r1, #24
 800bfb4:	f853 5b04 	ldr.w	r5, [r3], #4
 800bfb8:	d402      	bmi.n	800bfc0 <_printf_i+0xe8>
 800bfba:	0649      	lsls	r1, r1, #25
 800bfbc:	bf48      	it	mi
 800bfbe:	b2ad      	uxthmi	r5, r5
 800bfc0:	2f6f      	cmp	r7, #111	@ 0x6f
 800bfc2:	4852      	ldr	r0, [pc, #328]	@ (800c10c <_printf_i+0x234>)
 800bfc4:	6033      	str	r3, [r6, #0]
 800bfc6:	bf14      	ite	ne
 800bfc8:	230a      	movne	r3, #10
 800bfca:	2308      	moveq	r3, #8
 800bfcc:	2100      	movs	r1, #0
 800bfce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bfd2:	6866      	ldr	r6, [r4, #4]
 800bfd4:	60a6      	str	r6, [r4, #8]
 800bfd6:	2e00      	cmp	r6, #0
 800bfd8:	db05      	blt.n	800bfe6 <_printf_i+0x10e>
 800bfda:	6821      	ldr	r1, [r4, #0]
 800bfdc:	432e      	orrs	r6, r5
 800bfde:	f021 0104 	bic.w	r1, r1, #4
 800bfe2:	6021      	str	r1, [r4, #0]
 800bfe4:	d04b      	beq.n	800c07e <_printf_i+0x1a6>
 800bfe6:	4616      	mov	r6, r2
 800bfe8:	fbb5 f1f3 	udiv	r1, r5, r3
 800bfec:	fb03 5711 	mls	r7, r3, r1, r5
 800bff0:	5dc7      	ldrb	r7, [r0, r7]
 800bff2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bff6:	462f      	mov	r7, r5
 800bff8:	42bb      	cmp	r3, r7
 800bffa:	460d      	mov	r5, r1
 800bffc:	d9f4      	bls.n	800bfe8 <_printf_i+0x110>
 800bffe:	2b08      	cmp	r3, #8
 800c000:	d10b      	bne.n	800c01a <_printf_i+0x142>
 800c002:	6823      	ldr	r3, [r4, #0]
 800c004:	07df      	lsls	r7, r3, #31
 800c006:	d508      	bpl.n	800c01a <_printf_i+0x142>
 800c008:	6923      	ldr	r3, [r4, #16]
 800c00a:	6861      	ldr	r1, [r4, #4]
 800c00c:	4299      	cmp	r1, r3
 800c00e:	bfde      	ittt	le
 800c010:	2330      	movle	r3, #48	@ 0x30
 800c012:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c016:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c01a:	1b92      	subs	r2, r2, r6
 800c01c:	6122      	str	r2, [r4, #16]
 800c01e:	f8cd a000 	str.w	sl, [sp]
 800c022:	464b      	mov	r3, r9
 800c024:	aa03      	add	r2, sp, #12
 800c026:	4621      	mov	r1, r4
 800c028:	4640      	mov	r0, r8
 800c02a:	f7ff fee7 	bl	800bdfc <_printf_common>
 800c02e:	3001      	adds	r0, #1
 800c030:	d14a      	bne.n	800c0c8 <_printf_i+0x1f0>
 800c032:	f04f 30ff 	mov.w	r0, #4294967295
 800c036:	b004      	add	sp, #16
 800c038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c03c:	6823      	ldr	r3, [r4, #0]
 800c03e:	f043 0320 	orr.w	r3, r3, #32
 800c042:	6023      	str	r3, [r4, #0]
 800c044:	4832      	ldr	r0, [pc, #200]	@ (800c110 <_printf_i+0x238>)
 800c046:	2778      	movs	r7, #120	@ 0x78
 800c048:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c04c:	6823      	ldr	r3, [r4, #0]
 800c04e:	6831      	ldr	r1, [r6, #0]
 800c050:	061f      	lsls	r7, r3, #24
 800c052:	f851 5b04 	ldr.w	r5, [r1], #4
 800c056:	d402      	bmi.n	800c05e <_printf_i+0x186>
 800c058:	065f      	lsls	r7, r3, #25
 800c05a:	bf48      	it	mi
 800c05c:	b2ad      	uxthmi	r5, r5
 800c05e:	6031      	str	r1, [r6, #0]
 800c060:	07d9      	lsls	r1, r3, #31
 800c062:	bf44      	itt	mi
 800c064:	f043 0320 	orrmi.w	r3, r3, #32
 800c068:	6023      	strmi	r3, [r4, #0]
 800c06a:	b11d      	cbz	r5, 800c074 <_printf_i+0x19c>
 800c06c:	2310      	movs	r3, #16
 800c06e:	e7ad      	b.n	800bfcc <_printf_i+0xf4>
 800c070:	4826      	ldr	r0, [pc, #152]	@ (800c10c <_printf_i+0x234>)
 800c072:	e7e9      	b.n	800c048 <_printf_i+0x170>
 800c074:	6823      	ldr	r3, [r4, #0]
 800c076:	f023 0320 	bic.w	r3, r3, #32
 800c07a:	6023      	str	r3, [r4, #0]
 800c07c:	e7f6      	b.n	800c06c <_printf_i+0x194>
 800c07e:	4616      	mov	r6, r2
 800c080:	e7bd      	b.n	800bffe <_printf_i+0x126>
 800c082:	6833      	ldr	r3, [r6, #0]
 800c084:	6825      	ldr	r5, [r4, #0]
 800c086:	6961      	ldr	r1, [r4, #20]
 800c088:	1d18      	adds	r0, r3, #4
 800c08a:	6030      	str	r0, [r6, #0]
 800c08c:	062e      	lsls	r6, r5, #24
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	d501      	bpl.n	800c096 <_printf_i+0x1be>
 800c092:	6019      	str	r1, [r3, #0]
 800c094:	e002      	b.n	800c09c <_printf_i+0x1c4>
 800c096:	0668      	lsls	r0, r5, #25
 800c098:	d5fb      	bpl.n	800c092 <_printf_i+0x1ba>
 800c09a:	8019      	strh	r1, [r3, #0]
 800c09c:	2300      	movs	r3, #0
 800c09e:	6123      	str	r3, [r4, #16]
 800c0a0:	4616      	mov	r6, r2
 800c0a2:	e7bc      	b.n	800c01e <_printf_i+0x146>
 800c0a4:	6833      	ldr	r3, [r6, #0]
 800c0a6:	1d1a      	adds	r2, r3, #4
 800c0a8:	6032      	str	r2, [r6, #0]
 800c0aa:	681e      	ldr	r6, [r3, #0]
 800c0ac:	6862      	ldr	r2, [r4, #4]
 800c0ae:	2100      	movs	r1, #0
 800c0b0:	4630      	mov	r0, r6
 800c0b2:	f7f4 f915 	bl	80002e0 <memchr>
 800c0b6:	b108      	cbz	r0, 800c0bc <_printf_i+0x1e4>
 800c0b8:	1b80      	subs	r0, r0, r6
 800c0ba:	6060      	str	r0, [r4, #4]
 800c0bc:	6863      	ldr	r3, [r4, #4]
 800c0be:	6123      	str	r3, [r4, #16]
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0c6:	e7aa      	b.n	800c01e <_printf_i+0x146>
 800c0c8:	6923      	ldr	r3, [r4, #16]
 800c0ca:	4632      	mov	r2, r6
 800c0cc:	4649      	mov	r1, r9
 800c0ce:	4640      	mov	r0, r8
 800c0d0:	47d0      	blx	sl
 800c0d2:	3001      	adds	r0, #1
 800c0d4:	d0ad      	beq.n	800c032 <_printf_i+0x15a>
 800c0d6:	6823      	ldr	r3, [r4, #0]
 800c0d8:	079b      	lsls	r3, r3, #30
 800c0da:	d413      	bmi.n	800c104 <_printf_i+0x22c>
 800c0dc:	68e0      	ldr	r0, [r4, #12]
 800c0de:	9b03      	ldr	r3, [sp, #12]
 800c0e0:	4298      	cmp	r0, r3
 800c0e2:	bfb8      	it	lt
 800c0e4:	4618      	movlt	r0, r3
 800c0e6:	e7a6      	b.n	800c036 <_printf_i+0x15e>
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	4632      	mov	r2, r6
 800c0ec:	4649      	mov	r1, r9
 800c0ee:	4640      	mov	r0, r8
 800c0f0:	47d0      	blx	sl
 800c0f2:	3001      	adds	r0, #1
 800c0f4:	d09d      	beq.n	800c032 <_printf_i+0x15a>
 800c0f6:	3501      	adds	r5, #1
 800c0f8:	68e3      	ldr	r3, [r4, #12]
 800c0fa:	9903      	ldr	r1, [sp, #12]
 800c0fc:	1a5b      	subs	r3, r3, r1
 800c0fe:	42ab      	cmp	r3, r5
 800c100:	dcf2      	bgt.n	800c0e8 <_printf_i+0x210>
 800c102:	e7eb      	b.n	800c0dc <_printf_i+0x204>
 800c104:	2500      	movs	r5, #0
 800c106:	f104 0619 	add.w	r6, r4, #25
 800c10a:	e7f5      	b.n	800c0f8 <_printf_i+0x220>
 800c10c:	0800e4d5 	.word	0x0800e4d5
 800c110:	0800e4e6 	.word	0x0800e4e6

0800c114 <__sflush_r>:
 800c114:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c11c:	0716      	lsls	r6, r2, #28
 800c11e:	4605      	mov	r5, r0
 800c120:	460c      	mov	r4, r1
 800c122:	d454      	bmi.n	800c1ce <__sflush_r+0xba>
 800c124:	684b      	ldr	r3, [r1, #4]
 800c126:	2b00      	cmp	r3, #0
 800c128:	dc02      	bgt.n	800c130 <__sflush_r+0x1c>
 800c12a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	dd48      	ble.n	800c1c2 <__sflush_r+0xae>
 800c130:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c132:	2e00      	cmp	r6, #0
 800c134:	d045      	beq.n	800c1c2 <__sflush_r+0xae>
 800c136:	2300      	movs	r3, #0
 800c138:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c13c:	682f      	ldr	r7, [r5, #0]
 800c13e:	6a21      	ldr	r1, [r4, #32]
 800c140:	602b      	str	r3, [r5, #0]
 800c142:	d030      	beq.n	800c1a6 <__sflush_r+0x92>
 800c144:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c146:	89a3      	ldrh	r3, [r4, #12]
 800c148:	0759      	lsls	r1, r3, #29
 800c14a:	d505      	bpl.n	800c158 <__sflush_r+0x44>
 800c14c:	6863      	ldr	r3, [r4, #4]
 800c14e:	1ad2      	subs	r2, r2, r3
 800c150:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c152:	b10b      	cbz	r3, 800c158 <__sflush_r+0x44>
 800c154:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c156:	1ad2      	subs	r2, r2, r3
 800c158:	2300      	movs	r3, #0
 800c15a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c15c:	6a21      	ldr	r1, [r4, #32]
 800c15e:	4628      	mov	r0, r5
 800c160:	47b0      	blx	r6
 800c162:	1c43      	adds	r3, r0, #1
 800c164:	89a3      	ldrh	r3, [r4, #12]
 800c166:	d106      	bne.n	800c176 <__sflush_r+0x62>
 800c168:	6829      	ldr	r1, [r5, #0]
 800c16a:	291d      	cmp	r1, #29
 800c16c:	d82b      	bhi.n	800c1c6 <__sflush_r+0xb2>
 800c16e:	4a2a      	ldr	r2, [pc, #168]	@ (800c218 <__sflush_r+0x104>)
 800c170:	40ca      	lsrs	r2, r1
 800c172:	07d6      	lsls	r6, r2, #31
 800c174:	d527      	bpl.n	800c1c6 <__sflush_r+0xb2>
 800c176:	2200      	movs	r2, #0
 800c178:	6062      	str	r2, [r4, #4]
 800c17a:	04d9      	lsls	r1, r3, #19
 800c17c:	6922      	ldr	r2, [r4, #16]
 800c17e:	6022      	str	r2, [r4, #0]
 800c180:	d504      	bpl.n	800c18c <__sflush_r+0x78>
 800c182:	1c42      	adds	r2, r0, #1
 800c184:	d101      	bne.n	800c18a <__sflush_r+0x76>
 800c186:	682b      	ldr	r3, [r5, #0]
 800c188:	b903      	cbnz	r3, 800c18c <__sflush_r+0x78>
 800c18a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c18c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c18e:	602f      	str	r7, [r5, #0]
 800c190:	b1b9      	cbz	r1, 800c1c2 <__sflush_r+0xae>
 800c192:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c196:	4299      	cmp	r1, r3
 800c198:	d002      	beq.n	800c1a0 <__sflush_r+0x8c>
 800c19a:	4628      	mov	r0, r5
 800c19c:	f7ff fbf4 	bl	800b988 <_free_r>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c1a4:	e00d      	b.n	800c1c2 <__sflush_r+0xae>
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	4628      	mov	r0, r5
 800c1aa:	47b0      	blx	r6
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	1c50      	adds	r0, r2, #1
 800c1b0:	d1c9      	bne.n	800c146 <__sflush_r+0x32>
 800c1b2:	682b      	ldr	r3, [r5, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d0c6      	beq.n	800c146 <__sflush_r+0x32>
 800c1b8:	2b1d      	cmp	r3, #29
 800c1ba:	d001      	beq.n	800c1c0 <__sflush_r+0xac>
 800c1bc:	2b16      	cmp	r3, #22
 800c1be:	d11e      	bne.n	800c1fe <__sflush_r+0xea>
 800c1c0:	602f      	str	r7, [r5, #0]
 800c1c2:	2000      	movs	r0, #0
 800c1c4:	e022      	b.n	800c20c <__sflush_r+0xf8>
 800c1c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1ca:	b21b      	sxth	r3, r3
 800c1cc:	e01b      	b.n	800c206 <__sflush_r+0xf2>
 800c1ce:	690f      	ldr	r7, [r1, #16]
 800c1d0:	2f00      	cmp	r7, #0
 800c1d2:	d0f6      	beq.n	800c1c2 <__sflush_r+0xae>
 800c1d4:	0793      	lsls	r3, r2, #30
 800c1d6:	680e      	ldr	r6, [r1, #0]
 800c1d8:	bf08      	it	eq
 800c1da:	694b      	ldreq	r3, [r1, #20]
 800c1dc:	600f      	str	r7, [r1, #0]
 800c1de:	bf18      	it	ne
 800c1e0:	2300      	movne	r3, #0
 800c1e2:	eba6 0807 	sub.w	r8, r6, r7
 800c1e6:	608b      	str	r3, [r1, #8]
 800c1e8:	f1b8 0f00 	cmp.w	r8, #0
 800c1ec:	dde9      	ble.n	800c1c2 <__sflush_r+0xae>
 800c1ee:	6a21      	ldr	r1, [r4, #32]
 800c1f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c1f2:	4643      	mov	r3, r8
 800c1f4:	463a      	mov	r2, r7
 800c1f6:	4628      	mov	r0, r5
 800c1f8:	47b0      	blx	r6
 800c1fa:	2800      	cmp	r0, #0
 800c1fc:	dc08      	bgt.n	800c210 <__sflush_r+0xfc>
 800c1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c206:	81a3      	strh	r3, [r4, #12]
 800c208:	f04f 30ff 	mov.w	r0, #4294967295
 800c20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c210:	4407      	add	r7, r0
 800c212:	eba8 0800 	sub.w	r8, r8, r0
 800c216:	e7e7      	b.n	800c1e8 <__sflush_r+0xd4>
 800c218:	20400001 	.word	0x20400001

0800c21c <_fflush_r>:
 800c21c:	b538      	push	{r3, r4, r5, lr}
 800c21e:	690b      	ldr	r3, [r1, #16]
 800c220:	4605      	mov	r5, r0
 800c222:	460c      	mov	r4, r1
 800c224:	b913      	cbnz	r3, 800c22c <_fflush_r+0x10>
 800c226:	2500      	movs	r5, #0
 800c228:	4628      	mov	r0, r5
 800c22a:	bd38      	pop	{r3, r4, r5, pc}
 800c22c:	b118      	cbz	r0, 800c236 <_fflush_r+0x1a>
 800c22e:	6a03      	ldr	r3, [r0, #32]
 800c230:	b90b      	cbnz	r3, 800c236 <_fflush_r+0x1a>
 800c232:	f7ff f9a1 	bl	800b578 <__sinit>
 800c236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d0f3      	beq.n	800c226 <_fflush_r+0xa>
 800c23e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c240:	07d0      	lsls	r0, r2, #31
 800c242:	d404      	bmi.n	800c24e <_fflush_r+0x32>
 800c244:	0599      	lsls	r1, r3, #22
 800c246:	d402      	bmi.n	800c24e <_fflush_r+0x32>
 800c248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c24a:	f7ff fb8c 	bl	800b966 <__retarget_lock_acquire_recursive>
 800c24e:	4628      	mov	r0, r5
 800c250:	4621      	mov	r1, r4
 800c252:	f7ff ff5f 	bl	800c114 <__sflush_r>
 800c256:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c258:	07da      	lsls	r2, r3, #31
 800c25a:	4605      	mov	r5, r0
 800c25c:	d4e4      	bmi.n	800c228 <_fflush_r+0xc>
 800c25e:	89a3      	ldrh	r3, [r4, #12]
 800c260:	059b      	lsls	r3, r3, #22
 800c262:	d4e1      	bmi.n	800c228 <_fflush_r+0xc>
 800c264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c266:	f7ff fb7f 	bl	800b968 <__retarget_lock_release_recursive>
 800c26a:	e7dd      	b.n	800c228 <_fflush_r+0xc>

0800c26c <__swhatbuf_r>:
 800c26c:	b570      	push	{r4, r5, r6, lr}
 800c26e:	460c      	mov	r4, r1
 800c270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c274:	2900      	cmp	r1, #0
 800c276:	b096      	sub	sp, #88	@ 0x58
 800c278:	4615      	mov	r5, r2
 800c27a:	461e      	mov	r6, r3
 800c27c:	da0d      	bge.n	800c29a <__swhatbuf_r+0x2e>
 800c27e:	89a3      	ldrh	r3, [r4, #12]
 800c280:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c284:	f04f 0100 	mov.w	r1, #0
 800c288:	bf14      	ite	ne
 800c28a:	2340      	movne	r3, #64	@ 0x40
 800c28c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c290:	2000      	movs	r0, #0
 800c292:	6031      	str	r1, [r6, #0]
 800c294:	602b      	str	r3, [r5, #0]
 800c296:	b016      	add	sp, #88	@ 0x58
 800c298:	bd70      	pop	{r4, r5, r6, pc}
 800c29a:	466a      	mov	r2, sp
 800c29c:	f000 f848 	bl	800c330 <_fstat_r>
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	dbec      	blt.n	800c27e <__swhatbuf_r+0x12>
 800c2a4:	9901      	ldr	r1, [sp, #4]
 800c2a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c2aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c2ae:	4259      	negs	r1, r3
 800c2b0:	4159      	adcs	r1, r3
 800c2b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c2b6:	e7eb      	b.n	800c290 <__swhatbuf_r+0x24>

0800c2b8 <__smakebuf_r>:
 800c2b8:	898b      	ldrh	r3, [r1, #12]
 800c2ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2bc:	079d      	lsls	r5, r3, #30
 800c2be:	4606      	mov	r6, r0
 800c2c0:	460c      	mov	r4, r1
 800c2c2:	d507      	bpl.n	800c2d4 <__smakebuf_r+0x1c>
 800c2c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c2c8:	6023      	str	r3, [r4, #0]
 800c2ca:	6123      	str	r3, [r4, #16]
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	6163      	str	r3, [r4, #20]
 800c2d0:	b003      	add	sp, #12
 800c2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2d4:	ab01      	add	r3, sp, #4
 800c2d6:	466a      	mov	r2, sp
 800c2d8:	f7ff ffc8 	bl	800c26c <__swhatbuf_r>
 800c2dc:	9f00      	ldr	r7, [sp, #0]
 800c2de:	4605      	mov	r5, r0
 800c2e0:	4639      	mov	r1, r7
 800c2e2:	4630      	mov	r0, r6
 800c2e4:	f7ff fbbc 	bl	800ba60 <_malloc_r>
 800c2e8:	b948      	cbnz	r0, 800c2fe <__smakebuf_r+0x46>
 800c2ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2ee:	059a      	lsls	r2, r3, #22
 800c2f0:	d4ee      	bmi.n	800c2d0 <__smakebuf_r+0x18>
 800c2f2:	f023 0303 	bic.w	r3, r3, #3
 800c2f6:	f043 0302 	orr.w	r3, r3, #2
 800c2fa:	81a3      	strh	r3, [r4, #12]
 800c2fc:	e7e2      	b.n	800c2c4 <__smakebuf_r+0xc>
 800c2fe:	89a3      	ldrh	r3, [r4, #12]
 800c300:	6020      	str	r0, [r4, #0]
 800c302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c306:	81a3      	strh	r3, [r4, #12]
 800c308:	9b01      	ldr	r3, [sp, #4]
 800c30a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c30e:	b15b      	cbz	r3, 800c328 <__smakebuf_r+0x70>
 800c310:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c314:	4630      	mov	r0, r6
 800c316:	f000 f81d 	bl	800c354 <_isatty_r>
 800c31a:	b128      	cbz	r0, 800c328 <__smakebuf_r+0x70>
 800c31c:	89a3      	ldrh	r3, [r4, #12]
 800c31e:	f023 0303 	bic.w	r3, r3, #3
 800c322:	f043 0301 	orr.w	r3, r3, #1
 800c326:	81a3      	strh	r3, [r4, #12]
 800c328:	89a3      	ldrh	r3, [r4, #12]
 800c32a:	431d      	orrs	r5, r3
 800c32c:	81a5      	strh	r5, [r4, #12]
 800c32e:	e7cf      	b.n	800c2d0 <__smakebuf_r+0x18>

0800c330 <_fstat_r>:
 800c330:	b538      	push	{r3, r4, r5, lr}
 800c332:	4d07      	ldr	r5, [pc, #28]	@ (800c350 <_fstat_r+0x20>)
 800c334:	2300      	movs	r3, #0
 800c336:	4604      	mov	r4, r0
 800c338:	4608      	mov	r0, r1
 800c33a:	4611      	mov	r1, r2
 800c33c:	602b      	str	r3, [r5, #0]
 800c33e:	f7f5 fe0e 	bl	8001f5e <_fstat>
 800c342:	1c43      	adds	r3, r0, #1
 800c344:	d102      	bne.n	800c34c <_fstat_r+0x1c>
 800c346:	682b      	ldr	r3, [r5, #0]
 800c348:	b103      	cbz	r3, 800c34c <_fstat_r+0x1c>
 800c34a:	6023      	str	r3, [r4, #0]
 800c34c:	bd38      	pop	{r3, r4, r5, pc}
 800c34e:	bf00      	nop
 800c350:	24004dd8 	.word	0x24004dd8

0800c354 <_isatty_r>:
 800c354:	b538      	push	{r3, r4, r5, lr}
 800c356:	4d06      	ldr	r5, [pc, #24]	@ (800c370 <_isatty_r+0x1c>)
 800c358:	2300      	movs	r3, #0
 800c35a:	4604      	mov	r4, r0
 800c35c:	4608      	mov	r0, r1
 800c35e:	602b      	str	r3, [r5, #0]
 800c360:	f7f5 fe0d 	bl	8001f7e <_isatty>
 800c364:	1c43      	adds	r3, r0, #1
 800c366:	d102      	bne.n	800c36e <_isatty_r+0x1a>
 800c368:	682b      	ldr	r3, [r5, #0]
 800c36a:	b103      	cbz	r3, 800c36e <_isatty_r+0x1a>
 800c36c:	6023      	str	r3, [r4, #0]
 800c36e:	bd38      	pop	{r3, r4, r5, pc}
 800c370:	24004dd8 	.word	0x24004dd8

0800c374 <_sbrk_r>:
 800c374:	b538      	push	{r3, r4, r5, lr}
 800c376:	4d06      	ldr	r5, [pc, #24]	@ (800c390 <_sbrk_r+0x1c>)
 800c378:	2300      	movs	r3, #0
 800c37a:	4604      	mov	r4, r0
 800c37c:	4608      	mov	r0, r1
 800c37e:	602b      	str	r3, [r5, #0]
 800c380:	f7f5 fe16 	bl	8001fb0 <_sbrk>
 800c384:	1c43      	adds	r3, r0, #1
 800c386:	d102      	bne.n	800c38e <_sbrk_r+0x1a>
 800c388:	682b      	ldr	r3, [r5, #0]
 800c38a:	b103      	cbz	r3, 800c38e <_sbrk_r+0x1a>
 800c38c:	6023      	str	r3, [r4, #0]
 800c38e:	bd38      	pop	{r3, r4, r5, pc}
 800c390:	24004dd8 	.word	0x24004dd8

0800c394 <_init>:
 800c394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c396:	bf00      	nop
 800c398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c39a:	bc08      	pop	{r3}
 800c39c:	469e      	mov	lr, r3
 800c39e:	4770      	bx	lr

0800c3a0 <_fini>:
 800c3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3a2:	bf00      	nop
 800c3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3a6:	bc08      	pop	{r3}
 800c3a8:	469e      	mov	lr, r3
 800c3aa:	4770      	bx	lr
