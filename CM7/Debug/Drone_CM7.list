
Drone_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008310  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080085b0  080085b0  000095b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008600  08008600  0000a014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008600  08008600  00009600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008608  08008608  0000a014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008608  08008608  00009608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800860c  0800860c  0000960c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  24000000  08008610  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042b8  24000014  08008624  0000a014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240042cc  08008624  0000a2cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c6f7  00000000  00000000  0000a042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d09  00000000  00000000  00026739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001720  00000000  00000000  0002a448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011eb  00000000  00000000  0002bb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000485b  00000000  00000000  0002cd53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d75d  00000000  00000000  000315ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001aa5ac  00000000  00000000  0004ed0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f92b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060c4  00000000  00000000  001f92fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  001ff3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008598 	.word	0x08008598

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	08008598 	.word	0x08008598

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <LoggerInit>:
  }
  return ch;
}

int8_t LoggerInit(UART_HandleTypeDef *pUART_)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  if(HAL_GetCurrentCPUID() != CM7_CPUID || pUART_ == NULL) 
 8000614:	f000 ff12 	bl	800143c <HAL_GetCurrentCPUID>
 8000618:	4603      	mov	r3, r0
 800061a:	2b03      	cmp	r3, #3
 800061c:	d102      	bne.n	8000624 <LoggerInit+0x18>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d105      	bne.n	8000630 <LoggerInit+0x24>
  {
    pUART = NULL;
 8000624:	4b10      	ldr	r3, [pc, #64]	@ (8000668 <LoggerInit+0x5c>)
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
    return -1;
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	e017      	b.n	8000660 <LoggerInit+0x54>
  }

  pCM4RingBuf = RingBuffCreate((void*)MEM_SHARED_CM4_UART_RINGBUFF_START, MEM_SHARED_CM4_UART_RINGBUFF_TOTAL_LEN);
 8000630:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000634:	480d      	ldr	r0, [pc, #52]	@ (800066c <LoggerInit+0x60>)
 8000636:	f000 f921 	bl	800087c <RingBuffCreate>
 800063a:	4603      	mov	r3, r0
 800063c:	4a0c      	ldr	r2, [pc, #48]	@ (8000670 <LoggerInit+0x64>)
 800063e:	6013      	str	r3, [r2, #0]
  pCM7RingBuf = RingBuffCreate((void*)MEM_SHARED_CM7_UART_RINGBUFF_START, MEM_SHARED_CM7_UART_RINGBUFF_TOTAL_LEN);
 8000640:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000644:	480b      	ldr	r0, [pc, #44]	@ (8000674 <LoggerInit+0x68>)
 8000646:	f000 f919 	bl	800087c <RingBuffCreate>
 800064a:	4603      	mov	r3, r0
 800064c:	4a0a      	ldr	r2, [pc, #40]	@ (8000678 <LoggerInit+0x6c>)
 800064e:	6013      	str	r3, [r2, #0]
  pUART = pUART_;
 8000650:	4a05      	ldr	r2, [pc, #20]	@ (8000668 <LoggerInit+0x5c>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6013      	str	r3, [r2, #0]
  SyncRegisterHandler(SyncUARTTaskHandler, SYNC_TASKID_UART_OUT);
 8000656:	2100      	movs	r1, #0
 8000658:	4808      	ldr	r0, [pc, #32]	@ (800067c <LoggerInit+0x70>)
 800065a:	f000 fa93 	bl	8000b84 <SyncRegisterHandler>

  return 0;
 800065e:	2300      	movs	r3, #0
}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	24000038 	.word	0x24000038
 800066c:	38000008 	.word	0x38000008
 8000670:	24000030 	.word	0x24000030
 8000674:	38000128 	.word	0x38000128
 8000678:	24000034 	.word	0x24000034
 800067c:	080006d1 	.word	0x080006d1

08000680 <LoggerWriteToUART>:

static int8_t LoggerWriteToUART(RingBuff volatile *pRingBuf)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  uint32_t len = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  void *pBufToTransmit = NULL;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]

  send:
  len = RingBuffGetLinearBlockReadLength(pRingBuf);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 f991 	bl	80009b8 <RingBuffGetLinearBlockReadLength>
 8000696:	60f8      	str	r0, [r7, #12]
  if(len > 0)
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d011      	beq.n	80006c2 <LoggerWriteToUART+0x42>
  {
    pBufToTransmit = RingBuffGetLinearBlockReadAddress(pRingBuf);
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f960 	bl	8000964 <RingBuffGetLinearBlockReadAddress>
 80006a4:	60b8      	str	r0, [r7, #8]
    HAL_UART_Transmit(pUART, pBufToTransmit, len, 1000);
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <LoggerWriteToUART+0x4c>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006b2:	68b9      	ldr	r1, [r7, #8]
 80006b4:	f004 fb22 	bl	8004cfc <HAL_UART_Transmit>
    RingBuffSkip(pRingBuf, len);
 80006b8:	68f9      	ldr	r1, [r7, #12]
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f000 f9be 	bl	8000a3c <RingBuffSkip>
    /* Check for anything in the overflow buffer */
    goto send;
 80006c0:	e7e6      	b.n	8000690 <LoggerWriteToUART+0x10>
  }
  return 0;
 80006c2:	2300      	movs	r3, #0
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	24000038 	.word	0x24000038

080006d0 <SyncUARTTaskHandler>:

static void SyncUARTTaskHandler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 80006d4:	f000 feb2 	bl	800143c <HAL_GetCurrentCPUID>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d104      	bne.n	80006e8 <SyncUARTTaskHandler+0x18>
  {
    LoggerWriteToUART(pCM4RingBuf);
 80006de:	4b03      	ldr	r3, [pc, #12]	@ (80006ec <SyncUARTTaskHandler+0x1c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ffcc 	bl	8000680 <LoggerWriteToUART>
  }
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	24000030 	.word	0x24000030

080006f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006f4:	4b49      	ldr	r3, [pc, #292]	@ (800081c <SystemInit+0x12c>)
 80006f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006fa:	4a48      	ldr	r2, [pc, #288]	@ (800081c <SystemInit+0x12c>)
 80006fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000700:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000704:	4b45      	ldr	r3, [pc, #276]	@ (800081c <SystemInit+0x12c>)
 8000706:	691b      	ldr	r3, [r3, #16]
 8000708:	4a44      	ldr	r2, [pc, #272]	@ (800081c <SystemInit+0x12c>)
 800070a:	f043 0310 	orr.w	r3, r3, #16
 800070e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000710:	4b43      	ldr	r3, [pc, #268]	@ (8000820 <SystemInit+0x130>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f003 030f 	and.w	r3, r3, #15
 8000718:	2b06      	cmp	r3, #6
 800071a:	d807      	bhi.n	800072c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800071c:	4b40      	ldr	r3, [pc, #256]	@ (8000820 <SystemInit+0x130>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f023 030f 	bic.w	r3, r3, #15
 8000724:	4a3e      	ldr	r2, [pc, #248]	@ (8000820 <SystemInit+0x130>)
 8000726:	f043 0307 	orr.w	r3, r3, #7
 800072a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800072c:	4b3d      	ldr	r3, [pc, #244]	@ (8000824 <SystemInit+0x134>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a3c      	ldr	r2, [pc, #240]	@ (8000824 <SystemInit+0x134>)
 8000732:	f043 0301 	orr.w	r3, r3, #1
 8000736:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000738:	4b3a      	ldr	r3, [pc, #232]	@ (8000824 <SystemInit+0x134>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800073e:	4b39      	ldr	r3, [pc, #228]	@ (8000824 <SystemInit+0x134>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	4938      	ldr	r1, [pc, #224]	@ (8000824 <SystemInit+0x134>)
 8000744:	4b38      	ldr	r3, [pc, #224]	@ (8000828 <SystemInit+0x138>)
 8000746:	4013      	ands	r3, r2
 8000748:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800074a:	4b35      	ldr	r3, [pc, #212]	@ (8000820 <SystemInit+0x130>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	2b00      	cmp	r3, #0
 8000754:	d007      	beq.n	8000766 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000756:	4b32      	ldr	r3, [pc, #200]	@ (8000820 <SystemInit+0x130>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f023 030f 	bic.w	r3, r3, #15
 800075e:	4a30      	ldr	r2, [pc, #192]	@ (8000820 <SystemInit+0x130>)
 8000760:	f043 0307 	orr.w	r3, r3, #7
 8000764:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000766:	4b2f      	ldr	r3, [pc, #188]	@ (8000824 <SystemInit+0x134>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800076c:	4b2d      	ldr	r3, [pc, #180]	@ (8000824 <SystemInit+0x134>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000772:	4b2c      	ldr	r3, [pc, #176]	@ (8000824 <SystemInit+0x134>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000778:	4b2a      	ldr	r3, [pc, #168]	@ (8000824 <SystemInit+0x134>)
 800077a:	4a2c      	ldr	r2, [pc, #176]	@ (800082c <SystemInit+0x13c>)
 800077c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800077e:	4b29      	ldr	r3, [pc, #164]	@ (8000824 <SystemInit+0x134>)
 8000780:	4a2b      	ldr	r2, [pc, #172]	@ (8000830 <SystemInit+0x140>)
 8000782:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000784:	4b27      	ldr	r3, [pc, #156]	@ (8000824 <SystemInit+0x134>)
 8000786:	4a2b      	ldr	r2, [pc, #172]	@ (8000834 <SystemInit+0x144>)
 8000788:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800078a:	4b26      	ldr	r3, [pc, #152]	@ (8000824 <SystemInit+0x134>)
 800078c:	2200      	movs	r2, #0
 800078e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000790:	4b24      	ldr	r3, [pc, #144]	@ (8000824 <SystemInit+0x134>)
 8000792:	4a28      	ldr	r2, [pc, #160]	@ (8000834 <SystemInit+0x144>)
 8000794:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000796:	4b23      	ldr	r3, [pc, #140]	@ (8000824 <SystemInit+0x134>)
 8000798:	2200      	movs	r2, #0
 800079a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800079c:	4b21      	ldr	r3, [pc, #132]	@ (8000824 <SystemInit+0x134>)
 800079e:	4a25      	ldr	r2, [pc, #148]	@ (8000834 <SystemInit+0x144>)
 80007a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007a2:	4b20      	ldr	r3, [pc, #128]	@ (8000824 <SystemInit+0x134>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000824 <SystemInit+0x134>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a1d      	ldr	r2, [pc, #116]	@ (8000824 <SystemInit+0x134>)
 80007ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80007b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <SystemInit+0x134>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80007ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <SystemInit+0x148>)
 80007bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007be:	4a1e      	ldr	r2, [pc, #120]	@ (8000838 <SystemInit+0x148>)
 80007c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007c4:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80007c6:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <SystemInit+0x14c>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000840 <SystemInit+0x150>)
 80007cc:	4013      	ands	r3, r2
 80007ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80007d2:	d202      	bcs.n	80007da <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000844 <SystemInit+0x154>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80007da:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <SystemInit+0x134>)
 80007dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d113      	bne.n	8000810 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <SystemInit+0x134>)
 80007ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007ee:	4a0d      	ldr	r2, [pc, #52]	@ (8000824 <SystemInit+0x134>)
 80007f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007f8:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <SystemInit+0x158>)
 80007fa:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007fe:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000800:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <SystemInit+0x134>)
 8000802:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000806:	4a07      	ldr	r2, [pc, #28]	@ (8000824 <SystemInit+0x134>)
 8000808:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800080c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000ed00 	.word	0xe000ed00
 8000820:	52002000 	.word	0x52002000
 8000824:	58024400 	.word	0x58024400
 8000828:	eaf6ed7f 	.word	0xeaf6ed7f
 800082c:	02020200 	.word	0x02020200
 8000830:	01ff0000 	.word	0x01ff0000
 8000834:	01010280 	.word	0x01010280
 8000838:	580000c0 	.word	0x580000c0
 800083c:	5c001000 	.word	0x5c001000
 8000840:	ffff0000 	.word	0xffff0000
 8000844:	51008108 	.word	0x51008108
 8000848:	52004000 	.word	0x52004000

0800084c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000850:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <ExitRun0Mode+0x2c>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	4a08      	ldr	r2, [pc, #32]	@ (8000878 <ExitRun0Mode+0x2c>)
 8000856:	f023 0302 	bic.w	r3, r3, #2
 800085a:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800085c:	bf00      	nop
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <ExitRun0Mode+0x2c>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000866:	2b00      	cmp	r3, #0
 8000868:	d0f9      	beq.n	800085e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800086a:	bf00      	nop
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	58024800 	.word	0x58024800

0800087c <RingBuffCreate>:
 * \param[in]       buff: Buffer handle
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
RINGBUFF_VOLATILE RingBuff* RingBuffCreate(void* pBuff, size_t size) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
    if (pBuff == NULL || size == 0 || size < (sizeof(RingBuff) + 1)) {
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d005      	beq.n	8000898 <RingBuffCreate+0x1c>
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d002      	beq.n	8000898 <RingBuffCreate+0x1c>
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	2b20      	cmp	r3, #32
 8000896:	d801      	bhi.n	800089c <RingBuffCreate+0x20>
        return NULL;
 8000898:	2300      	movs	r3, #0
 800089a:	e017      	b.n	80008cc <RingBuffCreate+0x50>
    }

    RINGBUFF_VOLATILE RingBuff *pRingBuf = (RingBuff*)pBuff;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	60fb      	str	r3, [r7, #12]
    BUF_MEMSET((void *)pRingBuf, 0x00, sizeof(RingBuff));
 80008a0:	2220      	movs	r2, #32
 80008a2:	2100      	movs	r1, #0
 80008a4:	68f8      	ldr	r0, [r7, #12]
 80008a6:	f007 fe3d 	bl	8008524 <memset>

    pRingBuf->size = size - sizeof(RingBuff);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	f1a3 0220 	sub.w	r2, r3, #32
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	609a      	str	r2, [r3, #8]
    pRingBuf->buff = ((uint8_t*) ((uintptr_t)pBuff) + sizeof(RingBuff));
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f103 0220 	add.w	r2, r3, #32
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	605a      	str	r2, [r3, #4]

    pRingBuf->magic1 = 0xDEADBEEF;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	4a04      	ldr	r2, [pc, #16]	@ (80008d4 <RingBuffCreate+0x58>)
 80008c2:	601a      	str	r2, [r3, #0]
    pRingBuf->magic2 = ~0xDEADBEEF;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <RingBuffCreate+0x5c>)
 80008c8:	619a      	str	r2, [r3, #24]

    return pRingBuf;
 80008ca:	68fb      	ldr	r3, [r7, #12]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	deadbeef 	.word	0xdeadbeef
 80008d8:	21524110 	.word	0x21524110

080008dc <RingBuffGetFull>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
RingBuffGetFull(RINGBUFF_VOLATILE RingBuff* buff) {
 80008dc:	b480      	push	{r7}
 80008de:	b087      	sub	sp, #28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d011      	beq.n	800090e <RingBuffGetFull+0x32>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a1b      	ldr	r2, [pc, #108]	@ (800095c <RingBuffGetFull+0x80>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d10c      	bne.n	800090e <RingBuffGetFull+0x32>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4a19      	ldr	r2, [pc, #100]	@ (8000960 <RingBuffGetFull+0x84>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d107      	bne.n	800090e <RingBuffGetFull+0x32>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d003      	beq.n	800090e <RingBuffGetFull+0x32>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d101      	bne.n	8000912 <RingBuffGetFull+0x36>
        return 0;
 800090e:	2300      	movs	r3, #0
 8000910:	e01d      	b.n	800094e <RingBuffGetFull+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	691b      	ldr	r3, [r3, #16]
 8000916:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	429a      	cmp	r2, r3
 8000924:	d102      	bne.n	800092c <RingBuffGetFull+0x50>
        size = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
 800092a:	e00f      	b.n	800094c <RingBuffGetFull+0x70>
    } else if (w > r) {
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	429a      	cmp	r2, r3
 8000932:	d904      	bls.n	800093e <RingBuffGetFull+0x62>
        size = w - r;
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	e006      	b.n	800094c <RingBuffGetFull+0x70>
    } else {
        size = buff->size - (r - w);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	689a      	ldr	r2, [r3, #8]
 8000942:	6939      	ldr	r1, [r7, #16]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	1acb      	subs	r3, r1, r3
 8000948:	4413      	add	r3, r2
 800094a:	617b      	str	r3, [r7, #20]
    }
    return size;
 800094c:	697b      	ldr	r3, [r7, #20]
}
 800094e:	4618      	mov	r0, r3
 8000950:	371c      	adds	r7, #28
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	deadbeef 	.word	0xdeadbeef
 8000960:	21524110 	.word	0x21524110

08000964 <RingBuffGetLinearBlockReadAddress>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *
RingBuffGetLinearBlockReadAddress(RINGBUFF_VOLATILE RingBuff* buff) {
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d011      	beq.n	8000996 <RingBuffGetLinearBlockReadAddress+0x32>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a0e      	ldr	r2, [pc, #56]	@ (80009b0 <RingBuffGetLinearBlockReadAddress+0x4c>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d10c      	bne.n	8000996 <RingBuffGetLinearBlockReadAddress+0x32>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	4a0c      	ldr	r2, [pc, #48]	@ (80009b4 <RingBuffGetLinearBlockReadAddress+0x50>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d107      	bne.n	8000996 <RingBuffGetLinearBlockReadAddress+0x32>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d003      	beq.n	8000996 <RingBuffGetLinearBlockReadAddress+0x32>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d101      	bne.n	800099a <RingBuffGetLinearBlockReadAddress+0x36>
        return NULL;
 8000996:	2300      	movs	r3, #0
 8000998:	e004      	b.n	80009a4 <RingBuffGetLinearBlockReadAddress+0x40>
    }
    return &buff->buff[buff->r];
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	685a      	ldr	r2, [r3, #4]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	4413      	add	r3, r2
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	deadbeef 	.word	0xdeadbeef
 80009b4:	21524110 	.word	0x21524110

080009b8 <RingBuffGetLinearBlockReadLength>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
RingBuffGetLinearBlockReadLength(RINGBUFF_VOLATILE RingBuff* buff) {
 80009b8:	b480      	push	{r7}
 80009ba:	b087      	sub	sp, #28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d011      	beq.n	80009ea <RingBuffGetLinearBlockReadLength+0x32>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a1a      	ldr	r2, [pc, #104]	@ (8000a34 <RingBuffGetLinearBlockReadLength+0x7c>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d10c      	bne.n	80009ea <RingBuffGetLinearBlockReadLength+0x32>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a18      	ldr	r2, [pc, #96]	@ (8000a38 <RingBuffGetLinearBlockReadLength+0x80>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d107      	bne.n	80009ea <RingBuffGetLinearBlockReadLength+0x32>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d003      	beq.n	80009ea <RingBuffGetLinearBlockReadLength+0x32>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d101      	bne.n	80009ee <RingBuffGetLinearBlockReadLength+0x36>
        return 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e01b      	b.n	8000a26 <RingBuffGetLinearBlockReadLength+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	691b      	ldr	r3, [r3, #16]
 80009f2:	613b      	str	r3, [r7, #16]
    r = buff->r;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d904      	bls.n	8000a0c <RingBuffGetLinearBlockReadLength+0x54>
        len = w - r;
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	1ad3      	subs	r3, r2, r3
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	e00b      	b.n	8000a24 <RingBuffGetLinearBlockReadLength+0x6c>
    } else if (r > w) {
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d905      	bls.n	8000a20 <RingBuffGetLinearBlockReadLength+0x68>
        len = buff->size - r;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689a      	ldr	r2, [r3, #8]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	e001      	b.n	8000a24 <RingBuffGetLinearBlockReadLength+0x6c>
    } else {
        len = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
    }
    return len;
 8000a24:	697b      	ldr	r3, [r7, #20]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	371c      	adds	r7, #28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	deadbeef 	.word	0xdeadbeef
 8000a38:	21524110 	.word	0x21524110

08000a3c <RingBuffSkip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
RingBuffSkip(RINGBUFF_VOLATILE RingBuff* buff, size_t len) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d014      	beq.n	8000a76 <RingBuffSkip+0x3a>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a20      	ldr	r2, [pc, #128]	@ (8000ad4 <RingBuffSkip+0x98>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d10f      	bne.n	8000a76 <RingBuffSkip+0x3a>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ad8 <RingBuffSkip+0x9c>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d10a      	bne.n	8000a76 <RingBuffSkip+0x3a>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d006      	beq.n	8000a76 <RingBuffSkip+0x3a>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d002      	beq.n	8000a76 <RingBuffSkip+0x3a>
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d101      	bne.n	8000a7a <RingBuffSkip+0x3e>
        return 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e027      	b.n	8000aca <RingBuffSkip+0x8e>
    }

    full = RingBuffGetFull(buff);             /* Get buffer used length */
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ff2e 	bl	80008dc <RingBuffGetFull>
 8000a80:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);                   /* Calculate max skip */
 8000a82:	683a      	ldr	r2, [r7, #0]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4293      	cmp	r3, r2
 8000a88:	bf28      	it	cs
 8000a8a:	4613      	movcs	r3, r2
 8000a8c:	603b      	str	r3, [r7, #0]
    buff->r += len;                             /* Advance read pointer */
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	68da      	ldr	r2, [r3, #12]
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	441a      	add	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	68da      	ldr	r2, [r3, #12]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d306      	bcc.n	8000ab4 <RingBuffSkip+0x78>
        buff->r -= buff->size;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	68d2      	ldr	r2, [r2, #12]
 8000aae:	1ad2      	subs	r2, r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, len);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d005      	beq.n	8000ac8 <RingBuffSkip+0x8c>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	683a      	ldr	r2, [r7, #0]
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	4798      	blx	r3
    return len;
 8000ac8:	683b      	ldr	r3, [r7, #0]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	deadbeef 	.word	0xdeadbeef
 8000ad8:	21524110 	.word	0x21524110

08000adc <SyncMailBoxGet>:
#include "mem/mem.h"

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID);

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
    uint8_t volatile *pMB = NULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
    if(mbID == MAILBOX_CM7_ID) pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM7_START;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d103      	bne.n	8000af6 <SyncMailBoxGet+0x1a>
 8000aee:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	e001      	b.n	8000afa <SyncMailBoxGet+0x1e>
    else pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM4_START;
 8000af6:	4b04      	ldr	r3, [pc, #16]	@ (8000b08 <SyncMailBoxGet+0x2c>)
 8000af8:	60fb      	str	r3, [r7, #12]
    return pMB;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	38000004 	.word	0x38000004

08000b0c <SyncMailBoxRead>:
    asm volatile ("sev");
    return 0;
}

int8_t SyncMailBoxRead(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return -1;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	d902      	bls.n	8000b24 <SyncMailBoxRead+0x18>
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	e009      	b.n	8000b38 <SyncMailBoxRead+0x2c>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 8000b24:	68f8      	ldr	r0, [r7, #12]
 8000b26:	f7ff ffd9 	bl	8000adc <SyncMailBoxGet>
 8000b2a:	6178      	str	r0, [r7, #20]
    memcpy((void*)pBuffer, (void*)pMB, len);
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	6979      	ldr	r1, [r7, #20]
 8000b30:	68b8      	ldr	r0, [r7, #8]
 8000b32:	f007 fd23 	bl	800857c <memcpy>
    return 0;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <SyncGetTaskHandler>:
//     if(HAL_GetCurrentCPUID() == CM7_CPUID)  return 0;
//     else                                    return 1;
// }

static task_handler_fn_t SyncGetTaskHandler(uint32_t taskID)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
    if(taskID > NUM_TASK_TYPES) return NULL;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d901      	bls.n	8000b52 <SyncGetTaskHandler+0x12>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e003      	b.n	8000b5a <SyncGetTaskHandler+0x1a>
    return handlers[taskID];
 8000b52:	4a05      	ldr	r2, [pc, #20]	@ (8000b68 <SyncGetTaskHandler+0x28>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	2400003c 	.word	0x2400003c

08000b6c <SyncInit>:

/*
* \brief Each core needs to call SyncInit
*/
int8_t SyncInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
    memset(handlers, 0, sizeof(handlers));
 8000b70:	2208      	movs	r2, #8
 8000b72:	2100      	movs	r1, #0
 8000b74:	4802      	ldr	r0, [pc, #8]	@ (8000b80 <SyncInit+0x14>)
 8000b76:	f007 fcd5 	bl	8008524 <memset>
    return 0;
 8000b7a:	2300      	movs	r3, #0
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2400003c 	.word	0x2400003c

08000b84 <SyncRegisterHandler>:

int8_t SyncRegisterHandler(task_handler_fn_t fn, uint32_t taskID)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
    if(taskID > NUM_TASK_TYPES) return -1;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d902      	bls.n	8000b9a <SyncRegisterHandler+0x16>
 8000b94:	f04f 33ff 	mov.w	r3, #4294967295
 8000b98:	e005      	b.n	8000ba6 <SyncRegisterHandler+0x22>
    handlers[taskID] = fn;
 8000b9a:	4906      	ldr	r1, [pc, #24]	@ (8000bb4 <SyncRegisterHandler+0x30>)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 0;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	2400003c 	.word	0x2400003c

08000bb8 <CM7_SEV_IRQHandler>:
* and the SEV IRQ handler for CM4 was called.
* This function was originally defined in CM4/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM7_SEV_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
    // CPUID == CM4
    uint32_t taskID = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f7ff ff9f 	bl	8000b0c <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ffb5 	bl	8000b40 <SyncGetTaskHandler>
 8000bd6:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <CM7_SEV_IRQHandler+0x2a>
    {
        fn();
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4798      	blx	r3
    }
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <CM4_SEV_IRQHandler>:
* and the SEV IRQ handler for CM7 was called.
* This function was originally defined in CM7/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM4_SEV_IRQHandler(void)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
    // CPUID == CM7
    uint32_t taskID = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM7_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f7ff ff86 	bl	8000b0c <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ff9c 	bl	8000b40 <SyncGetTaskHandler>
 8000c08:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <CM4_SEV_IRQHandler+0x2a>
    {
        fn();
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4798      	blx	r3
    }
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0

/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm("NOP"); }
 8000c22:	e000      	b.n	8000c26 <main+0xa>
 8000c24:	bf00      	nop
 8000c26:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <main+0x74>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1f8      	bne.n	8000c24 <main+0x8>
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c32:	f000 fabb 	bl	80011ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c36:	f000 f82f 	bl	8000c98 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <main+0x74>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c40:	4a13      	ldr	r2, [pc, #76]	@ (8000c90 <main+0x74>)
 8000c42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c4a:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <main+0x74>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f000 fdb1 	bl	80017c0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2000      	movs	r0, #0
 8000c62:	f000 fdc7 	bl	80017f4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm("NOP"); }
 8000c66:	e000      	b.n	8000c6a <main+0x4e>
 8000c68:	bf00      	nop
 8000c6a:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <main+0x74>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d1f8      	bne.n	8000c68 <main+0x4c>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c76:	f000 f8e1 	bl	8000e3c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000c7a:	f000 f893 	bl	8000da4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LoggerInit(&huart1);
 8000c7e:	4805      	ldr	r0, [pc, #20]	@ (8000c94 <main+0x78>)
 8000c80:	f7ff fcc4 	bl	800060c <LoggerInit>
  SyncInit();
 8000c84:	f7ff ff72 	bl	8000b6c <SyncInit>

  vTaskStartScheduler();
 8000c88:	f006 fc1c 	bl	80074c4 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <main+0x70>
 8000c90:	58024400 	.word	0x58024400
 8000c94:	24000044 	.word	0x24000044

08000c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b09c      	sub	sp, #112	@ 0x70
 8000c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca2:	224c      	movs	r2, #76	@ 0x4c
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f007 fc3c 	bl	8008524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2220      	movs	r2, #32
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f007 fc36 	bl	8008524 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000cb8:	2004      	movs	r0, #4
 8000cba:	f000 fdaf 	bl	800181c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4b36      	ldr	r3, [pc, #216]	@ (8000d9c <SystemClock_Config+0x104>)
 8000cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc6:	4a35      	ldr	r2, [pc, #212]	@ (8000d9c <SystemClock_Config+0x104>)
 8000cc8:	f023 0301 	bic.w	r3, r3, #1
 8000ccc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000cce:	4b33      	ldr	r3, [pc, #204]	@ (8000d9c <SystemClock_Config+0x104>)
 8000cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	4b31      	ldr	r3, [pc, #196]	@ (8000da0 <SystemClock_Config+0x108>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a30      	ldr	r2, [pc, #192]	@ (8000da0 <SystemClock_Config+0x108>)
 8000cde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ce2:	6193      	str	r3, [r2, #24]
 8000ce4:	4b2e      	ldr	r3, [pc, #184]	@ (8000da0 <SystemClock_Config+0x108>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cec:	603b      	str	r3, [r7, #0]
 8000cee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cf0:	bf00      	nop
 8000cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8000da0 <SystemClock_Config+0x108>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cfe:	d1f8      	bne.n	8000cf2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000d00:	230b      	movs	r3, #11
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d08:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d0e:	2340      	movs	r3, #64	@ 0x40
 8000d10:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d12:	2301      	movs	r3, #1
 8000d14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d16:	2302      	movs	r3, #2
 8000d18:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000d1e:	2305      	movs	r3, #5
 8000d20:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000d22:	2330      	movs	r3, #48	@ 0x30
 8000d24:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d26:	2302      	movs	r3, #2
 8000d28:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000d2a:	2305      	movs	r3, #5
 8000d2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d32:	2308      	movs	r3, #8
 8000d34:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 fdc4 	bl	80018d0 <HAL_RCC_OscConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000d4e:	f000 f8d9 	bl	8000f04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d52:	233f      	movs	r3, #63	@ 0x3f
 8000d54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 fa04 	bl	8002184 <HAL_RCC_ClockConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000d82:	f000 f8bf 	bl	8000f04 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000d86:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f001 fbaf 	bl	80024f0 <HAL_RCC_MCOConfig>
}
 8000d92:	bf00      	nop
 8000d94:	3770      	adds	r7, #112	@ 0x70
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	58000400 	.word	0x58000400
 8000da0:	58024800 	.word	0x58024800

08000da4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000da8:	4b22      	ldr	r3, [pc, #136]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000daa:	4a23      	ldr	r2, [pc, #140]	@ (8000e38 <MX_USART1_UART_Init+0x94>)
 8000dac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dae:	4b21      	ldr	r3, [pc, #132]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000db0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000db4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000db6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000dca:	220c      	movs	r2, #12
 8000dcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dce:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd4:	4b17      	ldr	r3, [pc, #92]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dda:	4b16      	ldr	r3, [pc, #88]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de0:	4b14      	ldr	r3, [pc, #80]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de6:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dec:	4811      	ldr	r0, [pc, #68]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000dee:	f003 ff35 	bl	8004c5c <HAL_UART_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000df8:	f000 f884 	bl	8000f04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	480d      	ldr	r0, [pc, #52]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000e00:	f004 ffcb 	bl	8005d9a <HAL_UARTEx_SetTxFifoThreshold>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e0a:	f000 f87b 	bl	8000f04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4808      	ldr	r0, [pc, #32]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000e12:	f005 f800 	bl	8005e16 <HAL_UARTEx_SetRxFifoThreshold>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e1c:	f000 f872 	bl	8000f04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e20:	4804      	ldr	r0, [pc, #16]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000e22:	f004 ff81 	bl	8005d28 <HAL_UARTEx_DisableFifoMode>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e2c:	f000 f86a 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	24000044 	.word	0x24000044
 8000e38:	40011000 	.word	0x40011000

08000e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <MX_GPIO_Init+0x9c>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e58:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed8 <MX_GPIO_Init+0x9c>)
 8000e5a:	f043 0304 	orr.w	r3, r3, #4
 8000e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <MX_GPIO_Init+0x9c>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <MX_GPIO_Init+0x9c>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e76:	4a18      	ldr	r2, [pc, #96]	@ (8000ed8 <MX_GPIO_Init+0x9c>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e80:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <MX_GPIO_Init+0x9c>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e8e:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <MX_GPIO_Init+0x9c>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e94:	4a10      	ldr	r2, [pc, #64]	@ (8000ed8 <MX_GPIO_Init+0x9c>)
 8000e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <MX_GPIO_Init+0x9c>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000eac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4804      	ldr	r0, [pc, #16]	@ (8000edc <MX_GPIO_Init+0xa0>)
 8000eca:	f000 fac9 	bl	8001460 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ece:	bf00      	nop
 8000ed0:	3720      	adds	r7, #32
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	58024400 	.word	0x58024400
 8000edc:	58020000 	.word	0x58020000

08000ee0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a04      	ldr	r2, [pc, #16]	@ (8000f00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d101      	bne.n	8000ef6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000ef2:	f000 f997 	bl	8001224 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40000800 	.word	0x40000800

08000f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f08:	b672      	cpsid	i
}
 8000f0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <Error_Handler+0x8>

08000f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <HAL_MspInit+0x48>)
 8000f18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f1c:	4a0e      	ldr	r2, [pc, #56]	@ (8000f58 <HAL_MspInit+0x48>)
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f26:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <HAL_MspInit+0x48>)
 8000f28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f34:	2200      	movs	r2, #0
 8000f36:	210f      	movs	r1, #15
 8000f38:	f06f 0001 	mvn.w	r0, #1
 8000f3c:	f000 fa56 	bl	80013ec <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 5, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2105      	movs	r1, #5
 8000f44:	2041      	movs	r0, #65	@ 0x41
 8000f46:	f000 fa51 	bl	80013ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 8000f4a:	2041      	movs	r0, #65	@ 0x41
 8000f4c:	f000 fa68 	bl	8001420 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	58024400 	.word	0x58024400

08000f5c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b0bc      	sub	sp, #240	@ 0xf0
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	22c8      	movs	r2, #200	@ 0xc8
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f007 fad1 	bl	8008524 <memset>
  if(huart->Instance==USART1)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a27      	ldr	r2, [pc, #156]	@ (8001024 <HAL_UART_MspInit+0xc8>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d146      	bne.n	800101a <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f8c:	f04f 0201 	mov.w	r2, #1
 8000f90:	f04f 0300 	mov.w	r3, #0
 8000f94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f9e:	f107 0310 	add.w	r3, r7, #16
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f001 fd26 	bl	80029f4 <HAL_RCCEx_PeriphCLKConfig>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000fae:	f7ff ffa9 	bl	8000f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001028 <HAL_UART_MspInit+0xcc>)
 8000fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8001028 <HAL_UART_MspInit+0xcc>)
 8000fba:	f043 0310 	orr.w	r3, r3, #16
 8000fbe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000fc2:	4b19      	ldr	r3, [pc, #100]	@ (8001028 <HAL_UART_MspInit+0xcc>)
 8000fc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000fc8:	f003 0310 	and.w	r3, r3, #16
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <HAL_UART_MspInit+0xcc>)
 8000fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd6:	4a14      	ldr	r2, [pc, #80]	@ (8001028 <HAL_UART_MspInit+0xcc>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe0:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <HAL_UART_MspInit+0xcc>)
 8000fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000fee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001008:	2307      	movs	r3, #7
 800100a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	@ (800102c <HAL_UART_MspInit+0xd0>)
 8001016:	f000 fa23 	bl	8001460 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800101a:	bf00      	nop
 800101c:	37f0      	adds	r7, #240	@ 0xf0
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40011000 	.word	0x40011000
 8001028:	58024400 	.word	0x58024400
 800102c:	58020000 	.word	0x58020000

08001030 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b090      	sub	sp, #64	@ 0x40
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b0f      	cmp	r3, #15
 800103c:	d827      	bhi.n	800108e <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800103e:	2200      	movs	r2, #0
 8001040:	6879      	ldr	r1, [r7, #4]
 8001042:	201e      	movs	r0, #30
 8001044:	f000 f9d2 	bl	80013ec <HAL_NVIC_SetPriority>

     /* Enable the TIM4 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001048:	201e      	movs	r0, #30
 800104a:	f000 f9e9 	bl	8001420 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800104e:	4a29      	ldr	r2, [pc, #164]	@ (80010f4 <HAL_InitTick+0xc4>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001054:	4b28      	ldr	r3, [pc, #160]	@ (80010f8 <HAL_InitTick+0xc8>)
 8001056:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800105a:	4a27      	ldr	r2, [pc, #156]	@ (80010f8 <HAL_InitTick+0xc8>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001064:	4b24      	ldr	r3, [pc, #144]	@ (80010f8 <HAL_InitTick+0xc8>)
 8001066:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001072:	f107 0210 	add.w	r2, r7, #16
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f001 fc77 	bl	8002970 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001084:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001088:	2b00      	cmp	r3, #0
 800108a:	d106      	bne.n	800109a <HAL_InitTick+0x6a>
 800108c:	e001      	b.n	8001092 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e02b      	b.n	80010ea <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001092:	f001 fc41 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 8001096:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001098:	e004      	b.n	80010a4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800109a:	f001 fc3d 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 800109e:	4603      	mov	r3, r0
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010a6:	4a15      	ldr	r2, [pc, #84]	@ (80010fc <HAL_InitTick+0xcc>)
 80010a8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ac:	0c9b      	lsrs	r3, r3, #18
 80010ae:	3b01      	subs	r3, #1
 80010b0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80010b2:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <HAL_InitTick+0xd0>)
 80010b4:	4a13      	ldr	r2, [pc, #76]	@ (8001104 <HAL_InitTick+0xd4>)
 80010b6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80010b8:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <HAL_InitTick+0xd0>)
 80010ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010be:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80010c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001100 <HAL_InitTick+0xd0>)
 80010c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010c4:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <HAL_InitTick+0xd0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <HAL_InitTick+0xd0>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80010d2:	480b      	ldr	r0, [pc, #44]	@ (8001100 <HAL_InitTick+0xd0>)
 80010d4:	f003 fafa 	bl	80046cc <HAL_TIM_Base_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d104      	bne.n	80010e8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80010de:	4808      	ldr	r0, [pc, #32]	@ (8001100 <HAL_InitTick+0xd0>)
 80010e0:	f003 fb56 	bl	8004790 <HAL_TIM_Base_Start_IT>
 80010e4:	4603      	mov	r3, r0
 80010e6:	e000      	b.n	80010ea <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3740      	adds	r7, #64	@ 0x40
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	24000008 	.word	0x24000008
 80010f8:	58024400 	.word	0x58024400
 80010fc:	431bde83 	.word	0x431bde83
 8001100:	240000d8 	.word	0x240000d8
 8001104:	40000800 	.word	0x40000800

08001108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <NMI_Handler+0x4>

08001110 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <MemManage_Handler+0x4>

08001120 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <BusFault_Handler+0x4>

08001128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <UsageFault_Handler+0x4>

08001130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001144:	4802      	ldr	r0, [pc, #8]	@ (8001150 <TIM4_IRQHandler+0x10>)
 8001146:	f003 fb9b 	bl	8004880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	240000d8 	.word	0x240000d8

08001154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001154:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001190 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001158:	f7ff fb78 	bl	800084c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800115c:	f7ff fac8 	bl	80006f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001160:	480c      	ldr	r0, [pc, #48]	@ (8001194 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001162:	490d      	ldr	r1, [pc, #52]	@ (8001198 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001164:	4a0d      	ldr	r2, [pc, #52]	@ (800119c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001178:	4c0a      	ldr	r4, [pc, #40]	@ (80011a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001186:	f007 f9d5 	bl	8008534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118a:	f7ff fd47 	bl	8000c1c <main>
  bx  lr
 800118e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001190:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001194:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001198:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 800119c:	08008610 	.word	0x08008610
  ldr r2, =_sbss
 80011a0:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80011a4:	240042cc 	.word	0x240042cc

080011a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC3_IRQHandler>
	...

080011ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b2:	2003      	movs	r0, #3
 80011b4:	f000 f90f 	bl	80013d6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011b8:	f001 fa04 	bl	80025c4 <HAL_RCC_GetSysClockFreq>
 80011bc:	4602      	mov	r2, r0
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <HAL_Init+0x68>)
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	0a1b      	lsrs	r3, r3, #8
 80011c4:	f003 030f 	and.w	r3, r3, #15
 80011c8:	4913      	ldr	r1, [pc, #76]	@ (8001218 <HAL_Init+0x6c>)
 80011ca:	5ccb      	ldrb	r3, [r1, r3]
 80011cc:	f003 031f 	and.w	r3, r3, #31
 80011d0:	fa22 f303 	lsr.w	r3, r2, r3
 80011d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <HAL_Init+0x68>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	4a0e      	ldr	r2, [pc, #56]	@ (8001218 <HAL_Init+0x6c>)
 80011e0:	5cd3      	ldrb	r3, [r2, r3]
 80011e2:	f003 031f 	and.w	r3, r3, #31
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ec:	4a0b      	ldr	r2, [pc, #44]	@ (800121c <HAL_Init+0x70>)
 80011ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001220 <HAL_Init+0x74>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011f6:	200f      	movs	r0, #15
 80011f8:	f7ff ff1a 	bl	8001030 <HAL_InitTick>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e002      	b.n	800120c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001206:	f7ff fe83 	bl	8000f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	58024400 	.word	0x58024400
 8001218:	080085c8 	.word	0x080085c8
 800121c:	24000004 	.word	0x24000004
 8001220:	24000000 	.word	0x24000000

08001224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <HAL_IncTick+0x20>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <HAL_IncTick+0x24>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a04      	ldr	r2, [pc, #16]	@ (8001248 <HAL_IncTick+0x24>)
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	2400000c 	.word	0x2400000c
 8001248:	24000124 	.word	0x24000124

0800124c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return uwTick;
 8001250:	4b03      	ldr	r3, [pc, #12]	@ (8001260 <HAL_GetTick+0x14>)
 8001252:	681b      	ldr	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	24000124 	.word	0x24000124

08001264 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001268:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <HAL_GetREVID+0x14>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	0c1b      	lsrs	r3, r3, #16
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	5c001000 	.word	0x5c001000

0800127c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800128c:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <__NVIC_SetPriorityGrouping+0x40>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001298:	4013      	ands	r3, r2
 800129a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012aa:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <__NVIC_SetPriorityGrouping+0x40>)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	60d3      	str	r3, [r2, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00
 80012c0:	05fa0000 	.word	0x05fa0000

080012c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c8:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <__NVIC_GetPriorityGrouping+0x18>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	f003 0307 	and.w	r3, r3, #7
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	db0b      	blt.n	800130a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	f003 021f 	and.w	r2, r3, #31
 80012f8:	4907      	ldr	r1, [pc, #28]	@ (8001318 <__NVIC_EnableIRQ+0x38>)
 80012fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012fe:	095b      	lsrs	r3, r3, #5
 8001300:	2001      	movs	r0, #1
 8001302:	fa00 f202 	lsl.w	r2, r0, r2
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000e100 	.word	0xe000e100

0800131c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001328:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132c:	2b00      	cmp	r3, #0
 800132e:	db0a      	blt.n	8001346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	b2da      	uxtb	r2, r3
 8001334:	490c      	ldr	r1, [pc, #48]	@ (8001368 <__NVIC_SetPriority+0x4c>)
 8001336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800133a:	0112      	lsls	r2, r2, #4
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	440b      	add	r3, r1
 8001340:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001344:	e00a      	b.n	800135c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4908      	ldr	r1, [pc, #32]	@ (800136c <__NVIC_SetPriority+0x50>)
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	3b04      	subs	r3, #4
 8001354:	0112      	lsls	r2, r2, #4
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	440b      	add	r3, r1
 800135a:	761a      	strb	r2, [r3, #24]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000e100 	.word	0xe000e100
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	@ 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f1c3 0307 	rsb	r3, r3, #7
 800138a:	2b04      	cmp	r3, #4
 800138c:	bf28      	it	cs
 800138e:	2304      	movcs	r3, #4
 8001390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3304      	adds	r3, #4
 8001396:	2b06      	cmp	r3, #6
 8001398:	d902      	bls.n	80013a0 <NVIC_EncodePriority+0x30>
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3b03      	subs	r3, #3
 800139e:	e000      	b.n	80013a2 <NVIC_EncodePriority+0x32>
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43da      	mvns	r2, r3
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	401a      	ands	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b8:	f04f 31ff 	mov.w	r1, #4294967295
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	43d9      	mvns	r1, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	4313      	orrs	r3, r2
         );
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3724      	adds	r7, #36	@ 0x24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ff4c 	bl	800127c <__NVIC_SetPriorityGrouping>
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
 80013f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013fa:	f7ff ff63 	bl	80012c4 <__NVIC_GetPriorityGrouping>
 80013fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	68b9      	ldr	r1, [r7, #8]
 8001404:	6978      	ldr	r0, [r7, #20]
 8001406:	f7ff ffb3 	bl	8001370 <NVIC_EncodePriority>
 800140a:	4602      	mov	r2, r0
 800140c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001410:	4611      	mov	r1, r2
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff82 	bl	800131c <__NVIC_SetPriority>
}
 8001418:	bf00      	nop
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800142a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ff56 	bl	80012e0 <__NVIC_EnableIRQ>
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001440:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_GetCurrentCPUID+0x20>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001448:	2b70      	cmp	r3, #112	@ 0x70
 800144a:	d101      	bne.n	8001450 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 800144c:	2303      	movs	r3, #3
 800144e:	e000      	b.n	8001452 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8001450:	2301      	movs	r3, #1
  }
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	@ 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800146e:	4b89      	ldr	r3, [pc, #548]	@ (8001694 <HAL_GPIO_Init+0x234>)
 8001470:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001472:	e194      	b.n	800179e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2101      	movs	r1, #1
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 8186 	beq.w	8001798 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b01      	cmp	r3, #1
 8001496:	d005      	beq.n	80014a4 <HAL_GPIO_Init+0x44>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d130      	bne.n	8001506 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014da:	2201      	movs	r2, #1
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	f003 0201 	and.w	r2, r3, #1
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	2b03      	cmp	r3, #3
 8001510:	d017      	beq.n	8001542 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	2203      	movs	r2, #3
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d123      	bne.n	8001596 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	220f      	movs	r2, #15
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	691a      	ldr	r2, [r3, #16]
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	08da      	lsrs	r2, r3, #3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3208      	adds	r2, #8
 8001590:	69b9      	ldr	r1, [r7, #24]
 8001592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	2203      	movs	r2, #3
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0203 	and.w	r2, r3, #3
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 80e0 	beq.w	8001798 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001698 <HAL_GPIO_Init+0x238>)
 80015da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015de:	4a2e      	ldr	r2, [pc, #184]	@ (8001698 <HAL_GPIO_Init+0x238>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001698 <HAL_GPIO_Init+0x238>)
 80015ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f6:	4a29      	ldr	r2, [pc, #164]	@ (800169c <HAL_GPIO_Init+0x23c>)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	220f      	movs	r2, #15
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a20      	ldr	r2, [pc, #128]	@ (80016a0 <HAL_GPIO_Init+0x240>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d052      	beq.n	80016c8 <HAL_GPIO_Init+0x268>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a1f      	ldr	r2, [pc, #124]	@ (80016a4 <HAL_GPIO_Init+0x244>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d031      	beq.n	800168e <HAL_GPIO_Init+0x22e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a1e      	ldr	r2, [pc, #120]	@ (80016a8 <HAL_GPIO_Init+0x248>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d02b      	beq.n	800168a <HAL_GPIO_Init+0x22a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a1d      	ldr	r2, [pc, #116]	@ (80016ac <HAL_GPIO_Init+0x24c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d025      	beq.n	8001686 <HAL_GPIO_Init+0x226>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a1c      	ldr	r2, [pc, #112]	@ (80016b0 <HAL_GPIO_Init+0x250>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d01f      	beq.n	8001682 <HAL_GPIO_Init+0x222>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a1b      	ldr	r2, [pc, #108]	@ (80016b4 <HAL_GPIO_Init+0x254>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d019      	beq.n	800167e <HAL_GPIO_Init+0x21e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a1a      	ldr	r2, [pc, #104]	@ (80016b8 <HAL_GPIO_Init+0x258>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d013      	beq.n	800167a <HAL_GPIO_Init+0x21a>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a19      	ldr	r2, [pc, #100]	@ (80016bc <HAL_GPIO_Init+0x25c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d00d      	beq.n	8001676 <HAL_GPIO_Init+0x216>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a18      	ldr	r2, [pc, #96]	@ (80016c0 <HAL_GPIO_Init+0x260>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d007      	beq.n	8001672 <HAL_GPIO_Init+0x212>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a17      	ldr	r2, [pc, #92]	@ (80016c4 <HAL_GPIO_Init+0x264>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d101      	bne.n	800166e <HAL_GPIO_Init+0x20e>
 800166a:	2309      	movs	r3, #9
 800166c:	e02d      	b.n	80016ca <HAL_GPIO_Init+0x26a>
 800166e:	230a      	movs	r3, #10
 8001670:	e02b      	b.n	80016ca <HAL_GPIO_Init+0x26a>
 8001672:	2308      	movs	r3, #8
 8001674:	e029      	b.n	80016ca <HAL_GPIO_Init+0x26a>
 8001676:	2307      	movs	r3, #7
 8001678:	e027      	b.n	80016ca <HAL_GPIO_Init+0x26a>
 800167a:	2306      	movs	r3, #6
 800167c:	e025      	b.n	80016ca <HAL_GPIO_Init+0x26a>
 800167e:	2305      	movs	r3, #5
 8001680:	e023      	b.n	80016ca <HAL_GPIO_Init+0x26a>
 8001682:	2304      	movs	r3, #4
 8001684:	e021      	b.n	80016ca <HAL_GPIO_Init+0x26a>
 8001686:	2303      	movs	r3, #3
 8001688:	e01f      	b.n	80016ca <HAL_GPIO_Init+0x26a>
 800168a:	2302      	movs	r3, #2
 800168c:	e01d      	b.n	80016ca <HAL_GPIO_Init+0x26a>
 800168e:	2301      	movs	r3, #1
 8001690:	e01b      	b.n	80016ca <HAL_GPIO_Init+0x26a>
 8001692:	bf00      	nop
 8001694:	58000080 	.word	0x58000080
 8001698:	58024400 	.word	0x58024400
 800169c:	58000400 	.word	0x58000400
 80016a0:	58020000 	.word	0x58020000
 80016a4:	58020400 	.word	0x58020400
 80016a8:	58020800 	.word	0x58020800
 80016ac:	58020c00 	.word	0x58020c00
 80016b0:	58021000 	.word	0x58021000
 80016b4:	58021400 	.word	0x58021400
 80016b8:	58021800 	.word	0x58021800
 80016bc:	58021c00 	.word	0x58021c00
 80016c0:	58022000 	.word	0x58022000
 80016c4:	58022400 	.word	0x58022400
 80016c8:	2300      	movs	r3, #0
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	f002 0203 	and.w	r2, r2, #3
 80016d0:	0092      	lsls	r2, r2, #2
 80016d2:	4093      	lsls	r3, r2
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016da:	4938      	ldr	r1, [pc, #224]	@ (80017bc <HAL_GPIO_Init+0x35c>)
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3302      	adds	r3, #2
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800170e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001716:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800173c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	3301      	adds	r3, #1
 800179c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	fa22 f303 	lsr.w	r3, r2, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f47f ae63 	bne.w	8001474 <HAL_GPIO_Init+0x14>
  }
}
 80017ae:	bf00      	nop
 80017b0:	bf00      	nop
 80017b2:	3724      	adds	r7, #36	@ 0x24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	58000400 	.word	0x58000400

080017c0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80017c8:	4a08      	ldr	r2, [pc, #32]	@ (80017ec <HAL_HSEM_FastTake+0x2c>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3320      	adds	r3, #32
 80017ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d2:	4a07      	ldr	r2, [pc, #28]	@ (80017f0 <HAL_HSEM_FastTake+0x30>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d101      	bne.n	80017dc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	e000      	b.n	80017de <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	58026400 	.word	0x58026400
 80017f0:	80000300 	.word	0x80000300

080017f4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80017fe:	4906      	ldr	r1, [pc, #24]	@ (8001818 <HAL_HSEM_Release+0x24>)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	58026400 	.word	0x58026400

0800181c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001824:	4b29      	ldr	r3, [pc, #164]	@ (80018cc <HAL_PWREx_ConfigSupply+0xb0>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	2b06      	cmp	r3, #6
 800182e:	d00a      	beq.n	8001846 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001830:	4b26      	ldr	r3, [pc, #152]	@ (80018cc <HAL_PWREx_ConfigSupply+0xb0>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	429a      	cmp	r2, r3
 800183c:	d001      	beq.n	8001842 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e040      	b.n	80018c4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	e03e      	b.n	80018c4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001846:	4b21      	ldr	r3, [pc, #132]	@ (80018cc <HAL_PWREx_ConfigSupply+0xb0>)
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800184e:	491f      	ldr	r1, [pc, #124]	@ (80018cc <HAL_PWREx_ConfigSupply+0xb0>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4313      	orrs	r3, r2
 8001854:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001856:	f7ff fcf9 	bl	800124c <HAL_GetTick>
 800185a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800185c:	e009      	b.n	8001872 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800185e:	f7ff fcf5 	bl	800124c <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800186c:	d901      	bls.n	8001872 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e028      	b.n	80018c4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001872:	4b16      	ldr	r3, [pc, #88]	@ (80018cc <HAL_PWREx_ConfigSupply+0xb0>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800187a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800187e:	d1ee      	bne.n	800185e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b1e      	cmp	r3, #30
 8001884:	d008      	beq.n	8001898 <HAL_PWREx_ConfigSupply+0x7c>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b2e      	cmp	r3, #46	@ 0x2e
 800188a:	d005      	beq.n	8001898 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b1d      	cmp	r3, #29
 8001890:	d002      	beq.n	8001898 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b2d      	cmp	r3, #45	@ 0x2d
 8001896:	d114      	bne.n	80018c2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001898:	f7ff fcd8 	bl	800124c <HAL_GetTick>
 800189c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800189e:	e009      	b.n	80018b4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018a0:	f7ff fcd4 	bl	800124c <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018ae:	d901      	bls.n	80018b4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e007      	b.n	80018c4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80018b4:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <HAL_PWREx_ConfigSupply+0xb0>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018c0:	d1ee      	bne.n	80018a0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	58024800 	.word	0x58024800

080018d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08c      	sub	sp, #48	@ 0x30
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d102      	bne.n	80018e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	f000 bc48 	b.w	8002174 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 8088 	beq.w	8001a02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018f2:	4b99      	ldr	r3, [pc, #612]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018fc:	4b96      	ldr	r3, [pc, #600]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 80018fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001900:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001904:	2b10      	cmp	r3, #16
 8001906:	d007      	beq.n	8001918 <HAL_RCC_OscConfig+0x48>
 8001908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800190a:	2b18      	cmp	r3, #24
 800190c:	d111      	bne.n	8001932 <HAL_RCC_OscConfig+0x62>
 800190e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d10c      	bne.n	8001932 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001918:	4b8f      	ldr	r3, [pc, #572]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d06d      	beq.n	8001a00 <HAL_RCC_OscConfig+0x130>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d169      	bne.n	8001a00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	f000 bc21 	b.w	8002174 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800193a:	d106      	bne.n	800194a <HAL_RCC_OscConfig+0x7a>
 800193c:	4b86      	ldr	r3, [pc, #536]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a85      	ldr	r2, [pc, #532]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001942:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	e02e      	b.n	80019a8 <HAL_RCC_OscConfig+0xd8>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10c      	bne.n	800196c <HAL_RCC_OscConfig+0x9c>
 8001952:	4b81      	ldr	r3, [pc, #516]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a80      	ldr	r2, [pc, #512]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001958:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	4b7e      	ldr	r3, [pc, #504]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a7d      	ldr	r2, [pc, #500]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001964:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	e01d      	b.n	80019a8 <HAL_RCC_OscConfig+0xd8>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001974:	d10c      	bne.n	8001990 <HAL_RCC_OscConfig+0xc0>
 8001976:	4b78      	ldr	r3, [pc, #480]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a77      	ldr	r2, [pc, #476]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 800197c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	4b75      	ldr	r3, [pc, #468]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a74      	ldr	r2, [pc, #464]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	e00b      	b.n	80019a8 <HAL_RCC_OscConfig+0xd8>
 8001990:	4b71      	ldr	r3, [pc, #452]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a70      	ldr	r2, [pc, #448]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001996:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	4b6e      	ldr	r3, [pc, #440]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a6d      	ldr	r2, [pc, #436]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 80019a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d013      	beq.n	80019d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b0:	f7ff fc4c 	bl	800124c <HAL_GetTick>
 80019b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b8:	f7ff fc48 	bl	800124c <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b64      	cmp	r3, #100	@ 0x64
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e3d4      	b.n	8002174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019ca:	4b63      	ldr	r3, [pc, #396]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0xe8>
 80019d6:	e014      	b.n	8001a02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff fc38 	bl	800124c <HAL_GetTick>
 80019dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e0:	f7ff fc34 	bl	800124c <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b64      	cmp	r3, #100	@ 0x64
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e3c0      	b.n	8002174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019f2:	4b59      	ldr	r3, [pc, #356]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x110>
 80019fe:	e000      	b.n	8001a02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 80ca 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a10:	4b51      	ldr	r3, [pc, #324]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a18:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a1a:	4b4f      	ldr	r3, [pc, #316]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d007      	beq.n	8001a36 <HAL_RCC_OscConfig+0x166>
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	2b18      	cmp	r3, #24
 8001a2a:	d156      	bne.n	8001ada <HAL_RCC_OscConfig+0x20a>
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d151      	bne.n	8001ada <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a36:	4b48      	ldr	r3, [pc, #288]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d005      	beq.n	8001a4e <HAL_RCC_OscConfig+0x17e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e392      	b.n	8002174 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a4e:	4b42      	ldr	r3, [pc, #264]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 0219 	bic.w	r2, r3, #25
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	493f      	ldr	r1, [pc, #252]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a60:	f7ff fbf4 	bl	800124c <HAL_GetTick>
 8001a64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a68:	f7ff fbf0 	bl	800124c <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e37c      	b.n	8002174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a7a:	4b37      	ldr	r3, [pc, #220]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a86:	f7ff fbed 	bl	8001264 <HAL_GetREVID>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d817      	bhi.n	8001ac4 <HAL_RCC_OscConfig+0x1f4>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	2b40      	cmp	r3, #64	@ 0x40
 8001a9a:	d108      	bne.n	8001aae <HAL_RCC_OscConfig+0x1de>
 8001a9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001aa4:	4a2c      	ldr	r2, [pc, #176]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aaa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aac:	e07a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aae:	4b2a      	ldr	r3, [pc, #168]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	031b      	lsls	r3, r3, #12
 8001abc:	4926      	ldr	r1, [pc, #152]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ac2:	e06f      	b.n	8001ba4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac4:	4b24      	ldr	r3, [pc, #144]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	061b      	lsls	r3, r3, #24
 8001ad2:	4921      	ldr	r1, [pc, #132]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad8:	e064      	b.n	8001ba4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d047      	beq.n	8001b72 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 0219 	bic.w	r2, r3, #25
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	491a      	ldr	r1, [pc, #104]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af4:	f7ff fbaa 	bl	800124c <HAL_GetTick>
 8001af8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afc:	f7ff fba6 	bl	800124c <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e332      	b.n	8002174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b0e:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	f7ff fba3 	bl	8001264 <HAL_GetREVID>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d819      	bhi.n	8001b5c <HAL_RCC_OscConfig+0x28c>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	2b40      	cmp	r3, #64	@ 0x40
 8001b2e:	d108      	bne.n	8001b42 <HAL_RCC_OscConfig+0x272>
 8001b30:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001b38:	4a07      	ldr	r2, [pc, #28]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b3e:	6053      	str	r3, [r2, #4]
 8001b40:	e030      	b.n	8001ba4 <HAL_RCC_OscConfig+0x2d4>
 8001b42:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	031b      	lsls	r3, r3, #12
 8001b50:	4901      	ldr	r1, [pc, #4]	@ (8001b58 <HAL_RCC_OscConfig+0x288>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	604b      	str	r3, [r1, #4]
 8001b56:	e025      	b.n	8001ba4 <HAL_RCC_OscConfig+0x2d4>
 8001b58:	58024400 	.word	0x58024400
 8001b5c:	4b9a      	ldr	r3, [pc, #616]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	061b      	lsls	r3, r3, #24
 8001b6a:	4997      	ldr	r1, [pc, #604]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
 8001b70:	e018      	b.n	8001ba4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b72:	4b95      	ldr	r3, [pc, #596]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a94      	ldr	r2, [pc, #592]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001b78:	f023 0301 	bic.w	r3, r3, #1
 8001b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7e:	f7ff fb65 	bl	800124c <HAL_GetTick>
 8001b82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b86:	f7ff fb61 	bl	800124c <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e2ed      	b.n	8002174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b98:	4b8b      	ldr	r3, [pc, #556]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1f0      	bne.n	8001b86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0310 	and.w	r3, r3, #16
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80a9 	beq.w	8001d04 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bb2:	4b85      	ldr	r3, [pc, #532]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001bba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bbc:	4b82      	ldr	r3, [pc, #520]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d007      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x308>
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	2b18      	cmp	r3, #24
 8001bcc:	d13a      	bne.n	8001c44 <HAL_RCC_OscConfig+0x374>
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d135      	bne.n	8001c44 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bd8:	4b7b      	ldr	r3, [pc, #492]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x320>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	2b80      	cmp	r3, #128	@ 0x80
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e2c1      	b.n	8002174 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bf0:	f7ff fb38 	bl	8001264 <HAL_GetREVID>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d817      	bhi.n	8001c2e <HAL_RCC_OscConfig+0x35e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	2b20      	cmp	r3, #32
 8001c04:	d108      	bne.n	8001c18 <HAL_RCC_OscConfig+0x348>
 8001c06:	4b70      	ldr	r3, [pc, #448]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001c0e:	4a6e      	ldr	r2, [pc, #440]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001c10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c14:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c16:	e075      	b.n	8001d04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c18:	4b6b      	ldr	r3, [pc, #428]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	069b      	lsls	r3, r3, #26
 8001c26:	4968      	ldr	r1, [pc, #416]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c2c:	e06a      	b.n	8001d04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c2e:	4b66      	ldr	r3, [pc, #408]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	061b      	lsls	r3, r3, #24
 8001c3c:	4962      	ldr	r1, [pc, #392]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c42:	e05f      	b.n	8001d04 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d042      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c4c:	4b5e      	ldr	r3, [pc, #376]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a5d      	ldr	r2, [pc, #372]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001c52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7ff faf8 	bl	800124c <HAL_GetTick>
 8001c5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c60:	f7ff faf4 	bl	800124c <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e280      	b.n	8002174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c72:	4b55      	ldr	r3, [pc, #340]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c7e:	f7ff faf1 	bl	8001264 <HAL_GetREVID>
 8001c82:	4603      	mov	r3, r0
 8001c84:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d817      	bhi.n	8001cbc <HAL_RCC_OscConfig+0x3ec>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	2b20      	cmp	r3, #32
 8001c92:	d108      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x3d6>
 8001c94:	4b4c      	ldr	r3, [pc, #304]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001c9c:	4a4a      	ldr	r2, [pc, #296]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001c9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ca2:	6053      	str	r3, [r2, #4]
 8001ca4:	e02e      	b.n	8001d04 <HAL_RCC_OscConfig+0x434>
 8001ca6:	4b48      	ldr	r3, [pc, #288]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	069b      	lsls	r3, r3, #26
 8001cb4:	4944      	ldr	r1, [pc, #272]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	604b      	str	r3, [r1, #4]
 8001cba:	e023      	b.n	8001d04 <HAL_RCC_OscConfig+0x434>
 8001cbc:	4b42      	ldr	r3, [pc, #264]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	061b      	lsls	r3, r3, #24
 8001cca:	493f      	ldr	r1, [pc, #252]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	60cb      	str	r3, [r1, #12]
 8001cd0:	e018      	b.n	8001d04 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a3c      	ldr	r2, [pc, #240]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001cd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7ff fab5 	bl	800124c <HAL_GetTick>
 8001ce2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ce6:	f7ff fab1 	bl	800124c <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e23d      	b.n	8002174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001cf8:	4b33      	ldr	r3, [pc, #204]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f0      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d036      	beq.n	8001d7e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d019      	beq.n	8001d4c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d18:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d1c:	4a2a      	ldr	r2, [pc, #168]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d24:	f7ff fa92 	bl	800124c <HAL_GetTick>
 8001d28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d2c:	f7ff fa8e 	bl	800124c <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e21a      	b.n	8002174 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d3e:	4b22      	ldr	r3, [pc, #136]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x45c>
 8001d4a:	e018      	b.n	8001d7e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d50:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001d52:	f023 0301 	bic.w	r3, r3, #1
 8001d56:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d58:	f7ff fa78 	bl	800124c <HAL_GetTick>
 8001d5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d60:	f7ff fa74 	bl	800124c <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e200      	b.n	8002174 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d72:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0320 	and.w	r3, r3, #32
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d039      	beq.n	8001dfe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d01c      	beq.n	8001dcc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d92:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001d98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d9e:	f7ff fa55 	bl	800124c <HAL_GetTick>
 8001da2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001da6:	f7ff fa51 	bl	800124c <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e1dd      	b.n	8002174 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001db8:	4b03      	ldr	r3, [pc, #12]	@ (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x4d6>
 8001dc4:	e01b      	b.n	8001dfe <HAL_RCC_OscConfig+0x52e>
 8001dc6:	bf00      	nop
 8001dc8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dcc:	4b9b      	ldr	r3, [pc, #620]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a9a      	ldr	r2, [pc, #616]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001dd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001dd6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001dd8:	f7ff fa38 	bl	800124c <HAL_GetTick>
 8001ddc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001de0:	f7ff fa34 	bl	800124c <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e1c0      	b.n	8002174 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001df2:	4b92      	ldr	r3, [pc, #584]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 8081 	beq.w	8001f0e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e0c:	4b8c      	ldr	r3, [pc, #560]	@ (8002040 <HAL_RCC_OscConfig+0x770>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a8b      	ldr	r2, [pc, #556]	@ (8002040 <HAL_RCC_OscConfig+0x770>)
 8001e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e18:	f7ff fa18 	bl	800124c <HAL_GetTick>
 8001e1c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e20:	f7ff fa14 	bl	800124c <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	@ 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e1a0      	b.n	8002174 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e32:	4b83      	ldr	r3, [pc, #524]	@ (8002040 <HAL_RCC_OscConfig+0x770>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d106      	bne.n	8001e54 <HAL_RCC_OscConfig+0x584>
 8001e46:	4b7d      	ldr	r3, [pc, #500]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e4a:	4a7c      	ldr	r2, [pc, #496]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e52:	e02d      	b.n	8001eb0 <HAL_RCC_OscConfig+0x5e0>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10c      	bne.n	8001e76 <HAL_RCC_OscConfig+0x5a6>
 8001e5c:	4b77      	ldr	r3, [pc, #476]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e60:	4a76      	ldr	r2, [pc, #472]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001e62:	f023 0301 	bic.w	r3, r3, #1
 8001e66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e68:	4b74      	ldr	r3, [pc, #464]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6c:	4a73      	ldr	r2, [pc, #460]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001e6e:	f023 0304 	bic.w	r3, r3, #4
 8001e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e74:	e01c      	b.n	8001eb0 <HAL_RCC_OscConfig+0x5e0>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b05      	cmp	r3, #5
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x5c8>
 8001e7e:	4b6f      	ldr	r3, [pc, #444]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e82:	4a6e      	ldr	r2, [pc, #440]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e8a:	4b6c      	ldr	r3, [pc, #432]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e8e:	4a6b      	ldr	r2, [pc, #428]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e96:	e00b      	b.n	8001eb0 <HAL_RCC_OscConfig+0x5e0>
 8001e98:	4b68      	ldr	r3, [pc, #416]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e9c:	4a67      	ldr	r2, [pc, #412]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001e9e:	f023 0301 	bic.w	r3, r3, #1
 8001ea2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ea4:	4b65      	ldr	r3, [pc, #404]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea8:	4a64      	ldr	r2, [pc, #400]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001eaa:	f023 0304 	bic.w	r3, r3, #4
 8001eae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d015      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb8:	f7ff f9c8 	bl	800124c <HAL_GetTick>
 8001ebc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ebe:	e00a      	b.n	8001ed6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec0:	f7ff f9c4 	bl	800124c <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e14e      	b.n	8002174 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ed6:	4b59      	ldr	r3, [pc, #356]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0ee      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x5f0>
 8001ee2:	e014      	b.n	8001f0e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee4:	f7ff f9b2 	bl	800124c <HAL_GetTick>
 8001ee8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001eea:	e00a      	b.n	8001f02 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eec:	f7ff f9ae 	bl	800124c <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e138      	b.n	8002174 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f02:	4b4e      	ldr	r3, [pc, #312]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1ee      	bne.n	8001eec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 812d 	beq.w	8002172 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f18:	4b48      	ldr	r3, [pc, #288]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f20:	2b18      	cmp	r3, #24
 8001f22:	f000 80bd 	beq.w	80020a0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	f040 809e 	bne.w	800206c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f30:	4b42      	ldr	r3, [pc, #264]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a41      	ldr	r2, [pc, #260]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001f36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3c:	f7ff f986 	bl	800124c <HAL_GetTick>
 8001f40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f44:	f7ff f982 	bl	800124c <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e10e      	b.n	8002174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f56:	4b39      	ldr	r3, [pc, #228]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f62:	4b36      	ldr	r3, [pc, #216]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001f64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f66:	4b37      	ldr	r3, [pc, #220]	@ (8002044 <HAL_RCC_OscConfig+0x774>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001f72:	0112      	lsls	r2, r2, #4
 8001f74:	430a      	orrs	r2, r1
 8001f76:	4931      	ldr	r1, [pc, #196]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f80:	3b01      	subs	r3, #1
 8001f82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	025b      	lsls	r3, r3, #9
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f96:	3b01      	subs	r3, #1
 8001f98:	041b      	lsls	r3, r3, #16
 8001f9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	061b      	lsls	r3, r3, #24
 8001fa8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001fac:	4923      	ldr	r1, [pc, #140]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001fb2:	4b22      	ldr	r3, [pc, #136]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb6:	4a21      	ldr	r2, [pc, #132]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
 8001fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001fc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fc2:	4b21      	ldr	r3, [pc, #132]	@ (8002048 <HAL_RCC_OscConfig+0x778>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fca:	00d2      	lsls	r2, r2, #3
 8001fcc:	491b      	ldr	r1, [pc, #108]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd6:	f023 020c 	bic.w	r2, r3, #12
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	4917      	ldr	r1, [pc, #92]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001fe4:	4b15      	ldr	r3, [pc, #84]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe8:	f023 0202 	bic.w	r2, r3, #2
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff0:	4912      	ldr	r1, [pc, #72]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ff6:	4b11      	ldr	r3, [pc, #68]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffa:	4a10      	ldr	r2, [pc, #64]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8001ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002000:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002002:	4b0e      	ldr	r3, [pc, #56]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8002004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002006:	4a0d      	ldr	r2, [pc, #52]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8002008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800200c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800200e:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8002010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002012:	4a0a      	ldr	r2, [pc, #40]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8002014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002018:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800201a:	4b08      	ldr	r3, [pc, #32]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 800201c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201e:	4a07      	ldr	r2, [pc, #28]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002026:	4b05      	ldr	r3, [pc, #20]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a04      	ldr	r2, [pc, #16]	@ (800203c <HAL_RCC_OscConfig+0x76c>)
 800202c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002032:	f7ff f90b 	bl	800124c <HAL_GetTick>
 8002036:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002038:	e011      	b.n	800205e <HAL_RCC_OscConfig+0x78e>
 800203a:	bf00      	nop
 800203c:	58024400 	.word	0x58024400
 8002040:	58024800 	.word	0x58024800
 8002044:	fffffc0c 	.word	0xfffffc0c
 8002048:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204c:	f7ff f8fe 	bl	800124c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e08a      	b.n	8002174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800205e:	4b47      	ldr	r3, [pc, #284]	@ (800217c <HAL_RCC_OscConfig+0x8ac>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0x77c>
 800206a:	e082      	b.n	8002172 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206c:	4b43      	ldr	r3, [pc, #268]	@ (800217c <HAL_RCC_OscConfig+0x8ac>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a42      	ldr	r2, [pc, #264]	@ (800217c <HAL_RCC_OscConfig+0x8ac>)
 8002072:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7ff f8e8 	bl	800124c <HAL_GetTick>
 800207c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002080:	f7ff f8e4 	bl	800124c <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e070      	b.n	8002174 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002092:	4b3a      	ldr	r3, [pc, #232]	@ (800217c <HAL_RCC_OscConfig+0x8ac>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x7b0>
 800209e:	e068      	b.n	8002172 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80020a0:	4b36      	ldr	r3, [pc, #216]	@ (800217c <HAL_RCC_OscConfig+0x8ac>)
 80020a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80020a6:	4b35      	ldr	r3, [pc, #212]	@ (800217c <HAL_RCC_OscConfig+0x8ac>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d031      	beq.n	8002118 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	f003 0203 	and.w	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020be:	429a      	cmp	r2, r3
 80020c0:	d12a      	bne.n	8002118 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d122      	bne.n	8002118 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d11a      	bne.n	8002118 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	0a5b      	lsrs	r3, r3, #9
 80020e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d111      	bne.n	8002118 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	0c1b      	lsrs	r3, r3, #16
 80020f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002100:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002102:	429a      	cmp	r2, r3
 8002104:	d108      	bne.n	8002118 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	0e1b      	lsrs	r3, r3, #24
 800210a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002112:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e02b      	b.n	8002174 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800211c:	4b17      	ldr	r3, [pc, #92]	@ (800217c <HAL_RCC_OscConfig+0x8ac>)
 800211e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002126:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	429a      	cmp	r2, r3
 8002130:	d01f      	beq.n	8002172 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002132:	4b12      	ldr	r3, [pc, #72]	@ (800217c <HAL_RCC_OscConfig+0x8ac>)
 8002134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002136:	4a11      	ldr	r2, [pc, #68]	@ (800217c <HAL_RCC_OscConfig+0x8ac>)
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800213e:	f7ff f885 	bl	800124c <HAL_GetTick>
 8002142:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002144:	bf00      	nop
 8002146:	f7ff f881 	bl	800124c <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214e:	4293      	cmp	r3, r2
 8002150:	d0f9      	beq.n	8002146 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002152:	4b0a      	ldr	r3, [pc, #40]	@ (800217c <HAL_RCC_OscConfig+0x8ac>)
 8002154:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002156:	4b0a      	ldr	r3, [pc, #40]	@ (8002180 <HAL_RCC_OscConfig+0x8b0>)
 8002158:	4013      	ands	r3, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800215e:	00d2      	lsls	r2, r2, #3
 8002160:	4906      	ldr	r1, [pc, #24]	@ (800217c <HAL_RCC_OscConfig+0x8ac>)
 8002162:	4313      	orrs	r3, r2
 8002164:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002166:	4b05      	ldr	r3, [pc, #20]	@ (800217c <HAL_RCC_OscConfig+0x8ac>)
 8002168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216a:	4a04      	ldr	r2, [pc, #16]	@ (800217c <HAL_RCC_OscConfig+0x8ac>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3730      	adds	r7, #48	@ 0x30
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	58024400 	.word	0x58024400
 8002180:	ffff0007 	.word	0xffff0007

08002184 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e19c      	b.n	80024d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002198:	4b8a      	ldr	r3, [pc, #552]	@ (80023c4 <HAL_RCC_ClockConfig+0x240>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 030f 	and.w	r3, r3, #15
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d910      	bls.n	80021c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a6:	4b87      	ldr	r3, [pc, #540]	@ (80023c4 <HAL_RCC_ClockConfig+0x240>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 020f 	bic.w	r2, r3, #15
 80021ae:	4985      	ldr	r1, [pc, #532]	@ (80023c4 <HAL_RCC_ClockConfig+0x240>)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b83      	ldr	r3, [pc, #524]	@ (80023c4 <HAL_RCC_ClockConfig+0x240>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e184      	b.n	80024d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d010      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	4b7b      	ldr	r3, [pc, #492]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d908      	bls.n	80021f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021e4:	4b78      	ldr	r3, [pc, #480]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	4975      	ldr	r1, [pc, #468]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d010      	beq.n	8002224 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	4b70      	ldr	r3, [pc, #448]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800220e:	429a      	cmp	r2, r3
 8002210:	d908      	bls.n	8002224 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002212:	4b6d      	ldr	r3, [pc, #436]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	496a      	ldr	r1, [pc, #424]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 8002220:	4313      	orrs	r3, r2
 8002222:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0310 	and.w	r3, r3, #16
 800222c:	2b00      	cmp	r3, #0
 800222e:	d010      	beq.n	8002252 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699a      	ldr	r2, [r3, #24]
 8002234:	4b64      	ldr	r3, [pc, #400]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800223c:	429a      	cmp	r2, r3
 800223e:	d908      	bls.n	8002252 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002240:	4b61      	ldr	r3, [pc, #388]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	495e      	ldr	r1, [pc, #376]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 800224e:	4313      	orrs	r3, r2
 8002250:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0320 	and.w	r3, r3, #32
 800225a:	2b00      	cmp	r3, #0
 800225c:	d010      	beq.n	8002280 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69da      	ldr	r2, [r3, #28]
 8002262:	4b59      	ldr	r3, [pc, #356]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800226a:	429a      	cmp	r2, r3
 800226c:	d908      	bls.n	8002280 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800226e:	4b56      	ldr	r3, [pc, #344]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	4953      	ldr	r1, [pc, #332]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 800227c:	4313      	orrs	r3, r2
 800227e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d010      	beq.n	80022ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	4b4d      	ldr	r3, [pc, #308]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	429a      	cmp	r2, r3
 800229a:	d908      	bls.n	80022ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229c:	4b4a      	ldr	r3, [pc, #296]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f023 020f 	bic.w	r2, r3, #15
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4947      	ldr	r1, [pc, #284]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d055      	beq.n	8002366 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80022ba:	4b43      	ldr	r3, [pc, #268]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	4940      	ldr	r1, [pc, #256]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d107      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022d4:	4b3c      	ldr	r3, [pc, #240]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d121      	bne.n	8002324 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0f6      	b.n	80024d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	d107      	bne.n	80022fc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022ec:	4b36      	ldr	r3, [pc, #216]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d115      	bne.n	8002324 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0ea      	b.n	80024d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d107      	bne.n	8002314 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002304:	4b30      	ldr	r3, [pc, #192]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d109      	bne.n	8002324 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0de      	b.n	80024d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002314:	4b2c      	ldr	r3, [pc, #176]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0d6      	b.n	80024d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002324:	4b28      	ldr	r3, [pc, #160]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	f023 0207 	bic.w	r2, r3, #7
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	4925      	ldr	r1, [pc, #148]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 8002332:	4313      	orrs	r3, r2
 8002334:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002336:	f7fe ff89 	bl	800124c <HAL_GetTick>
 800233a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233c:	e00a      	b.n	8002354 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800233e:	f7fe ff85 	bl	800124c <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	f241 3288 	movw	r2, #5000	@ 0x1388
 800234c:	4293      	cmp	r3, r2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e0be      	b.n	80024d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002354:	4b1c      	ldr	r3, [pc, #112]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	429a      	cmp	r2, r3
 8002364:	d1eb      	bne.n	800233e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d010      	beq.n	8002394 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	4b14      	ldr	r3, [pc, #80]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	429a      	cmp	r2, r3
 8002380:	d208      	bcs.n	8002394 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002382:	4b11      	ldr	r3, [pc, #68]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f023 020f 	bic.w	r2, r3, #15
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	490e      	ldr	r1, [pc, #56]	@ (80023c8 <HAL_RCC_ClockConfig+0x244>)
 8002390:	4313      	orrs	r3, r2
 8002392:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002394:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <HAL_RCC_ClockConfig+0x240>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d214      	bcs.n	80023cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a2:	4b08      	ldr	r3, [pc, #32]	@ (80023c4 <HAL_RCC_ClockConfig+0x240>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 020f 	bic.w	r2, r3, #15
 80023aa:	4906      	ldr	r1, [pc, #24]	@ (80023c4 <HAL_RCC_ClockConfig+0x240>)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	4b04      	ldr	r3, [pc, #16]	@ (80023c4 <HAL_RCC_ClockConfig+0x240>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d005      	beq.n	80023cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e086      	b.n	80024d2 <HAL_RCC_ClockConfig+0x34e>
 80023c4:	52002000 	.word	0x52002000
 80023c8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d010      	beq.n	80023fa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	4b3f      	ldr	r3, [pc, #252]	@ (80024dc <HAL_RCC_ClockConfig+0x358>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d208      	bcs.n	80023fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023e8:	4b3c      	ldr	r3, [pc, #240]	@ (80024dc <HAL_RCC_ClockConfig+0x358>)
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	4939      	ldr	r1, [pc, #228]	@ (80024dc <HAL_RCC_ClockConfig+0x358>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d010      	beq.n	8002428 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	4b34      	ldr	r3, [pc, #208]	@ (80024dc <HAL_RCC_ClockConfig+0x358>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002412:	429a      	cmp	r2, r3
 8002414:	d208      	bcs.n	8002428 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002416:	4b31      	ldr	r3, [pc, #196]	@ (80024dc <HAL_RCC_ClockConfig+0x358>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	492e      	ldr	r1, [pc, #184]	@ (80024dc <HAL_RCC_ClockConfig+0x358>)
 8002424:	4313      	orrs	r3, r2
 8002426:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	2b00      	cmp	r3, #0
 8002432:	d010      	beq.n	8002456 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	699a      	ldr	r2, [r3, #24]
 8002438:	4b28      	ldr	r3, [pc, #160]	@ (80024dc <HAL_RCC_ClockConfig+0x358>)
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002440:	429a      	cmp	r2, r3
 8002442:	d208      	bcs.n	8002456 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002444:	4b25      	ldr	r3, [pc, #148]	@ (80024dc <HAL_RCC_ClockConfig+0x358>)
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	4922      	ldr	r1, [pc, #136]	@ (80024dc <HAL_RCC_ClockConfig+0x358>)
 8002452:	4313      	orrs	r3, r2
 8002454:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0320 	and.w	r3, r3, #32
 800245e:	2b00      	cmp	r3, #0
 8002460:	d010      	beq.n	8002484 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69da      	ldr	r2, [r3, #28]
 8002466:	4b1d      	ldr	r3, [pc, #116]	@ (80024dc <HAL_RCC_ClockConfig+0x358>)
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800246e:	429a      	cmp	r2, r3
 8002470:	d208      	bcs.n	8002484 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002472:	4b1a      	ldr	r3, [pc, #104]	@ (80024dc <HAL_RCC_ClockConfig+0x358>)
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	4917      	ldr	r1, [pc, #92]	@ (80024dc <HAL_RCC_ClockConfig+0x358>)
 8002480:	4313      	orrs	r3, r2
 8002482:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002484:	f000 f89e 	bl	80025c4 <HAL_RCC_GetSysClockFreq>
 8002488:	4602      	mov	r2, r0
 800248a:	4b14      	ldr	r3, [pc, #80]	@ (80024dc <HAL_RCC_ClockConfig+0x358>)
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	0a1b      	lsrs	r3, r3, #8
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	4912      	ldr	r1, [pc, #72]	@ (80024e0 <HAL_RCC_ClockConfig+0x35c>)
 8002496:	5ccb      	ldrb	r3, [r1, r3]
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	fa22 f303 	lsr.w	r3, r2, r3
 80024a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024a2:	4b0e      	ldr	r3, [pc, #56]	@ (80024dc <HAL_RCC_ClockConfig+0x358>)
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	4a0d      	ldr	r2, [pc, #52]	@ (80024e0 <HAL_RCC_ClockConfig+0x35c>)
 80024ac:	5cd3      	ldrb	r3, [r2, r3]
 80024ae:	f003 031f 	and.w	r3, r3, #31
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
 80024b8:	4a0a      	ldr	r2, [pc, #40]	@ (80024e4 <HAL_RCC_ClockConfig+0x360>)
 80024ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024bc:	4a0a      	ldr	r2, [pc, #40]	@ (80024e8 <HAL_RCC_ClockConfig+0x364>)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80024c2:	4b0a      	ldr	r3, [pc, #40]	@ (80024ec <HAL_RCC_ClockConfig+0x368>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe fdb2 	bl	8001030 <HAL_InitTick>
 80024cc:	4603      	mov	r3, r0
 80024ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	58024400 	.word	0x58024400
 80024e0:	080085c8 	.word	0x080085c8
 80024e4:	24000004 	.word	0x24000004
 80024e8:	24000000 	.word	0x24000000
 80024ec:	24000008 	.word	0x24000008

080024f0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08c      	sub	sp, #48	@ 0x30
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d12a      	bne.n	8002558 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8002502:	4b2d      	ldr	r3, [pc, #180]	@ (80025b8 <HAL_RCC_MCOConfig+0xc8>)
 8002504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002508:	4a2b      	ldr	r2, [pc, #172]	@ (80025b8 <HAL_RCC_MCOConfig+0xc8>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002512:	4b29      	ldr	r3, [pc, #164]	@ (80025b8 <HAL_RCC_MCOConfig+0xc8>)
 8002514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	61bb      	str	r3, [r7, #24]
 800251e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002520:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252a:	2303      	movs	r3, #3
 800252c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002532:	2300      	movs	r3, #0
 8002534:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002536:	f107 031c 	add.w	r3, r7, #28
 800253a:	4619      	mov	r1, r3
 800253c:	481f      	ldr	r0, [pc, #124]	@ (80025bc <HAL_RCC_MCOConfig+0xcc>)
 800253e:	f7fe ff8f 	bl	8001460 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002542:	4b1d      	ldr	r3, [pc, #116]	@ (80025b8 <HAL_RCC_MCOConfig+0xc8>)
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800254a:	68b9      	ldr	r1, [r7, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	430b      	orrs	r3, r1
 8002550:	4919      	ldr	r1, [pc, #100]	@ (80025b8 <HAL_RCC_MCOConfig+0xc8>)
 8002552:	4313      	orrs	r3, r2
 8002554:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8002556:	e02a      	b.n	80025ae <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8002558:	4b17      	ldr	r3, [pc, #92]	@ (80025b8 <HAL_RCC_MCOConfig+0xc8>)
 800255a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800255e:	4a16      	ldr	r2, [pc, #88]	@ (80025b8 <HAL_RCC_MCOConfig+0xc8>)
 8002560:	f043 0304 	orr.w	r3, r3, #4
 8002564:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002568:	4b13      	ldr	r3, [pc, #76]	@ (80025b8 <HAL_RCC_MCOConfig+0xc8>)
 800256a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002576:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800257a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257c:	2302      	movs	r3, #2
 800257e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002580:	2303      	movs	r3, #3
 8002582:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002588:	2300      	movs	r3, #0
 800258a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800258c:	f107 031c 	add.w	r3, r7, #28
 8002590:	4619      	mov	r1, r3
 8002592:	480b      	ldr	r0, [pc, #44]	@ (80025c0 <HAL_RCC_MCOConfig+0xd0>)
 8002594:	f7fe ff64 	bl	8001460 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8002598:	4b07      	ldr	r3, [pc, #28]	@ (80025b8 <HAL_RCC_MCOConfig+0xc8>)
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	01d9      	lsls	r1, r3, #7
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	430b      	orrs	r3, r1
 80025a8:	4903      	ldr	r1, [pc, #12]	@ (80025b8 <HAL_RCC_MCOConfig+0xc8>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	610b      	str	r3, [r1, #16]
}
 80025ae:	bf00      	nop
 80025b0:	3730      	adds	r7, #48	@ 0x30
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	58024400 	.word	0x58024400
 80025bc:	58020000 	.word	0x58020000
 80025c0:	58020800 	.word	0x58020800

080025c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b089      	sub	sp, #36	@ 0x24
 80025c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ca:	4bb3      	ldr	r3, [pc, #716]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025d2:	2b18      	cmp	r3, #24
 80025d4:	f200 8155 	bhi.w	8002882 <HAL_RCC_GetSysClockFreq+0x2be>
 80025d8:	a201      	add	r2, pc, #4	@ (adr r2, 80025e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80025da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025de:	bf00      	nop
 80025e0:	08002645 	.word	0x08002645
 80025e4:	08002883 	.word	0x08002883
 80025e8:	08002883 	.word	0x08002883
 80025ec:	08002883 	.word	0x08002883
 80025f0:	08002883 	.word	0x08002883
 80025f4:	08002883 	.word	0x08002883
 80025f8:	08002883 	.word	0x08002883
 80025fc:	08002883 	.word	0x08002883
 8002600:	0800266b 	.word	0x0800266b
 8002604:	08002883 	.word	0x08002883
 8002608:	08002883 	.word	0x08002883
 800260c:	08002883 	.word	0x08002883
 8002610:	08002883 	.word	0x08002883
 8002614:	08002883 	.word	0x08002883
 8002618:	08002883 	.word	0x08002883
 800261c:	08002883 	.word	0x08002883
 8002620:	08002671 	.word	0x08002671
 8002624:	08002883 	.word	0x08002883
 8002628:	08002883 	.word	0x08002883
 800262c:	08002883 	.word	0x08002883
 8002630:	08002883 	.word	0x08002883
 8002634:	08002883 	.word	0x08002883
 8002638:	08002883 	.word	0x08002883
 800263c:	08002883 	.word	0x08002883
 8002640:	08002677 	.word	0x08002677
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002644:	4b94      	ldr	r3, [pc, #592]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	2b00      	cmp	r3, #0
 800264e:	d009      	beq.n	8002664 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002650:	4b91      	ldr	r3, [pc, #580]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	08db      	lsrs	r3, r3, #3
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	4a90      	ldr	r2, [pc, #576]	@ (800289c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
 8002660:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002662:	e111      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002664:	4b8d      	ldr	r3, [pc, #564]	@ (800289c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002666:	61bb      	str	r3, [r7, #24]
      break;
 8002668:	e10e      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800266a:	4b8d      	ldr	r3, [pc, #564]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800266c:	61bb      	str	r3, [r7, #24]
      break;
 800266e:	e10b      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002670:	4b8c      	ldr	r3, [pc, #560]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002672:	61bb      	str	r3, [r7, #24]
      break;
 8002674:	e108      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002676:	4b88      	ldr	r3, [pc, #544]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002680:	4b85      	ldr	r3, [pc, #532]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002684:	091b      	lsrs	r3, r3, #4
 8002686:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800268a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800268c:	4b82      	ldr	r3, [pc, #520]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800268e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002696:	4b80      	ldr	r3, [pc, #512]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800269a:	08db      	lsrs	r3, r3, #3
 800269c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	fb02 f303 	mul.w	r3, r2, r3
 80026a6:	ee07 3a90 	vmov	s15, r3
 80026aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80e1 	beq.w	800287c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	f000 8083 	beq.w	80027c8 <HAL_RCC_GetSysClockFreq+0x204>
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	f200 80a1 	bhi.w	800280c <HAL_RCC_GetSysClockFreq+0x248>
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_RCC_GetSysClockFreq+0x114>
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d056      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0x1c0>
 80026d6:	e099      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026d8:	4b6f      	ldr	r3, [pc, #444]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0320 	and.w	r3, r3, #32
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d02d      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80026e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	08db      	lsrs	r3, r3, #3
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	4a6b      	ldr	r2, [pc, #428]	@ (800289c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026f0:	fa22 f303 	lsr.w	r3, r2, r3
 80026f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	ee07 3a90 	vmov	s15, r3
 80026fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	ee07 3a90 	vmov	s15, r3
 8002706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800270a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800270e:	4b62      	ldr	r3, [pc, #392]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002716:	ee07 3a90 	vmov	s15, r3
 800271a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800271e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002722:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80028a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800272a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800272e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800273a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800273e:	e087      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	ee07 3a90 	vmov	s15, r3
 8002746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800274a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80028ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800274e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002752:	4b51      	ldr	r3, [pc, #324]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800275a:	ee07 3a90 	vmov	s15, r3
 800275e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002762:	ed97 6a02 	vldr	s12, [r7, #8]
 8002766:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80028a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800276a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800276e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800277a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002782:	e065      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	ee07 3a90 	vmov	s15, r3
 800278a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800278e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80028b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002796:	4b40      	ldr	r3, [pc, #256]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800279e:	ee07 3a90 	vmov	s15, r3
 80027a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80027aa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80028a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027c6:	e043      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	ee07 3a90 	vmov	s15, r3
 80027ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027d2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80028b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80027d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027da:	4b2f      	ldr	r3, [pc, #188]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e2:	ee07 3a90 	vmov	s15, r3
 80027e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80027ee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80028a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002806:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800280a:	e021      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002816:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80028b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800281a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800281e:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002826:	ee07 3a90 	vmov	s15, r3
 800282a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800282e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002832:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80028a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800283a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800283e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800284a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800284e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002850:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002854:	0a5b      	lsrs	r3, r3, #9
 8002856:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800285a:	3301      	adds	r3, #1
 800285c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	ee07 3a90 	vmov	s15, r3
 8002864:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002868:	edd7 6a07 	vldr	s13, [r7, #28]
 800286c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002874:	ee17 3a90 	vmov	r3, s15
 8002878:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800287a:	e005      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	61bb      	str	r3, [r7, #24]
      break;
 8002880:	e002      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002882:	4b07      	ldr	r3, [pc, #28]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002884:	61bb      	str	r3, [r7, #24]
      break;
 8002886:	bf00      	nop
  }

  return sysclockfreq;
 8002888:	69bb      	ldr	r3, [r7, #24]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3724      	adds	r7, #36	@ 0x24
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	58024400 	.word	0x58024400
 800289c:	03d09000 	.word	0x03d09000
 80028a0:	003d0900 	.word	0x003d0900
 80028a4:	017d7840 	.word	0x017d7840
 80028a8:	46000000 	.word	0x46000000
 80028ac:	4c742400 	.word	0x4c742400
 80028b0:	4a742400 	.word	0x4a742400
 80028b4:	4bbebc20 	.word	0x4bbebc20

080028b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80028be:	f7ff fe81 	bl	80025c4 <HAL_RCC_GetSysClockFreq>
 80028c2:	4602      	mov	r2, r0
 80028c4:	4b10      	ldr	r3, [pc, #64]	@ (8002908 <HAL_RCC_GetHCLKFreq+0x50>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	490f      	ldr	r1, [pc, #60]	@ (800290c <HAL_RCC_GetHCLKFreq+0x54>)
 80028d0:	5ccb      	ldrb	r3, [r1, r3]
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	fa22 f303 	lsr.w	r3, r2, r3
 80028da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002908 <HAL_RCC_GetHCLKFreq+0x50>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	4a09      	ldr	r2, [pc, #36]	@ (800290c <HAL_RCC_GetHCLKFreq+0x54>)
 80028e6:	5cd3      	ldrb	r3, [r2, r3]
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	fa22 f303 	lsr.w	r3, r2, r3
 80028f2:	4a07      	ldr	r2, [pc, #28]	@ (8002910 <HAL_RCC_GetHCLKFreq+0x58>)
 80028f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028f6:	4a07      	ldr	r2, [pc, #28]	@ (8002914 <HAL_RCC_GetHCLKFreq+0x5c>)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80028fc:	4b04      	ldr	r3, [pc, #16]	@ (8002910 <HAL_RCC_GetHCLKFreq+0x58>)
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	58024400 	.word	0x58024400
 800290c:	080085c8 	.word	0x080085c8
 8002910:	24000004 	.word	0x24000004
 8002914:	24000000 	.word	0x24000000

08002918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800291c:	f7ff ffcc 	bl	80028b8 <HAL_RCC_GetHCLKFreq>
 8002920:	4602      	mov	r2, r0
 8002922:	4b06      	ldr	r3, [pc, #24]	@ (800293c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	091b      	lsrs	r3, r3, #4
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	4904      	ldr	r1, [pc, #16]	@ (8002940 <HAL_RCC_GetPCLK1Freq+0x28>)
 800292e:	5ccb      	ldrb	r3, [r1, r3]
 8002930:	f003 031f 	and.w	r3, r3, #31
 8002934:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002938:	4618      	mov	r0, r3
 800293a:	bd80      	pop	{r7, pc}
 800293c:	58024400 	.word	0x58024400
 8002940:	080085c8 	.word	0x080085c8

08002944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002948:	f7ff ffb6 	bl	80028b8 <HAL_RCC_GetHCLKFreq>
 800294c:	4602      	mov	r2, r0
 800294e:	4b06      	ldr	r3, [pc, #24]	@ (8002968 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	0a1b      	lsrs	r3, r3, #8
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	4904      	ldr	r1, [pc, #16]	@ (800296c <HAL_RCC_GetPCLK2Freq+0x28>)
 800295a:	5ccb      	ldrb	r3, [r1, r3]
 800295c:	f003 031f 	and.w	r3, r3, #31
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002964:	4618      	mov	r0, r3
 8002966:	bd80      	pop	{r7, pc}
 8002968:	58024400 	.word	0x58024400
 800296c:	080085c8 	.word	0x080085c8

08002970 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	223f      	movs	r2, #63	@ 0x3f
 800297e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002980:	4b1a      	ldr	r3, [pc, #104]	@ (80029ec <HAL_RCC_GetClockConfig+0x7c>)
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	f003 0207 	and.w	r2, r3, #7
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800298c:	4b17      	ldr	r3, [pc, #92]	@ (80029ec <HAL_RCC_GetClockConfig+0x7c>)
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002998:	4b14      	ldr	r3, [pc, #80]	@ (80029ec <HAL_RCC_GetClockConfig+0x7c>)
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	f003 020f 	and.w	r2, r3, #15
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80029a4:	4b11      	ldr	r3, [pc, #68]	@ (80029ec <HAL_RCC_GetClockConfig+0x7c>)
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80029b0:	4b0e      	ldr	r3, [pc, #56]	@ (80029ec <HAL_RCC_GetClockConfig+0x7c>)
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80029bc:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <HAL_RCC_GetClockConfig+0x7c>)
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80029c8:	4b08      	ldr	r3, [pc, #32]	@ (80029ec <HAL_RCC_GetClockConfig+0x7c>)
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029d4:	4b06      	ldr	r3, [pc, #24]	@ (80029f0 <HAL_RCC_GetClockConfig+0x80>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 020f 	and.w	r2, r3, #15
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	601a      	str	r2, [r3, #0]
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	58024400 	.word	0x58024400
 80029f0:	52002000 	.word	0x52002000

080029f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f8:	b0cc      	sub	sp, #304	@ 0x130
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a00:	2300      	movs	r3, #0
 8002a02:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a06:	2300      	movs	r3, #0
 8002a08:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a14:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002a18:	2500      	movs	r5, #0
 8002a1a:	ea54 0305 	orrs.w	r3, r4, r5
 8002a1e:	d049      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002a20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a26:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002a2a:	d02f      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002a2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002a30:	d828      	bhi.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a36:	d01a      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a3c:	d822      	bhi.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a46:	d007      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a48:	e01c      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a4a:	4bb8      	ldr	r3, [pc, #736]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4e:	4ab7      	ldr	r2, [pc, #732]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a56:	e01a      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a5c:	3308      	adds	r3, #8
 8002a5e:	2102      	movs	r1, #2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f001 fccf 	bl	8004404 <RCCEx_PLL2_Config>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a6c:	e00f      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002a6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a72:	3328      	adds	r3, #40	@ 0x28
 8002a74:	2102      	movs	r1, #2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f001 fd76 	bl	8004568 <RCCEx_PLL3_Config>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a82:	e004      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002a8a:	e000      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a8e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10a      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a96:	4ba5      	ldr	r3, [pc, #660]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a9a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002a9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002aa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002aa4:	4aa1      	ldr	r2, [pc, #644]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002aa6:	430b      	orrs	r3, r1
 8002aa8:	6513      	str	r3, [r2, #80]	@ 0x50
 8002aaa:	e003      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ab0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ab4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002ac0:	f04f 0900 	mov.w	r9, #0
 8002ac4:	ea58 0309 	orrs.w	r3, r8, r9
 8002ac8:	d047      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002aca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d82a      	bhi.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8002adc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ada:	bf00      	nop
 8002adc:	08002af1 	.word	0x08002af1
 8002ae0:	08002aff 	.word	0x08002aff
 8002ae4:	08002b15 	.word	0x08002b15
 8002ae8:	08002b33 	.word	0x08002b33
 8002aec:	08002b33 	.word	0x08002b33
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002af0:	4b8e      	ldr	r3, [pc, #568]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af4:	4a8d      	ldr	r2, [pc, #564]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002af6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002afa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002afc:	e01a      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002afe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b02:	3308      	adds	r3, #8
 8002b04:	2100      	movs	r1, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	f001 fc7c 	bl	8004404 <RCCEx_PLL2_Config>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b12:	e00f      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b18:	3328      	adds	r3, #40	@ 0x28
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f001 fd23 	bl	8004568 <RCCEx_PLL3_Config>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b28:	e004      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002b30:	e000      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b34:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b3c:	4b7b      	ldr	r3, [pc, #492]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b40:	f023 0107 	bic.w	r1, r3, #7
 8002b44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4a:	4a78      	ldr	r2, [pc, #480]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b50:	e003      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b52:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b56:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002b5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b62:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002b66:	f04f 0b00 	mov.w	fp, #0
 8002b6a:	ea5a 030b 	orrs.w	r3, sl, fp
 8002b6e:	d04c      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002b70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b7a:	d030      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002b7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b80:	d829      	bhi.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b82:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b84:	d02d      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002b86:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b88:	d825      	bhi.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b8a:	2b80      	cmp	r3, #128	@ 0x80
 8002b8c:	d018      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002b8e:	2b80      	cmp	r3, #128	@ 0x80
 8002b90:	d821      	bhi.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002b96:	2b40      	cmp	r3, #64	@ 0x40
 8002b98:	d007      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002b9a:	e01c      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b9c:	4b63      	ldr	r3, [pc, #396]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba0:	4a62      	ldr	r2, [pc, #392]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ba2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ba6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002ba8:	e01c      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002baa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bae:	3308      	adds	r3, #8
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f001 fc26 	bl	8004404 <RCCEx_PLL2_Config>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002bbe:	e011      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bc4:	3328      	adds	r3, #40	@ 0x28
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f001 fccd 	bl	8004568 <RCCEx_PLL3_Config>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002bd4:	e006      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002bdc:	e002      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002bde:	bf00      	nop
 8002be0:	e000      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002be4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10a      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002bec:	4b4f      	ldr	r3, [pc, #316]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bf0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002bf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfa:	4a4c      	ldr	r2, [pc, #304]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c00:	e003      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c06:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002c0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c12:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002c16:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002c20:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8002c24:	460b      	mov	r3, r1
 8002c26:	4313      	orrs	r3, r2
 8002c28:	d053      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002c2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002c32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c36:	d035      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002c38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c3c:	d82e      	bhi.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c3e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002c42:	d031      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002c44:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002c48:	d828      	bhi.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c4e:	d01a      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002c50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c54:	d822      	bhi.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002c5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c5e:	d007      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002c60:	e01c      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c62:	4b32      	ldr	r3, [pc, #200]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c66:	4a31      	ldr	r2, [pc, #196]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c6e:	e01c      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c74:	3308      	adds	r3, #8
 8002c76:	2100      	movs	r1, #0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f001 fbc3 	bl	8004404 <RCCEx_PLL2_Config>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002c84:	e011      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c8a:	3328      	adds	r3, #40	@ 0x28
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f001 fc6a 	bl	8004568 <RCCEx_PLL3_Config>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c9a:	e006      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002ca2:	e002      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002ca4:	bf00      	nop
 8002ca6:	e000      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002caa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10b      	bne.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002cba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002cc2:	4a1a      	ldr	r2, [pc, #104]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cc8:	e003      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002cce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002cd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cda:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002cde:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002ce8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002cec:	460b      	mov	r3, r1
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	d056      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002cf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cf6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002cfa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cfe:	d038      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002d00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d04:	d831      	bhi.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d0a:	d034      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002d0c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d10:	d82b      	bhi.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d16:	d01d      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002d18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d1c:	d825      	bhi.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d006      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002d22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d26:	d00a      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002d28:	e01f      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d2a:	bf00      	nop
 8002d2c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d30:	4ba2      	ldr	r3, [pc, #648]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d34:	4aa1      	ldr	r2, [pc, #644]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d3c:	e01c      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d42:	3308      	adds	r3, #8
 8002d44:	2100      	movs	r1, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f001 fb5c 	bl	8004404 <RCCEx_PLL2_Config>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002d52:	e011      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d58:	3328      	adds	r3, #40	@ 0x28
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f001 fc03 	bl	8004568 <RCCEx_PLL3_Config>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d68:	e006      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002d70:	e002      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002d72:	bf00      	nop
 8002d74:	e000      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d78:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10b      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002d80:	4b8e      	ldr	r3, [pc, #568]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d84:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002d88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002d90:	4a8a      	ldr	r2, [pc, #552]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d92:	430b      	orrs	r3, r1
 8002d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d96:	e003      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d98:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d9c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002da0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002dac:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002db0:	2300      	movs	r3, #0
 8002db2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002db6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	d03a      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002dc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc6:	2b30      	cmp	r3, #48	@ 0x30
 8002dc8:	d01f      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002dca:	2b30      	cmp	r3, #48	@ 0x30
 8002dcc:	d819      	bhi.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	d00c      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002dd2:	2b20      	cmp	r3, #32
 8002dd4:	d815      	bhi.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d019      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002dda:	2b10      	cmp	r3, #16
 8002ddc:	d111      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dde:	4b77      	ldr	r3, [pc, #476]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de2:	4a76      	ldr	r2, [pc, #472]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002de4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002de8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002dea:	e011      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002dec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002df0:	3308      	adds	r3, #8
 8002df2:	2102      	movs	r1, #2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f001 fb05 	bl	8004404 <RCCEx_PLL2_Config>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002e00:	e006      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002e08:	e002      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002e0a:	bf00      	nop
 8002e0c:	e000      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e10:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10a      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e18:	4b68      	ldr	r3, [pc, #416]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e1c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002e20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e26:	4a65      	ldr	r2, [pc, #404]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e2c:	e003      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e32:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002e36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002e42:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002e46:	2300      	movs	r3, #0
 8002e48:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002e4c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002e50:	460b      	mov	r3, r1
 8002e52:	4313      	orrs	r3, r2
 8002e54:	d051      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002e56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e60:	d035      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002e62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e66:	d82e      	bhi.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e6c:	d031      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002e6e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e72:	d828      	bhi.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e78:	d01a      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002e7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e7e:	d822      	bhi.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002e84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e88:	d007      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002e8a:	e01c      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e8c:	4b4b      	ldr	r3, [pc, #300]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e90:	4a4a      	ldr	r2, [pc, #296]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e98:	e01c      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e9e:	3308      	adds	r3, #8
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f001 faae 	bl	8004404 <RCCEx_PLL2_Config>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002eae:	e011      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002eb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002eb4:	3328      	adds	r3, #40	@ 0x28
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f001 fb55 	bl	8004568 <RCCEx_PLL3_Config>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ec4:	e006      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002ecc:	e002      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002ece:	bf00      	nop
 8002ed0:	e000      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ed4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10a      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002edc:	4b37      	ldr	r3, [pc, #220]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ee0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002ee4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ee8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002eea:	4a34      	ldr	r2, [pc, #208]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eec:	430b      	orrs	r3, r1
 8002eee:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ef0:	e003      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ef6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002efa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f02:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002f06:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002f10:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4313      	orrs	r3, r2
 8002f18:	d056      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002f1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f24:	d033      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002f26:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f2a:	d82c      	bhi.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f30:	d02f      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002f32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f36:	d826      	bhi.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f3c:	d02b      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002f3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f42:	d820      	bhi.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f48:	d012      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002f4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f4e:	d81a      	bhi.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d022      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f58:	d115      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f5e:	3308      	adds	r3, #8
 8002f60:	2101      	movs	r1, #1
 8002f62:	4618      	mov	r0, r3
 8002f64:	f001 fa4e 	bl	8004404 <RCCEx_PLL2_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002f6e:	e015      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f74:	3328      	adds	r3, #40	@ 0x28
 8002f76:	2101      	movs	r1, #1
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f001 faf5 	bl	8004568 <RCCEx_PLL3_Config>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002f84:	e00a      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002f8c:	e006      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f8e:	bf00      	nop
 8002f90:	e004      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f92:	bf00      	nop
 8002f94:	e002      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f96:	bf00      	nop
 8002f98:	e000      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f9c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10d      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002fa4:	4b05      	ldr	r3, [pc, #20]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fa8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002fac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fb2:	4a02      	ldr	r2, [pc, #8]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002fb8:	e006      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002fba:	bf00      	nop
 8002fbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002fc4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002fc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002fd4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002fde:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	d055      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002fe8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ff4:	d033      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ffa:	d82c      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003000:	d02f      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003006:	d826      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003008:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800300c:	d02b      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800300e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003012:	d820      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003014:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003018:	d012      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800301a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800301e:	d81a      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d022      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003024:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003028:	d115      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800302a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800302e:	3308      	adds	r3, #8
 8003030:	2101      	movs	r1, #1
 8003032:	4618      	mov	r0, r3
 8003034:	f001 f9e6 	bl	8004404 <RCCEx_PLL2_Config>
 8003038:	4603      	mov	r3, r0
 800303a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800303e:	e015      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003040:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003044:	3328      	adds	r3, #40	@ 0x28
 8003046:	2101      	movs	r1, #1
 8003048:	4618      	mov	r0, r3
 800304a:	f001 fa8d 	bl	8004568 <RCCEx_PLL3_Config>
 800304e:	4603      	mov	r3, r0
 8003050:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003054:	e00a      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800305c:	e006      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800305e:	bf00      	nop
 8003060:	e004      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003062:	bf00      	nop
 8003064:	e002      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003066:	bf00      	nop
 8003068:	e000      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800306a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800306c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10b      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003074:	4bb6      	ldr	r3, [pc, #728]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003078:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800307c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003080:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003084:	4ab2      	ldr	r2, [pc, #712]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003086:	430b      	orrs	r3, r1
 8003088:	6593      	str	r3, [r2, #88]	@ 0x58
 800308a:	e003      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800308c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003090:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003094:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80030a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80030a4:	2300      	movs	r3, #0
 80030a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030aa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4313      	orrs	r3, r2
 80030b2:	d02a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80030b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d011      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80030be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030c2:	d10a      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030c8:	3308      	adds	r3, #8
 80030ca:	2101      	movs	r1, #1
 80030cc:	4618      	mov	r0, r3
 80030ce:	f001 f999 	bl	8004404 <RCCEx_PLL2_Config>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80030d8:	e004      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80030e0:	e000      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80030e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10a      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80030ec:	4b98      	ldr	r3, [pc, #608]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80030ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80030f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030fa:	4a95      	ldr	r2, [pc, #596]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80030fc:	430b      	orrs	r3, r1
 80030fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003100:	e003      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003102:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003106:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800310a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003116:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800311a:	2300      	movs	r3, #0
 800311c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003120:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003124:	460b      	mov	r3, r1
 8003126:	4313      	orrs	r3, r2
 8003128:	d037      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800312a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800312e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003130:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003134:	d00e      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8003136:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800313a:	d816      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x776>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d018      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8003140:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003144:	d111      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003146:	4b82      	ldr	r3, [pc, #520]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314a:	4a81      	ldr	r2, [pc, #516]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800314c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003150:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003152:	e00f      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003154:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003158:	3308      	adds	r3, #8
 800315a:	2101      	movs	r1, #1
 800315c:	4618      	mov	r0, r3
 800315e:	f001 f951 	bl	8004404 <RCCEx_PLL2_Config>
 8003162:	4603      	mov	r3, r0
 8003164:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003168:	e004      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003170:	e000      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8003172:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003174:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10a      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800317c:	4b74      	ldr	r3, [pc, #464]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800317e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003180:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003184:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800318a:	4a71      	ldr	r2, [pc, #452]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800318c:	430b      	orrs	r3, r1
 800318e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003190:	e003      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003192:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003196:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800319a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800319e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a2:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80031a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031aa:	2300      	movs	r3, #0
 80031ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80031b0:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4313      	orrs	r3, r2
 80031b8:	d03a      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80031ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	d81d      	bhi.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80031c4:	a201      	add	r2, pc, #4	@ (adr r2, 80031cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80031c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ca:	bf00      	nop
 80031cc:	08003209 	.word	0x08003209
 80031d0:	080031dd 	.word	0x080031dd
 80031d4:	080031eb 	.word	0x080031eb
 80031d8:	08003209 	.word	0x08003209
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031dc:	4b5c      	ldr	r3, [pc, #368]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e0:	4a5b      	ldr	r2, [pc, #364]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80031e8:	e00f      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80031ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031ee:	3308      	adds	r3, #8
 80031f0:	2102      	movs	r1, #2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f001 f906 	bl	8004404 <RCCEx_PLL2_Config>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80031fe:	e004      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003206:	e000      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8003208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800320a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10a      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003212:	4b4f      	ldr	r3, [pc, #316]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003216:	f023 0103 	bic.w	r1, r3, #3
 800321a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800321e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003220:	4a4b      	ldr	r2, [pc, #300]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003222:	430b      	orrs	r3, r1
 8003224:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003226:	e003      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003228:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800322c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003230:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003238:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800323c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003240:	2300      	movs	r3, #0
 8003242:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003246:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800324a:	460b      	mov	r3, r1
 800324c:	4313      	orrs	r3, r2
 800324e:	f000 80a0 	beq.w	8003392 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003252:	4b40      	ldr	r3, [pc, #256]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a3f      	ldr	r2, [pc, #252]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800325c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800325e:	f7fd fff5 	bl	800124c <HAL_GetTick>
 8003262:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003266:	e00b      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003268:	f7fd fff0 	bl	800124c <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b64      	cmp	r3, #100	@ 0x64
 8003276:	d903      	bls.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800327e:	e005      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003280:	4b34      	ldr	r3, [pc, #208]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0ed      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 800328c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003290:	2b00      	cmp	r3, #0
 8003292:	d17a      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003294:	4b2e      	ldr	r3, [pc, #184]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003296:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003298:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800329c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80032a0:	4053      	eors	r3, r2
 80032a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d015      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032aa:	4b29      	ldr	r3, [pc, #164]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032b2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032b6:	4b26      	ldr	r3, [pc, #152]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ba:	4a25      	ldr	r2, [pc, #148]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032c0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032c2:	4b23      	ldr	r3, [pc, #140]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c6:	4a22      	ldr	r2, [pc, #136]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032cc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80032ce:	4a20      	ldr	r2, [pc, #128]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80032d4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80032d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80032de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032e2:	d118      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fd ffb2 	bl	800124c <HAL_GetTick>
 80032e8:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032ec:	e00d      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ee:	f7fd ffad 	bl	800124c <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80032f8:	1ad2      	subs	r2, r2, r3
 80032fa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80032fe:	429a      	cmp	r2, r3
 8003300:	d903      	bls.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8003308:	e005      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800330a:	4b11      	ldr	r3, [pc, #68]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0eb      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8003316:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800331a:	2b00      	cmp	r3, #0
 800331c:	d130      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800331e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003322:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800332a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800332e:	d115      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8003330:	4b07      	ldr	r3, [pc, #28]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003338:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800333c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003340:	091a      	lsrs	r2, r3, #4
 8003342:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8003344:	4013      	ands	r3, r2
 8003346:	4a02      	ldr	r2, [pc, #8]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003348:	430b      	orrs	r3, r1
 800334a:	6113      	str	r3, [r2, #16]
 800334c:	e00c      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800334e:	bf00      	nop
 8003350:	58024400 	.word	0x58024400
 8003354:	58024800 	.word	0x58024800
 8003358:	00ffffcf 	.word	0x00ffffcf
 800335c:	4bd4      	ldr	r3, [pc, #848]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	4ad3      	ldr	r2, [pc, #844]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003362:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003366:	6113      	str	r3, [r2, #16]
 8003368:	4bd1      	ldr	r3, [pc, #836]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800336a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800336c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003370:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003378:	4acd      	ldr	r2, [pc, #820]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800337a:	430b      	orrs	r3, r1
 800337c:	6713      	str	r3, [r2, #112]	@ 0x70
 800337e:	e008      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003380:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003384:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8003388:	e003      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800338a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800338e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003392:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339a:	f002 0301 	and.w	r3, r2, #1
 800339e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033a2:	2300      	movs	r3, #0
 80033a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80033a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f000 808b 	beq.w	80034ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80033b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033bc:	2b28      	cmp	r3, #40	@ 0x28
 80033be:	d86b      	bhi.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80033c0:	a201      	add	r2, pc, #4	@ (adr r2, 80033c8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80033c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c6:	bf00      	nop
 80033c8:	080034a1 	.word	0x080034a1
 80033cc:	08003499 	.word	0x08003499
 80033d0:	08003499 	.word	0x08003499
 80033d4:	08003499 	.word	0x08003499
 80033d8:	08003499 	.word	0x08003499
 80033dc:	08003499 	.word	0x08003499
 80033e0:	08003499 	.word	0x08003499
 80033e4:	08003499 	.word	0x08003499
 80033e8:	0800346d 	.word	0x0800346d
 80033ec:	08003499 	.word	0x08003499
 80033f0:	08003499 	.word	0x08003499
 80033f4:	08003499 	.word	0x08003499
 80033f8:	08003499 	.word	0x08003499
 80033fc:	08003499 	.word	0x08003499
 8003400:	08003499 	.word	0x08003499
 8003404:	08003499 	.word	0x08003499
 8003408:	08003483 	.word	0x08003483
 800340c:	08003499 	.word	0x08003499
 8003410:	08003499 	.word	0x08003499
 8003414:	08003499 	.word	0x08003499
 8003418:	08003499 	.word	0x08003499
 800341c:	08003499 	.word	0x08003499
 8003420:	08003499 	.word	0x08003499
 8003424:	08003499 	.word	0x08003499
 8003428:	080034a1 	.word	0x080034a1
 800342c:	08003499 	.word	0x08003499
 8003430:	08003499 	.word	0x08003499
 8003434:	08003499 	.word	0x08003499
 8003438:	08003499 	.word	0x08003499
 800343c:	08003499 	.word	0x08003499
 8003440:	08003499 	.word	0x08003499
 8003444:	08003499 	.word	0x08003499
 8003448:	080034a1 	.word	0x080034a1
 800344c:	08003499 	.word	0x08003499
 8003450:	08003499 	.word	0x08003499
 8003454:	08003499 	.word	0x08003499
 8003458:	08003499 	.word	0x08003499
 800345c:	08003499 	.word	0x08003499
 8003460:	08003499 	.word	0x08003499
 8003464:	08003499 	.word	0x08003499
 8003468:	080034a1 	.word	0x080034a1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800346c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003470:	3308      	adds	r3, #8
 8003472:	2101      	movs	r1, #1
 8003474:	4618      	mov	r0, r3
 8003476:	f000 ffc5 	bl	8004404 <RCCEx_PLL2_Config>
 800347a:	4603      	mov	r3, r0
 800347c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003480:	e00f      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003482:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003486:	3328      	adds	r3, #40	@ 0x28
 8003488:	2101      	movs	r1, #1
 800348a:	4618      	mov	r0, r3
 800348c:	f001 f86c 	bl	8004568 <RCCEx_PLL3_Config>
 8003490:	4603      	mov	r3, r0
 8003492:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003496:	e004      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800349e:	e000      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80034a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10b      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80034aa:	4b81      	ldr	r3, [pc, #516]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80034ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80034b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034ba:	4a7d      	ldr	r2, [pc, #500]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80034bc:	430b      	orrs	r3, r1
 80034be:	6553      	str	r3, [r2, #84]	@ 0x54
 80034c0:	e003      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034c6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80034ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d2:	f002 0302 	and.w	r3, r2, #2
 80034d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034da:	2300      	movs	r3, #0
 80034dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80034e0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80034e4:	460b      	mov	r3, r1
 80034e6:	4313      	orrs	r3, r2
 80034e8:	d042      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80034ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034f0:	2b05      	cmp	r3, #5
 80034f2:	d825      	bhi.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 80034f4:	a201      	add	r2, pc, #4	@ (adr r2, 80034fc <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	08003549 	.word	0x08003549
 8003500:	08003515 	.word	0x08003515
 8003504:	0800352b 	.word	0x0800352b
 8003508:	08003549 	.word	0x08003549
 800350c:	08003549 	.word	0x08003549
 8003510:	08003549 	.word	0x08003549
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003514:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003518:	3308      	adds	r3, #8
 800351a:	2101      	movs	r1, #1
 800351c:	4618      	mov	r0, r3
 800351e:	f000 ff71 	bl	8004404 <RCCEx_PLL2_Config>
 8003522:	4603      	mov	r3, r0
 8003524:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003528:	e00f      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800352a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800352e:	3328      	adds	r3, #40	@ 0x28
 8003530:	2101      	movs	r1, #1
 8003532:	4618      	mov	r0, r3
 8003534:	f001 f818 	bl	8004568 <RCCEx_PLL3_Config>
 8003538:	4603      	mov	r3, r0
 800353a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800353e:	e004      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003546:	e000      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8003548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800354a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10a      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003552:	4b57      	ldr	r3, [pc, #348]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003556:	f023 0107 	bic.w	r1, r3, #7
 800355a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800355e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003560:	4a53      	ldr	r2, [pc, #332]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003562:	430b      	orrs	r3, r1
 8003564:	6553      	str	r3, [r2, #84]	@ 0x54
 8003566:	e003      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003568:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800356c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003570:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003578:	f002 0304 	and.w	r3, r2, #4
 800357c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003580:	2300      	movs	r3, #0
 8003582:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003586:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800358a:	460b      	mov	r3, r1
 800358c:	4313      	orrs	r3, r2
 800358e:	d044      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003590:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003594:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003598:	2b05      	cmp	r3, #5
 800359a:	d825      	bhi.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 800359c:	a201      	add	r2, pc, #4	@ (adr r2, 80035a4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 800359e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a2:	bf00      	nop
 80035a4:	080035f1 	.word	0x080035f1
 80035a8:	080035bd 	.word	0x080035bd
 80035ac:	080035d3 	.word	0x080035d3
 80035b0:	080035f1 	.word	0x080035f1
 80035b4:	080035f1 	.word	0x080035f1
 80035b8:	080035f1 	.word	0x080035f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035c0:	3308      	adds	r3, #8
 80035c2:	2101      	movs	r1, #1
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 ff1d 	bl	8004404 <RCCEx_PLL2_Config>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80035d0:	e00f      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035d6:	3328      	adds	r3, #40	@ 0x28
 80035d8:	2101      	movs	r1, #1
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 ffc4 	bl	8004568 <RCCEx_PLL3_Config>
 80035e0:	4603      	mov	r3, r0
 80035e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80035e6:	e004      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80035ee:	e000      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 80035f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10b      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035fa:	4b2d      	ldr	r3, [pc, #180]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80035fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fe:	f023 0107 	bic.w	r1, r3, #7
 8003602:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003606:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800360a:	4a29      	ldr	r2, [pc, #164]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800360c:	430b      	orrs	r3, r1
 800360e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003610:	e003      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003612:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003616:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800361a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003622:	f002 0320 	and.w	r3, r2, #32
 8003626:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800362a:	2300      	movs	r3, #0
 800362c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003630:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003634:	460b      	mov	r3, r1
 8003636:	4313      	orrs	r3, r2
 8003638:	d057      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800363a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800363e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003642:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003646:	d035      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8003648:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800364c:	d82c      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800364e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003652:	d031      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8003654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003658:	d826      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800365a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800365e:	d02d      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8003660:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003664:	d820      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003666:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800366a:	d012      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 800366c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003670:	d81a      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003672:	2b00      	cmp	r3, #0
 8003674:	d024      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8003676:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800367a:	d115      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800367c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003680:	3308      	adds	r3, #8
 8003682:	2100      	movs	r1, #0
 8003684:	4618      	mov	r0, r3
 8003686:	f000 febd 	bl	8004404 <RCCEx_PLL2_Config>
 800368a:	4603      	mov	r3, r0
 800368c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003690:	e017      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003692:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003696:	3328      	adds	r3, #40	@ 0x28
 8003698:	2102      	movs	r1, #2
 800369a:	4618      	mov	r0, r3
 800369c:	f000 ff64 	bl	8004568 <RCCEx_PLL3_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80036a6:	e00c      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80036ae:	e008      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80036b0:	58024400 	.word	0x58024400
        break;
 80036b4:	bf00      	nop
 80036b6:	e004      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80036b8:	bf00      	nop
 80036ba:	e002      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80036bc:	bf00      	nop
 80036be:	e000      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80036c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10b      	bne.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036ca:	4bc2      	ldr	r3, [pc, #776]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80036d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036da:	4abe      	ldr	r2, [pc, #760]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036dc:	430b      	orrs	r3, r1
 80036de:	6553      	str	r3, [r2, #84]	@ 0x54
 80036e0:	e003      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036e6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80036ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80036f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036fa:	2300      	movs	r3, #0
 80036fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003700:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003704:	460b      	mov	r3, r1
 8003706:	4313      	orrs	r3, r2
 8003708:	d055      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800370a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800370e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003712:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003716:	d033      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8003718:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800371c:	d82c      	bhi.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800371e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003722:	d02f      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8003724:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003728:	d826      	bhi.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800372a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800372e:	d02b      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8003730:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003734:	d820      	bhi.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003736:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800373a:	d012      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 800373c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003740:	d81a      	bhi.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003742:	2b00      	cmp	r3, #0
 8003744:	d022      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8003746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800374a:	d115      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800374c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003750:	3308      	adds	r3, #8
 8003752:	2100      	movs	r1, #0
 8003754:	4618      	mov	r0, r3
 8003756:	f000 fe55 	bl	8004404 <RCCEx_PLL2_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003760:	e015      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003762:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003766:	3328      	adds	r3, #40	@ 0x28
 8003768:	2102      	movs	r1, #2
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fefc 	bl	8004568 <RCCEx_PLL3_Config>
 8003770:	4603      	mov	r3, r0
 8003772:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003776:	e00a      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800377e:	e006      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003780:	bf00      	nop
 8003782:	e004      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003784:	bf00      	nop
 8003786:	e002      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003788:	bf00      	nop
 800378a:	e000      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800378c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800378e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10b      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003796:	4b8f      	ldr	r3, [pc, #572]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800379e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80037a6:	4a8b      	ldr	r2, [pc, #556]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80037a8:	430b      	orrs	r3, r1
 80037aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80037ac:	e003      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80037b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80037b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037be:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80037c2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80037c6:	2300      	movs	r3, #0
 80037c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80037cc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80037d0:	460b      	mov	r3, r1
 80037d2:	4313      	orrs	r3, r2
 80037d4:	d055      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80037d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80037de:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80037e2:	d033      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80037e4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80037e8:	d82c      	bhi.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80037ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037ee:	d02f      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80037f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037f4:	d826      	bhi.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80037f6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80037fa:	d02b      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80037fc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003800:	d820      	bhi.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003802:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003806:	d012      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8003808:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800380c:	d81a      	bhi.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800380e:	2b00      	cmp	r3, #0
 8003810:	d022      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8003812:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003816:	d115      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003818:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800381c:	3308      	adds	r3, #8
 800381e:	2100      	movs	r1, #0
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fdef 	bl	8004404 <RCCEx_PLL2_Config>
 8003826:	4603      	mov	r3, r0
 8003828:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800382c:	e015      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800382e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003832:	3328      	adds	r3, #40	@ 0x28
 8003834:	2102      	movs	r1, #2
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fe96 	bl	8004568 <RCCEx_PLL3_Config>
 800383c:	4603      	mov	r3, r0
 800383e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003842:	e00a      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800384a:	e006      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800384c:	bf00      	nop
 800384e:	e004      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003850:	bf00      	nop
 8003852:	e002      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003854:	bf00      	nop
 8003856:	e000      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800385a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10b      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003862:	4b5c      	ldr	r3, [pc, #368]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003866:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800386a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800386e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003872:	4a58      	ldr	r2, [pc, #352]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003874:	430b      	orrs	r3, r1
 8003876:	6593      	str	r3, [r2, #88]	@ 0x58
 8003878:	e003      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800387e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003882:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388a:	f002 0308 	and.w	r3, r2, #8
 800388e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003892:	2300      	movs	r3, #0
 8003894:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003898:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800389c:	460b      	mov	r3, r1
 800389e:	4313      	orrs	r3, r2
 80038a0:	d01e      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80038a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038ae:	d10c      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80038b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038b4:	3328      	adds	r3, #40	@ 0x28
 80038b6:	2102      	movs	r1, #2
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 fe55 	bl	8004568 <RCCEx_PLL3_Config>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80038ca:	4b42      	ldr	r3, [pc, #264]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038da:	4a3e      	ldr	r2, [pc, #248]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038dc:	430b      	orrs	r3, r1
 80038de:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e8:	f002 0310 	and.w	r3, r2, #16
 80038ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80038f0:	2300      	movs	r3, #0
 80038f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80038f6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80038fa:	460b      	mov	r3, r1
 80038fc:	4313      	orrs	r3, r2
 80038fe:	d01e      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003900:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003904:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003908:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800390c:	d10c      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800390e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003912:	3328      	adds	r3, #40	@ 0x28
 8003914:	2102      	movs	r1, #2
 8003916:	4618      	mov	r0, r3
 8003918:	f000 fe26 	bl	8004568 <RCCEx_PLL3_Config>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003928:	4b2a      	ldr	r3, [pc, #168]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800392a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003930:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003934:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003938:	4a26      	ldr	r2, [pc, #152]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800393a:	430b      	orrs	r3, r1
 800393c:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800393e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003946:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800394a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800394e:	2300      	movs	r3, #0
 8003950:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003954:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003958:	460b      	mov	r3, r1
 800395a:	4313      	orrs	r3, r2
 800395c:	d040      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800395e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003962:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003966:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800396a:	d022      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 800396c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003970:	d81b      	bhi.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8003976:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800397a:	d00b      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 800397c:	e015      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800397e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003982:	3308      	adds	r3, #8
 8003984:	2100      	movs	r1, #0
 8003986:	4618      	mov	r0, r3
 8003988:	f000 fd3c 	bl	8004404 <RCCEx_PLL2_Config>
 800398c:	4603      	mov	r3, r0
 800398e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003992:	e00f      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003994:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003998:	3328      	adds	r3, #40	@ 0x28
 800399a:	2102      	movs	r1, #2
 800399c:	4618      	mov	r0, r3
 800399e:	f000 fde3 	bl	8004568 <RCCEx_PLL3_Config>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80039a8:	e004      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80039b0:	e000      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80039b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10d      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039bc:	4b05      	ldr	r3, [pc, #20]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80039c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039cc:	4a01      	ldr	r2, [pc, #4]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039ce:	430b      	orrs	r3, r1
 80039d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80039d2:	e005      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80039d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039dc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80039ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039ee:	2300      	movs	r3, #0
 80039f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80039f2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80039f6:	460b      	mov	r3, r1
 80039f8:	4313      	orrs	r3, r2
 80039fa:	d03b      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80039fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a08:	d01f      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8003a0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a0e:	d818      	bhi.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003a10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a14:	d003      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8003a16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a1a:	d007      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003a1c:	e011      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a1e:	4b64      	ldr	r3, [pc, #400]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a22:	4a63      	ldr	r2, [pc, #396]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003a2a:	e00f      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a30:	3328      	adds	r3, #40	@ 0x28
 8003a32:	2101      	movs	r1, #1
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 fd97 	bl	8004568 <RCCEx_PLL3_Config>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003a40:	e004      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003a48:	e000      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8003a4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a4c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10b      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a54:	4b56      	ldr	r3, [pc, #344]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a58:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003a5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a64:	4a52      	ldr	r2, [pc, #328]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003a66:	430b      	orrs	r3, r1
 8003a68:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a6a:	e003      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a70:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003a74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003a80:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a82:	2300      	movs	r3, #0
 8003a84:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a86:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	d031      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003a90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8003a9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a9e:	d007      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003aa0:	e011      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aa2:	4b43      	ldr	r3, [pc, #268]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa6:	4a42      	ldr	r2, [pc, #264]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003aae:	e00e      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ab0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	2102      	movs	r1, #2
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fca3 	bl	8004404 <RCCEx_PLL2_Config>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003ac4:	e003      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ace:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003ad6:	4b36      	ldr	r3, [pc, #216]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ada:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ade:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae4:	4a32      	ldr	r2, [pc, #200]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003ae6:	430b      	orrs	r3, r1
 8003ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003aea:	e003      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003af0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003af4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003b00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b02:	2300      	movs	r3, #0
 8003b04:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b06:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	d00c      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b14:	3328      	adds	r3, #40	@ 0x28
 8003b16:	2102      	movs	r1, #2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fd25 	bl	8004568 <RCCEx_PLL3_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003b2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b32:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003b36:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b38:	2300      	movs	r3, #0
 8003b3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b3c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003b40:	460b      	mov	r3, r1
 8003b42:	4313      	orrs	r3, r2
 8003b44:	d03a      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003b46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b52:	d018      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003b54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b58:	d811      	bhi.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003b5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b5e:	d014      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b64:	d80b      	bhi.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d011      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8003b6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b6e:	d106      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b70:	4b0f      	ldr	r3, [pc, #60]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b74:	4a0e      	ldr	r2, [pc, #56]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003b7c:	e008      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003b84:	e004      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003b86:	bf00      	nop
 8003b88:	e002      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003b8a:	bf00      	nop
 8003b8c:	e000      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003b8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b90:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10d      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b98:	4b05      	ldr	r3, [pc, #20]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b9c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ba0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ba8:	4a01      	ldr	r2, [pc, #4]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003baa:	430b      	orrs	r3, r1
 8003bac:	6553      	str	r3, [r2, #84]	@ 0x54
 8003bae:	e005      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8003bb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003bb8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003bc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003bca:	2300      	movs	r3, #0
 8003bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	d009      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003bd8:	4baa      	ldr	r3, [pc, #680]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bdc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003be0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003be4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003be6:	4aa7      	ldr	r2, [pc, #668]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003bec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003bf8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bfe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003c02:	460b      	mov	r3, r1
 8003c04:	4313      	orrs	r3, r2
 8003c06:	d00a      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003c08:	4b9e      	ldr	r3, [pc, #632]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003c10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c14:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003c18:	4a9a      	ldr	r2, [pc, #616]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c26:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c30:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003c34:	460b      	mov	r3, r1
 8003c36:	4313      	orrs	r3, r2
 8003c38:	d009      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c3a:	4b92      	ldr	r3, [pc, #584]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c3e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003c42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c48:	4a8e      	ldr	r2, [pc, #568]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c4a:	430b      	orrs	r3, r1
 8003c4c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003c4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c56:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003c5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c60:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003c64:	460b      	mov	r3, r1
 8003c66:	4313      	orrs	r3, r2
 8003c68:	d00e      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c6a:	4b86      	ldr	r3, [pc, #536]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	4a85      	ldr	r2, [pc, #532]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c70:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003c74:	6113      	str	r3, [r2, #16]
 8003c76:	4b83      	ldr	r3, [pc, #524]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c78:	6919      	ldr	r1, [r3, #16]
 8003c7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c7e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003c82:	4a80      	ldr	r2, [pc, #512]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c84:	430b      	orrs	r3, r1
 8003c86:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003c88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c90:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003c94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c96:	2300      	movs	r3, #0
 8003c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c9a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	d009      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003ca4:	4b77      	ldr	r3, [pc, #476]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003cac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb2:	4a74      	ldr	r2, [pc, #464]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003cc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	d00a      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cd4:	4b6b      	ldr	r3, [pc, #428]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003cdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce4:	4a67      	ldr	r2, [pc, #412]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ce6:	430b      	orrs	r3, r1
 8003ce8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003cea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cfc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003d00:	460b      	mov	r3, r1
 8003d02:	4313      	orrs	r3, r2
 8003d04:	d011      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d0a:	3308      	adds	r3, #8
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fb78 	bl	8004404 <RCCEx_PLL2_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003d1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d22:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d26:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003d2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d32:	2100      	movs	r1, #0
 8003d34:	6239      	str	r1, [r7, #32]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d3c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003d40:	460b      	mov	r3, r1
 8003d42:	4313      	orrs	r3, r2
 8003d44:	d011      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d4a:	3308      	adds	r3, #8
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fb58 	bl	8004404 <RCCEx_PLL2_Config>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003d5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d66:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003d6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d72:	2100      	movs	r1, #0
 8003d74:	61b9      	str	r1, [r7, #24]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	61fb      	str	r3, [r7, #28]
 8003d7c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003d80:	460b      	mov	r3, r1
 8003d82:	4313      	orrs	r3, r2
 8003d84:	d011      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	2102      	movs	r1, #2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fb38 	bl	8004404 <RCCEx_PLL2_Config>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003d9a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003da6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003daa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db2:	2100      	movs	r1, #0
 8003db4:	6139      	str	r1, [r7, #16]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	d011      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dca:	3328      	adds	r3, #40	@ 0x28
 8003dcc:	2100      	movs	r1, #0
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 fbca 	bl	8004568 <RCCEx_PLL3_Config>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8003dda:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003de6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003dea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df2:	2100      	movs	r1, #0
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	f003 0310 	and.w	r3, r3, #16
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e00:	460b      	mov	r3, r1
 8003e02:	4313      	orrs	r3, r2
 8003e04:	d011      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e0a:	3328      	adds	r3, #40	@ 0x28
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fbaa 	bl	8004568 <RCCEx_PLL3_Config>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003e1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e22:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e26:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003e2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e32:	2100      	movs	r1, #0
 8003e34:	6039      	str	r1, [r7, #0]
 8003e36:	f003 0320 	and.w	r3, r3, #32
 8003e3a:	607b      	str	r3, [r7, #4]
 8003e3c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003e40:	460b      	mov	r3, r1
 8003e42:	4313      	orrs	r3, r2
 8003e44:	d011      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e4a:	3328      	adds	r3, #40	@ 0x28
 8003e4c:	2102      	movs	r1, #2
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fb8a 	bl	8004568 <RCCEx_PLL3_Config>
 8003e54:	4603      	mov	r3, r0
 8003e56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003e5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e66:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8003e6a:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	e000      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e84:	58024400 	.word	0x58024400

08003e88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003e8c:	f7fe fd14 	bl	80028b8 <HAL_RCC_GetHCLKFreq>
 8003e90:	4602      	mov	r2, r0
 8003e92:	4b06      	ldr	r3, [pc, #24]	@ (8003eac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	091b      	lsrs	r3, r3, #4
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	4904      	ldr	r1, [pc, #16]	@ (8003eb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003e9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	58024400 	.word	0x58024400
 8003eb0:	080085c8 	.word	0x080085c8

08003eb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b089      	sub	sp, #36	@ 0x24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ebc:	4ba1      	ldr	r3, [pc, #644]	@ (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003ec6:	4b9f      	ldr	r3, [pc, #636]	@ (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eca:	0b1b      	lsrs	r3, r3, #12
 8003ecc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ed0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003ed2:	4b9c      	ldr	r3, [pc, #624]	@ (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed6:	091b      	lsrs	r3, r3, #4
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003ede:	4b99      	ldr	r3, [pc, #612]	@ (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee2:	08db      	lsrs	r3, r3, #3
 8003ee4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	fb02 f303 	mul.w	r3, r2, r3
 8003eee:	ee07 3a90 	vmov	s15, r3
 8003ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 8111 	beq.w	8004124 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	f000 8083 	beq.w	8004010 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	f200 80a1 	bhi.w	8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d056      	beq.n	8003fcc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003f1e:	e099      	b.n	8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f20:	4b88      	ldr	r3, [pc, #544]	@ (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0320 	and.w	r3, r3, #32
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d02d      	beq.n	8003f88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f2c:	4b85      	ldr	r3, [pc, #532]	@ (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	08db      	lsrs	r3, r3, #3
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	4a84      	ldr	r2, [pc, #528]	@ (8004148 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	ee07 3a90 	vmov	s15, r3
 8003f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	ee07 3a90 	vmov	s15, r3
 8003f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f56:	4b7b      	ldr	r3, [pc, #492]	@ (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f5e:	ee07 3a90 	vmov	s15, r3
 8003f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800414c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003f86:	e087      	b.n	8004098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004150 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f9a:	4b6a      	ldr	r3, [pc, #424]	@ (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800414c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fca:	e065      	b.n	8004098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fd6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004154 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fde:	4b59      	ldr	r3, [pc, #356]	@ (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fe6:	ee07 3a90 	vmov	s15, r3
 8003fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ff2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800414c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800400a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800400e:	e043      	b.n	8004098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800401a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800401e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004022:	4b48      	ldr	r3, [pc, #288]	@ (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800402a:	ee07 3a90 	vmov	s15, r3
 800402e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004032:	ed97 6a03 	vldr	s12, [r7, #12]
 8004036:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800414c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800403a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800403e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800404a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800404e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004052:	e021      	b.n	8004098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	ee07 3a90 	vmov	s15, r3
 800405a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800405e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004154 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004066:	4b37      	ldr	r3, [pc, #220]	@ (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406e:	ee07 3a90 	vmov	s15, r3
 8004072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004076:	ed97 6a03 	vldr	s12, [r7, #12]
 800407a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800414c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800407e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800408a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800408e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004092:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004096:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004098:	4b2a      	ldr	r3, [pc, #168]	@ (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800409a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409c:	0a5b      	lsrs	r3, r3, #9
 800409e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80040b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040be:	ee17 2a90 	vmov	r2, s15
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80040c6:	4b1f      	ldr	r3, [pc, #124]	@ (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ca:	0c1b      	lsrs	r3, r3, #16
 80040cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040d0:	ee07 3a90 	vmov	s15, r3
 80040d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80040e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040ec:	ee17 2a90 	vmov	r2, s15
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80040f4:	4b13      	ldr	r3, [pc, #76]	@ (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f8:	0e1b      	lsrs	r3, r3, #24
 80040fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040fe:	ee07 3a90 	vmov	s15, r3
 8004102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004106:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800410a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800410e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800411a:	ee17 2a90 	vmov	r2, s15
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004122:	e008      	b.n	8004136 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	609a      	str	r2, [r3, #8]
}
 8004136:	bf00      	nop
 8004138:	3724      	adds	r7, #36	@ 0x24
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	58024400 	.word	0x58024400
 8004148:	03d09000 	.word	0x03d09000
 800414c:	46000000 	.word	0x46000000
 8004150:	4c742400 	.word	0x4c742400
 8004154:	4a742400 	.word	0x4a742400
 8004158:	4bbebc20 	.word	0x4bbebc20

0800415c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800415c:	b480      	push	{r7}
 800415e:	b089      	sub	sp, #36	@ 0x24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004164:	4ba1      	ldr	r3, [pc, #644]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004168:	f003 0303 	and.w	r3, r3, #3
 800416c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800416e:	4b9f      	ldr	r3, [pc, #636]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004172:	0d1b      	lsrs	r3, r3, #20
 8004174:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004178:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800417a:	4b9c      	ldr	r3, [pc, #624]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800417c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417e:	0a1b      	lsrs	r3, r3, #8
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004186:	4b99      	ldr	r3, [pc, #612]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418a:	08db      	lsrs	r3, r3, #3
 800418c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	fb02 f303 	mul.w	r3, r2, r3
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 8111 	beq.w	80043cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	f000 8083 	beq.w	80042b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	f200 80a1 	bhi.w	80042fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d056      	beq.n	8004274 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80041c6:	e099      	b.n	80042fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041c8:	4b88      	ldr	r3, [pc, #544]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0320 	and.w	r3, r3, #32
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d02d      	beq.n	8004230 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041d4:	4b85      	ldr	r3, [pc, #532]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	08db      	lsrs	r3, r3, #3
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	4a84      	ldr	r2, [pc, #528]	@ (80043f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80041e0:	fa22 f303 	lsr.w	r3, r2, r3
 80041e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	ee07 3a90 	vmov	s15, r3
 80041ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	ee07 3a90 	vmov	s15, r3
 80041f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041fe:	4b7b      	ldr	r3, [pc, #492]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004206:	ee07 3a90 	vmov	s15, r3
 800420a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800420e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004212:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800421a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800421e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800422a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800422e:	e087      	b.n	8004340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	ee07 3a90 	vmov	s15, r3
 8004236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80043f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800423e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004242:	4b6a      	ldr	r3, [pc, #424]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800424a:	ee07 3a90 	vmov	s15, r3
 800424e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004252:	ed97 6a03 	vldr	s12, [r7, #12]
 8004256:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800425a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800425e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004262:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800426a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800426e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004272:	e065      	b.n	8004340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	ee07 3a90 	vmov	s15, r3
 800427a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800427e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004286:	4b59      	ldr	r3, [pc, #356]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800428e:	ee07 3a90 	vmov	s15, r3
 8004292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004296:	ed97 6a03 	vldr	s12, [r7, #12]
 800429a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800429e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042b6:	e043      	b.n	8004340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	ee07 3a90 	vmov	s15, r3
 80042be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004400 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80042c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ca:	4b48      	ldr	r3, [pc, #288]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042da:	ed97 6a03 	vldr	s12, [r7, #12]
 80042de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042fa:	e021      	b.n	8004340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	ee07 3a90 	vmov	s15, r3
 8004302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004306:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800430a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800430e:	4b37      	ldr	r3, [pc, #220]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004316:	ee07 3a90 	vmov	s15, r3
 800431a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800431e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004322:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800432a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800432e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800433a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800433e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004340:	4b2a      	ldr	r3, [pc, #168]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004344:	0a5b      	lsrs	r3, r3, #9
 8004346:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004352:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004356:	ee37 7a87 	vadd.f32	s14, s15, s14
 800435a:	edd7 6a07 	vldr	s13, [r7, #28]
 800435e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004366:	ee17 2a90 	vmov	r2, s15
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800436e:	4b1f      	ldr	r3, [pc, #124]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	0c1b      	lsrs	r3, r3, #16
 8004374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004378:	ee07 3a90 	vmov	s15, r3
 800437c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004380:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004384:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004388:	edd7 6a07 	vldr	s13, [r7, #28]
 800438c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004394:	ee17 2a90 	vmov	r2, s15
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800439c:	4b13      	ldr	r3, [pc, #76]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800439e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a0:	0e1b      	lsrs	r3, r3, #24
 80043a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80043ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043c2:	ee17 2a90 	vmov	r2, s15
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80043ca:	e008      	b.n	80043de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	609a      	str	r2, [r3, #8]
}
 80043de:	bf00      	nop
 80043e0:	3724      	adds	r7, #36	@ 0x24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	58024400 	.word	0x58024400
 80043f0:	03d09000 	.word	0x03d09000
 80043f4:	46000000 	.word	0x46000000
 80043f8:	4c742400 	.word	0x4c742400
 80043fc:	4a742400 	.word	0x4a742400
 8004400:	4bbebc20 	.word	0x4bbebc20

08004404 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004412:	4b53      	ldr	r3, [pc, #332]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 8004414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	2b03      	cmp	r3, #3
 800441c:	d101      	bne.n	8004422 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e099      	b.n	8004556 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004422:	4b4f      	ldr	r3, [pc, #316]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a4e      	ldr	r2, [pc, #312]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 8004428:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800442c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800442e:	f7fc ff0d 	bl	800124c <HAL_GetTick>
 8004432:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004434:	e008      	b.n	8004448 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004436:	f7fc ff09 	bl	800124c <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e086      	b.n	8004556 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004448:	4b45      	ldr	r3, [pc, #276]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1f0      	bne.n	8004436 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004454:	4b42      	ldr	r3, [pc, #264]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 8004456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004458:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	031b      	lsls	r3, r3, #12
 8004462:	493f      	ldr	r1, [pc, #252]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 8004464:	4313      	orrs	r3, r2
 8004466:	628b      	str	r3, [r1, #40]	@ 0x28
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	3b01      	subs	r3, #1
 800446e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	3b01      	subs	r3, #1
 8004478:	025b      	lsls	r3, r3, #9
 800447a:	b29b      	uxth	r3, r3
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	3b01      	subs	r3, #1
 8004484:	041b      	lsls	r3, r3, #16
 8004486:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	3b01      	subs	r3, #1
 8004492:	061b      	lsls	r3, r3, #24
 8004494:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004498:	4931      	ldr	r1, [pc, #196]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 800449a:	4313      	orrs	r3, r2
 800449c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800449e:	4b30      	ldr	r3, [pc, #192]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	492d      	ldr	r1, [pc, #180]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80044b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b4:	f023 0220 	bic.w	r2, r3, #32
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	4928      	ldr	r1, [pc, #160]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80044c2:	4b27      	ldr	r3, [pc, #156]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c6:	4a26      	ldr	r2, [pc, #152]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044c8:	f023 0310 	bic.w	r3, r3, #16
 80044cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80044ce:	4b24      	ldr	r3, [pc, #144]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044d2:	4b24      	ldr	r3, [pc, #144]	@ (8004564 <RCCEx_PLL2_Config+0x160>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	69d2      	ldr	r2, [r2, #28]
 80044da:	00d2      	lsls	r2, r2, #3
 80044dc:	4920      	ldr	r1, [pc, #128]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80044e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044e8:	f043 0310 	orr.w	r3, r3, #16
 80044ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d106      	bne.n	8004502 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80044f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f8:	4a19      	ldr	r2, [pc, #100]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80044fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004500:	e00f      	b.n	8004522 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d106      	bne.n	8004516 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004508:	4b15      	ldr	r3, [pc, #84]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 800450a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450c:	4a14      	ldr	r2, [pc, #80]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 800450e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004512:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004514:	e005      	b.n	8004522 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004516:	4b12      	ldr	r3, [pc, #72]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 8004518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451a:	4a11      	ldr	r2, [pc, #68]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 800451c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004520:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004522:	4b0f      	ldr	r3, [pc, #60]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a0e      	ldr	r2, [pc, #56]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 8004528:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800452c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800452e:	f7fc fe8d 	bl	800124c <HAL_GetTick>
 8004532:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004534:	e008      	b.n	8004548 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004536:	f7fc fe89 	bl	800124c <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e006      	b.n	8004556 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004548:	4b05      	ldr	r3, [pc, #20]	@ (8004560 <RCCEx_PLL2_Config+0x15c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0f0      	beq.n	8004536 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004554:	7bfb      	ldrb	r3, [r7, #15]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	58024400 	.word	0x58024400
 8004564:	ffff0007 	.word	0xffff0007

08004568 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004576:	4b53      	ldr	r3, [pc, #332]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	2b03      	cmp	r3, #3
 8004580:	d101      	bne.n	8004586 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e099      	b.n	80046ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004586:	4b4f      	ldr	r3, [pc, #316]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a4e      	ldr	r2, [pc, #312]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 800458c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004592:	f7fc fe5b 	bl	800124c <HAL_GetTick>
 8004596:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004598:	e008      	b.n	80045ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800459a:	f7fc fe57 	bl	800124c <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e086      	b.n	80046ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045ac:	4b45      	ldr	r3, [pc, #276]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1f0      	bne.n	800459a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80045b8:	4b42      	ldr	r3, [pc, #264]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 80045ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045bc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	051b      	lsls	r3, r3, #20
 80045c6:	493f      	ldr	r1, [pc, #252]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	3b01      	subs	r3, #1
 80045dc:	025b      	lsls	r3, r3, #9
 80045de:	b29b      	uxth	r3, r3
 80045e0:	431a      	orrs	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	041b      	lsls	r3, r3, #16
 80045ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	061b      	lsls	r3, r3, #24
 80045f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80045fc:	4931      	ldr	r1, [pc, #196]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004602:	4b30      	ldr	r3, [pc, #192]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004606:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	492d      	ldr	r1, [pc, #180]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004610:	4313      	orrs	r3, r2
 8004612:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004614:	4b2b      	ldr	r3, [pc, #172]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004618:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	4928      	ldr	r1, [pc, #160]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004622:	4313      	orrs	r3, r2
 8004624:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004626:	4b27      	ldr	r3, [pc, #156]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462a:	4a26      	ldr	r2, [pc, #152]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 800462c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004630:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004632:	4b24      	ldr	r3, [pc, #144]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004634:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004636:	4b24      	ldr	r3, [pc, #144]	@ (80046c8 <RCCEx_PLL3_Config+0x160>)
 8004638:	4013      	ands	r3, r2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	69d2      	ldr	r2, [r2, #28]
 800463e:	00d2      	lsls	r2, r2, #3
 8004640:	4920      	ldr	r1, [pc, #128]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004642:	4313      	orrs	r3, r2
 8004644:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004646:	4b1f      	ldr	r3, [pc, #124]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464a:	4a1e      	ldr	r2, [pc, #120]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 800464c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004650:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d106      	bne.n	8004666 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004658:	4b1a      	ldr	r3, [pc, #104]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 800465a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465c:	4a19      	ldr	r2, [pc, #100]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 800465e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004662:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004664:	e00f      	b.n	8004686 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d106      	bne.n	800467a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800466c:	4b15      	ldr	r3, [pc, #84]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 800466e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004670:	4a14      	ldr	r2, [pc, #80]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004672:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004676:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004678:	e005      	b.n	8004686 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800467a:	4b12      	ldr	r3, [pc, #72]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 800467c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467e:	4a11      	ldr	r2, [pc, #68]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004680:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004684:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004686:	4b0f      	ldr	r3, [pc, #60]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a0e      	ldr	r2, [pc, #56]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 800468c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004692:	f7fc fddb 	bl	800124c <HAL_GetTick>
 8004696:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004698:	e008      	b.n	80046ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800469a:	f7fc fdd7 	bl	800124c <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e006      	b.n	80046ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046ac:	4b05      	ldr	r3, [pc, #20]	@ (80046c4 <RCCEx_PLL3_Config+0x15c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	58024400 	.word	0x58024400
 80046c8:	ffff0007 	.word	0xffff0007

080046cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e049      	b.n	8004772 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f841 	bl	800477a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3304      	adds	r3, #4
 8004708:	4619      	mov	r1, r3
 800470a:	4610      	mov	r0, r2
 800470c:	f000 f9e8 	bl	8004ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d001      	beq.n	80047a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e054      	b.n	8004852 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a26      	ldr	r2, [pc, #152]	@ (8004860 <HAL_TIM_Base_Start_IT+0xd0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d022      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047d2:	d01d      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a22      	ldr	r2, [pc, #136]	@ (8004864 <HAL_TIM_Base_Start_IT+0xd4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d018      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a21      	ldr	r2, [pc, #132]	@ (8004868 <HAL_TIM_Base_Start_IT+0xd8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a1f      	ldr	r2, [pc, #124]	@ (800486c <HAL_TIM_Base_Start_IT+0xdc>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00e      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004870 <HAL_TIM_Base_Start_IT+0xe0>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d009      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a1c      	ldr	r2, [pc, #112]	@ (8004874 <HAL_TIM_Base_Start_IT+0xe4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a1b      	ldr	r2, [pc, #108]	@ (8004878 <HAL_TIM_Base_Start_IT+0xe8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d115      	bne.n	800483c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	4b19      	ldr	r3, [pc, #100]	@ (800487c <HAL_TIM_Base_Start_IT+0xec>)
 8004818:	4013      	ands	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b06      	cmp	r3, #6
 8004820:	d015      	beq.n	800484e <HAL_TIM_Base_Start_IT+0xbe>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004828:	d011      	beq.n	800484e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f042 0201 	orr.w	r2, r2, #1
 8004838:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800483a:	e008      	b.n	800484e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	e000      	b.n	8004850 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	40010000 	.word	0x40010000
 8004864:	40000400 	.word	0x40000400
 8004868:	40000800 	.word	0x40000800
 800486c:	40000c00 	.word	0x40000c00
 8004870:	40010400 	.word	0x40010400
 8004874:	40001800 	.word	0x40001800
 8004878:	40014000 	.word	0x40014000
 800487c:	00010007 	.word	0x00010007

08004880 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d020      	beq.n	80048e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01b      	beq.n	80048e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f06f 0202 	mvn.w	r2, #2
 80048b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f8e9 	bl	8004aa2 <HAL_TIM_IC_CaptureCallback>
 80048d0:	e005      	b.n	80048de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f8db 	bl	8004a8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f8ec 	bl	8004ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d020      	beq.n	8004930 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d01b      	beq.n	8004930 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0204 	mvn.w	r2, #4
 8004900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2202      	movs	r2, #2
 8004906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f8c3 	bl	8004aa2 <HAL_TIM_IC_CaptureCallback>
 800491c:	e005      	b.n	800492a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f8b5 	bl	8004a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f8c6 	bl	8004ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b00      	cmp	r3, #0
 8004938:	d020      	beq.n	800497c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01b      	beq.n	800497c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0208 	mvn.w	r2, #8
 800494c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2204      	movs	r2, #4
 8004952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f89d 	bl	8004aa2 <HAL_TIM_IC_CaptureCallback>
 8004968:	e005      	b.n	8004976 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f88f 	bl	8004a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f8a0 	bl	8004ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f003 0310 	and.w	r3, r3, #16
 8004982:	2b00      	cmp	r3, #0
 8004984:	d020      	beq.n	80049c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f003 0310 	and.w	r3, r3, #16
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01b      	beq.n	80049c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0210 	mvn.w	r2, #16
 8004998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2208      	movs	r2, #8
 800499e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f877 	bl	8004aa2 <HAL_TIM_IC_CaptureCallback>
 80049b4:	e005      	b.n	80049c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f869 	bl	8004a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f87a 	bl	8004ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00c      	beq.n	80049ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d007      	beq.n	80049ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f06f 0201 	mvn.w	r2, #1
 80049e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7fc fa7a 	bl	8000ee0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d104      	bne.n	8004a00 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00c      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f90d 	bl	8004c34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00c      	beq.n	8004a3e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d007      	beq.n	8004a3e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f905 	bl	8004c48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00c      	beq.n	8004a62 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d007      	beq.n	8004a62 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f834 	bl	8004aca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00c      	beq.n	8004a86 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f003 0320 	and.w	r3, r3, #32
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d007      	beq.n	8004a86 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f06f 0220 	mvn.w	r2, #32
 8004a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f8cd 	bl	8004c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a86:	bf00      	nop
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
	...

08004ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a43      	ldr	r2, [pc, #268]	@ (8004c00 <TIM_Base_SetConfig+0x120>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d013      	beq.n	8004b20 <TIM_Base_SetConfig+0x40>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004afe:	d00f      	beq.n	8004b20 <TIM_Base_SetConfig+0x40>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a40      	ldr	r2, [pc, #256]	@ (8004c04 <TIM_Base_SetConfig+0x124>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00b      	beq.n	8004b20 <TIM_Base_SetConfig+0x40>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a3f      	ldr	r2, [pc, #252]	@ (8004c08 <TIM_Base_SetConfig+0x128>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d007      	beq.n	8004b20 <TIM_Base_SetConfig+0x40>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a3e      	ldr	r2, [pc, #248]	@ (8004c0c <TIM_Base_SetConfig+0x12c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d003      	beq.n	8004b20 <TIM_Base_SetConfig+0x40>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a3d      	ldr	r2, [pc, #244]	@ (8004c10 <TIM_Base_SetConfig+0x130>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d108      	bne.n	8004b32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a32      	ldr	r2, [pc, #200]	@ (8004c00 <TIM_Base_SetConfig+0x120>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d01f      	beq.n	8004b7a <TIM_Base_SetConfig+0x9a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b40:	d01b      	beq.n	8004b7a <TIM_Base_SetConfig+0x9a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a2f      	ldr	r2, [pc, #188]	@ (8004c04 <TIM_Base_SetConfig+0x124>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d017      	beq.n	8004b7a <TIM_Base_SetConfig+0x9a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a2e      	ldr	r2, [pc, #184]	@ (8004c08 <TIM_Base_SetConfig+0x128>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d013      	beq.n	8004b7a <TIM_Base_SetConfig+0x9a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a2d      	ldr	r2, [pc, #180]	@ (8004c0c <TIM_Base_SetConfig+0x12c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00f      	beq.n	8004b7a <TIM_Base_SetConfig+0x9a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a2c      	ldr	r2, [pc, #176]	@ (8004c10 <TIM_Base_SetConfig+0x130>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00b      	beq.n	8004b7a <TIM_Base_SetConfig+0x9a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a2b      	ldr	r2, [pc, #172]	@ (8004c14 <TIM_Base_SetConfig+0x134>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d007      	beq.n	8004b7a <TIM_Base_SetConfig+0x9a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a2a      	ldr	r2, [pc, #168]	@ (8004c18 <TIM_Base_SetConfig+0x138>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d003      	beq.n	8004b7a <TIM_Base_SetConfig+0x9a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a29      	ldr	r2, [pc, #164]	@ (8004c1c <TIM_Base_SetConfig+0x13c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d108      	bne.n	8004b8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a14      	ldr	r2, [pc, #80]	@ (8004c00 <TIM_Base_SetConfig+0x120>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00f      	beq.n	8004bd2 <TIM_Base_SetConfig+0xf2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a16      	ldr	r2, [pc, #88]	@ (8004c10 <TIM_Base_SetConfig+0x130>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00b      	beq.n	8004bd2 <TIM_Base_SetConfig+0xf2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a15      	ldr	r2, [pc, #84]	@ (8004c14 <TIM_Base_SetConfig+0x134>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d007      	beq.n	8004bd2 <TIM_Base_SetConfig+0xf2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a14      	ldr	r2, [pc, #80]	@ (8004c18 <TIM_Base_SetConfig+0x138>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d003      	beq.n	8004bd2 <TIM_Base_SetConfig+0xf2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a13      	ldr	r2, [pc, #76]	@ (8004c1c <TIM_Base_SetConfig+0x13c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d103      	bne.n	8004bda <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	691a      	ldr	r2, [r3, #16]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f043 0204 	orr.w	r2, r3, #4
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	601a      	str	r2, [r3, #0]
}
 8004bf2:	bf00      	nop
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40010000 	.word	0x40010000
 8004c04:	40000400 	.word	0x40000400
 8004c08:	40000800 	.word	0x40000800
 8004c0c:	40000c00 	.word	0x40000c00
 8004c10:	40010400 	.word	0x40010400
 8004c14:	40014000 	.word	0x40014000
 8004c18:	40014400 	.word	0x40014400
 8004c1c:	40014800 	.word	0x40014800

08004c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e042      	b.n	8004cf4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d106      	bne.n	8004c86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7fc f96b 	bl	8000f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2224      	movs	r2, #36	@ 0x24
 8004c8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0201 	bic.w	r2, r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fe1e 	bl	80058e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f8b3 	bl	8004e18 <UART_SetConfig>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d101      	bne.n	8004cbc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e01b      	b.n	8004cf4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 fe9d 	bl	8005a2c <UART_CheckIdleState>
 8004cf2:	4603      	mov	r3, r0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08a      	sub	sp, #40	@ 0x28
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d12:	2b20      	cmp	r3, #32
 8004d14:	d17b      	bne.n	8004e0e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <HAL_UART_Transmit+0x26>
 8004d1c:	88fb      	ldrh	r3, [r7, #6]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e074      	b.n	8004e10 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2221      	movs	r2, #33	@ 0x21
 8004d32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d36:	f7fc fa89 	bl	800124c <HAL_GetTick>
 8004d3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	88fa      	ldrh	r2, [r7, #6]
 8004d40:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	88fa      	ldrh	r2, [r7, #6]
 8004d48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d54:	d108      	bne.n	8004d68 <HAL_UART_Transmit+0x6c>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d104      	bne.n	8004d68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	61bb      	str	r3, [r7, #24]
 8004d66:	e003      	b.n	8004d70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d70:	e030      	b.n	8004dd4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2180      	movs	r1, #128	@ 0x80
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 feff 	bl	8005b80 <UART_WaitOnFlagUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e03d      	b.n	8004e10 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10b      	bne.n	8004db2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004da8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	3302      	adds	r3, #2
 8004dae:	61bb      	str	r3, [r7, #24]
 8004db0:	e007      	b.n	8004dc2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	781a      	ldrb	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1c8      	bne.n	8004d72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	2200      	movs	r2, #0
 8004de8:	2140      	movs	r1, #64	@ 0x40
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 fec8 	bl	8005b80 <UART_WaitOnFlagUntilTimeout>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e006      	b.n	8004e10 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	e000      	b.n	8004e10 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004e0e:	2302      	movs	r3, #2
  }
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3720      	adds	r7, #32
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e1c:	b092      	sub	sp, #72	@ 0x48
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e22:	2300      	movs	r3, #0
 8004e24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	431a      	orrs	r2, r3
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	4bbe      	ldr	r3, [pc, #760]	@ (8005140 <UART_SetConfig+0x328>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	6812      	ldr	r2, [r2, #0]
 8004e4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e50:	430b      	orrs	r3, r1
 8004e52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4ab3      	ldr	r2, [pc, #716]	@ (8005144 <UART_SetConfig+0x32c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d004      	beq.n	8004e84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e80:	4313      	orrs	r3, r2
 8004e82:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	4baf      	ldr	r3, [pc, #700]	@ (8005148 <UART_SetConfig+0x330>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	6812      	ldr	r2, [r2, #0]
 8004e92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e94:	430b      	orrs	r3, r1
 8004e96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9e:	f023 010f 	bic.w	r1, r3, #15
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4aa6      	ldr	r2, [pc, #664]	@ (800514c <UART_SetConfig+0x334>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d177      	bne.n	8004fa8 <UART_SetConfig+0x190>
 8004eb8:	4ba5      	ldr	r3, [pc, #660]	@ (8005150 <UART_SetConfig+0x338>)
 8004eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ebc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ec0:	2b28      	cmp	r3, #40	@ 0x28
 8004ec2:	d86d      	bhi.n	8004fa0 <UART_SetConfig+0x188>
 8004ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ecc <UART_SetConfig+0xb4>)
 8004ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eca:	bf00      	nop
 8004ecc:	08004f71 	.word	0x08004f71
 8004ed0:	08004fa1 	.word	0x08004fa1
 8004ed4:	08004fa1 	.word	0x08004fa1
 8004ed8:	08004fa1 	.word	0x08004fa1
 8004edc:	08004fa1 	.word	0x08004fa1
 8004ee0:	08004fa1 	.word	0x08004fa1
 8004ee4:	08004fa1 	.word	0x08004fa1
 8004ee8:	08004fa1 	.word	0x08004fa1
 8004eec:	08004f79 	.word	0x08004f79
 8004ef0:	08004fa1 	.word	0x08004fa1
 8004ef4:	08004fa1 	.word	0x08004fa1
 8004ef8:	08004fa1 	.word	0x08004fa1
 8004efc:	08004fa1 	.word	0x08004fa1
 8004f00:	08004fa1 	.word	0x08004fa1
 8004f04:	08004fa1 	.word	0x08004fa1
 8004f08:	08004fa1 	.word	0x08004fa1
 8004f0c:	08004f81 	.word	0x08004f81
 8004f10:	08004fa1 	.word	0x08004fa1
 8004f14:	08004fa1 	.word	0x08004fa1
 8004f18:	08004fa1 	.word	0x08004fa1
 8004f1c:	08004fa1 	.word	0x08004fa1
 8004f20:	08004fa1 	.word	0x08004fa1
 8004f24:	08004fa1 	.word	0x08004fa1
 8004f28:	08004fa1 	.word	0x08004fa1
 8004f2c:	08004f89 	.word	0x08004f89
 8004f30:	08004fa1 	.word	0x08004fa1
 8004f34:	08004fa1 	.word	0x08004fa1
 8004f38:	08004fa1 	.word	0x08004fa1
 8004f3c:	08004fa1 	.word	0x08004fa1
 8004f40:	08004fa1 	.word	0x08004fa1
 8004f44:	08004fa1 	.word	0x08004fa1
 8004f48:	08004fa1 	.word	0x08004fa1
 8004f4c:	08004f91 	.word	0x08004f91
 8004f50:	08004fa1 	.word	0x08004fa1
 8004f54:	08004fa1 	.word	0x08004fa1
 8004f58:	08004fa1 	.word	0x08004fa1
 8004f5c:	08004fa1 	.word	0x08004fa1
 8004f60:	08004fa1 	.word	0x08004fa1
 8004f64:	08004fa1 	.word	0x08004fa1
 8004f68:	08004fa1 	.word	0x08004fa1
 8004f6c:	08004f99 	.word	0x08004f99
 8004f70:	2301      	movs	r3, #1
 8004f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f76:	e222      	b.n	80053be <UART_SetConfig+0x5a6>
 8004f78:	2304      	movs	r3, #4
 8004f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f7e:	e21e      	b.n	80053be <UART_SetConfig+0x5a6>
 8004f80:	2308      	movs	r3, #8
 8004f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f86:	e21a      	b.n	80053be <UART_SetConfig+0x5a6>
 8004f88:	2310      	movs	r3, #16
 8004f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f8e:	e216      	b.n	80053be <UART_SetConfig+0x5a6>
 8004f90:	2320      	movs	r3, #32
 8004f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f96:	e212      	b.n	80053be <UART_SetConfig+0x5a6>
 8004f98:	2340      	movs	r3, #64	@ 0x40
 8004f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f9e:	e20e      	b.n	80053be <UART_SetConfig+0x5a6>
 8004fa0:	2380      	movs	r3, #128	@ 0x80
 8004fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fa6:	e20a      	b.n	80053be <UART_SetConfig+0x5a6>
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a69      	ldr	r2, [pc, #420]	@ (8005154 <UART_SetConfig+0x33c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d130      	bne.n	8005014 <UART_SetConfig+0x1fc>
 8004fb2:	4b67      	ldr	r3, [pc, #412]	@ (8005150 <UART_SetConfig+0x338>)
 8004fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	2b05      	cmp	r3, #5
 8004fbc:	d826      	bhi.n	800500c <UART_SetConfig+0x1f4>
 8004fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc4 <UART_SetConfig+0x1ac>)
 8004fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc4:	08004fdd 	.word	0x08004fdd
 8004fc8:	08004fe5 	.word	0x08004fe5
 8004fcc:	08004fed 	.word	0x08004fed
 8004fd0:	08004ff5 	.word	0x08004ff5
 8004fd4:	08004ffd 	.word	0x08004ffd
 8004fd8:	08005005 	.word	0x08005005
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fe2:	e1ec      	b.n	80053be <UART_SetConfig+0x5a6>
 8004fe4:	2304      	movs	r3, #4
 8004fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fea:	e1e8      	b.n	80053be <UART_SetConfig+0x5a6>
 8004fec:	2308      	movs	r3, #8
 8004fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ff2:	e1e4      	b.n	80053be <UART_SetConfig+0x5a6>
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ffa:	e1e0      	b.n	80053be <UART_SetConfig+0x5a6>
 8004ffc:	2320      	movs	r3, #32
 8004ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005002:	e1dc      	b.n	80053be <UART_SetConfig+0x5a6>
 8005004:	2340      	movs	r3, #64	@ 0x40
 8005006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800500a:	e1d8      	b.n	80053be <UART_SetConfig+0x5a6>
 800500c:	2380      	movs	r3, #128	@ 0x80
 800500e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005012:	e1d4      	b.n	80053be <UART_SetConfig+0x5a6>
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a4f      	ldr	r2, [pc, #316]	@ (8005158 <UART_SetConfig+0x340>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d130      	bne.n	8005080 <UART_SetConfig+0x268>
 800501e:	4b4c      	ldr	r3, [pc, #304]	@ (8005150 <UART_SetConfig+0x338>)
 8005020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	2b05      	cmp	r3, #5
 8005028:	d826      	bhi.n	8005078 <UART_SetConfig+0x260>
 800502a:	a201      	add	r2, pc, #4	@ (adr r2, 8005030 <UART_SetConfig+0x218>)
 800502c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005030:	08005049 	.word	0x08005049
 8005034:	08005051 	.word	0x08005051
 8005038:	08005059 	.word	0x08005059
 800503c:	08005061 	.word	0x08005061
 8005040:	08005069 	.word	0x08005069
 8005044:	08005071 	.word	0x08005071
 8005048:	2300      	movs	r3, #0
 800504a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800504e:	e1b6      	b.n	80053be <UART_SetConfig+0x5a6>
 8005050:	2304      	movs	r3, #4
 8005052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005056:	e1b2      	b.n	80053be <UART_SetConfig+0x5a6>
 8005058:	2308      	movs	r3, #8
 800505a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800505e:	e1ae      	b.n	80053be <UART_SetConfig+0x5a6>
 8005060:	2310      	movs	r3, #16
 8005062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005066:	e1aa      	b.n	80053be <UART_SetConfig+0x5a6>
 8005068:	2320      	movs	r3, #32
 800506a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800506e:	e1a6      	b.n	80053be <UART_SetConfig+0x5a6>
 8005070:	2340      	movs	r3, #64	@ 0x40
 8005072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005076:	e1a2      	b.n	80053be <UART_SetConfig+0x5a6>
 8005078:	2380      	movs	r3, #128	@ 0x80
 800507a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800507e:	e19e      	b.n	80053be <UART_SetConfig+0x5a6>
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a35      	ldr	r2, [pc, #212]	@ (800515c <UART_SetConfig+0x344>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d130      	bne.n	80050ec <UART_SetConfig+0x2d4>
 800508a:	4b31      	ldr	r3, [pc, #196]	@ (8005150 <UART_SetConfig+0x338>)
 800508c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	2b05      	cmp	r3, #5
 8005094:	d826      	bhi.n	80050e4 <UART_SetConfig+0x2cc>
 8005096:	a201      	add	r2, pc, #4	@ (adr r2, 800509c <UART_SetConfig+0x284>)
 8005098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509c:	080050b5 	.word	0x080050b5
 80050a0:	080050bd 	.word	0x080050bd
 80050a4:	080050c5 	.word	0x080050c5
 80050a8:	080050cd 	.word	0x080050cd
 80050ac:	080050d5 	.word	0x080050d5
 80050b0:	080050dd 	.word	0x080050dd
 80050b4:	2300      	movs	r3, #0
 80050b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ba:	e180      	b.n	80053be <UART_SetConfig+0x5a6>
 80050bc:	2304      	movs	r3, #4
 80050be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050c2:	e17c      	b.n	80053be <UART_SetConfig+0x5a6>
 80050c4:	2308      	movs	r3, #8
 80050c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ca:	e178      	b.n	80053be <UART_SetConfig+0x5a6>
 80050cc:	2310      	movs	r3, #16
 80050ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050d2:	e174      	b.n	80053be <UART_SetConfig+0x5a6>
 80050d4:	2320      	movs	r3, #32
 80050d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050da:	e170      	b.n	80053be <UART_SetConfig+0x5a6>
 80050dc:	2340      	movs	r3, #64	@ 0x40
 80050de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050e2:	e16c      	b.n	80053be <UART_SetConfig+0x5a6>
 80050e4:	2380      	movs	r3, #128	@ 0x80
 80050e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ea:	e168      	b.n	80053be <UART_SetConfig+0x5a6>
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005160 <UART_SetConfig+0x348>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d142      	bne.n	800517c <UART_SetConfig+0x364>
 80050f6:	4b16      	ldr	r3, [pc, #88]	@ (8005150 <UART_SetConfig+0x338>)
 80050f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	2b05      	cmp	r3, #5
 8005100:	d838      	bhi.n	8005174 <UART_SetConfig+0x35c>
 8005102:	a201      	add	r2, pc, #4	@ (adr r2, 8005108 <UART_SetConfig+0x2f0>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	08005121 	.word	0x08005121
 800510c:	08005129 	.word	0x08005129
 8005110:	08005131 	.word	0x08005131
 8005114:	08005139 	.word	0x08005139
 8005118:	08005165 	.word	0x08005165
 800511c:	0800516d 	.word	0x0800516d
 8005120:	2300      	movs	r3, #0
 8005122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005126:	e14a      	b.n	80053be <UART_SetConfig+0x5a6>
 8005128:	2304      	movs	r3, #4
 800512a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800512e:	e146      	b.n	80053be <UART_SetConfig+0x5a6>
 8005130:	2308      	movs	r3, #8
 8005132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005136:	e142      	b.n	80053be <UART_SetConfig+0x5a6>
 8005138:	2310      	movs	r3, #16
 800513a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800513e:	e13e      	b.n	80053be <UART_SetConfig+0x5a6>
 8005140:	cfff69f3 	.word	0xcfff69f3
 8005144:	58000c00 	.word	0x58000c00
 8005148:	11fff4ff 	.word	0x11fff4ff
 800514c:	40011000 	.word	0x40011000
 8005150:	58024400 	.word	0x58024400
 8005154:	40004400 	.word	0x40004400
 8005158:	40004800 	.word	0x40004800
 800515c:	40004c00 	.word	0x40004c00
 8005160:	40005000 	.word	0x40005000
 8005164:	2320      	movs	r3, #32
 8005166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800516a:	e128      	b.n	80053be <UART_SetConfig+0x5a6>
 800516c:	2340      	movs	r3, #64	@ 0x40
 800516e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005172:	e124      	b.n	80053be <UART_SetConfig+0x5a6>
 8005174:	2380      	movs	r3, #128	@ 0x80
 8005176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800517a:	e120      	b.n	80053be <UART_SetConfig+0x5a6>
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4acb      	ldr	r2, [pc, #812]	@ (80054b0 <UART_SetConfig+0x698>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d176      	bne.n	8005274 <UART_SetConfig+0x45c>
 8005186:	4bcb      	ldr	r3, [pc, #812]	@ (80054b4 <UART_SetConfig+0x69c>)
 8005188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800518a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800518e:	2b28      	cmp	r3, #40	@ 0x28
 8005190:	d86c      	bhi.n	800526c <UART_SetConfig+0x454>
 8005192:	a201      	add	r2, pc, #4	@ (adr r2, 8005198 <UART_SetConfig+0x380>)
 8005194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005198:	0800523d 	.word	0x0800523d
 800519c:	0800526d 	.word	0x0800526d
 80051a0:	0800526d 	.word	0x0800526d
 80051a4:	0800526d 	.word	0x0800526d
 80051a8:	0800526d 	.word	0x0800526d
 80051ac:	0800526d 	.word	0x0800526d
 80051b0:	0800526d 	.word	0x0800526d
 80051b4:	0800526d 	.word	0x0800526d
 80051b8:	08005245 	.word	0x08005245
 80051bc:	0800526d 	.word	0x0800526d
 80051c0:	0800526d 	.word	0x0800526d
 80051c4:	0800526d 	.word	0x0800526d
 80051c8:	0800526d 	.word	0x0800526d
 80051cc:	0800526d 	.word	0x0800526d
 80051d0:	0800526d 	.word	0x0800526d
 80051d4:	0800526d 	.word	0x0800526d
 80051d8:	0800524d 	.word	0x0800524d
 80051dc:	0800526d 	.word	0x0800526d
 80051e0:	0800526d 	.word	0x0800526d
 80051e4:	0800526d 	.word	0x0800526d
 80051e8:	0800526d 	.word	0x0800526d
 80051ec:	0800526d 	.word	0x0800526d
 80051f0:	0800526d 	.word	0x0800526d
 80051f4:	0800526d 	.word	0x0800526d
 80051f8:	08005255 	.word	0x08005255
 80051fc:	0800526d 	.word	0x0800526d
 8005200:	0800526d 	.word	0x0800526d
 8005204:	0800526d 	.word	0x0800526d
 8005208:	0800526d 	.word	0x0800526d
 800520c:	0800526d 	.word	0x0800526d
 8005210:	0800526d 	.word	0x0800526d
 8005214:	0800526d 	.word	0x0800526d
 8005218:	0800525d 	.word	0x0800525d
 800521c:	0800526d 	.word	0x0800526d
 8005220:	0800526d 	.word	0x0800526d
 8005224:	0800526d 	.word	0x0800526d
 8005228:	0800526d 	.word	0x0800526d
 800522c:	0800526d 	.word	0x0800526d
 8005230:	0800526d 	.word	0x0800526d
 8005234:	0800526d 	.word	0x0800526d
 8005238:	08005265 	.word	0x08005265
 800523c:	2301      	movs	r3, #1
 800523e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005242:	e0bc      	b.n	80053be <UART_SetConfig+0x5a6>
 8005244:	2304      	movs	r3, #4
 8005246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800524a:	e0b8      	b.n	80053be <UART_SetConfig+0x5a6>
 800524c:	2308      	movs	r3, #8
 800524e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005252:	e0b4      	b.n	80053be <UART_SetConfig+0x5a6>
 8005254:	2310      	movs	r3, #16
 8005256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800525a:	e0b0      	b.n	80053be <UART_SetConfig+0x5a6>
 800525c:	2320      	movs	r3, #32
 800525e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005262:	e0ac      	b.n	80053be <UART_SetConfig+0x5a6>
 8005264:	2340      	movs	r3, #64	@ 0x40
 8005266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800526a:	e0a8      	b.n	80053be <UART_SetConfig+0x5a6>
 800526c:	2380      	movs	r3, #128	@ 0x80
 800526e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005272:	e0a4      	b.n	80053be <UART_SetConfig+0x5a6>
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a8f      	ldr	r2, [pc, #572]	@ (80054b8 <UART_SetConfig+0x6a0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d130      	bne.n	80052e0 <UART_SetConfig+0x4c8>
 800527e:	4b8d      	ldr	r3, [pc, #564]	@ (80054b4 <UART_SetConfig+0x69c>)
 8005280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	2b05      	cmp	r3, #5
 8005288:	d826      	bhi.n	80052d8 <UART_SetConfig+0x4c0>
 800528a:	a201      	add	r2, pc, #4	@ (adr r2, 8005290 <UART_SetConfig+0x478>)
 800528c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005290:	080052a9 	.word	0x080052a9
 8005294:	080052b1 	.word	0x080052b1
 8005298:	080052b9 	.word	0x080052b9
 800529c:	080052c1 	.word	0x080052c1
 80052a0:	080052c9 	.word	0x080052c9
 80052a4:	080052d1 	.word	0x080052d1
 80052a8:	2300      	movs	r3, #0
 80052aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ae:	e086      	b.n	80053be <UART_SetConfig+0x5a6>
 80052b0:	2304      	movs	r3, #4
 80052b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052b6:	e082      	b.n	80053be <UART_SetConfig+0x5a6>
 80052b8:	2308      	movs	r3, #8
 80052ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052be:	e07e      	b.n	80053be <UART_SetConfig+0x5a6>
 80052c0:	2310      	movs	r3, #16
 80052c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c6:	e07a      	b.n	80053be <UART_SetConfig+0x5a6>
 80052c8:	2320      	movs	r3, #32
 80052ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ce:	e076      	b.n	80053be <UART_SetConfig+0x5a6>
 80052d0:	2340      	movs	r3, #64	@ 0x40
 80052d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052d6:	e072      	b.n	80053be <UART_SetConfig+0x5a6>
 80052d8:	2380      	movs	r3, #128	@ 0x80
 80052da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052de:	e06e      	b.n	80053be <UART_SetConfig+0x5a6>
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a75      	ldr	r2, [pc, #468]	@ (80054bc <UART_SetConfig+0x6a4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d130      	bne.n	800534c <UART_SetConfig+0x534>
 80052ea:	4b72      	ldr	r3, [pc, #456]	@ (80054b4 <UART_SetConfig+0x69c>)
 80052ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	2b05      	cmp	r3, #5
 80052f4:	d826      	bhi.n	8005344 <UART_SetConfig+0x52c>
 80052f6:	a201      	add	r2, pc, #4	@ (adr r2, 80052fc <UART_SetConfig+0x4e4>)
 80052f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fc:	08005315 	.word	0x08005315
 8005300:	0800531d 	.word	0x0800531d
 8005304:	08005325 	.word	0x08005325
 8005308:	0800532d 	.word	0x0800532d
 800530c:	08005335 	.word	0x08005335
 8005310:	0800533d 	.word	0x0800533d
 8005314:	2300      	movs	r3, #0
 8005316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800531a:	e050      	b.n	80053be <UART_SetConfig+0x5a6>
 800531c:	2304      	movs	r3, #4
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005322:	e04c      	b.n	80053be <UART_SetConfig+0x5a6>
 8005324:	2308      	movs	r3, #8
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532a:	e048      	b.n	80053be <UART_SetConfig+0x5a6>
 800532c:	2310      	movs	r3, #16
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005332:	e044      	b.n	80053be <UART_SetConfig+0x5a6>
 8005334:	2320      	movs	r3, #32
 8005336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533a:	e040      	b.n	80053be <UART_SetConfig+0x5a6>
 800533c:	2340      	movs	r3, #64	@ 0x40
 800533e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005342:	e03c      	b.n	80053be <UART_SetConfig+0x5a6>
 8005344:	2380      	movs	r3, #128	@ 0x80
 8005346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800534a:	e038      	b.n	80053be <UART_SetConfig+0x5a6>
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a5b      	ldr	r2, [pc, #364]	@ (80054c0 <UART_SetConfig+0x6a8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d130      	bne.n	80053b8 <UART_SetConfig+0x5a0>
 8005356:	4b57      	ldr	r3, [pc, #348]	@ (80054b4 <UART_SetConfig+0x69c>)
 8005358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	2b05      	cmp	r3, #5
 8005360:	d826      	bhi.n	80053b0 <UART_SetConfig+0x598>
 8005362:	a201      	add	r2, pc, #4	@ (adr r2, 8005368 <UART_SetConfig+0x550>)
 8005364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005368:	08005381 	.word	0x08005381
 800536c:	08005389 	.word	0x08005389
 8005370:	08005391 	.word	0x08005391
 8005374:	08005399 	.word	0x08005399
 8005378:	080053a1 	.word	0x080053a1
 800537c:	080053a9 	.word	0x080053a9
 8005380:	2302      	movs	r3, #2
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005386:	e01a      	b.n	80053be <UART_SetConfig+0x5a6>
 8005388:	2304      	movs	r3, #4
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538e:	e016      	b.n	80053be <UART_SetConfig+0x5a6>
 8005390:	2308      	movs	r3, #8
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005396:	e012      	b.n	80053be <UART_SetConfig+0x5a6>
 8005398:	2310      	movs	r3, #16
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539e:	e00e      	b.n	80053be <UART_SetConfig+0x5a6>
 80053a0:	2320      	movs	r3, #32
 80053a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a6:	e00a      	b.n	80053be <UART_SetConfig+0x5a6>
 80053a8:	2340      	movs	r3, #64	@ 0x40
 80053aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ae:	e006      	b.n	80053be <UART_SetConfig+0x5a6>
 80053b0:	2380      	movs	r3, #128	@ 0x80
 80053b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b6:	e002      	b.n	80053be <UART_SetConfig+0x5a6>
 80053b8:	2380      	movs	r3, #128	@ 0x80
 80053ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a3f      	ldr	r2, [pc, #252]	@ (80054c0 <UART_SetConfig+0x6a8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	f040 80f8 	bne.w	80055ba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80053ce:	2b20      	cmp	r3, #32
 80053d0:	dc46      	bgt.n	8005460 <UART_SetConfig+0x648>
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	f2c0 8082 	blt.w	80054dc <UART_SetConfig+0x6c4>
 80053d8:	3b02      	subs	r3, #2
 80053da:	2b1e      	cmp	r3, #30
 80053dc:	d87e      	bhi.n	80054dc <UART_SetConfig+0x6c4>
 80053de:	a201      	add	r2, pc, #4	@ (adr r2, 80053e4 <UART_SetConfig+0x5cc>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	08005467 	.word	0x08005467
 80053e8:	080054dd 	.word	0x080054dd
 80053ec:	0800546f 	.word	0x0800546f
 80053f0:	080054dd 	.word	0x080054dd
 80053f4:	080054dd 	.word	0x080054dd
 80053f8:	080054dd 	.word	0x080054dd
 80053fc:	0800547f 	.word	0x0800547f
 8005400:	080054dd 	.word	0x080054dd
 8005404:	080054dd 	.word	0x080054dd
 8005408:	080054dd 	.word	0x080054dd
 800540c:	080054dd 	.word	0x080054dd
 8005410:	080054dd 	.word	0x080054dd
 8005414:	080054dd 	.word	0x080054dd
 8005418:	080054dd 	.word	0x080054dd
 800541c:	0800548f 	.word	0x0800548f
 8005420:	080054dd 	.word	0x080054dd
 8005424:	080054dd 	.word	0x080054dd
 8005428:	080054dd 	.word	0x080054dd
 800542c:	080054dd 	.word	0x080054dd
 8005430:	080054dd 	.word	0x080054dd
 8005434:	080054dd 	.word	0x080054dd
 8005438:	080054dd 	.word	0x080054dd
 800543c:	080054dd 	.word	0x080054dd
 8005440:	080054dd 	.word	0x080054dd
 8005444:	080054dd 	.word	0x080054dd
 8005448:	080054dd 	.word	0x080054dd
 800544c:	080054dd 	.word	0x080054dd
 8005450:	080054dd 	.word	0x080054dd
 8005454:	080054dd 	.word	0x080054dd
 8005458:	080054dd 	.word	0x080054dd
 800545c:	080054cf 	.word	0x080054cf
 8005460:	2b40      	cmp	r3, #64	@ 0x40
 8005462:	d037      	beq.n	80054d4 <UART_SetConfig+0x6bc>
 8005464:	e03a      	b.n	80054dc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005466:	f7fe fd0f 	bl	8003e88 <HAL_RCCEx_GetD3PCLK1Freq>
 800546a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800546c:	e03c      	b.n	80054e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800546e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005472:	4618      	mov	r0, r3
 8005474:	f7fe fd1e 	bl	8003eb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800547c:	e034      	b.n	80054e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800547e:	f107 0318 	add.w	r3, r7, #24
 8005482:	4618      	mov	r0, r3
 8005484:	f7fe fe6a 	bl	800415c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800548c:	e02c      	b.n	80054e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800548e:	4b09      	ldr	r3, [pc, #36]	@ (80054b4 <UART_SetConfig+0x69c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0320 	and.w	r3, r3, #32
 8005496:	2b00      	cmp	r3, #0
 8005498:	d016      	beq.n	80054c8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800549a:	4b06      	ldr	r3, [pc, #24]	@ (80054b4 <UART_SetConfig+0x69c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	08db      	lsrs	r3, r3, #3
 80054a0:	f003 0303 	and.w	r3, r3, #3
 80054a4:	4a07      	ldr	r2, [pc, #28]	@ (80054c4 <UART_SetConfig+0x6ac>)
 80054a6:	fa22 f303 	lsr.w	r3, r2, r3
 80054aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054ac:	e01c      	b.n	80054e8 <UART_SetConfig+0x6d0>
 80054ae:	bf00      	nop
 80054b0:	40011400 	.word	0x40011400
 80054b4:	58024400 	.word	0x58024400
 80054b8:	40007800 	.word	0x40007800
 80054bc:	40007c00 	.word	0x40007c00
 80054c0:	58000c00 	.word	0x58000c00
 80054c4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80054c8:	4b9d      	ldr	r3, [pc, #628]	@ (8005740 <UART_SetConfig+0x928>)
 80054ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054cc:	e00c      	b.n	80054e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80054ce:	4b9d      	ldr	r3, [pc, #628]	@ (8005744 <UART_SetConfig+0x92c>)
 80054d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054d2:	e009      	b.n	80054e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054da:	e005      	b.n	80054e8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80054e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 81de 	beq.w	80058ac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f4:	4a94      	ldr	r2, [pc, #592]	@ (8005748 <UART_SetConfig+0x930>)
 80054f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054fa:	461a      	mov	r2, r3
 80054fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005502:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	4613      	mov	r3, r2
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	4413      	add	r3, r2
 800550e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005510:	429a      	cmp	r2, r3
 8005512:	d305      	bcc.n	8005520 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800551a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800551c:	429a      	cmp	r2, r3
 800551e:	d903      	bls.n	8005528 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005526:	e1c1      	b.n	80058ac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800552a:	2200      	movs	r2, #0
 800552c:	60bb      	str	r3, [r7, #8]
 800552e:	60fa      	str	r2, [r7, #12]
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005534:	4a84      	ldr	r2, [pc, #528]	@ (8005748 <UART_SetConfig+0x930>)
 8005536:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800553a:	b29b      	uxth	r3, r3
 800553c:	2200      	movs	r2, #0
 800553e:	603b      	str	r3, [r7, #0]
 8005540:	607a      	str	r2, [r7, #4]
 8005542:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005546:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800554a:	f7fa fec9 	bl	80002e0 <__aeabi_uldivmod>
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	4610      	mov	r0, r2
 8005554:	4619      	mov	r1, r3
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	020b      	lsls	r3, r1, #8
 8005560:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005564:	0202      	lsls	r2, r0, #8
 8005566:	6979      	ldr	r1, [r7, #20]
 8005568:	6849      	ldr	r1, [r1, #4]
 800556a:	0849      	lsrs	r1, r1, #1
 800556c:	2000      	movs	r0, #0
 800556e:	460c      	mov	r4, r1
 8005570:	4605      	mov	r5, r0
 8005572:	eb12 0804 	adds.w	r8, r2, r4
 8005576:	eb43 0905 	adc.w	r9, r3, r5
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	469a      	mov	sl, r3
 8005582:	4693      	mov	fp, r2
 8005584:	4652      	mov	r2, sl
 8005586:	465b      	mov	r3, fp
 8005588:	4640      	mov	r0, r8
 800558a:	4649      	mov	r1, r9
 800558c:	f7fa fea8 	bl	80002e0 <__aeabi_uldivmod>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4613      	mov	r3, r2
 8005596:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800559a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800559e:	d308      	bcc.n	80055b2 <UART_SetConfig+0x79a>
 80055a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055a6:	d204      	bcs.n	80055b2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055ae:	60da      	str	r2, [r3, #12]
 80055b0:	e17c      	b.n	80058ac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80055b8:	e178      	b.n	80058ac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055c2:	f040 80c5 	bne.w	8005750 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80055c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	dc48      	bgt.n	8005660 <UART_SetConfig+0x848>
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	db7b      	blt.n	80056ca <UART_SetConfig+0x8b2>
 80055d2:	2b20      	cmp	r3, #32
 80055d4:	d879      	bhi.n	80056ca <UART_SetConfig+0x8b2>
 80055d6:	a201      	add	r2, pc, #4	@ (adr r2, 80055dc <UART_SetConfig+0x7c4>)
 80055d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055dc:	08005667 	.word	0x08005667
 80055e0:	0800566f 	.word	0x0800566f
 80055e4:	080056cb 	.word	0x080056cb
 80055e8:	080056cb 	.word	0x080056cb
 80055ec:	08005677 	.word	0x08005677
 80055f0:	080056cb 	.word	0x080056cb
 80055f4:	080056cb 	.word	0x080056cb
 80055f8:	080056cb 	.word	0x080056cb
 80055fc:	08005687 	.word	0x08005687
 8005600:	080056cb 	.word	0x080056cb
 8005604:	080056cb 	.word	0x080056cb
 8005608:	080056cb 	.word	0x080056cb
 800560c:	080056cb 	.word	0x080056cb
 8005610:	080056cb 	.word	0x080056cb
 8005614:	080056cb 	.word	0x080056cb
 8005618:	080056cb 	.word	0x080056cb
 800561c:	08005697 	.word	0x08005697
 8005620:	080056cb 	.word	0x080056cb
 8005624:	080056cb 	.word	0x080056cb
 8005628:	080056cb 	.word	0x080056cb
 800562c:	080056cb 	.word	0x080056cb
 8005630:	080056cb 	.word	0x080056cb
 8005634:	080056cb 	.word	0x080056cb
 8005638:	080056cb 	.word	0x080056cb
 800563c:	080056cb 	.word	0x080056cb
 8005640:	080056cb 	.word	0x080056cb
 8005644:	080056cb 	.word	0x080056cb
 8005648:	080056cb 	.word	0x080056cb
 800564c:	080056cb 	.word	0x080056cb
 8005650:	080056cb 	.word	0x080056cb
 8005654:	080056cb 	.word	0x080056cb
 8005658:	080056cb 	.word	0x080056cb
 800565c:	080056bd 	.word	0x080056bd
 8005660:	2b40      	cmp	r3, #64	@ 0x40
 8005662:	d02e      	beq.n	80056c2 <UART_SetConfig+0x8aa>
 8005664:	e031      	b.n	80056ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005666:	f7fd f957 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 800566a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800566c:	e033      	b.n	80056d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800566e:	f7fd f969 	bl	8002944 <HAL_RCC_GetPCLK2Freq>
 8005672:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005674:	e02f      	b.n	80056d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800567a:	4618      	mov	r0, r3
 800567c:	f7fe fc1a 	bl	8003eb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005684:	e027      	b.n	80056d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005686:	f107 0318 	add.w	r3, r7, #24
 800568a:	4618      	mov	r0, r3
 800568c:	f7fe fd66 	bl	800415c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005694:	e01f      	b.n	80056d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005696:	4b2d      	ldr	r3, [pc, #180]	@ (800574c <UART_SetConfig+0x934>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0320 	and.w	r3, r3, #32
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d009      	beq.n	80056b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80056a2:	4b2a      	ldr	r3, [pc, #168]	@ (800574c <UART_SetConfig+0x934>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	08db      	lsrs	r3, r3, #3
 80056a8:	f003 0303 	and.w	r3, r3, #3
 80056ac:	4a24      	ldr	r2, [pc, #144]	@ (8005740 <UART_SetConfig+0x928>)
 80056ae:	fa22 f303 	lsr.w	r3, r2, r3
 80056b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056b4:	e00f      	b.n	80056d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80056b6:	4b22      	ldr	r3, [pc, #136]	@ (8005740 <UART_SetConfig+0x928>)
 80056b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056ba:	e00c      	b.n	80056d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80056bc:	4b21      	ldr	r3, [pc, #132]	@ (8005744 <UART_SetConfig+0x92c>)
 80056be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056c0:	e009      	b.n	80056d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056c8:	e005      	b.n	80056d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80056d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 80e7 	beq.w	80058ac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e2:	4a19      	ldr	r2, [pc, #100]	@ (8005748 <UART_SetConfig+0x930>)
 80056e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056e8:	461a      	mov	r2, r3
 80056ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80056f0:	005a      	lsls	r2, r3, #1
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	085b      	lsrs	r3, r3, #1
 80056f8:	441a      	add	r2, r3
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005702:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005706:	2b0f      	cmp	r3, #15
 8005708:	d916      	bls.n	8005738 <UART_SetConfig+0x920>
 800570a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005710:	d212      	bcs.n	8005738 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005714:	b29b      	uxth	r3, r3
 8005716:	f023 030f 	bic.w	r3, r3, #15
 800571a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800571c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571e:	085b      	lsrs	r3, r3, #1
 8005720:	b29b      	uxth	r3, r3
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	b29a      	uxth	r2, r3
 8005728:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800572a:	4313      	orrs	r3, r2
 800572c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005734:	60da      	str	r2, [r3, #12]
 8005736:	e0b9      	b.n	80058ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800573e:	e0b5      	b.n	80058ac <UART_SetConfig+0xa94>
 8005740:	03d09000 	.word	0x03d09000
 8005744:	003d0900 	.word	0x003d0900
 8005748:	080085d8 	.word	0x080085d8
 800574c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005750:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005754:	2b20      	cmp	r3, #32
 8005756:	dc49      	bgt.n	80057ec <UART_SetConfig+0x9d4>
 8005758:	2b00      	cmp	r3, #0
 800575a:	db7c      	blt.n	8005856 <UART_SetConfig+0xa3e>
 800575c:	2b20      	cmp	r3, #32
 800575e:	d87a      	bhi.n	8005856 <UART_SetConfig+0xa3e>
 8005760:	a201      	add	r2, pc, #4	@ (adr r2, 8005768 <UART_SetConfig+0x950>)
 8005762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005766:	bf00      	nop
 8005768:	080057f3 	.word	0x080057f3
 800576c:	080057fb 	.word	0x080057fb
 8005770:	08005857 	.word	0x08005857
 8005774:	08005857 	.word	0x08005857
 8005778:	08005803 	.word	0x08005803
 800577c:	08005857 	.word	0x08005857
 8005780:	08005857 	.word	0x08005857
 8005784:	08005857 	.word	0x08005857
 8005788:	08005813 	.word	0x08005813
 800578c:	08005857 	.word	0x08005857
 8005790:	08005857 	.word	0x08005857
 8005794:	08005857 	.word	0x08005857
 8005798:	08005857 	.word	0x08005857
 800579c:	08005857 	.word	0x08005857
 80057a0:	08005857 	.word	0x08005857
 80057a4:	08005857 	.word	0x08005857
 80057a8:	08005823 	.word	0x08005823
 80057ac:	08005857 	.word	0x08005857
 80057b0:	08005857 	.word	0x08005857
 80057b4:	08005857 	.word	0x08005857
 80057b8:	08005857 	.word	0x08005857
 80057bc:	08005857 	.word	0x08005857
 80057c0:	08005857 	.word	0x08005857
 80057c4:	08005857 	.word	0x08005857
 80057c8:	08005857 	.word	0x08005857
 80057cc:	08005857 	.word	0x08005857
 80057d0:	08005857 	.word	0x08005857
 80057d4:	08005857 	.word	0x08005857
 80057d8:	08005857 	.word	0x08005857
 80057dc:	08005857 	.word	0x08005857
 80057e0:	08005857 	.word	0x08005857
 80057e4:	08005857 	.word	0x08005857
 80057e8:	08005849 	.word	0x08005849
 80057ec:	2b40      	cmp	r3, #64	@ 0x40
 80057ee:	d02e      	beq.n	800584e <UART_SetConfig+0xa36>
 80057f0:	e031      	b.n	8005856 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057f2:	f7fd f891 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 80057f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057f8:	e033      	b.n	8005862 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057fa:	f7fd f8a3 	bl	8002944 <HAL_RCC_GetPCLK2Freq>
 80057fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005800:	e02f      	b.n	8005862 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005806:	4618      	mov	r0, r3
 8005808:	f7fe fb54 	bl	8003eb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800580c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005810:	e027      	b.n	8005862 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005812:	f107 0318 	add.w	r3, r7, #24
 8005816:	4618      	mov	r0, r3
 8005818:	f7fe fca0 	bl	800415c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005820:	e01f      	b.n	8005862 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005822:	4b2d      	ldr	r3, [pc, #180]	@ (80058d8 <UART_SetConfig+0xac0>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b00      	cmp	r3, #0
 800582c:	d009      	beq.n	8005842 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800582e:	4b2a      	ldr	r3, [pc, #168]	@ (80058d8 <UART_SetConfig+0xac0>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	08db      	lsrs	r3, r3, #3
 8005834:	f003 0303 	and.w	r3, r3, #3
 8005838:	4a28      	ldr	r2, [pc, #160]	@ (80058dc <UART_SetConfig+0xac4>)
 800583a:	fa22 f303 	lsr.w	r3, r2, r3
 800583e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005840:	e00f      	b.n	8005862 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005842:	4b26      	ldr	r3, [pc, #152]	@ (80058dc <UART_SetConfig+0xac4>)
 8005844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005846:	e00c      	b.n	8005862 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005848:	4b25      	ldr	r3, [pc, #148]	@ (80058e0 <UART_SetConfig+0xac8>)
 800584a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800584c:	e009      	b.n	8005862 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800584e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005854:	e005      	b.n	8005862 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005860:	bf00      	nop
    }

    if (pclk != 0U)
 8005862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005864:	2b00      	cmp	r3, #0
 8005866:	d021      	beq.n	80058ac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586c:	4a1d      	ldr	r2, [pc, #116]	@ (80058e4 <UART_SetConfig+0xacc>)
 800586e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005872:	461a      	mov	r2, r3
 8005874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005876:	fbb3 f2f2 	udiv	r2, r3, r2
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	085b      	lsrs	r3, r3, #1
 8005880:	441a      	add	r2, r3
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	fbb2 f3f3 	udiv	r3, r2, r3
 800588a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800588c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588e:	2b0f      	cmp	r3, #15
 8005890:	d909      	bls.n	80058a6 <UART_SetConfig+0xa8e>
 8005892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005898:	d205      	bcs.n	80058a6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800589a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589c:	b29a      	uxth	r2, r3
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	60da      	str	r2, [r3, #12]
 80058a4:	e002      	b.n	80058ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	2200      	movs	r2, #0
 80058c0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2200      	movs	r2, #0
 80058c6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80058c8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3748      	adds	r7, #72	@ 0x48
 80058d0:	46bd      	mov	sp, r7
 80058d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058d6:	bf00      	nop
 80058d8:	58024400 	.word	0x58024400
 80058dc:	03d09000 	.word	0x03d09000
 80058e0:	003d0900 	.word	0x003d0900
 80058e4:	080085d8 	.word	0x080085d8

080058e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f4:	f003 0308 	and.w	r3, r3, #8
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597c:	f003 0310 	and.w	r3, r3, #16
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d01a      	beq.n	80059fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059e6:	d10a      	bne.n	80059fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	605a      	str	r2, [r3, #4]
  }
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b098      	sub	sp, #96	@ 0x60
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a3c:	f7fb fc06 	bl	800124c <HAL_GetTick>
 8005a40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0308 	and.w	r3, r3, #8
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d12f      	bne.n	8005ab0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f88e 	bl	8005b80 <UART_WaitOnFlagUntilTimeout>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d022      	beq.n	8005ab0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	461a      	mov	r2, r3
 8005a86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a88:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a8a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e6      	bne.n	8005a6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e063      	b.n	8005b78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0304 	and.w	r3, r3, #4
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d149      	bne.n	8005b52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005abe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f857 	bl	8005b80 <UART_WaitOnFlagUntilTimeout>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d03c      	beq.n	8005b52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae0:	e853 3f00 	ldrex	r3, [r3]
 8005ae4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	461a      	mov	r2, r3
 8005af4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005af6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005af8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005afc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1e6      	bne.n	8005ad8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3308      	adds	r3, #8
 8005b10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	e853 3f00 	ldrex	r3, [r3]
 8005b18:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f023 0301 	bic.w	r3, r3, #1
 8005b20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3308      	adds	r3, #8
 8005b28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b2a:	61fa      	str	r2, [r7, #28]
 8005b2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2e:	69b9      	ldr	r1, [r7, #24]
 8005b30:	69fa      	ldr	r2, [r7, #28]
 8005b32:	e841 2300 	strex	r3, r2, [r1]
 8005b36:	617b      	str	r3, [r7, #20]
   return(result);
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1e5      	bne.n	8005b0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2220      	movs	r2, #32
 8005b42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e012      	b.n	8005b78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3758      	adds	r7, #88	@ 0x58
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	603b      	str	r3, [r7, #0]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b90:	e04f      	b.n	8005c32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b98:	d04b      	beq.n	8005c32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b9a:	f7fb fb57 	bl	800124c <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d302      	bcc.n	8005bb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e04e      	b.n	8005c52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d037      	beq.n	8005c32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2b80      	cmp	r3, #128	@ 0x80
 8005bc6:	d034      	beq.n	8005c32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b40      	cmp	r3, #64	@ 0x40
 8005bcc:	d031      	beq.n	8005c32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	f003 0308 	and.w	r3, r3, #8
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d110      	bne.n	8005bfe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2208      	movs	r2, #8
 8005be2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 f839 	bl	8005c5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2208      	movs	r2, #8
 8005bee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e029      	b.n	8005c52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c0c:	d111      	bne.n	8005c32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 f81f 	bl	8005c5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2220      	movs	r2, #32
 8005c22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e00f      	b.n	8005c52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69da      	ldr	r2, [r3, #28]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	bf0c      	ite	eq
 8005c42:	2301      	moveq	r3, #1
 8005c44:	2300      	movne	r3, #0
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	461a      	mov	r2, r3
 8005c4a:	79fb      	ldrb	r3, [r7, #7]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d0a0      	beq.n	8005b92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b095      	sub	sp, #84	@ 0x54
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c6c:	e853 3f00 	ldrex	r3, [r3]
 8005c70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c82:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c84:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c8a:	e841 2300 	strex	r3, r2, [r1]
 8005c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1e6      	bne.n	8005c64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	3308      	adds	r3, #8
 8005c9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	e853 3f00 	ldrex	r3, [r3]
 8005ca4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ca6:	69fa      	ldr	r2, [r7, #28]
 8005ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8005d24 <UART_EndRxTransfer+0xc8>)
 8005caa:	4013      	ands	r3, r2
 8005cac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3308      	adds	r3, #8
 8005cb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1e5      	bne.n	8005c96 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d118      	bne.n	8005d04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f023 0310 	bic.w	r3, r3, #16
 8005ce6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	461a      	mov	r2, r3
 8005cee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cf0:	61bb      	str	r3, [r7, #24]
 8005cf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf4:	6979      	ldr	r1, [r7, #20]
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	e841 2300 	strex	r3, r2, [r1]
 8005cfc:	613b      	str	r3, [r7, #16]
   return(result);
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e6      	bne.n	8005cd2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2220      	movs	r2, #32
 8005d08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005d18:	bf00      	nop
 8005d1a:	3754      	adds	r7, #84	@ 0x54
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	effffffe 	.word	0xeffffffe

08005d28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d101      	bne.n	8005d3e <HAL_UARTEx_DisableFifoMode+0x16>
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	e027      	b.n	8005d8e <HAL_UARTEx_DisableFifoMode+0x66>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2224      	movs	r2, #36	@ 0x24
 8005d4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0201 	bic.w	r2, r2, #1
 8005d64:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005d6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d101      	bne.n	8005db2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005dae:	2302      	movs	r3, #2
 8005db0:	e02d      	b.n	8005e0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2224      	movs	r2, #36	@ 0x24
 8005dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0201 	bic.w	r2, r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f850 	bl	8005e94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b084      	sub	sp, #16
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d101      	bne.n	8005e2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e02d      	b.n	8005e8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2224      	movs	r2, #36	@ 0x24
 8005e3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0201 	bic.w	r2, r2, #1
 8005e54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f812 	bl	8005e94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
	...

08005e94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d108      	bne.n	8005eb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005eb4:	e031      	b.n	8005f1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005eb6:	2310      	movs	r3, #16
 8005eb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005eba:	2310      	movs	r3, #16
 8005ebc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	0e5b      	lsrs	r3, r3, #25
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	0f5b      	lsrs	r3, r3, #29
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	f003 0307 	and.w	r3, r3, #7
 8005edc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ede:	7bbb      	ldrb	r3, [r7, #14]
 8005ee0:	7b3a      	ldrb	r2, [r7, #12]
 8005ee2:	4911      	ldr	r1, [pc, #68]	@ (8005f28 <UARTEx_SetNbDataToProcess+0x94>)
 8005ee4:	5c8a      	ldrb	r2, [r1, r2]
 8005ee6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005eea:	7b3a      	ldrb	r2, [r7, #12]
 8005eec:	490f      	ldr	r1, [pc, #60]	@ (8005f2c <UARTEx_SetNbDataToProcess+0x98>)
 8005eee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ef0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	7b7a      	ldrb	r2, [r7, #13]
 8005f00:	4909      	ldr	r1, [pc, #36]	@ (8005f28 <UARTEx_SetNbDataToProcess+0x94>)
 8005f02:	5c8a      	ldrb	r2, [r1, r2]
 8005f04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f08:	7b7a      	ldrb	r2, [r7, #13]
 8005f0a:	4908      	ldr	r1, [pc, #32]	@ (8005f2c <UARTEx_SetNbDataToProcess+0x98>)
 8005f0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005f1a:	bf00      	nop
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	080085f0 	.word	0x080085f0
 8005f2c:	080085f8 	.word	0x080085f8

08005f30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08a      	sub	sp, #40	@ 0x28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f3c:	f001 fb10 	bl	8007560 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f40:	4b5c      	ldr	r3, [pc, #368]	@ (80060b4 <pvPortMalloc+0x184>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f48:	f000 f924 	bl	8006194 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f4c:	4b5a      	ldr	r3, [pc, #360]	@ (80060b8 <pvPortMalloc+0x188>)
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4013      	ands	r3, r2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f040 8095 	bne.w	8006084 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d01e      	beq.n	8005f9e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005f60:	2208      	movs	r2, #8
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4413      	add	r3, r2
 8005f66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f003 0307 	and.w	r3, r3, #7
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d015      	beq.n	8005f9e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f023 0307 	bic.w	r3, r3, #7
 8005f78:	3308      	adds	r3, #8
 8005f7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00b      	beq.n	8005f9e <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8a:	f383 8811 	msr	BASEPRI, r3
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f98:	bf00      	nop
 8005f9a:	bf00      	nop
 8005f9c:	e7fd      	b.n	8005f9a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d06f      	beq.n	8006084 <pvPortMalloc+0x154>
 8005fa4:	4b45      	ldr	r3, [pc, #276]	@ (80060bc <pvPortMalloc+0x18c>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d86a      	bhi.n	8006084 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005fae:	4b44      	ldr	r3, [pc, #272]	@ (80060c0 <pvPortMalloc+0x190>)
 8005fb0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005fb2:	4b43      	ldr	r3, [pc, #268]	@ (80060c0 <pvPortMalloc+0x190>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fb8:	e004      	b.n	8005fc4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d903      	bls.n	8005fd6 <pvPortMalloc+0xa6>
 8005fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1f1      	bne.n	8005fba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005fd6:	4b37      	ldr	r3, [pc, #220]	@ (80060b4 <pvPortMalloc+0x184>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d051      	beq.n	8006084 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2208      	movs	r2, #8
 8005fe6:	4413      	add	r3, r2
 8005fe8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	1ad2      	subs	r2, r2, r3
 8005ffa:	2308      	movs	r3, #8
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d920      	bls.n	8006044 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4413      	add	r3, r2
 8006008:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	f003 0307 	and.w	r3, r3, #7
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00b      	beq.n	800602c <pvPortMalloc+0xfc>
	__asm volatile
 8006014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	613b      	str	r3, [r7, #16]
}
 8006026:	bf00      	nop
 8006028:	bf00      	nop
 800602a:	e7fd      	b.n	8006028 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800602c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	1ad2      	subs	r2, r2, r3
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800603e:	69b8      	ldr	r0, [r7, #24]
 8006040:	f000 f90a 	bl	8006258 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006044:	4b1d      	ldr	r3, [pc, #116]	@ (80060bc <pvPortMalloc+0x18c>)
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	4a1b      	ldr	r2, [pc, #108]	@ (80060bc <pvPortMalloc+0x18c>)
 8006050:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006052:	4b1a      	ldr	r3, [pc, #104]	@ (80060bc <pvPortMalloc+0x18c>)
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	4b1b      	ldr	r3, [pc, #108]	@ (80060c4 <pvPortMalloc+0x194>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d203      	bcs.n	8006066 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800605e:	4b17      	ldr	r3, [pc, #92]	@ (80060bc <pvPortMalloc+0x18c>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a18      	ldr	r2, [pc, #96]	@ (80060c4 <pvPortMalloc+0x194>)
 8006064:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	4b13      	ldr	r3, [pc, #76]	@ (80060b8 <pvPortMalloc+0x188>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	431a      	orrs	r2, r3
 8006070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006072:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006076:	2200      	movs	r2, #0
 8006078:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800607a:	4b13      	ldr	r3, [pc, #76]	@ (80060c8 <pvPortMalloc+0x198>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3301      	adds	r3, #1
 8006080:	4a11      	ldr	r2, [pc, #68]	@ (80060c8 <pvPortMalloc+0x198>)
 8006082:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006084:	f001 fa7a 	bl	800757c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	f003 0307 	and.w	r3, r3, #7
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00b      	beq.n	80060aa <pvPortMalloc+0x17a>
	__asm volatile
 8006092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	60fb      	str	r3, [r7, #12]
}
 80060a4:	bf00      	nop
 80060a6:	bf00      	nop
 80060a8:	e7fd      	b.n	80060a6 <pvPortMalloc+0x176>
	return pvReturn;
 80060aa:	69fb      	ldr	r3, [r7, #28]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3728      	adds	r7, #40	@ 0x28
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	24003d30 	.word	0x24003d30
 80060b8:	24003d44 	.word	0x24003d44
 80060bc:	24003d34 	.word	0x24003d34
 80060c0:	24003d28 	.word	0x24003d28
 80060c4:	24003d38 	.word	0x24003d38
 80060c8:	24003d3c 	.word	0x24003d3c

080060cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d04f      	beq.n	800617e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80060de:	2308      	movs	r3, #8
 80060e0:	425b      	negs	r3, r3
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	4413      	add	r3, r2
 80060e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	4b25      	ldr	r3, [pc, #148]	@ (8006188 <vPortFree+0xbc>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4013      	ands	r3, r2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10b      	bne.n	8006112 <vPortFree+0x46>
	__asm volatile
 80060fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	60fb      	str	r3, [r7, #12]
}
 800610c:	bf00      	nop
 800610e:	bf00      	nop
 8006110:	e7fd      	b.n	800610e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00b      	beq.n	8006132 <vPortFree+0x66>
	__asm volatile
 800611a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611e:	f383 8811 	msr	BASEPRI, r3
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	60bb      	str	r3, [r7, #8]
}
 800612c:	bf00      	nop
 800612e:	bf00      	nop
 8006130:	e7fd      	b.n	800612e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	4b14      	ldr	r3, [pc, #80]	@ (8006188 <vPortFree+0xbc>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4013      	ands	r3, r2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d01e      	beq.n	800617e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d11a      	bne.n	800617e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	4b0e      	ldr	r3, [pc, #56]	@ (8006188 <vPortFree+0xbc>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	43db      	mvns	r3, r3
 8006152:	401a      	ands	r2, r3
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006158:	f001 fa02 	bl	8007560 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	4b0a      	ldr	r3, [pc, #40]	@ (800618c <vPortFree+0xc0>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4413      	add	r3, r2
 8006166:	4a09      	ldr	r2, [pc, #36]	@ (800618c <vPortFree+0xc0>)
 8006168:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800616a:	6938      	ldr	r0, [r7, #16]
 800616c:	f000 f874 	bl	8006258 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006170:	4b07      	ldr	r3, [pc, #28]	@ (8006190 <vPortFree+0xc4>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3301      	adds	r3, #1
 8006176:	4a06      	ldr	r2, [pc, #24]	@ (8006190 <vPortFree+0xc4>)
 8006178:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800617a:	f001 f9ff 	bl	800757c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800617e:	bf00      	nop
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	24003d44 	.word	0x24003d44
 800618c:	24003d34 	.word	0x24003d34
 8006190:	24003d40 	.word	0x24003d40

08006194 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800619a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800619e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061a0:	4b27      	ldr	r3, [pc, #156]	@ (8006240 <prvHeapInit+0xac>)
 80061a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f003 0307 	and.w	r3, r3, #7
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00c      	beq.n	80061c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3307      	adds	r3, #7
 80061b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0307 	bic.w	r3, r3, #7
 80061ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	4a1f      	ldr	r2, [pc, #124]	@ (8006240 <prvHeapInit+0xac>)
 80061c4:	4413      	add	r3, r2
 80061c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006244 <prvHeapInit+0xb0>)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061d2:	4b1c      	ldr	r3, [pc, #112]	@ (8006244 <prvHeapInit+0xb0>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	4413      	add	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80061e0:	2208      	movs	r2, #8
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	1a9b      	subs	r3, r3, r2
 80061e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0307 	bic.w	r3, r3, #7
 80061ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4a15      	ldr	r2, [pc, #84]	@ (8006248 <prvHeapInit+0xb4>)
 80061f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80061f6:	4b14      	ldr	r3, [pc, #80]	@ (8006248 <prvHeapInit+0xb4>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2200      	movs	r2, #0
 80061fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80061fe:	4b12      	ldr	r3, [pc, #72]	@ (8006248 <prvHeapInit+0xb4>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	1ad2      	subs	r2, r2, r3
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006214:	4b0c      	ldr	r3, [pc, #48]	@ (8006248 <prvHeapInit+0xb4>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	4a0a      	ldr	r2, [pc, #40]	@ (800624c <prvHeapInit+0xb8>)
 8006222:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	4a09      	ldr	r2, [pc, #36]	@ (8006250 <prvHeapInit+0xbc>)
 800622a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800622c:	4b09      	ldr	r3, [pc, #36]	@ (8006254 <prvHeapInit+0xc0>)
 800622e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006232:	601a      	str	r2, [r3, #0]
}
 8006234:	bf00      	nop
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	24000128 	.word	0x24000128
 8006244:	24003d28 	.word	0x24003d28
 8006248:	24003d30 	.word	0x24003d30
 800624c:	24003d38 	.word	0x24003d38
 8006250:	24003d34 	.word	0x24003d34
 8006254:	24003d44 	.word	0x24003d44

08006258 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006260:	4b28      	ldr	r3, [pc, #160]	@ (8006304 <prvInsertBlockIntoFreeList+0xac>)
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	e002      	b.n	800626c <prvInsertBlockIntoFreeList+0x14>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	429a      	cmp	r2, r3
 8006274:	d8f7      	bhi.n	8006266 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	4413      	add	r3, r2
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	429a      	cmp	r2, r3
 8006286:	d108      	bne.n	800629a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	441a      	add	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	441a      	add	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d118      	bne.n	80062e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	4b15      	ldr	r3, [pc, #84]	@ (8006308 <prvInsertBlockIntoFreeList+0xb0>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d00d      	beq.n	80062d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	441a      	add	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	e008      	b.n	80062e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006308 <prvInsertBlockIntoFreeList+0xb0>)
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	e003      	b.n	80062e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d002      	beq.n	80062f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062f6:	bf00      	nop
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	24003d28 	.word	0x24003d28
 8006308:	24003d30 	.word	0x24003d30

0800630c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f103 0208 	add.w	r2, r3, #8
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f04f 32ff 	mov.w	r2, #4294967295
 8006324:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f103 0208 	add.w	r2, r3, #8
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f103 0208 	add.w	r2, r3, #8
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006366:	b480      	push	{r7}
 8006368:	b085      	sub	sp, #20
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	1c5a      	adds	r2, r3, #1
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	601a      	str	r2, [r3, #0]
}
 80063a2:	bf00      	nop
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063ae:	b480      	push	{r7}
 80063b0:	b085      	sub	sp, #20
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c4:	d103      	bne.n	80063ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	e00c      	b.n	80063e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	3308      	adds	r3, #8
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	e002      	b.n	80063dc <vListInsert+0x2e>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d2f6      	bcs.n	80063d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	683a      	ldr	r2, [r7, #0]
 80063f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	601a      	str	r2, [r3, #0]
}
 8006414:	bf00      	nop
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6892      	ldr	r2, [r2, #8]
 8006436:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6852      	ldr	r2, [r2, #4]
 8006440:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	429a      	cmp	r2, r3
 800644a:	d103      	bne.n	8006454 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	1e5a      	subs	r2, r3, #1
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	3b04      	subs	r3, #4
 8006484:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800648c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	3b04      	subs	r3, #4
 8006492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	f023 0201 	bic.w	r2, r3, #1
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3b04      	subs	r3, #4
 80064a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064a4:	4a0c      	ldr	r2, [pc, #48]	@ (80064d8 <pxPortInitialiseStack+0x64>)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	3b14      	subs	r3, #20
 80064ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3b04      	subs	r3, #4
 80064ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f06f 0202 	mvn.w	r2, #2
 80064c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	3b20      	subs	r3, #32
 80064c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064ca:	68fb      	ldr	r3, [r7, #12]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	080064dd 	.word	0x080064dd

080064dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064e2:	2300      	movs	r3, #0
 80064e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064e6:	4b13      	ldr	r3, [pc, #76]	@ (8006534 <prvTaskExitError+0x58>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ee:	d00b      	beq.n	8006508 <prvTaskExitError+0x2c>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	60fb      	str	r3, [r7, #12]
}
 8006502:	bf00      	nop
 8006504:	bf00      	nop
 8006506:	e7fd      	b.n	8006504 <prvTaskExitError+0x28>
	__asm volatile
 8006508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800650c:	f383 8811 	msr	BASEPRI, r3
 8006510:	f3bf 8f6f 	isb	sy
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	60bb      	str	r3, [r7, #8]
}
 800651a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800651c:	bf00      	nop
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0fc      	beq.n	800651e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	24000010 	.word	0x24000010
	...

08006540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006540:	4b07      	ldr	r3, [pc, #28]	@ (8006560 <pxCurrentTCBConst2>)
 8006542:	6819      	ldr	r1, [r3, #0]
 8006544:	6808      	ldr	r0, [r1, #0]
 8006546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654a:	f380 8809 	msr	PSP, r0
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f04f 0000 	mov.w	r0, #0
 8006556:	f380 8811 	msr	BASEPRI, r0
 800655a:	4770      	bx	lr
 800655c:	f3af 8000 	nop.w

08006560 <pxCurrentTCBConst2>:
 8006560:	24003d90 	.word	0x24003d90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop

08006568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006568:	4808      	ldr	r0, [pc, #32]	@ (800658c <prvPortStartFirstTask+0x24>)
 800656a:	6800      	ldr	r0, [r0, #0]
 800656c:	6800      	ldr	r0, [r0, #0]
 800656e:	f380 8808 	msr	MSP, r0
 8006572:	f04f 0000 	mov.w	r0, #0
 8006576:	f380 8814 	msr	CONTROL, r0
 800657a:	b662      	cpsie	i
 800657c:	b661      	cpsie	f
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	df00      	svc	0
 8006588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800658a:	bf00      	nop
 800658c:	e000ed08 	.word	0xe000ed08

08006590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006596:	4b47      	ldr	r3, [pc, #284]	@ (80066b4 <xPortStartScheduler+0x124>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a47      	ldr	r2, [pc, #284]	@ (80066b8 <xPortStartScheduler+0x128>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d10b      	bne.n	80065b8 <xPortStartScheduler+0x28>
	__asm volatile
 80065a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	60fb      	str	r3, [r7, #12]
}
 80065b2:	bf00      	nop
 80065b4:	bf00      	nop
 80065b6:	e7fd      	b.n	80065b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065b8:	4b3e      	ldr	r3, [pc, #248]	@ (80066b4 <xPortStartScheduler+0x124>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a3f      	ldr	r2, [pc, #252]	@ (80066bc <xPortStartScheduler+0x12c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d10b      	bne.n	80065da <xPortStartScheduler+0x4a>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	613b      	str	r3, [r7, #16]
}
 80065d4:	bf00      	nop
 80065d6:	bf00      	nop
 80065d8:	e7fd      	b.n	80065d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065da:	4b39      	ldr	r3, [pc, #228]	@ (80066c0 <xPortStartScheduler+0x130>)
 80065dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	22ff      	movs	r2, #255	@ 0xff
 80065ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	4b31      	ldr	r3, [pc, #196]	@ (80066c4 <xPortStartScheduler+0x134>)
 8006600:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006602:	4b31      	ldr	r3, [pc, #196]	@ (80066c8 <xPortStartScheduler+0x138>)
 8006604:	2207      	movs	r2, #7
 8006606:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006608:	e009      	b.n	800661e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800660a:	4b2f      	ldr	r3, [pc, #188]	@ (80066c8 <xPortStartScheduler+0x138>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3b01      	subs	r3, #1
 8006610:	4a2d      	ldr	r2, [pc, #180]	@ (80066c8 <xPortStartScheduler+0x138>)
 8006612:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006614:	78fb      	ldrb	r3, [r7, #3]
 8006616:	b2db      	uxtb	r3, r3
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	b2db      	uxtb	r3, r3
 800661c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800661e:	78fb      	ldrb	r3, [r7, #3]
 8006620:	b2db      	uxtb	r3, r3
 8006622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006626:	2b80      	cmp	r3, #128	@ 0x80
 8006628:	d0ef      	beq.n	800660a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800662a:	4b27      	ldr	r3, [pc, #156]	@ (80066c8 <xPortStartScheduler+0x138>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f1c3 0307 	rsb	r3, r3, #7
 8006632:	2b04      	cmp	r3, #4
 8006634:	d00b      	beq.n	800664e <xPortStartScheduler+0xbe>
	__asm volatile
 8006636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	60bb      	str	r3, [r7, #8]
}
 8006648:	bf00      	nop
 800664a:	bf00      	nop
 800664c:	e7fd      	b.n	800664a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800664e:	4b1e      	ldr	r3, [pc, #120]	@ (80066c8 <xPortStartScheduler+0x138>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	021b      	lsls	r3, r3, #8
 8006654:	4a1c      	ldr	r2, [pc, #112]	@ (80066c8 <xPortStartScheduler+0x138>)
 8006656:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006658:	4b1b      	ldr	r3, [pc, #108]	@ (80066c8 <xPortStartScheduler+0x138>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006660:	4a19      	ldr	r2, [pc, #100]	@ (80066c8 <xPortStartScheduler+0x138>)
 8006662:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	b2da      	uxtb	r2, r3
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800666c:	4b17      	ldr	r3, [pc, #92]	@ (80066cc <xPortStartScheduler+0x13c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a16      	ldr	r2, [pc, #88]	@ (80066cc <xPortStartScheduler+0x13c>)
 8006672:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006676:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006678:	4b14      	ldr	r3, [pc, #80]	@ (80066cc <xPortStartScheduler+0x13c>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a13      	ldr	r2, [pc, #76]	@ (80066cc <xPortStartScheduler+0x13c>)
 800667e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006682:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006684:	f000 f8b8 	bl	80067f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006688:	4b11      	ldr	r3, [pc, #68]	@ (80066d0 <xPortStartScheduler+0x140>)
 800668a:	2200      	movs	r2, #0
 800668c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800668e:	f000 f8d7 	bl	8006840 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006692:	4b10      	ldr	r3, [pc, #64]	@ (80066d4 <xPortStartScheduler+0x144>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a0f      	ldr	r2, [pc, #60]	@ (80066d4 <xPortStartScheduler+0x144>)
 8006698:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800669c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800669e:	f7ff ff63 	bl	8006568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80066a2:	f001 f8d3 	bl	800784c <vTaskSwitchContext>
	prvTaskExitError();
 80066a6:	f7ff ff19 	bl	80064dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	e000ed00 	.word	0xe000ed00
 80066b8:	410fc271 	.word	0x410fc271
 80066bc:	410fc270 	.word	0x410fc270
 80066c0:	e000e400 	.word	0xe000e400
 80066c4:	24003d48 	.word	0x24003d48
 80066c8:	24003d4c 	.word	0x24003d4c
 80066cc:	e000ed20 	.word	0xe000ed20
 80066d0:	24000010 	.word	0x24000010
 80066d4:	e000ef34 	.word	0xe000ef34

080066d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	607b      	str	r3, [r7, #4]
}
 80066f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066f2:	4b10      	ldr	r3, [pc, #64]	@ (8006734 <vPortEnterCritical+0x5c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3301      	adds	r3, #1
 80066f8:	4a0e      	ldr	r2, [pc, #56]	@ (8006734 <vPortEnterCritical+0x5c>)
 80066fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006734 <vPortEnterCritical+0x5c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d110      	bne.n	8006726 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006704:	4b0c      	ldr	r3, [pc, #48]	@ (8006738 <vPortEnterCritical+0x60>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00b      	beq.n	8006726 <vPortEnterCritical+0x4e>
	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	603b      	str	r3, [r7, #0]
}
 8006720:	bf00      	nop
 8006722:	bf00      	nop
 8006724:	e7fd      	b.n	8006722 <vPortEnterCritical+0x4a>
	}
}
 8006726:	bf00      	nop
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	24000010 	.word	0x24000010
 8006738:	e000ed04 	.word	0xe000ed04

0800673c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006742:	4b12      	ldr	r3, [pc, #72]	@ (800678c <vPortExitCritical+0x50>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10b      	bne.n	8006762 <vPortExitCritical+0x26>
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	607b      	str	r3, [r7, #4]
}
 800675c:	bf00      	nop
 800675e:	bf00      	nop
 8006760:	e7fd      	b.n	800675e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006762:	4b0a      	ldr	r3, [pc, #40]	@ (800678c <vPortExitCritical+0x50>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3b01      	subs	r3, #1
 8006768:	4a08      	ldr	r2, [pc, #32]	@ (800678c <vPortExitCritical+0x50>)
 800676a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800676c:	4b07      	ldr	r3, [pc, #28]	@ (800678c <vPortExitCritical+0x50>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d105      	bne.n	8006780 <vPortExitCritical+0x44>
 8006774:	2300      	movs	r3, #0
 8006776:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800677e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	24000010 	.word	0x24000010

08006790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006790:	f3ef 8009 	mrs	r0, PSP
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	4b15      	ldr	r3, [pc, #84]	@ (80067f0 <pxCurrentTCBConst>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	f01e 0f10 	tst.w	lr, #16
 80067a0:	bf08      	it	eq
 80067a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067aa:	6010      	str	r0, [r2, #0]
 80067ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80067b4:	f380 8811 	msr	BASEPRI, r0
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f001 f844 	bl	800784c <vTaskSwitchContext>
 80067c4:	f04f 0000 	mov.w	r0, #0
 80067c8:	f380 8811 	msr	BASEPRI, r0
 80067cc:	bc09      	pop	{r0, r3}
 80067ce:	6819      	ldr	r1, [r3, #0]
 80067d0:	6808      	ldr	r0, [r1, #0]
 80067d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d6:	f01e 0f10 	tst.w	lr, #16
 80067da:	bf08      	it	eq
 80067dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067e0:	f380 8809 	msr	PSP, r0
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	f3af 8000 	nop.w

080067f0 <pxCurrentTCBConst>:
 80067f0:	24003d90 	.word	0x24003d90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067f4:	bf00      	nop
 80067f6:	bf00      	nop

080067f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80067f8:	b480      	push	{r7}
 80067fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067fc:	4b0b      	ldr	r3, [pc, #44]	@ (800682c <vPortSetupTimerInterrupt+0x34>)
 80067fe:	2200      	movs	r2, #0
 8006800:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006802:	4b0b      	ldr	r3, [pc, #44]	@ (8006830 <vPortSetupTimerInterrupt+0x38>)
 8006804:	2200      	movs	r2, #0
 8006806:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006808:	4b0a      	ldr	r3, [pc, #40]	@ (8006834 <vPortSetupTimerInterrupt+0x3c>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a0a      	ldr	r2, [pc, #40]	@ (8006838 <vPortSetupTimerInterrupt+0x40>)
 800680e:	fba2 2303 	umull	r2, r3, r2, r3
 8006812:	099b      	lsrs	r3, r3, #6
 8006814:	4a09      	ldr	r2, [pc, #36]	@ (800683c <vPortSetupTimerInterrupt+0x44>)
 8006816:	3b01      	subs	r3, #1
 8006818:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800681a:	4b04      	ldr	r3, [pc, #16]	@ (800682c <vPortSetupTimerInterrupt+0x34>)
 800681c:	2207      	movs	r2, #7
 800681e:	601a      	str	r2, [r3, #0]
}
 8006820:	bf00      	nop
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	e000e010 	.word	0xe000e010
 8006830:	e000e018 	.word	0xe000e018
 8006834:	24000000 	.word	0x24000000
 8006838:	10624dd3 	.word	0x10624dd3
 800683c:	e000e014 	.word	0xe000e014

08006840 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006840:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006850 <vPortEnableVFP+0x10>
 8006844:	6801      	ldr	r1, [r0, #0]
 8006846:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800684a:	6001      	str	r1, [r0, #0]
 800684c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800684e:	bf00      	nop
 8006850:	e000ed88 	.word	0xe000ed88

08006854 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800685a:	f3ef 8305 	mrs	r3, IPSR
 800685e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2b0f      	cmp	r3, #15
 8006864:	d915      	bls.n	8006892 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006866:	4a18      	ldr	r2, [pc, #96]	@ (80068c8 <vPortValidateInterruptPriority+0x74>)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006870:	4b16      	ldr	r3, [pc, #88]	@ (80068cc <vPortValidateInterruptPriority+0x78>)
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	7afa      	ldrb	r2, [r7, #11]
 8006876:	429a      	cmp	r2, r3
 8006878:	d20b      	bcs.n	8006892 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800687a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687e:	f383 8811 	msr	BASEPRI, r3
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	607b      	str	r3, [r7, #4]
}
 800688c:	bf00      	nop
 800688e:	bf00      	nop
 8006890:	e7fd      	b.n	800688e <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006892:	4b0f      	ldr	r3, [pc, #60]	@ (80068d0 <vPortValidateInterruptPriority+0x7c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800689a:	4b0e      	ldr	r3, [pc, #56]	@ (80068d4 <vPortValidateInterruptPriority+0x80>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d90b      	bls.n	80068ba <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	603b      	str	r3, [r7, #0]
}
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop
 80068b8:	e7fd      	b.n	80068b6 <vPortValidateInterruptPriority+0x62>
	}
 80068ba:	bf00      	nop
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	e000e3f0 	.word	0xe000e3f0
 80068cc:	24003d48 	.word	0x24003d48
 80068d0:	e000ed0c 	.word	0xe000ed0c
 80068d4:	24003d4c 	.word	0x24003d4c

080068d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10b      	bne.n	8006904 <xQueueGenericReset+0x2c>
	__asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	60bb      	str	r3, [r7, #8]
}
 80068fe:	bf00      	nop
 8006900:	bf00      	nop
 8006902:	e7fd      	b.n	8006900 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006904:	f7ff fee8 	bl	80066d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006910:	68f9      	ldr	r1, [r7, #12]
 8006912:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006914:	fb01 f303 	mul.w	r3, r1, r3
 8006918:	441a      	add	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006934:	3b01      	subs	r3, #1
 8006936:	68f9      	ldr	r1, [r7, #12]
 8006938:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800693a:	fb01 f303 	mul.w	r3, r1, r3
 800693e:	441a      	add	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	22ff      	movs	r2, #255	@ 0xff
 8006948:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	22ff      	movs	r2, #255	@ 0xff
 8006950:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d114      	bne.n	8006984 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d01a      	beq.n	8006998 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3310      	adds	r3, #16
 8006966:	4618      	mov	r0, r3
 8006968:	f001 f820 	bl	80079ac <xTaskRemoveFromEventList>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d012      	beq.n	8006998 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006972:	4b0d      	ldr	r3, [pc, #52]	@ (80069a8 <xQueueGenericReset+0xd0>)
 8006974:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	e009      	b.n	8006998 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	3310      	adds	r3, #16
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff fcbf 	bl	800630c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	3324      	adds	r3, #36	@ 0x24
 8006992:	4618      	mov	r0, r3
 8006994:	f7ff fcba 	bl	800630c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006998:	f7ff fed0 	bl	800673c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800699c:	2301      	movs	r3, #1
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	e000ed04 	.word	0xe000ed04

080069ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b08a      	sub	sp, #40	@ 0x28
 80069b0:	af02      	add	r7, sp, #8
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	4613      	mov	r3, r2
 80069b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10b      	bne.n	80069d8 <xQueueGenericCreate+0x2c>
	__asm volatile
 80069c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	613b      	str	r3, [r7, #16]
}
 80069d2:	bf00      	nop
 80069d4:	bf00      	nop
 80069d6:	e7fd      	b.n	80069d4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	fb02 f303 	mul.w	r3, r2, r3
 80069e0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	3350      	adds	r3, #80	@ 0x50
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff faa2 	bl	8005f30 <pvPortMalloc>
 80069ec:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00d      	beq.n	8006a10 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	3350      	adds	r3, #80	@ 0x50
 80069fc:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069fe:	79fa      	ldrb	r2, [r7, #7]
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	4613      	mov	r3, r2
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	68b9      	ldr	r1, [r7, #8]
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 f805 	bl	8006a1a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a10:	69bb      	ldr	r3, [r7, #24]
	}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3720      	adds	r7, #32
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b084      	sub	sp, #16
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	60f8      	str	r0, [r7, #12]
 8006a22:	60b9      	str	r1, [r7, #8]
 8006a24:	607a      	str	r2, [r7, #4]
 8006a26:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d103      	bne.n	8006a36 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	e002      	b.n	8006a3c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a48:	2101      	movs	r1, #1
 8006a4a:	69b8      	ldr	r0, [r7, #24]
 8006a4c:	f7ff ff44 	bl	80068d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	78fa      	ldrb	r2, [r7, #3]
 8006a54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a58:	bf00      	nop
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b08e      	sub	sp, #56	@ 0x38
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
 8006a6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10b      	bne.n	8006a94 <xQueueGenericSend+0x34>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a8e:	bf00      	nop
 8006a90:	bf00      	nop
 8006a92:	e7fd      	b.n	8006a90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d103      	bne.n	8006aa2 <xQueueGenericSend+0x42>
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <xQueueGenericSend+0x46>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e000      	b.n	8006aa8 <xQueueGenericSend+0x48>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10b      	bne.n	8006ac4 <xQueueGenericSend+0x64>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006abe:	bf00      	nop
 8006ac0:	bf00      	nop
 8006ac2:	e7fd      	b.n	8006ac0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d103      	bne.n	8006ad2 <xQueueGenericSend+0x72>
 8006aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d101      	bne.n	8006ad6 <xQueueGenericSend+0x76>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e000      	b.n	8006ad8 <xQueueGenericSend+0x78>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10b      	bne.n	8006af4 <xQueueGenericSend+0x94>
	__asm volatile
 8006adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	623b      	str	r3, [r7, #32]
}
 8006aee:	bf00      	nop
 8006af0:	bf00      	nop
 8006af2:	e7fd      	b.n	8006af0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006af4:	f001 f8fa 	bl	8007cec <xTaskGetSchedulerState>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d102      	bne.n	8006b04 <xQueueGenericSend+0xa4>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <xQueueGenericSend+0xa8>
 8006b04:	2301      	movs	r3, #1
 8006b06:	e000      	b.n	8006b0a <xQueueGenericSend+0xaa>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10b      	bne.n	8006b26 <xQueueGenericSend+0xc6>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	61fb      	str	r3, [r7, #28]
}
 8006b20:	bf00      	nop
 8006b22:	bf00      	nop
 8006b24:	e7fd      	b.n	8006b22 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b26:	f7ff fdd7 	bl	80066d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d302      	bcc.n	8006b3c <xQueueGenericSend+0xdc>
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d129      	bne.n	8006b90 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	68b9      	ldr	r1, [r7, #8]
 8006b40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b42:	f000 fa0f 	bl	8006f64 <prvCopyDataToQueue>
 8006b46:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d010      	beq.n	8006b72 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b52:	3324      	adds	r3, #36	@ 0x24
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 ff29 	bl	80079ac <xTaskRemoveFromEventList>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d013      	beq.n	8006b88 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b60:	4b3f      	ldr	r3, [pc, #252]	@ (8006c60 <xQueueGenericSend+0x200>)
 8006b62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	e00a      	b.n	8006b88 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d007      	beq.n	8006b88 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b78:	4b39      	ldr	r3, [pc, #228]	@ (8006c60 <xQueueGenericSend+0x200>)
 8006b7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b88:	f7ff fdd8 	bl	800673c <vPortExitCritical>
				return pdPASS;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e063      	b.n	8006c58 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d103      	bne.n	8006b9e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b96:	f7ff fdd1 	bl	800673c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	e05c      	b.n	8006c58 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d106      	bne.n	8006bb2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ba4:	f107 0314 	add.w	r3, r7, #20
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 ff63 	bl	8007a74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bb2:	f7ff fdc3 	bl	800673c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bb6:	f000 fcd3 	bl	8007560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bba:	f7ff fd8d 	bl	80066d8 <vPortEnterCritical>
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bc4:	b25b      	sxtb	r3, r3
 8006bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bca:	d103      	bne.n	8006bd4 <xQueueGenericSend+0x174>
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bda:	b25b      	sxtb	r3, r3
 8006bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be0:	d103      	bne.n	8006bea <xQueueGenericSend+0x18a>
 8006be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bea:	f7ff fda7 	bl	800673c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bee:	1d3a      	adds	r2, r7, #4
 8006bf0:	f107 0314 	add.w	r3, r7, #20
 8006bf4:	4611      	mov	r1, r2
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 ff52 	bl	8007aa0 <xTaskCheckForTimeOut>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d124      	bne.n	8006c4c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c04:	f000 faa6 	bl	8007154 <prvIsQueueFull>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d018      	beq.n	8006c40 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c10:	3310      	adds	r3, #16
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	4611      	mov	r1, r2
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 fe76 	bl	8007908 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c1e:	f000 fa31 	bl	8007084 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c22:	f000 fcab 	bl	800757c <xTaskResumeAll>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f47f af7c 	bne.w	8006b26 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c60 <xQueueGenericSend+0x200>)
 8006c30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	e772      	b.n	8006b26 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c42:	f000 fa1f 	bl	8007084 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c46:	f000 fc99 	bl	800757c <xTaskResumeAll>
 8006c4a:	e76c      	b.n	8006b26 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c4e:	f000 fa19 	bl	8007084 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c52:	f000 fc93 	bl	800757c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3738      	adds	r7, #56	@ 0x38
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	e000ed04 	.word	0xe000ed04

08006c64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b090      	sub	sp, #64	@ 0x40
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10b      	bne.n	8006c94 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c8e:	bf00      	nop
 8006c90:	bf00      	nop
 8006c92:	e7fd      	b.n	8006c90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d103      	bne.n	8006ca2 <xQueueGenericSendFromISR+0x3e>
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <xQueueGenericSendFromISR+0x42>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e000      	b.n	8006ca8 <xQueueGenericSendFromISR+0x44>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10b      	bne.n	8006cc4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006cbe:	bf00      	nop
 8006cc0:	bf00      	nop
 8006cc2:	e7fd      	b.n	8006cc0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d103      	bne.n	8006cd2 <xQueueGenericSendFromISR+0x6e>
 8006cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d101      	bne.n	8006cd6 <xQueueGenericSendFromISR+0x72>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e000      	b.n	8006cd8 <xQueueGenericSendFromISR+0x74>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10b      	bne.n	8006cf4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	623b      	str	r3, [r7, #32]
}
 8006cee:	bf00      	nop
 8006cf0:	bf00      	nop
 8006cf2:	e7fd      	b.n	8006cf0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006cf4:	f7ff fdae 	bl	8006854 <vPortValidateInterruptPriority>
	__asm volatile
 8006cf8:	f3ef 8211 	mrs	r2, BASEPRI
 8006cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	61fa      	str	r2, [r7, #28]
 8006d0e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006d10:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d12:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d302      	bcc.n	8006d26 <xQueueGenericSendFromISR+0xc2>
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d12f      	bne.n	8006d86 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	68b9      	ldr	r1, [r7, #8]
 8006d3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006d3c:	f000 f912 	bl	8006f64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d40:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d48:	d112      	bne.n	8006d70 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d016      	beq.n	8006d80 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d54:	3324      	adds	r3, #36	@ 0x24
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 fe28 	bl	80079ac <xTaskRemoveFromEventList>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00e      	beq.n	8006d80 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00b      	beq.n	8006d80 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	e007      	b.n	8006d80 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006d74:	3301      	adds	r3, #1
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	b25a      	sxtb	r2, r3
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006d80:	2301      	movs	r3, #1
 8006d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006d84:	e001      	b.n	8006d8a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d8c:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f383 8811 	msr	BASEPRI, r3
}
 8006d94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3740      	adds	r7, #64	@ 0x40
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b08c      	sub	sp, #48	@ 0x30
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006dac:	2300      	movs	r3, #0
 8006dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10b      	bne.n	8006dd2 <xQueueReceive+0x32>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	623b      	str	r3, [r7, #32]
}
 8006dcc:	bf00      	nop
 8006dce:	bf00      	nop
 8006dd0:	e7fd      	b.n	8006dce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d103      	bne.n	8006de0 <xQueueReceive+0x40>
 8006dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <xQueueReceive+0x44>
 8006de0:	2301      	movs	r3, #1
 8006de2:	e000      	b.n	8006de6 <xQueueReceive+0x46>
 8006de4:	2300      	movs	r3, #0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10b      	bne.n	8006e02 <xQueueReceive+0x62>
	__asm volatile
 8006dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	61fb      	str	r3, [r7, #28]
}
 8006dfc:	bf00      	nop
 8006dfe:	bf00      	nop
 8006e00:	e7fd      	b.n	8006dfe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e02:	f000 ff73 	bl	8007cec <xTaskGetSchedulerState>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d102      	bne.n	8006e12 <xQueueReceive+0x72>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <xQueueReceive+0x76>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <xQueueReceive+0x78>
 8006e16:	2300      	movs	r3, #0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10b      	bne.n	8006e34 <xQueueReceive+0x94>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	61bb      	str	r3, [r7, #24]
}
 8006e2e:	bf00      	nop
 8006e30:	bf00      	nop
 8006e32:	e7fd      	b.n	8006e30 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e34:	f7ff fc50 	bl	80066d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e3c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d01f      	beq.n	8006e84 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e44:	68b9      	ldr	r1, [r7, #8]
 8006e46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e48:	f000 f8f6 	bl	8007038 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4e:	1e5a      	subs	r2, r3, #1
 8006e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e52:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00f      	beq.n	8006e7c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e5e:	3310      	adds	r3, #16
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 fda3 	bl	80079ac <xTaskRemoveFromEventList>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d007      	beq.n	8006e7c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e6c:	4b3c      	ldr	r3, [pc, #240]	@ (8006f60 <xQueueReceive+0x1c0>)
 8006e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e7c:	f7ff fc5e 	bl	800673c <vPortExitCritical>
				return pdPASS;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e069      	b.n	8006f58 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d103      	bne.n	8006e92 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e8a:	f7ff fc57 	bl	800673c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	e062      	b.n	8006f58 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d106      	bne.n	8006ea6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e98:	f107 0310 	add.w	r3, r7, #16
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f000 fde9 	bl	8007a74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ea6:	f7ff fc49 	bl	800673c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006eaa:	f000 fb59 	bl	8007560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006eae:	f7ff fc13 	bl	80066d8 <vPortEnterCritical>
 8006eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006eb8:	b25b      	sxtb	r3, r3
 8006eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebe:	d103      	bne.n	8006ec8 <xQueueReceive+0x128>
 8006ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ece:	b25b      	sxtb	r3, r3
 8006ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed4:	d103      	bne.n	8006ede <xQueueReceive+0x13e>
 8006ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ede:	f7ff fc2d 	bl	800673c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ee2:	1d3a      	adds	r2, r7, #4
 8006ee4:	f107 0310 	add.w	r3, r7, #16
 8006ee8:	4611      	mov	r1, r2
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 fdd8 	bl	8007aa0 <xTaskCheckForTimeOut>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d123      	bne.n	8006f3e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ef6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ef8:	f000 f916 	bl	8007128 <prvIsQueueEmpty>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d017      	beq.n	8006f32 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f04:	3324      	adds	r3, #36	@ 0x24
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	4611      	mov	r1, r2
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 fcfc 	bl	8007908 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f12:	f000 f8b7 	bl	8007084 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f16:	f000 fb31 	bl	800757c <xTaskResumeAll>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d189      	bne.n	8006e34 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006f20:	4b0f      	ldr	r3, [pc, #60]	@ (8006f60 <xQueueReceive+0x1c0>)
 8006f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	f3bf 8f6f 	isb	sy
 8006f30:	e780      	b.n	8006e34 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f34:	f000 f8a6 	bl	8007084 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f38:	f000 fb20 	bl	800757c <xTaskResumeAll>
 8006f3c:	e77a      	b.n	8006e34 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f40:	f000 f8a0 	bl	8007084 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f44:	f000 fb1a 	bl	800757c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f4a:	f000 f8ed 	bl	8007128 <prvIsQueueEmpty>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f43f af6f 	beq.w	8006e34 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3730      	adds	r7, #48	@ 0x30
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	e000ed04 	.word	0xe000ed04

08006f64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f70:	2300      	movs	r3, #0
 8006f72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10d      	bne.n	8006f9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d14d      	bne.n	8007026 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 feca 	bl	8007d28 <xTaskPriorityDisinherit>
 8006f94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	609a      	str	r2, [r3, #8]
 8006f9c:	e043      	b.n	8007026 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d119      	bne.n	8006fd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6858      	ldr	r0, [r3, #4]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fac:	461a      	mov	r2, r3
 8006fae:	68b9      	ldr	r1, [r7, #8]
 8006fb0:	f001 fae4 	bl	800857c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fbc:	441a      	add	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d32b      	bcc.n	8007026 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	605a      	str	r2, [r3, #4]
 8006fd6:	e026      	b.n	8007026 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	68d8      	ldr	r0, [r3, #12]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	68b9      	ldr	r1, [r7, #8]
 8006fe4:	f001 faca 	bl	800857c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	68da      	ldr	r2, [r3, #12]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff0:	425b      	negs	r3, r3
 8006ff2:	441a      	add	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	68da      	ldr	r2, [r3, #12]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	429a      	cmp	r2, r3
 8007002:	d207      	bcs.n	8007014 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	689a      	ldr	r2, [r3, #8]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800700c:	425b      	negs	r3, r3
 800700e:	441a      	add	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b02      	cmp	r3, #2
 8007018:	d105      	bne.n	8007026 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	3b01      	subs	r3, #1
 8007024:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	1c5a      	adds	r2, r3, #1
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800702e:	697b      	ldr	r3, [r7, #20]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3718      	adds	r7, #24
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007046:	2b00      	cmp	r3, #0
 8007048:	d018      	beq.n	800707c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68da      	ldr	r2, [r3, #12]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007052:	441a      	add	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	68da      	ldr	r2, [r3, #12]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	429a      	cmp	r2, r3
 8007062:	d303      	bcc.n	800706c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68d9      	ldr	r1, [r3, #12]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007074:	461a      	mov	r2, r3
 8007076:	6838      	ldr	r0, [r7, #0]
 8007078:	f001 fa80 	bl	800857c <memcpy>
	}
}
 800707c:	bf00      	nop
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800708c:	f7ff fb24 	bl	80066d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007096:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007098:	e011      	b.n	80070be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d012      	beq.n	80070c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	3324      	adds	r3, #36	@ 0x24
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 fc80 	bl	80079ac <xTaskRemoveFromEventList>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80070b2:	f000 fd59 	bl	8007b68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
 80070b8:	3b01      	subs	r3, #1
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	dce9      	bgt.n	800709a <prvUnlockQueue+0x16>
 80070c6:	e000      	b.n	80070ca <prvUnlockQueue+0x46>
					break;
 80070c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	22ff      	movs	r2, #255	@ 0xff
 80070ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80070d2:	f7ff fb33 	bl	800673c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80070d6:	f7ff faff 	bl	80066d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070e2:	e011      	b.n	8007108 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d012      	beq.n	8007112 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	3310      	adds	r3, #16
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 fc5b 	bl	80079ac <xTaskRemoveFromEventList>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80070fc:	f000 fd34 	bl	8007b68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007100:	7bbb      	ldrb	r3, [r7, #14]
 8007102:	3b01      	subs	r3, #1
 8007104:	b2db      	uxtb	r3, r3
 8007106:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800710c:	2b00      	cmp	r3, #0
 800710e:	dce9      	bgt.n	80070e4 <prvUnlockQueue+0x60>
 8007110:	e000      	b.n	8007114 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007112:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	22ff      	movs	r2, #255	@ 0xff
 8007118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800711c:	f7ff fb0e 	bl	800673c <vPortExitCritical>
}
 8007120:	bf00      	nop
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007130:	f7ff fad2 	bl	80066d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007138:	2b00      	cmp	r3, #0
 800713a:	d102      	bne.n	8007142 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800713c:	2301      	movs	r3, #1
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	e001      	b.n	8007146 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007142:	2300      	movs	r3, #0
 8007144:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007146:	f7ff faf9 	bl	800673c <vPortExitCritical>

	return xReturn;
 800714a:	68fb      	ldr	r3, [r7, #12]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800715c:	f7ff fabc 	bl	80066d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007168:	429a      	cmp	r2, r3
 800716a:	d102      	bne.n	8007172 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800716c:	2301      	movs	r3, #1
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	e001      	b.n	8007176 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007172:	2300      	movs	r3, #0
 8007174:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007176:	f7ff fae1 	bl	800673c <vPortExitCritical>

	return xReturn;
 800717a:	68fb      	ldr	r3, [r7, #12]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800718e:	2300      	movs	r3, #0
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	e014      	b.n	80071be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007194:	4a0f      	ldr	r2, [pc, #60]	@ (80071d4 <vQueueAddToRegistry+0x50>)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10b      	bne.n	80071b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80071a0:	490c      	ldr	r1, [pc, #48]	@ (80071d4 <vQueueAddToRegistry+0x50>)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80071aa:	4a0a      	ldr	r2, [pc, #40]	@ (80071d4 <vQueueAddToRegistry+0x50>)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	00db      	lsls	r3, r3, #3
 80071b0:	4413      	add	r3, r2
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80071b6:	e006      	b.n	80071c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3301      	adds	r3, #1
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2b07      	cmp	r3, #7
 80071c2:	d9e7      	bls.n	8007194 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80071c4:	bf00      	nop
 80071c6:	bf00      	nop
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	24003d50 	.word	0x24003d50

080071d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80071e8:	f7ff fa76 	bl	80066d8 <vPortEnterCritical>
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071f2:	b25b      	sxtb	r3, r3
 80071f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f8:	d103      	bne.n	8007202 <vQueueWaitForMessageRestricted+0x2a>
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007208:	b25b      	sxtb	r3, r3
 800720a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720e:	d103      	bne.n	8007218 <vQueueWaitForMessageRestricted+0x40>
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007218:	f7ff fa90 	bl	800673c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007220:	2b00      	cmp	r3, #0
 8007222:	d106      	bne.n	8007232 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	3324      	adds	r3, #36	@ 0x24
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	68b9      	ldr	r1, [r7, #8]
 800722c:	4618      	mov	r0, r3
 800722e:	f000 fb91 	bl	8007954 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007232:	6978      	ldr	r0, [r7, #20]
 8007234:	f7ff ff26 	bl	8007084 <prvUnlockQueue>
	}
 8007238:	bf00      	nop
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007240:	b580      	push	{r7, lr}
 8007242:	b08c      	sub	sp, #48	@ 0x30
 8007244:	af04      	add	r7, sp, #16
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	603b      	str	r3, [r7, #0]
 800724c:	4613      	mov	r3, r2
 800724e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007250:	88fb      	ldrh	r3, [r7, #6]
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4618      	mov	r0, r3
 8007256:	f7fe fe6b 	bl	8005f30 <pvPortMalloc>
 800725a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00e      	beq.n	8007280 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007262:	205c      	movs	r0, #92	@ 0x5c
 8007264:	f7fe fe64 	bl	8005f30 <pvPortMalloc>
 8007268:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d003      	beq.n	8007278 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	631a      	str	r2, [r3, #48]	@ 0x30
 8007276:	e005      	b.n	8007284 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007278:	6978      	ldr	r0, [r7, #20]
 800727a:	f7fe ff27 	bl	80060cc <vPortFree>
 800727e:	e001      	b.n	8007284 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007280:	2300      	movs	r3, #0
 8007282:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d013      	beq.n	80072b2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800728a:	88fa      	ldrh	r2, [r7, #6]
 800728c:	2300      	movs	r3, #0
 800728e:	9303      	str	r3, [sp, #12]
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	9302      	str	r3, [sp, #8]
 8007294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007296:	9301      	str	r3, [sp, #4]
 8007298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	68b9      	ldr	r1, [r7, #8]
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 f80e 	bl	80072c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072a6:	69f8      	ldr	r0, [r7, #28]
 80072a8:	f000 f89c 	bl	80073e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072ac:	2301      	movs	r3, #1
 80072ae:	61bb      	str	r3, [r7, #24]
 80072b0:	e002      	b.n	80072b8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072b2:	f04f 33ff 	mov.w	r3, #4294967295
 80072b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072b8:	69bb      	ldr	r3, [r7, #24]
	}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3720      	adds	r7, #32
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b088      	sub	sp, #32
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	60f8      	str	r0, [r7, #12]
 80072ca:	60b9      	str	r1, [r7, #8]
 80072cc:	607a      	str	r2, [r7, #4]
 80072ce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80072d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	461a      	mov	r2, r3
 80072da:	21a5      	movs	r1, #165	@ 0xa5
 80072dc:	f001 f922 	bl	8008524 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80072e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072e4:	6879      	ldr	r1, [r7, #4]
 80072e6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80072ea:	440b      	add	r3, r1
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4413      	add	r3, r2
 80072f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	f023 0307 	bic.w	r3, r3, #7
 80072f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	f003 0307 	and.w	r3, r3, #7
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00b      	beq.n	800731c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	617b      	str	r3, [r7, #20]
}
 8007316:	bf00      	nop
 8007318:	bf00      	nop
 800731a:	e7fd      	b.n	8007318 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d01f      	beq.n	8007362 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007322:	2300      	movs	r3, #0
 8007324:	61fb      	str	r3, [r7, #28]
 8007326:	e012      	b.n	800734e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	4413      	add	r3, r2
 800732e:	7819      	ldrb	r1, [r3, #0]
 8007330:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	4413      	add	r3, r2
 8007336:	3334      	adds	r3, #52	@ 0x34
 8007338:	460a      	mov	r2, r1
 800733a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	4413      	add	r3, r2
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d006      	beq.n	8007356 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	3301      	adds	r3, #1
 800734c:	61fb      	str	r3, [r7, #28]
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	2b0f      	cmp	r3, #15
 8007352:	d9e9      	bls.n	8007328 <prvInitialiseNewTask+0x66>
 8007354:	e000      	b.n	8007358 <prvInitialiseNewTask+0x96>
			{
				break;
 8007356:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735a:	2200      	movs	r2, #0
 800735c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007360:	e003      	b.n	800736a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800736a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736c:	2b37      	cmp	r3, #55	@ 0x37
 800736e:	d901      	bls.n	8007374 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007370:	2337      	movs	r3, #55	@ 0x37
 8007372:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007376:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007378:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800737a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800737e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007382:	2200      	movs	r2, #0
 8007384:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007388:	3304      	adds	r3, #4
 800738a:	4618      	mov	r0, r3
 800738c:	f7fe ffde 	bl	800634c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007392:	3318      	adds	r3, #24
 8007394:	4618      	mov	r0, r3
 8007396:	f7fe ffd9 	bl	800634c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800739a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800739e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80073a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073ae:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b2:	2200      	movs	r2, #0
 80073b4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	68f9      	ldr	r1, [r7, #12]
 80073c2:	69b8      	ldr	r0, [r7, #24]
 80073c4:	f7ff f856 	bl	8006474 <pxPortInitialiseStack>
 80073c8:	4602      	mov	r2, r0
 80073ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80073ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d002      	beq.n	80073da <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073da:	bf00      	nop
 80073dc:	3720      	adds	r7, #32
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
	...

080073e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073ec:	f7ff f974 	bl	80066d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073f0:	4b2d      	ldr	r3, [pc, #180]	@ (80074a8 <prvAddNewTaskToReadyList+0xc4>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3301      	adds	r3, #1
 80073f6:	4a2c      	ldr	r2, [pc, #176]	@ (80074a8 <prvAddNewTaskToReadyList+0xc4>)
 80073f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80073fa:	4b2c      	ldr	r3, [pc, #176]	@ (80074ac <prvAddNewTaskToReadyList+0xc8>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d109      	bne.n	8007416 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007402:	4a2a      	ldr	r2, [pc, #168]	@ (80074ac <prvAddNewTaskToReadyList+0xc8>)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007408:	4b27      	ldr	r3, [pc, #156]	@ (80074a8 <prvAddNewTaskToReadyList+0xc4>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d110      	bne.n	8007432 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007410:	f000 fbce 	bl	8007bb0 <prvInitialiseTaskLists>
 8007414:	e00d      	b.n	8007432 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007416:	4b26      	ldr	r3, [pc, #152]	@ (80074b0 <prvAddNewTaskToReadyList+0xcc>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d109      	bne.n	8007432 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800741e:	4b23      	ldr	r3, [pc, #140]	@ (80074ac <prvAddNewTaskToReadyList+0xc8>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007428:	429a      	cmp	r2, r3
 800742a:	d802      	bhi.n	8007432 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800742c:	4a1f      	ldr	r2, [pc, #124]	@ (80074ac <prvAddNewTaskToReadyList+0xc8>)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007432:	4b20      	ldr	r3, [pc, #128]	@ (80074b4 <prvAddNewTaskToReadyList+0xd0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3301      	adds	r3, #1
 8007438:	4a1e      	ldr	r2, [pc, #120]	@ (80074b4 <prvAddNewTaskToReadyList+0xd0>)
 800743a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800743c:	4b1d      	ldr	r3, [pc, #116]	@ (80074b4 <prvAddNewTaskToReadyList+0xd0>)
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007448:	4b1b      	ldr	r3, [pc, #108]	@ (80074b8 <prvAddNewTaskToReadyList+0xd4>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	429a      	cmp	r2, r3
 800744e:	d903      	bls.n	8007458 <prvAddNewTaskToReadyList+0x74>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007454:	4a18      	ldr	r2, [pc, #96]	@ (80074b8 <prvAddNewTaskToReadyList+0xd4>)
 8007456:	6013      	str	r3, [r2, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800745c:	4613      	mov	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4a15      	ldr	r2, [pc, #84]	@ (80074bc <prvAddNewTaskToReadyList+0xd8>)
 8007466:	441a      	add	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3304      	adds	r3, #4
 800746c:	4619      	mov	r1, r3
 800746e:	4610      	mov	r0, r2
 8007470:	f7fe ff79 	bl	8006366 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007474:	f7ff f962 	bl	800673c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007478:	4b0d      	ldr	r3, [pc, #52]	@ (80074b0 <prvAddNewTaskToReadyList+0xcc>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00e      	beq.n	800749e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007480:	4b0a      	ldr	r3, [pc, #40]	@ (80074ac <prvAddNewTaskToReadyList+0xc8>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748a:	429a      	cmp	r2, r3
 800748c:	d207      	bcs.n	800749e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800748e:	4b0c      	ldr	r3, [pc, #48]	@ (80074c0 <prvAddNewTaskToReadyList+0xdc>)
 8007490:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007494:	601a      	str	r2, [r3, #0]
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800749e:	bf00      	nop
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	24004264 	.word	0x24004264
 80074ac:	24003d90 	.word	0x24003d90
 80074b0:	24004270 	.word	0x24004270
 80074b4:	24004280 	.word	0x24004280
 80074b8:	2400426c 	.word	0x2400426c
 80074bc:	24003d94 	.word	0x24003d94
 80074c0:	e000ed04 	.word	0xe000ed04

080074c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80074ca:	4b1f      	ldr	r3, [pc, #124]	@ (8007548 <vTaskStartScheduler+0x84>)
 80074cc:	9301      	str	r3, [sp, #4]
 80074ce:	2300      	movs	r3, #0
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	2300      	movs	r3, #0
 80074d4:	2280      	movs	r2, #128	@ 0x80
 80074d6:	491d      	ldr	r1, [pc, #116]	@ (800754c <vTaskStartScheduler+0x88>)
 80074d8:	481d      	ldr	r0, [pc, #116]	@ (8007550 <vTaskStartScheduler+0x8c>)
 80074da:	f7ff feb1 	bl	8007240 <xTaskCreate>
 80074de:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d102      	bne.n	80074ec <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80074e6:	f000 fce3 	bl	8007eb0 <xTimerCreateTimerTask>
 80074ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d116      	bne.n	8007520 <vTaskStartScheduler+0x5c>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	60bb      	str	r3, [r7, #8]
}
 8007504:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007506:	4b13      	ldr	r3, [pc, #76]	@ (8007554 <vTaskStartScheduler+0x90>)
 8007508:	f04f 32ff 	mov.w	r2, #4294967295
 800750c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800750e:	4b12      	ldr	r3, [pc, #72]	@ (8007558 <vTaskStartScheduler+0x94>)
 8007510:	2201      	movs	r2, #1
 8007512:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007514:	4b11      	ldr	r3, [pc, #68]	@ (800755c <vTaskStartScheduler+0x98>)
 8007516:	2200      	movs	r2, #0
 8007518:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800751a:	f7ff f839 	bl	8006590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800751e:	e00f      	b.n	8007540 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007526:	d10b      	bne.n	8007540 <vTaskStartScheduler+0x7c>
	__asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	607b      	str	r3, [r7, #4]
}
 800753a:	bf00      	nop
 800753c:	bf00      	nop
 800753e:	e7fd      	b.n	800753c <vTaskStartScheduler+0x78>
}
 8007540:	bf00      	nop
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	24004288 	.word	0x24004288
 800754c:	080085b0 	.word	0x080085b0
 8007550:	08007b81 	.word	0x08007b81
 8007554:	24004284 	.word	0x24004284
 8007558:	24004270 	.word	0x24004270
 800755c:	24004268 	.word	0x24004268

08007560 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007564:	4b04      	ldr	r3, [pc, #16]	@ (8007578 <vTaskSuspendAll+0x18>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3301      	adds	r3, #1
 800756a:	4a03      	ldr	r2, [pc, #12]	@ (8007578 <vTaskSuspendAll+0x18>)
 800756c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800756e:	bf00      	nop
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	2400428c 	.word	0x2400428c

0800757c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007582:	2300      	movs	r3, #0
 8007584:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007586:	2300      	movs	r3, #0
 8007588:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800758a:	4b42      	ldr	r3, [pc, #264]	@ (8007694 <xTaskResumeAll+0x118>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10b      	bne.n	80075aa <xTaskResumeAll+0x2e>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	603b      	str	r3, [r7, #0]
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop
 80075a8:	e7fd      	b.n	80075a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80075aa:	f7ff f895 	bl	80066d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80075ae:	4b39      	ldr	r3, [pc, #228]	@ (8007694 <xTaskResumeAll+0x118>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3b01      	subs	r3, #1
 80075b4:	4a37      	ldr	r2, [pc, #220]	@ (8007694 <xTaskResumeAll+0x118>)
 80075b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075b8:	4b36      	ldr	r3, [pc, #216]	@ (8007694 <xTaskResumeAll+0x118>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d162      	bne.n	8007686 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80075c0:	4b35      	ldr	r3, [pc, #212]	@ (8007698 <xTaskResumeAll+0x11c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d05e      	beq.n	8007686 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075c8:	e02f      	b.n	800762a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ca:	4b34      	ldr	r3, [pc, #208]	@ (800769c <xTaskResumeAll+0x120>)
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3318      	adds	r3, #24
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fe ff22 	bl	8006420 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3304      	adds	r3, #4
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7fe ff1d 	bl	8006420 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ea:	4b2d      	ldr	r3, [pc, #180]	@ (80076a0 <xTaskResumeAll+0x124>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d903      	bls.n	80075fa <xTaskResumeAll+0x7e>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f6:	4a2a      	ldr	r2, [pc, #168]	@ (80076a0 <xTaskResumeAll+0x124>)
 80075f8:	6013      	str	r3, [r2, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075fe:	4613      	mov	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4413      	add	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4a27      	ldr	r2, [pc, #156]	@ (80076a4 <xTaskResumeAll+0x128>)
 8007608:	441a      	add	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	3304      	adds	r3, #4
 800760e:	4619      	mov	r1, r3
 8007610:	4610      	mov	r0, r2
 8007612:	f7fe fea8 	bl	8006366 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800761a:	4b23      	ldr	r3, [pc, #140]	@ (80076a8 <xTaskResumeAll+0x12c>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007620:	429a      	cmp	r2, r3
 8007622:	d302      	bcc.n	800762a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007624:	4b21      	ldr	r3, [pc, #132]	@ (80076ac <xTaskResumeAll+0x130>)
 8007626:	2201      	movs	r2, #1
 8007628:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800762a:	4b1c      	ldr	r3, [pc, #112]	@ (800769c <xTaskResumeAll+0x120>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1cb      	bne.n	80075ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007638:	f000 fb38 	bl	8007cac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800763c:	4b1c      	ldr	r3, [pc, #112]	@ (80076b0 <xTaskResumeAll+0x134>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d010      	beq.n	800766a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007648:	f000 f846 	bl	80076d8 <xTaskIncrementTick>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d002      	beq.n	8007658 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007652:	4b16      	ldr	r3, [pc, #88]	@ (80076ac <xTaskResumeAll+0x130>)
 8007654:	2201      	movs	r2, #1
 8007656:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	3b01      	subs	r3, #1
 800765c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1f1      	bne.n	8007648 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007664:	4b12      	ldr	r3, [pc, #72]	@ (80076b0 <xTaskResumeAll+0x134>)
 8007666:	2200      	movs	r2, #0
 8007668:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800766a:	4b10      	ldr	r3, [pc, #64]	@ (80076ac <xTaskResumeAll+0x130>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d009      	beq.n	8007686 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007672:	2301      	movs	r3, #1
 8007674:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007676:	4b0f      	ldr	r3, [pc, #60]	@ (80076b4 <xTaskResumeAll+0x138>)
 8007678:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007686:	f7ff f859 	bl	800673c <vPortExitCritical>

	return xAlreadyYielded;
 800768a:	68bb      	ldr	r3, [r7, #8]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	2400428c 	.word	0x2400428c
 8007698:	24004264 	.word	0x24004264
 800769c:	24004224 	.word	0x24004224
 80076a0:	2400426c 	.word	0x2400426c
 80076a4:	24003d94 	.word	0x24003d94
 80076a8:	24003d90 	.word	0x24003d90
 80076ac:	24004278 	.word	0x24004278
 80076b0:	24004274 	.word	0x24004274
 80076b4:	e000ed04 	.word	0xe000ed04

080076b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80076be:	4b05      	ldr	r3, [pc, #20]	@ (80076d4 <xTaskGetTickCount+0x1c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80076c4:	687b      	ldr	r3, [r7, #4]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	370c      	adds	r7, #12
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	24004268 	.word	0x24004268

080076d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076de:	2300      	movs	r3, #0
 80076e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076e2:	4b4f      	ldr	r3, [pc, #316]	@ (8007820 <xTaskIncrementTick+0x148>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f040 8090 	bne.w	800780c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076ec:	4b4d      	ldr	r3, [pc, #308]	@ (8007824 <xTaskIncrementTick+0x14c>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	3301      	adds	r3, #1
 80076f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80076f4:	4a4b      	ldr	r2, [pc, #300]	@ (8007824 <xTaskIncrementTick+0x14c>)
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d121      	bne.n	8007744 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007700:	4b49      	ldr	r3, [pc, #292]	@ (8007828 <xTaskIncrementTick+0x150>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00b      	beq.n	8007722 <xTaskIncrementTick+0x4a>
	__asm volatile
 800770a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	603b      	str	r3, [r7, #0]
}
 800771c:	bf00      	nop
 800771e:	bf00      	nop
 8007720:	e7fd      	b.n	800771e <xTaskIncrementTick+0x46>
 8007722:	4b41      	ldr	r3, [pc, #260]	@ (8007828 <xTaskIncrementTick+0x150>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	60fb      	str	r3, [r7, #12]
 8007728:	4b40      	ldr	r3, [pc, #256]	@ (800782c <xTaskIncrementTick+0x154>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a3e      	ldr	r2, [pc, #248]	@ (8007828 <xTaskIncrementTick+0x150>)
 800772e:	6013      	str	r3, [r2, #0]
 8007730:	4a3e      	ldr	r2, [pc, #248]	@ (800782c <xTaskIncrementTick+0x154>)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6013      	str	r3, [r2, #0]
 8007736:	4b3e      	ldr	r3, [pc, #248]	@ (8007830 <xTaskIncrementTick+0x158>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3301      	adds	r3, #1
 800773c:	4a3c      	ldr	r2, [pc, #240]	@ (8007830 <xTaskIncrementTick+0x158>)
 800773e:	6013      	str	r3, [r2, #0]
 8007740:	f000 fab4 	bl	8007cac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007744:	4b3b      	ldr	r3, [pc, #236]	@ (8007834 <xTaskIncrementTick+0x15c>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	429a      	cmp	r2, r3
 800774c:	d349      	bcc.n	80077e2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800774e:	4b36      	ldr	r3, [pc, #216]	@ (8007828 <xTaskIncrementTick+0x150>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d104      	bne.n	8007762 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007758:	4b36      	ldr	r3, [pc, #216]	@ (8007834 <xTaskIncrementTick+0x15c>)
 800775a:	f04f 32ff 	mov.w	r2, #4294967295
 800775e:	601a      	str	r2, [r3, #0]
					break;
 8007760:	e03f      	b.n	80077e2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007762:	4b31      	ldr	r3, [pc, #196]	@ (8007828 <xTaskIncrementTick+0x150>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	429a      	cmp	r2, r3
 8007778:	d203      	bcs.n	8007782 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800777a:	4a2e      	ldr	r2, [pc, #184]	@ (8007834 <xTaskIncrementTick+0x15c>)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007780:	e02f      	b.n	80077e2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	3304      	adds	r3, #4
 8007786:	4618      	mov	r0, r3
 8007788:	f7fe fe4a 	bl	8006420 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007790:	2b00      	cmp	r3, #0
 8007792:	d004      	beq.n	800779e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	3318      	adds	r3, #24
 8007798:	4618      	mov	r0, r3
 800779a:	f7fe fe41 	bl	8006420 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077a2:	4b25      	ldr	r3, [pc, #148]	@ (8007838 <xTaskIncrementTick+0x160>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d903      	bls.n	80077b2 <xTaskIncrementTick+0xda>
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ae:	4a22      	ldr	r2, [pc, #136]	@ (8007838 <xTaskIncrementTick+0x160>)
 80077b0:	6013      	str	r3, [r2, #0]
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077b6:	4613      	mov	r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4a1f      	ldr	r2, [pc, #124]	@ (800783c <xTaskIncrementTick+0x164>)
 80077c0:	441a      	add	r2, r3
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	3304      	adds	r3, #4
 80077c6:	4619      	mov	r1, r3
 80077c8:	4610      	mov	r0, r2
 80077ca:	f7fe fdcc 	bl	8006366 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077d2:	4b1b      	ldr	r3, [pc, #108]	@ (8007840 <xTaskIncrementTick+0x168>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d8:	429a      	cmp	r2, r3
 80077da:	d3b8      	bcc.n	800774e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80077dc:	2301      	movs	r3, #1
 80077de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077e0:	e7b5      	b.n	800774e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077e2:	4b17      	ldr	r3, [pc, #92]	@ (8007840 <xTaskIncrementTick+0x168>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077e8:	4914      	ldr	r1, [pc, #80]	@ (800783c <xTaskIncrementTick+0x164>)
 80077ea:	4613      	mov	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	440b      	add	r3, r1
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d901      	bls.n	80077fe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80077fa:	2301      	movs	r3, #1
 80077fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80077fe:	4b11      	ldr	r3, [pc, #68]	@ (8007844 <xTaskIncrementTick+0x16c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d007      	beq.n	8007816 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007806:	2301      	movs	r3, #1
 8007808:	617b      	str	r3, [r7, #20]
 800780a:	e004      	b.n	8007816 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800780c:	4b0e      	ldr	r3, [pc, #56]	@ (8007848 <xTaskIncrementTick+0x170>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3301      	adds	r3, #1
 8007812:	4a0d      	ldr	r2, [pc, #52]	@ (8007848 <xTaskIncrementTick+0x170>)
 8007814:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007816:	697b      	ldr	r3, [r7, #20]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3718      	adds	r7, #24
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	2400428c 	.word	0x2400428c
 8007824:	24004268 	.word	0x24004268
 8007828:	2400421c 	.word	0x2400421c
 800782c:	24004220 	.word	0x24004220
 8007830:	2400427c 	.word	0x2400427c
 8007834:	24004284 	.word	0x24004284
 8007838:	2400426c 	.word	0x2400426c
 800783c:	24003d94 	.word	0x24003d94
 8007840:	24003d90 	.word	0x24003d90
 8007844:	24004278 	.word	0x24004278
 8007848:	24004274 	.word	0x24004274

0800784c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007852:	4b28      	ldr	r3, [pc, #160]	@ (80078f4 <vTaskSwitchContext+0xa8>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800785a:	4b27      	ldr	r3, [pc, #156]	@ (80078f8 <vTaskSwitchContext+0xac>)
 800785c:	2201      	movs	r2, #1
 800785e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007860:	e042      	b.n	80078e8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007862:	4b25      	ldr	r3, [pc, #148]	@ (80078f8 <vTaskSwitchContext+0xac>)
 8007864:	2200      	movs	r2, #0
 8007866:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007868:	4b24      	ldr	r3, [pc, #144]	@ (80078fc <vTaskSwitchContext+0xb0>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	60fb      	str	r3, [r7, #12]
 800786e:	e011      	b.n	8007894 <vTaskSwitchContext+0x48>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10b      	bne.n	800788e <vTaskSwitchContext+0x42>
	__asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	607b      	str	r3, [r7, #4]
}
 8007888:	bf00      	nop
 800788a:	bf00      	nop
 800788c:	e7fd      	b.n	800788a <vTaskSwitchContext+0x3e>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	3b01      	subs	r3, #1
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	491a      	ldr	r1, [pc, #104]	@ (8007900 <vTaskSwitchContext+0xb4>)
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	4613      	mov	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	440b      	add	r3, r1
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d0e3      	beq.n	8007870 <vTaskSwitchContext+0x24>
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	4613      	mov	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4a13      	ldr	r2, [pc, #76]	@ (8007900 <vTaskSwitchContext+0xb4>)
 80078b4:	4413      	add	r3, r2
 80078b6:	60bb      	str	r3, [r7, #8]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	605a      	str	r2, [r3, #4]
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	3308      	adds	r3, #8
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d104      	bne.n	80078d8 <vTaskSwitchContext+0x8c>
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	685a      	ldr	r2, [r3, #4]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	605a      	str	r2, [r3, #4]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	4a09      	ldr	r2, [pc, #36]	@ (8007904 <vTaskSwitchContext+0xb8>)
 80078e0:	6013      	str	r3, [r2, #0]
 80078e2:	4a06      	ldr	r2, [pc, #24]	@ (80078fc <vTaskSwitchContext+0xb0>)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6013      	str	r3, [r2, #0]
}
 80078e8:	bf00      	nop
 80078ea:	3714      	adds	r7, #20
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	2400428c 	.word	0x2400428c
 80078f8:	24004278 	.word	0x24004278
 80078fc:	2400426c 	.word	0x2400426c
 8007900:	24003d94 	.word	0x24003d94
 8007904:	24003d90 	.word	0x24003d90

08007908 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10b      	bne.n	8007930 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800791c:	f383 8811 	msr	BASEPRI, r3
 8007920:	f3bf 8f6f 	isb	sy
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	60fb      	str	r3, [r7, #12]
}
 800792a:	bf00      	nop
 800792c:	bf00      	nop
 800792e:	e7fd      	b.n	800792c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007930:	4b07      	ldr	r3, [pc, #28]	@ (8007950 <vTaskPlaceOnEventList+0x48>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3318      	adds	r3, #24
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7fe fd38 	bl	80063ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800793e:	2101      	movs	r1, #1
 8007940:	6838      	ldr	r0, [r7, #0]
 8007942:	f000 fa61 	bl	8007e08 <prvAddCurrentTaskToDelayedList>
}
 8007946:	bf00      	nop
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	24003d90 	.word	0x24003d90

08007954 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10b      	bne.n	800797e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	617b      	str	r3, [r7, #20]
}
 8007978:	bf00      	nop
 800797a:	bf00      	nop
 800797c:	e7fd      	b.n	800797a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800797e:	4b0a      	ldr	r3, [pc, #40]	@ (80079a8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3318      	adds	r3, #24
 8007984:	4619      	mov	r1, r3
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f7fe fced 	bl	8006366 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d002      	beq.n	8007998 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007992:	f04f 33ff 	mov.w	r3, #4294967295
 8007996:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007998:	6879      	ldr	r1, [r7, #4]
 800799a:	68b8      	ldr	r0, [r7, #8]
 800799c:	f000 fa34 	bl	8007e08 <prvAddCurrentTaskToDelayedList>
	}
 80079a0:	bf00      	nop
 80079a2:	3718      	adds	r7, #24
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	24003d90 	.word	0x24003d90

080079ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10b      	bne.n	80079da <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	60fb      	str	r3, [r7, #12]
}
 80079d4:	bf00      	nop
 80079d6:	bf00      	nop
 80079d8:	e7fd      	b.n	80079d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	3318      	adds	r3, #24
 80079de:	4618      	mov	r0, r3
 80079e0:	f7fe fd1e 	bl	8006420 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079e4:	4b1d      	ldr	r3, [pc, #116]	@ (8007a5c <xTaskRemoveFromEventList+0xb0>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d11d      	bne.n	8007a28 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	3304      	adds	r3, #4
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7fe fd15 	bl	8006420 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079fa:	4b19      	ldr	r3, [pc, #100]	@ (8007a60 <xTaskRemoveFromEventList+0xb4>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d903      	bls.n	8007a0a <xTaskRemoveFromEventList+0x5e>
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a06:	4a16      	ldr	r2, [pc, #88]	@ (8007a60 <xTaskRemoveFromEventList+0xb4>)
 8007a08:	6013      	str	r3, [r2, #0]
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a0e:	4613      	mov	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4a13      	ldr	r2, [pc, #76]	@ (8007a64 <xTaskRemoveFromEventList+0xb8>)
 8007a18:	441a      	add	r2, r3
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	4619      	mov	r1, r3
 8007a20:	4610      	mov	r0, r2
 8007a22:	f7fe fca0 	bl	8006366 <vListInsertEnd>
 8007a26:	e005      	b.n	8007a34 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	3318      	adds	r3, #24
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	480e      	ldr	r0, [pc, #56]	@ (8007a68 <xTaskRemoveFromEventList+0xbc>)
 8007a30:	f7fe fc99 	bl	8006366 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a38:	4b0c      	ldr	r3, [pc, #48]	@ (8007a6c <xTaskRemoveFromEventList+0xc0>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d905      	bls.n	8007a4e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a42:	2301      	movs	r3, #1
 8007a44:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a46:	4b0a      	ldr	r3, [pc, #40]	@ (8007a70 <xTaskRemoveFromEventList+0xc4>)
 8007a48:	2201      	movs	r2, #1
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	e001      	b.n	8007a52 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007a52:	697b      	ldr	r3, [r7, #20]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3718      	adds	r7, #24
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	2400428c 	.word	0x2400428c
 8007a60:	2400426c 	.word	0x2400426c
 8007a64:	24003d94 	.word	0x24003d94
 8007a68:	24004224 	.word	0x24004224
 8007a6c:	24003d90 	.word	0x24003d90
 8007a70:	24004278 	.word	0x24004278

08007a74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a7c:	4b06      	ldr	r3, [pc, #24]	@ (8007a98 <vTaskInternalSetTimeOutState+0x24>)
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a84:	4b05      	ldr	r3, [pc, #20]	@ (8007a9c <vTaskInternalSetTimeOutState+0x28>)
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	605a      	str	r2, [r3, #4]
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	2400427c 	.word	0x2400427c
 8007a9c:	24004268 	.word	0x24004268

08007aa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b088      	sub	sp, #32
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10b      	bne.n	8007ac8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	613b      	str	r3, [r7, #16]
}
 8007ac2:	bf00      	nop
 8007ac4:	bf00      	nop
 8007ac6:	e7fd      	b.n	8007ac4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10b      	bne.n	8007ae6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	60fb      	str	r3, [r7, #12]
}
 8007ae0:	bf00      	nop
 8007ae2:	bf00      	nop
 8007ae4:	e7fd      	b.n	8007ae2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007ae6:	f7fe fdf7 	bl	80066d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007aea:	4b1d      	ldr	r3, [pc, #116]	@ (8007b60 <xTaskCheckForTimeOut+0xc0>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b02:	d102      	bne.n	8007b0a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b04:	2300      	movs	r3, #0
 8007b06:	61fb      	str	r3, [r7, #28]
 8007b08:	e023      	b.n	8007b52 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	4b15      	ldr	r3, [pc, #84]	@ (8007b64 <xTaskCheckForTimeOut+0xc4>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d007      	beq.n	8007b26 <xTaskCheckForTimeOut+0x86>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d302      	bcc.n	8007b26 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b20:	2301      	movs	r3, #1
 8007b22:	61fb      	str	r3, [r7, #28]
 8007b24:	e015      	b.n	8007b52 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d20b      	bcs.n	8007b48 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	1ad2      	subs	r2, r2, r3
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7ff ff99 	bl	8007a74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b42:	2300      	movs	r3, #0
 8007b44:	61fb      	str	r3, [r7, #28]
 8007b46:	e004      	b.n	8007b52 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b52:	f7fe fdf3 	bl	800673c <vPortExitCritical>

	return xReturn;
 8007b56:	69fb      	ldr	r3, [r7, #28]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3720      	adds	r7, #32
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	24004268 	.word	0x24004268
 8007b64:	2400427c 	.word	0x2400427c

08007b68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b68:	b480      	push	{r7}
 8007b6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b6c:	4b03      	ldr	r3, [pc, #12]	@ (8007b7c <vTaskMissedYield+0x14>)
 8007b6e:	2201      	movs	r2, #1
 8007b70:	601a      	str	r2, [r3, #0]
}
 8007b72:	bf00      	nop
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	24004278 	.word	0x24004278

08007b80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b88:	f000 f852 	bl	8007c30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b8c:	4b06      	ldr	r3, [pc, #24]	@ (8007ba8 <prvIdleTask+0x28>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d9f9      	bls.n	8007b88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b94:	4b05      	ldr	r3, [pc, #20]	@ (8007bac <prvIdleTask+0x2c>)
 8007b96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b9a:	601a      	str	r2, [r3, #0]
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ba4:	e7f0      	b.n	8007b88 <prvIdleTask+0x8>
 8007ba6:	bf00      	nop
 8007ba8:	24003d94 	.word	0x24003d94
 8007bac:	e000ed04 	.word	0xe000ed04

08007bb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	607b      	str	r3, [r7, #4]
 8007bba:	e00c      	b.n	8007bd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4a12      	ldr	r2, [pc, #72]	@ (8007c10 <prvInitialiseTaskLists+0x60>)
 8007bc8:	4413      	add	r3, r2
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fe fb9e 	bl	800630c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	607b      	str	r3, [r7, #4]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b37      	cmp	r3, #55	@ 0x37
 8007bda:	d9ef      	bls.n	8007bbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007bdc:	480d      	ldr	r0, [pc, #52]	@ (8007c14 <prvInitialiseTaskLists+0x64>)
 8007bde:	f7fe fb95 	bl	800630c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007be2:	480d      	ldr	r0, [pc, #52]	@ (8007c18 <prvInitialiseTaskLists+0x68>)
 8007be4:	f7fe fb92 	bl	800630c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007be8:	480c      	ldr	r0, [pc, #48]	@ (8007c1c <prvInitialiseTaskLists+0x6c>)
 8007bea:	f7fe fb8f 	bl	800630c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007bee:	480c      	ldr	r0, [pc, #48]	@ (8007c20 <prvInitialiseTaskLists+0x70>)
 8007bf0:	f7fe fb8c 	bl	800630c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007bf4:	480b      	ldr	r0, [pc, #44]	@ (8007c24 <prvInitialiseTaskLists+0x74>)
 8007bf6:	f7fe fb89 	bl	800630c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8007c28 <prvInitialiseTaskLists+0x78>)
 8007bfc:	4a05      	ldr	r2, [pc, #20]	@ (8007c14 <prvInitialiseTaskLists+0x64>)
 8007bfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c00:	4b0a      	ldr	r3, [pc, #40]	@ (8007c2c <prvInitialiseTaskLists+0x7c>)
 8007c02:	4a05      	ldr	r2, [pc, #20]	@ (8007c18 <prvInitialiseTaskLists+0x68>)
 8007c04:	601a      	str	r2, [r3, #0]
}
 8007c06:	bf00      	nop
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	24003d94 	.word	0x24003d94
 8007c14:	240041f4 	.word	0x240041f4
 8007c18:	24004208 	.word	0x24004208
 8007c1c:	24004224 	.word	0x24004224
 8007c20:	24004238 	.word	0x24004238
 8007c24:	24004250 	.word	0x24004250
 8007c28:	2400421c 	.word	0x2400421c
 8007c2c:	24004220 	.word	0x24004220

08007c30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c36:	e019      	b.n	8007c6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c38:	f7fe fd4e 	bl	80066d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c3c:	4b10      	ldr	r3, [pc, #64]	@ (8007c80 <prvCheckTasksWaitingTermination+0x50>)
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	3304      	adds	r3, #4
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7fe fbe9 	bl	8006420 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c84 <prvCheckTasksWaitingTermination+0x54>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3b01      	subs	r3, #1
 8007c54:	4a0b      	ldr	r2, [pc, #44]	@ (8007c84 <prvCheckTasksWaitingTermination+0x54>)
 8007c56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c58:	4b0b      	ldr	r3, [pc, #44]	@ (8007c88 <prvCheckTasksWaitingTermination+0x58>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8007c88 <prvCheckTasksWaitingTermination+0x58>)
 8007c60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c62:	f7fe fd6b 	bl	800673c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f810 	bl	8007c8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c6c:	4b06      	ldr	r3, [pc, #24]	@ (8007c88 <prvCheckTasksWaitingTermination+0x58>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1e1      	bne.n	8007c38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c74:	bf00      	nop
 8007c76:	bf00      	nop
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	24004238 	.word	0x24004238
 8007c84:	24004264 	.word	0x24004264
 8007c88:	2400424c 	.word	0x2400424c

08007c8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7fe fa17 	bl	80060cc <vPortFree>
			vPortFree( pxTCB );
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7fe fa14 	bl	80060cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ca4:	bf00      	nop
 8007ca6:	3708      	adds	r7, #8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8007ce4 <prvResetNextTaskUnblockTime+0x38>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d104      	bne.n	8007cc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8007ce8 <prvResetNextTaskUnblockTime+0x3c>)
 8007cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007cc4:	e008      	b.n	8007cd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cc6:	4b07      	ldr	r3, [pc, #28]	@ (8007ce4 <prvResetNextTaskUnblockTime+0x38>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	4a04      	ldr	r2, [pc, #16]	@ (8007ce8 <prvResetNextTaskUnblockTime+0x3c>)
 8007cd6:	6013      	str	r3, [r2, #0]
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	2400421c 	.word	0x2400421c
 8007ce8:	24004284 	.word	0x24004284

08007cec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8007d20 <xTaskGetSchedulerState+0x34>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d102      	bne.n	8007d00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	607b      	str	r3, [r7, #4]
 8007cfe:	e008      	b.n	8007d12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d00:	4b08      	ldr	r3, [pc, #32]	@ (8007d24 <xTaskGetSchedulerState+0x38>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d102      	bne.n	8007d0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d08:	2302      	movs	r3, #2
 8007d0a:	607b      	str	r3, [r7, #4]
 8007d0c:	e001      	b.n	8007d12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d12:	687b      	ldr	r3, [r7, #4]
	}
 8007d14:	4618      	mov	r0, r3
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	24004270 	.word	0x24004270
 8007d24:	2400428c 	.word	0x2400428c

08007d28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d34:	2300      	movs	r3, #0
 8007d36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d058      	beq.n	8007df0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d3e:	4b2f      	ldr	r3, [pc, #188]	@ (8007dfc <xTaskPriorityDisinherit+0xd4>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d00b      	beq.n	8007d60 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	60fb      	str	r3, [r7, #12]
}
 8007d5a:	bf00      	nop
 8007d5c:	bf00      	nop
 8007d5e:	e7fd      	b.n	8007d5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10b      	bne.n	8007d80 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d6c:	f383 8811 	msr	BASEPRI, r3
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	60bb      	str	r3, [r7, #8]
}
 8007d7a:	bf00      	nop
 8007d7c:	bf00      	nop
 8007d7e:	e7fd      	b.n	8007d7c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d84:	1e5a      	subs	r2, r3, #1
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d02c      	beq.n	8007df0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d128      	bne.n	8007df0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	3304      	adds	r3, #4
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fe fb3c 	bl	8006420 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8007e00 <xTaskPriorityDisinherit+0xd8>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d903      	bls.n	8007dd0 <xTaskPriorityDisinherit+0xa8>
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8007e00 <xTaskPriorityDisinherit+0xd8>)
 8007dce:	6013      	str	r3, [r2, #0]
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4413      	add	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4a09      	ldr	r2, [pc, #36]	@ (8007e04 <xTaskPriorityDisinherit+0xdc>)
 8007dde:	441a      	add	r2, r3
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	3304      	adds	r3, #4
 8007de4:	4619      	mov	r1, r3
 8007de6:	4610      	mov	r0, r2
 8007de8:	f7fe fabd 	bl	8006366 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007dec:	2301      	movs	r3, #1
 8007dee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007df0:	697b      	ldr	r3, [r7, #20]
	}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3718      	adds	r7, #24
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	24003d90 	.word	0x24003d90
 8007e00:	2400426c 	.word	0x2400426c
 8007e04:	24003d94 	.word	0x24003d94

08007e08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e12:	4b21      	ldr	r3, [pc, #132]	@ (8007e98 <prvAddCurrentTaskToDelayedList+0x90>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e18:	4b20      	ldr	r3, [pc, #128]	@ (8007e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fe fafe 	bl	8006420 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2a:	d10a      	bne.n	8007e42 <prvAddCurrentTaskToDelayedList+0x3a>
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d007      	beq.n	8007e42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e32:	4b1a      	ldr	r3, [pc, #104]	@ (8007e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	3304      	adds	r3, #4
 8007e38:	4619      	mov	r1, r3
 8007e3a:	4819      	ldr	r0, [pc, #100]	@ (8007ea0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007e3c:	f7fe fa93 	bl	8006366 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e40:	e026      	b.n	8007e90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4413      	add	r3, r2
 8007e48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e4a:	4b14      	ldr	r3, [pc, #80]	@ (8007e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d209      	bcs.n	8007e6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e5a:	4b12      	ldr	r3, [pc, #72]	@ (8007ea4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8007e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3304      	adds	r3, #4
 8007e64:	4619      	mov	r1, r3
 8007e66:	4610      	mov	r0, r2
 8007e68:	f7fe faa1 	bl	80063ae <vListInsert>
}
 8007e6c:	e010      	b.n	8007e90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ea8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	4b0a      	ldr	r3, [pc, #40]	@ (8007e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	3304      	adds	r3, #4
 8007e78:	4619      	mov	r1, r3
 8007e7a:	4610      	mov	r0, r2
 8007e7c:	f7fe fa97 	bl	80063ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e80:	4b0a      	ldr	r3, [pc, #40]	@ (8007eac <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d202      	bcs.n	8007e90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007e8a:	4a08      	ldr	r2, [pc, #32]	@ (8007eac <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	6013      	str	r3, [r2, #0]
}
 8007e90:	bf00      	nop
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	24004268 	.word	0x24004268
 8007e9c:	24003d90 	.word	0x24003d90
 8007ea0:	24004250 	.word	0x24004250
 8007ea4:	24004220 	.word	0x24004220
 8007ea8:	2400421c 	.word	0x2400421c
 8007eac:	24004284 	.word	0x24004284

08007eb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007eba:	f000 fafd 	bl	80084b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007ebe:	4b12      	ldr	r3, [pc, #72]	@ (8007f08 <xTimerCreateTimerTask+0x58>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00b      	beq.n	8007ede <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8007ec6:	4b11      	ldr	r3, [pc, #68]	@ (8007f0c <xTimerCreateTimerTask+0x5c>)
 8007ec8:	9301      	str	r3, [sp, #4]
 8007eca:	2302      	movs	r3, #2
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007ed4:	490e      	ldr	r1, [pc, #56]	@ (8007f10 <xTimerCreateTimerTask+0x60>)
 8007ed6:	480f      	ldr	r0, [pc, #60]	@ (8007f14 <xTimerCreateTimerTask+0x64>)
 8007ed8:	f7ff f9b2 	bl	8007240 <xTaskCreate>
 8007edc:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10b      	bne.n	8007efc <xTimerCreateTimerTask+0x4c>
	__asm volatile
 8007ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee8:	f383 8811 	msr	BASEPRI, r3
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f3bf 8f4f 	dsb	sy
 8007ef4:	603b      	str	r3, [r7, #0]
}
 8007ef6:	bf00      	nop
 8007ef8:	bf00      	nop
 8007efa:	e7fd      	b.n	8007ef8 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8007efc:	687b      	ldr	r3, [r7, #4]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3708      	adds	r7, #8
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	240042c0 	.word	0x240042c0
 8007f0c:	240042c4 	.word	0x240042c4
 8007f10:	080085b8 	.word	0x080085b8
 8007f14:	08008051 	.word	0x08008051

08007f18 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b08a      	sub	sp, #40	@ 0x28
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
 8007f24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f26:	2300      	movs	r3, #0
 8007f28:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10b      	bne.n	8007f48 <xTimerGenericCommand+0x30>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	623b      	str	r3, [r7, #32]
}
 8007f42:	bf00      	nop
 8007f44:	bf00      	nop
 8007f46:	e7fd      	b.n	8007f44 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f48:	4b19      	ldr	r3, [pc, #100]	@ (8007fb0 <xTimerGenericCommand+0x98>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d02a      	beq.n	8007fa6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2b05      	cmp	r3, #5
 8007f60:	dc18      	bgt.n	8007f94 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f62:	f7ff fec3 	bl	8007cec <xTaskGetSchedulerState>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d109      	bne.n	8007f80 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f6c:	4b10      	ldr	r3, [pc, #64]	@ (8007fb0 <xTimerGenericCommand+0x98>)
 8007f6e:	6818      	ldr	r0, [r3, #0]
 8007f70:	f107 0110 	add.w	r1, r7, #16
 8007f74:	2300      	movs	r3, #0
 8007f76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f78:	f7fe fd72 	bl	8006a60 <xQueueGenericSend>
 8007f7c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f7e:	e012      	b.n	8007fa6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f80:	4b0b      	ldr	r3, [pc, #44]	@ (8007fb0 <xTimerGenericCommand+0x98>)
 8007f82:	6818      	ldr	r0, [r3, #0]
 8007f84:	f107 0110 	add.w	r1, r7, #16
 8007f88:	2300      	movs	r3, #0
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f7fe fd68 	bl	8006a60 <xQueueGenericSend>
 8007f90:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f92:	e008      	b.n	8007fa6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f94:	4b06      	ldr	r3, [pc, #24]	@ (8007fb0 <xTimerGenericCommand+0x98>)
 8007f96:	6818      	ldr	r0, [r3, #0]
 8007f98:	f107 0110 	add.w	r1, r7, #16
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	f7fe fe60 	bl	8006c64 <xQueueGenericSendFromISR>
 8007fa4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3728      	adds	r7, #40	@ 0x28
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	240042c0 	.word	0x240042c0

08007fb4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b088      	sub	sp, #32
 8007fb8:	af02      	add	r7, sp, #8
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fbe:	4b23      	ldr	r3, [pc, #140]	@ (800804c <prvProcessExpiredTimer+0x98>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	3304      	adds	r3, #4
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7fe fa27 	bl	8006420 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fd8:	f003 0304 	and.w	r3, r3, #4
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d023      	beq.n	8008028 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	699a      	ldr	r2, [r3, #24]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	18d1      	adds	r1, r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	6978      	ldr	r0, [r7, #20]
 8007fee:	f000 f8d5 	bl	800819c <prvInsertTimerInActiveList>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d020      	beq.n	800803a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	2100      	movs	r1, #0
 8008002:	6978      	ldr	r0, [r7, #20]
 8008004:	f7ff ff88 	bl	8007f18 <xTimerGenericCommand>
 8008008:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d114      	bne.n	800803a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	60fb      	str	r3, [r7, #12]
}
 8008022:	bf00      	nop
 8008024:	bf00      	nop
 8008026:	e7fd      	b.n	8008024 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800802e:	f023 0301 	bic.w	r3, r3, #1
 8008032:	b2da      	uxtb	r2, r3
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	6a1b      	ldr	r3, [r3, #32]
 800803e:	6978      	ldr	r0, [r7, #20]
 8008040:	4798      	blx	r3
}
 8008042:	bf00      	nop
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	240042b8 	.word	0x240042b8

08008050 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008058:	f107 0308 	add.w	r3, r7, #8
 800805c:	4618      	mov	r0, r3
 800805e:	f000 f859 	bl	8008114 <prvGetNextExpireTime>
 8008062:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	4619      	mov	r1, r3
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f000 f805 	bl	8008078 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800806e:	f000 f8d7 	bl	8008220 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008072:	bf00      	nop
 8008074:	e7f0      	b.n	8008058 <prvTimerTask+0x8>
	...

08008078 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008082:	f7ff fa6d 	bl	8007560 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008086:	f107 0308 	add.w	r3, r7, #8
 800808a:	4618      	mov	r0, r3
 800808c:	f000 f866 	bl	800815c <prvSampleTimeNow>
 8008090:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d130      	bne.n	80080fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10a      	bne.n	80080b4 <prvProcessTimerOrBlockTask+0x3c>
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d806      	bhi.n	80080b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80080a6:	f7ff fa69 	bl	800757c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80080aa:	68f9      	ldr	r1, [r7, #12]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7ff ff81 	bl	8007fb4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80080b2:	e024      	b.n	80080fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d008      	beq.n	80080cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80080ba:	4b13      	ldr	r3, [pc, #76]	@ (8008108 <prvProcessTimerOrBlockTask+0x90>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <prvProcessTimerOrBlockTask+0x50>
 80080c4:	2301      	movs	r3, #1
 80080c6:	e000      	b.n	80080ca <prvProcessTimerOrBlockTask+0x52>
 80080c8:	2300      	movs	r3, #0
 80080ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80080cc:	4b0f      	ldr	r3, [pc, #60]	@ (800810c <prvProcessTimerOrBlockTask+0x94>)
 80080ce:	6818      	ldr	r0, [r3, #0]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	4619      	mov	r1, r3
 80080da:	f7ff f87d 	bl	80071d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80080de:	f7ff fa4d 	bl	800757c <xTaskResumeAll>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10a      	bne.n	80080fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80080e8:	4b09      	ldr	r3, [pc, #36]	@ (8008110 <prvProcessTimerOrBlockTask+0x98>)
 80080ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080ee:	601a      	str	r2, [r3, #0]
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	f3bf 8f6f 	isb	sy
}
 80080f8:	e001      	b.n	80080fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80080fa:	f7ff fa3f 	bl	800757c <xTaskResumeAll>
}
 80080fe:	bf00      	nop
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	240042bc 	.word	0x240042bc
 800810c:	240042c0 	.word	0x240042c0
 8008110:	e000ed04 	.word	0xe000ed04

08008114 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800811c:	4b0e      	ldr	r3, [pc, #56]	@ (8008158 <prvGetNextExpireTime+0x44>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <prvGetNextExpireTime+0x16>
 8008126:	2201      	movs	r2, #1
 8008128:	e000      	b.n	800812c <prvGetNextExpireTime+0x18>
 800812a:	2200      	movs	r2, #0
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d105      	bne.n	8008144 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008138:	4b07      	ldr	r3, [pc, #28]	@ (8008158 <prvGetNextExpireTime+0x44>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	60fb      	str	r3, [r7, #12]
 8008142:	e001      	b.n	8008148 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008144:	2300      	movs	r3, #0
 8008146:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008148:	68fb      	ldr	r3, [r7, #12]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	240042b8 	.word	0x240042b8

0800815c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008164:	f7ff faa8 	bl	80076b8 <xTaskGetTickCount>
 8008168:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800816a:	4b0b      	ldr	r3, [pc, #44]	@ (8008198 <prvSampleTimeNow+0x3c>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	429a      	cmp	r2, r3
 8008172:	d205      	bcs.n	8008180 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008174:	f000 f93a 	bl	80083ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	e002      	b.n	8008186 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008186:	4a04      	ldr	r2, [pc, #16]	@ (8008198 <prvSampleTimeNow+0x3c>)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800818c:	68fb      	ldr	r3, [r7, #12]
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	240042c8 	.word	0x240042c8

0800819c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
 80081a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80081aa:	2300      	movs	r3, #0
 80081ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d812      	bhi.n	80081e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	1ad2      	subs	r2, r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d302      	bcc.n	80081d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80081d0:	2301      	movs	r3, #1
 80081d2:	617b      	str	r3, [r7, #20]
 80081d4:	e01b      	b.n	800820e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80081d6:	4b10      	ldr	r3, [pc, #64]	@ (8008218 <prvInsertTimerInActiveList+0x7c>)
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	3304      	adds	r3, #4
 80081de:	4619      	mov	r1, r3
 80081e0:	4610      	mov	r0, r2
 80081e2:	f7fe f8e4 	bl	80063ae <vListInsert>
 80081e6:	e012      	b.n	800820e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d206      	bcs.n	80081fe <prvInsertTimerInActiveList+0x62>
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d302      	bcc.n	80081fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80081f8:	2301      	movs	r3, #1
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	e007      	b.n	800820e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081fe:	4b07      	ldr	r3, [pc, #28]	@ (800821c <prvInsertTimerInActiveList+0x80>)
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3304      	adds	r3, #4
 8008206:	4619      	mov	r1, r3
 8008208:	4610      	mov	r0, r2
 800820a:	f7fe f8d0 	bl	80063ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800820e:	697b      	ldr	r3, [r7, #20]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3718      	adds	r7, #24
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	240042bc 	.word	0x240042bc
 800821c:	240042b8 	.word	0x240042b8

08008220 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b08e      	sub	sp, #56	@ 0x38
 8008224:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008226:	e0ce      	b.n	80083c6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	da19      	bge.n	8008262 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800822e:	1d3b      	adds	r3, r7, #4
 8008230:	3304      	adds	r3, #4
 8008232:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10b      	bne.n	8008252 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800823a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	61fb      	str	r3, [r7, #28]
}
 800824c:	bf00      	nop
 800824e:	bf00      	nop
 8008250:	e7fd      	b.n	800824e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008258:	6850      	ldr	r0, [r2, #4]
 800825a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800825c:	6892      	ldr	r2, [r2, #8]
 800825e:	4611      	mov	r1, r2
 8008260:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	f2c0 80ae 	blt.w	80083c6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800826e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d004      	beq.n	8008280 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008278:	3304      	adds	r3, #4
 800827a:	4618      	mov	r0, r3
 800827c:	f7fe f8d0 	bl	8006420 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008280:	463b      	mov	r3, r7
 8008282:	4618      	mov	r0, r3
 8008284:	f7ff ff6a 	bl	800815c <prvSampleTimeNow>
 8008288:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2b09      	cmp	r3, #9
 800828e:	f200 8097 	bhi.w	80083c0 <prvProcessReceivedCommands+0x1a0>
 8008292:	a201      	add	r2, pc, #4	@ (adr r2, 8008298 <prvProcessReceivedCommands+0x78>)
 8008294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008298:	080082c1 	.word	0x080082c1
 800829c:	080082c1 	.word	0x080082c1
 80082a0:	080082c1 	.word	0x080082c1
 80082a4:	08008337 	.word	0x08008337
 80082a8:	0800834b 	.word	0x0800834b
 80082ac:	08008397 	.word	0x08008397
 80082b0:	080082c1 	.word	0x080082c1
 80082b4:	080082c1 	.word	0x080082c1
 80082b8:	08008337 	.word	0x08008337
 80082bc:	0800834b 	.word	0x0800834b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082c6:	f043 0301 	orr.w	r3, r3, #1
 80082ca:	b2da      	uxtb	r2, r3
 80082cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	18d1      	adds	r1, r2, r3
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082e0:	f7ff ff5c 	bl	800819c <prvInsertTimerInActiveList>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d06c      	beq.n	80083c4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d061      	beq.n	80083c4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	441a      	add	r2, r3
 8008308:	2300      	movs	r3, #0
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	2300      	movs	r3, #0
 800830e:	2100      	movs	r1, #0
 8008310:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008312:	f7ff fe01 	bl	8007f18 <xTimerGenericCommand>
 8008316:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008318:	6a3b      	ldr	r3, [r7, #32]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d152      	bne.n	80083c4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800831e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	61bb      	str	r3, [r7, #24]
}
 8008330:	bf00      	nop
 8008332:	bf00      	nop
 8008334:	e7fd      	b.n	8008332 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008338:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800833c:	f023 0301 	bic.w	r3, r3, #1
 8008340:	b2da      	uxtb	r2, r3
 8008342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008344:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008348:	e03d      	b.n	80083c6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800834a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800834c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008350:	f043 0301 	orr.w	r3, r3, #1
 8008354:	b2da      	uxtb	r2, r3
 8008356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008358:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008360:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10b      	bne.n	8008382 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800836a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836e:	f383 8811 	msr	BASEPRI, r3
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	617b      	str	r3, [r7, #20]
}
 800837c:	bf00      	nop
 800837e:	bf00      	nop
 8008380:	e7fd      	b.n	800837e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008384:	699a      	ldr	r2, [r3, #24]
 8008386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008388:	18d1      	adds	r1, r2, r3
 800838a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800838e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008390:	f7ff ff04 	bl	800819c <prvInsertTimerInActiveList>
					break;
 8008394:	e017      	b.n	80083c6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008398:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800839c:	f003 0302 	and.w	r3, r3, #2
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d103      	bne.n	80083ac <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80083a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083a6:	f7fd fe91 	bl	80060cc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80083aa:	e00c      	b.n	80083c6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083b2:	f023 0301 	bic.w	r3, r3, #1
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80083be:	e002      	b.n	80083c6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80083c0:	bf00      	nop
 80083c2:	e000      	b.n	80083c6 <prvProcessReceivedCommands+0x1a6>
					break;
 80083c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083c6:	4b08      	ldr	r3, [pc, #32]	@ (80083e8 <prvProcessReceivedCommands+0x1c8>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	1d39      	adds	r1, r7, #4
 80083cc:	2200      	movs	r2, #0
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7fe fce6 	bl	8006da0 <xQueueReceive>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f47f af26 	bne.w	8008228 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80083dc:	bf00      	nop
 80083de:	bf00      	nop
 80083e0:	3730      	adds	r7, #48	@ 0x30
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	240042c0 	.word	0x240042c0

080083ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b088      	sub	sp, #32
 80083f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083f2:	e049      	b.n	8008488 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083f4:	4b2e      	ldr	r3, [pc, #184]	@ (80084b0 <prvSwitchTimerLists+0xc4>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083fe:	4b2c      	ldr	r3, [pc, #176]	@ (80084b0 <prvSwitchTimerLists+0xc4>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	3304      	adds	r3, #4
 800840c:	4618      	mov	r0, r3
 800840e:	f7fe f807 	bl	8006420 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6a1b      	ldr	r3, [r3, #32]
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008420:	f003 0304 	and.w	r3, r3, #4
 8008424:	2b00      	cmp	r3, #0
 8008426:	d02f      	beq.n	8008488 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	4413      	add	r3, r2
 8008430:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	429a      	cmp	r2, r3
 8008438:	d90e      	bls.n	8008458 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008446:	4b1a      	ldr	r3, [pc, #104]	@ (80084b0 <prvSwitchTimerLists+0xc4>)
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	3304      	adds	r3, #4
 800844e:	4619      	mov	r1, r3
 8008450:	4610      	mov	r0, r2
 8008452:	f7fd ffac 	bl	80063ae <vListInsert>
 8008456:	e017      	b.n	8008488 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008458:	2300      	movs	r3, #0
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	2300      	movs	r3, #0
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	2100      	movs	r1, #0
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f7ff fd58 	bl	8007f18 <xTimerGenericCommand>
 8008468:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10b      	bne.n	8008488 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	603b      	str	r3, [r7, #0]
}
 8008482:	bf00      	nop
 8008484:	bf00      	nop
 8008486:	e7fd      	b.n	8008484 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008488:	4b09      	ldr	r3, [pc, #36]	@ (80084b0 <prvSwitchTimerLists+0xc4>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1b0      	bne.n	80083f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008492:	4b07      	ldr	r3, [pc, #28]	@ (80084b0 <prvSwitchTimerLists+0xc4>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008498:	4b06      	ldr	r3, [pc, #24]	@ (80084b4 <prvSwitchTimerLists+0xc8>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a04      	ldr	r2, [pc, #16]	@ (80084b0 <prvSwitchTimerLists+0xc4>)
 800849e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80084a0:	4a04      	ldr	r2, [pc, #16]	@ (80084b4 <prvSwitchTimerLists+0xc8>)
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	6013      	str	r3, [r2, #0]
}
 80084a6:	bf00      	nop
 80084a8:	3718      	adds	r7, #24
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	240042b8 	.word	0x240042b8
 80084b4:	240042bc 	.word	0x240042bc

080084b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80084bc:	f7fe f90c 	bl	80066d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80084c0:	4b12      	ldr	r3, [pc, #72]	@ (800850c <prvCheckForValidListAndQueue+0x54>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d11d      	bne.n	8008504 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80084c8:	4811      	ldr	r0, [pc, #68]	@ (8008510 <prvCheckForValidListAndQueue+0x58>)
 80084ca:	f7fd ff1f 	bl	800630c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80084ce:	4811      	ldr	r0, [pc, #68]	@ (8008514 <prvCheckForValidListAndQueue+0x5c>)
 80084d0:	f7fd ff1c 	bl	800630c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80084d4:	4b10      	ldr	r3, [pc, #64]	@ (8008518 <prvCheckForValidListAndQueue+0x60>)
 80084d6:	4a0e      	ldr	r2, [pc, #56]	@ (8008510 <prvCheckForValidListAndQueue+0x58>)
 80084d8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80084da:	4b10      	ldr	r3, [pc, #64]	@ (800851c <prvCheckForValidListAndQueue+0x64>)
 80084dc:	4a0d      	ldr	r2, [pc, #52]	@ (8008514 <prvCheckForValidListAndQueue+0x5c>)
 80084de:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80084e0:	2200      	movs	r2, #0
 80084e2:	2110      	movs	r1, #16
 80084e4:	200a      	movs	r0, #10
 80084e6:	f7fe fa61 	bl	80069ac <xQueueGenericCreate>
 80084ea:	4603      	mov	r3, r0
 80084ec:	4a07      	ldr	r2, [pc, #28]	@ (800850c <prvCheckForValidListAndQueue+0x54>)
 80084ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80084f0:	4b06      	ldr	r3, [pc, #24]	@ (800850c <prvCheckForValidListAndQueue+0x54>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d005      	beq.n	8008504 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80084f8:	4b04      	ldr	r3, [pc, #16]	@ (800850c <prvCheckForValidListAndQueue+0x54>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4908      	ldr	r1, [pc, #32]	@ (8008520 <prvCheckForValidListAndQueue+0x68>)
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fe fe40 	bl	8007184 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008504:	f7fe f91a 	bl	800673c <vPortExitCritical>
}
 8008508:	bf00      	nop
 800850a:	bd80      	pop	{r7, pc}
 800850c:	240042c0 	.word	0x240042c0
 8008510:	24004290 	.word	0x24004290
 8008514:	240042a4 	.word	0x240042a4
 8008518:	240042b8 	.word	0x240042b8
 800851c:	240042bc 	.word	0x240042bc
 8008520:	080085c0 	.word	0x080085c0

08008524 <memset>:
 8008524:	4402      	add	r2, r0
 8008526:	4603      	mov	r3, r0
 8008528:	4293      	cmp	r3, r2
 800852a:	d100      	bne.n	800852e <memset+0xa>
 800852c:	4770      	bx	lr
 800852e:	f803 1b01 	strb.w	r1, [r3], #1
 8008532:	e7f9      	b.n	8008528 <memset+0x4>

08008534 <__libc_init_array>:
 8008534:	b570      	push	{r4, r5, r6, lr}
 8008536:	4d0d      	ldr	r5, [pc, #52]	@ (800856c <__libc_init_array+0x38>)
 8008538:	4c0d      	ldr	r4, [pc, #52]	@ (8008570 <__libc_init_array+0x3c>)
 800853a:	1b64      	subs	r4, r4, r5
 800853c:	10a4      	asrs	r4, r4, #2
 800853e:	2600      	movs	r6, #0
 8008540:	42a6      	cmp	r6, r4
 8008542:	d109      	bne.n	8008558 <__libc_init_array+0x24>
 8008544:	4d0b      	ldr	r5, [pc, #44]	@ (8008574 <__libc_init_array+0x40>)
 8008546:	4c0c      	ldr	r4, [pc, #48]	@ (8008578 <__libc_init_array+0x44>)
 8008548:	f000 f826 	bl	8008598 <_init>
 800854c:	1b64      	subs	r4, r4, r5
 800854e:	10a4      	asrs	r4, r4, #2
 8008550:	2600      	movs	r6, #0
 8008552:	42a6      	cmp	r6, r4
 8008554:	d105      	bne.n	8008562 <__libc_init_array+0x2e>
 8008556:	bd70      	pop	{r4, r5, r6, pc}
 8008558:	f855 3b04 	ldr.w	r3, [r5], #4
 800855c:	4798      	blx	r3
 800855e:	3601      	adds	r6, #1
 8008560:	e7ee      	b.n	8008540 <__libc_init_array+0xc>
 8008562:	f855 3b04 	ldr.w	r3, [r5], #4
 8008566:	4798      	blx	r3
 8008568:	3601      	adds	r6, #1
 800856a:	e7f2      	b.n	8008552 <__libc_init_array+0x1e>
 800856c:	08008608 	.word	0x08008608
 8008570:	08008608 	.word	0x08008608
 8008574:	08008608 	.word	0x08008608
 8008578:	0800860c 	.word	0x0800860c

0800857c <memcpy>:
 800857c:	440a      	add	r2, r1
 800857e:	4291      	cmp	r1, r2
 8008580:	f100 33ff 	add.w	r3, r0, #4294967295
 8008584:	d100      	bne.n	8008588 <memcpy+0xc>
 8008586:	4770      	bx	lr
 8008588:	b510      	push	{r4, lr}
 800858a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800858e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008592:	4291      	cmp	r1, r2
 8008594:	d1f9      	bne.n	800858a <memcpy+0xe>
 8008596:	bd10      	pop	{r4, pc}

08008598 <_init>:
 8008598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859a:	bf00      	nop
 800859c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800859e:	bc08      	pop	{r3}
 80085a0:	469e      	mov	lr, r3
 80085a2:	4770      	bx	lr

080085a4 <_fini>:
 80085a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a6:	bf00      	nop
 80085a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085aa:	bc08      	pop	{r3}
 80085ac:	469e      	mov	lr, r3
 80085ae:	4770      	bx	lr
