
Drone_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc34  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002110  0800bed4  0800bed4  0000ced4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfe4  0800dfe4  0000f070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dfe4  0800dfe4  0000efe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dfec  0800dfec  0000f070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dfec  0800dfec  0000efec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dff0  0800dff0  0000eff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  24000000  0800dff4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b4  24000070  0800e064  0000f070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24001224  0800e064  0000f224  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000f070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026c9b  00000000  00000000  0000f09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000501a  00000000  00000000  00035d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd0  00000000  00000000  0003ad58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001700  00000000  00000000  0003cb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00043f07  00000000  00000000  0003e228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002613a  00000000  00000000  0008212f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b476e  00000000  00000000  000a8269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0025c9d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084e4  00000000  00000000  0025ca1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00264f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bebc 	.word	0x0800bebc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	0800bebc 	.word	0x0800bebc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	0000      	movs	r0, r0
	...

080006b0 <FilterMadgwickInit>:
{
    return 1;
}

int8_t FilterMadgwickInit(FilterMadgwickContext *pContext)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
    // Initialization values: https://courses.cs.washington.edu/courses/cse474/17wi/labs/l4/madgwick_internal_report.pdf
    memset((void*)pContext, 0, sizeof(FilterMadgwickContext));
 80006b8:	221c      	movs	r2, #28
 80006ba:	2100      	movs	r1, #0
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f00a fe6d 	bl	800b39c <memset>
    pContext->dt = 0.001f;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a16      	ldr	r2, [pc, #88]	@ (8000720 <FilterMadgwickInit+0x70>)
 80006c6:	611a      	str	r2, [r3, #16]
    pContext->gyroMeasureError = M_PI * (5.0f / 180.0f);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a16      	ldr	r2, [pc, #88]	@ (8000724 <FilterMadgwickInit+0x74>)
 80006cc:	615a      	str	r2, [r3, #20]
    pContext->beta = sqrt(3.0f / 4.0f) * pContext->gyroMeasureError;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	edd3 7a05 	vldr	s15, [r3, #20]
 80006d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006d8:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8000718 <FilterMadgwickInit+0x68>
 80006dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	edc3 7a06 	vstr	s15, [r3, #24]
    pContext->seq1 = 1.0f;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80006f0:	601a      	str	r2, [r3, #0]
    pContext->seq2 = 0.0f;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f04f 0200 	mov.w	r2, #0
 80006f8:	605a      	str	r2, [r3, #4]
    pContext->seq3 = 0.0f;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f04f 0200 	mov.w	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
    pContext->seq4 = 0.0f;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f04f 0200 	mov.w	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
    return 1;
 800070a:	2301      	movs	r3, #1
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	f3af 8000 	nop.w
 8000718:	e8584caa 	.word	0xe8584caa
 800071c:	3febb67a 	.word	0x3febb67a
 8000720:	3a83126f 	.word	0x3a83126f
 8000724:	3db2b8c2 	.word	0x3db2b8c2

08000728 <FlightContextUpdateIMUData>:
/*
* \brief IMU collects it accel and gyro data in millimeters and millidegrees. This is
* converted to meters and degrees
*/
void FlightContextUpdateIMUData(FlightContext *pContext, Vec3 accel, Vec3 gyro)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	4638      	mov	r0, r7
 8000732:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    pContext->imuUnFilteredAccel.x = ((float)accel.x) / 1000.0f;
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	ee07 3a90 	vmov	s15, r3
 800073c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000740:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80007d4 <FlightContextUpdateIMUData+0xac>
 8000744:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	edc3 7a00 	vstr	s15, [r3]
    pContext->imuUnFilteredAccel.y = ((float)accel.y) / 1000.0f;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	ee07 3a90 	vmov	s15, r3
 8000754:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000758:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80007d4 <FlightContextUpdateIMUData+0xac>
 800075c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	edc3 7a01 	vstr	s15, [r3, #4]
    pContext->imuUnFilteredAccel.z = ((float)accel.z) / 1000.0f;
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	ee07 3a90 	vmov	s15, r3
 800076c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000770:	eddf 6a18 	vldr	s13, [pc, #96]	@ 80007d4 <FlightContextUpdateIMUData+0xac>
 8000774:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	edc3 7a02 	vstr	s15, [r3, #8]

    pContext->imuUnFilteredGyro.x = ((float)gyro.x) / 1000.0f;
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	ee07 3a90 	vmov	s15, r3
 8000784:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000788:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80007d4 <FlightContextUpdateIMUData+0xac>
 800078c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	edc3 7a03 	vstr	s15, [r3, #12]
    pContext->imuUnFilteredGyro.y = ((float)gyro.y) / 1000.0f;
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	ee07 3a90 	vmov	s15, r3
 800079c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007a0:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80007d4 <FlightContextUpdateIMUData+0xac>
 80007a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	edc3 7a04 	vstr	s15, [r3, #16]
    pContext->imuUnFilteredGyro.z = ((float)gyro.z) / 1000.0f;
 80007ae:	6a3b      	ldr	r3, [r7, #32]
 80007b0:	ee07 3a90 	vmov	s15, r3
 80007b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007b8:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80007d4 <FlightContextUpdateIMUData+0xac>
 80007bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80007c6:	bf00      	nop
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	447a0000 	.word	0x447a0000

080007d8 <__io_putchar>:

static void SyncUARTTaskHandler(void);
static int8_t LoggerWriteToUART(RingBuff volatile *pBuff);

PUTCHAR_PROTOTYPE
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 80007e0:	f001 fe22 	bl	8002428 <HAL_GetCurrentCPUID>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b03      	cmp	r3, #3
 80007e8:	d110      	bne.n	800080c <__io_putchar+0x34>
  {
    RingBuffWrite(pCM7RingBuf, (void*)&ch, 1);
 80007ea:	4b15      	ldr	r3, [pc, #84]	@ (8000840 <__io_putchar+0x68>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	1d39      	adds	r1, r7, #4
 80007f0:	2201      	movs	r2, #1
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f990 	bl	8000b18 <RingBuffWrite>
    if((char)ch == '\n')
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b0a      	cmp	r3, #10
 80007fe:	d119      	bne.n	8000834 <__io_putchar+0x5c>
    {
      LoggerWriteToUART(pCM7RingBuf);
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <__io_putchar+0x68>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f000 f859 	bl	80008bc <LoggerWriteToUART>
 800080a:	e013      	b.n	8000834 <__io_putchar+0x5c>
    }
  }
  else 
  {
    RingBuffWrite(pCM4RingBuf, (void*)&ch, 1);
 800080c:	4b0d      	ldr	r3, [pc, #52]	@ (8000844 <__io_putchar+0x6c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	1d39      	adds	r1, r7, #4
 8000812:	2201      	movs	r2, #1
 8000814:	4618      	mov	r0, r3
 8000816:	f000 f97f 	bl	8000b18 <RingBuffWrite>
    if((char)ch == '\n')
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	2b0a      	cmp	r3, #10
 8000820:	d108      	bne.n	8000834 <__io_putchar+0x5c>
    {
      /*
      * CM4 sends signal to CM7 to send CM4's ring buffer to the UART interface
      */
      uint32_t taskID = SYNC_TASKID_UART_OUT;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
      SyncMailBoxWriteNotify(MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	2204      	movs	r2, #4
 800082c:	4619      	mov	r1, r3
 800082e:	2000      	movs	r0, #0
 8000830:	f000 fd3c 	bl	80012ac <SyncMailBoxWriteNotify>
    }
  }
  return ch;
 8000834:	687b      	ldr	r3, [r7, #4]
}
 8000836:	4618      	mov	r0, r3
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	24000090 	.word	0x24000090
 8000844:	2400008c 	.word	0x2400008c

08000848 <LoggerInit>:

int8_t LoggerInit(UART_HandleTypeDef *pUART_)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  if(HAL_GetCurrentCPUID() != CM7_CPUID || pUART_ == NULL) 
 8000850:	f001 fdea 	bl	8002428 <HAL_GetCurrentCPUID>
 8000854:	4603      	mov	r3, r0
 8000856:	2b03      	cmp	r3, #3
 8000858:	d102      	bne.n	8000860 <LoggerInit+0x18>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d105      	bne.n	800086c <LoggerInit+0x24>
  {
    pUART = NULL;
 8000860:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <LoggerInit+0x5c>)
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
    return -1;
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
 800086a:	e017      	b.n	800089c <LoggerInit+0x54>
  }

  pCM4RingBuf = RingBuffCreate((void*)MEM_SHARED_CM4_UART_RINGBUFF_START, MEM_SHARED_CM4_UART_RINGBUFF_TOTAL_LEN);
 800086c:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000870:	480d      	ldr	r0, [pc, #52]	@ (80008a8 <LoggerInit+0x60>)
 8000872:	f000 f921 	bl	8000ab8 <RingBuffCreate>
 8000876:	4603      	mov	r3, r0
 8000878:	4a0c      	ldr	r2, [pc, #48]	@ (80008ac <LoggerInit+0x64>)
 800087a:	6013      	str	r3, [r2, #0]
  pCM7RingBuf = RingBuffCreate((void*)MEM_SHARED_CM7_UART_RINGBUFF_START, MEM_SHARED_CM7_UART_RINGBUFF_TOTAL_LEN);
 800087c:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000880:	480b      	ldr	r0, [pc, #44]	@ (80008b0 <LoggerInit+0x68>)
 8000882:	f000 f919 	bl	8000ab8 <RingBuffCreate>
 8000886:	4603      	mov	r3, r0
 8000888:	4a0a      	ldr	r2, [pc, #40]	@ (80008b4 <LoggerInit+0x6c>)
 800088a:	6013      	str	r3, [r2, #0]
  pUART = pUART_;
 800088c:	4a05      	ldr	r2, [pc, #20]	@ (80008a4 <LoggerInit+0x5c>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6013      	str	r3, [r2, #0]
  SyncRegisterHandler(SyncUARTTaskHandler, SYNC_TASKID_UART_OUT);
 8000892:	2100      	movs	r1, #0
 8000894:	4808      	ldr	r0, [pc, #32]	@ (80008b8 <LoggerInit+0x70>)
 8000896:	f000 fd61 	bl	800135c <SyncRegisterHandler>

  return 0;
 800089a:	2300      	movs	r3, #0
}
 800089c:	4618      	mov	r0, r3
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	24000094 	.word	0x24000094
 80008a8:	38000008 	.word	0x38000008
 80008ac:	2400008c 	.word	0x2400008c
 80008b0:	38000128 	.word	0x38000128
 80008b4:	24000090 	.word	0x24000090
 80008b8:	0800090d 	.word	0x0800090d

080008bc <LoggerWriteToUART>:

static int8_t LoggerWriteToUART(RingBuff volatile *pRingBuf)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  uint32_t len = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
  void *pBufToTransmit = NULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]

  send:
  len = RingBuffGetLinearBlockReadLength(pRingBuf);
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f000 fa5f 	bl	8000d90 <RingBuffGetLinearBlockReadLength>
 80008d2:	60f8      	str	r0, [r7, #12]
  if(len > 0)
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d011      	beq.n	80008fe <LoggerWriteToUART+0x42>
  {
    pBufToTransmit = RingBuffGetLinearBlockReadAddress(pRingBuf);
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 fa2e 	bl	8000d3c <RingBuffGetLinearBlockReadAddress>
 80008e0:	60b8      	str	r0, [r7, #8]
    HAL_UART_Transmit(pUART, pBufToTransmit, len, 1000);
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <LoggerWriteToUART+0x4c>)
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ee:	68b9      	ldr	r1, [r7, #8]
 80008f0:	f006 fe8a 	bl	8007608 <HAL_UART_Transmit>
    RingBuffSkip(pRingBuf, len);
 80008f4:	68f9      	ldr	r1, [r7, #12]
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f000 fa8c 	bl	8000e14 <RingBuffSkip>
    /* Check for anything in the overflow buffer */
    goto send;
 80008fc:	e7e6      	b.n	80008cc <LoggerWriteToUART+0x10>
  }
  return 0;
 80008fe:	2300      	movs	r3, #0
}
 8000900:	4618      	mov	r0, r3
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	24000094 	.word	0x24000094

0800090c <SyncUARTTaskHandler>:

static void SyncUARTTaskHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 8000910:	f001 fd8a 	bl	8002428 <HAL_GetCurrentCPUID>
 8000914:	4603      	mov	r3, r0
 8000916:	2b03      	cmp	r3, #3
 8000918:	d104      	bne.n	8000924 <SyncUARTTaskHandler+0x18>
  {
    LoggerWriteToUART(pCM4RingBuf);
 800091a:	4b03      	ldr	r3, [pc, #12]	@ (8000928 <SyncUARTTaskHandler+0x1c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ffcc 	bl	80008bc <LoggerWriteToUART>
  }
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	2400008c 	.word	0x2400008c

0800092c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000930:	4b49      	ldr	r3, [pc, #292]	@ (8000a58 <SystemInit+0x12c>)
 8000932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000936:	4a48      	ldr	r2, [pc, #288]	@ (8000a58 <SystemInit+0x12c>)
 8000938:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800093c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000940:	4b45      	ldr	r3, [pc, #276]	@ (8000a58 <SystemInit+0x12c>)
 8000942:	691b      	ldr	r3, [r3, #16]
 8000944:	4a44      	ldr	r2, [pc, #272]	@ (8000a58 <SystemInit+0x12c>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800094c:	4b43      	ldr	r3, [pc, #268]	@ (8000a5c <SystemInit+0x130>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f003 030f 	and.w	r3, r3, #15
 8000954:	2b06      	cmp	r3, #6
 8000956:	d807      	bhi.n	8000968 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000958:	4b40      	ldr	r3, [pc, #256]	@ (8000a5c <SystemInit+0x130>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f023 030f 	bic.w	r3, r3, #15
 8000960:	4a3e      	ldr	r2, [pc, #248]	@ (8000a5c <SystemInit+0x130>)
 8000962:	f043 0307 	orr.w	r3, r3, #7
 8000966:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000968:	4b3d      	ldr	r3, [pc, #244]	@ (8000a60 <SystemInit+0x134>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a3c      	ldr	r2, [pc, #240]	@ (8000a60 <SystemInit+0x134>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000974:	4b3a      	ldr	r3, [pc, #232]	@ (8000a60 <SystemInit+0x134>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800097a:	4b39      	ldr	r3, [pc, #228]	@ (8000a60 <SystemInit+0x134>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	4938      	ldr	r1, [pc, #224]	@ (8000a60 <SystemInit+0x134>)
 8000980:	4b38      	ldr	r3, [pc, #224]	@ (8000a64 <SystemInit+0x138>)
 8000982:	4013      	ands	r3, r2
 8000984:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000986:	4b35      	ldr	r3, [pc, #212]	@ (8000a5c <SystemInit+0x130>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	2b00      	cmp	r3, #0
 8000990:	d007      	beq.n	80009a2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000992:	4b32      	ldr	r3, [pc, #200]	@ (8000a5c <SystemInit+0x130>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f023 030f 	bic.w	r3, r3, #15
 800099a:	4a30      	ldr	r2, [pc, #192]	@ (8000a5c <SystemInit+0x130>)
 800099c:	f043 0307 	orr.w	r3, r3, #7
 80009a0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000a60 <SystemInit+0x134>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000a60 <SystemInit+0x134>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000a60 <SystemInit+0x134>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000a60 <SystemInit+0x134>)
 80009b6:	4a2c      	ldr	r2, [pc, #176]	@ (8000a68 <SystemInit+0x13c>)
 80009b8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009ba:	4b29      	ldr	r3, [pc, #164]	@ (8000a60 <SystemInit+0x134>)
 80009bc:	4a2b      	ldr	r2, [pc, #172]	@ (8000a6c <SystemInit+0x140>)
 80009be:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009c0:	4b27      	ldr	r3, [pc, #156]	@ (8000a60 <SystemInit+0x134>)
 80009c2:	4a2b      	ldr	r2, [pc, #172]	@ (8000a70 <SystemInit+0x144>)
 80009c4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009c6:	4b26      	ldr	r3, [pc, #152]	@ (8000a60 <SystemInit+0x134>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009cc:	4b24      	ldr	r3, [pc, #144]	@ (8000a60 <SystemInit+0x134>)
 80009ce:	4a28      	ldr	r2, [pc, #160]	@ (8000a70 <SystemInit+0x144>)
 80009d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009d2:	4b23      	ldr	r3, [pc, #140]	@ (8000a60 <SystemInit+0x134>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009d8:	4b21      	ldr	r3, [pc, #132]	@ (8000a60 <SystemInit+0x134>)
 80009da:	4a25      	ldr	r2, [pc, #148]	@ (8000a70 <SystemInit+0x144>)
 80009dc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009de:	4b20      	ldr	r3, [pc, #128]	@ (8000a60 <SystemInit+0x134>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a60 <SystemInit+0x134>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000a60 <SystemInit+0x134>)
 80009ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80009ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a60 <SystemInit+0x134>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80009f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a74 <SystemInit+0x148>)
 80009f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000a74 <SystemInit+0x148>)
 80009fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a00:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <SystemInit+0x14c>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <SystemInit+0x150>)
 8000a08:	4013      	ands	r3, r2
 8000a0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a0e:	d202      	bcs.n	8000a16 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	@ (8000a80 <SystemInit+0x154>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000a16:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <SystemInit+0x134>)
 8000a18:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d113      	bne.n	8000a4c <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000a24:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <SystemInit+0x134>)
 8000a26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a2a:	4a0d      	ldr	r2, [pc, #52]	@ (8000a60 <SystemInit+0x134>)
 8000a2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a30:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a34:	4b13      	ldr	r3, [pc, #76]	@ (8000a84 <SystemInit+0x158>)
 8000a36:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000a3a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000a3c:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <SystemInit+0x134>)
 8000a3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a42:	4a07      	ldr	r2, [pc, #28]	@ (8000a60 <SystemInit+0x134>)
 8000a44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a48:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00
 8000a5c:	52002000 	.word	0x52002000
 8000a60:	58024400 	.word	0x58024400
 8000a64:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a68:	02020200 	.word	0x02020200
 8000a6c:	01ff0000 	.word	0x01ff0000
 8000a70:	01010280 	.word	0x01010280
 8000a74:	580000c0 	.word	0x580000c0
 8000a78:	5c001000 	.word	0x5c001000
 8000a7c:	ffff0000 	.word	0xffff0000
 8000a80:	51008108 	.word	0x51008108
 8000a84:	52004000 	.word	0x52004000

08000a88 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000a8c:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <ExitRun0Mode+0x2c>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	4a08      	ldr	r2, [pc, #32]	@ (8000ab4 <ExitRun0Mode+0x2c>)
 8000a92:	f023 0302 	bic.w	r3, r3, #2
 8000a96:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000a98:	bf00      	nop
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <ExitRun0Mode+0x2c>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d0f9      	beq.n	8000a9a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000aa6:	bf00      	nop
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	58024800 	.word	0x58024800

08000ab8 <RingBuffCreate>:
 * \param[in]       buff: Buffer handle
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
RINGBUFF_VOLATILE RingBuff* RingBuffCreate(void* pBuff, size_t size) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
    if (pBuff == NULL || size == 0 || size < (sizeof(RingBuff) + 1)) {
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d005      	beq.n	8000ad4 <RingBuffCreate+0x1c>
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d002      	beq.n	8000ad4 <RingBuffCreate+0x1c>
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	2b20      	cmp	r3, #32
 8000ad2:	d801      	bhi.n	8000ad8 <RingBuffCreate+0x20>
        return NULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	e017      	b.n	8000b08 <RingBuffCreate+0x50>
    }

    RINGBUFF_VOLATILE RingBuff *pRingBuf = (RingBuff*)pBuff;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	60fb      	str	r3, [r7, #12]
    BUF_MEMSET((void *)pRingBuf, 0x00, sizeof(RingBuff));
 8000adc:	2220      	movs	r2, #32
 8000ade:	2100      	movs	r1, #0
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f00a fc5b 	bl	800b39c <memset>

    pRingBuf->size = size - sizeof(RingBuff);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	f1a3 0220 	sub.w	r2, r3, #32
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	609a      	str	r2, [r3, #8]
    pRingBuf->buff = ((uint8_t*) ((uintptr_t)pBuff) + sizeof(RingBuff));
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f103 0220 	add.w	r2, r3, #32
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	605a      	str	r2, [r3, #4]

    pRingBuf->magic1 = 0xDEADBEEF;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4a04      	ldr	r2, [pc, #16]	@ (8000b10 <RingBuffCreate+0x58>)
 8000afe:	601a      	str	r2, [r3, #0]
    pRingBuf->magic2 = ~0xDEADBEEF;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4a04      	ldr	r2, [pc, #16]	@ (8000b14 <RingBuffCreate+0x5c>)
 8000b04:	619a      	str	r2, [r3, #24]

    return pRingBuf;
 8000b06:	68fb      	ldr	r3, [r7, #12]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	deadbeef 	.word	0xdeadbeef
 8000b14:	21524110 	.word	0x21524110

08000b18 <RingBuffWrite>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
RingBuffWrite(RINGBUFF_VOLATILE RingBuff* buff, const void* data, size_t btw) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d017      	beq.n	8000b5e <RingBuffWrite+0x46>
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a3b      	ldr	r2, [pc, #236]	@ (8000c20 <RingBuffWrite+0x108>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d112      	bne.n	8000b5e <RingBuffWrite+0x46>
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a39      	ldr	r2, [pc, #228]	@ (8000c24 <RingBuffWrite+0x10c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d10d      	bne.n	8000b5e <RingBuffWrite+0x46>
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d009      	beq.n	8000b5e <RingBuffWrite+0x46>
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d005      	beq.n	8000b5e <RingBuffWrite+0x46>
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d002      	beq.n	8000b5e <RingBuffWrite+0x46>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d101      	bne.n	8000b62 <RingBuffWrite+0x4a>
        return 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e059      	b.n	8000c16 <RingBuffWrite+0xfe>
    }

    /* Calculate maximum number of bytes available to write */
    free = RingBuffGetFree(buff);
 8000b62:	68f8      	ldr	r0, [r7, #12]
 8000b64:	f000 f860 	bl	8000c28 <RingBuffGetFree>
 8000b68:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	bf28      	it	cs
 8000b72:	4613      	movcs	r3, r2
 8000b74:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d101      	bne.n	8000b80 <RingBuffWrite+0x68>
        return 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	e04a      	b.n	8000c16 <RingBuffWrite+0xfe>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	689a      	ldr	r2, [r3, #8]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	691b      	ldr	r3, [r3, #16]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d905      	bls.n	8000b9c <RingBuffWrite+0x84>
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	689a      	ldr	r2, [r3, #8]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	691b      	ldr	r3, [r3, #16]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	e000      	b.n	8000b9e <RingBuffWrite+0x86>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	691b      	ldr	r3, [r3, #16]
 8000ba8:	4413      	add	r3, r2
 8000baa:	697a      	ldr	r2, [r7, #20]
 8000bac:	69f9      	ldr	r1, [r7, #28]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f00a fc6f 	bl	800b492 <memcpy>
    buff->w += tocopy;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	691a      	ldr	r2, [r3, #16]
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	441a      	add	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
    btw -= tocopy;
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d00b      	beq.n	8000be6 <RingBuffWrite+0xce>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	6858      	ldr	r0, [r3, #4]
 8000bd2:	69fa      	ldr	r2, [r7, #28]
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f00a fc59 	bl	800b492 <memcpy>
        buff->w = btw;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	611a      	str	r2, [r3, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	691a      	ldr	r2, [r3, #16]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d302      	bcc.n	8000bf8 <RingBuffWrite+0xe0>
        buff->w = 0;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_WRITE, tocopy + btw);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d007      	beq.n	8000c10 <RingBuffWrite+0xf8>
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	695b      	ldr	r3, [r3, #20]
 8000c04:	6979      	ldr	r1, [r7, #20]
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	440a      	add	r2, r1
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	68f8      	ldr	r0, [r7, #12]
 8000c0e:	4798      	blx	r3
    return tocopy + btw;
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3720      	adds	r7, #32
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	deadbeef 	.word	0xdeadbeef
 8000c24:	21524110 	.word	0x21524110

08000c28 <RingBuffGetFree>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
RingBuffGetFree(RINGBUFF_VOLATILE RingBuff* buff) {
 8000c28:	b480      	push	{r7}
 8000c2a:	b087      	sub	sp, #28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d011      	beq.n	8000c5a <RingBuffGetFree+0x32>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cac <RingBuffGetFree+0x84>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d10c      	bne.n	8000c5a <RingBuffGetFree+0x32>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	4a1a      	ldr	r2, [pc, #104]	@ (8000cb0 <RingBuffGetFree+0x88>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d107      	bne.n	8000c5a <RingBuffGetFree+0x32>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d003      	beq.n	8000c5a <RingBuffGetFree+0x32>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d101      	bne.n	8000c5e <RingBuffGetFree+0x36>
        return 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e01f      	b.n	8000c9e <RingBuffGetFree+0x76>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	691b      	ldr	r3, [r3, #16]
 8000c62:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d103      	bne.n	8000c7a <RingBuffGetFree+0x52>
        size = buff->size;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	e00f      	b.n	8000c9a <RingBuffGetFree+0x72>
    } else if (r > w) {
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d904      	bls.n	8000c8c <RingBuffGetFree+0x64>
        size = r - w;
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	e006      	b.n	8000c9a <RingBuffGetFree+0x72>
    } else {
        size = buff->size - (w - r);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689a      	ldr	r2, [r3, #8]
 8000c90:	68f9      	ldr	r1, [r7, #12]
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	1acb      	subs	r3, r1, r3
 8000c96:	4413      	add	r3, r2
 8000c98:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3b01      	subs	r3, #1
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	371c      	adds	r7, #28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	deadbeef 	.word	0xdeadbeef
 8000cb0:	21524110 	.word	0x21524110

08000cb4 <RingBuffGetFull>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
RingBuffGetFull(RINGBUFF_VOLATILE RingBuff* buff) {
 8000cb4:	b480      	push	{r7}
 8000cb6:	b087      	sub	sp, #28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d011      	beq.n	8000ce6 <RingBuffGetFull+0x32>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a1b      	ldr	r2, [pc, #108]	@ (8000d34 <RingBuffGetFull+0x80>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d10c      	bne.n	8000ce6 <RingBuffGetFull+0x32>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a19      	ldr	r2, [pc, #100]	@ (8000d38 <RingBuffGetFull+0x84>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d107      	bne.n	8000ce6 <RingBuffGetFull+0x32>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <RingBuffGetFull+0x32>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <RingBuffGetFull+0x36>
        return 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e01d      	b.n	8000d26 <RingBuffGetFull+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	691b      	ldr	r3, [r3, #16]
 8000cee:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d102      	bne.n	8000d04 <RingBuffGetFull+0x50>
        size = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	e00f      	b.n	8000d24 <RingBuffGetFull+0x70>
    } else if (w > r) {
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d904      	bls.n	8000d16 <RingBuffGetFull+0x62>
        size = w - r;
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	e006      	b.n	8000d24 <RingBuffGetFull+0x70>
    } else {
        size = buff->size - (r - w);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	6939      	ldr	r1, [r7, #16]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	1acb      	subs	r3, r1, r3
 8000d20:	4413      	add	r3, r2
 8000d22:	617b      	str	r3, [r7, #20]
    }
    return size;
 8000d24:	697b      	ldr	r3, [r7, #20]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	371c      	adds	r7, #28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	deadbeef 	.word	0xdeadbeef
 8000d38:	21524110 	.word	0x21524110

08000d3c <RingBuffGetLinearBlockReadAddress>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *
RingBuffGetLinearBlockReadAddress(RINGBUFF_VOLATILE RingBuff* buff) {
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d011      	beq.n	8000d6e <RingBuffGetLinearBlockReadAddress+0x32>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d88 <RingBuffGetLinearBlockReadAddress+0x4c>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d10c      	bne.n	8000d6e <RingBuffGetLinearBlockReadAddress+0x32>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a0c      	ldr	r2, [pc, #48]	@ (8000d8c <RingBuffGetLinearBlockReadAddress+0x50>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d107      	bne.n	8000d6e <RingBuffGetLinearBlockReadAddress+0x32>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <RingBuffGetLinearBlockReadAddress+0x32>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d101      	bne.n	8000d72 <RingBuffGetLinearBlockReadAddress+0x36>
        return NULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e004      	b.n	8000d7c <RingBuffGetLinearBlockReadAddress+0x40>
    }
    return &buff->buff[buff->r];
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	4413      	add	r3, r2
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	deadbeef 	.word	0xdeadbeef
 8000d8c:	21524110 	.word	0x21524110

08000d90 <RingBuffGetLinearBlockReadLength>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
RingBuffGetLinearBlockReadLength(RINGBUFF_VOLATILE RingBuff* buff) {
 8000d90:	b480      	push	{r7}
 8000d92:	b087      	sub	sp, #28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d011      	beq.n	8000dc2 <RingBuffGetLinearBlockReadLength+0x32>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a1a      	ldr	r2, [pc, #104]	@ (8000e0c <RingBuffGetLinearBlockReadLength+0x7c>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d10c      	bne.n	8000dc2 <RingBuffGetLinearBlockReadLength+0x32>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a18      	ldr	r2, [pc, #96]	@ (8000e10 <RingBuffGetLinearBlockReadLength+0x80>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d107      	bne.n	8000dc2 <RingBuffGetLinearBlockReadLength+0x32>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d003      	beq.n	8000dc2 <RingBuffGetLinearBlockReadLength+0x32>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <RingBuffGetLinearBlockReadLength+0x36>
        return 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e01b      	b.n	8000dfe <RingBuffGetLinearBlockReadLength+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d904      	bls.n	8000de4 <RingBuffGetLinearBlockReadLength+0x54>
        len = w - r;
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	e00b      	b.n	8000dfc <RingBuffGetLinearBlockReadLength+0x6c>
    } else if (r > w) {
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d905      	bls.n	8000df8 <RingBuffGetLinearBlockReadLength+0x68>
        len = buff->size - r;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	e001      	b.n	8000dfc <RingBuffGetLinearBlockReadLength+0x6c>
    } else {
        len = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
    }
    return len;
 8000dfc:	697b      	ldr	r3, [r7, #20]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	371c      	adds	r7, #28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	deadbeef 	.word	0xdeadbeef
 8000e10:	21524110 	.word	0x21524110

08000e14 <RingBuffSkip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
RingBuffSkip(RINGBUFF_VOLATILE RingBuff* buff, size_t len) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d014      	beq.n	8000e4e <RingBuffSkip+0x3a>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a20      	ldr	r2, [pc, #128]	@ (8000eac <RingBuffSkip+0x98>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d10f      	bne.n	8000e4e <RingBuffSkip+0x3a>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	4a1f      	ldr	r2, [pc, #124]	@ (8000eb0 <RingBuffSkip+0x9c>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d10a      	bne.n	8000e4e <RingBuffSkip+0x3a>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d006      	beq.n	8000e4e <RingBuffSkip+0x3a>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d002      	beq.n	8000e4e <RingBuffSkip+0x3a>
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d101      	bne.n	8000e52 <RingBuffSkip+0x3e>
        return 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e027      	b.n	8000ea2 <RingBuffSkip+0x8e>
    }

    full = RingBuffGetFull(buff);             /* Get buffer used length */
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ff2e 	bl	8000cb4 <RingBuffGetFull>
 8000e58:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);                   /* Calculate max skip */
 8000e5a:	683a      	ldr	r2, [r7, #0]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	bf28      	it	cs
 8000e62:	4613      	movcs	r3, r2
 8000e64:	603b      	str	r3, [r7, #0]
    buff->r += len;                             /* Advance read pointer */
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68da      	ldr	r2, [r3, #12]
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	441a      	add	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68da      	ldr	r2, [r3, #12]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d306      	bcc.n	8000e8c <RingBuffSkip+0x78>
        buff->r -= buff->size;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	68d2      	ldr	r2, [r2, #12]
 8000e86:	1ad2      	subs	r2, r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, len);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d005      	beq.n	8000ea0 <RingBuffSkip+0x8c>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	683a      	ldr	r2, [r7, #0]
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	4798      	blx	r3
    return len;
 8000ea0:	683b      	ldr	r3, [r7, #0]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	deadbeef 	.word	0xdeadbeef
 8000eb0:	21524110 	.word	0x21524110

08000eb4 <PIDInit>:

    return 1;
}

int8_t PIDInit(PIDContext *pContext)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    memset((void*)pContext, 0, sizeof(PIDContext));
 8000ebc:	2240      	movs	r2, #64	@ 0x40
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f00a fa6b 	bl	800b39c <memset>
    return 1;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <IMUReadReg>:
    0x2e, 0x00, 0xc1
};


IMU_STATUS IMUReadReg(IMU *pIMU, uint8_t reg, uint8_t *pBuf, uint32_t len)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b091      	sub	sp, #68	@ 0x44
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	460b      	mov	r3, r1
 8000ede:	72fb      	strb	r3, [r7, #11]
	uint8_t pTx[16];
	memset(pTx, 0, sizeof(pTx));
 8000ee0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ee4:	2210      	movs	r2, #16
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f00a fa57 	bl	800b39c <memset>
	// 0x80 bmi270 read bit
	pTx[0] = 0x80 | reg;
 8000eee:	7afb      	ldrb	r3, [r7, #11]
 8000ef0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	uint8_t pRx[16];
	memset(pRx, 0, sizeof(pRx));
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	2210      	movs	r2, #16
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f00a fa4a 	bl	800b39c <memset>
	// status = HAL_SPI_Transmit(pIMUSPIRef, pTemp, 1, 100);

	// set NSS high
	// HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

	if(len + 1 > 16)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	2b10      	cmp	r3, #16
 8000f0e:	d901      	bls.n	8000f14 <IMUReadReg+0x44>
	{
		return IMU_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e01f      	b.n	8000f54 <IMUReadReg+0x84>
	}

	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(pIMU->pSPI, pTx, pRx, len + 1, 100);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6818      	ldr	r0, [r3, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	f107 0214 	add.w	r2, r7, #20
 8000f24:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000f28:	2464      	movs	r4, #100	@ 0x64
 8000f2a:	9400      	str	r4, [sp, #0]
 8000f2c:	f004 fef0 	bl	8005d10 <HAL_SPI_TransmitReceive>
 8000f30:	4603      	mov	r3, r0
 8000f32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if(status != HAL_OK)
 8000f36:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <IMUReadReg+0x72>
	{
		return IMU_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e008      	b.n	8000f54 <IMUReadReg+0x84>
	}
	// 1st byte sent by bmi270 is a dummy byte
	memcpy(pBuf, &pRx[1], len);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	3301      	adds	r3, #1
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f00a faa0 	bl	800b492 <memcpy>

	return IMU_OK;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	373c      	adds	r7, #60	@ 0x3c
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd90      	pop	{r4, r7, pc}

08000f5c <IMUWriteReg>:

IMU_STATUS IMUWriteReg(IMU *pIMU, uint8_t reg, uint8_t *pBuf, uint32_t len)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	@ 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	72fb      	strb	r3, [r7, #11]
	uint8_t pTx[16];
	memset(pTx, 0, sizeof(pTx));
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2210      	movs	r2, #16
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f00a fa11 	bl	800b39c <memset>

	if(len + 1 > 16)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	2b10      	cmp	r3, #16
 8000f80:	d901      	bls.n	8000f86 <IMUWriteReg+0x2a>
	{
		return IMU_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e01e      	b.n	8000fc4 <IMUWriteReg+0x68>
	}

	pTx[0] = reg;
 8000f86:	7afb      	ldrb	r3, [r7, #11]
 8000f88:	753b      	strb	r3, [r7, #20]
	memcpy(&pTx[1], (void*)pBuf, len);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	3301      	adds	r3, #1
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f00a fa7c 	bl	800b492 <memcpy>

	HAL_StatusTypeDef status = HAL_SPI_Transmit(pIMU->pSPI, pTx, len + 1, 100);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	f107 0114 	add.w	r1, r7, #20
 8000faa:	2364      	movs	r3, #100	@ 0x64
 8000fac:	f004 fcc2 	bl	8005934 <HAL_SPI_Transmit>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if(status != HAL_OK)
 8000fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <IMUWriteReg+0x66>
	{
		return IMU_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <IMUWriteReg+0x68>
	}

	return IMU_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3728      	adds	r7, #40	@ 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <IMU2CPUInterruptHandler>:
}

IMU_STATUS IMU2CPUInterruptHandler(
  IMU *pIMU, Vec3 *pOutputAccel,Vec3 *pOutputGyro
)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  if(pIMU == NULL || pIMU->pSPI == NULL || pOutputAccel == NULL || pOutputGyro == NULL)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d009      	beq.n	8000ff2 <IMU2CPUInterruptHandler+0x26>
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d005      	beq.n	8000ff2 <IMU2CPUInterruptHandler+0x26>
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d002      	beq.n	8000ff2 <IMU2CPUInterruptHandler+0x26>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d112      	bne.n	8001018 <IMU2CPUInterruptHandler+0x4c>
  {
    LOG_ERROR("Invalid arguments");
 8000ff2:	481c      	ldr	r0, [pc, #112]	@ (8001064 <IMU2CPUInterruptHandler+0x98>)
 8000ff4:	f00a f88a 	bl	800b10c <iprintf>
 8000ff8:	481b      	ldr	r0, [pc, #108]	@ (8001068 <IMU2CPUInterruptHandler+0x9c>)
 8000ffa:	f00a f887 	bl	800b10c <iprintf>
 8000ffe:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8001002:	481a      	ldr	r0, [pc, #104]	@ (800106c <IMU2CPUInterruptHandler+0xa0>)
 8001004:	f00a f882 	bl	800b10c <iprintf>
 8001008:	4819      	ldr	r0, [pc, #100]	@ (8001070 <IMU2CPUInterruptHandler+0xa4>)
 800100a:	f00a f87f 	bl	800b10c <iprintf>
 800100e:	4819      	ldr	r0, [pc, #100]	@ (8001074 <IMU2CPUInterruptHandler+0xa8>)
 8001010:	f00a f8e4 	bl	800b1dc <puts>
    return IMU_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e021      	b.n	800105c <IMU2CPUInterruptHandler+0x90>
  }

  // read both status registers
  uint8_t pBuf[2] = {0, 0};
 8001018:	2300      	movs	r3, #0
 800101a:	82bb      	strh	r3, [r7, #20]
  IMU_STATUS status = IMUReadReg(pIMU, BMI2_INT_STATUS_1_ADDR, pBuf, 2);
 800101c:	f107 0214 	add.w	r2, r7, #20
 8001020:	2302      	movs	r3, #2
 8001022:	211d      	movs	r1, #29
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f7ff ff53 	bl	8000ed0 <IMUReadReg>
 800102a:	4603      	mov	r3, r0
 800102c:	75fb      	strb	r3, [r7, #23]

  // uint8_t intStatus0 = pBuf[0];
  uint8_t intStatus1 = pBuf[1];
 800102e:	7d7b      	ldrb	r3, [r7, #21]
 8001030:	75bb      	strb	r3, [r7, #22]
  }

  if(BIT_ISSET(intStatus1, BMI2_INT_STATUS_ACC_RDY_BIT)) status |= IMUUpdateAccel(pIMU, *pOutputAccel, pOutputAccel);
  if(BIT_ISSET(intStatus1, BMI2_INT_STATUS_GYR_RDY_BIT)) status |= IMUUpdateGyro(pIMU, *pOutputGyro, pOutputGyro);

  if(status != IMU_OK) LOG_ERROR("Failed to update IMU position data");
 8001032:	7dfb      	ldrb	r3, [r7, #23]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d010      	beq.n	800105a <IMU2CPUInterruptHandler+0x8e>
 8001038:	480a      	ldr	r0, [pc, #40]	@ (8001064 <IMU2CPUInterruptHandler+0x98>)
 800103a:	f00a f867 	bl	800b10c <iprintf>
 800103e:	480a      	ldr	r0, [pc, #40]	@ (8001068 <IMU2CPUInterruptHandler+0x9c>)
 8001040:	f00a f864 	bl	800b10c <iprintf>
 8001044:	f240 215a 	movw	r1, #602	@ 0x25a
 8001048:	4808      	ldr	r0, [pc, #32]	@ (800106c <IMU2CPUInterruptHandler+0xa0>)
 800104a:	f00a f85f 	bl	800b10c <iprintf>
 800104e:	480a      	ldr	r0, [pc, #40]	@ (8001078 <IMU2CPUInterruptHandler+0xac>)
 8001050:	f00a f85c 	bl	800b10c <iprintf>
 8001054:	4807      	ldr	r0, [pc, #28]	@ (8001074 <IMU2CPUInterruptHandler+0xa8>)
 8001056:	f00a f8c1 	bl	800b1dc <puts>

  return status;
 800105a:	7dfb      	ldrb	r3, [r7, #23]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	0800bed4 	.word	0x0800bed4
 8001068:	0800bee0 	.word	0x0800bee0
 800106c:	0800bf1c 	.word	0x0800bf1c
 8001070:	0800bf20 	.word	0x0800bf20
 8001074:	0800bf34 	.word	0x0800bf34
 8001078:	0800bf38 	.word	0x0800bf38

0800107c <IMUInit>:
  IMU_ACC_RANGE accRange,
  IMU_ACC_ODR accODR,
  IMU_GYRO_RANGE gyroRange,
  IMU_GYRO_ODR gyroODR
)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	4611      	mov	r1, r2
 8001088:	461a      	mov	r2, r3
 800108a:	460b      	mov	r3, r1
 800108c:	71fb      	strb	r3, [r7, #7]
 800108e:	4613      	mov	r3, r2
 8001090:	71bb      	strb	r3, [r7, #6]
  memset(pIMU, 0, sizeof(IMU));
 8001092:	2238      	movs	r2, #56	@ 0x38
 8001094:	2100      	movs	r1, #0
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f00a f980 	bl	800b39c <memset>
	pIMU->pSPI = pSPI;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	601a      	str	r2, [r3, #0]
  pIMU->accRange = accRange;
 80010a2:	79fa      	ldrb	r2, [r7, #7]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	625a      	str	r2, [r3, #36]	@ 0x24
  pIMU->accODR = accODR;
 80010a8:	79ba      	ldrb	r2, [r7, #6]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	629a      	str	r2, [r3, #40]	@ 0x28
  pIMU->gyroRange = gyroRange;
 80010ae:	f897 2020 	ldrb.w	r2, [r7, #32]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  pIMU->gyroODR = gyroODR;
 80010b6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	631a      	str	r2, [r3, #48]	@ 0x30
  pIMU->msLastAccUpdateTime = HAL_GetTick();
 80010be:	f001 f897 	bl	80021f0 <HAL_GetTick>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	61da      	str	r2, [r3, #28]
  pIMU->msLastGyroUpdateTime = HAL_GetTick();
 80010ca:	f001 f891 	bl	80021f0 <HAL_GetTick>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	621a      	str	r2, [r3, #32]
  pIMU->magic = IMU_MAGIC;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4a59      	ldr	r2, [pc, #356]	@ (8001240 <IMUInit+0x1c4>)
 80010da:	635a      	str	r2, [r3, #52]	@ 0x34

	IMU_STATUS status;
	uint8_t pBuffer[2];
  memset(pBuffer, 0, sizeof(pBuffer));
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2202      	movs	r2, #2
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f00a f959 	bl	800b39c <memset>

	// Dummy read to initialize SPI
	status = IMUReadReg(pIMU, BMI2_CHIP_ID_ADDR, pBuffer, 1);
 80010ea:	f107 0214 	add.w	r2, r7, #20
 80010ee:	2301      	movs	r3, #1
 80010f0:	2100      	movs	r1, #0
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	f7ff feec 	bl	8000ed0 <IMUReadReg>
 80010f8:	4603      	mov	r3, r0
 80010fa:	75fb      	strb	r3, [r7, #23]
	status = IMUReadReg(pIMU, BMI2_CHIP_ID_ADDR, pBuffer, 1);
 80010fc:	f107 0214 	add.w	r2, r7, #20
 8001100:	2301      	movs	r3, #1
 8001102:	2100      	movs	r1, #0
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f7ff fee3 	bl	8000ed0 <IMUReadReg>
 800110a:	4603      	mov	r3, r0
 800110c:	75fb      	strb	r3, [r7, #23]

	// Disable PWR_CONF advanced power save
	pBuffer[0] = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	753b      	strb	r3, [r7, #20]
	status = IMUWriteReg(pIMU, BMI2_PWR_CONF_ADDR, pBuffer, 1);
 8001112:	f107 0214 	add.w	r2, r7, #20
 8001116:	2301      	movs	r3, #1
 8001118:	217c      	movs	r1, #124	@ 0x7c
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f7ff ff1e 	bl	8000f5c <IMUWriteReg>
 8001120:	4603      	mov	r3, r0
 8001122:	75fb      	strb	r3, [r7, #23]

	HAL_Delay(1);
 8001124:	2001      	movs	r0, #1
 8001126:	f001 f86f 	bl	8002208 <HAL_Delay>

	// Prepare config file
	pBuffer[0] = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	753b      	strb	r3, [r7, #20]
	status = IMUWriteReg(pIMU, BMI2_INIT_CTRL_ADDR, pBuffer, 1);
 800112e:	f107 0214 	add.w	r2, r7, #20
 8001132:	2301      	movs	r3, #1
 8001134:	2159      	movs	r1, #89	@ 0x59
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f7ff ff10 	bl	8000f5c <IMUWriteReg>
 800113c:	4603      	mov	r3, r0
 800113e:	75fb      	strb	r3, [r7, #23]

	// I added the data write address directly to the config_file
	HAL_SPI_Transmit(pIMU->pSPI, bmi270_config_file, sizeof(bmi270_config_file), 100);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	2364      	movs	r3, #100	@ 0x64
 8001146:	f242 0201 	movw	r2, #8193	@ 0x2001
 800114a:	493e      	ldr	r1, [pc, #248]	@ (8001244 <IMUInit+0x1c8>)
 800114c:	f004 fbf2 	bl	8005934 <HAL_SPI_Transmit>

	pBuffer[0] = 0x01;
 8001150:	2301      	movs	r3, #1
 8001152:	753b      	strb	r3, [r7, #20]
	status = IMUWriteReg(pIMU, BMI2_INIT_CTRL_ADDR, pBuffer, 1);
 8001154:	f107 0214 	add.w	r2, r7, #20
 8001158:	2301      	movs	r3, #1
 800115a:	2159      	movs	r1, #89	@ 0x59
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f7ff fefd 	bl	8000f5c <IMUWriteReg>
 8001162:	4603      	mov	r3, r0
 8001164:	75fb      	strb	r3, [r7, #23]

	HAL_Delay(20);
 8001166:	2014      	movs	r0, #20
 8001168:	f001 f84e 	bl	8002208 <HAL_Delay>

	status = IMUReadReg(pIMU, BMI2_INTERNAL_STATUS_ADDR, pBuffer, 1);
 800116c:	f107 0214 	add.w	r2, r7, #20
 8001170:	2301      	movs	r3, #1
 8001172:	2121      	movs	r1, #33	@ 0x21
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f7ff feab 	bl	8000ed0 <IMUReadReg>
 800117a:	4603      	mov	r3, r0
 800117c:	75fb      	strb	r3, [r7, #23]
	if(status == -1 || (pBuffer[0] & 1) == 0)
 800117e:	7d3b      	ldrb	r3, [r7, #20]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <IMUInit+0x110>
	{
		return IMU_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e054      	b.n	8001236 <IMUInit+0x1ba>

  /*
  * Device Enable/Disable
  */
  // enable acceleration, gyro, and temp but disable auxillary interface
  pBuffer[0] = 0x0E;
 800118c:	230e      	movs	r3, #14
 800118e:	753b      	strb	r3, [r7, #20]
  status = IMUWriteReg(pIMU, BMI2_PWR_CTRL_ADDR, pBuffer, 1);
 8001190:	f107 0214 	add.w	r2, r7, #20
 8001194:	2301      	movs	r3, #1
 8001196:	217d      	movs	r1, #125	@ 0x7d
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f7ff fedf 	bl	8000f5c <IMUWriteReg>
 800119e:	4603      	mov	r3, r0
 80011a0:	75fb      	strb	r3, [r7, #23]

  /*
  * Accelerometer Setup
  */
  // enable acc filter perf bit, set acc bwp to normal, and set acc_odr to 100 Hz
  pBuffer[0] = BMI2_ACC_CONF_PERF_MODE_BIT | BMI2_ACC_CONF_BWP_NORMAL_BIT | pIMU->accODR;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	753b      	strb	r3, [r7, #20]
  // Set acc range to pIMU->accRange
  pBuffer[1] = pIMU->accRange;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	757b      	strb	r3, [r7, #21]
  status = IMUWriteReg(pIMU, BMI2_ACC_CONF_ADDR, pBuffer, 2);
 80011b8:	f107 0214 	add.w	r2, r7, #20
 80011bc:	2302      	movs	r3, #2
 80011be:	2140      	movs	r1, #64	@ 0x40
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f7ff fecb 	bl	8000f5c <IMUWriteReg>
 80011c6:	4603      	mov	r3, r0
 80011c8:	75fb      	strb	r3, [r7, #23]

  /*
  * Gyro Setup
  */
  // enable gyro filter perf bit, set gyr bwp to normal, and set gry_odr to 100 Hz
  pBuffer[0] = BMI2_GYRO_CONF_FILTER_PERF_BIT | BMI2_GYRO_CONF_NOISE_PERF_BIT | BMI2_GYRO_CONF_BWP_NORMAL_BIT | pIMU->gyroODR;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	f063 031f 	orn	r3, r3, #31
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	753b      	strb	r3, [r7, #20]
  // set gyro range
  pBuffer[1] = pIMU->gyroRange;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	757b      	strb	r3, [r7, #21]
  status = IMUWriteReg(pIMU, BMI2_GYR_CONF_ADDR, pBuffer, 2);
 80011e0:	f107 0214 	add.w	r2, r7, #20
 80011e4:	2302      	movs	r3, #2
 80011e6:	2142      	movs	r1, #66	@ 0x42
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f7ff feb7 	bl	8000f5c <IMUWriteReg>
 80011ee:	4603      	mov	r3, r0
 80011f0:	75fb      	strb	r3, [r7, #23]

  /*
  * Power Setup
  */
  // disable adv power sav and leave fifo self wakeup enabled
  pBuffer[0] = 0x02;
 80011f2:	2302      	movs	r3, #2
 80011f4:	753b      	strb	r3, [r7, #20]
  status = IMUWriteReg(pIMU, BMI2_PWR_CONF_ADDR, pBuffer, 1);
 80011f6:	f107 0214 	add.w	r2, r7, #20
 80011fa:	2301      	movs	r3, #1
 80011fc:	217c      	movs	r1, #124	@ 0x7c
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f7ff feac 	bl	8000f5c <IMUWriteReg>
 8001204:	4603      	mov	r3, r0
 8001206:	75fb      	strb	r3, [r7, #23]

  /*
  * Interrupt Setup
  */
  // enable INT1 w input disabled, output enabled, push pull, and active high
  pBuffer[0] = (0 << 3) | (1 << 2) | (0 << 1) | (1 << 0);
 8001208:	2305      	movs	r3, #5
 800120a:	753b      	strb	r3, [r7, #20]
  status = IMUWriteReg(pIMU, BMI2_INT1_IO_CTRL_ADDR, pBuffer, 1);
 800120c:	f107 0214 	add.w	r2, r7, #20
 8001210:	2301      	movs	r3, #1
 8001212:	2153      	movs	r1, #83	@ 0x53
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f7ff fea1 	bl	8000f5c <IMUWriteReg>
 800121a:	4603      	mov	r3, r0
 800121c:	75fb      	strb	r3, [r7, #23]
  // interrupts will NOT be cleared automatically. Have to be cleared by the
  // the host reading the int status registers
  pBuffer[0] = 1;
 800121e:	2301      	movs	r3, #1
 8001220:	753b      	strb	r3, [r7, #20]
  status = IMUWriteReg(pIMU, BMI2_INT_LATCH_ADDR, pBuffer, 1);
 8001222:	f107 0214 	add.w	r2, r7, #20
 8001226:	2301      	movs	r3, #1
 8001228:	2155      	movs	r1, #85	@ 0x55
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f7ff fe96 	bl	8000f5c <IMUWriteReg>
 8001230:	4603      	mov	r3, r0
 8001232:	75fb      	strb	r3, [r7, #23]

	return IMU_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	fafaafaf 	.word	0xfafaafaf
 8001244:	0800bf84 	.word	0x0800bf84

08001248 <SyncMailBoxGet>:
#include "mem/mem.h"

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID);

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
    uint8_t volatile *pMB = NULL;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
    if(mbID == MAILBOX_CM7_ID) pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM7_START;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d103      	bne.n	8001262 <SyncMailBoxGet+0x1a>
 800125a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	e001      	b.n	8001266 <SyncMailBoxGet+0x1e>
    else pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM4_START;
 8001262:	4b04      	ldr	r3, [pc, #16]	@ (8001274 <SyncMailBoxGet+0x2c>)
 8001264:	60fb      	str	r3, [r7, #12]
    return pMB;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	38000004 	.word	0x38000004

08001278 <SyncMailBoxWrite>:

int8_t SyncMailBoxWrite(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return -1;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b04      	cmp	r3, #4
 8001288:	d902      	bls.n	8001290 <SyncMailBoxWrite+0x18>
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
 800128e:	e009      	b.n	80012a4 <SyncMailBoxWrite+0x2c>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f7ff ffd9 	bl	8001248 <SyncMailBoxGet>
 8001296:	6178      	str	r0, [r7, #20]
    memcpy((void*)pMB, (void*)pBuffer, len);
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	68b9      	ldr	r1, [r7, #8]
 800129c:	6978      	ldr	r0, [r7, #20]
 800129e:	f00a f8f8 	bl	800b492 <memcpy>
    return 0;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <SyncMailBoxWriteNotify>:

int8_t SyncMailBoxWriteNotify(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
    int8_t status = SyncMailBoxWrite(mbID, pBuffer, len);
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	68b9      	ldr	r1, [r7, #8]
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f7ff ffdb 	bl	8001278 <SyncMailBoxWrite>
 80012c2:	4603      	mov	r3, r0
 80012c4:	75fb      	strb	r3, [r7, #23]
    if(status < 0) return status;
 80012c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	da02      	bge.n	80012d4 <SyncMailBoxWriteNotify+0x28>
 80012ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012d2:	e003      	b.n	80012dc <SyncMailBoxWriteNotify+0x30>
    asm volatile ("dsb");
 80012d4:	f3bf 8f4f 	dsb	sy
    asm volatile ("sev");
 80012d8:	bf40      	sev
    return 0;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <SyncMailBoxRead>:

int8_t SyncMailBoxRead(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return -1;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	d902      	bls.n	80012fc <SyncMailBoxRead+0x18>
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	e009      	b.n	8001310 <SyncMailBoxRead+0x2c>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f7ff ffa3 	bl	8001248 <SyncMailBoxGet>
 8001302:	6178      	str	r0, [r7, #20]
    memcpy((void*)pBuffer, (void*)pMB, len);
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	6979      	ldr	r1, [r7, #20]
 8001308:	68b8      	ldr	r0, [r7, #8]
 800130a:	f00a f8c2 	bl	800b492 <memcpy>
    return 0;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <SyncGetTaskHandler>:
//     if(HAL_GetCurrentCPUID() == CM7_CPUID)  return 0;
//     else                                    return 1;
// }

static task_handler_fn_t SyncGetTaskHandler(uint32_t taskID)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
    if(taskID > NUM_TASK_TYPES) return NULL;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <SyncGetTaskHandler+0x12>
 8001326:	2300      	movs	r3, #0
 8001328:	e003      	b.n	8001332 <SyncGetTaskHandler+0x1a>
    return handlers[taskID];
 800132a:	4a05      	ldr	r2, [pc, #20]	@ (8001340 <SyncGetTaskHandler+0x28>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	24000098 	.word	0x24000098

08001344 <SyncInit>:

/*
* \brief Each core needs to call SyncInit
*/
int8_t SyncInit(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
    memset(handlers, 0, sizeof(handlers));
 8001348:	2208      	movs	r2, #8
 800134a:	2100      	movs	r1, #0
 800134c:	4802      	ldr	r0, [pc, #8]	@ (8001358 <SyncInit+0x14>)
 800134e:	f00a f825 	bl	800b39c <memset>
    return 0;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	bd80      	pop	{r7, pc}
 8001358:	24000098 	.word	0x24000098

0800135c <SyncRegisterHandler>:

int8_t SyncRegisterHandler(task_handler_fn_t fn, uint32_t taskID)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
    if(taskID > NUM_TASK_TYPES) return -1;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d902      	bls.n	8001372 <SyncRegisterHandler+0x16>
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	e005      	b.n	800137e <SyncRegisterHandler+0x22>
    handlers[taskID] = fn;
 8001372:	4906      	ldr	r1, [pc, #24]	@ (800138c <SyncRegisterHandler+0x30>)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 0;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	24000098 	.word	0x24000098

08001390 <CM7_SEV_IRQHandler>:
* and the SEV IRQ handler for CM4 was called.
* This function was originally defined in CM4/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM7_SEV_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
    // CPUID == CM4
    uint32_t taskID = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 800139a:	463b      	mov	r3, r7
 800139c:	2204      	movs	r2, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	2000      	movs	r0, #0
 80013a2:	f7ff ff9f 	bl	80012e4 <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ffb5 	bl	8001318 <SyncGetTaskHandler>
 80013ae:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <CM7_SEV_IRQHandler+0x2a>
    {
        fn();
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4798      	blx	r3
    }
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <CM4_SEV_IRQHandler>:
* and the SEV IRQ handler for CM7 was called.
* This function was originally defined in CM7/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM4_SEV_IRQHandler(void)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
    // CPUID == CM7
    uint32_t taskID = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM7_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 80013cc:	463b      	mov	r3, r7
 80013ce:	2204      	movs	r2, #4
 80013d0:	4619      	mov	r1, r3
 80013d2:	2001      	movs	r0, #1
 80013d4:	f7ff ff86 	bl	80012e4 <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff9c 	bl	8001318 <SyncGetTaskHandler>
 80013e0:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <CM4_SEV_IRQHandler+0x2a>
    {
        fn();
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4798      	blx	r3
    }
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <HAL_GPIO_EXTI_Callback>:
FilterMadgwickContext gFilterMadgwickContext;
PIDContext gPIDAngleContext;
TaskHandle_t gpTaskMotionControlUpdate;

void HAL_GPIO_EXTI_Callback(uint16_t gpioPin)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b08d      	sub	sp, #52	@ 0x34
 80013f8:	af04      	add	r7, sp, #16
 80013fa:	4603      	mov	r3, r0
 80013fc:	80fb      	strh	r3, [r7, #6]
    if(gpioPin == IMU_INT_Pin) 
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	2b80      	cmp	r3, #128	@ 0x80
 8001402:	d122      	bne.n	800144a <HAL_GPIO_EXTI_Callback+0x56>
    {
        Vec3 accel, gyro;
        if(IMU2CPUInterruptHandler(&gIMU, &accel, &gyro) == IMU_OK)
 8001404:	f107 0208 	add.w	r2, r7, #8
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4619      	mov	r1, r3
 800140e:	4811      	ldr	r0, [pc, #68]	@ (8001454 <HAL_GPIO_EXTI_Callback+0x60>)
 8001410:	f7ff fddc 	bl	8000fcc <IMU2CPUInterruptHandler>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d117      	bne.n	800144a <HAL_GPIO_EXTI_Callback+0x56>
        {
            FlightContextUpdateIMUData(&gFlightContext, accel, gyro);
 800141a:	466c      	mov	r4, sp
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001424:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800142e:	480a      	ldr	r0, [pc, #40]	@ (8001458 <HAL_GPIO_EXTI_Callback+0x64>)
 8001430:	f7ff f97a 	bl	8000728 <FlightContextUpdateIMUData>
            if(gpTaskMotionControlUpdate != NULL) xTaskNotifyGive(gpTaskMotionControlUpdate);
 8001434:	4b09      	ldr	r3, [pc, #36]	@ (800145c <HAL_GPIO_EXTI_Callback+0x68>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d006      	beq.n	800144a <HAL_GPIO_EXTI_Callback+0x56>
 800143c:	4b07      	ldr	r3, [pc, #28]	@ (800145c <HAL_GPIO_EXTI_Callback+0x68>)
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	2300      	movs	r3, #0
 8001442:	2202      	movs	r2, #2
 8001444:	2100      	movs	r1, #0
 8001446:	f009 f937 	bl	800a6b8 <xTaskGenericNotify>
        }
    }
}
 800144a:	bf00      	nop
 800144c:	3724      	adds	r7, #36	@ 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd90      	pop	{r4, r7, pc}
 8001452:	bf00      	nop
 8001454:	24000254 	.word	0x24000254
 8001458:	2400028c 	.word	0x2400028c
 800145c:	2400033c 	.word	0x2400033c

08001460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af02      	add	r7, sp, #8

/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm("NOP"); }
 8001466:	e000      	b.n	800146a <main+0xa>
 8001468:	bf00      	nop
 800146a:	4b25      	ldr	r3, [pc, #148]	@ (8001500 <main+0xa0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f8      	bne.n	8001468 <main+0x8>
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001476:	f000 fe6b 	bl	8002150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147a:	f000 f84d 	bl	8001518 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800147e:	4b20      	ldr	r3, [pc, #128]	@ (8001500 <main+0xa0>)
 8001480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001484:	4a1e      	ldr	r2, [pc, #120]	@ (8001500 <main+0xa0>)
 8001486:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800148a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800148e:	4b1c      	ldr	r3, [pc, #112]	@ (8001500 <main+0xa0>)
 8001490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800149c:	2000      	movs	r0, #0
 800149e:	f001 f99f 	bl	80027e0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80014a2:	2100      	movs	r1, #0
 80014a4:	2000      	movs	r0, #0
 80014a6:	f001 f9b5 	bl	8002814 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm("NOP"); }
 80014aa:	e000      	b.n	80014ae <main+0x4e>
 80014ac:	bf00      	nop
 80014ae:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <main+0xa0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f8      	bne.n	80014ac <main+0x4c>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ba:	f000 fa33 	bl	8001924 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80014be:	f000 f9e5 	bl	800188c <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80014c2:	f000 f8af 	bl	8001624 <MX_SPI2_Init>
  MX_TIM8_Init();
 80014c6:	f000 f903 	bl	80016d0 <MX_TIM8_Init>
  MX_TIM13_Init();
 80014ca:	f000 f991 	bl	80017f0 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  LoggerInit(&huart1);
 80014ce:	480d      	ldr	r0, [pc, #52]	@ (8001504 <main+0xa4>)
 80014d0:	f7ff f9ba 	bl	8000848 <LoggerInit>
  SyncInit();
 80014d4:	f7ff ff36 	bl	8001344 <SyncInit>
  PIDInit(&gPIDAngleContext);
 80014d8:	480b      	ldr	r0, [pc, #44]	@ (8001508 <main+0xa8>)
 80014da:	f7ff fceb 	bl	8000eb4 <PIDInit>
  FilterMadgwickInit(&gFilterMadgwickContext);
 80014de:	480b      	ldr	r0, [pc, #44]	@ (800150c <main+0xac>)
 80014e0:	f7ff f8e6 	bl	80006b0 <FilterMadgwickInit>

  IMUInit(
 80014e4:	2308      	movs	r3, #8
 80014e6:	9301      	str	r3, [sp, #4]
 80014e8:	2303      	movs	r3, #3
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	2308      	movs	r3, #8
 80014ee:	2201      	movs	r2, #1
 80014f0:	4907      	ldr	r1, [pc, #28]	@ (8001510 <main+0xb0>)
 80014f2:	4808      	ldr	r0, [pc, #32]	@ (8001514 <main+0xb4>)
 80014f4:	f7ff fdc2 	bl	800107c <IMUInit>
    IMU_ACC_ODR_100,
    IMU_GYRO_RANGE_250,
    IMU_GYRO_ODR_100
  );

  vTaskStartScheduler();
 80014f8:	f008 fc02 	bl	8009d00 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Init scheduler */
  // osKernelInitialize();

  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <main+0x9c>
 8001500:	58024400 	.word	0x58024400
 8001504:	240001c0 	.word	0x240001c0
 8001508:	240002fc 	.word	0x240002fc
 800150c:	240002e0 	.word	0x240002e0
 8001510:	240000a0 	.word	0x240000a0
 8001514:	24000254 	.word	0x24000254

08001518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b09c      	sub	sp, #112	@ 0x70
 800151c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001522:	224c      	movs	r2, #76	@ 0x4c
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f009 ff38 	bl	800b39c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	2220      	movs	r2, #32
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f009 ff32 	bl	800b39c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001538:	2004      	movs	r0, #4
 800153a:	f001 f97f 	bl	800283c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800153e:	2300      	movs	r3, #0
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	4b36      	ldr	r3, [pc, #216]	@ (800161c <SystemClock_Config+0x104>)
 8001544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001546:	4a35      	ldr	r2, [pc, #212]	@ (800161c <SystemClock_Config+0x104>)
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800154e:	4b33      	ldr	r3, [pc, #204]	@ (800161c <SystemClock_Config+0x104>)
 8001550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	4b31      	ldr	r3, [pc, #196]	@ (8001620 <SystemClock_Config+0x108>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4a30      	ldr	r2, [pc, #192]	@ (8001620 <SystemClock_Config+0x108>)
 800155e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001562:	6193      	str	r3, [r2, #24]
 8001564:	4b2e      	ldr	r3, [pc, #184]	@ (8001620 <SystemClock_Config+0x108>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001570:	bf00      	nop
 8001572:	4b2b      	ldr	r3, [pc, #172]	@ (8001620 <SystemClock_Config+0x108>)
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800157a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800157e:	d1f8      	bne.n	8001572 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001580:	230b      	movs	r3, #11
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001584:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800158a:	2301      	movs	r3, #1
 800158c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800158e:	2340      	movs	r3, #64	@ 0x40
 8001590:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001592:	2301      	movs	r3, #1
 8001594:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001596:	2302      	movs	r3, #2
 8001598:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800159a:	2302      	movs	r3, #2
 800159c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800159e:	2305      	movs	r3, #5
 80015a0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 80015a2:	2330      	movs	r3, #48	@ 0x30
 80015a4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80015a6:	2302      	movs	r3, #2
 80015a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80015aa:	2305      	movs	r3, #5
 80015ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015ae:	2302      	movs	r3, #2
 80015b0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80015b2:	2308      	movs	r3, #8
 80015b4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 f994 	bl	80028f0 <HAL_RCC_OscConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80015ce:	f000 fa41 	bl	8001a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d2:	233f      	movs	r3, #63	@ 0x3f
 80015d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f001 fdd4 	bl	80031a4 <HAL_RCC_ClockConfig>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001602:	f000 fa27 	bl	8001a54 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001606:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800160a:	2100      	movs	r1, #0
 800160c:	2000      	movs	r0, #0
 800160e:	f001 ff7f 	bl	8003510 <HAL_RCC_MCOConfig>
}
 8001612:	bf00      	nop
 8001614:	3770      	adds	r7, #112	@ 0x70
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	58000400 	.word	0x58000400
 8001620:	58024800 	.word	0x58024800

08001624 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001628:	4b27      	ldr	r3, [pc, #156]	@ (80016c8 <MX_SPI2_Init+0xa4>)
 800162a:	4a28      	ldr	r2, [pc, #160]	@ (80016cc <MX_SPI2_Init+0xa8>)
 800162c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800162e:	4b26      	ldr	r3, [pc, #152]	@ (80016c8 <MX_SPI2_Init+0xa4>)
 8001630:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001634:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001636:	4b24      	ldr	r3, [pc, #144]	@ (80016c8 <MX_SPI2_Init+0xa4>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800163c:	4b22      	ldr	r3, [pc, #136]	@ (80016c8 <MX_SPI2_Init+0xa4>)
 800163e:	2207      	movs	r2, #7
 8001640:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001642:	4b21      	ldr	r3, [pc, #132]	@ (80016c8 <MX_SPI2_Init+0xa4>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001648:	4b1f      	ldr	r3, [pc, #124]	@ (80016c8 <MX_SPI2_Init+0xa4>)
 800164a:	2200      	movs	r2, #0
 800164c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800164e:	4b1e      	ldr	r3, [pc, #120]	@ (80016c8 <MX_SPI2_Init+0xa4>)
 8001650:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001654:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001656:	4b1c      	ldr	r3, [pc, #112]	@ (80016c8 <MX_SPI2_Init+0xa4>)
 8001658:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800165c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800165e:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <MX_SPI2_Init+0xa4>)
 8001660:	2200      	movs	r2, #0
 8001662:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001664:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <MX_SPI2_Init+0xa4>)
 8001666:	2200      	movs	r2, #0
 8001668:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800166a:	4b17      	ldr	r3, [pc, #92]	@ (80016c8 <MX_SPI2_Init+0xa4>)
 800166c:	2200      	movs	r2, #0
 800166e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001670:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <MX_SPI2_Init+0xa4>)
 8001672:	2200      	movs	r2, #0
 8001674:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001676:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <MX_SPI2_Init+0xa4>)
 8001678:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800167c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800167e:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <MX_SPI2_Init+0xa4>)
 8001680:	2200      	movs	r2, #0
 8001682:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001684:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <MX_SPI2_Init+0xa4>)
 8001686:	2200      	movs	r2, #0
 8001688:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800168a:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <MX_SPI2_Init+0xa4>)
 800168c:	2200      	movs	r2, #0
 800168e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001690:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <MX_SPI2_Init+0xa4>)
 8001692:	2200      	movs	r2, #0
 8001694:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001696:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <MX_SPI2_Init+0xa4>)
 8001698:	2200      	movs	r2, #0
 800169a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800169c:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <MX_SPI2_Init+0xa4>)
 800169e:	2200      	movs	r2, #0
 80016a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016a2:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <MX_SPI2_Init+0xa4>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016a8:	4b07      	ldr	r3, [pc, #28]	@ (80016c8 <MX_SPI2_Init+0xa4>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <MX_SPI2_Init+0xa4>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016b4:	4804      	ldr	r0, [pc, #16]	@ (80016c8 <MX_SPI2_Init+0xa4>)
 80016b6:	f004 f819 	bl	80056ec <HAL_SPI_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80016c0:	f000 f9c8 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	240000a0 	.word	0x240000a0
 80016cc:	40003800 	.word	0x40003800

080016d0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b096      	sub	sp, #88	@ 0x58
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]
 80016f2:	615a      	str	r2, [r3, #20]
 80016f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	222c      	movs	r2, #44	@ 0x2c
 80016fa:	2100      	movs	r1, #0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f009 fe4d 	bl	800b39c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001702:	4b39      	ldr	r3, [pc, #228]	@ (80017e8 <MX_TIM8_Init+0x118>)
 8001704:	4a39      	ldr	r2, [pc, #228]	@ (80017ec <MX_TIM8_Init+0x11c>)
 8001706:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001708:	4b37      	ldr	r3, [pc, #220]	@ (80017e8 <MX_TIM8_Init+0x118>)
 800170a:	2200      	movs	r2, #0
 800170c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170e:	4b36      	ldr	r3, [pc, #216]	@ (80017e8 <MX_TIM8_Init+0x118>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001714:	4b34      	ldr	r3, [pc, #208]	@ (80017e8 <MX_TIM8_Init+0x118>)
 8001716:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800171a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171c:	4b32      	ldr	r3, [pc, #200]	@ (80017e8 <MX_TIM8_Init+0x118>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001722:	4b31      	ldr	r3, [pc, #196]	@ (80017e8 <MX_TIM8_Init+0x118>)
 8001724:	2200      	movs	r2, #0
 8001726:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001728:	4b2f      	ldr	r3, [pc, #188]	@ (80017e8 <MX_TIM8_Init+0x118>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800172e:	482e      	ldr	r0, [pc, #184]	@ (80017e8 <MX_TIM8_Init+0x118>)
 8001730:	f004 ffe0 	bl	80066f4 <HAL_TIM_PWM_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800173a:	f000 f98b 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800174a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800174e:	4619      	mov	r1, r3
 8001750:	4825      	ldr	r0, [pc, #148]	@ (80017e8 <MX_TIM8_Init+0x118>)
 8001752:	f005 fddf 	bl	8007314 <HAL_TIMEx_MasterConfigSynchronization>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800175c:	f000 f97a 	bl	8001a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001760:	2360      	movs	r3, #96	@ 0x60
 8001762:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001768:	2300      	movs	r3, #0
 800176a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800176c:	2300      	movs	r3, #0
 800176e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001774:	2300      	movs	r3, #0
 8001776:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001778:	2300      	movs	r3, #0
 800177a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800177c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001780:	2200      	movs	r2, #0
 8001782:	4619      	mov	r1, r3
 8001784:	4818      	ldr	r0, [pc, #96]	@ (80017e8 <MX_TIM8_Init+0x118>)
 8001786:	f005 f913 	bl	80069b0 <HAL_TIM_PWM_ConfigChannel>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001790:	f000 f960 	bl	8001a54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017ba:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	4619      	mov	r1, r3
 80017c8:	4807      	ldr	r0, [pc, #28]	@ (80017e8 <MX_TIM8_Init+0x118>)
 80017ca:	f005 fe31 	bl	8007430 <HAL_TIMEx_ConfigBreakDeadTime>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80017d4:	f000 f93e 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80017d8:	4803      	ldr	r0, [pc, #12]	@ (80017e8 <MX_TIM8_Init+0x118>)
 80017da:	f000 fa61 	bl	8001ca0 <HAL_TIM_MspPostInit>

}
 80017de:	bf00      	nop
 80017e0:	3758      	adds	r7, #88	@ 0x58
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	24000128 	.word	0x24000128
 80017ec:	40010400 	.word	0x40010400

080017f0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
 8001804:	615a      	str	r2, [r3, #20]
 8001806:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001808:	4b1e      	ldr	r3, [pc, #120]	@ (8001884 <MX_TIM13_Init+0x94>)
 800180a:	4a1f      	ldr	r2, [pc, #124]	@ (8001888 <MX_TIM13_Init+0x98>)
 800180c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800180e:	4b1d      	ldr	r3, [pc, #116]	@ (8001884 <MX_TIM13_Init+0x94>)
 8001810:	2200      	movs	r2, #0
 8001812:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001814:	4b1b      	ldr	r3, [pc, #108]	@ (8001884 <MX_TIM13_Init+0x94>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800181a:	4b1a      	ldr	r3, [pc, #104]	@ (8001884 <MX_TIM13_Init+0x94>)
 800181c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001820:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001822:	4b18      	ldr	r3, [pc, #96]	@ (8001884 <MX_TIM13_Init+0x94>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001828:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <MX_TIM13_Init+0x94>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800182e:	4815      	ldr	r0, [pc, #84]	@ (8001884 <MX_TIM13_Init+0x94>)
 8001830:	f004 fe91 	bl	8006556 <HAL_TIM_Base_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800183a:	f000 f90b 	bl	8001a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800183e:	4811      	ldr	r0, [pc, #68]	@ (8001884 <MX_TIM13_Init+0x94>)
 8001840:	f004 ff58 	bl	80066f4 <HAL_TIM_PWM_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800184a:	f000 f903 	bl	8001a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800184e:	2360      	movs	r3, #96	@ 0x60
 8001850:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	2200      	movs	r2, #0
 8001862:	4619      	mov	r1, r3
 8001864:	4807      	ldr	r0, [pc, #28]	@ (8001884 <MX_TIM13_Init+0x94>)
 8001866:	f005 f8a3 	bl	80069b0 <HAL_TIM_PWM_ConfigChannel>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001870:	f000 f8f0 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001874:	4803      	ldr	r0, [pc, #12]	@ (8001884 <MX_TIM13_Init+0x94>)
 8001876:	f000 fa13 	bl	8001ca0 <HAL_TIM_MspPostInit>

}
 800187a:	bf00      	nop
 800187c:	3720      	adds	r7, #32
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	24000174 	.word	0x24000174
 8001888:	40001c00 	.word	0x40001c00

0800188c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001890:	4b22      	ldr	r3, [pc, #136]	@ (800191c <MX_USART1_UART_Init+0x90>)
 8001892:	4a23      	ldr	r2, [pc, #140]	@ (8001920 <MX_USART1_UART_Init+0x94>)
 8001894:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001896:	4b21      	ldr	r3, [pc, #132]	@ (800191c <MX_USART1_UART_Init+0x90>)
 8001898:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800189c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800189e:	4b1f      	ldr	r3, [pc, #124]	@ (800191c <MX_USART1_UART_Init+0x90>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018a4:	4b1d      	ldr	r3, [pc, #116]	@ (800191c <MX_USART1_UART_Init+0x90>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018aa:	4b1c      	ldr	r3, [pc, #112]	@ (800191c <MX_USART1_UART_Init+0x90>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018b0:	4b1a      	ldr	r3, [pc, #104]	@ (800191c <MX_USART1_UART_Init+0x90>)
 80018b2:	220c      	movs	r2, #12
 80018b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b6:	4b19      	ldr	r3, [pc, #100]	@ (800191c <MX_USART1_UART_Init+0x90>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018bc:	4b17      	ldr	r3, [pc, #92]	@ (800191c <MX_USART1_UART_Init+0x90>)
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018c2:	4b16      	ldr	r3, [pc, #88]	@ (800191c <MX_USART1_UART_Init+0x90>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018c8:	4b14      	ldr	r3, [pc, #80]	@ (800191c <MX_USART1_UART_Init+0x90>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ce:	4b13      	ldr	r3, [pc, #76]	@ (800191c <MX_USART1_UART_Init+0x90>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018d4:	4811      	ldr	r0, [pc, #68]	@ (800191c <MX_USART1_UART_Init+0x90>)
 80018d6:	f005 fe47 	bl	8007568 <HAL_UART_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80018e0:	f000 f8b8 	bl	8001a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018e4:	2100      	movs	r1, #0
 80018e6:	480d      	ldr	r0, [pc, #52]	@ (800191c <MX_USART1_UART_Init+0x90>)
 80018e8:	f006 fedd 	bl	80086a6 <HAL_UARTEx_SetTxFifoThreshold>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80018f2:	f000 f8af 	bl	8001a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f6:	2100      	movs	r1, #0
 80018f8:	4808      	ldr	r0, [pc, #32]	@ (800191c <MX_USART1_UART_Init+0x90>)
 80018fa:	f006 ff12 	bl	8008722 <HAL_UARTEx_SetRxFifoThreshold>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001904:	f000 f8a6 	bl	8001a54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001908:	4804      	ldr	r0, [pc, #16]	@ (800191c <MX_USART1_UART_Init+0x90>)
 800190a:	f006 fe93 	bl	8008634 <HAL_UARTEx_DisableFifoMode>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001914:	f000 f89e 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	240001c0 	.word	0x240001c0
 8001920:	40011000 	.word	0x40011000

08001924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	@ 0x28
 8001928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193a:	4b3a      	ldr	r3, [pc, #232]	@ (8001a24 <MX_GPIO_Init+0x100>)
 800193c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001940:	4a38      	ldr	r2, [pc, #224]	@ (8001a24 <MX_GPIO_Init+0x100>)
 8001942:	f043 0304 	orr.w	r3, r3, #4
 8001946:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800194a:	4b36      	ldr	r3, [pc, #216]	@ (8001a24 <MX_GPIO_Init+0x100>)
 800194c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001958:	4b32      	ldr	r3, [pc, #200]	@ (8001a24 <MX_GPIO_Init+0x100>)
 800195a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800195e:	4a31      	ldr	r2, [pc, #196]	@ (8001a24 <MX_GPIO_Init+0x100>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001968:	4b2e      	ldr	r3, [pc, #184]	@ (8001a24 <MX_GPIO_Init+0x100>)
 800196a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001976:	4b2b      	ldr	r3, [pc, #172]	@ (8001a24 <MX_GPIO_Init+0x100>)
 8001978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800197c:	4a29      	ldr	r2, [pc, #164]	@ (8001a24 <MX_GPIO_Init+0x100>)
 800197e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001982:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001986:	4b27      	ldr	r3, [pc, #156]	@ (8001a24 <MX_GPIO_Init+0x100>)
 8001988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800198c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001994:	4b23      	ldr	r3, [pc, #140]	@ (8001a24 <MX_GPIO_Init+0x100>)
 8001996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800199a:	4a22      	ldr	r2, [pc, #136]	@ (8001a24 <MX_GPIO_Init+0x100>)
 800199c:	f043 0320 	orr.w	r3, r3, #32
 80019a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a24 <MX_GPIO_Init+0x100>)
 80019a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019aa:	f003 0320 	and.w	r3, r3, #32
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80019b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a24 <MX_GPIO_Init+0x100>)
 80019b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019b8:	4a1a      	ldr	r2, [pc, #104]	@ (8001a24 <MX_GPIO_Init+0x100>)
 80019ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019c2:	4b18      	ldr	r3, [pc, #96]	@ (8001a24 <MX_GPIO_Init+0x100>)
 80019c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 80019d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	4619      	mov	r1, r3
 80019ec:	480e      	ldr	r0, [pc, #56]	@ (8001a28 <MX_GPIO_Init+0x104>)
 80019ee:	f000 fd2d 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80019f2:	2380      	movs	r3, #128	@ 0x80
 80019f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	4809      	ldr	r0, [pc, #36]	@ (8001a2c <MX_GPIO_Init+0x108>)
 8001a08:	f000 fd20 	bl	800244c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(IMU_INT_EXTI_IRQn, 5, 0);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2105      	movs	r1, #5
 8001a10:	2017      	movs	r0, #23
 8001a12:	f000 fce1 	bl	80023d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(IMU_INT_EXTI_IRQn);
 8001a16:	2017      	movs	r0, #23
 8001a18:	f000 fcf8 	bl	800240c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a1c:	bf00      	nop
 8001a1e:	3728      	adds	r7, #40	@ 0x28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	58024400 	.word	0x58024400
 8001a28:	58020000 	.word	0x58020000
 8001a2c:	58020800 	.word	0x58020800

08001a30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a04      	ldr	r2, [pc, #16]	@ (8001a50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d101      	bne.n	8001a46 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001a42:	f000 fbc1 	bl	80021c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40000800 	.word	0x40000800

08001a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a58:	b672      	cpsid	i
}
 8001a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <Error_Handler+0x8>

08001a60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <HAL_MspInit+0x48>)
 8001a68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a6c:	4a0e      	ldr	r2, [pc, #56]	@ (8001aa8 <HAL_MspInit+0x48>)
 8001a6e:	f043 0302 	orr.w	r3, r3, #2
 8001a72:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a76:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <HAL_MspInit+0x48>)
 8001a78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a84:	2200      	movs	r2, #0
 8001a86:	210f      	movs	r1, #15
 8001a88:	f06f 0001 	mvn.w	r0, #1
 8001a8c:	f000 fca4 	bl	80023d8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 5, 0);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2105      	movs	r1, #5
 8001a94:	2041      	movs	r0, #65	@ 0x41
 8001a96:	f000 fc9f 	bl	80023d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 8001a9a:	2041      	movs	r0, #65	@ 0x41
 8001a9c:	f000 fcb6 	bl	800240c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	58024400 	.word	0x58024400

08001aac <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b0be      	sub	sp, #248	@ 0xf8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac4:	f107 0318 	add.w	r3, r7, #24
 8001ac8:	22c8      	movs	r2, #200	@ 0xc8
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f009 fc65 	bl	800b39c <memset>
  if(hspi->Instance==SPI2)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a38      	ldr	r2, [pc, #224]	@ (8001bb8 <HAL_SPI_MspInit+0x10c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d169      	bne.n	8001bb0 <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001adc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aec:	f107 0318 	add.w	r3, r7, #24
 8001af0:	4618      	mov	r0, r3
 8001af2:	f001 ff8f 	bl	8003a14 <HAL_RCCEx_PeriphCLKConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001afc:	f7ff ffaa 	bl	8001a54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b00:	4b2e      	ldr	r3, [pc, #184]	@ (8001bbc <HAL_SPI_MspInit+0x110>)
 8001b02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b06:	4a2d      	ldr	r2, [pc, #180]	@ (8001bbc <HAL_SPI_MspInit+0x110>)
 8001b08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b0c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b10:	4b2a      	ldr	r3, [pc, #168]	@ (8001bbc <HAL_SPI_MspInit+0x110>)
 8001b12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b27      	ldr	r3, [pc, #156]	@ (8001bbc <HAL_SPI_MspInit+0x110>)
 8001b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b24:	4a25      	ldr	r2, [pc, #148]	@ (8001bbc <HAL_SPI_MspInit+0x110>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b2e:	4b23      	ldr	r3, [pc, #140]	@ (8001bbc <HAL_SPI_MspInit+0x110>)
 8001b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bbc <HAL_SPI_MspInit+0x110>)
 8001b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b42:	4a1e      	ldr	r2, [pc, #120]	@ (8001bbc <HAL_SPI_MspInit+0x110>)
 8001b44:	f043 0304 	orr.w	r3, r3, #4
 8001b48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bbc <HAL_SPI_MspInit+0x110>)
 8001b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_NSS_Pin;
 8001b5a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001b5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b74:	2305      	movs	r3, #5
 8001b76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b7e:	4619      	mov	r1, r3
 8001b80:	480f      	ldr	r0, [pc, #60]	@ (8001bc0 <HAL_SPI_MspInit+0x114>)
 8001b82:	f000 fc63 	bl	800244c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_3_Pin|PMOD_2_Pin;
 8001b86:	230c      	movs	r3, #12
 8001b88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b9e:	2305      	movs	r3, #5
 8001ba0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4806      	ldr	r0, [pc, #24]	@ (8001bc4 <HAL_SPI_MspInit+0x118>)
 8001bac:	f000 fc4e 	bl	800244c <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001bb0:	bf00      	nop
 8001bb2:	37f8      	adds	r7, #248	@ 0xf8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40003800 	.word	0x40003800
 8001bbc:	58024400 	.word	0x58024400
 8001bc0:	58020000 	.word	0x58020000
 8001bc4:	58020800 	.word	0x58020800

08001bc8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	@ 0x28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1a      	ldr	r2, [pc, #104]	@ (8001c50 <HAL_TIM_PWM_MspInit+0x88>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d12d      	bne.n	8001c46 <HAL_TIM_PWM_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001bea:	4b1a      	ldr	r3, [pc, #104]	@ (8001c54 <HAL_TIM_PWM_MspInit+0x8c>)
 8001bec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bf0:	4a18      	ldr	r2, [pc, #96]	@ (8001c54 <HAL_TIM_PWM_MspInit+0x8c>)
 8001bf2:	f043 0302 	orr.w	r3, r3, #2
 8001bf6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bfa:	4b16      	ldr	r3, [pc, #88]	@ (8001c54 <HAL_TIM_PWM_MspInit+0x8c>)
 8001bfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001c08:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <HAL_TIM_PWM_MspInit+0x8c>)
 8001c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c0e:	4a11      	ldr	r2, [pc, #68]	@ (8001c54 <HAL_TIM_PWM_MspInit+0x8c>)
 8001c10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c18:	4b0e      	ldr	r3, [pc, #56]	@ (8001c54 <HAL_TIM_PWM_MspInit+0x8c>)
 8001c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001c26:	2340      	movs	r3, #64	@ 0x40
 8001c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c36:	2303      	movs	r3, #3
 8001c38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4805      	ldr	r0, [pc, #20]	@ (8001c58 <HAL_TIM_PWM_MspInit+0x90>)
 8001c42:	f000 fc03 	bl	800244c <HAL_GPIO_Init>

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 8001c46:	bf00      	nop
 8001c48:	3728      	adds	r7, #40	@ 0x28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40010400 	.word	0x40010400
 8001c54:	58024400 	.word	0x58024400
 8001c58:	58022400 	.word	0x58022400

08001c5c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0b      	ldr	r2, [pc, #44]	@ (8001c98 <HAL_TIM_Base_MspInit+0x3c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d10e      	bne.n	8001c8c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c9c <HAL_TIM_Base_MspInit+0x40>)
 8001c70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c74:	4a09      	ldr	r2, [pc, #36]	@ (8001c9c <HAL_TIM_Base_MspInit+0x40>)
 8001c76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c7a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c7e:	4b07      	ldr	r3, [pc, #28]	@ (8001c9c <HAL_TIM_Base_MspInit+0x40>)
 8001c80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM13_MspInit 1 */

  }

}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	40001c00 	.word	0x40001c00
 8001c9c:	58024400 	.word	0x58024400

08001ca0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	@ 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a35      	ldr	r2, [pc, #212]	@ (8001d94 <HAL_TIM_MspPostInit+0xf4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d13e      	bne.n	8001d40 <HAL_TIM_MspPostInit+0xa0>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc2:	4b35      	ldr	r3, [pc, #212]	@ (8001d98 <HAL_TIM_MspPostInit+0xf8>)
 8001cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cc8:	4a33      	ldr	r2, [pc, #204]	@ (8001d98 <HAL_TIM_MspPostInit+0xf8>)
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cd2:	4b31      	ldr	r3, [pc, #196]	@ (8001d98 <HAL_TIM_MspPostInit+0xf8>)
 8001cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8001d98 <HAL_TIM_MspPostInit+0xf8>)
 8001ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ce6:	4a2c      	ldr	r2, [pc, #176]	@ (8001d98 <HAL_TIM_MspPostInit+0xf8>)
 8001ce8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cf0:	4b29      	ldr	r3, [pc, #164]	@ (8001d98 <HAL_TIM_MspPostInit+0xf8>)
 8001cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PJ7     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cfe:	2340      	movs	r3, #64	@ 0x40
 8001d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	4820      	ldr	r0, [pc, #128]	@ (8001d9c <HAL_TIM_MspPostInit+0xfc>)
 8001d1a:	f000 fb97 	bl	800244c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001d1e:	2380      	movs	r3, #128	@ 0x80
 8001d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	4819      	ldr	r0, [pc, #100]	@ (8001da0 <HAL_TIM_MspPostInit+0x100>)
 8001d3a:	f000 fb87 	bl	800244c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM13_MspPostInit 1 */

    /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8001d3e:	e024      	b.n	8001d8a <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM13)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a17      	ldr	r2, [pc, #92]	@ (8001da4 <HAL_TIM_MspPostInit+0x104>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d11f      	bne.n	8001d8a <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d4a:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <HAL_TIM_MspPostInit+0xf8>)
 8001d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d50:	4a11      	ldr	r2, [pc, #68]	@ (8001d98 <HAL_TIM_MspPostInit+0xf8>)
 8001d52:	f043 0320 	orr.w	r3, r3, #32
 8001d56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <HAL_TIM_MspPostInit+0xf8>)
 8001d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d60:	f003 0320 	and.w	r3, r3, #32
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 8001d68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001d7a:	2309      	movs	r3, #9
 8001d7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	4619      	mov	r1, r3
 8001d84:	4808      	ldr	r0, [pc, #32]	@ (8001da8 <HAL_TIM_MspPostInit+0x108>)
 8001d86:	f000 fb61 	bl	800244c <HAL_GPIO_Init>
}
 8001d8a:	bf00      	nop
 8001d8c:	3728      	adds	r7, #40	@ 0x28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40010400 	.word	0x40010400
 8001d98:	58024400 	.word	0x58024400
 8001d9c:	58020800 	.word	0x58020800
 8001da0:	58022400 	.word	0x58022400
 8001da4:	40001c00 	.word	0x40001c00
 8001da8:	58021400 	.word	0x58021400

08001dac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b0bc      	sub	sp, #240	@ 0xf0
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dc4:	f107 0310 	add.w	r3, r7, #16
 8001dc8:	22c8      	movs	r2, #200	@ 0xc8
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f009 fae5 	bl	800b39c <memset>
  if(huart->Instance==USART1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a27      	ldr	r2, [pc, #156]	@ (8001e74 <HAL_UART_MspInit+0xc8>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d146      	bne.n	8001e6a <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ddc:	f04f 0201 	mov.w	r2, #1
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dee:	f107 0310 	add.w	r3, r7, #16
 8001df2:	4618      	mov	r0, r3
 8001df4:	f001 fe0e 	bl	8003a14 <HAL_RCCEx_PeriphCLKConfig>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001dfe:	f7ff fe29 	bl	8001a54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e02:	4b1d      	ldr	r3, [pc, #116]	@ (8001e78 <HAL_UART_MspInit+0xcc>)
 8001e04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e08:	4a1b      	ldr	r2, [pc, #108]	@ (8001e78 <HAL_UART_MspInit+0xcc>)
 8001e0a:	f043 0310 	orr.w	r3, r3, #16
 8001e0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e12:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <HAL_UART_MspInit+0xcc>)
 8001e14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e18:	f003 0310 	and.w	r3, r3, #16
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e20:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <HAL_UART_MspInit+0xcc>)
 8001e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e26:	4a14      	ldr	r2, [pc, #80]	@ (8001e78 <HAL_UART_MspInit+0xcc>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e30:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <HAL_UART_MspInit+0xcc>)
 8001e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001e3e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e58:	2307      	movs	r3, #7
 8001e5a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001e62:	4619      	mov	r1, r3
 8001e64:	4805      	ldr	r0, [pc, #20]	@ (8001e7c <HAL_UART_MspInit+0xd0>)
 8001e66:	f000 faf1 	bl	800244c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001e6a:	bf00      	nop
 8001e6c:	37f0      	adds	r7, #240	@ 0xf0
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40011000 	.word	0x40011000
 8001e78:	58024400 	.word	0x58024400
 8001e7c:	58020000 	.word	0x58020000

08001e80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b090      	sub	sp, #64	@ 0x40
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b0f      	cmp	r3, #15
 8001e8c:	d827      	bhi.n	8001ede <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	201e      	movs	r0, #30
 8001e94:	f000 faa0 	bl	80023d8 <HAL_NVIC_SetPriority>

     /* Enable the TIM4 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e98:	201e      	movs	r0, #30
 8001e9a:	f000 fab7 	bl	800240c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001e9e:	4a29      	ldr	r2, [pc, #164]	@ (8001f44 <HAL_InitTick+0xc4>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001ea4:	4b28      	ldr	r3, [pc, #160]	@ (8001f48 <HAL_InitTick+0xc8>)
 8001ea6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eaa:	4a27      	ldr	r2, [pc, #156]	@ (8001f48 <HAL_InitTick+0xc8>)
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001eb4:	4b24      	ldr	r3, [pc, #144]	@ (8001f48 <HAL_InitTick+0xc8>)
 8001eb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ec2:	f107 0210 	add.w	r2, r7, #16
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f001 fd5f 	bl	8003990 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d106      	bne.n	8001eea <HAL_InitTick+0x6a>
 8001edc:	e001      	b.n	8001ee2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e02b      	b.n	8001f3a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ee2:	f001 fd29 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 8001ee6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001ee8:	e004      	b.n	8001ef4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001eea:	f001 fd25 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ef6:	4a15      	ldr	r2, [pc, #84]	@ (8001f4c <HAL_InitTick+0xcc>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	0c9b      	lsrs	r3, r3, #18
 8001efe:	3b01      	subs	r3, #1
 8001f00:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001f02:	4b13      	ldr	r3, [pc, #76]	@ (8001f50 <HAL_InitTick+0xd0>)
 8001f04:	4a13      	ldr	r2, [pc, #76]	@ (8001f54 <HAL_InitTick+0xd4>)
 8001f06:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001f08:	4b11      	ldr	r3, [pc, #68]	@ (8001f50 <HAL_InitTick+0xd0>)
 8001f0a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f0e:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001f10:	4a0f      	ldr	r2, [pc, #60]	@ (8001f50 <HAL_InitTick+0xd0>)
 8001f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f14:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001f16:	4b0e      	ldr	r3, [pc, #56]	@ (8001f50 <HAL_InitTick+0xd0>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f50 <HAL_InitTick+0xd0>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001f22:	480b      	ldr	r0, [pc, #44]	@ (8001f50 <HAL_InitTick+0xd0>)
 8001f24:	f004 fb17 	bl	8006556 <HAL_TIM_Base_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d104      	bne.n	8001f38 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001f2e:	4808      	ldr	r0, [pc, #32]	@ (8001f50 <HAL_InitTick+0xd0>)
 8001f30:	f004 fb68 	bl	8006604 <HAL_TIM_Base_Start_IT>
 8001f34:	4603      	mov	r3, r0
 8001f36:	e000      	b.n	8001f3a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3740      	adds	r7, #64	@ 0x40
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	24000008 	.word	0x24000008
 8001f48:	58024400 	.word	0x58024400
 8001f4c:	431bde83 	.word	0x431bde83
 8001f50:	24000340 	.word	0x24000340
 8001f54:	40000800 	.word	0x40000800

08001f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <NMI_Handler+0x4>

08001f60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <HardFault_Handler+0x4>

08001f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <MemManage_Handler+0x4>

08001f70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <BusFault_Handler+0x4>

08001f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <UsageFault_Handler+0x4>

08001f80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8001f92:	2080      	movs	r0, #128	@ 0x80
 8001f94:	f000 fc0a 	bl	80027ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fa0:	4802      	ldr	r0, [pc, #8]	@ (8001fac <TIM4_IRQHandler+0x10>)
 8001fa2:	f004 fbfe 	bl	80067a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	24000340 	.word	0x24000340

08001fb0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	e00a      	b.n	8001fd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fc2:	f3af 8000 	nop.w
 8001fc6:	4601      	mov	r1, r0
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	60ba      	str	r2, [r7, #8]
 8001fce:	b2ca      	uxtb	r2, r1
 8001fd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	dbf0      	blt.n	8001fc2 <_read+0x12>
  }

  return len;
 8001fe0:	687b      	ldr	r3, [r7, #4]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	e009      	b.n	8002010 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60ba      	str	r2, [r7, #8]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fbe7 	bl	80007d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3301      	adds	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	429a      	cmp	r2, r3
 8002016:	dbf1      	blt.n	8001ffc <_write+0x12>
  }
  return len;
 8002018:	687b      	ldr	r3, [r7, #4]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <_close>:

int _close(int file)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800204a:	605a      	str	r2, [r3, #4]
  return 0;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <_isatty>:

int _isatty(int file)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002062:	2301      	movs	r3, #1
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002094:	4a14      	ldr	r2, [pc, #80]	@ (80020e8 <_sbrk+0x5c>)
 8002096:	4b15      	ldr	r3, [pc, #84]	@ (80020ec <_sbrk+0x60>)
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a0:	4b13      	ldr	r3, [pc, #76]	@ (80020f0 <_sbrk+0x64>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a8:	4b11      	ldr	r3, [pc, #68]	@ (80020f0 <_sbrk+0x64>)
 80020aa:	4a12      	ldr	r2, [pc, #72]	@ (80020f4 <_sbrk+0x68>)
 80020ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ae:	4b10      	ldr	r3, [pc, #64]	@ (80020f0 <_sbrk+0x64>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d207      	bcs.n	80020cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020bc:	f009 f9bc 	bl	800b438 <__errno>
 80020c0:	4603      	mov	r3, r0
 80020c2:	220c      	movs	r2, #12
 80020c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ca:	e009      	b.n	80020e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020cc:	4b08      	ldr	r3, [pc, #32]	@ (80020f0 <_sbrk+0x64>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020d2:	4b07      	ldr	r3, [pc, #28]	@ (80020f0 <_sbrk+0x64>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	4a05      	ldr	r2, [pc, #20]	@ (80020f0 <_sbrk+0x64>)
 80020dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020de:	68fb      	ldr	r3, [r7, #12]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	24080000 	.word	0x24080000
 80020ec:	00000400 	.word	0x00000400
 80020f0:	2400038c 	.word	0x2400038c
 80020f4:	24001228 	.word	0x24001228

080020f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80020f8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002134 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80020fc:	f7fe fcc4 	bl	8000a88 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002100:	f7fe fc14 	bl	800092c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002104:	480c      	ldr	r0, [pc, #48]	@ (8002138 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002106:	490d      	ldr	r1, [pc, #52]	@ (800213c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002108:	4a0d      	ldr	r2, [pc, #52]	@ (8002140 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800210c:	e002      	b.n	8002114 <LoopCopyDataInit>

0800210e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002112:	3304      	adds	r3, #4

08002114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002118:	d3f9      	bcc.n	800210e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211a:	4a0a      	ldr	r2, [pc, #40]	@ (8002144 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800211c:	4c0a      	ldr	r4, [pc, #40]	@ (8002148 <LoopFillZerobss+0x22>)
  movs r3, #0
 800211e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002120:	e001      	b.n	8002126 <LoopFillZerobss>

08002122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002124:	3204      	adds	r2, #4

08002126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002128:	d3fb      	bcc.n	8002122 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800212a:	f009 f98b 	bl	800b444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800212e:	f7ff f997 	bl	8001460 <main>
  bx  lr
 8002132:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002134:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002138:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800213c:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8002140:	0800dff4 	.word	0x0800dff4
  ldr r2, =_sbss
 8002144:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8002148:	24001224 	.word	0x24001224

0800214c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800214c:	e7fe      	b.n	800214c <ADC3_IRQHandler>
	...

08002150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002156:	2003      	movs	r0, #3
 8002158:	f000 f933 	bl	80023c2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800215c:	f001 fa42 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8002160:	4602      	mov	r2, r0
 8002162:	4b15      	ldr	r3, [pc, #84]	@ (80021b8 <HAL_Init+0x68>)
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	0a1b      	lsrs	r3, r3, #8
 8002168:	f003 030f 	and.w	r3, r3, #15
 800216c:	4913      	ldr	r1, [pc, #76]	@ (80021bc <HAL_Init+0x6c>)
 800216e:	5ccb      	ldrb	r3, [r1, r3]
 8002170:	f003 031f 	and.w	r3, r3, #31
 8002174:	fa22 f303 	lsr.w	r3, r2, r3
 8002178:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800217a:	4b0f      	ldr	r3, [pc, #60]	@ (80021b8 <HAL_Init+0x68>)
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	4a0e      	ldr	r2, [pc, #56]	@ (80021bc <HAL_Init+0x6c>)
 8002184:	5cd3      	ldrb	r3, [r2, r3]
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
 8002190:	4a0b      	ldr	r2, [pc, #44]	@ (80021c0 <HAL_Init+0x70>)
 8002192:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002194:	4a0b      	ldr	r2, [pc, #44]	@ (80021c4 <HAL_Init+0x74>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800219a:	200f      	movs	r0, #15
 800219c:	f7ff fe70 	bl	8001e80 <HAL_InitTick>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e002      	b.n	80021b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80021aa:	f7ff fc59 	bl	8001a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	58024400 	.word	0x58024400
 80021bc:	0800bf74 	.word	0x0800bf74
 80021c0:	24000004 	.word	0x24000004
 80021c4:	24000000 	.word	0x24000000

080021c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021cc:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <HAL_IncTick+0x20>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <HAL_IncTick+0x24>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4413      	add	r3, r2
 80021d8:	4a04      	ldr	r2, [pc, #16]	@ (80021ec <HAL_IncTick+0x24>)
 80021da:	6013      	str	r3, [r2, #0]
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	2400000c 	.word	0x2400000c
 80021ec:	24000390 	.word	0x24000390

080021f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return uwTick;
 80021f4:	4b03      	ldr	r3, [pc, #12]	@ (8002204 <HAL_GetTick+0x14>)
 80021f6:	681b      	ldr	r3, [r3, #0]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	24000390 	.word	0x24000390

08002208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002210:	f7ff ffee 	bl	80021f0 <HAL_GetTick>
 8002214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002220:	d005      	beq.n	800222e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002222:	4b0a      	ldr	r3, [pc, #40]	@ (800224c <HAL_Delay+0x44>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4413      	add	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800222e:	bf00      	nop
 8002230:	f7ff ffde 	bl	80021f0 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	429a      	cmp	r2, r3
 800223e:	d8f7      	bhi.n	8002230 <HAL_Delay+0x28>
  {
  }
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	2400000c 	.word	0x2400000c

08002250 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002254:	4b03      	ldr	r3, [pc, #12]	@ (8002264 <HAL_GetREVID+0x14>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	0c1b      	lsrs	r3, r3, #16
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	5c001000 	.word	0x5c001000

08002268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002278:	4b0b      	ldr	r3, [pc, #44]	@ (80022a8 <__NVIC_SetPriorityGrouping+0x40>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002284:	4013      	ands	r3, r2
 8002286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002290:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 8002292:	4313      	orrs	r3, r2
 8002294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002296:	4a04      	ldr	r2, [pc, #16]	@ (80022a8 <__NVIC_SetPriorityGrouping+0x40>)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	60d3      	str	r3, [r2, #12]
}
 800229c:	bf00      	nop
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000ed00 	.word	0xe000ed00
 80022ac:	05fa0000 	.word	0x05fa0000

080022b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b4:	4b04      	ldr	r3, [pc, #16]	@ (80022c8 <__NVIC_GetPriorityGrouping+0x18>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	f003 0307 	and.w	r3, r3, #7
}
 80022be:	4618      	mov	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	db0b      	blt.n	80022f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022de:	88fb      	ldrh	r3, [r7, #6]
 80022e0:	f003 021f 	and.w	r2, r3, #31
 80022e4:	4907      	ldr	r1, [pc, #28]	@ (8002304 <__NVIC_EnableIRQ+0x38>)
 80022e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	2001      	movs	r0, #1
 80022ee:	fa00 f202 	lsl.w	r2, r0, r2
 80022f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000e100 	.word	0xe000e100

08002308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002314:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002318:	2b00      	cmp	r3, #0
 800231a:	db0a      	blt.n	8002332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	b2da      	uxtb	r2, r3
 8002320:	490c      	ldr	r1, [pc, #48]	@ (8002354 <__NVIC_SetPriority+0x4c>)
 8002322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002326:	0112      	lsls	r2, r2, #4
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	440b      	add	r3, r1
 800232c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002330:	e00a      	b.n	8002348 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4908      	ldr	r1, [pc, #32]	@ (8002358 <__NVIC_SetPriority+0x50>)
 8002338:	88fb      	ldrh	r3, [r7, #6]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	3b04      	subs	r3, #4
 8002340:	0112      	lsls	r2, r2, #4
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	440b      	add	r3, r1
 8002346:	761a      	strb	r2, [r3, #24]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000e100 	.word	0xe000e100
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	@ 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f1c3 0307 	rsb	r3, r3, #7
 8002376:	2b04      	cmp	r3, #4
 8002378:	bf28      	it	cs
 800237a:	2304      	movcs	r3, #4
 800237c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3304      	adds	r3, #4
 8002382:	2b06      	cmp	r3, #6
 8002384:	d902      	bls.n	800238c <NVIC_EncodePriority+0x30>
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3b03      	subs	r3, #3
 800238a:	e000      	b.n	800238e <NVIC_EncodePriority+0x32>
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	f04f 32ff 	mov.w	r2, #4294967295
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43da      	mvns	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	401a      	ands	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	43d9      	mvns	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	4313      	orrs	r3, r2
         );
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3724      	adds	r7, #36	@ 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ff4c 	bl	8002268 <__NVIC_SetPriorityGrouping>
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023e6:	f7ff ff63 	bl	80022b0 <__NVIC_GetPriorityGrouping>
 80023ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	68b9      	ldr	r1, [r7, #8]
 80023f0:	6978      	ldr	r0, [r7, #20]
 80023f2:	f7ff ffb3 	bl	800235c <NVIC_EncodePriority>
 80023f6:	4602      	mov	r2, r0
 80023f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023fc:	4611      	mov	r1, r2
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff ff82 	bl	8002308 <__NVIC_SetPriority>
}
 8002404:	bf00      	nop
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff ff56 	bl	80022cc <__NVIC_EnableIRQ>
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 800242c:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <HAL_GetCurrentCPUID+0x20>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002434:	2b70      	cmp	r3, #112	@ 0x70
 8002436:	d101      	bne.n	800243c <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8002438:	2303      	movs	r3, #3
 800243a:	e000      	b.n	800243e <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 800243c:	2301      	movs	r3, #1
  }
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	@ 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800245a:	4b89      	ldr	r3, [pc, #548]	@ (8002680 <HAL_GPIO_Init+0x234>)
 800245c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800245e:	e194      	b.n	800278a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	2101      	movs	r1, #1
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa01 f303 	lsl.w	r3, r1, r3
 800246c:	4013      	ands	r3, r2
 800246e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 8186 	beq.w	8002784 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b01      	cmp	r3, #1
 8002482:	d005      	beq.n	8002490 <HAL_GPIO_Init+0x44>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d130      	bne.n	80024f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	2203      	movs	r2, #3
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024c6:	2201      	movs	r2, #1
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	091b      	lsrs	r3, r3, #4
 80024dc:	f003 0201 	and.w	r2, r3, #1
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d017      	beq.n	800252e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	2203      	movs	r2, #3
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d123      	bne.n	8002582 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	08da      	lsrs	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3208      	adds	r2, #8
 8002542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	220f      	movs	r2, #15
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4013      	ands	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	08da      	lsrs	r2, r3, #3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3208      	adds	r2, #8
 800257c:	69b9      	ldr	r1, [r7, #24]
 800257e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	2203      	movs	r2, #3
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0203 	and.w	r2, r3, #3
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80e0 	beq.w	8002784 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002684 <HAL_GPIO_Init+0x238>)
 80025c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80025ca:	4a2e      	ldr	r2, [pc, #184]	@ (8002684 <HAL_GPIO_Init+0x238>)
 80025cc:	f043 0302 	orr.w	r3, r3, #2
 80025d0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80025d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002684 <HAL_GPIO_Init+0x238>)
 80025d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025e2:	4a29      	ldr	r2, [pc, #164]	@ (8002688 <HAL_GPIO_Init+0x23c>)
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	089b      	lsrs	r3, r3, #2
 80025e8:	3302      	adds	r3, #2
 80025ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	220f      	movs	r2, #15
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a20      	ldr	r2, [pc, #128]	@ (800268c <HAL_GPIO_Init+0x240>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d052      	beq.n	80026b4 <HAL_GPIO_Init+0x268>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a1f      	ldr	r2, [pc, #124]	@ (8002690 <HAL_GPIO_Init+0x244>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d031      	beq.n	800267a <HAL_GPIO_Init+0x22e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a1e      	ldr	r2, [pc, #120]	@ (8002694 <HAL_GPIO_Init+0x248>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d02b      	beq.n	8002676 <HAL_GPIO_Init+0x22a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a1d      	ldr	r2, [pc, #116]	@ (8002698 <HAL_GPIO_Init+0x24c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d025      	beq.n	8002672 <HAL_GPIO_Init+0x226>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a1c      	ldr	r2, [pc, #112]	@ (800269c <HAL_GPIO_Init+0x250>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d01f      	beq.n	800266e <HAL_GPIO_Init+0x222>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a1b      	ldr	r2, [pc, #108]	@ (80026a0 <HAL_GPIO_Init+0x254>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d019      	beq.n	800266a <HAL_GPIO_Init+0x21e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a1a      	ldr	r2, [pc, #104]	@ (80026a4 <HAL_GPIO_Init+0x258>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d013      	beq.n	8002666 <HAL_GPIO_Init+0x21a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a19      	ldr	r2, [pc, #100]	@ (80026a8 <HAL_GPIO_Init+0x25c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00d      	beq.n	8002662 <HAL_GPIO_Init+0x216>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a18      	ldr	r2, [pc, #96]	@ (80026ac <HAL_GPIO_Init+0x260>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d007      	beq.n	800265e <HAL_GPIO_Init+0x212>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a17      	ldr	r2, [pc, #92]	@ (80026b0 <HAL_GPIO_Init+0x264>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d101      	bne.n	800265a <HAL_GPIO_Init+0x20e>
 8002656:	2309      	movs	r3, #9
 8002658:	e02d      	b.n	80026b6 <HAL_GPIO_Init+0x26a>
 800265a:	230a      	movs	r3, #10
 800265c:	e02b      	b.n	80026b6 <HAL_GPIO_Init+0x26a>
 800265e:	2308      	movs	r3, #8
 8002660:	e029      	b.n	80026b6 <HAL_GPIO_Init+0x26a>
 8002662:	2307      	movs	r3, #7
 8002664:	e027      	b.n	80026b6 <HAL_GPIO_Init+0x26a>
 8002666:	2306      	movs	r3, #6
 8002668:	e025      	b.n	80026b6 <HAL_GPIO_Init+0x26a>
 800266a:	2305      	movs	r3, #5
 800266c:	e023      	b.n	80026b6 <HAL_GPIO_Init+0x26a>
 800266e:	2304      	movs	r3, #4
 8002670:	e021      	b.n	80026b6 <HAL_GPIO_Init+0x26a>
 8002672:	2303      	movs	r3, #3
 8002674:	e01f      	b.n	80026b6 <HAL_GPIO_Init+0x26a>
 8002676:	2302      	movs	r3, #2
 8002678:	e01d      	b.n	80026b6 <HAL_GPIO_Init+0x26a>
 800267a:	2301      	movs	r3, #1
 800267c:	e01b      	b.n	80026b6 <HAL_GPIO_Init+0x26a>
 800267e:	bf00      	nop
 8002680:	58000080 	.word	0x58000080
 8002684:	58024400 	.word	0x58024400
 8002688:	58000400 	.word	0x58000400
 800268c:	58020000 	.word	0x58020000
 8002690:	58020400 	.word	0x58020400
 8002694:	58020800 	.word	0x58020800
 8002698:	58020c00 	.word	0x58020c00
 800269c:	58021000 	.word	0x58021000
 80026a0:	58021400 	.word	0x58021400
 80026a4:	58021800 	.word	0x58021800
 80026a8:	58021c00 	.word	0x58021c00
 80026ac:	58022000 	.word	0x58022000
 80026b0:	58022400 	.word	0x58022400
 80026b4:	2300      	movs	r3, #0
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	f002 0203 	and.w	r2, r2, #3
 80026bc:	0092      	lsls	r2, r2, #2
 80026be:	4093      	lsls	r3, r2
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026c6:	4938      	ldr	r1, [pc, #224]	@ (80027a8 <HAL_GPIO_Init+0x35c>)
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	089b      	lsrs	r3, r3, #2
 80026cc:	3302      	adds	r3, #2
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80026fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002728:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	3301      	adds	r3, #1
 8002788:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	f47f ae63 	bne.w	8002460 <HAL_GPIO_Init+0x14>
  }
}
 800279a:	bf00      	nop
 800279c:	bf00      	nop
 800279e:	3724      	adds	r7, #36	@ 0x24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	58000400 	.word	0x58000400

080027ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80027b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fe0e 	bl	80013f4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80027e8:	4a08      	ldr	r2, [pc, #32]	@ (800280c <HAL_HSEM_FastTake+0x2c>)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3320      	adds	r3, #32
 80027ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f2:	4a07      	ldr	r2, [pc, #28]	@ (8002810 <HAL_HSEM_FastTake+0x30>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d101      	bne.n	80027fc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	e000      	b.n	80027fe <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
}
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	58026400 	.word	0x58026400
 8002810:	80000300 	.word	0x80000300

08002814 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800281e:	4906      	ldr	r1, [pc, #24]	@ (8002838 <HAL_HSEM_Release+0x24>)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	58026400 	.word	0x58026400

0800283c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002844:	4b29      	ldr	r3, [pc, #164]	@ (80028ec <HAL_PWREx_ConfigSupply+0xb0>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	2b06      	cmp	r3, #6
 800284e:	d00a      	beq.n	8002866 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002850:	4b26      	ldr	r3, [pc, #152]	@ (80028ec <HAL_PWREx_ConfigSupply+0xb0>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	429a      	cmp	r2, r3
 800285c:	d001      	beq.n	8002862 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e040      	b.n	80028e4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	e03e      	b.n	80028e4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002866:	4b21      	ldr	r3, [pc, #132]	@ (80028ec <HAL_PWREx_ConfigSupply+0xb0>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800286e:	491f      	ldr	r1, [pc, #124]	@ (80028ec <HAL_PWREx_ConfigSupply+0xb0>)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4313      	orrs	r3, r2
 8002874:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002876:	f7ff fcbb 	bl	80021f0 <HAL_GetTick>
 800287a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800287c:	e009      	b.n	8002892 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800287e:	f7ff fcb7 	bl	80021f0 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800288c:	d901      	bls.n	8002892 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e028      	b.n	80028e4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002892:	4b16      	ldr	r3, [pc, #88]	@ (80028ec <HAL_PWREx_ConfigSupply+0xb0>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800289a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800289e:	d1ee      	bne.n	800287e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b1e      	cmp	r3, #30
 80028a4:	d008      	beq.n	80028b8 <HAL_PWREx_ConfigSupply+0x7c>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80028aa:	d005      	beq.n	80028b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b1d      	cmp	r3, #29
 80028b0:	d002      	beq.n	80028b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b2d      	cmp	r3, #45	@ 0x2d
 80028b6:	d114      	bne.n	80028e2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80028b8:	f7ff fc9a 	bl	80021f0 <HAL_GetTick>
 80028bc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80028be:	e009      	b.n	80028d4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028c0:	f7ff fc96 	bl	80021f0 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028ce:	d901      	bls.n	80028d4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e007      	b.n	80028e4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80028d4:	4b05      	ldr	r3, [pc, #20]	@ (80028ec <HAL_PWREx_ConfigSupply+0xb0>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028e0:	d1ee      	bne.n	80028c0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	58024800 	.word	0x58024800

080028f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08c      	sub	sp, #48	@ 0x30
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d102      	bne.n	8002904 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	f000 bc48 	b.w	8003194 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 8088 	beq.w	8002a22 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002912:	4b99      	ldr	r3, [pc, #612]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800291a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800291c:	4b96      	ldr	r3, [pc, #600]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 800291e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002920:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002924:	2b10      	cmp	r3, #16
 8002926:	d007      	beq.n	8002938 <HAL_RCC_OscConfig+0x48>
 8002928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800292a:	2b18      	cmp	r3, #24
 800292c:	d111      	bne.n	8002952 <HAL_RCC_OscConfig+0x62>
 800292e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d10c      	bne.n	8002952 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002938:	4b8f      	ldr	r3, [pc, #572]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d06d      	beq.n	8002a20 <HAL_RCC_OscConfig+0x130>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d169      	bne.n	8002a20 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	f000 bc21 	b.w	8003194 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800295a:	d106      	bne.n	800296a <HAL_RCC_OscConfig+0x7a>
 800295c:	4b86      	ldr	r3, [pc, #536]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a85      	ldr	r2, [pc, #532]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002962:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	e02e      	b.n	80029c8 <HAL_RCC_OscConfig+0xd8>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10c      	bne.n	800298c <HAL_RCC_OscConfig+0x9c>
 8002972:	4b81      	ldr	r3, [pc, #516]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a80      	ldr	r2, [pc, #512]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002978:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	4b7e      	ldr	r3, [pc, #504]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a7d      	ldr	r2, [pc, #500]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002984:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	e01d      	b.n	80029c8 <HAL_RCC_OscConfig+0xd8>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002994:	d10c      	bne.n	80029b0 <HAL_RCC_OscConfig+0xc0>
 8002996:	4b78      	ldr	r3, [pc, #480]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a77      	ldr	r2, [pc, #476]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 800299c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	4b75      	ldr	r3, [pc, #468]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a74      	ldr	r2, [pc, #464]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 80029a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	e00b      	b.n	80029c8 <HAL_RCC_OscConfig+0xd8>
 80029b0:	4b71      	ldr	r3, [pc, #452]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a70      	ldr	r2, [pc, #448]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 80029b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029ba:	6013      	str	r3, [r2, #0]
 80029bc:	4b6e      	ldr	r3, [pc, #440]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a6d      	ldr	r2, [pc, #436]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 80029c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d013      	beq.n	80029f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d0:	f7ff fc0e 	bl	80021f0 <HAL_GetTick>
 80029d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d8:	f7ff fc0a 	bl	80021f0 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b64      	cmp	r3, #100	@ 0x64
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e3d4      	b.n	8003194 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029ea:	4b63      	ldr	r3, [pc, #396]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0xe8>
 80029f6:	e014      	b.n	8002a22 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f8:	f7ff fbfa 	bl	80021f0 <HAL_GetTick>
 80029fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a00:	f7ff fbf6 	bl	80021f0 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b64      	cmp	r3, #100	@ 0x64
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e3c0      	b.n	8003194 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a12:	4b59      	ldr	r3, [pc, #356]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x110>
 8002a1e:	e000      	b.n	8002a22 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 80ca 	beq.w	8002bc4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a30:	4b51      	ldr	r3, [pc, #324]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a38:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a3a:	4b4f      	ldr	r3, [pc, #316]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d007      	beq.n	8002a56 <HAL_RCC_OscConfig+0x166>
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	2b18      	cmp	r3, #24
 8002a4a:	d156      	bne.n	8002afa <HAL_RCC_OscConfig+0x20a>
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d151      	bne.n	8002afa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a56:	4b48      	ldr	r3, [pc, #288]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_RCC_OscConfig+0x17e>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e392      	b.n	8003194 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a6e:	4b42      	ldr	r3, [pc, #264]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 0219 	bic.w	r2, r3, #25
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	493f      	ldr	r1, [pc, #252]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7ff fbb6 	bl	80021f0 <HAL_GetTick>
 8002a84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a88:	f7ff fbb2 	bl	80021f0 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e37c      	b.n	8003194 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a9a:	4b37      	ldr	r3, [pc, #220]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa6:	f7ff fbd3 	bl	8002250 <HAL_GetREVID>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d817      	bhi.n	8002ae4 <HAL_RCC_OscConfig+0x1f4>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	2b40      	cmp	r3, #64	@ 0x40
 8002aba:	d108      	bne.n	8002ace <HAL_RCC_OscConfig+0x1de>
 8002abc:	4b2e      	ldr	r3, [pc, #184]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002ac4:	4a2c      	ldr	r2, [pc, #176]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aca:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002acc:	e07a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ace:	4b2a      	ldr	r3, [pc, #168]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	031b      	lsls	r3, r3, #12
 8002adc:	4926      	ldr	r1, [pc, #152]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ae2:	e06f      	b.n	8002bc4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae4:	4b24      	ldr	r3, [pc, #144]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	061b      	lsls	r3, r3, #24
 8002af2:	4921      	ldr	r1, [pc, #132]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002af8:	e064      	b.n	8002bc4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d047      	beq.n	8002b92 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b02:	4b1d      	ldr	r3, [pc, #116]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 0219 	bic.w	r2, r3, #25
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	491a      	ldr	r1, [pc, #104]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7ff fb6c 	bl	80021f0 <HAL_GetTick>
 8002b18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b1c:	f7ff fb68 	bl	80021f0 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e332      	b.n	8003194 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b2e:	4b12      	ldr	r3, [pc, #72]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3a:	f7ff fb89 	bl	8002250 <HAL_GetREVID>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d819      	bhi.n	8002b7c <HAL_RCC_OscConfig+0x28c>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	2b40      	cmp	r3, #64	@ 0x40
 8002b4e:	d108      	bne.n	8002b62 <HAL_RCC_OscConfig+0x272>
 8002b50:	4b09      	ldr	r3, [pc, #36]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002b58:	4a07      	ldr	r2, [pc, #28]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002b5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b5e:	6053      	str	r3, [r2, #4]
 8002b60:	e030      	b.n	8002bc4 <HAL_RCC_OscConfig+0x2d4>
 8002b62:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	031b      	lsls	r3, r3, #12
 8002b70:	4901      	ldr	r1, [pc, #4]	@ (8002b78 <HAL_RCC_OscConfig+0x288>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	604b      	str	r3, [r1, #4]
 8002b76:	e025      	b.n	8002bc4 <HAL_RCC_OscConfig+0x2d4>
 8002b78:	58024400 	.word	0x58024400
 8002b7c:	4b9a      	ldr	r3, [pc, #616]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	061b      	lsls	r3, r3, #24
 8002b8a:	4997      	ldr	r1, [pc, #604]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	604b      	str	r3, [r1, #4]
 8002b90:	e018      	b.n	8002bc4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b92:	4b95      	ldr	r3, [pc, #596]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a94      	ldr	r2, [pc, #592]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9e:	f7ff fb27 	bl	80021f0 <HAL_GetTick>
 8002ba2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba6:	f7ff fb23 	bl	80021f0 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e2ed      	b.n	8003194 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bb8:	4b8b      	ldr	r3, [pc, #556]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1f0      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80a9 	beq.w	8002d24 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bd2:	4b85      	ldr	r3, [pc, #532]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bda:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bdc:	4b82      	ldr	r3, [pc, #520]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d007      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x308>
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b18      	cmp	r3, #24
 8002bec:	d13a      	bne.n	8002c64 <HAL_RCC_OscConfig+0x374>
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d135      	bne.n	8002c64 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bf8:	4b7b      	ldr	r3, [pc, #492]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_RCC_OscConfig+0x320>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	2b80      	cmp	r3, #128	@ 0x80
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e2c1      	b.n	8003194 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c10:	f7ff fb1e 	bl	8002250 <HAL_GetREVID>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d817      	bhi.n	8002c4e <HAL_RCC_OscConfig+0x35e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	d108      	bne.n	8002c38 <HAL_RCC_OscConfig+0x348>
 8002c26:	4b70      	ldr	r3, [pc, #448]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002c2e:	4a6e      	ldr	r2, [pc, #440]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002c30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002c34:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c36:	e075      	b.n	8002d24 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c38:	4b6b      	ldr	r3, [pc, #428]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	069b      	lsls	r3, r3, #26
 8002c46:	4968      	ldr	r1, [pc, #416]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c4c:	e06a      	b.n	8002d24 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c4e:	4b66      	ldr	r3, [pc, #408]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	061b      	lsls	r3, r3, #24
 8002c5c:	4962      	ldr	r1, [pc, #392]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c62:	e05f      	b.n	8002d24 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d042      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c6c:	4b5e      	ldr	r3, [pc, #376]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a5d      	ldr	r2, [pc, #372]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7ff faba 	bl	80021f0 <HAL_GetTick>
 8002c7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002c80:	f7ff fab6 	bl	80021f0 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e280      	b.n	8003194 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c92:	4b55      	ldr	r3, [pc, #340]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c9e:	f7ff fad7 	bl	8002250 <HAL_GetREVID>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d817      	bhi.n	8002cdc <HAL_RCC_OscConfig+0x3ec>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	2b20      	cmp	r3, #32
 8002cb2:	d108      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x3d6>
 8002cb4:	4b4c      	ldr	r3, [pc, #304]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002cbc:	4a4a      	ldr	r2, [pc, #296]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002cbe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002cc2:	6053      	str	r3, [r2, #4]
 8002cc4:	e02e      	b.n	8002d24 <HAL_RCC_OscConfig+0x434>
 8002cc6:	4b48      	ldr	r3, [pc, #288]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	069b      	lsls	r3, r3, #26
 8002cd4:	4944      	ldr	r1, [pc, #272]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]
 8002cda:	e023      	b.n	8002d24 <HAL_RCC_OscConfig+0x434>
 8002cdc:	4b42      	ldr	r3, [pc, #264]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	061b      	lsls	r3, r3, #24
 8002cea:	493f      	ldr	r1, [pc, #252]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60cb      	str	r3, [r1, #12]
 8002cf0:	e018      	b.n	8002d24 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a3c      	ldr	r2, [pc, #240]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002cf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfe:	f7ff fa77 	bl	80021f0 <HAL_GetTick>
 8002d02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d06:	f7ff fa73 	bl	80021f0 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e23d      	b.n	8003194 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d18:	4b33      	ldr	r3, [pc, #204]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f0      	bne.n	8002d06 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d036      	beq.n	8002d9e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d019      	beq.n	8002d6c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d38:	4b2b      	ldr	r3, [pc, #172]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002d3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d3c:	4a2a      	ldr	r2, [pc, #168]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d44:	f7ff fa54 	bl	80021f0 <HAL_GetTick>
 8002d48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d4c:	f7ff fa50 	bl	80021f0 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e21a      	b.n	8003194 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d5e:	4b22      	ldr	r3, [pc, #136]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0x45c>
 8002d6a:	e018      	b.n	8002d9e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002d6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d70:	4a1d      	ldr	r2, [pc, #116]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002d72:	f023 0301 	bic.w	r3, r3, #1
 8002d76:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d78:	f7ff fa3a 	bl	80021f0 <HAL_GetTick>
 8002d7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d80:	f7ff fa36 	bl	80021f0 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e200      	b.n	8003194 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d92:	4b15      	ldr	r3, [pc, #84]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002d94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d039      	beq.n	8002e1e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d01c      	beq.n	8002dec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002db2:	4b0d      	ldr	r3, [pc, #52]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a0c      	ldr	r2, [pc, #48]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002db8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002dbc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dbe:	f7ff fa17 	bl	80021f0 <HAL_GetTick>
 8002dc2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dc6:	f7ff fa13 	bl	80021f0 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e1dd      	b.n	8003194 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dd8:	4b03      	ldr	r3, [pc, #12]	@ (8002de8 <HAL_RCC_OscConfig+0x4f8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x4d6>
 8002de4:	e01b      	b.n	8002e1e <HAL_RCC_OscConfig+0x52e>
 8002de6:	bf00      	nop
 8002de8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dec:	4b9b      	ldr	r3, [pc, #620]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a9a      	ldr	r2, [pc, #616]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002df2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002df6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002df8:	f7ff f9fa 	bl	80021f0 <HAL_GetTick>
 8002dfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e00:	f7ff f9f6 	bl	80021f0 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e1c0      	b.n	8003194 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e12:	4b92      	ldr	r3, [pc, #584]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 8081 	beq.w	8002f2e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e2c:	4b8c      	ldr	r3, [pc, #560]	@ (8003060 <HAL_RCC_OscConfig+0x770>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a8b      	ldr	r2, [pc, #556]	@ (8003060 <HAL_RCC_OscConfig+0x770>)
 8002e32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e38:	f7ff f9da 	bl	80021f0 <HAL_GetTick>
 8002e3c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e40:	f7ff f9d6 	bl	80021f0 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	@ 0x64
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e1a0      	b.n	8003194 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e52:	4b83      	ldr	r3, [pc, #524]	@ (8003060 <HAL_RCC_OscConfig+0x770>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d106      	bne.n	8002e74 <HAL_RCC_OscConfig+0x584>
 8002e66:	4b7d      	ldr	r3, [pc, #500]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e6a:	4a7c      	ldr	r2, [pc, #496]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e72:	e02d      	b.n	8002ed0 <HAL_RCC_OscConfig+0x5e0>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10c      	bne.n	8002e96 <HAL_RCC_OscConfig+0x5a6>
 8002e7c:	4b77      	ldr	r3, [pc, #476]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e80:	4a76      	ldr	r2, [pc, #472]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002e82:	f023 0301 	bic.w	r3, r3, #1
 8002e86:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e88:	4b74      	ldr	r3, [pc, #464]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8c:	4a73      	ldr	r2, [pc, #460]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002e8e:	f023 0304 	bic.w	r3, r3, #4
 8002e92:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e94:	e01c      	b.n	8002ed0 <HAL_RCC_OscConfig+0x5e0>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b05      	cmp	r3, #5
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x5c8>
 8002e9e:	4b6f      	ldr	r3, [pc, #444]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea2:	4a6e      	ldr	r2, [pc, #440]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002ea4:	f043 0304 	orr.w	r3, r3, #4
 8002ea8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eaa:	4b6c      	ldr	r3, [pc, #432]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eae:	4a6b      	ldr	r2, [pc, #428]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eb6:	e00b      	b.n	8002ed0 <HAL_RCC_OscConfig+0x5e0>
 8002eb8:	4b68      	ldr	r3, [pc, #416]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ebc:	4a67      	ldr	r2, [pc, #412]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002ebe:	f023 0301 	bic.w	r3, r3, #1
 8002ec2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ec4:	4b65      	ldr	r3, [pc, #404]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec8:	4a64      	ldr	r2, [pc, #400]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002eca:	f023 0304 	bic.w	r3, r3, #4
 8002ece:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d015      	beq.n	8002f04 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed8:	f7ff f98a 	bl	80021f0 <HAL_GetTick>
 8002edc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee0:	f7ff f986 	bl	80021f0 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e14e      	b.n	8003194 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ef6:	4b59      	ldr	r3, [pc, #356]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0ee      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x5f0>
 8002f02:	e014      	b.n	8002f2e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f04:	f7ff f974 	bl	80021f0 <HAL_GetTick>
 8002f08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f0a:	e00a      	b.n	8002f22 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0c:	f7ff f970 	bl	80021f0 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e138      	b.n	8003194 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f22:	4b4e      	ldr	r3, [pc, #312]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1ee      	bne.n	8002f0c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 812d 	beq.w	8003192 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f38:	4b48      	ldr	r3, [pc, #288]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f40:	2b18      	cmp	r3, #24
 8002f42:	f000 80bd 	beq.w	80030c0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	f040 809e 	bne.w	800308c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f50:	4b42      	ldr	r3, [pc, #264]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a41      	ldr	r2, [pc, #260]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002f56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7ff f948 	bl	80021f0 <HAL_GetTick>
 8002f60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f64:	f7ff f944 	bl	80021f0 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e10e      	b.n	8003194 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f76:	4b39      	ldr	r3, [pc, #228]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f82:	4b36      	ldr	r3, [pc, #216]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002f84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f86:	4b37      	ldr	r3, [pc, #220]	@ (8003064 <HAL_RCC_OscConfig+0x774>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f92:	0112      	lsls	r2, r2, #4
 8002f94:	430a      	orrs	r2, r1
 8002f96:	4931      	ldr	r1, [pc, #196]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	628b      	str	r3, [r1, #40]	@ 0x28
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002faa:	3b01      	subs	r3, #1
 8002fac:	025b      	lsls	r3, r3, #9
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	041b      	lsls	r3, r3, #16
 8002fba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	061b      	lsls	r3, r3, #24
 8002fc8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002fcc:	4923      	ldr	r1, [pc, #140]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002fd2:	4b22      	ldr	r3, [pc, #136]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd6:	4a21      	ldr	r2, [pc, #132]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002fd8:	f023 0301 	bic.w	r3, r3, #1
 8002fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fde:	4b1f      	ldr	r3, [pc, #124]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002fe0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fe2:	4b21      	ldr	r3, [pc, #132]	@ (8003068 <HAL_RCC_OscConfig+0x778>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002fea:	00d2      	lsls	r2, r2, #3
 8002fec:	491b      	ldr	r1, [pc, #108]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8002ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff6:	f023 020c 	bic.w	r2, r3, #12
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffe:	4917      	ldr	r1, [pc, #92]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8003000:	4313      	orrs	r3, r2
 8003002:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003004:	4b15      	ldr	r3, [pc, #84]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8003006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003008:	f023 0202 	bic.w	r2, r3, #2
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003010:	4912      	ldr	r1, [pc, #72]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8003012:	4313      	orrs	r3, r2
 8003014:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003016:	4b11      	ldr	r3, [pc, #68]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8003018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301a:	4a10      	ldr	r2, [pc, #64]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003020:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003022:	4b0e      	ldr	r3, [pc, #56]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8003024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003026:	4a0d      	ldr	r2, [pc, #52]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8003028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800302c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800302e:	4b0b      	ldr	r3, [pc, #44]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8003030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003032:	4a0a      	ldr	r2, [pc, #40]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8003034:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003038:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800303a:	4b08      	ldr	r3, [pc, #32]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 800303c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303e:	4a07      	ldr	r2, [pc, #28]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003046:	4b05      	ldr	r3, [pc, #20]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a04      	ldr	r2, [pc, #16]	@ (800305c <HAL_RCC_OscConfig+0x76c>)
 800304c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003052:	f7ff f8cd 	bl	80021f0 <HAL_GetTick>
 8003056:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003058:	e011      	b.n	800307e <HAL_RCC_OscConfig+0x78e>
 800305a:	bf00      	nop
 800305c:	58024400 	.word	0x58024400
 8003060:	58024800 	.word	0x58024800
 8003064:	fffffc0c 	.word	0xfffffc0c
 8003068:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800306c:	f7ff f8c0 	bl	80021f0 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e08a      	b.n	8003194 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800307e:	4b47      	ldr	r3, [pc, #284]	@ (800319c <HAL_RCC_OscConfig+0x8ac>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0x77c>
 800308a:	e082      	b.n	8003192 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308c:	4b43      	ldr	r3, [pc, #268]	@ (800319c <HAL_RCC_OscConfig+0x8ac>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a42      	ldr	r2, [pc, #264]	@ (800319c <HAL_RCC_OscConfig+0x8ac>)
 8003092:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7ff f8aa 	bl	80021f0 <HAL_GetTick>
 800309c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a0:	f7ff f8a6 	bl	80021f0 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e070      	b.n	8003194 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030b2:	4b3a      	ldr	r3, [pc, #232]	@ (800319c <HAL_RCC_OscConfig+0x8ac>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x7b0>
 80030be:	e068      	b.n	8003192 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80030c0:	4b36      	ldr	r3, [pc, #216]	@ (800319c <HAL_RCC_OscConfig+0x8ac>)
 80030c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80030c6:	4b35      	ldr	r3, [pc, #212]	@ (800319c <HAL_RCC_OscConfig+0x8ac>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ca:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d031      	beq.n	8003138 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f003 0203 	and.w	r2, r3, #3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030de:	429a      	cmp	r2, r3
 80030e0:	d12a      	bne.n	8003138 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d122      	bne.n	8003138 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030fe:	429a      	cmp	r2, r3
 8003100:	d11a      	bne.n	8003138 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	0a5b      	lsrs	r3, r3, #9
 8003106:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800310e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003110:	429a      	cmp	r2, r3
 8003112:	d111      	bne.n	8003138 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	0c1b      	lsrs	r3, r3, #16
 8003118:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003120:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d108      	bne.n	8003138 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	0e1b      	lsrs	r3, r3, #24
 800312a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003132:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e02b      	b.n	8003194 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800313c:	4b17      	ldr	r3, [pc, #92]	@ (800319c <HAL_RCC_OscConfig+0x8ac>)
 800313e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003140:	08db      	lsrs	r3, r3, #3
 8003142:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003146:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	429a      	cmp	r2, r3
 8003150:	d01f      	beq.n	8003192 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003152:	4b12      	ldr	r3, [pc, #72]	@ (800319c <HAL_RCC_OscConfig+0x8ac>)
 8003154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003156:	4a11      	ldr	r2, [pc, #68]	@ (800319c <HAL_RCC_OscConfig+0x8ac>)
 8003158:	f023 0301 	bic.w	r3, r3, #1
 800315c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800315e:	f7ff f847 	bl	80021f0 <HAL_GetTick>
 8003162:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003164:	bf00      	nop
 8003166:	f7ff f843 	bl	80021f0 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316e:	4293      	cmp	r3, r2
 8003170:	d0f9      	beq.n	8003166 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003172:	4b0a      	ldr	r3, [pc, #40]	@ (800319c <HAL_RCC_OscConfig+0x8ac>)
 8003174:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003176:	4b0a      	ldr	r3, [pc, #40]	@ (80031a0 <HAL_RCC_OscConfig+0x8b0>)
 8003178:	4013      	ands	r3, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800317e:	00d2      	lsls	r2, r2, #3
 8003180:	4906      	ldr	r1, [pc, #24]	@ (800319c <HAL_RCC_OscConfig+0x8ac>)
 8003182:	4313      	orrs	r3, r2
 8003184:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003186:	4b05      	ldr	r3, [pc, #20]	@ (800319c <HAL_RCC_OscConfig+0x8ac>)
 8003188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318a:	4a04      	ldr	r2, [pc, #16]	@ (800319c <HAL_RCC_OscConfig+0x8ac>)
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3730      	adds	r7, #48	@ 0x30
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	58024400 	.word	0x58024400
 80031a0:	ffff0007 	.word	0xffff0007

080031a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e19c      	b.n	80034f2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031b8:	4b8a      	ldr	r3, [pc, #552]	@ (80033e4 <HAL_RCC_ClockConfig+0x240>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 030f 	and.w	r3, r3, #15
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d910      	bls.n	80031e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c6:	4b87      	ldr	r3, [pc, #540]	@ (80033e4 <HAL_RCC_ClockConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 020f 	bic.w	r2, r3, #15
 80031ce:	4985      	ldr	r1, [pc, #532]	@ (80033e4 <HAL_RCC_ClockConfig+0x240>)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b83      	ldr	r3, [pc, #524]	@ (80033e4 <HAL_RCC_ClockConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e184      	b.n	80034f2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d010      	beq.n	8003216 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	4b7b      	ldr	r3, [pc, #492]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003200:	429a      	cmp	r2, r3
 8003202:	d908      	bls.n	8003216 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003204:	4b78      	ldr	r3, [pc, #480]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	4975      	ldr	r1, [pc, #468]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 8003212:	4313      	orrs	r3, r2
 8003214:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d010      	beq.n	8003244 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	4b70      	ldr	r3, [pc, #448]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800322e:	429a      	cmp	r2, r3
 8003230:	d908      	bls.n	8003244 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003232:	4b6d      	ldr	r3, [pc, #436]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	496a      	ldr	r1, [pc, #424]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 8003240:	4313      	orrs	r3, r2
 8003242:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0310 	and.w	r3, r3, #16
 800324c:	2b00      	cmp	r3, #0
 800324e:	d010      	beq.n	8003272 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699a      	ldr	r2, [r3, #24]
 8003254:	4b64      	ldr	r3, [pc, #400]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800325c:	429a      	cmp	r2, r3
 800325e:	d908      	bls.n	8003272 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003260:	4b61      	ldr	r3, [pc, #388]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	495e      	ldr	r1, [pc, #376]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 800326e:	4313      	orrs	r3, r2
 8003270:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0320 	and.w	r3, r3, #32
 800327a:	2b00      	cmp	r3, #0
 800327c:	d010      	beq.n	80032a0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69da      	ldr	r2, [r3, #28]
 8003282:	4b59      	ldr	r3, [pc, #356]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800328a:	429a      	cmp	r2, r3
 800328c:	d908      	bls.n	80032a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800328e:	4b56      	ldr	r3, [pc, #344]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	4953      	ldr	r1, [pc, #332]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 800329c:	4313      	orrs	r3, r2
 800329e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d010      	beq.n	80032ce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	4b4d      	ldr	r3, [pc, #308]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	f003 030f 	and.w	r3, r3, #15
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d908      	bls.n	80032ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032bc:	4b4a      	ldr	r3, [pc, #296]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	f023 020f 	bic.w	r2, r3, #15
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	4947      	ldr	r1, [pc, #284]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d055      	beq.n	8003386 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80032da:	4b43      	ldr	r3, [pc, #268]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	4940      	ldr	r1, [pc, #256]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d107      	bne.n	8003304 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032f4:	4b3c      	ldr	r3, [pc, #240]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d121      	bne.n	8003344 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e0f6      	b.n	80034f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b03      	cmp	r3, #3
 800330a:	d107      	bne.n	800331c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800330c:	4b36      	ldr	r3, [pc, #216]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d115      	bne.n	8003344 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0ea      	b.n	80034f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d107      	bne.n	8003334 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003324:	4b30      	ldr	r3, [pc, #192]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d109      	bne.n	8003344 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0de      	b.n	80034f2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003334:	4b2c      	ldr	r3, [pc, #176]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e0d6      	b.n	80034f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003344:	4b28      	ldr	r3, [pc, #160]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f023 0207 	bic.w	r2, r3, #7
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4925      	ldr	r1, [pc, #148]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 8003352:	4313      	orrs	r3, r2
 8003354:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003356:	f7fe ff4b 	bl	80021f0 <HAL_GetTick>
 800335a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335c:	e00a      	b.n	8003374 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800335e:	f7fe ff47 	bl	80021f0 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336c:	4293      	cmp	r3, r2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e0be      	b.n	80034f2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003374:	4b1c      	ldr	r3, [pc, #112]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	429a      	cmp	r2, r3
 8003384:	d1eb      	bne.n	800335e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d010      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	4b14      	ldr	r3, [pc, #80]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	429a      	cmp	r2, r3
 80033a0:	d208      	bcs.n	80033b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a2:	4b11      	ldr	r3, [pc, #68]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f023 020f 	bic.w	r2, r3, #15
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	490e      	ldr	r1, [pc, #56]	@ (80033e8 <HAL_RCC_ClockConfig+0x244>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033b4:	4b0b      	ldr	r3, [pc, #44]	@ (80033e4 <HAL_RCC_ClockConfig+0x240>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 030f 	and.w	r3, r3, #15
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d214      	bcs.n	80033ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c2:	4b08      	ldr	r3, [pc, #32]	@ (80033e4 <HAL_RCC_ClockConfig+0x240>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f023 020f 	bic.w	r2, r3, #15
 80033ca:	4906      	ldr	r1, [pc, #24]	@ (80033e4 <HAL_RCC_ClockConfig+0x240>)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d2:	4b04      	ldr	r3, [pc, #16]	@ (80033e4 <HAL_RCC_ClockConfig+0x240>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d005      	beq.n	80033ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e086      	b.n	80034f2 <HAL_RCC_ClockConfig+0x34e>
 80033e4:	52002000 	.word	0x52002000
 80033e8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d010      	beq.n	800341a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	4b3f      	ldr	r3, [pc, #252]	@ (80034fc <HAL_RCC_ClockConfig+0x358>)
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003404:	429a      	cmp	r2, r3
 8003406:	d208      	bcs.n	800341a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003408:	4b3c      	ldr	r3, [pc, #240]	@ (80034fc <HAL_RCC_ClockConfig+0x358>)
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	4939      	ldr	r1, [pc, #228]	@ (80034fc <HAL_RCC_ClockConfig+0x358>)
 8003416:	4313      	orrs	r3, r2
 8003418:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d010      	beq.n	8003448 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695a      	ldr	r2, [r3, #20]
 800342a:	4b34      	ldr	r3, [pc, #208]	@ (80034fc <HAL_RCC_ClockConfig+0x358>)
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003432:	429a      	cmp	r2, r3
 8003434:	d208      	bcs.n	8003448 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003436:	4b31      	ldr	r3, [pc, #196]	@ (80034fc <HAL_RCC_ClockConfig+0x358>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	492e      	ldr	r1, [pc, #184]	@ (80034fc <HAL_RCC_ClockConfig+0x358>)
 8003444:	4313      	orrs	r3, r2
 8003446:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b00      	cmp	r3, #0
 8003452:	d010      	beq.n	8003476 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699a      	ldr	r2, [r3, #24]
 8003458:	4b28      	ldr	r3, [pc, #160]	@ (80034fc <HAL_RCC_ClockConfig+0x358>)
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003460:	429a      	cmp	r2, r3
 8003462:	d208      	bcs.n	8003476 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003464:	4b25      	ldr	r3, [pc, #148]	@ (80034fc <HAL_RCC_ClockConfig+0x358>)
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	4922      	ldr	r1, [pc, #136]	@ (80034fc <HAL_RCC_ClockConfig+0x358>)
 8003472:	4313      	orrs	r3, r2
 8003474:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0320 	and.w	r3, r3, #32
 800347e:	2b00      	cmp	r3, #0
 8003480:	d010      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69da      	ldr	r2, [r3, #28]
 8003486:	4b1d      	ldr	r3, [pc, #116]	@ (80034fc <HAL_RCC_ClockConfig+0x358>)
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800348e:	429a      	cmp	r2, r3
 8003490:	d208      	bcs.n	80034a4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003492:	4b1a      	ldr	r3, [pc, #104]	@ (80034fc <HAL_RCC_ClockConfig+0x358>)
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	4917      	ldr	r1, [pc, #92]	@ (80034fc <HAL_RCC_ClockConfig+0x358>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034a4:	f000 f89e 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 80034a8:	4602      	mov	r2, r0
 80034aa:	4b14      	ldr	r3, [pc, #80]	@ (80034fc <HAL_RCC_ClockConfig+0x358>)
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	0a1b      	lsrs	r3, r3, #8
 80034b0:	f003 030f 	and.w	r3, r3, #15
 80034b4:	4912      	ldr	r1, [pc, #72]	@ (8003500 <HAL_RCC_ClockConfig+0x35c>)
 80034b6:	5ccb      	ldrb	r3, [r1, r3]
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	fa22 f303 	lsr.w	r3, r2, r3
 80034c0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034c2:	4b0e      	ldr	r3, [pc, #56]	@ (80034fc <HAL_RCC_ClockConfig+0x358>)
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	4a0d      	ldr	r2, [pc, #52]	@ (8003500 <HAL_RCC_ClockConfig+0x35c>)
 80034cc:	5cd3      	ldrb	r3, [r2, r3]
 80034ce:	f003 031f 	and.w	r3, r3, #31
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
 80034d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003504 <HAL_RCC_ClockConfig+0x360>)
 80034da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003508 <HAL_RCC_ClockConfig+0x364>)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80034e2:	4b0a      	ldr	r3, [pc, #40]	@ (800350c <HAL_RCC_ClockConfig+0x368>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fe fcca 	bl	8001e80 <HAL_InitTick>
 80034ec:	4603      	mov	r3, r0
 80034ee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	58024400 	.word	0x58024400
 8003500:	0800bf74 	.word	0x0800bf74
 8003504:	24000004 	.word	0x24000004
 8003508:	24000000 	.word	0x24000000
 800350c:	24000008 	.word	0x24000008

08003510 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08c      	sub	sp, #48	@ 0x30
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d12a      	bne.n	8003578 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003522:	4b2d      	ldr	r3, [pc, #180]	@ (80035d8 <HAL_RCC_MCOConfig+0xc8>)
 8003524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003528:	4a2b      	ldr	r2, [pc, #172]	@ (80035d8 <HAL_RCC_MCOConfig+0xc8>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003532:	4b29      	ldr	r3, [pc, #164]	@ (80035d8 <HAL_RCC_MCOConfig+0xc8>)
 8003534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	61bb      	str	r3, [r7, #24]
 800353e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003540:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003546:	2302      	movs	r3, #2
 8003548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800354a:	2303      	movs	r3, #3
 800354c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354e:	2300      	movs	r3, #0
 8003550:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003552:	2300      	movs	r3, #0
 8003554:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003556:	f107 031c 	add.w	r3, r7, #28
 800355a:	4619      	mov	r1, r3
 800355c:	481f      	ldr	r0, [pc, #124]	@ (80035dc <HAL_RCC_MCOConfig+0xcc>)
 800355e:	f7fe ff75 	bl	800244c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003562:	4b1d      	ldr	r3, [pc, #116]	@ (80035d8 <HAL_RCC_MCOConfig+0xc8>)
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800356a:	68b9      	ldr	r1, [r7, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	430b      	orrs	r3, r1
 8003570:	4919      	ldr	r1, [pc, #100]	@ (80035d8 <HAL_RCC_MCOConfig+0xc8>)
 8003572:	4313      	orrs	r3, r2
 8003574:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8003576:	e02a      	b.n	80035ce <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8003578:	4b17      	ldr	r3, [pc, #92]	@ (80035d8 <HAL_RCC_MCOConfig+0xc8>)
 800357a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800357e:	4a16      	ldr	r2, [pc, #88]	@ (80035d8 <HAL_RCC_MCOConfig+0xc8>)
 8003580:	f043 0304 	orr.w	r3, r3, #4
 8003584:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003588:	4b13      	ldr	r3, [pc, #76]	@ (80035d8 <HAL_RCC_MCOConfig+0xc8>)
 800358a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003596:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800359a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359c:	2302      	movs	r3, #2
 800359e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a0:	2303      	movs	r3, #3
 80035a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80035a8:	2300      	movs	r3, #0
 80035aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80035ac:	f107 031c 	add.w	r3, r7, #28
 80035b0:	4619      	mov	r1, r3
 80035b2:	480b      	ldr	r0, [pc, #44]	@ (80035e0 <HAL_RCC_MCOConfig+0xd0>)
 80035b4:	f7fe ff4a 	bl	800244c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80035b8:	4b07      	ldr	r3, [pc, #28]	@ (80035d8 <HAL_RCC_MCOConfig+0xc8>)
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	01d9      	lsls	r1, r3, #7
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	430b      	orrs	r3, r1
 80035c8:	4903      	ldr	r1, [pc, #12]	@ (80035d8 <HAL_RCC_MCOConfig+0xc8>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	610b      	str	r3, [r1, #16]
}
 80035ce:	bf00      	nop
 80035d0:	3730      	adds	r7, #48	@ 0x30
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	58024400 	.word	0x58024400
 80035dc:	58020000 	.word	0x58020000
 80035e0:	58020800 	.word	0x58020800

080035e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b089      	sub	sp, #36	@ 0x24
 80035e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ea:	4bb3      	ldr	r3, [pc, #716]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035f2:	2b18      	cmp	r3, #24
 80035f4:	f200 8155 	bhi.w	80038a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80035f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003600 <HAL_RCC_GetSysClockFreq+0x1c>)
 80035fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fe:	bf00      	nop
 8003600:	08003665 	.word	0x08003665
 8003604:	080038a3 	.word	0x080038a3
 8003608:	080038a3 	.word	0x080038a3
 800360c:	080038a3 	.word	0x080038a3
 8003610:	080038a3 	.word	0x080038a3
 8003614:	080038a3 	.word	0x080038a3
 8003618:	080038a3 	.word	0x080038a3
 800361c:	080038a3 	.word	0x080038a3
 8003620:	0800368b 	.word	0x0800368b
 8003624:	080038a3 	.word	0x080038a3
 8003628:	080038a3 	.word	0x080038a3
 800362c:	080038a3 	.word	0x080038a3
 8003630:	080038a3 	.word	0x080038a3
 8003634:	080038a3 	.word	0x080038a3
 8003638:	080038a3 	.word	0x080038a3
 800363c:	080038a3 	.word	0x080038a3
 8003640:	08003691 	.word	0x08003691
 8003644:	080038a3 	.word	0x080038a3
 8003648:	080038a3 	.word	0x080038a3
 800364c:	080038a3 	.word	0x080038a3
 8003650:	080038a3 	.word	0x080038a3
 8003654:	080038a3 	.word	0x080038a3
 8003658:	080038a3 	.word	0x080038a3
 800365c:	080038a3 	.word	0x080038a3
 8003660:	08003697 	.word	0x08003697
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003664:	4b94      	ldr	r3, [pc, #592]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b00      	cmp	r3, #0
 800366e:	d009      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003670:	4b91      	ldr	r3, [pc, #580]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	08db      	lsrs	r3, r3, #3
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	4a90      	ldr	r2, [pc, #576]	@ (80038bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
 8003680:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003682:	e111      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003684:	4b8d      	ldr	r3, [pc, #564]	@ (80038bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003686:	61bb      	str	r3, [r7, #24]
      break;
 8003688:	e10e      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800368a:	4b8d      	ldr	r3, [pc, #564]	@ (80038c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800368c:	61bb      	str	r3, [r7, #24]
      break;
 800368e:	e10b      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003690:	4b8c      	ldr	r3, [pc, #560]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003692:	61bb      	str	r3, [r7, #24]
      break;
 8003694:	e108      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003696:	4b88      	ldr	r3, [pc, #544]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80036a0:	4b85      	ldr	r3, [pc, #532]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a4:	091b      	lsrs	r3, r3, #4
 80036a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80036ac:	4b82      	ldr	r3, [pc, #520]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80036b6:	4b80      	ldr	r3, [pc, #512]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ba:	08db      	lsrs	r3, r3, #3
 80036bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	ee07 3a90 	vmov	s15, r3
 80036ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 80e1 	beq.w	800389c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	f000 8083 	beq.w	80037e8 <HAL_RCC_GetSysClockFreq+0x204>
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	f200 80a1 	bhi.w	800382c <HAL_RCC_GetSysClockFreq+0x248>
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x114>
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d056      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80036f6:	e099      	b.n	800382c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036f8:	4b6f      	ldr	r3, [pc, #444]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d02d      	beq.n	8003760 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003704:	4b6c      	ldr	r3, [pc, #432]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	08db      	lsrs	r3, r3, #3
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	4a6b      	ldr	r2, [pc, #428]	@ (80038bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003710:	fa22 f303 	lsr.w	r3, r2, r3
 8003714:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	ee07 3a90 	vmov	s15, r3
 800371c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800372e:	4b62      	ldr	r3, [pc, #392]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003736:	ee07 3a90 	vmov	s15, r3
 800373a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800373e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003742:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80038c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800374a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800374e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800375e:	e087      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	ee07 3a90 	vmov	s15, r3
 8003766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800376a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80038cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800376e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003772:	4b51      	ldr	r3, [pc, #324]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800377a:	ee07 3a90 	vmov	s15, r3
 800377e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003782:	ed97 6a02 	vldr	s12, [r7, #8]
 8003786:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80038c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800378a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800378e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800379a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800379e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037a2:	e065      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	ee07 3a90 	vmov	s15, r3
 80037aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ae:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80038d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80037b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037b6:	4b40      	ldr	r3, [pc, #256]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037be:	ee07 3a90 	vmov	s15, r3
 80037c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80037ca:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80038c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037e6:	e043      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	ee07 3a90 	vmov	s15, r3
 80037ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80038d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80037f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037fa:	4b2f      	ldr	r3, [pc, #188]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003802:	ee07 3a90 	vmov	s15, r3
 8003806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800380a:	ed97 6a02 	vldr	s12, [r7, #8]
 800380e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80038c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800381a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800381e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003826:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800382a:	e021      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	ee07 3a90 	vmov	s15, r3
 8003832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003836:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80038d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800383a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800383e:	4b1e      	ldr	r3, [pc, #120]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003846:	ee07 3a90 	vmov	s15, r3
 800384a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800384e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003852:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80038c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800385a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800385e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800386e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003870:	4b11      	ldr	r3, [pc, #68]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003874:	0a5b      	lsrs	r3, r3, #9
 8003876:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800387a:	3301      	adds	r3, #1
 800387c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	ee07 3a90 	vmov	s15, r3
 8003884:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003888:	edd7 6a07 	vldr	s13, [r7, #28]
 800388c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003894:	ee17 3a90 	vmov	r3, s15
 8003898:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800389a:	e005      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	61bb      	str	r3, [r7, #24]
      break;
 80038a0:	e002      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80038a2:	4b07      	ldr	r3, [pc, #28]	@ (80038c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038a4:	61bb      	str	r3, [r7, #24]
      break;
 80038a6:	bf00      	nop
  }

  return sysclockfreq;
 80038a8:	69bb      	ldr	r3, [r7, #24]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3724      	adds	r7, #36	@ 0x24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	58024400 	.word	0x58024400
 80038bc:	03d09000 	.word	0x03d09000
 80038c0:	003d0900 	.word	0x003d0900
 80038c4:	017d7840 	.word	0x017d7840
 80038c8:	46000000 	.word	0x46000000
 80038cc:	4c742400 	.word	0x4c742400
 80038d0:	4a742400 	.word	0x4a742400
 80038d4:	4bbebc20 	.word	0x4bbebc20

080038d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80038de:	f7ff fe81 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 80038e2:	4602      	mov	r2, r0
 80038e4:	4b10      	ldr	r3, [pc, #64]	@ (8003928 <HAL_RCC_GetHCLKFreq+0x50>)
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	0a1b      	lsrs	r3, r3, #8
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	490f      	ldr	r1, [pc, #60]	@ (800392c <HAL_RCC_GetHCLKFreq+0x54>)
 80038f0:	5ccb      	ldrb	r3, [r1, r3]
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	fa22 f303 	lsr.w	r3, r2, r3
 80038fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003928 <HAL_RCC_GetHCLKFreq+0x50>)
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	4a09      	ldr	r2, [pc, #36]	@ (800392c <HAL_RCC_GetHCLKFreq+0x54>)
 8003906:	5cd3      	ldrb	r3, [r2, r3]
 8003908:	f003 031f 	and.w	r3, r3, #31
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	fa22 f303 	lsr.w	r3, r2, r3
 8003912:	4a07      	ldr	r2, [pc, #28]	@ (8003930 <HAL_RCC_GetHCLKFreq+0x58>)
 8003914:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003916:	4a07      	ldr	r2, [pc, #28]	@ (8003934 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800391c:	4b04      	ldr	r3, [pc, #16]	@ (8003930 <HAL_RCC_GetHCLKFreq+0x58>)
 800391e:	681b      	ldr	r3, [r3, #0]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	58024400 	.word	0x58024400
 800392c:	0800bf74 	.word	0x0800bf74
 8003930:	24000004 	.word	0x24000004
 8003934:	24000000 	.word	0x24000000

08003938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800393c:	f7ff ffcc 	bl	80038d8 <HAL_RCC_GetHCLKFreq>
 8003940:	4602      	mov	r2, r0
 8003942:	4b06      	ldr	r3, [pc, #24]	@ (800395c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	091b      	lsrs	r3, r3, #4
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4904      	ldr	r1, [pc, #16]	@ (8003960 <HAL_RCC_GetPCLK1Freq+0x28>)
 800394e:	5ccb      	ldrb	r3, [r1, r3]
 8003950:	f003 031f 	and.w	r3, r3, #31
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003958:	4618      	mov	r0, r3
 800395a:	bd80      	pop	{r7, pc}
 800395c:	58024400 	.word	0x58024400
 8003960:	0800bf74 	.word	0x0800bf74

08003964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003968:	f7ff ffb6 	bl	80038d8 <HAL_RCC_GetHCLKFreq>
 800396c:	4602      	mov	r2, r0
 800396e:	4b06      	ldr	r3, [pc, #24]	@ (8003988 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	0a1b      	lsrs	r3, r3, #8
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	4904      	ldr	r1, [pc, #16]	@ (800398c <HAL_RCC_GetPCLK2Freq+0x28>)
 800397a:	5ccb      	ldrb	r3, [r1, r3]
 800397c:	f003 031f 	and.w	r3, r3, #31
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	58024400 	.word	0x58024400
 800398c:	0800bf74 	.word	0x0800bf74

08003990 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	223f      	movs	r2, #63	@ 0x3f
 800399e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039a0:	4b1a      	ldr	r3, [pc, #104]	@ (8003a0c <HAL_RCC_GetClockConfig+0x7c>)
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	f003 0207 	and.w	r2, r3, #7
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80039ac:	4b17      	ldr	r3, [pc, #92]	@ (8003a0c <HAL_RCC_GetClockConfig+0x7c>)
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80039b8:	4b14      	ldr	r3, [pc, #80]	@ (8003a0c <HAL_RCC_GetClockConfig+0x7c>)
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	f003 020f 	and.w	r2, r3, #15
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80039c4:	4b11      	ldr	r3, [pc, #68]	@ (8003a0c <HAL_RCC_GetClockConfig+0x7c>)
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80039d0:	4b0e      	ldr	r3, [pc, #56]	@ (8003a0c <HAL_RCC_GetClockConfig+0x7c>)
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80039dc:	4b0b      	ldr	r3, [pc, #44]	@ (8003a0c <HAL_RCC_GetClockConfig+0x7c>)
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80039e8:	4b08      	ldr	r3, [pc, #32]	@ (8003a0c <HAL_RCC_GetClockConfig+0x7c>)
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039f4:	4b06      	ldr	r3, [pc, #24]	@ (8003a10 <HAL_RCC_GetClockConfig+0x80>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 020f 	and.w	r2, r3, #15
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	601a      	str	r2, [r3, #0]
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	58024400 	.word	0x58024400
 8003a10:	52002000 	.word	0x52002000

08003a14 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a18:	b0cc      	sub	sp, #304	@ 0x130
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a20:	2300      	movs	r3, #0
 8003a22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a26:	2300      	movs	r3, #0
 8003a28:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a34:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003a38:	2500      	movs	r5, #0
 8003a3a:	ea54 0305 	orrs.w	r3, r4, r5
 8003a3e:	d049      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003a40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a46:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a4a:	d02f      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003a4c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a50:	d828      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a56:	d01a      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a58:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a5c:	d822      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003a62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a66:	d007      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a68:	e01c      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a6a:	4bb8      	ldr	r3, [pc, #736]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6e:	4ab7      	ldr	r2, [pc, #732]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a76:	e01a      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	2102      	movs	r1, #2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f001 fccf 	bl	8005424 <RCCEx_PLL2_Config>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a8c:	e00f      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a92:	3328      	adds	r3, #40	@ 0x28
 8003a94:	2102      	movs	r1, #2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f001 fd76 	bl	8005588 <RCCEx_PLL3_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003aa2:	e004      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003aaa:	e000      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10a      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ab6:	4ba5      	ldr	r3, [pc, #660]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003abe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ac2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ac4:	4aa1      	ldr	r2, [pc, #644]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ac6:	430b      	orrs	r3, r1
 8003ac8:	6513      	str	r3, [r2, #80]	@ 0x50
 8003aca:	e003      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003acc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ad0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ad4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003adc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003ae0:	f04f 0900 	mov.w	r9, #0
 8003ae4:	ea58 0309 	orrs.w	r3, r8, r9
 8003ae8:	d047      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003aea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d82a      	bhi.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003af4:	a201      	add	r2, pc, #4	@ (adr r2, 8003afc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afa:	bf00      	nop
 8003afc:	08003b11 	.word	0x08003b11
 8003b00:	08003b1f 	.word	0x08003b1f
 8003b04:	08003b35 	.word	0x08003b35
 8003b08:	08003b53 	.word	0x08003b53
 8003b0c:	08003b53 	.word	0x08003b53
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b10:	4b8e      	ldr	r3, [pc, #568]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b14:	4a8d      	ldr	r2, [pc, #564]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b1c:	e01a      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b22:	3308      	adds	r3, #8
 8003b24:	2100      	movs	r1, #0
 8003b26:	4618      	mov	r0, r3
 8003b28:	f001 fc7c 	bl	8005424 <RCCEx_PLL2_Config>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b32:	e00f      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b38:	3328      	adds	r3, #40	@ 0x28
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f001 fd23 	bl	8005588 <RCCEx_PLL3_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b48:	e004      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003b50:	e000      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003b52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b54:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10a      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b5c:	4b7b      	ldr	r3, [pc, #492]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b60:	f023 0107 	bic.w	r1, r3, #7
 8003b64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b6a:	4a78      	ldr	r2, [pc, #480]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b70:	e003      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b76:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003b7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b82:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003b86:	f04f 0b00 	mov.w	fp, #0
 8003b8a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003b8e:	d04c      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003b90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b9a:	d030      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003b9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ba0:	d829      	bhi.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ba2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ba4:	d02d      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003ba6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ba8:	d825      	bhi.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003baa:	2b80      	cmp	r3, #128	@ 0x80
 8003bac:	d018      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003bae:	2b80      	cmp	r3, #128	@ 0x80
 8003bb0:	d821      	bhi.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003bb6:	2b40      	cmp	r3, #64	@ 0x40
 8003bb8:	d007      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003bba:	e01c      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bbc:	4b63      	ldr	r3, [pc, #396]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc0:	4a62      	ldr	r2, [pc, #392]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003bc8:	e01c      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bce:	3308      	adds	r3, #8
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f001 fc26 	bl	8005424 <RCCEx_PLL2_Config>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003bde:	e011      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003be0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003be4:	3328      	adds	r3, #40	@ 0x28
 8003be6:	2100      	movs	r1, #0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f001 fccd 	bl	8005588 <RCCEx_PLL3_Config>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003bf4:	e006      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003bfc:	e002      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003bfe:	bf00      	nop
 8003c00:	e000      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c04:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003c0c:	4b4f      	ldr	r3, [pc, #316]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c10:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003c14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c1a:	4a4c      	ldr	r2, [pc, #304]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c1c:	430b      	orrs	r3, r1
 8003c1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c20:	e003      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c22:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c26:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003c2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c32:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003c36:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003c40:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8003c44:	460b      	mov	r3, r1
 8003c46:	4313      	orrs	r3, r2
 8003c48:	d053      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003c4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c56:	d035      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003c58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c5c:	d82e      	bhi.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c5e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003c62:	d031      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003c64:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003c68:	d828      	bhi.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c6e:	d01a      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003c70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c74:	d822      	bhi.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003c7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c7e:	d007      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003c80:	e01c      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c82:	4b32      	ldr	r3, [pc, #200]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c86:	4a31      	ldr	r2, [pc, #196]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c8e:	e01c      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c94:	3308      	adds	r3, #8
 8003c96:	2100      	movs	r1, #0
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f001 fbc3 	bl	8005424 <RCCEx_PLL2_Config>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003ca4:	e011      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ca6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003caa:	3328      	adds	r3, #40	@ 0x28
 8003cac:	2100      	movs	r1, #0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f001 fc6a 	bl	8005588 <RCCEx_PLL3_Config>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cba:	e006      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003cc2:	e002      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003cc4:	bf00      	nop
 8003cc6:	e000      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10b      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003cda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003ce2:	4a1a      	ldr	r2, [pc, #104]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ce8:	e003      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003cee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003cf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003cfe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003d02:	2300      	movs	r3, #0
 8003d04:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003d08:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	d056      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003d12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d1a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d1e:	d038      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003d20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d24:	d831      	bhi.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d26:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d2a:	d034      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003d2c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d30:	d82b      	bhi.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d36:	d01d      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003d38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d3c:	d825      	bhi.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d006      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003d42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d46:	d00a      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003d48:	e01f      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d4a:	bf00      	nop
 8003d4c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d50:	4ba2      	ldr	r3, [pc, #648]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d54:	4aa1      	ldr	r2, [pc, #644]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d5c:	e01c      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d62:	3308      	adds	r3, #8
 8003d64:	2100      	movs	r1, #0
 8003d66:	4618      	mov	r0, r3
 8003d68:	f001 fb5c 	bl	8005424 <RCCEx_PLL2_Config>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d72:	e011      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d78:	3328      	adds	r3, #40	@ 0x28
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f001 fc03 	bl	8005588 <RCCEx_PLL3_Config>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d88:	e006      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003d90:	e002      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003d92:	bf00      	nop
 8003d94:	e000      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003d96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d98:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10b      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003da0:	4b8e      	ldr	r3, [pc, #568]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003da8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003db0:	4a8a      	ldr	r2, [pc, #552]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003db2:	430b      	orrs	r3, r1
 8003db4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003db6:	e003      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003dbc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003dc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003dcc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003dd6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	d03a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003de0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003de6:	2b30      	cmp	r3, #48	@ 0x30
 8003de8:	d01f      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003dea:	2b30      	cmp	r3, #48	@ 0x30
 8003dec:	d819      	bhi.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	d00c      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	d815      	bhi.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d019      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003dfa:	2b10      	cmp	r3, #16
 8003dfc:	d111      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dfe:	4b77      	ldr	r3, [pc, #476]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e02:	4a76      	ldr	r2, [pc, #472]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003e0a:	e011      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e10:	3308      	adds	r3, #8
 8003e12:	2102      	movs	r1, #2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f001 fb05 	bl	8005424 <RCCEx_PLL2_Config>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003e20:	e006      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003e28:	e002      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003e2a:	bf00      	nop
 8003e2c:	e000      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003e2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e30:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e38:	4b68      	ldr	r3, [pc, #416]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e3c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003e40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e46:	4a65      	ldr	r2, [pc, #404]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e4c:	e003      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e52:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003e62:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003e66:	2300      	movs	r3, #0
 8003e68:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003e6c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003e70:	460b      	mov	r3, r1
 8003e72:	4313      	orrs	r3, r2
 8003e74:	d051      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003e76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e80:	d035      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003e82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e86:	d82e      	bhi.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e8c:	d031      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003e8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e92:	d828      	bhi.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e98:	d01a      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003e9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e9e:	d822      	bhi.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003ea4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea8:	d007      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003eaa:	e01c      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eac:	4b4b      	ldr	r3, [pc, #300]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb0:	4a4a      	ldr	r2, [pc, #296]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003eb8:	e01c      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003eba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f001 faae 	bl	8005424 <RCCEx_PLL2_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ece:	e011      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ed0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ed4:	3328      	adds	r3, #40	@ 0x28
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f001 fb55 	bl	8005588 <RCCEx_PLL3_Config>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ee4:	e006      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003eec:	e002      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003eee:	bf00      	nop
 8003ef0:	e000      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003ef2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ef4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10a      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003efc:	4b37      	ldr	r3, [pc, #220]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f00:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003f04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f0a:	4a34      	ldr	r2, [pc, #208]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f10:	e003      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f12:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f16:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f22:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003f26:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003f30:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4313      	orrs	r3, r2
 8003f38:	d056      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003f3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f44:	d033      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003f46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f4a:	d82c      	bhi.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f50:	d02f      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003f52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f56:	d826      	bhi.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f5c:	d02b      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003f5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f62:	d820      	bhi.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f68:	d012      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003f6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f6e:	d81a      	bhi.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d022      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003f74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f78:	d115      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f7e:	3308      	adds	r3, #8
 8003f80:	2101      	movs	r1, #1
 8003f82:	4618      	mov	r0, r3
 8003f84:	f001 fa4e 	bl	8005424 <RCCEx_PLL2_Config>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f8e:	e015      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f94:	3328      	adds	r3, #40	@ 0x28
 8003f96:	2101      	movs	r1, #1
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f001 faf5 	bl	8005588 <RCCEx_PLL3_Config>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003fa4:	e00a      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003fac:	e006      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003fae:	bf00      	nop
 8003fb0:	e004      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003fb2:	bf00      	nop
 8003fb4:	e002      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003fb6:	bf00      	nop
 8003fb8:	e000      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fbc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10d      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003fc4:	4b05      	ldr	r3, [pc, #20]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fc8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003fcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fd2:	4a02      	ldr	r2, [pc, #8]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fd8:	e006      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003fda:	bf00      	nop
 8003fdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003fe4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003fe8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003ff4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003ffe:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004002:	460b      	mov	r3, r1
 8004004:	4313      	orrs	r3, r2
 8004006:	d055      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004008:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800400c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004010:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004014:	d033      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004016:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800401a:	d82c      	bhi.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800401c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004020:	d02f      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004026:	d826      	bhi.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004028:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800402c:	d02b      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800402e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004032:	d820      	bhi.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004034:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004038:	d012      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800403a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800403e:	d81a      	bhi.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004040:	2b00      	cmp	r3, #0
 8004042:	d022      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004044:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004048:	d115      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800404a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800404e:	3308      	adds	r3, #8
 8004050:	2101      	movs	r1, #1
 8004052:	4618      	mov	r0, r3
 8004054:	f001 f9e6 	bl	8005424 <RCCEx_PLL2_Config>
 8004058:	4603      	mov	r3, r0
 800405a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800405e:	e015      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004060:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004064:	3328      	adds	r3, #40	@ 0x28
 8004066:	2101      	movs	r1, #1
 8004068:	4618      	mov	r0, r3
 800406a:	f001 fa8d 	bl	8005588 <RCCEx_PLL3_Config>
 800406e:	4603      	mov	r3, r0
 8004070:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004074:	e00a      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800407c:	e006      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800407e:	bf00      	nop
 8004080:	e004      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004082:	bf00      	nop
 8004084:	e002      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004086:	bf00      	nop
 8004088:	e000      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800408a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800408c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10b      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004094:	4bb6      	ldr	r3, [pc, #728]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004098:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800409c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040a4:	4ab2      	ldr	r2, [pc, #712]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80040a6:	430b      	orrs	r3, r1
 80040a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80040aa:	e003      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80040b0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80040b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040bc:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80040c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040c4:	2300      	movs	r3, #0
 80040c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040ca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4313      	orrs	r3, r2
 80040d2:	d02a      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80040d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d011      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80040de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040e2:	d10a      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040e8:	3308      	adds	r3, #8
 80040ea:	2101      	movs	r1, #1
 80040ec:	4618      	mov	r0, r3
 80040ee:	f001 f999 	bl	8005424 <RCCEx_PLL2_Config>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80040f8:	e004      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004100:	e000      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8004102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004104:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10a      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800410c:	4b98      	ldr	r3, [pc, #608]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800410e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004110:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004114:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800411a:	4a95      	ldr	r2, [pc, #596]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800411c:	430b      	orrs	r3, r1
 800411e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004120:	e003      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004122:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004126:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800412a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004136:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800413a:	2300      	movs	r3, #0
 800413c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004140:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004144:	460b      	mov	r3, r1
 8004146:	4313      	orrs	r3, r2
 8004148:	d037      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800414a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800414e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004150:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004154:	d00e      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8004156:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800415a:	d816      	bhi.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x776>
 800415c:	2b00      	cmp	r3, #0
 800415e:	d018      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004160:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004164:	d111      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004166:	4b82      	ldr	r3, [pc, #520]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416a:	4a81      	ldr	r2, [pc, #516]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800416c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004170:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004172:	e00f      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004174:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004178:	3308      	adds	r3, #8
 800417a:	2101      	movs	r1, #1
 800417c:	4618      	mov	r0, r3
 800417e:	f001 f951 	bl	8005424 <RCCEx_PLL2_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004188:	e004      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004190:	e000      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8004192:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004194:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10a      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800419c:	4b74      	ldr	r3, [pc, #464]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800419e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041a0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80041a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041aa:	4a71      	ldr	r2, [pc, #452]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80041ac:	430b      	orrs	r3, r1
 80041ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80041b0:	e003      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80041b6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80041ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c2:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80041c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041ca:	2300      	movs	r3, #0
 80041cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80041d0:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4313      	orrs	r3, r2
 80041d8:	d03a      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80041da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d81d      	bhi.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80041e4:	a201      	add	r2, pc, #4	@ (adr r2, 80041ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80041e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ea:	bf00      	nop
 80041ec:	08004229 	.word	0x08004229
 80041f0:	080041fd 	.word	0x080041fd
 80041f4:	0800420b 	.word	0x0800420b
 80041f8:	08004229 	.word	0x08004229
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041fc:	4b5c      	ldr	r3, [pc, #368]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80041fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004200:	4a5b      	ldr	r2, [pc, #364]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004202:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004206:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004208:	e00f      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800420a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800420e:	3308      	adds	r3, #8
 8004210:	2102      	movs	r1, #2
 8004212:	4618      	mov	r0, r3
 8004214:	f001 f906 	bl	8005424 <RCCEx_PLL2_Config>
 8004218:	4603      	mov	r3, r0
 800421a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800421e:	e004      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004226:	e000      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8004228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800422a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10a      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004232:	4b4f      	ldr	r3, [pc, #316]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004236:	f023 0103 	bic.w	r1, r3, #3
 800423a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800423e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004240:	4a4b      	ldr	r2, [pc, #300]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004242:	430b      	orrs	r3, r1
 8004244:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004246:	e003      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004248:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800424c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004250:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004258:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800425c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004260:	2300      	movs	r3, #0
 8004262:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004266:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800426a:	460b      	mov	r3, r1
 800426c:	4313      	orrs	r3, r2
 800426e:	f000 80a0 	beq.w	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004272:	4b40      	ldr	r3, [pc, #256]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a3f      	ldr	r2, [pc, #252]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800427c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800427e:	f7fd ffb7 	bl	80021f0 <HAL_GetTick>
 8004282:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004286:	e00b      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004288:	f7fd ffb2 	bl	80021f0 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b64      	cmp	r3, #100	@ 0x64
 8004296:	d903      	bls.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800429e:	e005      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042a0:	4b34      	ldr	r3, [pc, #208]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0ed      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80042ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d17a      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80042b4:	4b2e      	ldr	r3, [pc, #184]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80042b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80042b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80042c0:	4053      	eors	r3, r2
 80042c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d015      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042ca:	4b29      	ldr	r3, [pc, #164]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042d2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042d6:	4b26      	ldr	r3, [pc, #152]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042da:	4a25      	ldr	r2, [pc, #148]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80042dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042e0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042e2:	4b23      	ldr	r3, [pc, #140]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80042e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e6:	4a22      	ldr	r2, [pc, #136]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80042e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042ec:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80042ee:	4a20      	ldr	r2, [pc, #128]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80042f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80042f4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80042f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042fa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80042fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004302:	d118      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004304:	f7fd ff74 	bl	80021f0 <HAL_GetTick>
 8004308:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800430c:	e00d      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7fd ff6f 	bl	80021f0 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004318:	1ad2      	subs	r2, r2, r3
 800431a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800431e:	429a      	cmp	r2, r3
 8004320:	d903      	bls.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8004328:	e005      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800432a:	4b11      	ldr	r3, [pc, #68]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800432c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0eb      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8004336:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800433a:	2b00      	cmp	r3, #0
 800433c:	d130      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800433e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004342:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004346:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800434a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800434e:	d115      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8004350:	4b07      	ldr	r3, [pc, #28]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004358:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800435c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004360:	091a      	lsrs	r2, r3, #4
 8004362:	4b05      	ldr	r3, [pc, #20]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004364:	4013      	ands	r3, r2
 8004366:	4a02      	ldr	r2, [pc, #8]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004368:	430b      	orrs	r3, r1
 800436a:	6113      	str	r3, [r2, #16]
 800436c:	e00c      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800436e:	bf00      	nop
 8004370:	58024400 	.word	0x58024400
 8004374:	58024800 	.word	0x58024800
 8004378:	00ffffcf 	.word	0x00ffffcf
 800437c:	4bd4      	ldr	r3, [pc, #848]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	4ad3      	ldr	r2, [pc, #844]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004382:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004386:	6113      	str	r3, [r2, #16]
 8004388:	4bd1      	ldr	r3, [pc, #836]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800438a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800438c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004390:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004398:	4acd      	ldr	r2, [pc, #820]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800439a:	430b      	orrs	r3, r1
 800439c:	6713      	str	r3, [r2, #112]	@ 0x70
 800439e:	e008      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80043a4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80043a8:	e003      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80043ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80043b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ba:	f002 0301 	and.w	r3, r2, #1
 80043be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043c2:	2300      	movs	r3, #0
 80043c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f000 808b 	beq.w	80044ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80043d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043dc:	2b28      	cmp	r3, #40	@ 0x28
 80043de:	d86b      	bhi.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80043e0:	a201      	add	r2, pc, #4	@ (adr r2, 80043e8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80043e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e6:	bf00      	nop
 80043e8:	080044c1 	.word	0x080044c1
 80043ec:	080044b9 	.word	0x080044b9
 80043f0:	080044b9 	.word	0x080044b9
 80043f4:	080044b9 	.word	0x080044b9
 80043f8:	080044b9 	.word	0x080044b9
 80043fc:	080044b9 	.word	0x080044b9
 8004400:	080044b9 	.word	0x080044b9
 8004404:	080044b9 	.word	0x080044b9
 8004408:	0800448d 	.word	0x0800448d
 800440c:	080044b9 	.word	0x080044b9
 8004410:	080044b9 	.word	0x080044b9
 8004414:	080044b9 	.word	0x080044b9
 8004418:	080044b9 	.word	0x080044b9
 800441c:	080044b9 	.word	0x080044b9
 8004420:	080044b9 	.word	0x080044b9
 8004424:	080044b9 	.word	0x080044b9
 8004428:	080044a3 	.word	0x080044a3
 800442c:	080044b9 	.word	0x080044b9
 8004430:	080044b9 	.word	0x080044b9
 8004434:	080044b9 	.word	0x080044b9
 8004438:	080044b9 	.word	0x080044b9
 800443c:	080044b9 	.word	0x080044b9
 8004440:	080044b9 	.word	0x080044b9
 8004444:	080044b9 	.word	0x080044b9
 8004448:	080044c1 	.word	0x080044c1
 800444c:	080044b9 	.word	0x080044b9
 8004450:	080044b9 	.word	0x080044b9
 8004454:	080044b9 	.word	0x080044b9
 8004458:	080044b9 	.word	0x080044b9
 800445c:	080044b9 	.word	0x080044b9
 8004460:	080044b9 	.word	0x080044b9
 8004464:	080044b9 	.word	0x080044b9
 8004468:	080044c1 	.word	0x080044c1
 800446c:	080044b9 	.word	0x080044b9
 8004470:	080044b9 	.word	0x080044b9
 8004474:	080044b9 	.word	0x080044b9
 8004478:	080044b9 	.word	0x080044b9
 800447c:	080044b9 	.word	0x080044b9
 8004480:	080044b9 	.word	0x080044b9
 8004484:	080044b9 	.word	0x080044b9
 8004488:	080044c1 	.word	0x080044c1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800448c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004490:	3308      	adds	r3, #8
 8004492:	2101      	movs	r1, #1
 8004494:	4618      	mov	r0, r3
 8004496:	f000 ffc5 	bl	8005424 <RCCEx_PLL2_Config>
 800449a:	4603      	mov	r3, r0
 800449c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80044a0:	e00f      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044a6:	3328      	adds	r3, #40	@ 0x28
 80044a8:	2101      	movs	r1, #1
 80044aa:	4618      	mov	r0, r3
 80044ac:	f001 f86c 	bl	8005588 <RCCEx_PLL3_Config>
 80044b0:	4603      	mov	r3, r0
 80044b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80044b6:	e004      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80044be:	e000      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80044c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10b      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80044ca:	4b81      	ldr	r3, [pc, #516]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80044cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ce:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80044d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044da:	4a7d      	ldr	r2, [pc, #500]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80044dc:	430b      	orrs	r3, r1
 80044de:	6553      	str	r3, [r2, #84]	@ 0x54
 80044e0:	e003      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80044e6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80044ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f2:	f002 0302 	and.w	r3, r2, #2
 80044f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044fa:	2300      	movs	r3, #0
 80044fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004500:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004504:	460b      	mov	r3, r1
 8004506:	4313      	orrs	r3, r2
 8004508:	d042      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800450a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800450e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004510:	2b05      	cmp	r3, #5
 8004512:	d825      	bhi.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8004514:	a201      	add	r2, pc, #4	@ (adr r2, 800451c <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8004516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451a:	bf00      	nop
 800451c:	08004569 	.word	0x08004569
 8004520:	08004535 	.word	0x08004535
 8004524:	0800454b 	.word	0x0800454b
 8004528:	08004569 	.word	0x08004569
 800452c:	08004569 	.word	0x08004569
 8004530:	08004569 	.word	0x08004569
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004534:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004538:	3308      	adds	r3, #8
 800453a:	2101      	movs	r1, #1
 800453c:	4618      	mov	r0, r3
 800453e:	f000 ff71 	bl	8005424 <RCCEx_PLL2_Config>
 8004542:	4603      	mov	r3, r0
 8004544:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004548:	e00f      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800454a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800454e:	3328      	adds	r3, #40	@ 0x28
 8004550:	2101      	movs	r1, #1
 8004552:	4618      	mov	r0, r3
 8004554:	f001 f818 	bl	8005588 <RCCEx_PLL3_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800455e:	e004      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004566:	e000      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8004568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800456a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10a      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004572:	4b57      	ldr	r3, [pc, #348]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004576:	f023 0107 	bic.w	r1, r3, #7
 800457a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800457e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004580:	4a53      	ldr	r2, [pc, #332]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004582:	430b      	orrs	r3, r1
 8004584:	6553      	str	r3, [r2, #84]	@ 0x54
 8004586:	e003      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004588:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800458c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004590:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004598:	f002 0304 	and.w	r3, r2, #4
 800459c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045a0:	2300      	movs	r3, #0
 80045a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4313      	orrs	r3, r2
 80045ae:	d044      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80045b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045b8:	2b05      	cmp	r3, #5
 80045ba:	d825      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80045bc:	a201      	add	r2, pc, #4	@ (adr r2, 80045c4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80045be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c2:	bf00      	nop
 80045c4:	08004611 	.word	0x08004611
 80045c8:	080045dd 	.word	0x080045dd
 80045cc:	080045f3 	.word	0x080045f3
 80045d0:	08004611 	.word	0x08004611
 80045d4:	08004611 	.word	0x08004611
 80045d8:	08004611 	.word	0x08004611
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045e0:	3308      	adds	r3, #8
 80045e2:	2101      	movs	r1, #1
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 ff1d 	bl	8005424 <RCCEx_PLL2_Config>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80045f0:	e00f      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045f6:	3328      	adds	r3, #40	@ 0x28
 80045f8:	2101      	movs	r1, #1
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 ffc4 	bl	8005588 <RCCEx_PLL3_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004606:	e004      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800460e:	e000      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8004610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004612:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10b      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800461a:	4b2d      	ldr	r3, [pc, #180]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800461c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800461e:	f023 0107 	bic.w	r1, r3, #7
 8004622:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004626:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800462a:	4a29      	ldr	r2, [pc, #164]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800462c:	430b      	orrs	r3, r1
 800462e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004630:	e003      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004632:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004636:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800463a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004642:	f002 0320 	and.w	r3, r2, #32
 8004646:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800464a:	2300      	movs	r3, #0
 800464c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004650:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004654:	460b      	mov	r3, r1
 8004656:	4313      	orrs	r3, r2
 8004658:	d057      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800465a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800465e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004662:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004666:	d035      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8004668:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800466c:	d82c      	bhi.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800466e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004672:	d031      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8004674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004678:	d826      	bhi.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800467a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800467e:	d02d      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8004680:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004684:	d820      	bhi.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004686:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800468a:	d012      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 800468c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004690:	d81a      	bhi.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004692:	2b00      	cmp	r3, #0
 8004694:	d024      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8004696:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800469a:	d115      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800469c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046a0:	3308      	adds	r3, #8
 80046a2:	2100      	movs	r1, #0
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 febd 	bl	8005424 <RCCEx_PLL2_Config>
 80046aa:	4603      	mov	r3, r0
 80046ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80046b0:	e017      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046b6:	3328      	adds	r3, #40	@ 0x28
 80046b8:	2102      	movs	r1, #2
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 ff64 	bl	8005588 <RCCEx_PLL3_Config>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80046c6:	e00c      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80046ce:	e008      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80046d0:	58024400 	.word	0x58024400
        break;
 80046d4:	bf00      	nop
 80046d6:	e004      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80046d8:	bf00      	nop
 80046da:	e002      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80046dc:	bf00      	nop
 80046de:	e000      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80046e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10b      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046ea:	4bc2      	ldr	r3, [pc, #776]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80046f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046fa:	4abe      	ldr	r2, [pc, #760]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046fc:	430b      	orrs	r3, r1
 80046fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8004700:	e003      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004702:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004706:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800470a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004712:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004716:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800471a:	2300      	movs	r3, #0
 800471c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004720:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004724:	460b      	mov	r3, r1
 8004726:	4313      	orrs	r3, r2
 8004728:	d055      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800472a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800472e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004732:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004736:	d033      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8004738:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800473c:	d82c      	bhi.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800473e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004742:	d02f      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8004744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004748:	d826      	bhi.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800474a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800474e:	d02b      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8004750:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004754:	d820      	bhi.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004756:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800475a:	d012      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 800475c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004760:	d81a      	bhi.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004762:	2b00      	cmp	r3, #0
 8004764:	d022      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8004766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800476a:	d115      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800476c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004770:	3308      	adds	r3, #8
 8004772:	2100      	movs	r1, #0
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fe55 	bl	8005424 <RCCEx_PLL2_Config>
 800477a:	4603      	mov	r3, r0
 800477c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004780:	e015      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004782:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004786:	3328      	adds	r3, #40	@ 0x28
 8004788:	2102      	movs	r1, #2
 800478a:	4618      	mov	r0, r3
 800478c:	f000 fefc 	bl	8005588 <RCCEx_PLL3_Config>
 8004790:	4603      	mov	r3, r0
 8004792:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004796:	e00a      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800479e:	e006      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80047a0:	bf00      	nop
 80047a2:	e004      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80047a4:	bf00      	nop
 80047a6:	e002      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80047a8:	bf00      	nop
 80047aa:	e000      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80047ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10b      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047b6:	4b8f      	ldr	r3, [pc, #572]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ba:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80047be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80047c6:	4a8b      	ldr	r2, [pc, #556]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047c8:	430b      	orrs	r3, r1
 80047ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80047cc:	e003      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80047d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80047d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047de:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80047e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047e6:	2300      	movs	r3, #0
 80047e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047ec:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80047f0:	460b      	mov	r3, r1
 80047f2:	4313      	orrs	r3, r2
 80047f4:	d055      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80047f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80047fe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004802:	d033      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004804:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004808:	d82c      	bhi.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800480a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800480e:	d02f      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004810:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004814:	d826      	bhi.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004816:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800481a:	d02b      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800481c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004820:	d820      	bhi.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004822:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004826:	d012      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8004828:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800482c:	d81a      	bhi.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800482e:	2b00      	cmp	r3, #0
 8004830:	d022      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8004832:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004836:	d115      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004838:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800483c:	3308      	adds	r3, #8
 800483e:	2100      	movs	r1, #0
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fdef 	bl	8005424 <RCCEx_PLL2_Config>
 8004846:	4603      	mov	r3, r0
 8004848:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800484c:	e015      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800484e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004852:	3328      	adds	r3, #40	@ 0x28
 8004854:	2102      	movs	r1, #2
 8004856:	4618      	mov	r0, r3
 8004858:	f000 fe96 	bl	8005588 <RCCEx_PLL3_Config>
 800485c:	4603      	mov	r3, r0
 800485e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004862:	e00a      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800486a:	e006      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800486c:	bf00      	nop
 800486e:	e004      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004870:	bf00      	nop
 8004872:	e002      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004874:	bf00      	nop
 8004876:	e000      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800487a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10b      	bne.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004882:	4b5c      	ldr	r3, [pc, #368]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004886:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800488a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800488e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004892:	4a58      	ldr	r2, [pc, #352]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004894:	430b      	orrs	r3, r1
 8004896:	6593      	str	r3, [r2, #88]	@ 0x58
 8004898:	e003      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800489e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80048a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048aa:	f002 0308 	and.w	r3, r2, #8
 80048ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048b2:	2300      	movs	r3, #0
 80048b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80048b8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80048bc:	460b      	mov	r3, r1
 80048be:	4313      	orrs	r3, r2
 80048c0:	d01e      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80048c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ce:	d10c      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048d4:	3328      	adds	r3, #40	@ 0x28
 80048d6:	2102      	movs	r1, #2
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 fe55 	bl	8005588 <RCCEx_PLL3_Config>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80048ea:	4b42      	ldr	r3, [pc, #264]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fa:	4a3e      	ldr	r2, [pc, #248]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048fc:	430b      	orrs	r3, r1
 80048fe:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004900:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004908:	f002 0310 	and.w	r3, r2, #16
 800490c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004910:	2300      	movs	r3, #0
 8004912:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004916:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800491a:	460b      	mov	r3, r1
 800491c:	4313      	orrs	r3, r2
 800491e:	d01e      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004920:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004924:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800492c:	d10c      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800492e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004932:	3328      	adds	r3, #40	@ 0x28
 8004934:	2102      	movs	r1, #2
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fe26 	bl	8005588 <RCCEx_PLL3_Config>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d002      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004948:	4b2a      	ldr	r3, [pc, #168]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800494a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800494c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004950:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004954:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004958:	4a26      	ldr	r2, [pc, #152]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800495a:	430b      	orrs	r3, r1
 800495c:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800495e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004966:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800496a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800496e:	2300      	movs	r3, #0
 8004970:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004974:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004978:	460b      	mov	r3, r1
 800497a:	4313      	orrs	r3, r2
 800497c:	d040      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800497e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004982:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004986:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800498a:	d022      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 800498c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004990:	d81b      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8004996:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800499a:	d00b      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 800499c:	e015      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800499e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049a2:	3308      	adds	r3, #8
 80049a4:	2100      	movs	r1, #0
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fd3c 	bl	8005424 <RCCEx_PLL2_Config>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80049b2:	e00f      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049b8:	3328      	adds	r3, #40	@ 0x28
 80049ba:	2102      	movs	r1, #2
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fde3 	bl	8005588 <RCCEx_PLL3_Config>
 80049c2:	4603      	mov	r3, r0
 80049c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80049c8:	e004      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80049d0:	e000      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80049d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10d      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049dc:	4b05      	ldr	r3, [pc, #20]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80049e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80049ec:	4a01      	ldr	r2, [pc, #4]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049ee:	430b      	orrs	r3, r1
 80049f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80049f2:	e005      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80049f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80049fc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004a0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a0e:	2300      	movs	r3, #0
 8004a10:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a12:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004a16:	460b      	mov	r3, r1
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	d03b      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004a1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a28:	d01f      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8004a2a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a2e:	d818      	bhi.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8004a30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a34:	d003      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8004a36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a3a:	d007      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8004a3c:	e011      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a3e:	4b64      	ldr	r3, [pc, #400]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a42:	4a63      	ldr	r2, [pc, #396]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a4a:	e00f      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a50:	3328      	adds	r3, #40	@ 0x28
 8004a52:	2101      	movs	r1, #1
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 fd97 	bl	8005588 <RCCEx_PLL3_Config>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a60:	e004      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004a68:	e000      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8004a6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a6c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10b      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a74:	4b56      	ldr	r3, [pc, #344]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a78:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a84:	4a52      	ldr	r2, [pc, #328]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004a86:	430b      	orrs	r3, r1
 8004a88:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a8a:	e003      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004a90:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004a94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004aa0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	677b      	str	r3, [r7, #116]	@ 0x74
 8004aa6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4313      	orrs	r3, r2
 8004aae:	d031      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004ab0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8004aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004abe:	d007      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004ac0:	e011      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ac2:	4b43      	ldr	r3, [pc, #268]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac6:	4a42      	ldr	r2, [pc, #264]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004acc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ace:	e00e      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ad0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	2102      	movs	r1, #2
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 fca3 	bl	8005424 <RCCEx_PLL2_Config>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ae4:	e003      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10a      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004af6:	4b36      	ldr	r3, [pc, #216]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004afa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004afe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b04:	4a32      	ldr	r2, [pc, #200]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004b06:	430b      	orrs	r3, r1
 8004b08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b0a:	e003      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b10:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004b20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b22:	2300      	movs	r3, #0
 8004b24:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b26:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	d00c      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b34:	3328      	adds	r3, #40	@ 0x28
 8004b36:	2102      	movs	r1, #2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fd25 	bl	8005588 <RCCEx_PLL3_Config>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b52:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004b56:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b58:	2300      	movs	r3, #0
 8004b5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b5c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004b60:	460b      	mov	r3, r1
 8004b62:	4313      	orrs	r3, r2
 8004b64:	d03a      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004b66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b72:	d018      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8004b74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b78:	d811      	bhi.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8004b7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b7e:	d014      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8004b80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b84:	d80b      	bhi.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d011      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8004b8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b8e:	d106      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b90:	4b0f      	ldr	r3, [pc, #60]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b94:	4a0e      	ldr	r2, [pc, #56]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004b96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004ba4:	e004      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004ba6:	bf00      	nop
 8004ba8:	e002      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004baa:	bf00      	nop
 8004bac:	e000      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bb0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10d      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bb8:	4b05      	ldr	r3, [pc, #20]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bbc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004bc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bc8:	4a01      	ldr	r2, [pc, #4]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004bca:	430b      	orrs	r3, r1
 8004bcc:	6553      	str	r3, [r2, #84]	@ 0x54
 8004bce:	e005      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8004bd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004bd8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004be8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bea:	2300      	movs	r3, #0
 8004bec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	d009      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004bf8:	4baa      	ldr	r3, [pc, #680]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bfc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004c00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c06:	4aa7      	ldr	r2, [pc, #668]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004c08:	430b      	orrs	r3, r1
 8004c0a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004c0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c14:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004c18:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c1e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004c22:	460b      	mov	r3, r1
 8004c24:	4313      	orrs	r3, r2
 8004c26:	d00a      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004c28:	4b9e      	ldr	r3, [pc, #632]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004c30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c34:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004c38:	4a9a      	ldr	r2, [pc, #616]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004c3a:	430b      	orrs	r3, r1
 8004c3c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c46:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c50:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004c54:	460b      	mov	r3, r1
 8004c56:	4313      	orrs	r3, r2
 8004c58:	d009      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c5a:	4b92      	ldr	r3, [pc, #584]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c5e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004c62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c68:	4a8e      	ldr	r2, [pc, #568]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004c6a:	430b      	orrs	r3, r1
 8004c6c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004c7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c80:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004c84:	460b      	mov	r3, r1
 8004c86:	4313      	orrs	r3, r2
 8004c88:	d00e      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c8a:	4b86      	ldr	r3, [pc, #536]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	4a85      	ldr	r2, [pc, #532]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004c90:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c94:	6113      	str	r3, [r2, #16]
 8004c96:	4b83      	ldr	r3, [pc, #524]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004c98:	6919      	ldr	r1, [r3, #16]
 8004c9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c9e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004ca2:	4a80      	ldr	r2, [pc, #512]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ca8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	d009      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004cc4:	4b77      	ldr	r3, [pc, #476]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004ccc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd2:	4a74      	ldr	r2, [pc, #464]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004ce4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004cee:	460b      	mov	r3, r1
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	d00a      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cf4:	4b6b      	ldr	r3, [pc, #428]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004cfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d04:	4a67      	ldr	r2, [pc, #412]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004d06:	430b      	orrs	r3, r1
 8004d08:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004d0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	2100      	movs	r1, #0
 8004d14:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d1c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004d20:	460b      	mov	r3, r1
 8004d22:	4313      	orrs	r3, r2
 8004d24:	d011      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d2a:	3308      	adds	r3, #8
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fb78 	bl	8005424 <RCCEx_PLL2_Config>
 8004d34:	4603      	mov	r3, r0
 8004d36:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004d3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d42:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d46:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004d4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d52:	2100      	movs	r1, #0
 8004d54:	6239      	str	r1, [r7, #32]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d5c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004d60:	460b      	mov	r3, r1
 8004d62:	4313      	orrs	r3, r2
 8004d64:	d011      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d6a:	3308      	adds	r3, #8
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fb58 	bl	8005424 <RCCEx_PLL2_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004d7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d86:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004d8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d92:	2100      	movs	r1, #0
 8004d94:	61b9      	str	r1, [r7, #24]
 8004d96:	f003 0304 	and.w	r3, r3, #4
 8004d9a:	61fb      	str	r3, [r7, #28]
 8004d9c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004da0:	460b      	mov	r3, r1
 8004da2:	4313      	orrs	r3, r2
 8004da4:	d011      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004da6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004daa:	3308      	adds	r3, #8
 8004dac:	2102      	movs	r1, #2
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fb38 	bl	8005424 <RCCEx_PLL2_Config>
 8004db4:	4603      	mov	r3, r0
 8004db6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004dba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004dc6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004dca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	6139      	str	r1, [r7, #16]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004de0:	460b      	mov	r3, r1
 8004de2:	4313      	orrs	r3, r2
 8004de4:	d011      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004de6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004dea:	3328      	adds	r3, #40	@ 0x28
 8004dec:	2100      	movs	r1, #0
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 fbca 	bl	8005588 <RCCEx_PLL3_Config>
 8004df4:	4603      	mov	r3, r0
 8004df6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8004dfa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e06:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004e0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e12:	2100      	movs	r1, #0
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004e20:	460b      	mov	r3, r1
 8004e22:	4313      	orrs	r3, r2
 8004e24:	d011      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e2a:	3328      	adds	r3, #40	@ 0x28
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 fbaa 	bl	8005588 <RCCEx_PLL3_Config>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004e3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e42:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e46:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004e4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e52:	2100      	movs	r1, #0
 8004e54:	6039      	str	r1, [r7, #0]
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	607b      	str	r3, [r7, #4]
 8004e5c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004e60:	460b      	mov	r3, r1
 8004e62:	4313      	orrs	r3, r2
 8004e64:	d011      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e6a:	3328      	adds	r3, #40	@ 0x28
 8004e6c:	2102      	movs	r1, #2
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fb8a 	bl	8005588 <RCCEx_PLL3_Config>
 8004e74:	4603      	mov	r3, r0
 8004e76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004e7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e86:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8004e8a:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	e000      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea4:	58024400 	.word	0x58024400

08004ea8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004eac:	f7fe fd14 	bl	80038d8 <HAL_RCC_GetHCLKFreq>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	4b06      	ldr	r3, [pc, #24]	@ (8004ecc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	091b      	lsrs	r3, r3, #4
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	4904      	ldr	r1, [pc, #16]	@ (8004ed0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004ebe:	5ccb      	ldrb	r3, [r1, r3]
 8004ec0:	f003 031f 	and.w	r3, r3, #31
 8004ec4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	58024400 	.word	0x58024400
 8004ed0:	0800bf74 	.word	0x0800bf74

08004ed4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b089      	sub	sp, #36	@ 0x24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004edc:	4ba1      	ldr	r3, [pc, #644]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee0:	f003 0303 	and.w	r3, r3, #3
 8004ee4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004ee6:	4b9f      	ldr	r3, [pc, #636]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eea:	0b1b      	lsrs	r3, r3, #12
 8004eec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ef0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004ef2:	4b9c      	ldr	r3, [pc, #624]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef6:	091b      	lsrs	r3, r3, #4
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004efe:	4b99      	ldr	r3, [pc, #612]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f02:	08db      	lsrs	r3, r3, #3
 8004f04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	fb02 f303 	mul.w	r3, r2, r3
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 8111 	beq.w	8005144 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	f000 8083 	beq.w	8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	f200 80a1 	bhi.w	8005074 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d056      	beq.n	8004fec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004f3e:	e099      	b.n	8005074 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f40:	4b88      	ldr	r3, [pc, #544]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d02d      	beq.n	8004fa8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f4c:	4b85      	ldr	r3, [pc, #532]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	08db      	lsrs	r3, r3, #3
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	4a84      	ldr	r2, [pc, #528]	@ (8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004f58:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	ee07 3a90 	vmov	s15, r3
 8004f64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f76:	4b7b      	ldr	r3, [pc, #492]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f8a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800516c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004fa6:	e087      	b.n	80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	ee07 3a90 	vmov	s15, r3
 8004fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005170 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fba:	4b6a      	ldr	r3, [pc, #424]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800516c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fea:	e065      	b.n	80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	ee07 3a90 	vmov	s15, r3
 8004ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005174 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ffe:	4b59      	ldr	r3, [pc, #356]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800500e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005012:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800516c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800501a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800501e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800502a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800502e:	e043      	b.n	80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	ee07 3a90 	vmov	s15, r3
 8005036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800503a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800503e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005042:	4b48      	ldr	r3, [pc, #288]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504a:	ee07 3a90 	vmov	s15, r3
 800504e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005052:	ed97 6a03 	vldr	s12, [r7, #12]
 8005056:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800516c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800505a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800505e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800506a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800506e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005072:	e021      	b.n	80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005174 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005086:	4b37      	ldr	r3, [pc, #220]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800508a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005096:	ed97 6a03 	vldr	s12, [r7, #12]
 800509a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800516c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800509e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80050b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050bc:	0a5b      	lsrs	r3, r3, #9
 80050be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80050d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050de:	ee17 2a90 	vmov	r2, s15
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80050e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ea:	0c1b      	lsrs	r3, r3, #16
 80050ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050f0:	ee07 3a90 	vmov	s15, r3
 80050f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005100:	edd7 6a07 	vldr	s13, [r7, #28]
 8005104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800510c:	ee17 2a90 	vmov	r2, s15
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005114:	4b13      	ldr	r3, [pc, #76]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005118:	0e1b      	lsrs	r3, r3, #24
 800511a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005126:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800512a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800512e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800513a:	ee17 2a90 	vmov	r2, s15
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005142:	e008      	b.n	8005156 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	609a      	str	r2, [r3, #8]
}
 8005156:	bf00      	nop
 8005158:	3724      	adds	r7, #36	@ 0x24
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	58024400 	.word	0x58024400
 8005168:	03d09000 	.word	0x03d09000
 800516c:	46000000 	.word	0x46000000
 8005170:	4c742400 	.word	0x4c742400
 8005174:	4a742400 	.word	0x4a742400
 8005178:	4bbebc20 	.word	0x4bbebc20

0800517c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800517c:	b480      	push	{r7}
 800517e:	b089      	sub	sp, #36	@ 0x24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005184:	4ba1      	ldr	r3, [pc, #644]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005188:	f003 0303 	and.w	r3, r3, #3
 800518c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800518e:	4b9f      	ldr	r3, [pc, #636]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005192:	0d1b      	lsrs	r3, r3, #20
 8005194:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005198:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800519a:	4b9c      	ldr	r3, [pc, #624]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800519c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519e:	0a1b      	lsrs	r3, r3, #8
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80051a6:	4b99      	ldr	r3, [pc, #612]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051aa:	08db      	lsrs	r3, r3, #3
 80051ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	fb02 f303 	mul.w	r3, r2, r3
 80051b6:	ee07 3a90 	vmov	s15, r3
 80051ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 8111 	beq.w	80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	f000 8083 	beq.w	80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	f200 80a1 	bhi.w	800531c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d056      	beq.n	8005294 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80051e6:	e099      	b.n	800531c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051e8:	4b88      	ldr	r3, [pc, #544]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0320 	and.w	r3, r3, #32
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d02d      	beq.n	8005250 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051f4:	4b85      	ldr	r3, [pc, #532]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	08db      	lsrs	r3, r3, #3
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	4a84      	ldr	r2, [pc, #528]	@ (8005410 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005200:	fa22 f303 	lsr.w	r3, r2, r3
 8005204:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	ee07 3a90 	vmov	s15, r3
 800520c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800521e:	4b7b      	ldr	r3, [pc, #492]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800522e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005232:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800523a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800523e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800524a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800524e:	e087      	b.n	8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005418 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800525e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005262:	4b6a      	ldr	r3, [pc, #424]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005272:	ed97 6a03 	vldr	s12, [r7, #12]
 8005276:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800527a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800527e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005282:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800528a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800528e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005292:	e065      	b.n	8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	ee07 3a90 	vmov	s15, r3
 800529a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800529e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800541c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80052a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052a6:	4b59      	ldr	r3, [pc, #356]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ae:	ee07 3a90 	vmov	s15, r3
 80052b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80052ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052d6:	e043      	b.n	8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	ee07 3a90 	vmov	s15, r3
 80052de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005420 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80052e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ea:	4b48      	ldr	r3, [pc, #288]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80052fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800530a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800530e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800531a:	e021      	b.n	8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	ee07 3a90 	vmov	s15, r3
 8005322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005326:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800541c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800532a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800532e:	4b37      	ldr	r3, [pc, #220]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800533e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005342:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800534a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800534e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800535a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800535e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005360:	4b2a      	ldr	r3, [pc, #168]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005364:	0a5b      	lsrs	r3, r3, #9
 8005366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005372:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005376:	ee37 7a87 	vadd.f32	s14, s15, s14
 800537a:	edd7 6a07 	vldr	s13, [r7, #28]
 800537e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005386:	ee17 2a90 	vmov	r2, s15
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800538e:	4b1f      	ldr	r3, [pc, #124]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005392:	0c1b      	lsrs	r3, r3, #16
 8005394:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005398:	ee07 3a90 	vmov	s15, r3
 800539c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80053ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053b4:	ee17 2a90 	vmov	r2, s15
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80053bc:	4b13      	ldr	r3, [pc, #76]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c0:	0e1b      	lsrs	r3, r3, #24
 80053c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80053da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053e2:	ee17 2a90 	vmov	r2, s15
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80053ea:	e008      	b.n	80053fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	609a      	str	r2, [r3, #8]
}
 80053fe:	bf00      	nop
 8005400:	3724      	adds	r7, #36	@ 0x24
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	58024400 	.word	0x58024400
 8005410:	03d09000 	.word	0x03d09000
 8005414:	46000000 	.word	0x46000000
 8005418:	4c742400 	.word	0x4c742400
 800541c:	4a742400 	.word	0x4a742400
 8005420:	4bbebc20 	.word	0x4bbebc20

08005424 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005432:	4b53      	ldr	r3, [pc, #332]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 8005434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	2b03      	cmp	r3, #3
 800543c:	d101      	bne.n	8005442 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e099      	b.n	8005576 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005442:	4b4f      	ldr	r3, [pc, #316]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a4e      	ldr	r2, [pc, #312]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 8005448:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800544c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800544e:	f7fc fecf 	bl	80021f0 <HAL_GetTick>
 8005452:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005454:	e008      	b.n	8005468 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005456:	f7fc fecb 	bl	80021f0 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d901      	bls.n	8005468 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e086      	b.n	8005576 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005468:	4b45      	ldr	r3, [pc, #276]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1f0      	bne.n	8005456 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005474:	4b42      	ldr	r3, [pc, #264]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 8005476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005478:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	031b      	lsls	r3, r3, #12
 8005482:	493f      	ldr	r1, [pc, #252]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 8005484:	4313      	orrs	r3, r2
 8005486:	628b      	str	r3, [r1, #40]	@ 0x28
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	3b01      	subs	r3, #1
 800548e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	3b01      	subs	r3, #1
 8005498:	025b      	lsls	r3, r3, #9
 800549a:	b29b      	uxth	r3, r3
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	041b      	lsls	r3, r3, #16
 80054a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054aa:	431a      	orrs	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	3b01      	subs	r3, #1
 80054b2:	061b      	lsls	r3, r3, #24
 80054b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80054b8:	4931      	ldr	r1, [pc, #196]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80054be:	4b30      	ldr	r3, [pc, #192]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 80054c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	492d      	ldr	r1, [pc, #180]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80054d0:	4b2b      	ldr	r3, [pc, #172]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 80054d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d4:	f023 0220 	bic.w	r2, r3, #32
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	4928      	ldr	r1, [pc, #160]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80054e2:	4b27      	ldr	r3, [pc, #156]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 80054e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e6:	4a26      	ldr	r2, [pc, #152]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 80054e8:	f023 0310 	bic.w	r3, r3, #16
 80054ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80054ee:	4b24      	ldr	r3, [pc, #144]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 80054f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054f2:	4b24      	ldr	r3, [pc, #144]	@ (8005584 <RCCEx_PLL2_Config+0x160>)
 80054f4:	4013      	ands	r3, r2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	69d2      	ldr	r2, [r2, #28]
 80054fa:	00d2      	lsls	r2, r2, #3
 80054fc:	4920      	ldr	r1, [pc, #128]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005502:	4b1f      	ldr	r3, [pc, #124]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 8005504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005506:	4a1e      	ldr	r2, [pc, #120]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 8005508:	f043 0310 	orr.w	r3, r3, #16
 800550c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d106      	bne.n	8005522 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005514:	4b1a      	ldr	r3, [pc, #104]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 8005516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005518:	4a19      	ldr	r2, [pc, #100]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 800551a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800551e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005520:	e00f      	b.n	8005542 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d106      	bne.n	8005536 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005528:	4b15      	ldr	r3, [pc, #84]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 800552a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552c:	4a14      	ldr	r2, [pc, #80]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 800552e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005532:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005534:	e005      	b.n	8005542 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005536:	4b12      	ldr	r3, [pc, #72]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 8005538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553a:	4a11      	ldr	r2, [pc, #68]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 800553c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005540:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005542:	4b0f      	ldr	r3, [pc, #60]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a0e      	ldr	r2, [pc, #56]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 8005548:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800554c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800554e:	f7fc fe4f 	bl	80021f0 <HAL_GetTick>
 8005552:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005554:	e008      	b.n	8005568 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005556:	f7fc fe4b 	bl	80021f0 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d901      	bls.n	8005568 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e006      	b.n	8005576 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005568:	4b05      	ldr	r3, [pc, #20]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0f0      	beq.n	8005556 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005574:	7bfb      	ldrb	r3, [r7, #15]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	58024400 	.word	0x58024400
 8005584:	ffff0007 	.word	0xffff0007

08005588 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005596:	4b53      	ldr	r3, [pc, #332]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 8005598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559a:	f003 0303 	and.w	r3, r3, #3
 800559e:	2b03      	cmp	r3, #3
 80055a0:	d101      	bne.n	80055a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e099      	b.n	80056da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80055a6:	4b4f      	ldr	r3, [pc, #316]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a4e      	ldr	r2, [pc, #312]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 80055ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055b2:	f7fc fe1d 	bl	80021f0 <HAL_GetTick>
 80055b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055b8:	e008      	b.n	80055cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80055ba:	f7fc fe19 	bl	80021f0 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e086      	b.n	80056da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055cc:	4b45      	ldr	r3, [pc, #276]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1f0      	bne.n	80055ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80055d8:	4b42      	ldr	r3, [pc, #264]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 80055da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055dc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	051b      	lsls	r3, r3, #20
 80055e6:	493f      	ldr	r1, [pc, #252]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	3b01      	subs	r3, #1
 80055f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	3b01      	subs	r3, #1
 80055fc:	025b      	lsls	r3, r3, #9
 80055fe:	b29b      	uxth	r3, r3
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	3b01      	subs	r3, #1
 8005608:	041b      	lsls	r3, r3, #16
 800560a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	3b01      	subs	r3, #1
 8005616:	061b      	lsls	r3, r3, #24
 8005618:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800561c:	4931      	ldr	r1, [pc, #196]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 800561e:	4313      	orrs	r3, r2
 8005620:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005622:	4b30      	ldr	r3, [pc, #192]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 8005624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005626:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	492d      	ldr	r1, [pc, #180]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 8005630:	4313      	orrs	r3, r2
 8005632:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005634:	4b2b      	ldr	r3, [pc, #172]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 8005636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005638:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	4928      	ldr	r1, [pc, #160]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 8005642:	4313      	orrs	r3, r2
 8005644:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005646:	4b27      	ldr	r3, [pc, #156]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 8005648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564a:	4a26      	ldr	r2, [pc, #152]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 800564c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005650:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005652:	4b24      	ldr	r3, [pc, #144]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 8005654:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005656:	4b24      	ldr	r3, [pc, #144]	@ (80056e8 <RCCEx_PLL3_Config+0x160>)
 8005658:	4013      	ands	r3, r2
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	69d2      	ldr	r2, [r2, #28]
 800565e:	00d2      	lsls	r2, r2, #3
 8005660:	4920      	ldr	r1, [pc, #128]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 8005662:	4313      	orrs	r3, r2
 8005664:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005666:	4b1f      	ldr	r3, [pc, #124]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 8005668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566a:	4a1e      	ldr	r2, [pc, #120]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 800566c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005670:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d106      	bne.n	8005686 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005678:	4b1a      	ldr	r3, [pc, #104]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 800567a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567c:	4a19      	ldr	r2, [pc, #100]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 800567e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005682:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005684:	e00f      	b.n	80056a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d106      	bne.n	800569a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800568c:	4b15      	ldr	r3, [pc, #84]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 800568e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005690:	4a14      	ldr	r2, [pc, #80]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 8005692:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005696:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005698:	e005      	b.n	80056a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800569a:	4b12      	ldr	r3, [pc, #72]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 800569c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569e:	4a11      	ldr	r2, [pc, #68]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 80056a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80056a6:	4b0f      	ldr	r3, [pc, #60]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a0e      	ldr	r2, [pc, #56]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 80056ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b2:	f7fc fd9d 	bl	80021f0 <HAL_GetTick>
 80056b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056b8:	e008      	b.n	80056cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80056ba:	f7fc fd99 	bl	80021f0 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e006      	b.n	80056da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056cc:	4b05      	ldr	r3, [pc, #20]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0f0      	beq.n	80056ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	58024400 	.word	0x58024400
 80056e8:	ffff0007 	.word	0xffff0007

080056ec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e10f      	b.n	800591e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a87      	ldr	r2, [pc, #540]	@ (8005928 <HAL_SPI_Init+0x23c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00f      	beq.n	800572e <HAL_SPI_Init+0x42>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a86      	ldr	r2, [pc, #536]	@ (800592c <HAL_SPI_Init+0x240>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d00a      	beq.n	800572e <HAL_SPI_Init+0x42>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a84      	ldr	r2, [pc, #528]	@ (8005930 <HAL_SPI_Init+0x244>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d005      	beq.n	800572e <HAL_SPI_Init+0x42>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	2b0f      	cmp	r3, #15
 8005728:	d901      	bls.n	800572e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e0f7      	b.n	800591e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fef6 	bl	8006520 <SPI_GetPacketSize>
 8005734:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a7b      	ldr	r2, [pc, #492]	@ (8005928 <HAL_SPI_Init+0x23c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d00c      	beq.n	800575a <HAL_SPI_Init+0x6e>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a79      	ldr	r2, [pc, #484]	@ (800592c <HAL_SPI_Init+0x240>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d007      	beq.n	800575a <HAL_SPI_Init+0x6e>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a78      	ldr	r2, [pc, #480]	@ (8005930 <HAL_SPI_Init+0x244>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d002      	beq.n	800575a <HAL_SPI_Init+0x6e>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b08      	cmp	r3, #8
 8005758:	d811      	bhi.n	800577e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800575e:	4a72      	ldr	r2, [pc, #456]	@ (8005928 <HAL_SPI_Init+0x23c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d009      	beq.n	8005778 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a70      	ldr	r2, [pc, #448]	@ (800592c <HAL_SPI_Init+0x240>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d004      	beq.n	8005778 <HAL_SPI_Init+0x8c>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a6f      	ldr	r2, [pc, #444]	@ (8005930 <HAL_SPI_Init+0x244>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d104      	bne.n	8005782 <HAL_SPI_Init+0x96>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b10      	cmp	r3, #16
 800577c:	d901      	bls.n	8005782 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e0cd      	b.n	800591e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d106      	bne.n	800579c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fc f988 	bl	8001aac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0201 	bic.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80057be:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057c8:	d119      	bne.n	80057fe <HAL_SPI_Init+0x112>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057d2:	d103      	bne.n	80057dc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d008      	beq.n	80057ee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10c      	bne.n	80057fe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80057e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057ec:	d107      	bne.n	80057fe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80057fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00f      	beq.n	800582a <HAL_SPI_Init+0x13e>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	2b06      	cmp	r3, #6
 8005810:	d90b      	bls.n	800582a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	e007      	b.n	800583a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005838:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69da      	ldr	r2, [r3, #28]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005842:	431a      	orrs	r2, r3
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584c:	ea42 0103 	orr.w	r1, r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005864:	431a      	orrs	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	431a      	orrs	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	431a      	orrs	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800589a:	ea42 0103 	orr.w	r1, r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d113      	bne.n	80058da <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058c4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80058d8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0201 	bic.w	r2, r2, #1
 80058e8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	40013000 	.word	0x40013000
 800592c:	40003800 	.word	0x40003800
 8005930:	40003c00 	.word	0x40003c00

08005934 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b088      	sub	sp, #32
 8005938:	af02      	add	r7, sp, #8
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	603b      	str	r3, [r7, #0]
 8005940:	4613      	mov	r3, r2
 8005942:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3320      	adds	r3, #32
 800594a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800594c:	f7fc fc50 	bl	80021f0 <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b01      	cmp	r3, #1
 800595c:	d001      	beq.n	8005962 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800595e:	2302      	movs	r3, #2
 8005960:	e1d1      	b.n	8005d06 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <HAL_SPI_Transmit+0x3a>
 8005968:	88fb      	ldrh	r3, [r7, #6]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e1c9      	b.n	8005d06 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005978:	2b01      	cmp	r3, #1
 800597a:	d101      	bne.n	8005980 <HAL_SPI_Transmit+0x4c>
 800597c:	2302      	movs	r3, #2
 800597e:	e1c2      	b.n	8005d06 <HAL_SPI_Transmit+0x3d2>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2203      	movs	r2, #3
 800598c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	88fa      	ldrh	r2, [r7, #6]
 80059a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	88fa      	ldrh	r2, [r7, #6]
 80059aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80059d8:	d108      	bne.n	80059ec <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	e009      	b.n	8005a00 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80059fe:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	4b96      	ldr	r3, [pc, #600]	@ (8005c60 <HAL_SPI_Transmit+0x32c>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	88f9      	ldrh	r1, [r7, #6]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	6812      	ldr	r2, [r2, #0]
 8005a10:	430b      	orrs	r3, r1
 8005a12:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0201 	orr.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a2c:	d107      	bne.n	8005a3e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	2b0f      	cmp	r3, #15
 8005a44:	d947      	bls.n	8005ad6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005a46:	e03f      	b.n	8005ac8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d114      	bne.n	8005a80 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6812      	ldr	r2, [r2, #0]
 8005a60:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a66:	1d1a      	adds	r2, r3, #4
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	3b01      	subs	r3, #1
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005a7e:	e023      	b.n	8005ac8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a80:	f7fc fbb6 	bl	80021f0 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d803      	bhi.n	8005a98 <HAL_SPI_Transmit+0x164>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a96:	d102      	bne.n	8005a9e <HAL_SPI_Transmit+0x16a>
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d114      	bne.n	8005ac8 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 fc70 	bl	8006384 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aaa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e11e      	b.n	8005d06 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1b9      	bne.n	8005a48 <HAL_SPI_Transmit+0x114>
 8005ad4:	e0f1      	b.n	8005cba <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	2b07      	cmp	r3, #7
 8005adc:	f240 80e6 	bls.w	8005cac <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005ae0:	e05d      	b.n	8005b9e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d132      	bne.n	8005b56 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d918      	bls.n	8005b2e <HAL_SPI_Transmit+0x1fa>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d014      	beq.n	8005b2e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6812      	ldr	r2, [r2, #0]
 8005b0e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b14:	1d1a      	adds	r2, r3, #4
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	3b02      	subs	r3, #2
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005b2c:	e037      	b.n	8005b9e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b32:	881a      	ldrh	r2, [r3, #0]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b3c:	1c9a      	adds	r2, r3, #2
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005b54:	e023      	b.n	8005b9e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b56:	f7fc fb4b 	bl	80021f0 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d803      	bhi.n	8005b6e <HAL_SPI_Transmit+0x23a>
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6c:	d102      	bne.n	8005b74 <HAL_SPI_Transmit+0x240>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d114      	bne.n	8005b9e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 fc05 	bl	8006384 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b80:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e0b3      	b.n	8005d06 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d19b      	bne.n	8005ae2 <HAL_SPI_Transmit+0x1ae>
 8005baa:	e086      	b.n	8005cba <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d154      	bne.n	8005c64 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d918      	bls.n	8005bf8 <HAL_SPI_Transmit+0x2c4>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bca:	2b40      	cmp	r3, #64	@ 0x40
 8005bcc:	d914      	bls.n	8005bf8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6812      	ldr	r2, [r2, #0]
 8005bd8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bde:	1d1a      	adds	r2, r3, #4
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	3b04      	subs	r3, #4
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005bf6:	e059      	b.n	8005cac <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d917      	bls.n	8005c34 <HAL_SPI_Transmit+0x300>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d013      	beq.n	8005c34 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c10:	881a      	ldrh	r2, [r3, #0]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c1a:	1c9a      	adds	r2, r3, #2
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b02      	subs	r3, #2
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005c32:	e03b      	b.n	8005cac <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3320      	adds	r3, #32
 8005c3e:	7812      	ldrb	r2, [r2, #0]
 8005c40:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	3b01      	subs	r3, #1
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005c5e:	e025      	b.n	8005cac <HAL_SPI_Transmit+0x378>
 8005c60:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c64:	f7fc fac4 	bl	80021f0 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d803      	bhi.n	8005c7c <HAL_SPI_Transmit+0x348>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7a:	d102      	bne.n	8005c82 <HAL_SPI_Transmit+0x34e>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d114      	bne.n	8005cac <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 fb7e 	bl	8006384 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e02c      	b.n	8005d06 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f47f af79 	bne.w	8005bac <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	2108      	movs	r1, #8
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 fbfd 	bl	80064c4 <SPI_WaitOnFlagUntilTimeout>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d007      	beq.n	8005ce0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cd6:	f043 0220 	orr.w	r2, r3, #32
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 fb4f 	bl	8006384 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e000      	b.n	8005d06 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8005d04:	2300      	movs	r3, #0
  }
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop

08005d10 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08e      	sub	sp, #56	@ 0x38
 8005d14:	af02      	add	r7, sp, #8
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3320      	adds	r3, #32
 8005d24:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3330      	adds	r3, #48	@ 0x30
 8005d2c:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d32:	095b      	lsrs	r3, r3, #5
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	3301      	adds	r3, #1
 8005d38:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d3a:	f7fc fa59 	bl	80021f0 <HAL_GetTick>
 8005d3e:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8005d40:	887b      	ldrh	r3, [r7, #2]
 8005d42:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8005d44:	887b      	ldrh	r3, [r7, #2]
 8005d46:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d001      	beq.n	8005d58 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8005d54:	2302      	movs	r3, #2
 8005d56:	e310      	b.n	800637a <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d005      	beq.n	8005d6a <HAL_SPI_TransmitReceive+0x5a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <HAL_SPI_TransmitReceive+0x5a>
 8005d64:	887b      	ldrh	r3, [r7, #2]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e305      	b.n	800637a <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d101      	bne.n	8005d7c <HAL_SPI_TransmitReceive+0x6c>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e2fe      	b.n	800637a <HAL_SPI_TransmitReceive+0x66a>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2205      	movs	r2, #5
 8005d88:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	887a      	ldrh	r2, [r7, #2]
 8005d9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	887a      	ldrh	r2, [r7, #2]
 8005da6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	887a      	ldrh	r2, [r7, #2]
 8005db4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	887a      	ldrh	r2, [r7, #2]
 8005dbc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8005dda:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a70      	ldr	r2, [pc, #448]	@ (8005fa4 <HAL_SPI_TransmitReceive+0x294>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d009      	beq.n	8005dfa <HAL_SPI_TransmitReceive+0xea>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a6f      	ldr	r2, [pc, #444]	@ (8005fa8 <HAL_SPI_TransmitReceive+0x298>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d004      	beq.n	8005dfa <HAL_SPI_TransmitReceive+0xea>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a6d      	ldr	r2, [pc, #436]	@ (8005fac <HAL_SPI_TransmitReceive+0x29c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d102      	bne.n	8005e00 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8005dfa:	2310      	movs	r3, #16
 8005dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dfe:	e001      	b.n	8005e04 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8005e00:	2308      	movs	r3, #8
 8005e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	4b69      	ldr	r3, [pc, #420]	@ (8005fb0 <HAL_SPI_TransmitReceive+0x2a0>)
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	8879      	ldrh	r1, [r7, #2]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	6812      	ldr	r2, [r2, #0]
 8005e14:	430b      	orrs	r3, r1
 8005e16:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0201 	orr.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e30:	d107      	bne.n	8005e42 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	2b0f      	cmp	r3, #15
 8005e48:	f240 80a2 	bls.w	8005f90 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8005e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4e:	089b      	lsrs	r3, r3, #2
 8005e50:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005e52:	e094      	b.n	8005f7e <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d120      	bne.n	8005ea4 <HAL_SPI_TransmitReceive+0x194>
 8005e62:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01d      	beq.n	8005ea4 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005e68:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005e6a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e6e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d217      	bcs.n	8005ea4 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6812      	ldr	r2, [r2, #0]
 8005e7e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e84:	1d1a      	adds	r2, r3, #4
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ea2:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005eac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d065      	beq.n	8005f7e <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d118      	bne.n	8005ef2 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ec8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005eca:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ed0:	1d1a      	adds	r2, r3, #4
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005eee:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005ef0:	e045      	b.n	8005f7e <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005ef2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005ef4:	8bfb      	ldrh	r3, [r7, #30]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d21d      	bcs.n	8005f36 <HAL_SPI_TransmitReceive+0x226>
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d018      	beq.n	8005f36 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f0c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005f0e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f14:	1d1a      	adds	r2, r3, #4
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f32:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005f34:	e023      	b.n	8005f7e <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f36:	f7fc f95b 	bl	80021f0 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d803      	bhi.n	8005f4e <HAL_SPI_TransmitReceive+0x23e>
 8005f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4c:	d102      	bne.n	8005f54 <HAL_SPI_TransmitReceive+0x244>
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d114      	bne.n	8005f7e <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 fa15 	bl	8006384 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f60:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e1fd      	b.n	800637a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005f7e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f47f af67 	bne.w	8005e54 <HAL_SPI_TransmitReceive+0x144>
 8005f86:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f47f af63 	bne.w	8005e54 <HAL_SPI_TransmitReceive+0x144>
 8005f8e:	e1ce      	b.n	800632e <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	2b07      	cmp	r3, #7
 8005f96:	f240 81c2 	bls.w	800631e <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8005f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f9c:	085b      	lsrs	r3, r3, #1
 8005f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005fa0:	e0c9      	b.n	8006136 <HAL_SPI_TransmitReceive+0x426>
 8005fa2:	bf00      	nop
 8005fa4:	40013000 	.word	0x40013000
 8005fa8:	40003800 	.word	0x40003800
 8005fac:	40003c00 	.word	0x40003c00
 8005fb0:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d11f      	bne.n	8006002 <HAL_SPI_TransmitReceive+0x2f2>
 8005fc2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d01c      	beq.n	8006002 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005fc8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005fca:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fce:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d216      	bcs.n	8006002 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd8:	881a      	ldrh	r2, [r3, #0]
 8005fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fdc:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fe2:	1c9a      	adds	r2, r3, #2
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006000:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800600a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 8092 	beq.w	8006136 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b01      	cmp	r3, #1
 800601e:	d118      	bne.n	8006052 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006024:	6a3a      	ldr	r2, [r7, #32]
 8006026:	8812      	ldrh	r2, [r2, #0]
 8006028:	b292      	uxth	r2, r2
 800602a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006030:	1c9a      	adds	r2, r3, #2
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800603c:	b29b      	uxth	r3, r3
 800603e:	3b01      	subs	r3, #1
 8006040:	b29a      	uxth	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800604e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006050:	e071      	b.n	8006136 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006052:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006054:	8bfb      	ldrh	r3, [r7, #30]
 8006056:	429a      	cmp	r2, r3
 8006058:	d228      	bcs.n	80060ac <HAL_SPI_TransmitReceive+0x39c>
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d023      	beq.n	80060ac <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006068:	6a3a      	ldr	r2, [r7, #32]
 800606a:	8812      	ldrh	r2, [r2, #0]
 800606c:	b292      	uxth	r2, r2
 800606e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006074:	1c9a      	adds	r2, r3, #2
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800607e:	6a3a      	ldr	r2, [r7, #32]
 8006080:	8812      	ldrh	r2, [r2, #0]
 8006082:	b292      	uxth	r2, r2
 8006084:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800608a:	1c9a      	adds	r2, r3, #2
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006096:	b29b      	uxth	r3, r3
 8006098:	3b02      	subs	r3, #2
 800609a:	b29a      	uxth	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80060a8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80060aa:	e044      	b.n	8006136 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80060ac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d11d      	bne.n	80060ee <HAL_SPI_TransmitReceive+0x3de>
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d018      	beq.n	80060ee <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060c0:	6a3a      	ldr	r2, [r7, #32]
 80060c2:	8812      	ldrh	r2, [r2, #0]
 80060c4:	b292      	uxth	r2, r2
 80060c6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060cc:	1c9a      	adds	r2, r3, #2
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80060ea:	853b      	strh	r3, [r7, #40]	@ 0x28
 80060ec:	e023      	b.n	8006136 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060ee:	f7fc f87f 	bl	80021f0 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d803      	bhi.n	8006106 <HAL_SPI_TransmitReceive+0x3f6>
 80060fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006104:	d102      	bne.n	800610c <HAL_SPI_TransmitReceive+0x3fc>
 8006106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006108:	2b00      	cmp	r3, #0
 800610a:	d114      	bne.n	8006136 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 f939 	bl	8006384 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006118:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e121      	b.n	800637a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006136:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006138:	2b00      	cmp	r3, #0
 800613a:	f47f af3b 	bne.w	8005fb4 <HAL_SPI_TransmitReceive+0x2a4>
 800613e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006140:	2b00      	cmp	r3, #0
 8006142:	f47f af37 	bne.w	8005fb4 <HAL_SPI_TransmitReceive+0x2a4>
 8006146:	e0f2      	b.n	800632e <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b02      	cmp	r3, #2
 8006154:	d121      	bne.n	800619a <HAL_SPI_TransmitReceive+0x48a>
 8006156:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01e      	beq.n	800619a <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800615c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800615e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006162:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006164:	429a      	cmp	r2, r3
 8006166:	d218      	bcs.n	800619a <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	3320      	adds	r3, #32
 8006172:	7812      	ldrb	r2, [r2, #0]
 8006174:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006186:	b29b      	uxth	r3, r3
 8006188:	3b01      	subs	r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006198:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80061a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 80ba 	beq.w	800631e <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d11b      	bne.n	80061f0 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061c4:	7812      	ldrb	r2, [r2, #0]
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061ce:	1c5a      	adds	r2, r3, #1
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061da:	b29b      	uxth	r3, r3
 80061dc:	3b01      	subs	r3, #1
 80061de:	b29a      	uxth	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061ec:	853b      	strh	r3, [r7, #40]	@ 0x28
 80061ee:	e096      	b.n	800631e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80061f0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80061f2:	8bfb      	ldrh	r3, [r7, #30]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d24a      	bcs.n	800628e <HAL_SPI_TransmitReceive+0x57e>
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d045      	beq.n	800628e <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800620e:	7812      	ldrb	r2, [r2, #0]
 8006210:	b2d2      	uxtb	r2, r2
 8006212:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800622a:	7812      	ldrb	r2, [r2, #0]
 800622c:	b2d2      	uxtb	r2, r2
 800622e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006234:	1c5a      	adds	r2, r3, #1
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006246:	7812      	ldrb	r2, [r2, #0]
 8006248:	b2d2      	uxtb	r2, r2
 800624a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006250:	1c5a      	adds	r2, r3, #1
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006262:	7812      	ldrb	r2, [r2, #0]
 8006264:	b2d2      	uxtb	r2, r2
 8006266:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006278:	b29b      	uxth	r3, r3
 800627a:	3b04      	subs	r3, #4
 800627c:	b29a      	uxth	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800628a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800628c:	e047      	b.n	800631e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800628e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006290:	2b03      	cmp	r3, #3
 8006292:	d820      	bhi.n	80062d6 <HAL_SPI_TransmitReceive+0x5c6>
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d01b      	beq.n	80062d6 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062aa:	7812      	ldrb	r2, [r2, #0]
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	3b01      	subs	r3, #1
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80062d2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80062d4:	e023      	b.n	800631e <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062d6:	f7fb ff8b 	bl	80021f0 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d803      	bhi.n	80062ee <HAL_SPI_TransmitReceive+0x5de>
 80062e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ec:	d102      	bne.n	80062f4 <HAL_SPI_TransmitReceive+0x5e4>
 80062ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d114      	bne.n	800631e <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 f845 	bl	8006384 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006300:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e02d      	b.n	800637a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800631e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006320:	2b00      	cmp	r3, #0
 8006322:	f47f af11 	bne.w	8006148 <HAL_SPI_TransmitReceive+0x438>
 8006326:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006328:	2b00      	cmp	r3, #0
 800632a:	f47f af0d 	bne.w	8006148 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006334:	2200      	movs	r2, #0
 8006336:	2108      	movs	r1, #8
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f000 f8c3 	bl	80064c4 <SPI_WaitOnFlagUntilTimeout>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d007      	beq.n	8006354 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800634a:	f043 0220 	orr.w	r2, r3, #32
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 f815 	bl	8006384 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e000      	b.n	800637a <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8006378:	2300      	movs	r3, #0
  }
}
 800637a:	4618      	mov	r0, r3
 800637c:	3730      	adds	r7, #48	@ 0x30
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop

08006384 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699a      	ldr	r2, [r3, #24]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 0208 	orr.w	r2, r2, #8
 80063a2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699a      	ldr	r2, [r3, #24]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0210 	orr.w	r2, r2, #16
 80063b2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0201 	bic.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6919      	ldr	r1, [r3, #16]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	4b3c      	ldr	r3, [pc, #240]	@ (80064c0 <SPI_CloseTransfer+0x13c>)
 80063d0:	400b      	ands	r3, r1
 80063d2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689a      	ldr	r2, [r3, #8]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80063e2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b04      	cmp	r3, #4
 80063ee:	d014      	beq.n	800641a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f003 0320 	and.w	r3, r3, #32
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00f      	beq.n	800641a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006400:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	699a      	ldr	r2, [r3, #24]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f042 0220 	orr.w	r2, r2, #32
 8006418:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b03      	cmp	r3, #3
 8006424:	d014      	beq.n	8006450 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00f      	beq.n	8006450 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006436:	f043 0204 	orr.w	r2, r3, #4
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699a      	ldr	r2, [r3, #24]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800644e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00f      	beq.n	800647a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006460:	f043 0201 	orr.w	r2, r3, #1
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	699a      	ldr	r2, [r3, #24]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006478:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00f      	beq.n	80064a4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800648a:	f043 0208 	orr.w	r2, r3, #8
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699a      	ldr	r2, [r3, #24]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064a2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80064b4:	bf00      	nop
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	fffffc90 	.word	0xfffffc90

080064c4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	603b      	str	r3, [r7, #0]
 80064d0:	4613      	mov	r3, r2
 80064d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80064d4:	e010      	b.n	80064f8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064d6:	f7fb fe8b 	bl	80021f0 <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d803      	bhi.n	80064ee <SPI_WaitOnFlagUntilTimeout+0x2a>
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ec:	d102      	bne.n	80064f4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e00f      	b.n	8006518 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	695a      	ldr	r2, [r3, #20]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	4013      	ands	r3, r2
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	429a      	cmp	r2, r3
 8006506:	bf0c      	ite	eq
 8006508:	2301      	moveq	r3, #1
 800650a:	2300      	movne	r3, #0
 800650c:	b2db      	uxtb	r3, r3
 800650e:	461a      	mov	r2, r3
 8006510:	79fb      	ldrb	r3, [r7, #7]
 8006512:	429a      	cmp	r2, r3
 8006514:	d0df      	beq.n	80064d6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800652c:	095b      	lsrs	r3, r3, #5
 800652e:	3301      	adds	r3, #1
 8006530:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	3301      	adds	r3, #1
 8006538:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	3307      	adds	r3, #7
 800653e:	08db      	lsrs	r3, r3, #3
 8006540:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	fb02 f303 	mul.w	r3, r2, r3
}
 800654a:	4618      	mov	r0, r3
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b082      	sub	sp, #8
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e049      	b.n	80065fc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d106      	bne.n	8006582 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7fb fb6d 	bl	8001c5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2202      	movs	r2, #2
 8006586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	3304      	adds	r3, #4
 8006592:	4619      	mov	r1, r3
 8006594:	4610      	mov	r0, r2
 8006596:	f000 fb47 	bl	8006c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b01      	cmp	r3, #1
 8006616:	d001      	beq.n	800661c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e054      	b.n	80066c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0201 	orr.w	r2, r2, #1
 8006632:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a26      	ldr	r2, [pc, #152]	@ (80066d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d022      	beq.n	8006684 <HAL_TIM_Base_Start_IT+0x80>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006646:	d01d      	beq.n	8006684 <HAL_TIM_Base_Start_IT+0x80>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a22      	ldr	r2, [pc, #136]	@ (80066d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d018      	beq.n	8006684 <HAL_TIM_Base_Start_IT+0x80>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a21      	ldr	r2, [pc, #132]	@ (80066dc <HAL_TIM_Base_Start_IT+0xd8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d013      	beq.n	8006684 <HAL_TIM_Base_Start_IT+0x80>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a1f      	ldr	r2, [pc, #124]	@ (80066e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d00e      	beq.n	8006684 <HAL_TIM_Base_Start_IT+0x80>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a1e      	ldr	r2, [pc, #120]	@ (80066e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d009      	beq.n	8006684 <HAL_TIM_Base_Start_IT+0x80>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a1c      	ldr	r2, [pc, #112]	@ (80066e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d004      	beq.n	8006684 <HAL_TIM_Base_Start_IT+0x80>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a1b      	ldr	r2, [pc, #108]	@ (80066ec <HAL_TIM_Base_Start_IT+0xe8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d115      	bne.n	80066b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689a      	ldr	r2, [r3, #8]
 800668a:	4b19      	ldr	r3, [pc, #100]	@ (80066f0 <HAL_TIM_Base_Start_IT+0xec>)
 800668c:	4013      	ands	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2b06      	cmp	r3, #6
 8006694:	d015      	beq.n	80066c2 <HAL_TIM_Base_Start_IT+0xbe>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800669c:	d011      	beq.n	80066c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f042 0201 	orr.w	r2, r2, #1
 80066ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ae:	e008      	b.n	80066c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f042 0201 	orr.w	r2, r2, #1
 80066be:	601a      	str	r2, [r3, #0]
 80066c0:	e000      	b.n	80066c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	40010000 	.word	0x40010000
 80066d8:	40000400 	.word	0x40000400
 80066dc:	40000800 	.word	0x40000800
 80066e0:	40000c00 	.word	0x40000c00
 80066e4:	40010400 	.word	0x40010400
 80066e8:	40001800 	.word	0x40001800
 80066ec:	40014000 	.word	0x40014000
 80066f0:	00010007 	.word	0x00010007

080066f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d101      	bne.n	8006706 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e049      	b.n	800679a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d106      	bne.n	8006720 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7fb fa54 	bl	8001bc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2202      	movs	r2, #2
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	3304      	adds	r3, #4
 8006730:	4619      	mov	r1, r3
 8006732:	4610      	mov	r0, r2
 8006734:	f000 fa78 	bl	8006c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d020      	beq.n	8006806 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d01b      	beq.n	8006806 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f06f 0202 	mvn.w	r2, #2
 80067d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	f003 0303 	and.w	r3, r3, #3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f9fd 	bl	8006bec <HAL_TIM_IC_CaptureCallback>
 80067f2:	e005      	b.n	8006800 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f9ef 	bl	8006bd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fa00 	bl	8006c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	f003 0304 	and.w	r3, r3, #4
 800680c:	2b00      	cmp	r3, #0
 800680e:	d020      	beq.n	8006852 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f003 0304 	and.w	r3, r3, #4
 8006816:	2b00      	cmp	r3, #0
 8006818:	d01b      	beq.n	8006852 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f06f 0204 	mvn.w	r2, #4
 8006822:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006834:	2b00      	cmp	r3, #0
 8006836:	d003      	beq.n	8006840 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f9d7 	bl	8006bec <HAL_TIM_IC_CaptureCallback>
 800683e:	e005      	b.n	800684c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f9c9 	bl	8006bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f9da 	bl	8006c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	f003 0308 	and.w	r3, r3, #8
 8006858:	2b00      	cmp	r3, #0
 800685a:	d020      	beq.n	800689e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f003 0308 	and.w	r3, r3, #8
 8006862:	2b00      	cmp	r3, #0
 8006864:	d01b      	beq.n	800689e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f06f 0208 	mvn.w	r2, #8
 800686e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2204      	movs	r2, #4
 8006874:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	f003 0303 	and.w	r3, r3, #3
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 f9b1 	bl	8006bec <HAL_TIM_IC_CaptureCallback>
 800688a:	e005      	b.n	8006898 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f9a3 	bl	8006bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f9b4 	bl	8006c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f003 0310 	and.w	r3, r3, #16
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d020      	beq.n	80068ea <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f003 0310 	and.w	r3, r3, #16
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d01b      	beq.n	80068ea <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f06f 0210 	mvn.w	r2, #16
 80068ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2208      	movs	r2, #8
 80068c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f98b 	bl	8006bec <HAL_TIM_IC_CaptureCallback>
 80068d6:	e005      	b.n	80068e4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f97d 	bl	8006bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f98e 	bl	8006c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00c      	beq.n	800690e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d007      	beq.n	800690e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f06f 0201 	mvn.w	r2, #1
 8006906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7fb f891 	bl	8001a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006914:	2b00      	cmp	r3, #0
 8006916:	d104      	bne.n	8006922 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00c      	beq.n	800693c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006928:	2b00      	cmp	r3, #0
 800692a:	d007      	beq.n	800693c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fe02 	bl	8007540 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00c      	beq.n	8006960 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800694c:	2b00      	cmp	r3, #0
 800694e:	d007      	beq.n	8006960 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fdfa 	bl	8007554 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00c      	beq.n	8006984 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006970:	2b00      	cmp	r3, #0
 8006972:	d007      	beq.n	8006984 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800697c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f948 	bl	8006c14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f003 0320 	and.w	r3, r3, #32
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00c      	beq.n	80069a8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f003 0320 	and.w	r3, r3, #32
 8006994:	2b00      	cmp	r3, #0
 8006996:	d007      	beq.n	80069a8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0220 	mvn.w	r2, #32
 80069a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fdc2 	bl	800752c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069a8:	bf00      	nop
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069bc:	2300      	movs	r3, #0
 80069be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d101      	bne.n	80069ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069ca:	2302      	movs	r3, #2
 80069cc:	e0ff      	b.n	8006bce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b14      	cmp	r3, #20
 80069da:	f200 80f0 	bhi.w	8006bbe <HAL_TIM_PWM_ConfigChannel+0x20e>
 80069de:	a201      	add	r2, pc, #4	@ (adr r2, 80069e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e4:	08006a39 	.word	0x08006a39
 80069e8:	08006bbf 	.word	0x08006bbf
 80069ec:	08006bbf 	.word	0x08006bbf
 80069f0:	08006bbf 	.word	0x08006bbf
 80069f4:	08006a79 	.word	0x08006a79
 80069f8:	08006bbf 	.word	0x08006bbf
 80069fc:	08006bbf 	.word	0x08006bbf
 8006a00:	08006bbf 	.word	0x08006bbf
 8006a04:	08006abb 	.word	0x08006abb
 8006a08:	08006bbf 	.word	0x08006bbf
 8006a0c:	08006bbf 	.word	0x08006bbf
 8006a10:	08006bbf 	.word	0x08006bbf
 8006a14:	08006afb 	.word	0x08006afb
 8006a18:	08006bbf 	.word	0x08006bbf
 8006a1c:	08006bbf 	.word	0x08006bbf
 8006a20:	08006bbf 	.word	0x08006bbf
 8006a24:	08006b3d 	.word	0x08006b3d
 8006a28:	08006bbf 	.word	0x08006bbf
 8006a2c:	08006bbf 	.word	0x08006bbf
 8006a30:	08006bbf 	.word	0x08006bbf
 8006a34:	08006b7d 	.word	0x08006b7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68b9      	ldr	r1, [r7, #8]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 f992 	bl	8006d68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	699a      	ldr	r2, [r3, #24]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f042 0208 	orr.w	r2, r2, #8
 8006a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	699a      	ldr	r2, [r3, #24]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 0204 	bic.w	r2, r2, #4
 8006a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6999      	ldr	r1, [r3, #24]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	691a      	ldr	r2, [r3, #16]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	619a      	str	r2, [r3, #24]
      break;
 8006a76:	e0a5      	b.n	8006bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 fa02 	bl	8006e88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	699a      	ldr	r2, [r3, #24]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	699a      	ldr	r2, [r3, #24]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6999      	ldr	r1, [r3, #24]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	021a      	lsls	r2, r3, #8
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	619a      	str	r2, [r3, #24]
      break;
 8006ab8:	e084      	b.n	8006bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68b9      	ldr	r1, [r7, #8]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 fa6b 	bl	8006f9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	69da      	ldr	r2, [r3, #28]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f042 0208 	orr.w	r2, r2, #8
 8006ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	69da      	ldr	r2, [r3, #28]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 0204 	bic.w	r2, r2, #4
 8006ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69d9      	ldr	r1, [r3, #28]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	691a      	ldr	r2, [r3, #16]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	430a      	orrs	r2, r1
 8006af6:	61da      	str	r2, [r3, #28]
      break;
 8006af8:	e064      	b.n	8006bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 fad3 	bl	80070ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	69da      	ldr	r2, [r3, #28]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69da      	ldr	r2, [r3, #28]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69d9      	ldr	r1, [r3, #28]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	021a      	lsls	r2, r3, #8
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	61da      	str	r2, [r3, #28]
      break;
 8006b3a:	e043      	b.n	8006bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68b9      	ldr	r1, [r7, #8]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fb1c 	bl	8007180 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0208 	orr.w	r2, r2, #8
 8006b56:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f022 0204 	bic.w	r2, r2, #4
 8006b66:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	691a      	ldr	r2, [r3, #16]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006b7a:	e023      	b.n	8006bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68b9      	ldr	r1, [r7, #8]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 fb60 	bl	8007248 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b96:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ba6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	021a      	lsls	r2, r3, #8
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006bbc:	e002      	b.n	8006bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3718      	adds	r7, #24
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop

08006bd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a43      	ldr	r2, [pc, #268]	@ (8006d48 <TIM_Base_SetConfig+0x120>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d013      	beq.n	8006c68 <TIM_Base_SetConfig+0x40>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c46:	d00f      	beq.n	8006c68 <TIM_Base_SetConfig+0x40>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a40      	ldr	r2, [pc, #256]	@ (8006d4c <TIM_Base_SetConfig+0x124>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d00b      	beq.n	8006c68 <TIM_Base_SetConfig+0x40>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a3f      	ldr	r2, [pc, #252]	@ (8006d50 <TIM_Base_SetConfig+0x128>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d007      	beq.n	8006c68 <TIM_Base_SetConfig+0x40>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a3e      	ldr	r2, [pc, #248]	@ (8006d54 <TIM_Base_SetConfig+0x12c>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d003      	beq.n	8006c68 <TIM_Base_SetConfig+0x40>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a3d      	ldr	r2, [pc, #244]	@ (8006d58 <TIM_Base_SetConfig+0x130>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d108      	bne.n	8006c7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a32      	ldr	r2, [pc, #200]	@ (8006d48 <TIM_Base_SetConfig+0x120>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d01f      	beq.n	8006cc2 <TIM_Base_SetConfig+0x9a>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c88:	d01b      	beq.n	8006cc2 <TIM_Base_SetConfig+0x9a>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a2f      	ldr	r2, [pc, #188]	@ (8006d4c <TIM_Base_SetConfig+0x124>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d017      	beq.n	8006cc2 <TIM_Base_SetConfig+0x9a>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a2e      	ldr	r2, [pc, #184]	@ (8006d50 <TIM_Base_SetConfig+0x128>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d013      	beq.n	8006cc2 <TIM_Base_SetConfig+0x9a>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a2d      	ldr	r2, [pc, #180]	@ (8006d54 <TIM_Base_SetConfig+0x12c>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d00f      	beq.n	8006cc2 <TIM_Base_SetConfig+0x9a>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a2c      	ldr	r2, [pc, #176]	@ (8006d58 <TIM_Base_SetConfig+0x130>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d00b      	beq.n	8006cc2 <TIM_Base_SetConfig+0x9a>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a2b      	ldr	r2, [pc, #172]	@ (8006d5c <TIM_Base_SetConfig+0x134>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d007      	beq.n	8006cc2 <TIM_Base_SetConfig+0x9a>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a2a      	ldr	r2, [pc, #168]	@ (8006d60 <TIM_Base_SetConfig+0x138>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d003      	beq.n	8006cc2 <TIM_Base_SetConfig+0x9a>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a29      	ldr	r2, [pc, #164]	@ (8006d64 <TIM_Base_SetConfig+0x13c>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d108      	bne.n	8006cd4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	689a      	ldr	r2, [r3, #8]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a14      	ldr	r2, [pc, #80]	@ (8006d48 <TIM_Base_SetConfig+0x120>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00f      	beq.n	8006d1a <TIM_Base_SetConfig+0xf2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a16      	ldr	r2, [pc, #88]	@ (8006d58 <TIM_Base_SetConfig+0x130>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00b      	beq.n	8006d1a <TIM_Base_SetConfig+0xf2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a15      	ldr	r2, [pc, #84]	@ (8006d5c <TIM_Base_SetConfig+0x134>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d007      	beq.n	8006d1a <TIM_Base_SetConfig+0xf2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a14      	ldr	r2, [pc, #80]	@ (8006d60 <TIM_Base_SetConfig+0x138>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d003      	beq.n	8006d1a <TIM_Base_SetConfig+0xf2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a13      	ldr	r2, [pc, #76]	@ (8006d64 <TIM_Base_SetConfig+0x13c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d103      	bne.n	8006d22 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	691a      	ldr	r2, [r3, #16]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f043 0204 	orr.w	r2, r3, #4
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	601a      	str	r2, [r3, #0]
}
 8006d3a:	bf00      	nop
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	40010000 	.word	0x40010000
 8006d4c:	40000400 	.word	0x40000400
 8006d50:	40000800 	.word	0x40000800
 8006d54:	40000c00 	.word	0x40000c00
 8006d58:	40010400 	.word	0x40010400
 8006d5c:	40014000 	.word	0x40014000
 8006d60:	40014400 	.word	0x40014400
 8006d64:	40014800 	.word	0x40014800

08006d68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	f023 0201 	bic.w	r2, r3, #1
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	4b37      	ldr	r3, [pc, #220]	@ (8006e70 <TIM_OC1_SetConfig+0x108>)
 8006d94:	4013      	ands	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 0303 	bic.w	r3, r3, #3
 8006d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f023 0302 	bic.w	r3, r3, #2
 8006db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a2d      	ldr	r2, [pc, #180]	@ (8006e74 <TIM_OC1_SetConfig+0x10c>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d00f      	beq.n	8006de4 <TIM_OC1_SetConfig+0x7c>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a2c      	ldr	r2, [pc, #176]	@ (8006e78 <TIM_OC1_SetConfig+0x110>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d00b      	beq.n	8006de4 <TIM_OC1_SetConfig+0x7c>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a2b      	ldr	r2, [pc, #172]	@ (8006e7c <TIM_OC1_SetConfig+0x114>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d007      	beq.n	8006de4 <TIM_OC1_SetConfig+0x7c>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a2a      	ldr	r2, [pc, #168]	@ (8006e80 <TIM_OC1_SetConfig+0x118>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d003      	beq.n	8006de4 <TIM_OC1_SetConfig+0x7c>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a29      	ldr	r2, [pc, #164]	@ (8006e84 <TIM_OC1_SetConfig+0x11c>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d10c      	bne.n	8006dfe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f023 0308 	bic.w	r3, r3, #8
 8006dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f023 0304 	bic.w	r3, r3, #4
 8006dfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a1c      	ldr	r2, [pc, #112]	@ (8006e74 <TIM_OC1_SetConfig+0x10c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d00f      	beq.n	8006e26 <TIM_OC1_SetConfig+0xbe>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a1b      	ldr	r2, [pc, #108]	@ (8006e78 <TIM_OC1_SetConfig+0x110>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d00b      	beq.n	8006e26 <TIM_OC1_SetConfig+0xbe>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a1a      	ldr	r2, [pc, #104]	@ (8006e7c <TIM_OC1_SetConfig+0x114>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d007      	beq.n	8006e26 <TIM_OC1_SetConfig+0xbe>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a19      	ldr	r2, [pc, #100]	@ (8006e80 <TIM_OC1_SetConfig+0x118>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d003      	beq.n	8006e26 <TIM_OC1_SetConfig+0xbe>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a18      	ldr	r2, [pc, #96]	@ (8006e84 <TIM_OC1_SetConfig+0x11c>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d111      	bne.n	8006e4a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	621a      	str	r2, [r3, #32]
}
 8006e64:	bf00      	nop
 8006e66:	371c      	adds	r7, #28
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	fffeff8f 	.word	0xfffeff8f
 8006e74:	40010000 	.word	0x40010000
 8006e78:	40010400 	.word	0x40010400
 8006e7c:	40014000 	.word	0x40014000
 8006e80:	40014400 	.word	0x40014400
 8006e84:	40014800 	.word	0x40014800

08006e88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	f023 0210 	bic.w	r2, r3, #16
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	4b34      	ldr	r3, [pc, #208]	@ (8006f84 <TIM_OC2_SetConfig+0xfc>)
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	021b      	lsls	r3, r3, #8
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f023 0320 	bic.w	r3, r3, #32
 8006ed2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	011b      	lsls	r3, r3, #4
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a29      	ldr	r2, [pc, #164]	@ (8006f88 <TIM_OC2_SetConfig+0x100>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d003      	beq.n	8006ef0 <TIM_OC2_SetConfig+0x68>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a28      	ldr	r2, [pc, #160]	@ (8006f8c <TIM_OC2_SetConfig+0x104>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d10d      	bne.n	8006f0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	011b      	lsls	r3, r3, #4
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8006f88 <TIM_OC2_SetConfig+0x100>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d00f      	beq.n	8006f34 <TIM_OC2_SetConfig+0xac>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a1d      	ldr	r2, [pc, #116]	@ (8006f8c <TIM_OC2_SetConfig+0x104>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d00b      	beq.n	8006f34 <TIM_OC2_SetConfig+0xac>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8006f90 <TIM_OC2_SetConfig+0x108>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d007      	beq.n	8006f34 <TIM_OC2_SetConfig+0xac>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a1b      	ldr	r2, [pc, #108]	@ (8006f94 <TIM_OC2_SetConfig+0x10c>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d003      	beq.n	8006f34 <TIM_OC2_SetConfig+0xac>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8006f98 <TIM_OC2_SetConfig+0x110>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d113      	bne.n	8006f5c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	621a      	str	r2, [r3, #32]
}
 8006f76:	bf00      	nop
 8006f78:	371c      	adds	r7, #28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	feff8fff 	.word	0xfeff8fff
 8006f88:	40010000 	.word	0x40010000
 8006f8c:	40010400 	.word	0x40010400
 8006f90:	40014000 	.word	0x40014000
 8006f94:	40014400 	.word	0x40014400
 8006f98:	40014800 	.word	0x40014800

08006f9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	4b33      	ldr	r3, [pc, #204]	@ (8007094 <TIM_OC3_SetConfig+0xf8>)
 8006fc8:	4013      	ands	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f023 0303 	bic.w	r3, r3, #3
 8006fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	021b      	lsls	r3, r3, #8
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a28      	ldr	r2, [pc, #160]	@ (8007098 <TIM_OC3_SetConfig+0xfc>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d003      	beq.n	8007002 <TIM_OC3_SetConfig+0x66>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a27      	ldr	r2, [pc, #156]	@ (800709c <TIM_OC3_SetConfig+0x100>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d10d      	bne.n	800701e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007008:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	021b      	lsls	r3, r3, #8
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	4313      	orrs	r3, r2
 8007014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800701c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a1d      	ldr	r2, [pc, #116]	@ (8007098 <TIM_OC3_SetConfig+0xfc>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d00f      	beq.n	8007046 <TIM_OC3_SetConfig+0xaa>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a1c      	ldr	r2, [pc, #112]	@ (800709c <TIM_OC3_SetConfig+0x100>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d00b      	beq.n	8007046 <TIM_OC3_SetConfig+0xaa>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a1b      	ldr	r2, [pc, #108]	@ (80070a0 <TIM_OC3_SetConfig+0x104>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d007      	beq.n	8007046 <TIM_OC3_SetConfig+0xaa>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a1a      	ldr	r2, [pc, #104]	@ (80070a4 <TIM_OC3_SetConfig+0x108>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d003      	beq.n	8007046 <TIM_OC3_SetConfig+0xaa>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a19      	ldr	r2, [pc, #100]	@ (80070a8 <TIM_OC3_SetConfig+0x10c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d113      	bne.n	800706e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800704c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	695b      	ldr	r3, [r3, #20]
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	4313      	orrs	r3, r2
 8007060:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	011b      	lsls	r3, r3, #4
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	4313      	orrs	r3, r2
 800706c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	621a      	str	r2, [r3, #32]
}
 8007088:	bf00      	nop
 800708a:	371c      	adds	r7, #28
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	fffeff8f 	.word	0xfffeff8f
 8007098:	40010000 	.word	0x40010000
 800709c:	40010400 	.word	0x40010400
 80070a0:	40014000 	.word	0x40014000
 80070a4:	40014400 	.word	0x40014400
 80070a8:	40014800 	.word	0x40014800

080070ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	69db      	ldr	r3, [r3, #28]
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	4b24      	ldr	r3, [pc, #144]	@ (8007168 <TIM_OC4_SetConfig+0xbc>)
 80070d8:	4013      	ands	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	021b      	lsls	r3, r3, #8
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	031b      	lsls	r3, r3, #12
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	4313      	orrs	r3, r2
 8007102:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a19      	ldr	r2, [pc, #100]	@ (800716c <TIM_OC4_SetConfig+0xc0>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d00f      	beq.n	800712c <TIM_OC4_SetConfig+0x80>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a18      	ldr	r2, [pc, #96]	@ (8007170 <TIM_OC4_SetConfig+0xc4>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d00b      	beq.n	800712c <TIM_OC4_SetConfig+0x80>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a17      	ldr	r2, [pc, #92]	@ (8007174 <TIM_OC4_SetConfig+0xc8>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d007      	beq.n	800712c <TIM_OC4_SetConfig+0x80>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a16      	ldr	r2, [pc, #88]	@ (8007178 <TIM_OC4_SetConfig+0xcc>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d003      	beq.n	800712c <TIM_OC4_SetConfig+0x80>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a15      	ldr	r2, [pc, #84]	@ (800717c <TIM_OC4_SetConfig+0xd0>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d109      	bne.n	8007140 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007132:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	019b      	lsls	r3, r3, #6
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	4313      	orrs	r3, r2
 800713e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	685a      	ldr	r2, [r3, #4]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	621a      	str	r2, [r3, #32]
}
 800715a:	bf00      	nop
 800715c:	371c      	adds	r7, #28
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	feff8fff 	.word	0xfeff8fff
 800716c:	40010000 	.word	0x40010000
 8007170:	40010400 	.word	0x40010400
 8007174:	40014000 	.word	0x40014000
 8007178:	40014400 	.word	0x40014400
 800717c:	40014800 	.word	0x40014800

08007180 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a1b      	ldr	r3, [r3, #32]
 8007194:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	4b21      	ldr	r3, [pc, #132]	@ (8007230 <TIM_OC5_SetConfig+0xb0>)
 80071ac:	4013      	ands	r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80071c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	041b      	lsls	r3, r3, #16
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a18      	ldr	r2, [pc, #96]	@ (8007234 <TIM_OC5_SetConfig+0xb4>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d00f      	beq.n	80071f6 <TIM_OC5_SetConfig+0x76>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a17      	ldr	r2, [pc, #92]	@ (8007238 <TIM_OC5_SetConfig+0xb8>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d00b      	beq.n	80071f6 <TIM_OC5_SetConfig+0x76>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a16      	ldr	r2, [pc, #88]	@ (800723c <TIM_OC5_SetConfig+0xbc>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d007      	beq.n	80071f6 <TIM_OC5_SetConfig+0x76>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a15      	ldr	r2, [pc, #84]	@ (8007240 <TIM_OC5_SetConfig+0xc0>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d003      	beq.n	80071f6 <TIM_OC5_SetConfig+0x76>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a14      	ldr	r2, [pc, #80]	@ (8007244 <TIM_OC5_SetConfig+0xc4>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d109      	bne.n	800720a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	021b      	lsls	r3, r3, #8
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	4313      	orrs	r3, r2
 8007208:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	621a      	str	r2, [r3, #32]
}
 8007224:	bf00      	nop
 8007226:	371c      	adds	r7, #28
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	fffeff8f 	.word	0xfffeff8f
 8007234:	40010000 	.word	0x40010000
 8007238:	40010400 	.word	0x40010400
 800723c:	40014000 	.word	0x40014000
 8007240:	40014400 	.word	0x40014400
 8007244:	40014800 	.word	0x40014800

08007248 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a1b      	ldr	r3, [r3, #32]
 800725c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800726e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	4b22      	ldr	r3, [pc, #136]	@ (80072fc <TIM_OC6_SetConfig+0xb4>)
 8007274:	4013      	ands	r3, r2
 8007276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	021b      	lsls	r3, r3, #8
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	4313      	orrs	r3, r2
 8007282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800728a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	051b      	lsls	r3, r3, #20
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	4313      	orrs	r3, r2
 8007296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a19      	ldr	r2, [pc, #100]	@ (8007300 <TIM_OC6_SetConfig+0xb8>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d00f      	beq.n	80072c0 <TIM_OC6_SetConfig+0x78>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a18      	ldr	r2, [pc, #96]	@ (8007304 <TIM_OC6_SetConfig+0xbc>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d00b      	beq.n	80072c0 <TIM_OC6_SetConfig+0x78>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a17      	ldr	r2, [pc, #92]	@ (8007308 <TIM_OC6_SetConfig+0xc0>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d007      	beq.n	80072c0 <TIM_OC6_SetConfig+0x78>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a16      	ldr	r2, [pc, #88]	@ (800730c <TIM_OC6_SetConfig+0xc4>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d003      	beq.n	80072c0 <TIM_OC6_SetConfig+0x78>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a15      	ldr	r2, [pc, #84]	@ (8007310 <TIM_OC6_SetConfig+0xc8>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d109      	bne.n	80072d4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80072c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	029b      	lsls	r3, r3, #10
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	621a      	str	r2, [r3, #32]
}
 80072ee:	bf00      	nop
 80072f0:	371c      	adds	r7, #28
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	feff8fff 	.word	0xfeff8fff
 8007300:	40010000 	.word	0x40010000
 8007304:	40010400 	.word	0x40010400
 8007308:	40014000 	.word	0x40014000
 800730c:	40014400 	.word	0x40014400
 8007310:	40014800 	.word	0x40014800

08007314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007324:	2b01      	cmp	r3, #1
 8007326:	d101      	bne.n	800732c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007328:	2302      	movs	r3, #2
 800732a:	e06d      	b.n	8007408 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2202      	movs	r2, #2
 8007338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a30      	ldr	r2, [pc, #192]	@ (8007414 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d004      	beq.n	8007360 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a2f      	ldr	r2, [pc, #188]	@ (8007418 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d108      	bne.n	8007372 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007366:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	4313      	orrs	r3, r2
 8007370:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007378:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	4313      	orrs	r3, r2
 8007382:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a20      	ldr	r2, [pc, #128]	@ (8007414 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d022      	beq.n	80073dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800739e:	d01d      	beq.n	80073dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a1d      	ldr	r2, [pc, #116]	@ (800741c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d018      	beq.n	80073dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a1c      	ldr	r2, [pc, #112]	@ (8007420 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d013      	beq.n	80073dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a1a      	ldr	r2, [pc, #104]	@ (8007424 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d00e      	beq.n	80073dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a15      	ldr	r2, [pc, #84]	@ (8007418 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d009      	beq.n	80073dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a16      	ldr	r2, [pc, #88]	@ (8007428 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d004      	beq.n	80073dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a15      	ldr	r2, [pc, #84]	@ (800742c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d10c      	bne.n	80073f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	40010000 	.word	0x40010000
 8007418:	40010400 	.word	0x40010400
 800741c:	40000400 	.word	0x40000400
 8007420:	40000800 	.word	0x40000800
 8007424:	40000c00 	.word	0x40000c00
 8007428:	40001800 	.word	0x40001800
 800742c:	40014000 	.word	0x40014000

08007430 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007444:	2b01      	cmp	r3, #1
 8007446:	d101      	bne.n	800744c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007448:	2302      	movs	r3, #2
 800744a:	e065      	b.n	8007518 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	4313      	orrs	r3, r2
 8007460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	4313      	orrs	r3, r2
 800746e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	4313      	orrs	r3, r2
 800747c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4313      	orrs	r3, r2
 800748a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	4313      	orrs	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	041b      	lsls	r3, r3, #16
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a16      	ldr	r2, [pc, #88]	@ (8007524 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d004      	beq.n	80074da <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a14      	ldr	r2, [pc, #80]	@ (8007528 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d115      	bne.n	8007506 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e4:	051b      	lsls	r3, r3, #20
 80074e6:	4313      	orrs	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	69db      	ldr	r3, [r3, #28]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	4313      	orrs	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3714      	adds	r7, #20
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	40010000 	.word	0x40010000
 8007528:	40010400 	.word	0x40010400

0800752c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d101      	bne.n	800757a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e042      	b.n	8007600 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007580:	2b00      	cmp	r3, #0
 8007582:	d106      	bne.n	8007592 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7fa fc0d 	bl	8001dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2224      	movs	r2, #36	@ 0x24
 8007596:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 0201 	bic.w	r2, r2, #1
 80075a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d002      	beq.n	80075b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fe1e 	bl	80081f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f8b3 	bl	8007724 <UART_SetConfig>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d101      	bne.n	80075c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e01b      	b.n	8007600 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689a      	ldr	r2, [r3, #8]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f042 0201 	orr.w	r2, r2, #1
 80075f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fe9d 	bl	8008338 <UART_CheckIdleState>
 80075fe:	4603      	mov	r3, r0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b08a      	sub	sp, #40	@ 0x28
 800760c:	af02      	add	r7, sp, #8
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	603b      	str	r3, [r7, #0]
 8007614:	4613      	mov	r3, r2
 8007616:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800761e:	2b20      	cmp	r3, #32
 8007620:	d17b      	bne.n	800771a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <HAL_UART_Transmit+0x26>
 8007628:	88fb      	ldrh	r3, [r7, #6]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d101      	bne.n	8007632 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e074      	b.n	800771c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2221      	movs	r2, #33	@ 0x21
 800763e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007642:	f7fa fdd5 	bl	80021f0 <HAL_GetTick>
 8007646:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	88fa      	ldrh	r2, [r7, #6]
 800764c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	88fa      	ldrh	r2, [r7, #6]
 8007654:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007660:	d108      	bne.n	8007674 <HAL_UART_Transmit+0x6c>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d104      	bne.n	8007674 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800766a:	2300      	movs	r3, #0
 800766c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	61bb      	str	r3, [r7, #24]
 8007672:	e003      	b.n	800767c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007678:	2300      	movs	r3, #0
 800767a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800767c:	e030      	b.n	80076e0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	2200      	movs	r2, #0
 8007686:	2180      	movs	r1, #128	@ 0x80
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 feff 	bl	800848c <UART_WaitOnFlagUntilTimeout>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d005      	beq.n	80076a0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2220      	movs	r2, #32
 8007698:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800769c:	2303      	movs	r3, #3
 800769e:	e03d      	b.n	800771c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10b      	bne.n	80076be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	881b      	ldrh	r3, [r3, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	3302      	adds	r3, #2
 80076ba:	61bb      	str	r3, [r7, #24]
 80076bc:	e007      	b.n	80076ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	781a      	ldrb	r2, [r3, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	3301      	adds	r3, #1
 80076cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	3b01      	subs	r3, #1
 80076d8:	b29a      	uxth	r2, r3
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1c8      	bne.n	800767e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	2200      	movs	r2, #0
 80076f4:	2140      	movs	r1, #64	@ 0x40
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 fec8 	bl	800848c <UART_WaitOnFlagUntilTimeout>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d005      	beq.n	800770e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2220      	movs	r2, #32
 8007706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e006      	b.n	800771c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2220      	movs	r2, #32
 8007712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	e000      	b.n	800771c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800771a:	2302      	movs	r3, #2
  }
}
 800771c:	4618      	mov	r0, r3
 800771e:	3720      	adds	r7, #32
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007728:	b092      	sub	sp, #72	@ 0x48
 800772a:	af00      	add	r7, sp, #0
 800772c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	689a      	ldr	r2, [r3, #8]
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	431a      	orrs	r2, r3
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	431a      	orrs	r2, r3
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	69db      	ldr	r3, [r3, #28]
 8007748:	4313      	orrs	r3, r2
 800774a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	4bbe      	ldr	r3, [pc, #760]	@ (8007a4c <UART_SetConfig+0x328>)
 8007754:	4013      	ands	r3, r2
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	6812      	ldr	r2, [r2, #0]
 800775a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800775c:	430b      	orrs	r3, r1
 800775e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	68da      	ldr	r2, [r3, #12]
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	430a      	orrs	r2, r1
 8007774:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4ab3      	ldr	r2, [pc, #716]	@ (8007a50 <UART_SetConfig+0x32c>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d004      	beq.n	8007790 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800778c:	4313      	orrs	r3, r2
 800778e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689a      	ldr	r2, [r3, #8]
 8007796:	4baf      	ldr	r3, [pc, #700]	@ (8007a54 <UART_SetConfig+0x330>)
 8007798:	4013      	ands	r3, r2
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	6812      	ldr	r2, [r2, #0]
 800779e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80077a0:	430b      	orrs	r3, r1
 80077a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077aa:	f023 010f 	bic.w	r1, r3, #15
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4aa6      	ldr	r2, [pc, #664]	@ (8007a58 <UART_SetConfig+0x334>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d177      	bne.n	80078b4 <UART_SetConfig+0x190>
 80077c4:	4ba5      	ldr	r3, [pc, #660]	@ (8007a5c <UART_SetConfig+0x338>)
 80077c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077cc:	2b28      	cmp	r3, #40	@ 0x28
 80077ce:	d86d      	bhi.n	80078ac <UART_SetConfig+0x188>
 80077d0:	a201      	add	r2, pc, #4	@ (adr r2, 80077d8 <UART_SetConfig+0xb4>)
 80077d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d6:	bf00      	nop
 80077d8:	0800787d 	.word	0x0800787d
 80077dc:	080078ad 	.word	0x080078ad
 80077e0:	080078ad 	.word	0x080078ad
 80077e4:	080078ad 	.word	0x080078ad
 80077e8:	080078ad 	.word	0x080078ad
 80077ec:	080078ad 	.word	0x080078ad
 80077f0:	080078ad 	.word	0x080078ad
 80077f4:	080078ad 	.word	0x080078ad
 80077f8:	08007885 	.word	0x08007885
 80077fc:	080078ad 	.word	0x080078ad
 8007800:	080078ad 	.word	0x080078ad
 8007804:	080078ad 	.word	0x080078ad
 8007808:	080078ad 	.word	0x080078ad
 800780c:	080078ad 	.word	0x080078ad
 8007810:	080078ad 	.word	0x080078ad
 8007814:	080078ad 	.word	0x080078ad
 8007818:	0800788d 	.word	0x0800788d
 800781c:	080078ad 	.word	0x080078ad
 8007820:	080078ad 	.word	0x080078ad
 8007824:	080078ad 	.word	0x080078ad
 8007828:	080078ad 	.word	0x080078ad
 800782c:	080078ad 	.word	0x080078ad
 8007830:	080078ad 	.word	0x080078ad
 8007834:	080078ad 	.word	0x080078ad
 8007838:	08007895 	.word	0x08007895
 800783c:	080078ad 	.word	0x080078ad
 8007840:	080078ad 	.word	0x080078ad
 8007844:	080078ad 	.word	0x080078ad
 8007848:	080078ad 	.word	0x080078ad
 800784c:	080078ad 	.word	0x080078ad
 8007850:	080078ad 	.word	0x080078ad
 8007854:	080078ad 	.word	0x080078ad
 8007858:	0800789d 	.word	0x0800789d
 800785c:	080078ad 	.word	0x080078ad
 8007860:	080078ad 	.word	0x080078ad
 8007864:	080078ad 	.word	0x080078ad
 8007868:	080078ad 	.word	0x080078ad
 800786c:	080078ad 	.word	0x080078ad
 8007870:	080078ad 	.word	0x080078ad
 8007874:	080078ad 	.word	0x080078ad
 8007878:	080078a5 	.word	0x080078a5
 800787c:	2301      	movs	r3, #1
 800787e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007882:	e222      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007884:	2304      	movs	r3, #4
 8007886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788a:	e21e      	b.n	8007cca <UART_SetConfig+0x5a6>
 800788c:	2308      	movs	r3, #8
 800788e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007892:	e21a      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007894:	2310      	movs	r3, #16
 8007896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800789a:	e216      	b.n	8007cca <UART_SetConfig+0x5a6>
 800789c:	2320      	movs	r3, #32
 800789e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a2:	e212      	b.n	8007cca <UART_SetConfig+0x5a6>
 80078a4:	2340      	movs	r3, #64	@ 0x40
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078aa:	e20e      	b.n	8007cca <UART_SetConfig+0x5a6>
 80078ac:	2380      	movs	r3, #128	@ 0x80
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078b2:	e20a      	b.n	8007cca <UART_SetConfig+0x5a6>
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a69      	ldr	r2, [pc, #420]	@ (8007a60 <UART_SetConfig+0x33c>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d130      	bne.n	8007920 <UART_SetConfig+0x1fc>
 80078be:	4b67      	ldr	r3, [pc, #412]	@ (8007a5c <UART_SetConfig+0x338>)
 80078c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	2b05      	cmp	r3, #5
 80078c8:	d826      	bhi.n	8007918 <UART_SetConfig+0x1f4>
 80078ca:	a201      	add	r2, pc, #4	@ (adr r2, 80078d0 <UART_SetConfig+0x1ac>)
 80078cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d0:	080078e9 	.word	0x080078e9
 80078d4:	080078f1 	.word	0x080078f1
 80078d8:	080078f9 	.word	0x080078f9
 80078dc:	08007901 	.word	0x08007901
 80078e0:	08007909 	.word	0x08007909
 80078e4:	08007911 	.word	0x08007911
 80078e8:	2300      	movs	r3, #0
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ee:	e1ec      	b.n	8007cca <UART_SetConfig+0x5a6>
 80078f0:	2304      	movs	r3, #4
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f6:	e1e8      	b.n	8007cca <UART_SetConfig+0x5a6>
 80078f8:	2308      	movs	r3, #8
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fe:	e1e4      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007900:	2310      	movs	r3, #16
 8007902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007906:	e1e0      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007908:	2320      	movs	r3, #32
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790e:	e1dc      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007910:	2340      	movs	r3, #64	@ 0x40
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007916:	e1d8      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007918:	2380      	movs	r3, #128	@ 0x80
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791e:	e1d4      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a4f      	ldr	r2, [pc, #316]	@ (8007a64 <UART_SetConfig+0x340>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d130      	bne.n	800798c <UART_SetConfig+0x268>
 800792a:	4b4c      	ldr	r3, [pc, #304]	@ (8007a5c <UART_SetConfig+0x338>)
 800792c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800792e:	f003 0307 	and.w	r3, r3, #7
 8007932:	2b05      	cmp	r3, #5
 8007934:	d826      	bhi.n	8007984 <UART_SetConfig+0x260>
 8007936:	a201      	add	r2, pc, #4	@ (adr r2, 800793c <UART_SetConfig+0x218>)
 8007938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793c:	08007955 	.word	0x08007955
 8007940:	0800795d 	.word	0x0800795d
 8007944:	08007965 	.word	0x08007965
 8007948:	0800796d 	.word	0x0800796d
 800794c:	08007975 	.word	0x08007975
 8007950:	0800797d 	.word	0x0800797d
 8007954:	2300      	movs	r3, #0
 8007956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795a:	e1b6      	b.n	8007cca <UART_SetConfig+0x5a6>
 800795c:	2304      	movs	r3, #4
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007962:	e1b2      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007964:	2308      	movs	r3, #8
 8007966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796a:	e1ae      	b.n	8007cca <UART_SetConfig+0x5a6>
 800796c:	2310      	movs	r3, #16
 800796e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007972:	e1aa      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007974:	2320      	movs	r3, #32
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797a:	e1a6      	b.n	8007cca <UART_SetConfig+0x5a6>
 800797c:	2340      	movs	r3, #64	@ 0x40
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007982:	e1a2      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007984:	2380      	movs	r3, #128	@ 0x80
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800798a:	e19e      	b.n	8007cca <UART_SetConfig+0x5a6>
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a35      	ldr	r2, [pc, #212]	@ (8007a68 <UART_SetConfig+0x344>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d130      	bne.n	80079f8 <UART_SetConfig+0x2d4>
 8007996:	4b31      	ldr	r3, [pc, #196]	@ (8007a5c <UART_SetConfig+0x338>)
 8007998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800799a:	f003 0307 	and.w	r3, r3, #7
 800799e:	2b05      	cmp	r3, #5
 80079a0:	d826      	bhi.n	80079f0 <UART_SetConfig+0x2cc>
 80079a2:	a201      	add	r2, pc, #4	@ (adr r2, 80079a8 <UART_SetConfig+0x284>)
 80079a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a8:	080079c1 	.word	0x080079c1
 80079ac:	080079c9 	.word	0x080079c9
 80079b0:	080079d1 	.word	0x080079d1
 80079b4:	080079d9 	.word	0x080079d9
 80079b8:	080079e1 	.word	0x080079e1
 80079bc:	080079e9 	.word	0x080079e9
 80079c0:	2300      	movs	r3, #0
 80079c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079c6:	e180      	b.n	8007cca <UART_SetConfig+0x5a6>
 80079c8:	2304      	movs	r3, #4
 80079ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ce:	e17c      	b.n	8007cca <UART_SetConfig+0x5a6>
 80079d0:	2308      	movs	r3, #8
 80079d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079d6:	e178      	b.n	8007cca <UART_SetConfig+0x5a6>
 80079d8:	2310      	movs	r3, #16
 80079da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079de:	e174      	b.n	8007cca <UART_SetConfig+0x5a6>
 80079e0:	2320      	movs	r3, #32
 80079e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079e6:	e170      	b.n	8007cca <UART_SetConfig+0x5a6>
 80079e8:	2340      	movs	r3, #64	@ 0x40
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ee:	e16c      	b.n	8007cca <UART_SetConfig+0x5a6>
 80079f0:	2380      	movs	r3, #128	@ 0x80
 80079f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079f6:	e168      	b.n	8007cca <UART_SetConfig+0x5a6>
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a1b      	ldr	r2, [pc, #108]	@ (8007a6c <UART_SetConfig+0x348>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d142      	bne.n	8007a88 <UART_SetConfig+0x364>
 8007a02:	4b16      	ldr	r3, [pc, #88]	@ (8007a5c <UART_SetConfig+0x338>)
 8007a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a06:	f003 0307 	and.w	r3, r3, #7
 8007a0a:	2b05      	cmp	r3, #5
 8007a0c:	d838      	bhi.n	8007a80 <UART_SetConfig+0x35c>
 8007a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a14 <UART_SetConfig+0x2f0>)
 8007a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a14:	08007a2d 	.word	0x08007a2d
 8007a18:	08007a35 	.word	0x08007a35
 8007a1c:	08007a3d 	.word	0x08007a3d
 8007a20:	08007a45 	.word	0x08007a45
 8007a24:	08007a71 	.word	0x08007a71
 8007a28:	08007a79 	.word	0x08007a79
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a32:	e14a      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007a34:	2304      	movs	r3, #4
 8007a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a3a:	e146      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007a3c:	2308      	movs	r3, #8
 8007a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a42:	e142      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007a44:	2310      	movs	r3, #16
 8007a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a4a:	e13e      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007a4c:	cfff69f3 	.word	0xcfff69f3
 8007a50:	58000c00 	.word	0x58000c00
 8007a54:	11fff4ff 	.word	0x11fff4ff
 8007a58:	40011000 	.word	0x40011000
 8007a5c:	58024400 	.word	0x58024400
 8007a60:	40004400 	.word	0x40004400
 8007a64:	40004800 	.word	0x40004800
 8007a68:	40004c00 	.word	0x40004c00
 8007a6c:	40005000 	.word	0x40005000
 8007a70:	2320      	movs	r3, #32
 8007a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a76:	e128      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007a78:	2340      	movs	r3, #64	@ 0x40
 8007a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a7e:	e124      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007a80:	2380      	movs	r3, #128	@ 0x80
 8007a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a86:	e120      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4acb      	ldr	r2, [pc, #812]	@ (8007dbc <UART_SetConfig+0x698>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d176      	bne.n	8007b80 <UART_SetConfig+0x45c>
 8007a92:	4bcb      	ldr	r3, [pc, #812]	@ (8007dc0 <UART_SetConfig+0x69c>)
 8007a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a9a:	2b28      	cmp	r3, #40	@ 0x28
 8007a9c:	d86c      	bhi.n	8007b78 <UART_SetConfig+0x454>
 8007a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa4 <UART_SetConfig+0x380>)
 8007aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa4:	08007b49 	.word	0x08007b49
 8007aa8:	08007b79 	.word	0x08007b79
 8007aac:	08007b79 	.word	0x08007b79
 8007ab0:	08007b79 	.word	0x08007b79
 8007ab4:	08007b79 	.word	0x08007b79
 8007ab8:	08007b79 	.word	0x08007b79
 8007abc:	08007b79 	.word	0x08007b79
 8007ac0:	08007b79 	.word	0x08007b79
 8007ac4:	08007b51 	.word	0x08007b51
 8007ac8:	08007b79 	.word	0x08007b79
 8007acc:	08007b79 	.word	0x08007b79
 8007ad0:	08007b79 	.word	0x08007b79
 8007ad4:	08007b79 	.word	0x08007b79
 8007ad8:	08007b79 	.word	0x08007b79
 8007adc:	08007b79 	.word	0x08007b79
 8007ae0:	08007b79 	.word	0x08007b79
 8007ae4:	08007b59 	.word	0x08007b59
 8007ae8:	08007b79 	.word	0x08007b79
 8007aec:	08007b79 	.word	0x08007b79
 8007af0:	08007b79 	.word	0x08007b79
 8007af4:	08007b79 	.word	0x08007b79
 8007af8:	08007b79 	.word	0x08007b79
 8007afc:	08007b79 	.word	0x08007b79
 8007b00:	08007b79 	.word	0x08007b79
 8007b04:	08007b61 	.word	0x08007b61
 8007b08:	08007b79 	.word	0x08007b79
 8007b0c:	08007b79 	.word	0x08007b79
 8007b10:	08007b79 	.word	0x08007b79
 8007b14:	08007b79 	.word	0x08007b79
 8007b18:	08007b79 	.word	0x08007b79
 8007b1c:	08007b79 	.word	0x08007b79
 8007b20:	08007b79 	.word	0x08007b79
 8007b24:	08007b69 	.word	0x08007b69
 8007b28:	08007b79 	.word	0x08007b79
 8007b2c:	08007b79 	.word	0x08007b79
 8007b30:	08007b79 	.word	0x08007b79
 8007b34:	08007b79 	.word	0x08007b79
 8007b38:	08007b79 	.word	0x08007b79
 8007b3c:	08007b79 	.word	0x08007b79
 8007b40:	08007b79 	.word	0x08007b79
 8007b44:	08007b71 	.word	0x08007b71
 8007b48:	2301      	movs	r3, #1
 8007b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b4e:	e0bc      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007b50:	2304      	movs	r3, #4
 8007b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b56:	e0b8      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007b58:	2308      	movs	r3, #8
 8007b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b5e:	e0b4      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007b60:	2310      	movs	r3, #16
 8007b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b66:	e0b0      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007b68:	2320      	movs	r3, #32
 8007b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b6e:	e0ac      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007b70:	2340      	movs	r3, #64	@ 0x40
 8007b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b76:	e0a8      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007b78:	2380      	movs	r3, #128	@ 0x80
 8007b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b7e:	e0a4      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a8f      	ldr	r2, [pc, #572]	@ (8007dc4 <UART_SetConfig+0x6a0>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d130      	bne.n	8007bec <UART_SetConfig+0x4c8>
 8007b8a:	4b8d      	ldr	r3, [pc, #564]	@ (8007dc0 <UART_SetConfig+0x69c>)
 8007b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b8e:	f003 0307 	and.w	r3, r3, #7
 8007b92:	2b05      	cmp	r3, #5
 8007b94:	d826      	bhi.n	8007be4 <UART_SetConfig+0x4c0>
 8007b96:	a201      	add	r2, pc, #4	@ (adr r2, 8007b9c <UART_SetConfig+0x478>)
 8007b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9c:	08007bb5 	.word	0x08007bb5
 8007ba0:	08007bbd 	.word	0x08007bbd
 8007ba4:	08007bc5 	.word	0x08007bc5
 8007ba8:	08007bcd 	.word	0x08007bcd
 8007bac:	08007bd5 	.word	0x08007bd5
 8007bb0:	08007bdd 	.word	0x08007bdd
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bba:	e086      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007bbc:	2304      	movs	r3, #4
 8007bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bc2:	e082      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007bc4:	2308      	movs	r3, #8
 8007bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bca:	e07e      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007bcc:	2310      	movs	r3, #16
 8007bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bd2:	e07a      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007bd4:	2320      	movs	r3, #32
 8007bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bda:	e076      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007bdc:	2340      	movs	r3, #64	@ 0x40
 8007bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007be2:	e072      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007be4:	2380      	movs	r3, #128	@ 0x80
 8007be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bea:	e06e      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a75      	ldr	r2, [pc, #468]	@ (8007dc8 <UART_SetConfig+0x6a4>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d130      	bne.n	8007c58 <UART_SetConfig+0x534>
 8007bf6:	4b72      	ldr	r3, [pc, #456]	@ (8007dc0 <UART_SetConfig+0x69c>)
 8007bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bfa:	f003 0307 	and.w	r3, r3, #7
 8007bfe:	2b05      	cmp	r3, #5
 8007c00:	d826      	bhi.n	8007c50 <UART_SetConfig+0x52c>
 8007c02:	a201      	add	r2, pc, #4	@ (adr r2, 8007c08 <UART_SetConfig+0x4e4>)
 8007c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c08:	08007c21 	.word	0x08007c21
 8007c0c:	08007c29 	.word	0x08007c29
 8007c10:	08007c31 	.word	0x08007c31
 8007c14:	08007c39 	.word	0x08007c39
 8007c18:	08007c41 	.word	0x08007c41
 8007c1c:	08007c49 	.word	0x08007c49
 8007c20:	2300      	movs	r3, #0
 8007c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c26:	e050      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007c28:	2304      	movs	r3, #4
 8007c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c2e:	e04c      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007c30:	2308      	movs	r3, #8
 8007c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c36:	e048      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007c38:	2310      	movs	r3, #16
 8007c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c3e:	e044      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007c40:	2320      	movs	r3, #32
 8007c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c46:	e040      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007c48:	2340      	movs	r3, #64	@ 0x40
 8007c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c4e:	e03c      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007c50:	2380      	movs	r3, #128	@ 0x80
 8007c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c56:	e038      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a5b      	ldr	r2, [pc, #364]	@ (8007dcc <UART_SetConfig+0x6a8>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d130      	bne.n	8007cc4 <UART_SetConfig+0x5a0>
 8007c62:	4b57      	ldr	r3, [pc, #348]	@ (8007dc0 <UART_SetConfig+0x69c>)
 8007c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c66:	f003 0307 	and.w	r3, r3, #7
 8007c6a:	2b05      	cmp	r3, #5
 8007c6c:	d826      	bhi.n	8007cbc <UART_SetConfig+0x598>
 8007c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c74 <UART_SetConfig+0x550>)
 8007c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c74:	08007c8d 	.word	0x08007c8d
 8007c78:	08007c95 	.word	0x08007c95
 8007c7c:	08007c9d 	.word	0x08007c9d
 8007c80:	08007ca5 	.word	0x08007ca5
 8007c84:	08007cad 	.word	0x08007cad
 8007c88:	08007cb5 	.word	0x08007cb5
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c92:	e01a      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007c94:	2304      	movs	r3, #4
 8007c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c9a:	e016      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007c9c:	2308      	movs	r3, #8
 8007c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ca2:	e012      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007ca4:	2310      	movs	r3, #16
 8007ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007caa:	e00e      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007cac:	2320      	movs	r3, #32
 8007cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cb2:	e00a      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007cb4:	2340      	movs	r3, #64	@ 0x40
 8007cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cba:	e006      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007cbc:	2380      	movs	r3, #128	@ 0x80
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cc2:	e002      	b.n	8007cca <UART_SetConfig+0x5a6>
 8007cc4:	2380      	movs	r3, #128	@ 0x80
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a3f      	ldr	r2, [pc, #252]	@ (8007dcc <UART_SetConfig+0x6a8>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	f040 80f8 	bne.w	8007ec6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007cd6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007cda:	2b20      	cmp	r3, #32
 8007cdc:	dc46      	bgt.n	8007d6c <UART_SetConfig+0x648>
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	f2c0 8082 	blt.w	8007de8 <UART_SetConfig+0x6c4>
 8007ce4:	3b02      	subs	r3, #2
 8007ce6:	2b1e      	cmp	r3, #30
 8007ce8:	d87e      	bhi.n	8007de8 <UART_SetConfig+0x6c4>
 8007cea:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf0 <UART_SetConfig+0x5cc>)
 8007cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf0:	08007d73 	.word	0x08007d73
 8007cf4:	08007de9 	.word	0x08007de9
 8007cf8:	08007d7b 	.word	0x08007d7b
 8007cfc:	08007de9 	.word	0x08007de9
 8007d00:	08007de9 	.word	0x08007de9
 8007d04:	08007de9 	.word	0x08007de9
 8007d08:	08007d8b 	.word	0x08007d8b
 8007d0c:	08007de9 	.word	0x08007de9
 8007d10:	08007de9 	.word	0x08007de9
 8007d14:	08007de9 	.word	0x08007de9
 8007d18:	08007de9 	.word	0x08007de9
 8007d1c:	08007de9 	.word	0x08007de9
 8007d20:	08007de9 	.word	0x08007de9
 8007d24:	08007de9 	.word	0x08007de9
 8007d28:	08007d9b 	.word	0x08007d9b
 8007d2c:	08007de9 	.word	0x08007de9
 8007d30:	08007de9 	.word	0x08007de9
 8007d34:	08007de9 	.word	0x08007de9
 8007d38:	08007de9 	.word	0x08007de9
 8007d3c:	08007de9 	.word	0x08007de9
 8007d40:	08007de9 	.word	0x08007de9
 8007d44:	08007de9 	.word	0x08007de9
 8007d48:	08007de9 	.word	0x08007de9
 8007d4c:	08007de9 	.word	0x08007de9
 8007d50:	08007de9 	.word	0x08007de9
 8007d54:	08007de9 	.word	0x08007de9
 8007d58:	08007de9 	.word	0x08007de9
 8007d5c:	08007de9 	.word	0x08007de9
 8007d60:	08007de9 	.word	0x08007de9
 8007d64:	08007de9 	.word	0x08007de9
 8007d68:	08007ddb 	.word	0x08007ddb
 8007d6c:	2b40      	cmp	r3, #64	@ 0x40
 8007d6e:	d037      	beq.n	8007de0 <UART_SetConfig+0x6bc>
 8007d70:	e03a      	b.n	8007de8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007d72:	f7fd f899 	bl	8004ea8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007d76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d78:	e03c      	b.n	8007df4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fd f8a8 	bl	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d88:	e034      	b.n	8007df4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d8a:	f107 0318 	add.w	r3, r7, #24
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7fd f9f4 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d98:	e02c      	b.n	8007df4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d9a:	4b09      	ldr	r3, [pc, #36]	@ (8007dc0 <UART_SetConfig+0x69c>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 0320 	and.w	r3, r3, #32
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d016      	beq.n	8007dd4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007da6:	4b06      	ldr	r3, [pc, #24]	@ (8007dc0 <UART_SetConfig+0x69c>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	08db      	lsrs	r3, r3, #3
 8007dac:	f003 0303 	and.w	r3, r3, #3
 8007db0:	4a07      	ldr	r2, [pc, #28]	@ (8007dd0 <UART_SetConfig+0x6ac>)
 8007db2:	fa22 f303 	lsr.w	r3, r2, r3
 8007db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007db8:	e01c      	b.n	8007df4 <UART_SetConfig+0x6d0>
 8007dba:	bf00      	nop
 8007dbc:	40011400 	.word	0x40011400
 8007dc0:	58024400 	.word	0x58024400
 8007dc4:	40007800 	.word	0x40007800
 8007dc8:	40007c00 	.word	0x40007c00
 8007dcc:	58000c00 	.word	0x58000c00
 8007dd0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007dd4:	4b9d      	ldr	r3, [pc, #628]	@ (800804c <UART_SetConfig+0x928>)
 8007dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dd8:	e00c      	b.n	8007df4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007dda:	4b9d      	ldr	r3, [pc, #628]	@ (8008050 <UART_SetConfig+0x92c>)
 8007ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dde:	e009      	b.n	8007df4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007de0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007de6:	e005      	b.n	8007df4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007de8:	2300      	movs	r3, #0
 8007dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007df2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f000 81de 	beq.w	80081b8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e00:	4a94      	ldr	r2, [pc, #592]	@ (8008054 <UART_SetConfig+0x930>)
 8007e02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e06:	461a      	mov	r2, r3
 8007e08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e0e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	685a      	ldr	r2, [r3, #4]
 8007e14:	4613      	mov	r3, r2
 8007e16:	005b      	lsls	r3, r3, #1
 8007e18:	4413      	add	r3, r2
 8007e1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d305      	bcc.n	8007e2c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d903      	bls.n	8007e34 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007e32:	e1c1      	b.n	80081b8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e36:	2200      	movs	r2, #0
 8007e38:	60bb      	str	r3, [r7, #8]
 8007e3a:	60fa      	str	r2, [r7, #12]
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e40:	4a84      	ldr	r2, [pc, #528]	@ (8008054 <UART_SetConfig+0x930>)
 8007e42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	2200      	movs	r2, #0
 8007e4a:	603b      	str	r3, [r7, #0]
 8007e4c:	607a      	str	r2, [r7, #4]
 8007e4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e56:	f7f8 fa93 	bl	8000380 <__aeabi_uldivmod>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	4610      	mov	r0, r2
 8007e60:	4619      	mov	r1, r3
 8007e62:	f04f 0200 	mov.w	r2, #0
 8007e66:	f04f 0300 	mov.w	r3, #0
 8007e6a:	020b      	lsls	r3, r1, #8
 8007e6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e70:	0202      	lsls	r2, r0, #8
 8007e72:	6979      	ldr	r1, [r7, #20]
 8007e74:	6849      	ldr	r1, [r1, #4]
 8007e76:	0849      	lsrs	r1, r1, #1
 8007e78:	2000      	movs	r0, #0
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	4605      	mov	r5, r0
 8007e7e:	eb12 0804 	adds.w	r8, r2, r4
 8007e82:	eb43 0905 	adc.w	r9, r3, r5
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	469a      	mov	sl, r3
 8007e8e:	4693      	mov	fp, r2
 8007e90:	4652      	mov	r2, sl
 8007e92:	465b      	mov	r3, fp
 8007e94:	4640      	mov	r0, r8
 8007e96:	4649      	mov	r1, r9
 8007e98:	f7f8 fa72 	bl	8000380 <__aeabi_uldivmod>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007eaa:	d308      	bcc.n	8007ebe <UART_SetConfig+0x79a>
 8007eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007eb2:	d204      	bcs.n	8007ebe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007eba:	60da      	str	r2, [r3, #12]
 8007ebc:	e17c      	b.n	80081b8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007ec4:	e178      	b.n	80081b8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ece:	f040 80c5 	bne.w	800805c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007ed2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007ed6:	2b20      	cmp	r3, #32
 8007ed8:	dc48      	bgt.n	8007f6c <UART_SetConfig+0x848>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	db7b      	blt.n	8007fd6 <UART_SetConfig+0x8b2>
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	d879      	bhi.n	8007fd6 <UART_SetConfig+0x8b2>
 8007ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ee8 <UART_SetConfig+0x7c4>)
 8007ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee8:	08007f73 	.word	0x08007f73
 8007eec:	08007f7b 	.word	0x08007f7b
 8007ef0:	08007fd7 	.word	0x08007fd7
 8007ef4:	08007fd7 	.word	0x08007fd7
 8007ef8:	08007f83 	.word	0x08007f83
 8007efc:	08007fd7 	.word	0x08007fd7
 8007f00:	08007fd7 	.word	0x08007fd7
 8007f04:	08007fd7 	.word	0x08007fd7
 8007f08:	08007f93 	.word	0x08007f93
 8007f0c:	08007fd7 	.word	0x08007fd7
 8007f10:	08007fd7 	.word	0x08007fd7
 8007f14:	08007fd7 	.word	0x08007fd7
 8007f18:	08007fd7 	.word	0x08007fd7
 8007f1c:	08007fd7 	.word	0x08007fd7
 8007f20:	08007fd7 	.word	0x08007fd7
 8007f24:	08007fd7 	.word	0x08007fd7
 8007f28:	08007fa3 	.word	0x08007fa3
 8007f2c:	08007fd7 	.word	0x08007fd7
 8007f30:	08007fd7 	.word	0x08007fd7
 8007f34:	08007fd7 	.word	0x08007fd7
 8007f38:	08007fd7 	.word	0x08007fd7
 8007f3c:	08007fd7 	.word	0x08007fd7
 8007f40:	08007fd7 	.word	0x08007fd7
 8007f44:	08007fd7 	.word	0x08007fd7
 8007f48:	08007fd7 	.word	0x08007fd7
 8007f4c:	08007fd7 	.word	0x08007fd7
 8007f50:	08007fd7 	.word	0x08007fd7
 8007f54:	08007fd7 	.word	0x08007fd7
 8007f58:	08007fd7 	.word	0x08007fd7
 8007f5c:	08007fd7 	.word	0x08007fd7
 8007f60:	08007fd7 	.word	0x08007fd7
 8007f64:	08007fd7 	.word	0x08007fd7
 8007f68:	08007fc9 	.word	0x08007fc9
 8007f6c:	2b40      	cmp	r3, #64	@ 0x40
 8007f6e:	d02e      	beq.n	8007fce <UART_SetConfig+0x8aa>
 8007f70:	e031      	b.n	8007fd6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f72:	f7fb fce1 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 8007f76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f78:	e033      	b.n	8007fe2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f7a:	f7fb fcf3 	bl	8003964 <HAL_RCC_GetPCLK2Freq>
 8007f7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f80:	e02f      	b.n	8007fe2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7fc ffa4 	bl	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f90:	e027      	b.n	8007fe2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f92:	f107 0318 	add.w	r3, r7, #24
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fd f8f0 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fa0:	e01f      	b.n	8007fe2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fa2:	4b2d      	ldr	r3, [pc, #180]	@ (8008058 <UART_SetConfig+0x934>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 0320 	and.w	r3, r3, #32
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d009      	beq.n	8007fc2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007fae:	4b2a      	ldr	r3, [pc, #168]	@ (8008058 <UART_SetConfig+0x934>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	08db      	lsrs	r3, r3, #3
 8007fb4:	f003 0303 	and.w	r3, r3, #3
 8007fb8:	4a24      	ldr	r2, [pc, #144]	@ (800804c <UART_SetConfig+0x928>)
 8007fba:	fa22 f303 	lsr.w	r3, r2, r3
 8007fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007fc0:	e00f      	b.n	8007fe2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007fc2:	4b22      	ldr	r3, [pc, #136]	@ (800804c <UART_SetConfig+0x928>)
 8007fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fc6:	e00c      	b.n	8007fe2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007fc8:	4b21      	ldr	r3, [pc, #132]	@ (8008050 <UART_SetConfig+0x92c>)
 8007fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fcc:	e009      	b.n	8007fe2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fd4:	e005      	b.n	8007fe2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007fe0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 80e7 	beq.w	80081b8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fee:	4a19      	ldr	r2, [pc, #100]	@ (8008054 <UART_SetConfig+0x930>)
 8007ff0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ff8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ffc:	005a      	lsls	r2, r3, #1
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	085b      	lsrs	r3, r3, #1
 8008004:	441a      	add	r2, r3
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	fbb2 f3f3 	udiv	r3, r2, r3
 800800e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008012:	2b0f      	cmp	r3, #15
 8008014:	d916      	bls.n	8008044 <UART_SetConfig+0x920>
 8008016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800801c:	d212      	bcs.n	8008044 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800801e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008020:	b29b      	uxth	r3, r3
 8008022:	f023 030f 	bic.w	r3, r3, #15
 8008026:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800802a:	085b      	lsrs	r3, r3, #1
 800802c:	b29b      	uxth	r3, r3
 800802e:	f003 0307 	and.w	r3, r3, #7
 8008032:	b29a      	uxth	r2, r3
 8008034:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008036:	4313      	orrs	r3, r2
 8008038:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008040:	60da      	str	r2, [r3, #12]
 8008042:	e0b9      	b.n	80081b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800804a:	e0b5      	b.n	80081b8 <UART_SetConfig+0xa94>
 800804c:	03d09000 	.word	0x03d09000
 8008050:	003d0900 	.word	0x003d0900
 8008054:	0800df88 	.word	0x0800df88
 8008058:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800805c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008060:	2b20      	cmp	r3, #32
 8008062:	dc49      	bgt.n	80080f8 <UART_SetConfig+0x9d4>
 8008064:	2b00      	cmp	r3, #0
 8008066:	db7c      	blt.n	8008162 <UART_SetConfig+0xa3e>
 8008068:	2b20      	cmp	r3, #32
 800806a:	d87a      	bhi.n	8008162 <UART_SetConfig+0xa3e>
 800806c:	a201      	add	r2, pc, #4	@ (adr r2, 8008074 <UART_SetConfig+0x950>)
 800806e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008072:	bf00      	nop
 8008074:	080080ff 	.word	0x080080ff
 8008078:	08008107 	.word	0x08008107
 800807c:	08008163 	.word	0x08008163
 8008080:	08008163 	.word	0x08008163
 8008084:	0800810f 	.word	0x0800810f
 8008088:	08008163 	.word	0x08008163
 800808c:	08008163 	.word	0x08008163
 8008090:	08008163 	.word	0x08008163
 8008094:	0800811f 	.word	0x0800811f
 8008098:	08008163 	.word	0x08008163
 800809c:	08008163 	.word	0x08008163
 80080a0:	08008163 	.word	0x08008163
 80080a4:	08008163 	.word	0x08008163
 80080a8:	08008163 	.word	0x08008163
 80080ac:	08008163 	.word	0x08008163
 80080b0:	08008163 	.word	0x08008163
 80080b4:	0800812f 	.word	0x0800812f
 80080b8:	08008163 	.word	0x08008163
 80080bc:	08008163 	.word	0x08008163
 80080c0:	08008163 	.word	0x08008163
 80080c4:	08008163 	.word	0x08008163
 80080c8:	08008163 	.word	0x08008163
 80080cc:	08008163 	.word	0x08008163
 80080d0:	08008163 	.word	0x08008163
 80080d4:	08008163 	.word	0x08008163
 80080d8:	08008163 	.word	0x08008163
 80080dc:	08008163 	.word	0x08008163
 80080e0:	08008163 	.word	0x08008163
 80080e4:	08008163 	.word	0x08008163
 80080e8:	08008163 	.word	0x08008163
 80080ec:	08008163 	.word	0x08008163
 80080f0:	08008163 	.word	0x08008163
 80080f4:	08008155 	.word	0x08008155
 80080f8:	2b40      	cmp	r3, #64	@ 0x40
 80080fa:	d02e      	beq.n	800815a <UART_SetConfig+0xa36>
 80080fc:	e031      	b.n	8008162 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080fe:	f7fb fc1b 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 8008102:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008104:	e033      	b.n	800816e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008106:	f7fb fc2d 	bl	8003964 <HAL_RCC_GetPCLK2Freq>
 800810a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800810c:	e02f      	b.n	800816e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800810e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008112:	4618      	mov	r0, r3
 8008114:	f7fc fede 	bl	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800811c:	e027      	b.n	800816e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800811e:	f107 0318 	add.w	r3, r7, #24
 8008122:	4618      	mov	r0, r3
 8008124:	f7fd f82a 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800812c:	e01f      	b.n	800816e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800812e:	4b2d      	ldr	r3, [pc, #180]	@ (80081e4 <UART_SetConfig+0xac0>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0320 	and.w	r3, r3, #32
 8008136:	2b00      	cmp	r3, #0
 8008138:	d009      	beq.n	800814e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800813a:	4b2a      	ldr	r3, [pc, #168]	@ (80081e4 <UART_SetConfig+0xac0>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	08db      	lsrs	r3, r3, #3
 8008140:	f003 0303 	and.w	r3, r3, #3
 8008144:	4a28      	ldr	r2, [pc, #160]	@ (80081e8 <UART_SetConfig+0xac4>)
 8008146:	fa22 f303 	lsr.w	r3, r2, r3
 800814a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800814c:	e00f      	b.n	800816e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800814e:	4b26      	ldr	r3, [pc, #152]	@ (80081e8 <UART_SetConfig+0xac4>)
 8008150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008152:	e00c      	b.n	800816e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008154:	4b25      	ldr	r3, [pc, #148]	@ (80081ec <UART_SetConfig+0xac8>)
 8008156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008158:	e009      	b.n	800816e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800815a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800815e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008160:	e005      	b.n	800816e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008162:	2300      	movs	r3, #0
 8008164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800816c:	bf00      	nop
    }

    if (pclk != 0U)
 800816e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008170:	2b00      	cmp	r3, #0
 8008172:	d021      	beq.n	80081b8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008178:	4a1d      	ldr	r2, [pc, #116]	@ (80081f0 <UART_SetConfig+0xacc>)
 800817a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800817e:	461a      	mov	r2, r3
 8008180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008182:	fbb3 f2f2 	udiv	r2, r3, r2
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	085b      	lsrs	r3, r3, #1
 800818c:	441a      	add	r2, r3
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	fbb2 f3f3 	udiv	r3, r2, r3
 8008196:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800819a:	2b0f      	cmp	r3, #15
 800819c:	d909      	bls.n	80081b2 <UART_SetConfig+0xa8e>
 800819e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081a4:	d205      	bcs.n	80081b2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80081a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	60da      	str	r2, [r3, #12]
 80081b0:	e002      	b.n	80081b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	2200      	movs	r2, #0
 80081cc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	2200      	movs	r2, #0
 80081d2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80081d4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3748      	adds	r7, #72	@ 0x48
 80081dc:	46bd      	mov	sp, r7
 80081de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081e2:	bf00      	nop
 80081e4:	58024400 	.word	0x58024400
 80081e8:	03d09000 	.word	0x03d09000
 80081ec:	003d0900 	.word	0x003d0900
 80081f0:	0800df88 	.word	0x0800df88

080081f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008200:	f003 0308 	and.w	r3, r3, #8
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00a      	beq.n	800821e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	430a      	orrs	r2, r1
 800821c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00a      	beq.n	8008240 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	430a      	orrs	r2, r1
 800823e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008244:	f003 0302 	and.w	r3, r3, #2
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00a      	beq.n	8008262 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	430a      	orrs	r2, r1
 8008260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008266:	f003 0304 	and.w	r3, r3, #4
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00a      	beq.n	8008284 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	430a      	orrs	r2, r1
 8008282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008288:	f003 0310 	and.w	r3, r3, #16
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00a      	beq.n	80082a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	430a      	orrs	r2, r1
 80082a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082aa:	f003 0320 	and.w	r3, r3, #32
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00a      	beq.n	80082c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	430a      	orrs	r2, r1
 80082c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d01a      	beq.n	800830a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	430a      	orrs	r2, r1
 80082e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082f2:	d10a      	bne.n	800830a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	430a      	orrs	r2, r1
 8008308:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800830e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00a      	beq.n	800832c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	430a      	orrs	r2, r1
 800832a:	605a      	str	r2, [r3, #4]
  }
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b098      	sub	sp, #96	@ 0x60
 800833c:	af02      	add	r7, sp, #8
 800833e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008348:	f7f9 ff52 	bl	80021f0 <HAL_GetTick>
 800834c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0308 	and.w	r3, r3, #8
 8008358:	2b08      	cmp	r3, #8
 800835a:	d12f      	bne.n	80083bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800835c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008364:	2200      	movs	r2, #0
 8008366:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f88e 	bl	800848c <UART_WaitOnFlagUntilTimeout>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d022      	beq.n	80083bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800837e:	e853 3f00 	ldrex	r3, [r3]
 8008382:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008386:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800838a:	653b      	str	r3, [r7, #80]	@ 0x50
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	461a      	mov	r2, r3
 8008392:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008394:	647b      	str	r3, [r7, #68]	@ 0x44
 8008396:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008398:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800839a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800839c:	e841 2300 	strex	r3, r2, [r1]
 80083a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80083a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1e6      	bne.n	8008376 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2220      	movs	r2, #32
 80083ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e063      	b.n	8008484 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0304 	and.w	r3, r3, #4
 80083c6:	2b04      	cmp	r3, #4
 80083c8:	d149      	bne.n	800845e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80083ce:	9300      	str	r3, [sp, #0]
 80083d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083d2:	2200      	movs	r2, #0
 80083d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 f857 	bl	800848c <UART_WaitOnFlagUntilTimeout>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d03c      	beq.n	800845e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ec:	e853 3f00 	ldrex	r3, [r3]
 80083f0:	623b      	str	r3, [r7, #32]
   return(result);
 80083f2:	6a3b      	ldr	r3, [r7, #32]
 80083f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008402:	633b      	str	r3, [r7, #48]	@ 0x30
 8008404:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008406:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800840a:	e841 2300 	strex	r3, r2, [r1]
 800840e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1e6      	bne.n	80083e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3308      	adds	r3, #8
 800841c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	e853 3f00 	ldrex	r3, [r3]
 8008424:	60fb      	str	r3, [r7, #12]
   return(result);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f023 0301 	bic.w	r3, r3, #1
 800842c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3308      	adds	r3, #8
 8008434:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008436:	61fa      	str	r2, [r7, #28]
 8008438:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843a:	69b9      	ldr	r1, [r7, #24]
 800843c:	69fa      	ldr	r2, [r7, #28]
 800843e:	e841 2300 	strex	r3, r2, [r1]
 8008442:	617b      	str	r3, [r7, #20]
   return(result);
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1e5      	bne.n	8008416 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2220      	movs	r2, #32
 800844e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e012      	b.n	8008484 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2220      	movs	r2, #32
 8008462:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2220      	movs	r2, #32
 800846a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3758      	adds	r7, #88	@ 0x58
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	603b      	str	r3, [r7, #0]
 8008498:	4613      	mov	r3, r2
 800849a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800849c:	e04f      	b.n	800853e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a4:	d04b      	beq.n	800853e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084a6:	f7f9 fea3 	bl	80021f0 <HAL_GetTick>
 80084aa:	4602      	mov	r2, r0
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d302      	bcc.n	80084bc <UART_WaitOnFlagUntilTimeout+0x30>
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d101      	bne.n	80084c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80084bc:	2303      	movs	r3, #3
 80084be:	e04e      	b.n	800855e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 0304 	and.w	r3, r3, #4
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d037      	beq.n	800853e <UART_WaitOnFlagUntilTimeout+0xb2>
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	2b80      	cmp	r3, #128	@ 0x80
 80084d2:	d034      	beq.n	800853e <UART_WaitOnFlagUntilTimeout+0xb2>
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	2b40      	cmp	r3, #64	@ 0x40
 80084d8:	d031      	beq.n	800853e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	69db      	ldr	r3, [r3, #28]
 80084e0:	f003 0308 	and.w	r3, r3, #8
 80084e4:	2b08      	cmp	r3, #8
 80084e6:	d110      	bne.n	800850a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2208      	movs	r2, #8
 80084ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f000 f839 	bl	8008568 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2208      	movs	r2, #8
 80084fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e029      	b.n	800855e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	69db      	ldr	r3, [r3, #28]
 8008510:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008514:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008518:	d111      	bne.n	800853e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008522:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f000 f81f 	bl	8008568 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2220      	movs	r2, #32
 800852e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e00f      	b.n	800855e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	69da      	ldr	r2, [r3, #28]
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	4013      	ands	r3, r2
 8008548:	68ba      	ldr	r2, [r7, #8]
 800854a:	429a      	cmp	r2, r3
 800854c:	bf0c      	ite	eq
 800854e:	2301      	moveq	r3, #1
 8008550:	2300      	movne	r3, #0
 8008552:	b2db      	uxtb	r3, r3
 8008554:	461a      	mov	r2, r3
 8008556:	79fb      	ldrb	r3, [r7, #7]
 8008558:	429a      	cmp	r2, r3
 800855a:	d0a0      	beq.n	800849e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
	...

08008568 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008568:	b480      	push	{r7}
 800856a:	b095      	sub	sp, #84	@ 0x54
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008578:	e853 3f00 	ldrex	r3, [r3]
 800857c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800857e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008580:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008584:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800858e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008590:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008592:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008594:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008596:	e841 2300 	strex	r3, r2, [r1]
 800859a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800859c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1e6      	bne.n	8008570 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	3308      	adds	r3, #8
 80085a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085aa:	6a3b      	ldr	r3, [r7, #32]
 80085ac:	e853 3f00 	ldrex	r3, [r3]
 80085b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80085b2:	69fa      	ldr	r2, [r7, #28]
 80085b4:	4b1e      	ldr	r3, [pc, #120]	@ (8008630 <UART_EndRxTransfer+0xc8>)
 80085b6:	4013      	ands	r3, r2
 80085b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	3308      	adds	r3, #8
 80085c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80085c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085ca:	e841 2300 	strex	r3, r2, [r1]
 80085ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1e5      	bne.n	80085a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d118      	bne.n	8008610 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	e853 3f00 	ldrex	r3, [r3]
 80085ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	f023 0310 	bic.w	r3, r3, #16
 80085f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	461a      	mov	r2, r3
 80085fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085fc:	61bb      	str	r3, [r7, #24]
 80085fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008600:	6979      	ldr	r1, [r7, #20]
 8008602:	69ba      	ldr	r2, [r7, #24]
 8008604:	e841 2300 	strex	r3, r2, [r1]
 8008608:	613b      	str	r3, [r7, #16]
   return(result);
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1e6      	bne.n	80085de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2220      	movs	r2, #32
 8008614:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008624:	bf00      	nop
 8008626:	3754      	adds	r7, #84	@ 0x54
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr
 8008630:	effffffe 	.word	0xeffffffe

08008634 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008642:	2b01      	cmp	r3, #1
 8008644:	d101      	bne.n	800864a <HAL_UARTEx_DisableFifoMode+0x16>
 8008646:	2302      	movs	r3, #2
 8008648:	e027      	b.n	800869a <HAL_UARTEx_DisableFifoMode+0x66>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2224      	movs	r2, #36	@ 0x24
 8008656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f022 0201 	bic.w	r2, r2, #1
 8008670:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008678:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2220      	movs	r2, #32
 800868c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3714      	adds	r7, #20
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b084      	sub	sp, #16
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
 80086ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d101      	bne.n	80086be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80086ba:	2302      	movs	r3, #2
 80086bc:	e02d      	b.n	800871a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2224      	movs	r2, #36	@ 0x24
 80086ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f022 0201 	bic.w	r2, r2, #1
 80086e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	683a      	ldr	r2, [r7, #0]
 80086f6:	430a      	orrs	r2, r1
 80086f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f850 	bl	80087a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2220      	movs	r2, #32
 800870c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b084      	sub	sp, #16
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008732:	2b01      	cmp	r3, #1
 8008734:	d101      	bne.n	800873a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008736:	2302      	movs	r3, #2
 8008738:	e02d      	b.n	8008796 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2224      	movs	r2, #36	@ 0x24
 8008746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f022 0201 	bic.w	r2, r2, #1
 8008760:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	683a      	ldr	r2, [r7, #0]
 8008772:	430a      	orrs	r2, r1
 8008774:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f812 	bl	80087a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2220      	movs	r2, #32
 8008788:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
	...

080087a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d108      	bne.n	80087c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80087c0:	e031      	b.n	8008826 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80087c2:	2310      	movs	r3, #16
 80087c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80087c6:	2310      	movs	r3, #16
 80087c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	0e5b      	lsrs	r3, r3, #25
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	f003 0307 	and.w	r3, r3, #7
 80087d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	0f5b      	lsrs	r3, r3, #29
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	f003 0307 	and.w	r3, r3, #7
 80087e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087ea:	7bbb      	ldrb	r3, [r7, #14]
 80087ec:	7b3a      	ldrb	r2, [r7, #12]
 80087ee:	4911      	ldr	r1, [pc, #68]	@ (8008834 <UARTEx_SetNbDataToProcess+0x94>)
 80087f0:	5c8a      	ldrb	r2, [r1, r2]
 80087f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80087f6:	7b3a      	ldrb	r2, [r7, #12]
 80087f8:	490f      	ldr	r1, [pc, #60]	@ (8008838 <UARTEx_SetNbDataToProcess+0x98>)
 80087fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008800:	b29a      	uxth	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008808:	7bfb      	ldrb	r3, [r7, #15]
 800880a:	7b7a      	ldrb	r2, [r7, #13]
 800880c:	4909      	ldr	r1, [pc, #36]	@ (8008834 <UARTEx_SetNbDataToProcess+0x94>)
 800880e:	5c8a      	ldrb	r2, [r1, r2]
 8008810:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008814:	7b7a      	ldrb	r2, [r7, #13]
 8008816:	4908      	ldr	r1, [pc, #32]	@ (8008838 <UARTEx_SetNbDataToProcess+0x98>)
 8008818:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800881a:	fb93 f3f2 	sdiv	r3, r3, r2
 800881e:	b29a      	uxth	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008826:	bf00      	nop
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	0800dfa0 	.word	0x0800dfa0
 8008838:	0800dfa8 	.word	0x0800dfa8

0800883c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800883c:	b580      	push	{r7, lr}
 800883e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008840:	4b05      	ldr	r3, [pc, #20]	@ (8008858 <SysTick_Handler+0x1c>)
 8008842:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008844:	f001 feaa 	bl	800a59c <xTaskGetSchedulerState>
 8008848:	4603      	mov	r3, r0
 800884a:	2b01      	cmp	r3, #1
 800884c:	d001      	beq.n	8008852 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800884e:	f000 fb6b 	bl	8008f28 <xPortSysTickHandler>
  }
}
 8008852:	bf00      	nop
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	e000e010 	.word	0xe000e010

0800885c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4a07      	ldr	r2, [pc, #28]	@ (8008888 <vApplicationGetIdleTaskMemory+0x2c>)
 800886c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	4a06      	ldr	r2, [pc, #24]	@ (800888c <vApplicationGetIdleTaskMemory+0x30>)
 8008872:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2280      	movs	r2, #128	@ 0x80
 8008878:	601a      	str	r2, [r3, #0]
}
 800887a:	bf00      	nop
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	24000394 	.word	0x24000394
 800888c:	240003f0 	.word	0x240003f0

08008890 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4a07      	ldr	r2, [pc, #28]	@ (80088bc <vApplicationGetTimerTaskMemory+0x2c>)
 80088a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	4a06      	ldr	r2, [pc, #24]	@ (80088c0 <vApplicationGetTimerTaskMemory+0x30>)
 80088a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80088ae:	601a      	str	r2, [r3, #0]
}
 80088b0:	bf00      	nop
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	240005f0 	.word	0x240005f0
 80088c0:	2400064c 	.word	0x2400064c

080088c4 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d04f      	beq.n	8008976 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80088d6:	2308      	movs	r3, #8
 80088d8:	425b      	negs	r3, r3
 80088da:	697a      	ldr	r2, [r7, #20]
 80088dc:	4413      	add	r3, r2
 80088de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	4b25      	ldr	r3, [pc, #148]	@ (8008980 <vPortFree+0xbc>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4013      	ands	r3, r2
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10b      	bne.n	800890a <vPortFree+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80088f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f6:	f383 8811 	msr	BASEPRI, r3
 80088fa:	f3bf 8f6f 	isb	sy
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008904:	bf00      	nop
 8008906:	bf00      	nop
 8008908:	e7fd      	b.n	8008906 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00b      	beq.n	800892a <vPortFree+0x66>
	__asm volatile
 8008912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008916:	f383 8811 	msr	BASEPRI, r3
 800891a:	f3bf 8f6f 	isb	sy
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	60bb      	str	r3, [r7, #8]
}
 8008924:	bf00      	nop
 8008926:	bf00      	nop
 8008928:	e7fd      	b.n	8008926 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	685a      	ldr	r2, [r3, #4]
 800892e:	4b14      	ldr	r3, [pc, #80]	@ (8008980 <vPortFree+0xbc>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4013      	ands	r3, r2
 8008934:	2b00      	cmp	r3, #0
 8008936:	d01e      	beq.n	8008976 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d11a      	bne.n	8008976 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	685a      	ldr	r2, [r3, #4]
 8008944:	4b0e      	ldr	r3, [pc, #56]	@ (8008980 <vPortFree+0xbc>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	43db      	mvns	r3, r3
 800894a:	401a      	ands	r2, r3
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008950:	f001 fa3e 	bl	8009dd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	685a      	ldr	r2, [r3, #4]
 8008958:	4b0a      	ldr	r3, [pc, #40]	@ (8008984 <vPortFree+0xc0>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4413      	add	r3, r2
 800895e:	4a09      	ldr	r2, [pc, #36]	@ (8008984 <vPortFree+0xc0>)
 8008960:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008962:	6938      	ldr	r0, [r7, #16]
 8008964:	f000 f812 	bl	800898c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008968:	4b07      	ldr	r3, [pc, #28]	@ (8008988 <vPortFree+0xc4>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3301      	adds	r3, #1
 800896e:	4a06      	ldr	r2, [pc, #24]	@ (8008988 <vPortFree+0xc4>)
 8008970:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008972:	f001 fa3b 	bl	8009dec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008976:	bf00      	nop
 8008978:	3718      	adds	r7, #24
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	24000a60 	.word	0x24000a60
 8008984:	24000a58 	.word	0x24000a58
 8008988:	24000a5c 	.word	0x24000a5c

0800898c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008994:	4b28      	ldr	r3, [pc, #160]	@ (8008a38 <prvInsertBlockIntoFreeList+0xac>)
 8008996:	60fb      	str	r3, [r7, #12]
 8008998:	e002      	b.n	80089a0 <prvInsertBlockIntoFreeList+0x14>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	60fb      	str	r3, [r7, #12]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d8f7      	bhi.n	800899a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	4413      	add	r3, r2
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d108      	bne.n	80089ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	685a      	ldr	r2, [r3, #4]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	441a      	add	r2, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	68ba      	ldr	r2, [r7, #8]
 80089d8:	441a      	add	r2, r3
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d118      	bne.n	8008a14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	4b15      	ldr	r3, [pc, #84]	@ (8008a3c <prvInsertBlockIntoFreeList+0xb0>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d00d      	beq.n	8008a0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	685a      	ldr	r2, [r3, #4]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	441a      	add	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	601a      	str	r2, [r3, #0]
 8008a08:	e008      	b.n	8008a1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8008a3c <prvInsertBlockIntoFreeList+0xb0>)
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	601a      	str	r2, [r3, #0]
 8008a12:	e003      	b.n	8008a1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d002      	beq.n	8008a2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a2a:	bf00      	nop
 8008a2c:	3714      	adds	r7, #20
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	24000a4c 	.word	0x24000a4c
 8008a3c:	24000a54 	.word	0x24000a54

08008a40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f103 0208 	add.w	r2, r3, #8
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f04f 32ff 	mov.w	r2, #4294967295
 8008a58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f103 0208 	add.w	r2, r3, #8
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f103 0208 	add.w	r2, r3, #8
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a8e:	bf00      	nop
 8008a90:	370c      	adds	r7, #12
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr

08008a9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b085      	sub	sp, #20
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	689a      	ldr	r2, [r3, #8]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	683a      	ldr	r2, [r7, #0]
 8008abe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	683a      	ldr	r2, [r7, #0]
 8008ac4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	1c5a      	adds	r2, r3, #1
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	601a      	str	r2, [r3, #0]
}
 8008ad6:	bf00      	nop
 8008ad8:	3714      	adds	r7, #20
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b085      	sub	sp, #20
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af8:	d103      	bne.n	8008b02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	60fb      	str	r3, [r7, #12]
 8008b00:	e00c      	b.n	8008b1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	3308      	adds	r3, #8
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	e002      	b.n	8008b10 <vListInsert+0x2e>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	60fb      	str	r3, [r7, #12]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d2f6      	bcs.n	8008b0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	683a      	ldr	r2, [r7, #0]
 8008b2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	1c5a      	adds	r2, r3, #1
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	601a      	str	r2, [r3, #0]
}
 8008b48:	bf00      	nop
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	6892      	ldr	r2, [r2, #8]
 8008b6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	6852      	ldr	r2, [r2, #4]
 8008b74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d103      	bne.n	8008b88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	689a      	ldr	r2, [r3, #8]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	1e5a      	subs	r2, r3, #1
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3714      	adds	r7, #20
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	3b04      	subs	r3, #4
 8008bb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008bc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3b04      	subs	r3, #4
 8008bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	f023 0201 	bic.w	r2, r3, #1
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	3b04      	subs	r3, #4
 8008bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008bd8:	4a0c      	ldr	r2, [pc, #48]	@ (8008c0c <pxPortInitialiseStack+0x64>)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	3b14      	subs	r3, #20
 8008be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	3b04      	subs	r3, #4
 8008bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f06f 0202 	mvn.w	r2, #2
 8008bf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	3b20      	subs	r3, #32
 8008bfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	08008c11 	.word	0x08008c11

08008c10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c16:	2300      	movs	r3, #0
 8008c18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c1a:	4b13      	ldr	r3, [pc, #76]	@ (8008c68 <prvTaskExitError+0x58>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c22:	d00b      	beq.n	8008c3c <prvTaskExitError+0x2c>
	__asm volatile
 8008c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c28:	f383 8811 	msr	BASEPRI, r3
 8008c2c:	f3bf 8f6f 	isb	sy
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	60fb      	str	r3, [r7, #12]
}
 8008c36:	bf00      	nop
 8008c38:	bf00      	nop
 8008c3a:	e7fd      	b.n	8008c38 <prvTaskExitError+0x28>
	__asm volatile
 8008c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c40:	f383 8811 	msr	BASEPRI, r3
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	60bb      	str	r3, [r7, #8]
}
 8008c4e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c50:	bf00      	nop
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d0fc      	beq.n	8008c52 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c58:	bf00      	nop
 8008c5a:	bf00      	nop
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	24000010 	.word	0x24000010
 8008c6c:	00000000 	.word	0x00000000

08008c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c70:	4b07      	ldr	r3, [pc, #28]	@ (8008c90 <pxCurrentTCBConst2>)
 8008c72:	6819      	ldr	r1, [r3, #0]
 8008c74:	6808      	ldr	r0, [r1, #0]
 8008c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7a:	f380 8809 	msr	PSP, r0
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f04f 0000 	mov.w	r0, #0
 8008c86:	f380 8811 	msr	BASEPRI, r0
 8008c8a:	4770      	bx	lr
 8008c8c:	f3af 8000 	nop.w

08008c90 <pxCurrentTCBConst2>:
 8008c90:	24000aac 	.word	0x24000aac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c94:	bf00      	nop
 8008c96:	bf00      	nop

08008c98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c98:	4808      	ldr	r0, [pc, #32]	@ (8008cbc <prvPortStartFirstTask+0x24>)
 8008c9a:	6800      	ldr	r0, [r0, #0]
 8008c9c:	6800      	ldr	r0, [r0, #0]
 8008c9e:	f380 8808 	msr	MSP, r0
 8008ca2:	f04f 0000 	mov.w	r0, #0
 8008ca6:	f380 8814 	msr	CONTROL, r0
 8008caa:	b662      	cpsie	i
 8008cac:	b661      	cpsie	f
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	df00      	svc	0
 8008cb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008cba:	bf00      	nop
 8008cbc:	e000ed08 	.word	0xe000ed08

08008cc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008cc6:	4b47      	ldr	r3, [pc, #284]	@ (8008de4 <xPortStartScheduler+0x124>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a47      	ldr	r2, [pc, #284]	@ (8008de8 <xPortStartScheduler+0x128>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d10b      	bne.n	8008ce8 <xPortStartScheduler+0x28>
	__asm volatile
 8008cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	60fb      	str	r3, [r7, #12]
}
 8008ce2:	bf00      	nop
 8008ce4:	bf00      	nop
 8008ce6:	e7fd      	b.n	8008ce4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8008de4 <xPortStartScheduler+0x124>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a3f      	ldr	r2, [pc, #252]	@ (8008dec <xPortStartScheduler+0x12c>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d10b      	bne.n	8008d0a <xPortStartScheduler+0x4a>
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	613b      	str	r3, [r7, #16]
}
 8008d04:	bf00      	nop
 8008d06:	bf00      	nop
 8008d08:	e7fd      	b.n	8008d06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d0a:	4b39      	ldr	r3, [pc, #228]	@ (8008df0 <xPortStartScheduler+0x130>)
 8008d0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	22ff      	movs	r2, #255	@ 0xff
 8008d1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d24:	78fb      	ldrb	r3, [r7, #3]
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	4b31      	ldr	r3, [pc, #196]	@ (8008df4 <xPortStartScheduler+0x134>)
 8008d30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d32:	4b31      	ldr	r3, [pc, #196]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d34:	2207      	movs	r2, #7
 8008d36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d38:	e009      	b.n	8008d4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008d3a:	4b2f      	ldr	r3, [pc, #188]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	4a2d      	ldr	r2, [pc, #180]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d44:	78fb      	ldrb	r3, [r7, #3]
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	005b      	lsls	r3, r3, #1
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d4e:	78fb      	ldrb	r3, [r7, #3]
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d56:	2b80      	cmp	r3, #128	@ 0x80
 8008d58:	d0ef      	beq.n	8008d3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d5a:	4b27      	ldr	r3, [pc, #156]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f1c3 0307 	rsb	r3, r3, #7
 8008d62:	2b04      	cmp	r3, #4
 8008d64:	d00b      	beq.n	8008d7e <xPortStartScheduler+0xbe>
	__asm volatile
 8008d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6a:	f383 8811 	msr	BASEPRI, r3
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	60bb      	str	r3, [r7, #8]
}
 8008d78:	bf00      	nop
 8008d7a:	bf00      	nop
 8008d7c:	e7fd      	b.n	8008d7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	021b      	lsls	r3, r3, #8
 8008d84:	4a1c      	ldr	r2, [pc, #112]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d88:	4b1b      	ldr	r3, [pc, #108]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d90:	4a19      	ldr	r2, [pc, #100]	@ (8008df8 <xPortStartScheduler+0x138>)
 8008d92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d9c:	4b17      	ldr	r3, [pc, #92]	@ (8008dfc <xPortStartScheduler+0x13c>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a16      	ldr	r2, [pc, #88]	@ (8008dfc <xPortStartScheduler+0x13c>)
 8008da2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008da6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008da8:	4b14      	ldr	r3, [pc, #80]	@ (8008dfc <xPortStartScheduler+0x13c>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a13      	ldr	r2, [pc, #76]	@ (8008dfc <xPortStartScheduler+0x13c>)
 8008dae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008db2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008db4:	f000 f8da 	bl	8008f6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008db8:	4b11      	ldr	r3, [pc, #68]	@ (8008e00 <xPortStartScheduler+0x140>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008dbe:	f000 f8f9 	bl	8008fb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008dc2:	4b10      	ldr	r3, [pc, #64]	@ (8008e04 <xPortStartScheduler+0x144>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a0f      	ldr	r2, [pc, #60]	@ (8008e04 <xPortStartScheduler+0x144>)
 8008dc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008dcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008dce:	f7ff ff63 	bl	8008c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008dd2:	f001 f973 	bl	800a0bc <vTaskSwitchContext>
	prvTaskExitError();
 8008dd6:	f7ff ff1b 	bl	8008c10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3718      	adds	r7, #24
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	e000ed00 	.word	0xe000ed00
 8008de8:	410fc271 	.word	0x410fc271
 8008dec:	410fc270 	.word	0x410fc270
 8008df0:	e000e400 	.word	0xe000e400
 8008df4:	24000a64 	.word	0x24000a64
 8008df8:	24000a68 	.word	0x24000a68
 8008dfc:	e000ed20 	.word	0xe000ed20
 8008e00:	24000010 	.word	0x24000010
 8008e04:	e000ef34 	.word	0xe000ef34

08008e08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	607b      	str	r3, [r7, #4]
}
 8008e20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e22:	4b10      	ldr	r3, [pc, #64]	@ (8008e64 <vPortEnterCritical+0x5c>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	3301      	adds	r3, #1
 8008e28:	4a0e      	ldr	r2, [pc, #56]	@ (8008e64 <vPortEnterCritical+0x5c>)
 8008e2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8008e64 <vPortEnterCritical+0x5c>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d110      	bne.n	8008e56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e34:	4b0c      	ldr	r3, [pc, #48]	@ (8008e68 <vPortEnterCritical+0x60>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00b      	beq.n	8008e56 <vPortEnterCritical+0x4e>
	__asm volatile
 8008e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	603b      	str	r3, [r7, #0]
}
 8008e50:	bf00      	nop
 8008e52:	bf00      	nop
 8008e54:	e7fd      	b.n	8008e52 <vPortEnterCritical+0x4a>
	}
}
 8008e56:	bf00      	nop
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	24000010 	.word	0x24000010
 8008e68:	e000ed04 	.word	0xe000ed04

08008e6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e72:	4b12      	ldr	r3, [pc, #72]	@ (8008ebc <vPortExitCritical+0x50>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10b      	bne.n	8008e92 <vPortExitCritical+0x26>
	__asm volatile
 8008e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7e:	f383 8811 	msr	BASEPRI, r3
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	607b      	str	r3, [r7, #4]
}
 8008e8c:	bf00      	nop
 8008e8e:	bf00      	nop
 8008e90:	e7fd      	b.n	8008e8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e92:	4b0a      	ldr	r3, [pc, #40]	@ (8008ebc <vPortExitCritical+0x50>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	4a08      	ldr	r2, [pc, #32]	@ (8008ebc <vPortExitCritical+0x50>)
 8008e9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e9c:	4b07      	ldr	r3, [pc, #28]	@ (8008ebc <vPortExitCritical+0x50>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d105      	bne.n	8008eb0 <vPortExitCritical+0x44>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008eae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008eb0:	bf00      	nop
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr
 8008ebc:	24000010 	.word	0x24000010

08008ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ec0:	f3ef 8009 	mrs	r0, PSP
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	4b15      	ldr	r3, [pc, #84]	@ (8008f20 <pxCurrentTCBConst>)
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	f01e 0f10 	tst.w	lr, #16
 8008ed0:	bf08      	it	eq
 8008ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eda:	6010      	str	r0, [r2, #0]
 8008edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ee0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008ee4:	f380 8811 	msr	BASEPRI, r0
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f001 f8e4 	bl	800a0bc <vTaskSwitchContext>
 8008ef4:	f04f 0000 	mov.w	r0, #0
 8008ef8:	f380 8811 	msr	BASEPRI, r0
 8008efc:	bc09      	pop	{r0, r3}
 8008efe:	6819      	ldr	r1, [r3, #0]
 8008f00:	6808      	ldr	r0, [r1, #0]
 8008f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f06:	f01e 0f10 	tst.w	lr, #16
 8008f0a:	bf08      	it	eq
 8008f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f10:	f380 8809 	msr	PSP, r0
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	f3af 8000 	nop.w

08008f20 <pxCurrentTCBConst>:
 8008f20:	24000aac 	.word	0x24000aac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop

08008f28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	607b      	str	r3, [r7, #4]
}
 8008f40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f42:	f001 f801 	bl	8009f48 <xTaskIncrementTick>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d003      	beq.n	8008f54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f4c:	4b06      	ldr	r3, [pc, #24]	@ (8008f68 <xPortSysTickHandler+0x40>)
 8008f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f52:	601a      	str	r2, [r3, #0]
 8008f54:	2300      	movs	r3, #0
 8008f56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	f383 8811 	msr	BASEPRI, r3
}
 8008f5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f60:	bf00      	nop
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	e000ed04 	.word	0xe000ed04

08008f6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f70:	4b0b      	ldr	r3, [pc, #44]	@ (8008fa0 <vPortSetupTimerInterrupt+0x34>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f76:	4b0b      	ldr	r3, [pc, #44]	@ (8008fa4 <vPortSetupTimerInterrupt+0x38>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008fa8 <vPortSetupTimerInterrupt+0x3c>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a0a      	ldr	r2, [pc, #40]	@ (8008fac <vPortSetupTimerInterrupt+0x40>)
 8008f82:	fba2 2303 	umull	r2, r3, r2, r3
 8008f86:	099b      	lsrs	r3, r3, #6
 8008f88:	4a09      	ldr	r2, [pc, #36]	@ (8008fb0 <vPortSetupTimerInterrupt+0x44>)
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f8e:	4b04      	ldr	r3, [pc, #16]	@ (8008fa0 <vPortSetupTimerInterrupt+0x34>)
 8008f90:	2207      	movs	r2, #7
 8008f92:	601a      	str	r2, [r3, #0]
}
 8008f94:	bf00      	nop
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	e000e010 	.word	0xe000e010
 8008fa4:	e000e018 	.word	0xe000e018
 8008fa8:	24000000 	.word	0x24000000
 8008fac:	10624dd3 	.word	0x10624dd3
 8008fb0:	e000e014 	.word	0xe000e014

08008fb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008fb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008fc4 <vPortEnableVFP+0x10>
 8008fb8:	6801      	ldr	r1, [r0, #0]
 8008fba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008fbe:	6001      	str	r1, [r0, #0]
 8008fc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008fc2:	bf00      	nop
 8008fc4:	e000ed88 	.word	0xe000ed88

08008fc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008fce:	f3ef 8305 	mrs	r3, IPSR
 8008fd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2b0f      	cmp	r3, #15
 8008fd8:	d915      	bls.n	8009006 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008fda:	4a18      	ldr	r2, [pc, #96]	@ (800903c <vPortValidateInterruptPriority+0x74>)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4413      	add	r3, r2
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008fe4:	4b16      	ldr	r3, [pc, #88]	@ (8009040 <vPortValidateInterruptPriority+0x78>)
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	7afa      	ldrb	r2, [r7, #11]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d20b      	bcs.n	8009006 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	607b      	str	r3, [r7, #4]
}
 8009000:	bf00      	nop
 8009002:	bf00      	nop
 8009004:	e7fd      	b.n	8009002 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009006:	4b0f      	ldr	r3, [pc, #60]	@ (8009044 <vPortValidateInterruptPriority+0x7c>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800900e:	4b0e      	ldr	r3, [pc, #56]	@ (8009048 <vPortValidateInterruptPriority+0x80>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	429a      	cmp	r2, r3
 8009014:	d90b      	bls.n	800902e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800901a:	f383 8811 	msr	BASEPRI, r3
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	603b      	str	r3, [r7, #0]
}
 8009028:	bf00      	nop
 800902a:	bf00      	nop
 800902c:	e7fd      	b.n	800902a <vPortValidateInterruptPriority+0x62>
	}
 800902e:	bf00      	nop
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	e000e3f0 	.word	0xe000e3f0
 8009040:	24000a64 	.word	0x24000a64
 8009044:	e000ed0c 	.word	0xe000ed0c
 8009048:	24000a68 	.word	0x24000a68

0800904c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10b      	bne.n	8009078 <xQueueGenericReset+0x2c>
	__asm volatile
 8009060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	60bb      	str	r3, [r7, #8]
}
 8009072:	bf00      	nop
 8009074:	bf00      	nop
 8009076:	e7fd      	b.n	8009074 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009078:	f7ff fec6 	bl	8008e08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009084:	68f9      	ldr	r1, [r7, #12]
 8009086:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009088:	fb01 f303 	mul.w	r3, r1, r3
 800908c:	441a      	add	r2, r3
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090a8:	3b01      	subs	r3, #1
 80090aa:	68f9      	ldr	r1, [r7, #12]
 80090ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80090ae:	fb01 f303 	mul.w	r3, r1, r3
 80090b2:	441a      	add	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	22ff      	movs	r2, #255	@ 0xff
 80090bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	22ff      	movs	r2, #255	@ 0xff
 80090c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d114      	bne.n	80090f8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d01a      	beq.n	800910c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	3310      	adds	r3, #16
 80090da:	4618      	mov	r0, r3
 80090dc:	f001 f89e 	bl	800a21c <xTaskRemoveFromEventList>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d012      	beq.n	800910c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80090e6:	4b0d      	ldr	r3, [pc, #52]	@ (800911c <xQueueGenericReset+0xd0>)
 80090e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090ec:	601a      	str	r2, [r3, #0]
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	e009      	b.n	800910c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	3310      	adds	r3, #16
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7ff fc9f 	bl	8008a40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	3324      	adds	r3, #36	@ 0x24
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff fc9a 	bl	8008a40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800910c:	f7ff feae 	bl	8008e6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009110:	2301      	movs	r3, #1
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	e000ed04 	.word	0xe000ed04

08009120 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009120:	b580      	push	{r7, lr}
 8009122:	b08e      	sub	sp, #56	@ 0x38
 8009124:	af02      	add	r7, sp, #8
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	607a      	str	r2, [r7, #4]
 800912c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10b      	bne.n	800914c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009138:	f383 8811 	msr	BASEPRI, r3
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009146:	bf00      	nop
 8009148:	bf00      	nop
 800914a:	e7fd      	b.n	8009148 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d10b      	bne.n	800916a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009156:	f383 8811 	msr	BASEPRI, r3
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009164:	bf00      	nop
 8009166:	bf00      	nop
 8009168:	e7fd      	b.n	8009166 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d002      	beq.n	8009176 <xQueueGenericCreateStatic+0x56>
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d001      	beq.n	800917a <xQueueGenericCreateStatic+0x5a>
 8009176:	2301      	movs	r3, #1
 8009178:	e000      	b.n	800917c <xQueueGenericCreateStatic+0x5c>
 800917a:	2300      	movs	r3, #0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10b      	bne.n	8009198 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	623b      	str	r3, [r7, #32]
}
 8009192:	bf00      	nop
 8009194:	bf00      	nop
 8009196:	e7fd      	b.n	8009194 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d102      	bne.n	80091a4 <xQueueGenericCreateStatic+0x84>
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d101      	bne.n	80091a8 <xQueueGenericCreateStatic+0x88>
 80091a4:	2301      	movs	r3, #1
 80091a6:	e000      	b.n	80091aa <xQueueGenericCreateStatic+0x8a>
 80091a8:	2300      	movs	r3, #0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d10b      	bne.n	80091c6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80091ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b2:	f383 8811 	msr	BASEPRI, r3
 80091b6:	f3bf 8f6f 	isb	sy
 80091ba:	f3bf 8f4f 	dsb	sy
 80091be:	61fb      	str	r3, [r7, #28]
}
 80091c0:	bf00      	nop
 80091c2:	bf00      	nop
 80091c4:	e7fd      	b.n	80091c2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80091c6:	2350      	movs	r3, #80	@ 0x50
 80091c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	2b50      	cmp	r3, #80	@ 0x50
 80091ce:	d00b      	beq.n	80091e8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80091d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	61bb      	str	r3, [r7, #24]
}
 80091e2:	bf00      	nop
 80091e4:	bf00      	nop
 80091e6:	e7fd      	b.n	80091e4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80091e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80091ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00d      	beq.n	8009210 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80091f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091fc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	4613      	mov	r3, r2
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	68b9      	ldr	r1, [r7, #8]
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f000 f805 	bl	800921a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009212:	4618      	mov	r0, r3
 8009214:	3730      	adds	r7, #48	@ 0x30
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b084      	sub	sp, #16
 800921e:	af00      	add	r7, sp, #0
 8009220:	60f8      	str	r0, [r7, #12]
 8009222:	60b9      	str	r1, [r7, #8]
 8009224:	607a      	str	r2, [r7, #4]
 8009226:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d103      	bne.n	8009236 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	69ba      	ldr	r2, [r7, #24]
 8009232:	601a      	str	r2, [r3, #0]
 8009234:	e002      	b.n	800923c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009248:	2101      	movs	r1, #1
 800924a:	69b8      	ldr	r0, [r7, #24]
 800924c:	f7ff fefe 	bl	800904c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	78fa      	ldrb	r2, [r7, #3]
 8009254:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009258:	bf00      	nop
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b08e      	sub	sp, #56	@ 0x38
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
 800926c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800926e:	2300      	movs	r3, #0
 8009270:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10b      	bne.n	8009294 <xQueueGenericSend+0x34>
	__asm volatile
 800927c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800928e:	bf00      	nop
 8009290:	bf00      	nop
 8009292:	e7fd      	b.n	8009290 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d103      	bne.n	80092a2 <xQueueGenericSend+0x42>
 800929a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <xQueueGenericSend+0x46>
 80092a2:	2301      	movs	r3, #1
 80092a4:	e000      	b.n	80092a8 <xQueueGenericSend+0x48>
 80092a6:	2300      	movs	r3, #0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d10b      	bne.n	80092c4 <xQueueGenericSend+0x64>
	__asm volatile
 80092ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b0:	f383 8811 	msr	BASEPRI, r3
 80092b4:	f3bf 8f6f 	isb	sy
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80092be:	bf00      	nop
 80092c0:	bf00      	nop
 80092c2:	e7fd      	b.n	80092c0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d103      	bne.n	80092d2 <xQueueGenericSend+0x72>
 80092ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d101      	bne.n	80092d6 <xQueueGenericSend+0x76>
 80092d2:	2301      	movs	r3, #1
 80092d4:	e000      	b.n	80092d8 <xQueueGenericSend+0x78>
 80092d6:	2300      	movs	r3, #0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10b      	bne.n	80092f4 <xQueueGenericSend+0x94>
	__asm volatile
 80092dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e0:	f383 8811 	msr	BASEPRI, r3
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	f3bf 8f4f 	dsb	sy
 80092ec:	623b      	str	r3, [r7, #32]
}
 80092ee:	bf00      	nop
 80092f0:	bf00      	nop
 80092f2:	e7fd      	b.n	80092f0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092f4:	f001 f952 	bl	800a59c <xTaskGetSchedulerState>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d102      	bne.n	8009304 <xQueueGenericSend+0xa4>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d101      	bne.n	8009308 <xQueueGenericSend+0xa8>
 8009304:	2301      	movs	r3, #1
 8009306:	e000      	b.n	800930a <xQueueGenericSend+0xaa>
 8009308:	2300      	movs	r3, #0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d10b      	bne.n	8009326 <xQueueGenericSend+0xc6>
	__asm volatile
 800930e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	61fb      	str	r3, [r7, #28]
}
 8009320:	bf00      	nop
 8009322:	bf00      	nop
 8009324:	e7fd      	b.n	8009322 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009326:	f7ff fd6f 	bl	8008e08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800932a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800932e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009332:	429a      	cmp	r2, r3
 8009334:	d302      	bcc.n	800933c <xQueueGenericSend+0xdc>
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	2b02      	cmp	r3, #2
 800933a:	d129      	bne.n	8009390 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800933c:	683a      	ldr	r2, [r7, #0]
 800933e:	68b9      	ldr	r1, [r7, #8]
 8009340:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009342:	f000 fa0f 	bl	8009764 <prvCopyDataToQueue>
 8009346:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800934c:	2b00      	cmp	r3, #0
 800934e:	d010      	beq.n	8009372 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009352:	3324      	adds	r3, #36	@ 0x24
 8009354:	4618      	mov	r0, r3
 8009356:	f000 ff61 	bl	800a21c <xTaskRemoveFromEventList>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d013      	beq.n	8009388 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009360:	4b3f      	ldr	r3, [pc, #252]	@ (8009460 <xQueueGenericSend+0x200>)
 8009362:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009366:	601a      	str	r2, [r3, #0]
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	e00a      	b.n	8009388 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009374:	2b00      	cmp	r3, #0
 8009376:	d007      	beq.n	8009388 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009378:	4b39      	ldr	r3, [pc, #228]	@ (8009460 <xQueueGenericSend+0x200>)
 800937a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800937e:	601a      	str	r2, [r3, #0]
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009388:	f7ff fd70 	bl	8008e6c <vPortExitCritical>
				return pdPASS;
 800938c:	2301      	movs	r3, #1
 800938e:	e063      	b.n	8009458 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d103      	bne.n	800939e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009396:	f7ff fd69 	bl	8008e6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800939a:	2300      	movs	r3, #0
 800939c:	e05c      	b.n	8009458 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800939e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d106      	bne.n	80093b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093a4:	f107 0314 	add.w	r3, r7, #20
 80093a8:	4618      	mov	r0, r3
 80093aa:	f000 ff9b 	bl	800a2e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093ae:	2301      	movs	r3, #1
 80093b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093b2:	f7ff fd5b 	bl	8008e6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093b6:	f000 fd0b 	bl	8009dd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093ba:	f7ff fd25 	bl	8008e08 <vPortEnterCritical>
 80093be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093c4:	b25b      	sxtb	r3, r3
 80093c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ca:	d103      	bne.n	80093d4 <xQueueGenericSend+0x174>
 80093cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093da:	b25b      	sxtb	r3, r3
 80093dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e0:	d103      	bne.n	80093ea <xQueueGenericSend+0x18a>
 80093e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e4:	2200      	movs	r2, #0
 80093e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093ea:	f7ff fd3f 	bl	8008e6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093ee:	1d3a      	adds	r2, r7, #4
 80093f0:	f107 0314 	add.w	r3, r7, #20
 80093f4:	4611      	mov	r1, r2
 80093f6:	4618      	mov	r0, r3
 80093f8:	f000 ff8a 	bl	800a310 <xTaskCheckForTimeOut>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d124      	bne.n	800944c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009402:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009404:	f000 faa6 	bl	8009954 <prvIsQueueFull>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d018      	beq.n	8009440 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800940e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009410:	3310      	adds	r3, #16
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	4611      	mov	r1, r2
 8009416:	4618      	mov	r0, r3
 8009418:	f000 feae 	bl	800a178 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800941c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800941e:	f000 fa31 	bl	8009884 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009422:	f000 fce3 	bl	8009dec <xTaskResumeAll>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	f47f af7c 	bne.w	8009326 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800942e:	4b0c      	ldr	r3, [pc, #48]	@ (8009460 <xQueueGenericSend+0x200>)
 8009430:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009434:	601a      	str	r2, [r3, #0]
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	e772      	b.n	8009326 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009440:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009442:	f000 fa1f 	bl	8009884 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009446:	f000 fcd1 	bl	8009dec <xTaskResumeAll>
 800944a:	e76c      	b.n	8009326 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800944c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800944e:	f000 fa19 	bl	8009884 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009452:	f000 fccb 	bl	8009dec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009456:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009458:	4618      	mov	r0, r3
 800945a:	3738      	adds	r7, #56	@ 0x38
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	e000ed04 	.word	0xe000ed04

08009464 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b090      	sub	sp, #64	@ 0x40
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
 8009470:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009478:	2b00      	cmp	r3, #0
 800947a:	d10b      	bne.n	8009494 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800947c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009480:	f383 8811 	msr	BASEPRI, r3
 8009484:	f3bf 8f6f 	isb	sy
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800948e:	bf00      	nop
 8009490:	bf00      	nop
 8009492:	e7fd      	b.n	8009490 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d103      	bne.n	80094a2 <xQueueGenericSendFromISR+0x3e>
 800949a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800949c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d101      	bne.n	80094a6 <xQueueGenericSendFromISR+0x42>
 80094a2:	2301      	movs	r3, #1
 80094a4:	e000      	b.n	80094a8 <xQueueGenericSendFromISR+0x44>
 80094a6:	2300      	movs	r3, #0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10b      	bne.n	80094c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80094ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b0:	f383 8811 	msr	BASEPRI, r3
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80094be:	bf00      	nop
 80094c0:	bf00      	nop
 80094c2:	e7fd      	b.n	80094c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d103      	bne.n	80094d2 <xQueueGenericSendFromISR+0x6e>
 80094ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d101      	bne.n	80094d6 <xQueueGenericSendFromISR+0x72>
 80094d2:	2301      	movs	r3, #1
 80094d4:	e000      	b.n	80094d8 <xQueueGenericSendFromISR+0x74>
 80094d6:	2300      	movs	r3, #0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d10b      	bne.n	80094f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80094dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	623b      	str	r3, [r7, #32]
}
 80094ee:	bf00      	nop
 80094f0:	bf00      	nop
 80094f2:	e7fd      	b.n	80094f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094f4:	f7ff fd68 	bl	8008fc8 <vPortValidateInterruptPriority>
	__asm volatile
 80094f8:	f3ef 8211 	mrs	r2, BASEPRI
 80094fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009500:	f383 8811 	msr	BASEPRI, r3
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	61fa      	str	r2, [r7, #28]
 800950e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8009510:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009512:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009516:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800951a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800951c:	429a      	cmp	r2, r3
 800951e:	d302      	bcc.n	8009526 <xQueueGenericSendFromISR+0xc2>
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	2b02      	cmp	r3, #2
 8009524:	d12f      	bne.n	8009586 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009528:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800952c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009534:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009536:	683a      	ldr	r2, [r7, #0]
 8009538:	68b9      	ldr	r1, [r7, #8]
 800953a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800953c:	f000 f912 	bl	8009764 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009540:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009548:	d112      	bne.n	8009570 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800954a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800954c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800954e:	2b00      	cmp	r3, #0
 8009550:	d016      	beq.n	8009580 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009554:	3324      	adds	r3, #36	@ 0x24
 8009556:	4618      	mov	r0, r3
 8009558:	f000 fe60 	bl	800a21c <xTaskRemoveFromEventList>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00e      	beq.n	8009580 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00b      	beq.n	8009580 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	601a      	str	r2, [r3, #0]
 800956e:	e007      	b.n	8009580 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009570:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009574:	3301      	adds	r3, #1
 8009576:	b2db      	uxtb	r3, r3
 8009578:	b25a      	sxtb	r2, r3
 800957a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800957c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009580:	2301      	movs	r3, #1
 8009582:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009584:	e001      	b.n	800958a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009586:	2300      	movs	r3, #0
 8009588:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800958a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800958c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	f383 8811 	msr	BASEPRI, r3
}
 8009594:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009598:	4618      	mov	r0, r3
 800959a:	3740      	adds	r7, #64	@ 0x40
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b08c      	sub	sp, #48	@ 0x30
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80095ac:	2300      	movs	r3, #0
 80095ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80095b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10b      	bne.n	80095d2 <xQueueReceive+0x32>
	__asm volatile
 80095ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095be:	f383 8811 	msr	BASEPRI, r3
 80095c2:	f3bf 8f6f 	isb	sy
 80095c6:	f3bf 8f4f 	dsb	sy
 80095ca:	623b      	str	r3, [r7, #32]
}
 80095cc:	bf00      	nop
 80095ce:	bf00      	nop
 80095d0:	e7fd      	b.n	80095ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d103      	bne.n	80095e0 <xQueueReceive+0x40>
 80095d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d101      	bne.n	80095e4 <xQueueReceive+0x44>
 80095e0:	2301      	movs	r3, #1
 80095e2:	e000      	b.n	80095e6 <xQueueReceive+0x46>
 80095e4:	2300      	movs	r3, #0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d10b      	bne.n	8009602 <xQueueReceive+0x62>
	__asm volatile
 80095ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ee:	f383 8811 	msr	BASEPRI, r3
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	61fb      	str	r3, [r7, #28]
}
 80095fc:	bf00      	nop
 80095fe:	bf00      	nop
 8009600:	e7fd      	b.n	80095fe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009602:	f000 ffcb 	bl	800a59c <xTaskGetSchedulerState>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d102      	bne.n	8009612 <xQueueReceive+0x72>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d101      	bne.n	8009616 <xQueueReceive+0x76>
 8009612:	2301      	movs	r3, #1
 8009614:	e000      	b.n	8009618 <xQueueReceive+0x78>
 8009616:	2300      	movs	r3, #0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d10b      	bne.n	8009634 <xQueueReceive+0x94>
	__asm volatile
 800961c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	61bb      	str	r3, [r7, #24]
}
 800962e:	bf00      	nop
 8009630:	bf00      	nop
 8009632:	e7fd      	b.n	8009630 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009634:	f7ff fbe8 	bl	8008e08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800963a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800963c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800963e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009640:	2b00      	cmp	r3, #0
 8009642:	d01f      	beq.n	8009684 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009644:	68b9      	ldr	r1, [r7, #8]
 8009646:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009648:	f000 f8f6 	bl	8009838 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800964c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964e:	1e5a      	subs	r2, r3, #1
 8009650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009652:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00f      	beq.n	800967c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800965c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800965e:	3310      	adds	r3, #16
 8009660:	4618      	mov	r0, r3
 8009662:	f000 fddb 	bl	800a21c <xTaskRemoveFromEventList>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d007      	beq.n	800967c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800966c:	4b3c      	ldr	r3, [pc, #240]	@ (8009760 <xQueueReceive+0x1c0>)
 800966e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800967c:	f7ff fbf6 	bl	8008e6c <vPortExitCritical>
				return pdPASS;
 8009680:	2301      	movs	r3, #1
 8009682:	e069      	b.n	8009758 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d103      	bne.n	8009692 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800968a:	f7ff fbef 	bl	8008e6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800968e:	2300      	movs	r3, #0
 8009690:	e062      	b.n	8009758 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009694:	2b00      	cmp	r3, #0
 8009696:	d106      	bne.n	80096a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009698:	f107 0310 	add.w	r3, r7, #16
 800969c:	4618      	mov	r0, r3
 800969e:	f000 fe21 	bl	800a2e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096a2:	2301      	movs	r3, #1
 80096a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096a6:	f7ff fbe1 	bl	8008e6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096aa:	f000 fb91 	bl	8009dd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096ae:	f7ff fbab 	bl	8008e08 <vPortEnterCritical>
 80096b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096b8:	b25b      	sxtb	r3, r3
 80096ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096be:	d103      	bne.n	80096c8 <xQueueReceive+0x128>
 80096c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c2:	2200      	movs	r2, #0
 80096c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096ce:	b25b      	sxtb	r3, r3
 80096d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d4:	d103      	bne.n	80096de <xQueueReceive+0x13e>
 80096d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d8:	2200      	movs	r2, #0
 80096da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80096de:	f7ff fbc5 	bl	8008e6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096e2:	1d3a      	adds	r2, r7, #4
 80096e4:	f107 0310 	add.w	r3, r7, #16
 80096e8:	4611      	mov	r1, r2
 80096ea:	4618      	mov	r0, r3
 80096ec:	f000 fe10 	bl	800a310 <xTaskCheckForTimeOut>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d123      	bne.n	800973e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096f8:	f000 f916 	bl	8009928 <prvIsQueueEmpty>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d017      	beq.n	8009732 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009704:	3324      	adds	r3, #36	@ 0x24
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	4611      	mov	r1, r2
 800970a:	4618      	mov	r0, r3
 800970c:	f000 fd34 	bl	800a178 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009710:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009712:	f000 f8b7 	bl	8009884 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009716:	f000 fb69 	bl	8009dec <xTaskResumeAll>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d189      	bne.n	8009634 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009720:	4b0f      	ldr	r3, [pc, #60]	@ (8009760 <xQueueReceive+0x1c0>)
 8009722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009726:	601a      	str	r2, [r3, #0]
 8009728:	f3bf 8f4f 	dsb	sy
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	e780      	b.n	8009634 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009732:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009734:	f000 f8a6 	bl	8009884 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009738:	f000 fb58 	bl	8009dec <xTaskResumeAll>
 800973c:	e77a      	b.n	8009634 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800973e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009740:	f000 f8a0 	bl	8009884 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009744:	f000 fb52 	bl	8009dec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009748:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800974a:	f000 f8ed 	bl	8009928 <prvIsQueueEmpty>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	f43f af6f 	beq.w	8009634 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009756:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009758:	4618      	mov	r0, r3
 800975a:	3730      	adds	r7, #48	@ 0x30
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	e000ed04 	.word	0xe000ed04

08009764 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009770:	2300      	movs	r3, #0
 8009772:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009778:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10d      	bne.n	800979e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d14d      	bne.n	8009826 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	4618      	mov	r0, r3
 8009790:	f000 ff22 	bl	800a5d8 <xTaskPriorityDisinherit>
 8009794:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	609a      	str	r2, [r3, #8]
 800979c:	e043      	b.n	8009826 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d119      	bne.n	80097d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6858      	ldr	r0, [r3, #4]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ac:	461a      	mov	r2, r3
 80097ae:	68b9      	ldr	r1, [r7, #8]
 80097b0:	f001 fe6f 	bl	800b492 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	685a      	ldr	r2, [r3, #4]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097bc:	441a      	add	r2, r3
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	685a      	ldr	r2, [r3, #4]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d32b      	bcc.n	8009826 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	605a      	str	r2, [r3, #4]
 80097d6:	e026      	b.n	8009826 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	68d8      	ldr	r0, [r3, #12]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097e0:	461a      	mov	r2, r3
 80097e2:	68b9      	ldr	r1, [r7, #8]
 80097e4:	f001 fe55 	bl	800b492 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	68da      	ldr	r2, [r3, #12]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097f0:	425b      	negs	r3, r3
 80097f2:	441a      	add	r2, r3
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	68da      	ldr	r2, [r3, #12]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	429a      	cmp	r2, r3
 8009802:	d207      	bcs.n	8009814 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	689a      	ldr	r2, [r3, #8]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800980c:	425b      	negs	r3, r3
 800980e:	441a      	add	r2, r3
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2b02      	cmp	r3, #2
 8009818:	d105      	bne.n	8009826 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d002      	beq.n	8009826 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	3b01      	subs	r3, #1
 8009824:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	1c5a      	adds	r2, r3, #1
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800982e:	697b      	ldr	r3, [r7, #20]
}
 8009830:	4618      	mov	r0, r3
 8009832:	3718      	adds	r7, #24
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009846:	2b00      	cmp	r3, #0
 8009848:	d018      	beq.n	800987c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68da      	ldr	r2, [r3, #12]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009852:	441a      	add	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	68da      	ldr	r2, [r3, #12]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	429a      	cmp	r2, r3
 8009862:	d303      	bcc.n	800986c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	68d9      	ldr	r1, [r3, #12]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009874:	461a      	mov	r2, r3
 8009876:	6838      	ldr	r0, [r7, #0]
 8009878:	f001 fe0b 	bl	800b492 <memcpy>
	}
}
 800987c:	bf00      	nop
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800988c:	f7ff fabc 	bl	8008e08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009896:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009898:	e011      	b.n	80098be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d012      	beq.n	80098c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	3324      	adds	r3, #36	@ 0x24
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 fcb8 	bl	800a21c <xTaskRemoveFromEventList>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80098b2:	f000 fd91 	bl	800a3d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80098b6:	7bfb      	ldrb	r3, [r7, #15]
 80098b8:	3b01      	subs	r3, #1
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80098be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	dce9      	bgt.n	800989a <prvUnlockQueue+0x16>
 80098c6:	e000      	b.n	80098ca <prvUnlockQueue+0x46>
					break;
 80098c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	22ff      	movs	r2, #255	@ 0xff
 80098ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80098d2:	f7ff facb 	bl	8008e6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80098d6:	f7ff fa97 	bl	8008e08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80098e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098e2:	e011      	b.n	8009908 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d012      	beq.n	8009912 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	3310      	adds	r3, #16
 80098f0:	4618      	mov	r0, r3
 80098f2:	f000 fc93 	bl	800a21c <xTaskRemoveFromEventList>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d001      	beq.n	8009900 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80098fc:	f000 fd6c 	bl	800a3d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009900:	7bbb      	ldrb	r3, [r7, #14]
 8009902:	3b01      	subs	r3, #1
 8009904:	b2db      	uxtb	r3, r3
 8009906:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009908:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800990c:	2b00      	cmp	r3, #0
 800990e:	dce9      	bgt.n	80098e4 <prvUnlockQueue+0x60>
 8009910:	e000      	b.n	8009914 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009912:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	22ff      	movs	r2, #255	@ 0xff
 8009918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800991c:	f7ff faa6 	bl	8008e6c <vPortExitCritical>
}
 8009920:	bf00      	nop
 8009922:	3710      	adds	r7, #16
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009930:	f7ff fa6a 	bl	8008e08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009938:	2b00      	cmp	r3, #0
 800993a:	d102      	bne.n	8009942 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800993c:	2301      	movs	r3, #1
 800993e:	60fb      	str	r3, [r7, #12]
 8009940:	e001      	b.n	8009946 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009942:	2300      	movs	r3, #0
 8009944:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009946:	f7ff fa91 	bl	8008e6c <vPortExitCritical>

	return xReturn;
 800994a:	68fb      	ldr	r3, [r7, #12]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800995c:	f7ff fa54 	bl	8008e08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009968:	429a      	cmp	r2, r3
 800996a:	d102      	bne.n	8009972 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800996c:	2301      	movs	r3, #1
 800996e:	60fb      	str	r3, [r7, #12]
 8009970:	e001      	b.n	8009976 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009972:	2300      	movs	r3, #0
 8009974:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009976:	f7ff fa79 	bl	8008e6c <vPortExitCritical>

	return xReturn;
 800997a:	68fb      	ldr	r3, [r7, #12]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800998e:	2300      	movs	r3, #0
 8009990:	60fb      	str	r3, [r7, #12]
 8009992:	e014      	b.n	80099be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009994:	4a0f      	ldr	r2, [pc, #60]	@ (80099d4 <vQueueAddToRegistry+0x50>)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d10b      	bne.n	80099b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80099a0:	490c      	ldr	r1, [pc, #48]	@ (80099d4 <vQueueAddToRegistry+0x50>)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80099aa:	4a0a      	ldr	r2, [pc, #40]	@ (80099d4 <vQueueAddToRegistry+0x50>)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	00db      	lsls	r3, r3, #3
 80099b0:	4413      	add	r3, r2
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80099b6:	e006      	b.n	80099c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	3301      	adds	r3, #1
 80099bc:	60fb      	str	r3, [r7, #12]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2b07      	cmp	r3, #7
 80099c2:	d9e7      	bls.n	8009994 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80099c4:	bf00      	nop
 80099c6:	bf00      	nop
 80099c8:	3714      	adds	r7, #20
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	24000a6c 	.word	0x24000a6c

080099d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b086      	sub	sp, #24
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80099e8:	f7ff fa0e 	bl	8008e08 <vPortEnterCritical>
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80099f2:	b25b      	sxtb	r3, r3
 80099f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f8:	d103      	bne.n	8009a02 <vQueueWaitForMessageRestricted+0x2a>
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a08:	b25b      	sxtb	r3, r3
 8009a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a0e:	d103      	bne.n	8009a18 <vQueueWaitForMessageRestricted+0x40>
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a18:	f7ff fa28 	bl	8008e6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d106      	bne.n	8009a32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	3324      	adds	r3, #36	@ 0x24
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	68b9      	ldr	r1, [r7, #8]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f000 fbc9 	bl	800a1c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009a32:	6978      	ldr	r0, [r7, #20]
 8009a34:	f7ff ff26 	bl	8009884 <prvUnlockQueue>
	}
 8009a38:	bf00      	nop
 8009a3a:	3718      	adds	r7, #24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b08e      	sub	sp, #56	@ 0x38
 8009a44:	af04      	add	r7, sp, #16
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
 8009a4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d10b      	bne.n	8009a6c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	623b      	str	r3, [r7, #32]
}
 8009a66:	bf00      	nop
 8009a68:	bf00      	nop
 8009a6a:	e7fd      	b.n	8009a68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10b      	bne.n	8009a8a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	61fb      	str	r3, [r7, #28]
}
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop
 8009a88:	e7fd      	b.n	8009a86 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009a8a:	235c      	movs	r3, #92	@ 0x5c
 8009a8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	2b5c      	cmp	r3, #92	@ 0x5c
 8009a92:	d00b      	beq.n	8009aac <xTaskCreateStatic+0x6c>
	__asm volatile
 8009a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a98:	f383 8811 	msr	BASEPRI, r3
 8009a9c:	f3bf 8f6f 	isb	sy
 8009aa0:	f3bf 8f4f 	dsb	sy
 8009aa4:	61bb      	str	r3, [r7, #24]
}
 8009aa6:	bf00      	nop
 8009aa8:	bf00      	nop
 8009aaa:	e7fd      	b.n	8009aa8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009aac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d01e      	beq.n	8009af2 <xTaskCreateStatic+0xb2>
 8009ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d01b      	beq.n	8009af2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009abc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ac2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac6:	2202      	movs	r2, #2
 8009ac8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009acc:	2300      	movs	r3, #0
 8009ace:	9303      	str	r3, [sp, #12]
 8009ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad2:	9302      	str	r3, [sp, #8]
 8009ad4:	f107 0314 	add.w	r3, r7, #20
 8009ad8:	9301      	str	r3, [sp, #4]
 8009ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	68b9      	ldr	r1, [r7, #8]
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f000 f80b 	bl	8009b00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009aea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009aec:	f000 f898 	bl	8009c20 <prvAddNewTaskToReadyList>
 8009af0:	e001      	b.n	8009af6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009af2:	2300      	movs	r3, #0
 8009af4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009af6:	697b      	ldr	r3, [r7, #20]
	}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3728      	adds	r7, #40	@ 0x28
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b088      	sub	sp, #32
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
 8009b0c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b10:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	461a      	mov	r2, r3
 8009b18:	21a5      	movs	r1, #165	@ 0xa5
 8009b1a:	f001 fc3f 	bl	800b39c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b22:	6879      	ldr	r1, [r7, #4]
 8009b24:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8009b28:	440b      	add	r3, r1
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	f023 0307 	bic.w	r3, r3, #7
 8009b36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	f003 0307 	and.w	r3, r3, #7
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00b      	beq.n	8009b5a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b46:	f383 8811 	msr	BASEPRI, r3
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	617b      	str	r3, [r7, #20]
}
 8009b54:	bf00      	nop
 8009b56:	bf00      	nop
 8009b58:	e7fd      	b.n	8009b56 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d01f      	beq.n	8009ba0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b60:	2300      	movs	r3, #0
 8009b62:	61fb      	str	r3, [r7, #28]
 8009b64:	e012      	b.n	8009b8c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	7819      	ldrb	r1, [r3, #0]
 8009b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	4413      	add	r3, r2
 8009b74:	3334      	adds	r3, #52	@ 0x34
 8009b76:	460a      	mov	r2, r1
 8009b78:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009b7a:	68ba      	ldr	r2, [r7, #8]
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	4413      	add	r3, r2
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d006      	beq.n	8009b94 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	61fb      	str	r3, [r7, #28]
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	2b0f      	cmp	r3, #15
 8009b90:	d9e9      	bls.n	8009b66 <prvInitialiseNewTask+0x66>
 8009b92:	e000      	b.n	8009b96 <prvInitialiseNewTask+0x96>
			{
				break;
 8009b94:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009b9e:	e003      	b.n	8009ba8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009baa:	2b37      	cmp	r3, #55	@ 0x37
 8009bac:	d901      	bls.n	8009bb2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009bae:	2337      	movs	r3, #55	@ 0x37
 8009bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009bbc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc6:	3304      	adds	r3, #4
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f7fe ff59 	bl	8008a80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd0:	3318      	adds	r3, #24
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fe ff54 	bl	8008a80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bdc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009bfc:	683a      	ldr	r2, [r7, #0]
 8009bfe:	68f9      	ldr	r1, [r7, #12]
 8009c00:	69b8      	ldr	r0, [r7, #24]
 8009c02:	f7fe ffd1 	bl	8008ba8 <pxPortInitialiseStack>
 8009c06:	4602      	mov	r2, r0
 8009c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c0a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d002      	beq.n	8009c18 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c18:	bf00      	nop
 8009c1a:	3720      	adds	r7, #32
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009c28:	f7ff f8ee 	bl	8008e08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009c2c:	4b2d      	ldr	r3, [pc, #180]	@ (8009ce4 <prvAddNewTaskToReadyList+0xc4>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	3301      	adds	r3, #1
 8009c32:	4a2c      	ldr	r2, [pc, #176]	@ (8009ce4 <prvAddNewTaskToReadyList+0xc4>)
 8009c34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009c36:	4b2c      	ldr	r3, [pc, #176]	@ (8009ce8 <prvAddNewTaskToReadyList+0xc8>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d109      	bne.n	8009c52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009c3e:	4a2a      	ldr	r2, [pc, #168]	@ (8009ce8 <prvAddNewTaskToReadyList+0xc8>)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009c44:	4b27      	ldr	r3, [pc, #156]	@ (8009ce4 <prvAddNewTaskToReadyList+0xc4>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d110      	bne.n	8009c6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009c4c:	f000 fbe8 	bl	800a420 <prvInitialiseTaskLists>
 8009c50:	e00d      	b.n	8009c6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009c52:	4b26      	ldr	r3, [pc, #152]	@ (8009cec <prvAddNewTaskToReadyList+0xcc>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d109      	bne.n	8009c6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009c5a:	4b23      	ldr	r3, [pc, #140]	@ (8009ce8 <prvAddNewTaskToReadyList+0xc8>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d802      	bhi.n	8009c6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009c68:	4a1f      	ldr	r2, [pc, #124]	@ (8009ce8 <prvAddNewTaskToReadyList+0xc8>)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009c6e:	4b20      	ldr	r3, [pc, #128]	@ (8009cf0 <prvAddNewTaskToReadyList+0xd0>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	3301      	adds	r3, #1
 8009c74:	4a1e      	ldr	r2, [pc, #120]	@ (8009cf0 <prvAddNewTaskToReadyList+0xd0>)
 8009c76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009c78:	4b1d      	ldr	r3, [pc, #116]	@ (8009cf0 <prvAddNewTaskToReadyList+0xd0>)
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c84:	4b1b      	ldr	r3, [pc, #108]	@ (8009cf4 <prvAddNewTaskToReadyList+0xd4>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d903      	bls.n	8009c94 <prvAddNewTaskToReadyList+0x74>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c90:	4a18      	ldr	r2, [pc, #96]	@ (8009cf4 <prvAddNewTaskToReadyList+0xd4>)
 8009c92:	6013      	str	r3, [r2, #0]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c98:	4613      	mov	r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	4413      	add	r3, r2
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4a15      	ldr	r2, [pc, #84]	@ (8009cf8 <prvAddNewTaskToReadyList+0xd8>)
 8009ca2:	441a      	add	r2, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	3304      	adds	r3, #4
 8009ca8:	4619      	mov	r1, r3
 8009caa:	4610      	mov	r0, r2
 8009cac:	f7fe fef5 	bl	8008a9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009cb0:	f7ff f8dc 	bl	8008e6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8009cec <prvAddNewTaskToReadyList+0xcc>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00e      	beq.n	8009cda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8009ce8 <prvAddNewTaskToReadyList+0xc8>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d207      	bcs.n	8009cda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009cca:	4b0c      	ldr	r3, [pc, #48]	@ (8009cfc <prvAddNewTaskToReadyList+0xdc>)
 8009ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cd0:	601a      	str	r2, [r3, #0]
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cda:	bf00      	nop
 8009cdc:	3708      	adds	r7, #8
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	24000f80 	.word	0x24000f80
 8009ce8:	24000aac 	.word	0x24000aac
 8009cec:	24000f8c 	.word	0x24000f8c
 8009cf0:	24000f9c 	.word	0x24000f9c
 8009cf4:	24000f88 	.word	0x24000f88
 8009cf8:	24000ab0 	.word	0x24000ab0
 8009cfc:	e000ed04 	.word	0xe000ed04

08009d00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b08a      	sub	sp, #40	@ 0x28
 8009d04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009d06:	2300      	movs	r3, #0
 8009d08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009d0e:	463a      	mov	r2, r7
 8009d10:	1d39      	adds	r1, r7, #4
 8009d12:	f107 0308 	add.w	r3, r7, #8
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fe fda0 	bl	800885c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009d1c:	6839      	ldr	r1, [r7, #0]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	9202      	str	r2, [sp, #8]
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	2300      	movs	r3, #0
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	460a      	mov	r2, r1
 8009d2e:	4922      	ldr	r1, [pc, #136]	@ (8009db8 <vTaskStartScheduler+0xb8>)
 8009d30:	4822      	ldr	r0, [pc, #136]	@ (8009dbc <vTaskStartScheduler+0xbc>)
 8009d32:	f7ff fe85 	bl	8009a40 <xTaskCreateStatic>
 8009d36:	4603      	mov	r3, r0
 8009d38:	4a21      	ldr	r2, [pc, #132]	@ (8009dc0 <vTaskStartScheduler+0xc0>)
 8009d3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009d3c:	4b20      	ldr	r3, [pc, #128]	@ (8009dc0 <vTaskStartScheduler+0xc0>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d002      	beq.n	8009d4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009d44:	2301      	movs	r3, #1
 8009d46:	617b      	str	r3, [r7, #20]
 8009d48:	e001      	b.n	8009d4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d102      	bne.n	8009d5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009d54:	f000 fdbe 	bl	800a8d4 <xTimerCreateTimerTask>
 8009d58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d116      	bne.n	8009d8e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d64:	f383 8811 	msr	BASEPRI, r3
 8009d68:	f3bf 8f6f 	isb	sy
 8009d6c:	f3bf 8f4f 	dsb	sy
 8009d70:	613b      	str	r3, [r7, #16]
}
 8009d72:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009d74:	4b13      	ldr	r3, [pc, #76]	@ (8009dc4 <vTaskStartScheduler+0xc4>)
 8009d76:	f04f 32ff 	mov.w	r2, #4294967295
 8009d7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009d7c:	4b12      	ldr	r3, [pc, #72]	@ (8009dc8 <vTaskStartScheduler+0xc8>)
 8009d7e:	2201      	movs	r2, #1
 8009d80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009d82:	4b12      	ldr	r3, [pc, #72]	@ (8009dcc <vTaskStartScheduler+0xcc>)
 8009d84:	2200      	movs	r2, #0
 8009d86:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009d88:	f7fe ff9a 	bl	8008cc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009d8c:	e00f      	b.n	8009dae <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d94:	d10b      	bne.n	8009dae <vTaskStartScheduler+0xae>
	__asm volatile
 8009d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d9a:	f383 8811 	msr	BASEPRI, r3
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	f3bf 8f4f 	dsb	sy
 8009da6:	60fb      	str	r3, [r7, #12]
}
 8009da8:	bf00      	nop
 8009daa:	bf00      	nop
 8009dac:	e7fd      	b.n	8009daa <vTaskStartScheduler+0xaa>
}
 8009dae:	bf00      	nop
 8009db0:	3718      	adds	r7, #24
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	0800bf5c 	.word	0x0800bf5c
 8009dbc:	0800a3f1 	.word	0x0800a3f1
 8009dc0:	24000fa4 	.word	0x24000fa4
 8009dc4:	24000fa0 	.word	0x24000fa0
 8009dc8:	24000f8c 	.word	0x24000f8c
 8009dcc:	24000f84 	.word	0x24000f84

08009dd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009dd4:	4b04      	ldr	r3, [pc, #16]	@ (8009de8 <vTaskSuspendAll+0x18>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	4a03      	ldr	r2, [pc, #12]	@ (8009de8 <vTaskSuspendAll+0x18>)
 8009ddc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009dde:	bf00      	nop
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr
 8009de8:	24000fa8 	.word	0x24000fa8

08009dec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009df2:	2300      	movs	r3, #0
 8009df4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009df6:	2300      	movs	r3, #0
 8009df8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009dfa:	4b42      	ldr	r3, [pc, #264]	@ (8009f04 <xTaskResumeAll+0x118>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d10b      	bne.n	8009e1a <xTaskResumeAll+0x2e>
	__asm volatile
 8009e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e06:	f383 8811 	msr	BASEPRI, r3
 8009e0a:	f3bf 8f6f 	isb	sy
 8009e0e:	f3bf 8f4f 	dsb	sy
 8009e12:	603b      	str	r3, [r7, #0]
}
 8009e14:	bf00      	nop
 8009e16:	bf00      	nop
 8009e18:	e7fd      	b.n	8009e16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009e1a:	f7fe fff5 	bl	8008e08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009e1e:	4b39      	ldr	r3, [pc, #228]	@ (8009f04 <xTaskResumeAll+0x118>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	3b01      	subs	r3, #1
 8009e24:	4a37      	ldr	r2, [pc, #220]	@ (8009f04 <xTaskResumeAll+0x118>)
 8009e26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e28:	4b36      	ldr	r3, [pc, #216]	@ (8009f04 <xTaskResumeAll+0x118>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d162      	bne.n	8009ef6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009e30:	4b35      	ldr	r3, [pc, #212]	@ (8009f08 <xTaskResumeAll+0x11c>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d05e      	beq.n	8009ef6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e38:	e02f      	b.n	8009e9a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e3a:	4b34      	ldr	r3, [pc, #208]	@ (8009f0c <xTaskResumeAll+0x120>)
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	3318      	adds	r3, #24
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7fe fe84 	bl	8008b54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	3304      	adds	r3, #4
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7fe fe7f 	bl	8008b54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e5a:	4b2d      	ldr	r3, [pc, #180]	@ (8009f10 <xTaskResumeAll+0x124>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d903      	bls.n	8009e6a <xTaskResumeAll+0x7e>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e66:	4a2a      	ldr	r2, [pc, #168]	@ (8009f10 <xTaskResumeAll+0x124>)
 8009e68:	6013      	str	r3, [r2, #0]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e6e:	4613      	mov	r3, r2
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	4a27      	ldr	r2, [pc, #156]	@ (8009f14 <xTaskResumeAll+0x128>)
 8009e78:	441a      	add	r2, r3
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	4619      	mov	r1, r3
 8009e80:	4610      	mov	r0, r2
 8009e82:	f7fe fe0a 	bl	8008a9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e8a:	4b23      	ldr	r3, [pc, #140]	@ (8009f18 <xTaskResumeAll+0x12c>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d302      	bcc.n	8009e9a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009e94:	4b21      	ldr	r3, [pc, #132]	@ (8009f1c <xTaskResumeAll+0x130>)
 8009e96:	2201      	movs	r2, #1
 8009e98:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8009f0c <xTaskResumeAll+0x120>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1cb      	bne.n	8009e3a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d001      	beq.n	8009eac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ea8:	f000 fb58 	bl	800a55c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009eac:	4b1c      	ldr	r3, [pc, #112]	@ (8009f20 <xTaskResumeAll+0x134>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d010      	beq.n	8009eda <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009eb8:	f000 f846 	bl	8009f48 <xTaskIncrementTick>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d002      	beq.n	8009ec8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009ec2:	4b16      	ldr	r3, [pc, #88]	@ (8009f1c <xTaskResumeAll+0x130>)
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1f1      	bne.n	8009eb8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009ed4:	4b12      	ldr	r3, [pc, #72]	@ (8009f20 <xTaskResumeAll+0x134>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009eda:	4b10      	ldr	r3, [pc, #64]	@ (8009f1c <xTaskResumeAll+0x130>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d009      	beq.n	8009ef6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8009f24 <xTaskResumeAll+0x138>)
 8009ee8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009eec:	601a      	str	r2, [r3, #0]
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ef6:	f7fe ffb9 	bl	8008e6c <vPortExitCritical>

	return xAlreadyYielded;
 8009efa:	68bb      	ldr	r3, [r7, #8]
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3710      	adds	r7, #16
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	24000fa8 	.word	0x24000fa8
 8009f08:	24000f80 	.word	0x24000f80
 8009f0c:	24000f40 	.word	0x24000f40
 8009f10:	24000f88 	.word	0x24000f88
 8009f14:	24000ab0 	.word	0x24000ab0
 8009f18:	24000aac 	.word	0x24000aac
 8009f1c:	24000f94 	.word	0x24000f94
 8009f20:	24000f90 	.word	0x24000f90
 8009f24:	e000ed04 	.word	0xe000ed04

08009f28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009f2e:	4b05      	ldr	r3, [pc, #20]	@ (8009f44 <xTaskGetTickCount+0x1c>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009f34:	687b      	ldr	r3, [r7, #4]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	370c      	adds	r7, #12
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	24000f84 	.word	0x24000f84

08009f48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f52:	4b4f      	ldr	r3, [pc, #316]	@ (800a090 <xTaskIncrementTick+0x148>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	f040 8090 	bne.w	800a07c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009f5c:	4b4d      	ldr	r3, [pc, #308]	@ (800a094 <xTaskIncrementTick+0x14c>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	3301      	adds	r3, #1
 8009f62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009f64:	4a4b      	ldr	r2, [pc, #300]	@ (800a094 <xTaskIncrementTick+0x14c>)
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d121      	bne.n	8009fb4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009f70:	4b49      	ldr	r3, [pc, #292]	@ (800a098 <xTaskIncrementTick+0x150>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d00b      	beq.n	8009f92 <xTaskIncrementTick+0x4a>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	603b      	str	r3, [r7, #0]
}
 8009f8c:	bf00      	nop
 8009f8e:	bf00      	nop
 8009f90:	e7fd      	b.n	8009f8e <xTaskIncrementTick+0x46>
 8009f92:	4b41      	ldr	r3, [pc, #260]	@ (800a098 <xTaskIncrementTick+0x150>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	60fb      	str	r3, [r7, #12]
 8009f98:	4b40      	ldr	r3, [pc, #256]	@ (800a09c <xTaskIncrementTick+0x154>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a3e      	ldr	r2, [pc, #248]	@ (800a098 <xTaskIncrementTick+0x150>)
 8009f9e:	6013      	str	r3, [r2, #0]
 8009fa0:	4a3e      	ldr	r2, [pc, #248]	@ (800a09c <xTaskIncrementTick+0x154>)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	6013      	str	r3, [r2, #0]
 8009fa6:	4b3e      	ldr	r3, [pc, #248]	@ (800a0a0 <xTaskIncrementTick+0x158>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	3301      	adds	r3, #1
 8009fac:	4a3c      	ldr	r2, [pc, #240]	@ (800a0a0 <xTaskIncrementTick+0x158>)
 8009fae:	6013      	str	r3, [r2, #0]
 8009fb0:	f000 fad4 	bl	800a55c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009fb4:	4b3b      	ldr	r3, [pc, #236]	@ (800a0a4 <xTaskIncrementTick+0x15c>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d349      	bcc.n	800a052 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fbe:	4b36      	ldr	r3, [pc, #216]	@ (800a098 <xTaskIncrementTick+0x150>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d104      	bne.n	8009fd2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fc8:	4b36      	ldr	r3, [pc, #216]	@ (800a0a4 <xTaskIncrementTick+0x15c>)
 8009fca:	f04f 32ff 	mov.w	r2, #4294967295
 8009fce:	601a      	str	r2, [r3, #0]
					break;
 8009fd0:	e03f      	b.n	800a052 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fd2:	4b31      	ldr	r3, [pc, #196]	@ (800a098 <xTaskIncrementTick+0x150>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009fe2:	693a      	ldr	r2, [r7, #16]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d203      	bcs.n	8009ff2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009fea:	4a2e      	ldr	r2, [pc, #184]	@ (800a0a4 <xTaskIncrementTick+0x15c>)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009ff0:	e02f      	b.n	800a052 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	3304      	adds	r3, #4
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7fe fdac 	bl	8008b54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a000:	2b00      	cmp	r3, #0
 800a002:	d004      	beq.n	800a00e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	3318      	adds	r3, #24
 800a008:	4618      	mov	r0, r3
 800a00a:	f7fe fda3 	bl	8008b54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a012:	4b25      	ldr	r3, [pc, #148]	@ (800a0a8 <xTaskIncrementTick+0x160>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	429a      	cmp	r2, r3
 800a018:	d903      	bls.n	800a022 <xTaskIncrementTick+0xda>
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a01e:	4a22      	ldr	r2, [pc, #136]	@ (800a0a8 <xTaskIncrementTick+0x160>)
 800a020:	6013      	str	r3, [r2, #0]
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a026:	4613      	mov	r3, r2
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	4413      	add	r3, r2
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	4a1f      	ldr	r2, [pc, #124]	@ (800a0ac <xTaskIncrementTick+0x164>)
 800a030:	441a      	add	r2, r3
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	3304      	adds	r3, #4
 800a036:	4619      	mov	r1, r3
 800a038:	4610      	mov	r0, r2
 800a03a:	f7fe fd2e 	bl	8008a9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a042:	4b1b      	ldr	r3, [pc, #108]	@ (800a0b0 <xTaskIncrementTick+0x168>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a048:	429a      	cmp	r2, r3
 800a04a:	d3b8      	bcc.n	8009fbe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a04c:	2301      	movs	r3, #1
 800a04e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a050:	e7b5      	b.n	8009fbe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a052:	4b17      	ldr	r3, [pc, #92]	@ (800a0b0 <xTaskIncrementTick+0x168>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a058:	4914      	ldr	r1, [pc, #80]	@ (800a0ac <xTaskIncrementTick+0x164>)
 800a05a:	4613      	mov	r3, r2
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	4413      	add	r3, r2
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	440b      	add	r3, r1
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2b01      	cmp	r3, #1
 800a068:	d901      	bls.n	800a06e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a06a:	2301      	movs	r3, #1
 800a06c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a06e:	4b11      	ldr	r3, [pc, #68]	@ (800a0b4 <xTaskIncrementTick+0x16c>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d007      	beq.n	800a086 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a076:	2301      	movs	r3, #1
 800a078:	617b      	str	r3, [r7, #20]
 800a07a:	e004      	b.n	800a086 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a07c:	4b0e      	ldr	r3, [pc, #56]	@ (800a0b8 <xTaskIncrementTick+0x170>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	3301      	adds	r3, #1
 800a082:	4a0d      	ldr	r2, [pc, #52]	@ (800a0b8 <xTaskIncrementTick+0x170>)
 800a084:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a086:	697b      	ldr	r3, [r7, #20]
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3718      	adds	r7, #24
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	24000fa8 	.word	0x24000fa8
 800a094:	24000f84 	.word	0x24000f84
 800a098:	24000f38 	.word	0x24000f38
 800a09c:	24000f3c 	.word	0x24000f3c
 800a0a0:	24000f98 	.word	0x24000f98
 800a0a4:	24000fa0 	.word	0x24000fa0
 800a0a8:	24000f88 	.word	0x24000f88
 800a0ac:	24000ab0 	.word	0x24000ab0
 800a0b0:	24000aac 	.word	0x24000aac
 800a0b4:	24000f94 	.word	0x24000f94
 800a0b8:	24000f90 	.word	0x24000f90

0800a0bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a0c2:	4b28      	ldr	r3, [pc, #160]	@ (800a164 <vTaskSwitchContext+0xa8>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d003      	beq.n	800a0d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a0ca:	4b27      	ldr	r3, [pc, #156]	@ (800a168 <vTaskSwitchContext+0xac>)
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a0d0:	e042      	b.n	800a158 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a0d2:	4b25      	ldr	r3, [pc, #148]	@ (800a168 <vTaskSwitchContext+0xac>)
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0d8:	4b24      	ldr	r3, [pc, #144]	@ (800a16c <vTaskSwitchContext+0xb0>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	60fb      	str	r3, [r7, #12]
 800a0de:	e011      	b.n	800a104 <vTaskSwitchContext+0x48>
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d10b      	bne.n	800a0fe <vTaskSwitchContext+0x42>
	__asm volatile
 800a0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ea:	f383 8811 	msr	BASEPRI, r3
 800a0ee:	f3bf 8f6f 	isb	sy
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	607b      	str	r3, [r7, #4]
}
 800a0f8:	bf00      	nop
 800a0fa:	bf00      	nop
 800a0fc:	e7fd      	b.n	800a0fa <vTaskSwitchContext+0x3e>
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	3b01      	subs	r3, #1
 800a102:	60fb      	str	r3, [r7, #12]
 800a104:	491a      	ldr	r1, [pc, #104]	@ (800a170 <vTaskSwitchContext+0xb4>)
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	4613      	mov	r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4413      	add	r3, r2
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	440b      	add	r3, r1
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d0e3      	beq.n	800a0e0 <vTaskSwitchContext+0x24>
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	4613      	mov	r3, r2
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	4413      	add	r3, r2
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	4a13      	ldr	r2, [pc, #76]	@ (800a170 <vTaskSwitchContext+0xb4>)
 800a124:	4413      	add	r3, r2
 800a126:	60bb      	str	r3, [r7, #8]
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	685a      	ldr	r2, [r3, #4]
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	605a      	str	r2, [r3, #4]
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	685a      	ldr	r2, [r3, #4]
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	3308      	adds	r3, #8
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d104      	bne.n	800a148 <vTaskSwitchContext+0x8c>
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	685a      	ldr	r2, [r3, #4]
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	605a      	str	r2, [r3, #4]
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	4a09      	ldr	r2, [pc, #36]	@ (800a174 <vTaskSwitchContext+0xb8>)
 800a150:	6013      	str	r3, [r2, #0]
 800a152:	4a06      	ldr	r2, [pc, #24]	@ (800a16c <vTaskSwitchContext+0xb0>)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6013      	str	r3, [r2, #0]
}
 800a158:	bf00      	nop
 800a15a:	3714      	adds	r7, #20
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr
 800a164:	24000fa8 	.word	0x24000fa8
 800a168:	24000f94 	.word	0x24000f94
 800a16c:	24000f88 	.word	0x24000f88
 800a170:	24000ab0 	.word	0x24000ab0
 800a174:	24000aac 	.word	0x24000aac

0800a178 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10b      	bne.n	800a1a0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18c:	f383 8811 	msr	BASEPRI, r3
 800a190:	f3bf 8f6f 	isb	sy
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	60fb      	str	r3, [r7, #12]
}
 800a19a:	bf00      	nop
 800a19c:	bf00      	nop
 800a19e:	e7fd      	b.n	800a19c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1a0:	4b07      	ldr	r3, [pc, #28]	@ (800a1c0 <vTaskPlaceOnEventList+0x48>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	3318      	adds	r3, #24
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f7fe fc9a 	bl	8008ae2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a1ae:	2101      	movs	r1, #1
 800a1b0:	6838      	ldr	r0, [r7, #0]
 800a1b2:	f000 fb3b 	bl	800a82c <prvAddCurrentTaskToDelayedList>
}
 800a1b6:	bf00      	nop
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	24000aac 	.word	0x24000aac

0800a1c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b086      	sub	sp, #24
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10b      	bne.n	800a1ee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1da:	f383 8811 	msr	BASEPRI, r3
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	617b      	str	r3, [r7, #20]
}
 800a1e8:	bf00      	nop
 800a1ea:	bf00      	nop
 800a1ec:	e7fd      	b.n	800a1ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1ee:	4b0a      	ldr	r3, [pc, #40]	@ (800a218 <vTaskPlaceOnEventListRestricted+0x54>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	3318      	adds	r3, #24
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f7fe fc4f 	bl	8008a9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d002      	beq.n	800a208 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a202:	f04f 33ff 	mov.w	r3, #4294967295
 800a206:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a208:	6879      	ldr	r1, [r7, #4]
 800a20a:	68b8      	ldr	r0, [r7, #8]
 800a20c:	f000 fb0e 	bl	800a82c <prvAddCurrentTaskToDelayedList>
	}
 800a210:	bf00      	nop
 800a212:	3718      	adds	r7, #24
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	24000aac 	.word	0x24000aac

0800a21c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b086      	sub	sp, #24
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d10b      	bne.n	800a24a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a236:	f383 8811 	msr	BASEPRI, r3
 800a23a:	f3bf 8f6f 	isb	sy
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	60fb      	str	r3, [r7, #12]
}
 800a244:	bf00      	nop
 800a246:	bf00      	nop
 800a248:	e7fd      	b.n	800a246 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	3318      	adds	r3, #24
 800a24e:	4618      	mov	r0, r3
 800a250:	f7fe fc80 	bl	8008b54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a254:	4b1d      	ldr	r3, [pc, #116]	@ (800a2cc <xTaskRemoveFromEventList+0xb0>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d11d      	bne.n	800a298 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	3304      	adds	r3, #4
 800a260:	4618      	mov	r0, r3
 800a262:	f7fe fc77 	bl	8008b54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a26a:	4b19      	ldr	r3, [pc, #100]	@ (800a2d0 <xTaskRemoveFromEventList+0xb4>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d903      	bls.n	800a27a <xTaskRemoveFromEventList+0x5e>
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a276:	4a16      	ldr	r2, [pc, #88]	@ (800a2d0 <xTaskRemoveFromEventList+0xb4>)
 800a278:	6013      	str	r3, [r2, #0]
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a27e:	4613      	mov	r3, r2
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	4413      	add	r3, r2
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	4a13      	ldr	r2, [pc, #76]	@ (800a2d4 <xTaskRemoveFromEventList+0xb8>)
 800a288:	441a      	add	r2, r3
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	3304      	adds	r3, #4
 800a28e:	4619      	mov	r1, r3
 800a290:	4610      	mov	r0, r2
 800a292:	f7fe fc02 	bl	8008a9a <vListInsertEnd>
 800a296:	e005      	b.n	800a2a4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	3318      	adds	r3, #24
 800a29c:	4619      	mov	r1, r3
 800a29e:	480e      	ldr	r0, [pc, #56]	@ (800a2d8 <xTaskRemoveFromEventList+0xbc>)
 800a2a0:	f7fe fbfb 	bl	8008a9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2a8:	4b0c      	ldr	r3, [pc, #48]	@ (800a2dc <xTaskRemoveFromEventList+0xc0>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d905      	bls.n	800a2be <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a2b6:	4b0a      	ldr	r3, [pc, #40]	@ (800a2e0 <xTaskRemoveFromEventList+0xc4>)
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	601a      	str	r2, [r3, #0]
 800a2bc:	e001      	b.n	800a2c2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a2c2:	697b      	ldr	r3, [r7, #20]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3718      	adds	r7, #24
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	24000fa8 	.word	0x24000fa8
 800a2d0:	24000f88 	.word	0x24000f88
 800a2d4:	24000ab0 	.word	0x24000ab0
 800a2d8:	24000f40 	.word	0x24000f40
 800a2dc:	24000aac 	.word	0x24000aac
 800a2e0:	24000f94 	.word	0x24000f94

0800a2e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a2ec:	4b06      	ldr	r3, [pc, #24]	@ (800a308 <vTaskInternalSetTimeOutState+0x24>)
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a2f4:	4b05      	ldr	r3, [pc, #20]	@ (800a30c <vTaskInternalSetTimeOutState+0x28>)
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	605a      	str	r2, [r3, #4]
}
 800a2fc:	bf00      	nop
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr
 800a308:	24000f98 	.word	0x24000f98
 800a30c:	24000f84 	.word	0x24000f84

0800a310 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b088      	sub	sp, #32
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10b      	bne.n	800a338 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	613b      	str	r3, [r7, #16]
}
 800a332:	bf00      	nop
 800a334:	bf00      	nop
 800a336:	e7fd      	b.n	800a334 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d10b      	bne.n	800a356 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	60fb      	str	r3, [r7, #12]
}
 800a350:	bf00      	nop
 800a352:	bf00      	nop
 800a354:	e7fd      	b.n	800a352 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a356:	f7fe fd57 	bl	8008e08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a35a:	4b1d      	ldr	r3, [pc, #116]	@ (800a3d0 <xTaskCheckForTimeOut+0xc0>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	69ba      	ldr	r2, [r7, #24]
 800a366:	1ad3      	subs	r3, r2, r3
 800a368:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a372:	d102      	bne.n	800a37a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a374:	2300      	movs	r3, #0
 800a376:	61fb      	str	r3, [r7, #28]
 800a378:	e023      	b.n	800a3c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	4b15      	ldr	r3, [pc, #84]	@ (800a3d4 <xTaskCheckForTimeOut+0xc4>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	429a      	cmp	r2, r3
 800a384:	d007      	beq.n	800a396 <xTaskCheckForTimeOut+0x86>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	69ba      	ldr	r2, [r7, #24]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d302      	bcc.n	800a396 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a390:	2301      	movs	r3, #1
 800a392:	61fb      	str	r3, [r7, #28]
 800a394:	e015      	b.n	800a3c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	697a      	ldr	r2, [r7, #20]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d20b      	bcs.n	800a3b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	1ad2      	subs	r2, r2, r3
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f7ff ff99 	bl	800a2e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	61fb      	str	r3, [r7, #28]
 800a3b6:	e004      	b.n	800a3c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a3c2:	f7fe fd53 	bl	8008e6c <vPortExitCritical>

	return xReturn;
 800a3c6:	69fb      	ldr	r3, [r7, #28]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3720      	adds	r7, #32
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	24000f84 	.word	0x24000f84
 800a3d4:	24000f98 	.word	0x24000f98

0800a3d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a3d8:	b480      	push	{r7}
 800a3da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a3dc:	4b03      	ldr	r3, [pc, #12]	@ (800a3ec <vTaskMissedYield+0x14>)
 800a3de:	2201      	movs	r2, #1
 800a3e0:	601a      	str	r2, [r3, #0]
}
 800a3e2:	bf00      	nop
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr
 800a3ec:	24000f94 	.word	0x24000f94

0800a3f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a3f8:	f000 f852 	bl	800a4a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a3fc:	4b06      	ldr	r3, [pc, #24]	@ (800a418 <prvIdleTask+0x28>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d9f9      	bls.n	800a3f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a404:	4b05      	ldr	r3, [pc, #20]	@ (800a41c <prvIdleTask+0x2c>)
 800a406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a40a:	601a      	str	r2, [r3, #0]
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a414:	e7f0      	b.n	800a3f8 <prvIdleTask+0x8>
 800a416:	bf00      	nop
 800a418:	24000ab0 	.word	0x24000ab0
 800a41c:	e000ed04 	.word	0xe000ed04

0800a420 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a426:	2300      	movs	r3, #0
 800a428:	607b      	str	r3, [r7, #4]
 800a42a:	e00c      	b.n	800a446 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	4613      	mov	r3, r2
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	4413      	add	r3, r2
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	4a12      	ldr	r2, [pc, #72]	@ (800a480 <prvInitialiseTaskLists+0x60>)
 800a438:	4413      	add	r3, r2
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fe fb00 	bl	8008a40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	3301      	adds	r3, #1
 800a444:	607b      	str	r3, [r7, #4]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2b37      	cmp	r3, #55	@ 0x37
 800a44a:	d9ef      	bls.n	800a42c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a44c:	480d      	ldr	r0, [pc, #52]	@ (800a484 <prvInitialiseTaskLists+0x64>)
 800a44e:	f7fe faf7 	bl	8008a40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a452:	480d      	ldr	r0, [pc, #52]	@ (800a488 <prvInitialiseTaskLists+0x68>)
 800a454:	f7fe faf4 	bl	8008a40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a458:	480c      	ldr	r0, [pc, #48]	@ (800a48c <prvInitialiseTaskLists+0x6c>)
 800a45a:	f7fe faf1 	bl	8008a40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a45e:	480c      	ldr	r0, [pc, #48]	@ (800a490 <prvInitialiseTaskLists+0x70>)
 800a460:	f7fe faee 	bl	8008a40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a464:	480b      	ldr	r0, [pc, #44]	@ (800a494 <prvInitialiseTaskLists+0x74>)
 800a466:	f7fe faeb 	bl	8008a40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a46a:	4b0b      	ldr	r3, [pc, #44]	@ (800a498 <prvInitialiseTaskLists+0x78>)
 800a46c:	4a05      	ldr	r2, [pc, #20]	@ (800a484 <prvInitialiseTaskLists+0x64>)
 800a46e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a470:	4b0a      	ldr	r3, [pc, #40]	@ (800a49c <prvInitialiseTaskLists+0x7c>)
 800a472:	4a05      	ldr	r2, [pc, #20]	@ (800a488 <prvInitialiseTaskLists+0x68>)
 800a474:	601a      	str	r2, [r3, #0]
}
 800a476:	bf00      	nop
 800a478:	3708      	adds	r7, #8
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	24000ab0 	.word	0x24000ab0
 800a484:	24000f10 	.word	0x24000f10
 800a488:	24000f24 	.word	0x24000f24
 800a48c:	24000f40 	.word	0x24000f40
 800a490:	24000f54 	.word	0x24000f54
 800a494:	24000f6c 	.word	0x24000f6c
 800a498:	24000f38 	.word	0x24000f38
 800a49c:	24000f3c 	.word	0x24000f3c

0800a4a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a4a6:	e019      	b.n	800a4dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a4a8:	f7fe fcae 	bl	8008e08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4ac:	4b10      	ldr	r3, [pc, #64]	@ (800a4f0 <prvCheckTasksWaitingTermination+0x50>)
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	3304      	adds	r3, #4
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7fe fb4b 	bl	8008b54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a4be:	4b0d      	ldr	r3, [pc, #52]	@ (800a4f4 <prvCheckTasksWaitingTermination+0x54>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	3b01      	subs	r3, #1
 800a4c4:	4a0b      	ldr	r2, [pc, #44]	@ (800a4f4 <prvCheckTasksWaitingTermination+0x54>)
 800a4c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a4c8:	4b0b      	ldr	r3, [pc, #44]	@ (800a4f8 <prvCheckTasksWaitingTermination+0x58>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	4a0a      	ldr	r2, [pc, #40]	@ (800a4f8 <prvCheckTasksWaitingTermination+0x58>)
 800a4d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a4d2:	f7fe fccb 	bl	8008e6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f810 	bl	800a4fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a4dc:	4b06      	ldr	r3, [pc, #24]	@ (800a4f8 <prvCheckTasksWaitingTermination+0x58>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d1e1      	bne.n	800a4a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a4e4:	bf00      	nop
 800a4e6:	bf00      	nop
 800a4e8:	3708      	adds	r7, #8
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	24000f54 	.word	0x24000f54
 800a4f4:	24000f80 	.word	0x24000f80
 800a4f8:	24000f68 	.word	0x24000f68

0800a4fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d108      	bne.n	800a520 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a512:	4618      	mov	r0, r3
 800a514:	f7fe f9d6 	bl	80088c4 <vPortFree>
				vPortFree( pxTCB );
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f7fe f9d3 	bl	80088c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a51e:	e019      	b.n	800a554 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a526:	2b01      	cmp	r3, #1
 800a528:	d103      	bne.n	800a532 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f7fe f9ca 	bl	80088c4 <vPortFree>
	}
 800a530:	e010      	b.n	800a554 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a538:	2b02      	cmp	r3, #2
 800a53a:	d00b      	beq.n	800a554 <prvDeleteTCB+0x58>
	__asm volatile
 800a53c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a540:	f383 8811 	msr	BASEPRI, r3
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	60fb      	str	r3, [r7, #12]
}
 800a54e:	bf00      	nop
 800a550:	bf00      	nop
 800a552:	e7fd      	b.n	800a550 <prvDeleteTCB+0x54>
	}
 800a554:	bf00      	nop
 800a556:	3710      	adds	r7, #16
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a562:	4b0c      	ldr	r3, [pc, #48]	@ (800a594 <prvResetNextTaskUnblockTime+0x38>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d104      	bne.n	800a576 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a56c:	4b0a      	ldr	r3, [pc, #40]	@ (800a598 <prvResetNextTaskUnblockTime+0x3c>)
 800a56e:	f04f 32ff 	mov.w	r2, #4294967295
 800a572:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a574:	e008      	b.n	800a588 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a576:	4b07      	ldr	r3, [pc, #28]	@ (800a594 <prvResetNextTaskUnblockTime+0x38>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	4a04      	ldr	r2, [pc, #16]	@ (800a598 <prvResetNextTaskUnblockTime+0x3c>)
 800a586:	6013      	str	r3, [r2, #0]
}
 800a588:	bf00      	nop
 800a58a:	370c      	adds	r7, #12
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr
 800a594:	24000f38 	.word	0x24000f38
 800a598:	24000fa0 	.word	0x24000fa0

0800a59c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a5a2:	4b0b      	ldr	r3, [pc, #44]	@ (800a5d0 <xTaskGetSchedulerState+0x34>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d102      	bne.n	800a5b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	607b      	str	r3, [r7, #4]
 800a5ae:	e008      	b.n	800a5c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5b0:	4b08      	ldr	r3, [pc, #32]	@ (800a5d4 <xTaskGetSchedulerState+0x38>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d102      	bne.n	800a5be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a5b8:	2302      	movs	r3, #2
 800a5ba:	607b      	str	r3, [r7, #4]
 800a5bc:	e001      	b.n	800a5c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a5c2:	687b      	ldr	r3, [r7, #4]
	}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr
 800a5d0:	24000f8c 	.word	0x24000f8c
 800a5d4:	24000fa8 	.word	0x24000fa8

0800a5d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b086      	sub	sp, #24
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d058      	beq.n	800a6a0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a5ee:	4b2f      	ldr	r3, [pc, #188]	@ (800a6ac <xTaskPriorityDisinherit+0xd4>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	693a      	ldr	r2, [r7, #16]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d00b      	beq.n	800a610 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fc:	f383 8811 	msr	BASEPRI, r3
 800a600:	f3bf 8f6f 	isb	sy
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	60fb      	str	r3, [r7, #12]
}
 800a60a:	bf00      	nop
 800a60c:	bf00      	nop
 800a60e:	e7fd      	b.n	800a60c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a614:	2b00      	cmp	r3, #0
 800a616:	d10b      	bne.n	800a630 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a61c:	f383 8811 	msr	BASEPRI, r3
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	60bb      	str	r3, [r7, #8]
}
 800a62a:	bf00      	nop
 800a62c:	bf00      	nop
 800a62e:	e7fd      	b.n	800a62c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a634:	1e5a      	subs	r2, r3, #1
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a642:	429a      	cmp	r2, r3
 800a644:	d02c      	beq.n	800a6a0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d128      	bne.n	800a6a0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	3304      	adds	r3, #4
 800a652:	4618      	mov	r0, r3
 800a654:	f7fe fa7e 	bl	8008b54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a664:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a670:	4b0f      	ldr	r3, [pc, #60]	@ (800a6b0 <xTaskPriorityDisinherit+0xd8>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	429a      	cmp	r2, r3
 800a676:	d903      	bls.n	800a680 <xTaskPriorityDisinherit+0xa8>
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a67c:	4a0c      	ldr	r2, [pc, #48]	@ (800a6b0 <xTaskPriorityDisinherit+0xd8>)
 800a67e:	6013      	str	r3, [r2, #0]
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a684:	4613      	mov	r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4413      	add	r3, r2
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	4a09      	ldr	r2, [pc, #36]	@ (800a6b4 <xTaskPriorityDisinherit+0xdc>)
 800a68e:	441a      	add	r2, r3
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	3304      	adds	r3, #4
 800a694:	4619      	mov	r1, r3
 800a696:	4610      	mov	r0, r2
 800a698:	f7fe f9ff 	bl	8008a9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a69c:	2301      	movs	r3, #1
 800a69e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a6a0:	697b      	ldr	r3, [r7, #20]
	}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3718      	adds	r7, #24
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	24000aac 	.word	0x24000aac
 800a6b0:	24000f88 	.word	0x24000f88
 800a6b4:	24000ab0 	.word	0x24000ab0

0800a6b8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b08a      	sub	sp, #40	@ 0x28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	603b      	str	r3, [r7, #0]
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d10b      	bne.n	800a6ea <xTaskGenericNotify+0x32>
	__asm volatile
 800a6d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d6:	f383 8811 	msr	BASEPRI, r3
 800a6da:	f3bf 8f6f 	isb	sy
 800a6de:	f3bf 8f4f 	dsb	sy
 800a6e2:	61bb      	str	r3, [r7, #24]
}
 800a6e4:	bf00      	nop
 800a6e6:	bf00      	nop
 800a6e8:	e7fd      	b.n	800a6e6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a6ee:	f7fe fb8b 	bl	8008e08 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d003      	beq.n	800a700 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a6f8:	6a3b      	ldr	r3, [r7, #32]
 800a6fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a700:	6a3b      	ldr	r3, [r7, #32]
 800a702:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a706:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a708:	6a3b      	ldr	r3, [r7, #32]
 800a70a:	2202      	movs	r2, #2
 800a70c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 800a710:	79fb      	ldrb	r3, [r7, #7]
 800a712:	2b04      	cmp	r3, #4
 800a714:	d827      	bhi.n	800a766 <xTaskGenericNotify+0xae>
 800a716:	a201      	add	r2, pc, #4	@ (adr r2, 800a71c <xTaskGenericNotify+0x64>)
 800a718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a71c:	0800a789 	.word	0x0800a789
 800a720:	0800a731 	.word	0x0800a731
 800a724:	0800a73f 	.word	0x0800a73f
 800a728:	0800a74b 	.word	0x0800a74b
 800a72c:	0800a753 	.word	0x0800a753
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a730:	6a3b      	ldr	r3, [r7, #32]
 800a732:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	431a      	orrs	r2, r3
 800a738:	6a3b      	ldr	r3, [r7, #32]
 800a73a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800a73c:	e027      	b.n	800a78e <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a73e:	6a3b      	ldr	r3, [r7, #32]
 800a740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a742:	1c5a      	adds	r2, r3, #1
 800a744:	6a3b      	ldr	r3, [r7, #32]
 800a746:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800a748:	e021      	b.n	800a78e <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a74a:	6a3b      	ldr	r3, [r7, #32]
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800a750:	e01d      	b.n	800a78e <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a752:	7ffb      	ldrb	r3, [r7, #31]
 800a754:	2b02      	cmp	r3, #2
 800a756:	d003      	beq.n	800a760 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a758:	6a3b      	ldr	r3, [r7, #32]
 800a75a:	68ba      	ldr	r2, [r7, #8]
 800a75c:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a75e:	e016      	b.n	800a78e <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 800a760:	2300      	movs	r3, #0
 800a762:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800a764:	e013      	b.n	800a78e <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a766:	6a3b      	ldr	r3, [r7, #32]
 800a768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76e:	d00d      	beq.n	800a78c <xTaskGenericNotify+0xd4>
	__asm volatile
 800a770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	617b      	str	r3, [r7, #20]
}
 800a782:	bf00      	nop
 800a784:	bf00      	nop
 800a786:	e7fd      	b.n	800a784 <xTaskGenericNotify+0xcc>
					break;
 800a788:	bf00      	nop
 800a78a:	e000      	b.n	800a78e <xTaskGenericNotify+0xd6>

					break;
 800a78c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a78e:	7ffb      	ldrb	r3, [r7, #31]
 800a790:	2b01      	cmp	r3, #1
 800a792:	d13b      	bne.n	800a80c <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a794:	6a3b      	ldr	r3, [r7, #32]
 800a796:	3304      	adds	r3, #4
 800a798:	4618      	mov	r0, r3
 800a79a:	f7fe f9db 	bl	8008b54 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a79e:	6a3b      	ldr	r3, [r7, #32]
 800a7a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7a2:	4b1e      	ldr	r3, [pc, #120]	@ (800a81c <xTaskGenericNotify+0x164>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d903      	bls.n	800a7b2 <xTaskGenericNotify+0xfa>
 800a7aa:	6a3b      	ldr	r3, [r7, #32]
 800a7ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7ae:	4a1b      	ldr	r2, [pc, #108]	@ (800a81c <xTaskGenericNotify+0x164>)
 800a7b0:	6013      	str	r3, [r2, #0]
 800a7b2:	6a3b      	ldr	r3, [r7, #32]
 800a7b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4413      	add	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4a18      	ldr	r2, [pc, #96]	@ (800a820 <xTaskGenericNotify+0x168>)
 800a7c0:	441a      	add	r2, r3
 800a7c2:	6a3b      	ldr	r3, [r7, #32]
 800a7c4:	3304      	adds	r3, #4
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	4610      	mov	r0, r2
 800a7ca:	f7fe f966 	bl	8008a9a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a7ce:	6a3b      	ldr	r3, [r7, #32]
 800a7d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00b      	beq.n	800a7ee <xTaskGenericNotify+0x136>
	__asm volatile
 800a7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7da:	f383 8811 	msr	BASEPRI, r3
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	f3bf 8f4f 	dsb	sy
 800a7e6:	613b      	str	r3, [r7, #16]
}
 800a7e8:	bf00      	nop
 800a7ea:	bf00      	nop
 800a7ec:	e7fd      	b.n	800a7ea <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a7ee:	6a3b      	ldr	r3, [r7, #32]
 800a7f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7f2:	4b0c      	ldr	r3, [pc, #48]	@ (800a824 <xTaskGenericNotify+0x16c>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d907      	bls.n	800a80c <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a7fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a828 <xTaskGenericNotify+0x170>)
 800a7fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a802:	601a      	str	r2, [r3, #0]
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a80c:	f7fe fb2e 	bl	8008e6c <vPortExitCritical>

		return xReturn;
 800a810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800a812:	4618      	mov	r0, r3
 800a814:	3728      	adds	r7, #40	@ 0x28
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	24000f88 	.word	0x24000f88
 800a820:	24000ab0 	.word	0x24000ab0
 800a824:	24000aac 	.word	0x24000aac
 800a828:	e000ed04 	.word	0xe000ed04

0800a82c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a836:	4b21      	ldr	r3, [pc, #132]	@ (800a8bc <prvAddCurrentTaskToDelayedList+0x90>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a83c:	4b20      	ldr	r3, [pc, #128]	@ (800a8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3304      	adds	r3, #4
 800a842:	4618      	mov	r0, r3
 800a844:	f7fe f986 	bl	8008b54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84e:	d10a      	bne.n	800a866 <prvAddCurrentTaskToDelayedList+0x3a>
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d007      	beq.n	800a866 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a856:	4b1a      	ldr	r3, [pc, #104]	@ (800a8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	3304      	adds	r3, #4
 800a85c:	4619      	mov	r1, r3
 800a85e:	4819      	ldr	r0, [pc, #100]	@ (800a8c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a860:	f7fe f91b 	bl	8008a9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a864:	e026      	b.n	800a8b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	4413      	add	r3, r2
 800a86c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a86e:	4b14      	ldr	r3, [pc, #80]	@ (800a8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68ba      	ldr	r2, [r7, #8]
 800a874:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a876:	68ba      	ldr	r2, [r7, #8]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d209      	bcs.n	800a892 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a87e:	4b12      	ldr	r3, [pc, #72]	@ (800a8c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	4b0f      	ldr	r3, [pc, #60]	@ (800a8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	3304      	adds	r3, #4
 800a888:	4619      	mov	r1, r3
 800a88a:	4610      	mov	r0, r2
 800a88c:	f7fe f929 	bl	8008ae2 <vListInsert>
}
 800a890:	e010      	b.n	800a8b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a892:	4b0e      	ldr	r3, [pc, #56]	@ (800a8cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	4b0a      	ldr	r3, [pc, #40]	@ (800a8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	3304      	adds	r3, #4
 800a89c:	4619      	mov	r1, r3
 800a89e:	4610      	mov	r0, r2
 800a8a0:	f7fe f91f 	bl	8008ae2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a8a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a8d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	68ba      	ldr	r2, [r7, #8]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d202      	bcs.n	800a8b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a8ae:	4a08      	ldr	r2, [pc, #32]	@ (800a8d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	6013      	str	r3, [r2, #0]
}
 800a8b4:	bf00      	nop
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	24000f84 	.word	0x24000f84
 800a8c0:	24000aac 	.word	0x24000aac
 800a8c4:	24000f6c 	.word	0x24000f6c
 800a8c8:	24000f3c 	.word	0x24000f3c
 800a8cc:	24000f38 	.word	0x24000f38
 800a8d0:	24000fa0 	.word	0x24000fa0

0800a8d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b08a      	sub	sp, #40	@ 0x28
 800a8d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a8de:	f000 fb13 	bl	800af08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a8e2:	4b1d      	ldr	r3, [pc, #116]	@ (800a958 <xTimerCreateTimerTask+0x84>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d021      	beq.n	800a92e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a8f2:	1d3a      	adds	r2, r7, #4
 800a8f4:	f107 0108 	add.w	r1, r7, #8
 800a8f8:	f107 030c 	add.w	r3, r7, #12
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7fd ffc7 	bl	8008890 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a902:	6879      	ldr	r1, [r7, #4]
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	9202      	str	r2, [sp, #8]
 800a90a:	9301      	str	r3, [sp, #4]
 800a90c:	2302      	movs	r3, #2
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	2300      	movs	r3, #0
 800a912:	460a      	mov	r2, r1
 800a914:	4911      	ldr	r1, [pc, #68]	@ (800a95c <xTimerCreateTimerTask+0x88>)
 800a916:	4812      	ldr	r0, [pc, #72]	@ (800a960 <xTimerCreateTimerTask+0x8c>)
 800a918:	f7ff f892 	bl	8009a40 <xTaskCreateStatic>
 800a91c:	4603      	mov	r3, r0
 800a91e:	4a11      	ldr	r2, [pc, #68]	@ (800a964 <xTimerCreateTimerTask+0x90>)
 800a920:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a922:	4b10      	ldr	r3, [pc, #64]	@ (800a964 <xTimerCreateTimerTask+0x90>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d001      	beq.n	800a92e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a92a:	2301      	movs	r3, #1
 800a92c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d10b      	bne.n	800a94c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a938:	f383 8811 	msr	BASEPRI, r3
 800a93c:	f3bf 8f6f 	isb	sy
 800a940:	f3bf 8f4f 	dsb	sy
 800a944:	613b      	str	r3, [r7, #16]
}
 800a946:	bf00      	nop
 800a948:	bf00      	nop
 800a94a:	e7fd      	b.n	800a948 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a94c:	697b      	ldr	r3, [r7, #20]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3718      	adds	r7, #24
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	24000fdc 	.word	0x24000fdc
 800a95c:	0800bf64 	.word	0x0800bf64
 800a960:	0800aaa1 	.word	0x0800aaa1
 800a964:	24000fe0 	.word	0x24000fe0

0800a968 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b08a      	sub	sp, #40	@ 0x28
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	607a      	str	r2, [r7, #4]
 800a974:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a976:	2300      	movs	r3, #0
 800a978:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d10b      	bne.n	800a998 <xTimerGenericCommand+0x30>
	__asm volatile
 800a980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a984:	f383 8811 	msr	BASEPRI, r3
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	623b      	str	r3, [r7, #32]
}
 800a992:	bf00      	nop
 800a994:	bf00      	nop
 800a996:	e7fd      	b.n	800a994 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a998:	4b19      	ldr	r3, [pc, #100]	@ (800aa00 <xTimerGenericCommand+0x98>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d02a      	beq.n	800a9f6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	2b05      	cmp	r3, #5
 800a9b0:	dc18      	bgt.n	800a9e4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a9b2:	f7ff fdf3 	bl	800a59c <xTaskGetSchedulerState>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	d109      	bne.n	800a9d0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a9bc:	4b10      	ldr	r3, [pc, #64]	@ (800aa00 <xTimerGenericCommand+0x98>)
 800a9be:	6818      	ldr	r0, [r3, #0]
 800a9c0:	f107 0110 	add.w	r1, r7, #16
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9c8:	f7fe fc4a 	bl	8009260 <xQueueGenericSend>
 800a9cc:	6278      	str	r0, [r7, #36]	@ 0x24
 800a9ce:	e012      	b.n	800a9f6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a9d0:	4b0b      	ldr	r3, [pc, #44]	@ (800aa00 <xTimerGenericCommand+0x98>)
 800a9d2:	6818      	ldr	r0, [r3, #0]
 800a9d4:	f107 0110 	add.w	r1, r7, #16
 800a9d8:	2300      	movs	r3, #0
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f7fe fc40 	bl	8009260 <xQueueGenericSend>
 800a9e0:	6278      	str	r0, [r7, #36]	@ 0x24
 800a9e2:	e008      	b.n	800a9f6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a9e4:	4b06      	ldr	r3, [pc, #24]	@ (800aa00 <xTimerGenericCommand+0x98>)
 800a9e6:	6818      	ldr	r0, [r3, #0]
 800a9e8:	f107 0110 	add.w	r1, r7, #16
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	683a      	ldr	r2, [r7, #0]
 800a9f0:	f7fe fd38 	bl	8009464 <xQueueGenericSendFromISR>
 800a9f4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3728      	adds	r7, #40	@ 0x28
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	24000fdc 	.word	0x24000fdc

0800aa04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b088      	sub	sp, #32
 800aa08:	af02      	add	r7, sp, #8
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa0e:	4b23      	ldr	r3, [pc, #140]	@ (800aa9c <prvProcessExpiredTimer+0x98>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7fe f899 	bl	8008b54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa28:	f003 0304 	and.w	r3, r3, #4
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d023      	beq.n	800aa78 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	699a      	ldr	r2, [r3, #24]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	18d1      	adds	r1, r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	6978      	ldr	r0, [r7, #20]
 800aa3e:	f000 f8d5 	bl	800abec <prvInsertTimerInActiveList>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d020      	beq.n	800aa8a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa48:	2300      	movs	r3, #0
 800aa4a:	9300      	str	r3, [sp, #0]
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	2100      	movs	r1, #0
 800aa52:	6978      	ldr	r0, [r7, #20]
 800aa54:	f7ff ff88 	bl	800a968 <xTimerGenericCommand>
 800aa58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d114      	bne.n	800aa8a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800aa60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa64:	f383 8811 	msr	BASEPRI, r3
 800aa68:	f3bf 8f6f 	isb	sy
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	60fb      	str	r3, [r7, #12]
}
 800aa72:	bf00      	nop
 800aa74:	bf00      	nop
 800aa76:	e7fd      	b.n	800aa74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa7e:	f023 0301 	bic.w	r3, r3, #1
 800aa82:	b2da      	uxtb	r2, r3
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	6a1b      	ldr	r3, [r3, #32]
 800aa8e:	6978      	ldr	r0, [r7, #20]
 800aa90:	4798      	blx	r3
}
 800aa92:	bf00      	nop
 800aa94:	3718      	adds	r7, #24
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	24000fd4 	.word	0x24000fd4

0800aaa0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aaa8:	f107 0308 	add.w	r3, r7, #8
 800aaac:	4618      	mov	r0, r3
 800aaae:	f000 f859 	bl	800ab64 <prvGetNextExpireTime>
 800aab2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	4619      	mov	r1, r3
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	f000 f805 	bl	800aac8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aabe:	f000 f8d7 	bl	800ac70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aac2:	bf00      	nop
 800aac4:	e7f0      	b.n	800aaa8 <prvTimerTask+0x8>
	...

0800aac8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aad2:	f7ff f97d 	bl	8009dd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aad6:	f107 0308 	add.w	r3, r7, #8
 800aada:	4618      	mov	r0, r3
 800aadc:	f000 f866 	bl	800abac <prvSampleTimeNow>
 800aae0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d130      	bne.n	800ab4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d10a      	bne.n	800ab04 <prvProcessTimerOrBlockTask+0x3c>
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d806      	bhi.n	800ab04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aaf6:	f7ff f979 	bl	8009dec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aafa:	68f9      	ldr	r1, [r7, #12]
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f7ff ff81 	bl	800aa04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ab02:	e024      	b.n	800ab4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d008      	beq.n	800ab1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ab0a:	4b13      	ldr	r3, [pc, #76]	@ (800ab58 <prvProcessTimerOrBlockTask+0x90>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d101      	bne.n	800ab18 <prvProcessTimerOrBlockTask+0x50>
 800ab14:	2301      	movs	r3, #1
 800ab16:	e000      	b.n	800ab1a <prvProcessTimerOrBlockTask+0x52>
 800ab18:	2300      	movs	r3, #0
 800ab1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ab1c:	4b0f      	ldr	r3, [pc, #60]	@ (800ab5c <prvProcessTimerOrBlockTask+0x94>)
 800ab1e:	6818      	ldr	r0, [r3, #0]
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	1ad3      	subs	r3, r2, r3
 800ab26:	683a      	ldr	r2, [r7, #0]
 800ab28:	4619      	mov	r1, r3
 800ab2a:	f7fe ff55 	bl	80099d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ab2e:	f7ff f95d 	bl	8009dec <xTaskResumeAll>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d10a      	bne.n	800ab4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ab38:	4b09      	ldr	r3, [pc, #36]	@ (800ab60 <prvProcessTimerOrBlockTask+0x98>)
 800ab3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab3e:	601a      	str	r2, [r3, #0]
 800ab40:	f3bf 8f4f 	dsb	sy
 800ab44:	f3bf 8f6f 	isb	sy
}
 800ab48:	e001      	b.n	800ab4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ab4a:	f7ff f94f 	bl	8009dec <xTaskResumeAll>
}
 800ab4e:	bf00      	nop
 800ab50:	3710      	adds	r7, #16
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	24000fd8 	.word	0x24000fd8
 800ab5c:	24000fdc 	.word	0x24000fdc
 800ab60:	e000ed04 	.word	0xe000ed04

0800ab64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ab6c:	4b0e      	ldr	r3, [pc, #56]	@ (800aba8 <prvGetNextExpireTime+0x44>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d101      	bne.n	800ab7a <prvGetNextExpireTime+0x16>
 800ab76:	2201      	movs	r2, #1
 800ab78:	e000      	b.n	800ab7c <prvGetNextExpireTime+0x18>
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d105      	bne.n	800ab94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab88:	4b07      	ldr	r3, [pc, #28]	@ (800aba8 <prvGetNextExpireTime+0x44>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	68db      	ldr	r3, [r3, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	60fb      	str	r3, [r7, #12]
 800ab92:	e001      	b.n	800ab98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ab94:	2300      	movs	r3, #0
 800ab96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ab98:	68fb      	ldr	r3, [r7, #12]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3714      	adds	r7, #20
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop
 800aba8:	24000fd4 	.word	0x24000fd4

0800abac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800abb4:	f7ff f9b8 	bl	8009f28 <xTaskGetTickCount>
 800abb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800abba:	4b0b      	ldr	r3, [pc, #44]	@ (800abe8 <prvSampleTimeNow+0x3c>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	68fa      	ldr	r2, [r7, #12]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d205      	bcs.n	800abd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800abc4:	f000 f93a 	bl	800ae3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2201      	movs	r2, #1
 800abcc:	601a      	str	r2, [r3, #0]
 800abce:	e002      	b.n	800abd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800abd6:	4a04      	ldr	r2, [pc, #16]	@ (800abe8 <prvSampleTimeNow+0x3c>)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800abdc:	68fb      	ldr	r3, [r7, #12]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3710      	adds	r7, #16
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	24000fe4 	.word	0x24000fe4

0800abec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b086      	sub	sp, #24
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	607a      	str	r2, [r7, #4]
 800abf8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800abfa:	2300      	movs	r3, #0
 800abfc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	68ba      	ldr	r2, [r7, #8]
 800ac02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ac0a:	68ba      	ldr	r2, [r7, #8]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d812      	bhi.n	800ac38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	1ad2      	subs	r2, r2, r3
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	699b      	ldr	r3, [r3, #24]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d302      	bcc.n	800ac26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ac20:	2301      	movs	r3, #1
 800ac22:	617b      	str	r3, [r7, #20]
 800ac24:	e01b      	b.n	800ac5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ac26:	4b10      	ldr	r3, [pc, #64]	@ (800ac68 <prvInsertTimerInActiveList+0x7c>)
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	3304      	adds	r3, #4
 800ac2e:	4619      	mov	r1, r3
 800ac30:	4610      	mov	r0, r2
 800ac32:	f7fd ff56 	bl	8008ae2 <vListInsert>
 800ac36:	e012      	b.n	800ac5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d206      	bcs.n	800ac4e <prvInsertTimerInActiveList+0x62>
 800ac40:	68ba      	ldr	r2, [r7, #8]
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d302      	bcc.n	800ac4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	617b      	str	r3, [r7, #20]
 800ac4c:	e007      	b.n	800ac5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac4e:	4b07      	ldr	r3, [pc, #28]	@ (800ac6c <prvInsertTimerInActiveList+0x80>)
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	3304      	adds	r3, #4
 800ac56:	4619      	mov	r1, r3
 800ac58:	4610      	mov	r0, r2
 800ac5a:	f7fd ff42 	bl	8008ae2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ac5e:	697b      	ldr	r3, [r7, #20]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3718      	adds	r7, #24
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	24000fd8 	.word	0x24000fd8
 800ac6c:	24000fd4 	.word	0x24000fd4

0800ac70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b08e      	sub	sp, #56	@ 0x38
 800ac74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ac76:	e0ce      	b.n	800ae16 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	da19      	bge.n	800acb2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ac7e:	1d3b      	adds	r3, r7, #4
 800ac80:	3304      	adds	r3, #4
 800ac82:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ac84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d10b      	bne.n	800aca2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ac8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac8e:	f383 8811 	msr	BASEPRI, r3
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	f3bf 8f4f 	dsb	sy
 800ac9a:	61fb      	str	r3, [r7, #28]
}
 800ac9c:	bf00      	nop
 800ac9e:	bf00      	nop
 800aca0:	e7fd      	b.n	800ac9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aca8:	6850      	ldr	r0, [r2, #4]
 800acaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acac:	6892      	ldr	r2, [r2, #8]
 800acae:	4611      	mov	r1, r2
 800acb0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f2c0 80ae 	blt.w	800ae16 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800acbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acc0:	695b      	ldr	r3, [r3, #20]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d004      	beq.n	800acd0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800acc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acc8:	3304      	adds	r3, #4
 800acca:	4618      	mov	r0, r3
 800accc:	f7fd ff42 	bl	8008b54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800acd0:	463b      	mov	r3, r7
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7ff ff6a 	bl	800abac <prvSampleTimeNow>
 800acd8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2b09      	cmp	r3, #9
 800acde:	f200 8097 	bhi.w	800ae10 <prvProcessReceivedCommands+0x1a0>
 800ace2:	a201      	add	r2, pc, #4	@ (adr r2, 800ace8 <prvProcessReceivedCommands+0x78>)
 800ace4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace8:	0800ad11 	.word	0x0800ad11
 800acec:	0800ad11 	.word	0x0800ad11
 800acf0:	0800ad11 	.word	0x0800ad11
 800acf4:	0800ad87 	.word	0x0800ad87
 800acf8:	0800ad9b 	.word	0x0800ad9b
 800acfc:	0800ade7 	.word	0x0800ade7
 800ad00:	0800ad11 	.word	0x0800ad11
 800ad04:	0800ad11 	.word	0x0800ad11
 800ad08:	0800ad87 	.word	0x0800ad87
 800ad0c:	0800ad9b 	.word	0x0800ad9b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad16:	f043 0301 	orr.w	r3, r3, #1
 800ad1a:	b2da      	uxtb	r2, r3
 800ad1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ad22:	68ba      	ldr	r2, [r7, #8]
 800ad24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad26:	699b      	ldr	r3, [r3, #24]
 800ad28:	18d1      	adds	r1, r2, r3
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad30:	f7ff ff5c 	bl	800abec <prvInsertTimerInActiveList>
 800ad34:	4603      	mov	r3, r0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d06c      	beq.n	800ae14 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad3c:	6a1b      	ldr	r3, [r3, #32]
 800ad3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad48:	f003 0304 	and.w	r3, r3, #4
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d061      	beq.n	800ae14 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ad50:	68ba      	ldr	r2, [r7, #8]
 800ad52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad54:	699b      	ldr	r3, [r3, #24]
 800ad56:	441a      	add	r2, r3
 800ad58:	2300      	movs	r3, #0
 800ad5a:	9300      	str	r3, [sp, #0]
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	2100      	movs	r1, #0
 800ad60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad62:	f7ff fe01 	bl	800a968 <xTimerGenericCommand>
 800ad66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ad68:	6a3b      	ldr	r3, [r7, #32]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d152      	bne.n	800ae14 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ad6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	61bb      	str	r3, [r7, #24]
}
 800ad80:	bf00      	nop
 800ad82:	bf00      	nop
 800ad84:	e7fd      	b.n	800ad82 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad8c:	f023 0301 	bic.w	r3, r3, #1
 800ad90:	b2da      	uxtb	r2, r3
 800ad92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ad98:	e03d      	b.n	800ae16 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ada0:	f043 0301 	orr.w	r3, r3, #1
 800ada4:	b2da      	uxtb	r2, r3
 800ada6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800adac:	68ba      	ldr	r2, [r7, #8]
 800adae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800adb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb4:	699b      	ldr	r3, [r3, #24]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d10b      	bne.n	800add2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800adba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adbe:	f383 8811 	msr	BASEPRI, r3
 800adc2:	f3bf 8f6f 	isb	sy
 800adc6:	f3bf 8f4f 	dsb	sy
 800adca:	617b      	str	r3, [r7, #20]
}
 800adcc:	bf00      	nop
 800adce:	bf00      	nop
 800add0:	e7fd      	b.n	800adce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800add2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800add4:	699a      	ldr	r2, [r3, #24]
 800add6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add8:	18d1      	adds	r1, r2, r3
 800adda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800addc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ade0:	f7ff ff04 	bl	800abec <prvInsertTimerInActiveList>
					break;
 800ade4:	e017      	b.n	800ae16 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ade6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800adec:	f003 0302 	and.w	r3, r3, #2
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d103      	bne.n	800adfc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800adf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adf6:	f7fd fd65 	bl	80088c4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800adfa:	e00c      	b.n	800ae16 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800adfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adfe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae02:	f023 0301 	bic.w	r3, r3, #1
 800ae06:	b2da      	uxtb	r2, r3
 800ae08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ae0e:	e002      	b.n	800ae16 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ae10:	bf00      	nop
 800ae12:	e000      	b.n	800ae16 <prvProcessReceivedCommands+0x1a6>
					break;
 800ae14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae16:	4b08      	ldr	r3, [pc, #32]	@ (800ae38 <prvProcessReceivedCommands+0x1c8>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	1d39      	adds	r1, r7, #4
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7fe fbbe 	bl	80095a0 <xQueueReceive>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	f47f af26 	bne.w	800ac78 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ae2c:	bf00      	nop
 800ae2e:	bf00      	nop
 800ae30:	3730      	adds	r7, #48	@ 0x30
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	24000fdc 	.word	0x24000fdc

0800ae3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b088      	sub	sp, #32
 800ae40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae42:	e049      	b.n	800aed8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae44:	4b2e      	ldr	r3, [pc, #184]	@ (800af00 <prvSwitchTimerLists+0xc4>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae4e:	4b2c      	ldr	r3, [pc, #176]	@ (800af00 <prvSwitchTimerLists+0xc4>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	3304      	adds	r3, #4
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7fd fe79 	bl	8008b54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	6a1b      	ldr	r3, [r3, #32]
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae70:	f003 0304 	and.w	r3, r3, #4
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d02f      	beq.n	800aed8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	699b      	ldr	r3, [r3, #24]
 800ae7c:	693a      	ldr	r2, [r7, #16]
 800ae7e:	4413      	add	r3, r2
 800ae80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ae82:	68ba      	ldr	r2, [r7, #8]
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d90e      	bls.n	800aea8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	68ba      	ldr	r2, [r7, #8]
 800ae8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	68fa      	ldr	r2, [r7, #12]
 800ae94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae96:	4b1a      	ldr	r3, [pc, #104]	@ (800af00 <prvSwitchTimerLists+0xc4>)
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	3304      	adds	r3, #4
 800ae9e:	4619      	mov	r1, r3
 800aea0:	4610      	mov	r0, r2
 800aea2:	f7fd fe1e 	bl	8008ae2 <vListInsert>
 800aea6:	e017      	b.n	800aed8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aea8:	2300      	movs	r3, #0
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	2300      	movs	r3, #0
 800aeae:	693a      	ldr	r2, [r7, #16]
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f7ff fd58 	bl	800a968 <xTimerGenericCommand>
 800aeb8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d10b      	bne.n	800aed8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800aec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec4:	f383 8811 	msr	BASEPRI, r3
 800aec8:	f3bf 8f6f 	isb	sy
 800aecc:	f3bf 8f4f 	dsb	sy
 800aed0:	603b      	str	r3, [r7, #0]
}
 800aed2:	bf00      	nop
 800aed4:	bf00      	nop
 800aed6:	e7fd      	b.n	800aed4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aed8:	4b09      	ldr	r3, [pc, #36]	@ (800af00 <prvSwitchTimerLists+0xc4>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d1b0      	bne.n	800ae44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aee2:	4b07      	ldr	r3, [pc, #28]	@ (800af00 <prvSwitchTimerLists+0xc4>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aee8:	4b06      	ldr	r3, [pc, #24]	@ (800af04 <prvSwitchTimerLists+0xc8>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a04      	ldr	r2, [pc, #16]	@ (800af00 <prvSwitchTimerLists+0xc4>)
 800aeee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aef0:	4a04      	ldr	r2, [pc, #16]	@ (800af04 <prvSwitchTimerLists+0xc8>)
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	6013      	str	r3, [r2, #0]
}
 800aef6:	bf00      	nop
 800aef8:	3718      	adds	r7, #24
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	24000fd4 	.word	0x24000fd4
 800af04:	24000fd8 	.word	0x24000fd8

0800af08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800af0e:	f7fd ff7b 	bl	8008e08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800af12:	4b15      	ldr	r3, [pc, #84]	@ (800af68 <prvCheckForValidListAndQueue+0x60>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d120      	bne.n	800af5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800af1a:	4814      	ldr	r0, [pc, #80]	@ (800af6c <prvCheckForValidListAndQueue+0x64>)
 800af1c:	f7fd fd90 	bl	8008a40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800af20:	4813      	ldr	r0, [pc, #76]	@ (800af70 <prvCheckForValidListAndQueue+0x68>)
 800af22:	f7fd fd8d 	bl	8008a40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800af26:	4b13      	ldr	r3, [pc, #76]	@ (800af74 <prvCheckForValidListAndQueue+0x6c>)
 800af28:	4a10      	ldr	r2, [pc, #64]	@ (800af6c <prvCheckForValidListAndQueue+0x64>)
 800af2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800af2c:	4b12      	ldr	r3, [pc, #72]	@ (800af78 <prvCheckForValidListAndQueue+0x70>)
 800af2e:	4a10      	ldr	r2, [pc, #64]	@ (800af70 <prvCheckForValidListAndQueue+0x68>)
 800af30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800af32:	2300      	movs	r3, #0
 800af34:	9300      	str	r3, [sp, #0]
 800af36:	4b11      	ldr	r3, [pc, #68]	@ (800af7c <prvCheckForValidListAndQueue+0x74>)
 800af38:	4a11      	ldr	r2, [pc, #68]	@ (800af80 <prvCheckForValidListAndQueue+0x78>)
 800af3a:	2110      	movs	r1, #16
 800af3c:	200a      	movs	r0, #10
 800af3e:	f7fe f8ef 	bl	8009120 <xQueueGenericCreateStatic>
 800af42:	4603      	mov	r3, r0
 800af44:	4a08      	ldr	r2, [pc, #32]	@ (800af68 <prvCheckForValidListAndQueue+0x60>)
 800af46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800af48:	4b07      	ldr	r3, [pc, #28]	@ (800af68 <prvCheckForValidListAndQueue+0x60>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d005      	beq.n	800af5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800af50:	4b05      	ldr	r3, [pc, #20]	@ (800af68 <prvCheckForValidListAndQueue+0x60>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	490b      	ldr	r1, [pc, #44]	@ (800af84 <prvCheckForValidListAndQueue+0x7c>)
 800af56:	4618      	mov	r0, r3
 800af58:	f7fe fd14 	bl	8009984 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af5c:	f7fd ff86 	bl	8008e6c <vPortExitCritical>
}
 800af60:	bf00      	nop
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	24000fdc 	.word	0x24000fdc
 800af6c:	24000fac 	.word	0x24000fac
 800af70:	24000fc0 	.word	0x24000fc0
 800af74:	24000fd4 	.word	0x24000fd4
 800af78:	24000fd8 	.word	0x24000fd8
 800af7c:	24001088 	.word	0x24001088
 800af80:	24000fe8 	.word	0x24000fe8
 800af84:	0800bf6c 	.word	0x0800bf6c

0800af88 <std>:
 800af88:	2300      	movs	r3, #0
 800af8a:	b510      	push	{r4, lr}
 800af8c:	4604      	mov	r4, r0
 800af8e:	e9c0 3300 	strd	r3, r3, [r0]
 800af92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af96:	6083      	str	r3, [r0, #8]
 800af98:	8181      	strh	r1, [r0, #12]
 800af9a:	6643      	str	r3, [r0, #100]	@ 0x64
 800af9c:	81c2      	strh	r2, [r0, #14]
 800af9e:	6183      	str	r3, [r0, #24]
 800afa0:	4619      	mov	r1, r3
 800afa2:	2208      	movs	r2, #8
 800afa4:	305c      	adds	r0, #92	@ 0x5c
 800afa6:	f000 f9f9 	bl	800b39c <memset>
 800afaa:	4b0d      	ldr	r3, [pc, #52]	@ (800afe0 <std+0x58>)
 800afac:	6263      	str	r3, [r4, #36]	@ 0x24
 800afae:	4b0d      	ldr	r3, [pc, #52]	@ (800afe4 <std+0x5c>)
 800afb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800afb2:	4b0d      	ldr	r3, [pc, #52]	@ (800afe8 <std+0x60>)
 800afb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800afb6:	4b0d      	ldr	r3, [pc, #52]	@ (800afec <std+0x64>)
 800afb8:	6323      	str	r3, [r4, #48]	@ 0x30
 800afba:	4b0d      	ldr	r3, [pc, #52]	@ (800aff0 <std+0x68>)
 800afbc:	6224      	str	r4, [r4, #32]
 800afbe:	429c      	cmp	r4, r3
 800afc0:	d006      	beq.n	800afd0 <std+0x48>
 800afc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800afc6:	4294      	cmp	r4, r2
 800afc8:	d002      	beq.n	800afd0 <std+0x48>
 800afca:	33d0      	adds	r3, #208	@ 0xd0
 800afcc:	429c      	cmp	r4, r3
 800afce:	d105      	bne.n	800afdc <std+0x54>
 800afd0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800afd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afd8:	f000 ba58 	b.w	800b48c <__retarget_lock_init_recursive>
 800afdc:	bd10      	pop	{r4, pc}
 800afde:	bf00      	nop
 800afe0:	0800b1ed 	.word	0x0800b1ed
 800afe4:	0800b20f 	.word	0x0800b20f
 800afe8:	0800b247 	.word	0x0800b247
 800afec:	0800b26b 	.word	0x0800b26b
 800aff0:	240010d8 	.word	0x240010d8

0800aff4 <stdio_exit_handler>:
 800aff4:	4a02      	ldr	r2, [pc, #8]	@ (800b000 <stdio_exit_handler+0xc>)
 800aff6:	4903      	ldr	r1, [pc, #12]	@ (800b004 <stdio_exit_handler+0x10>)
 800aff8:	4803      	ldr	r0, [pc, #12]	@ (800b008 <stdio_exit_handler+0x14>)
 800affa:	f000 b869 	b.w	800b0d0 <_fwalk_sglue>
 800affe:	bf00      	nop
 800b000:	24000014 	.word	0x24000014
 800b004:	0800bd45 	.word	0x0800bd45
 800b008:	24000024 	.word	0x24000024

0800b00c <cleanup_stdio>:
 800b00c:	6841      	ldr	r1, [r0, #4]
 800b00e:	4b0c      	ldr	r3, [pc, #48]	@ (800b040 <cleanup_stdio+0x34>)
 800b010:	4299      	cmp	r1, r3
 800b012:	b510      	push	{r4, lr}
 800b014:	4604      	mov	r4, r0
 800b016:	d001      	beq.n	800b01c <cleanup_stdio+0x10>
 800b018:	f000 fe94 	bl	800bd44 <_fflush_r>
 800b01c:	68a1      	ldr	r1, [r4, #8]
 800b01e:	4b09      	ldr	r3, [pc, #36]	@ (800b044 <cleanup_stdio+0x38>)
 800b020:	4299      	cmp	r1, r3
 800b022:	d002      	beq.n	800b02a <cleanup_stdio+0x1e>
 800b024:	4620      	mov	r0, r4
 800b026:	f000 fe8d 	bl	800bd44 <_fflush_r>
 800b02a:	68e1      	ldr	r1, [r4, #12]
 800b02c:	4b06      	ldr	r3, [pc, #24]	@ (800b048 <cleanup_stdio+0x3c>)
 800b02e:	4299      	cmp	r1, r3
 800b030:	d004      	beq.n	800b03c <cleanup_stdio+0x30>
 800b032:	4620      	mov	r0, r4
 800b034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b038:	f000 be84 	b.w	800bd44 <_fflush_r>
 800b03c:	bd10      	pop	{r4, pc}
 800b03e:	bf00      	nop
 800b040:	240010d8 	.word	0x240010d8
 800b044:	24001140 	.word	0x24001140
 800b048:	240011a8 	.word	0x240011a8

0800b04c <global_stdio_init.part.0>:
 800b04c:	b510      	push	{r4, lr}
 800b04e:	4b0b      	ldr	r3, [pc, #44]	@ (800b07c <global_stdio_init.part.0+0x30>)
 800b050:	4c0b      	ldr	r4, [pc, #44]	@ (800b080 <global_stdio_init.part.0+0x34>)
 800b052:	4a0c      	ldr	r2, [pc, #48]	@ (800b084 <global_stdio_init.part.0+0x38>)
 800b054:	601a      	str	r2, [r3, #0]
 800b056:	4620      	mov	r0, r4
 800b058:	2200      	movs	r2, #0
 800b05a:	2104      	movs	r1, #4
 800b05c:	f7ff ff94 	bl	800af88 <std>
 800b060:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b064:	2201      	movs	r2, #1
 800b066:	2109      	movs	r1, #9
 800b068:	f7ff ff8e 	bl	800af88 <std>
 800b06c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b070:	2202      	movs	r2, #2
 800b072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b076:	2112      	movs	r1, #18
 800b078:	f7ff bf86 	b.w	800af88 <std>
 800b07c:	24001210 	.word	0x24001210
 800b080:	240010d8 	.word	0x240010d8
 800b084:	0800aff5 	.word	0x0800aff5

0800b088 <__sfp_lock_acquire>:
 800b088:	4801      	ldr	r0, [pc, #4]	@ (800b090 <__sfp_lock_acquire+0x8>)
 800b08a:	f000 ba00 	b.w	800b48e <__retarget_lock_acquire_recursive>
 800b08e:	bf00      	nop
 800b090:	24001219 	.word	0x24001219

0800b094 <__sfp_lock_release>:
 800b094:	4801      	ldr	r0, [pc, #4]	@ (800b09c <__sfp_lock_release+0x8>)
 800b096:	f000 b9fb 	b.w	800b490 <__retarget_lock_release_recursive>
 800b09a:	bf00      	nop
 800b09c:	24001219 	.word	0x24001219

0800b0a0 <__sinit>:
 800b0a0:	b510      	push	{r4, lr}
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	f7ff fff0 	bl	800b088 <__sfp_lock_acquire>
 800b0a8:	6a23      	ldr	r3, [r4, #32]
 800b0aa:	b11b      	cbz	r3, 800b0b4 <__sinit+0x14>
 800b0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0b0:	f7ff bff0 	b.w	800b094 <__sfp_lock_release>
 800b0b4:	4b04      	ldr	r3, [pc, #16]	@ (800b0c8 <__sinit+0x28>)
 800b0b6:	6223      	str	r3, [r4, #32]
 800b0b8:	4b04      	ldr	r3, [pc, #16]	@ (800b0cc <__sinit+0x2c>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1f5      	bne.n	800b0ac <__sinit+0xc>
 800b0c0:	f7ff ffc4 	bl	800b04c <global_stdio_init.part.0>
 800b0c4:	e7f2      	b.n	800b0ac <__sinit+0xc>
 800b0c6:	bf00      	nop
 800b0c8:	0800b00d 	.word	0x0800b00d
 800b0cc:	24001210 	.word	0x24001210

0800b0d0 <_fwalk_sglue>:
 800b0d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0d4:	4607      	mov	r7, r0
 800b0d6:	4688      	mov	r8, r1
 800b0d8:	4614      	mov	r4, r2
 800b0da:	2600      	movs	r6, #0
 800b0dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0e0:	f1b9 0901 	subs.w	r9, r9, #1
 800b0e4:	d505      	bpl.n	800b0f2 <_fwalk_sglue+0x22>
 800b0e6:	6824      	ldr	r4, [r4, #0]
 800b0e8:	2c00      	cmp	r4, #0
 800b0ea:	d1f7      	bne.n	800b0dc <_fwalk_sglue+0xc>
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0f2:	89ab      	ldrh	r3, [r5, #12]
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d907      	bls.n	800b108 <_fwalk_sglue+0x38>
 800b0f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	d003      	beq.n	800b108 <_fwalk_sglue+0x38>
 800b100:	4629      	mov	r1, r5
 800b102:	4638      	mov	r0, r7
 800b104:	47c0      	blx	r8
 800b106:	4306      	orrs	r6, r0
 800b108:	3568      	adds	r5, #104	@ 0x68
 800b10a:	e7e9      	b.n	800b0e0 <_fwalk_sglue+0x10>

0800b10c <iprintf>:
 800b10c:	b40f      	push	{r0, r1, r2, r3}
 800b10e:	b507      	push	{r0, r1, r2, lr}
 800b110:	4906      	ldr	r1, [pc, #24]	@ (800b12c <iprintf+0x20>)
 800b112:	ab04      	add	r3, sp, #16
 800b114:	6808      	ldr	r0, [r1, #0]
 800b116:	f853 2b04 	ldr.w	r2, [r3], #4
 800b11a:	6881      	ldr	r1, [r0, #8]
 800b11c:	9301      	str	r3, [sp, #4]
 800b11e:	f000 fae9 	bl	800b6f4 <_vfiprintf_r>
 800b122:	b003      	add	sp, #12
 800b124:	f85d eb04 	ldr.w	lr, [sp], #4
 800b128:	b004      	add	sp, #16
 800b12a:	4770      	bx	lr
 800b12c:	24000020 	.word	0x24000020

0800b130 <_puts_r>:
 800b130:	6a03      	ldr	r3, [r0, #32]
 800b132:	b570      	push	{r4, r5, r6, lr}
 800b134:	6884      	ldr	r4, [r0, #8]
 800b136:	4605      	mov	r5, r0
 800b138:	460e      	mov	r6, r1
 800b13a:	b90b      	cbnz	r3, 800b140 <_puts_r+0x10>
 800b13c:	f7ff ffb0 	bl	800b0a0 <__sinit>
 800b140:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b142:	07db      	lsls	r3, r3, #31
 800b144:	d405      	bmi.n	800b152 <_puts_r+0x22>
 800b146:	89a3      	ldrh	r3, [r4, #12]
 800b148:	0598      	lsls	r0, r3, #22
 800b14a:	d402      	bmi.n	800b152 <_puts_r+0x22>
 800b14c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b14e:	f000 f99e 	bl	800b48e <__retarget_lock_acquire_recursive>
 800b152:	89a3      	ldrh	r3, [r4, #12]
 800b154:	0719      	lsls	r1, r3, #28
 800b156:	d502      	bpl.n	800b15e <_puts_r+0x2e>
 800b158:	6923      	ldr	r3, [r4, #16]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d135      	bne.n	800b1ca <_puts_r+0x9a>
 800b15e:	4621      	mov	r1, r4
 800b160:	4628      	mov	r0, r5
 800b162:	f000 f8c5 	bl	800b2f0 <__swsetup_r>
 800b166:	b380      	cbz	r0, 800b1ca <_puts_r+0x9a>
 800b168:	f04f 35ff 	mov.w	r5, #4294967295
 800b16c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b16e:	07da      	lsls	r2, r3, #31
 800b170:	d405      	bmi.n	800b17e <_puts_r+0x4e>
 800b172:	89a3      	ldrh	r3, [r4, #12]
 800b174:	059b      	lsls	r3, r3, #22
 800b176:	d402      	bmi.n	800b17e <_puts_r+0x4e>
 800b178:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b17a:	f000 f989 	bl	800b490 <__retarget_lock_release_recursive>
 800b17e:	4628      	mov	r0, r5
 800b180:	bd70      	pop	{r4, r5, r6, pc}
 800b182:	2b00      	cmp	r3, #0
 800b184:	da04      	bge.n	800b190 <_puts_r+0x60>
 800b186:	69a2      	ldr	r2, [r4, #24]
 800b188:	429a      	cmp	r2, r3
 800b18a:	dc17      	bgt.n	800b1bc <_puts_r+0x8c>
 800b18c:	290a      	cmp	r1, #10
 800b18e:	d015      	beq.n	800b1bc <_puts_r+0x8c>
 800b190:	6823      	ldr	r3, [r4, #0]
 800b192:	1c5a      	adds	r2, r3, #1
 800b194:	6022      	str	r2, [r4, #0]
 800b196:	7019      	strb	r1, [r3, #0]
 800b198:	68a3      	ldr	r3, [r4, #8]
 800b19a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b19e:	3b01      	subs	r3, #1
 800b1a0:	60a3      	str	r3, [r4, #8]
 800b1a2:	2900      	cmp	r1, #0
 800b1a4:	d1ed      	bne.n	800b182 <_puts_r+0x52>
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	da11      	bge.n	800b1ce <_puts_r+0x9e>
 800b1aa:	4622      	mov	r2, r4
 800b1ac:	210a      	movs	r1, #10
 800b1ae:	4628      	mov	r0, r5
 800b1b0:	f000 f85f 	bl	800b272 <__swbuf_r>
 800b1b4:	3001      	adds	r0, #1
 800b1b6:	d0d7      	beq.n	800b168 <_puts_r+0x38>
 800b1b8:	250a      	movs	r5, #10
 800b1ba:	e7d7      	b.n	800b16c <_puts_r+0x3c>
 800b1bc:	4622      	mov	r2, r4
 800b1be:	4628      	mov	r0, r5
 800b1c0:	f000 f857 	bl	800b272 <__swbuf_r>
 800b1c4:	3001      	adds	r0, #1
 800b1c6:	d1e7      	bne.n	800b198 <_puts_r+0x68>
 800b1c8:	e7ce      	b.n	800b168 <_puts_r+0x38>
 800b1ca:	3e01      	subs	r6, #1
 800b1cc:	e7e4      	b.n	800b198 <_puts_r+0x68>
 800b1ce:	6823      	ldr	r3, [r4, #0]
 800b1d0:	1c5a      	adds	r2, r3, #1
 800b1d2:	6022      	str	r2, [r4, #0]
 800b1d4:	220a      	movs	r2, #10
 800b1d6:	701a      	strb	r2, [r3, #0]
 800b1d8:	e7ee      	b.n	800b1b8 <_puts_r+0x88>
	...

0800b1dc <puts>:
 800b1dc:	4b02      	ldr	r3, [pc, #8]	@ (800b1e8 <puts+0xc>)
 800b1de:	4601      	mov	r1, r0
 800b1e0:	6818      	ldr	r0, [r3, #0]
 800b1e2:	f7ff bfa5 	b.w	800b130 <_puts_r>
 800b1e6:	bf00      	nop
 800b1e8:	24000020 	.word	0x24000020

0800b1ec <__sread>:
 800b1ec:	b510      	push	{r4, lr}
 800b1ee:	460c      	mov	r4, r1
 800b1f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1f4:	f000 f8fc 	bl	800b3f0 <_read_r>
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	bfab      	itete	ge
 800b1fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b1fe:	89a3      	ldrhlt	r3, [r4, #12]
 800b200:	181b      	addge	r3, r3, r0
 800b202:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b206:	bfac      	ite	ge
 800b208:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b20a:	81a3      	strhlt	r3, [r4, #12]
 800b20c:	bd10      	pop	{r4, pc}

0800b20e <__swrite>:
 800b20e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b212:	461f      	mov	r7, r3
 800b214:	898b      	ldrh	r3, [r1, #12]
 800b216:	05db      	lsls	r3, r3, #23
 800b218:	4605      	mov	r5, r0
 800b21a:	460c      	mov	r4, r1
 800b21c:	4616      	mov	r6, r2
 800b21e:	d505      	bpl.n	800b22c <__swrite+0x1e>
 800b220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b224:	2302      	movs	r3, #2
 800b226:	2200      	movs	r2, #0
 800b228:	f000 f8d0 	bl	800b3cc <_lseek_r>
 800b22c:	89a3      	ldrh	r3, [r4, #12]
 800b22e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b232:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b236:	81a3      	strh	r3, [r4, #12]
 800b238:	4632      	mov	r2, r6
 800b23a:	463b      	mov	r3, r7
 800b23c:	4628      	mov	r0, r5
 800b23e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b242:	f000 b8e7 	b.w	800b414 <_write_r>

0800b246 <__sseek>:
 800b246:	b510      	push	{r4, lr}
 800b248:	460c      	mov	r4, r1
 800b24a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b24e:	f000 f8bd 	bl	800b3cc <_lseek_r>
 800b252:	1c43      	adds	r3, r0, #1
 800b254:	89a3      	ldrh	r3, [r4, #12]
 800b256:	bf15      	itete	ne
 800b258:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b25a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b25e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b262:	81a3      	strheq	r3, [r4, #12]
 800b264:	bf18      	it	ne
 800b266:	81a3      	strhne	r3, [r4, #12]
 800b268:	bd10      	pop	{r4, pc}

0800b26a <__sclose>:
 800b26a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b26e:	f000 b89d 	b.w	800b3ac <_close_r>

0800b272 <__swbuf_r>:
 800b272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b274:	460e      	mov	r6, r1
 800b276:	4614      	mov	r4, r2
 800b278:	4605      	mov	r5, r0
 800b27a:	b118      	cbz	r0, 800b284 <__swbuf_r+0x12>
 800b27c:	6a03      	ldr	r3, [r0, #32]
 800b27e:	b90b      	cbnz	r3, 800b284 <__swbuf_r+0x12>
 800b280:	f7ff ff0e 	bl	800b0a0 <__sinit>
 800b284:	69a3      	ldr	r3, [r4, #24]
 800b286:	60a3      	str	r3, [r4, #8]
 800b288:	89a3      	ldrh	r3, [r4, #12]
 800b28a:	071a      	lsls	r2, r3, #28
 800b28c:	d501      	bpl.n	800b292 <__swbuf_r+0x20>
 800b28e:	6923      	ldr	r3, [r4, #16]
 800b290:	b943      	cbnz	r3, 800b2a4 <__swbuf_r+0x32>
 800b292:	4621      	mov	r1, r4
 800b294:	4628      	mov	r0, r5
 800b296:	f000 f82b 	bl	800b2f0 <__swsetup_r>
 800b29a:	b118      	cbz	r0, 800b2a4 <__swbuf_r+0x32>
 800b29c:	f04f 37ff 	mov.w	r7, #4294967295
 800b2a0:	4638      	mov	r0, r7
 800b2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2a4:	6823      	ldr	r3, [r4, #0]
 800b2a6:	6922      	ldr	r2, [r4, #16]
 800b2a8:	1a98      	subs	r0, r3, r2
 800b2aa:	6963      	ldr	r3, [r4, #20]
 800b2ac:	b2f6      	uxtb	r6, r6
 800b2ae:	4283      	cmp	r3, r0
 800b2b0:	4637      	mov	r7, r6
 800b2b2:	dc05      	bgt.n	800b2c0 <__swbuf_r+0x4e>
 800b2b4:	4621      	mov	r1, r4
 800b2b6:	4628      	mov	r0, r5
 800b2b8:	f000 fd44 	bl	800bd44 <_fflush_r>
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	d1ed      	bne.n	800b29c <__swbuf_r+0x2a>
 800b2c0:	68a3      	ldr	r3, [r4, #8]
 800b2c2:	3b01      	subs	r3, #1
 800b2c4:	60a3      	str	r3, [r4, #8]
 800b2c6:	6823      	ldr	r3, [r4, #0]
 800b2c8:	1c5a      	adds	r2, r3, #1
 800b2ca:	6022      	str	r2, [r4, #0]
 800b2cc:	701e      	strb	r6, [r3, #0]
 800b2ce:	6962      	ldr	r2, [r4, #20]
 800b2d0:	1c43      	adds	r3, r0, #1
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d004      	beq.n	800b2e0 <__swbuf_r+0x6e>
 800b2d6:	89a3      	ldrh	r3, [r4, #12]
 800b2d8:	07db      	lsls	r3, r3, #31
 800b2da:	d5e1      	bpl.n	800b2a0 <__swbuf_r+0x2e>
 800b2dc:	2e0a      	cmp	r6, #10
 800b2de:	d1df      	bne.n	800b2a0 <__swbuf_r+0x2e>
 800b2e0:	4621      	mov	r1, r4
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	f000 fd2e 	bl	800bd44 <_fflush_r>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	d0d9      	beq.n	800b2a0 <__swbuf_r+0x2e>
 800b2ec:	e7d6      	b.n	800b29c <__swbuf_r+0x2a>
	...

0800b2f0 <__swsetup_r>:
 800b2f0:	b538      	push	{r3, r4, r5, lr}
 800b2f2:	4b29      	ldr	r3, [pc, #164]	@ (800b398 <__swsetup_r+0xa8>)
 800b2f4:	4605      	mov	r5, r0
 800b2f6:	6818      	ldr	r0, [r3, #0]
 800b2f8:	460c      	mov	r4, r1
 800b2fa:	b118      	cbz	r0, 800b304 <__swsetup_r+0x14>
 800b2fc:	6a03      	ldr	r3, [r0, #32]
 800b2fe:	b90b      	cbnz	r3, 800b304 <__swsetup_r+0x14>
 800b300:	f7ff fece 	bl	800b0a0 <__sinit>
 800b304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b308:	0719      	lsls	r1, r3, #28
 800b30a:	d422      	bmi.n	800b352 <__swsetup_r+0x62>
 800b30c:	06da      	lsls	r2, r3, #27
 800b30e:	d407      	bmi.n	800b320 <__swsetup_r+0x30>
 800b310:	2209      	movs	r2, #9
 800b312:	602a      	str	r2, [r5, #0]
 800b314:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b318:	81a3      	strh	r3, [r4, #12]
 800b31a:	f04f 30ff 	mov.w	r0, #4294967295
 800b31e:	e033      	b.n	800b388 <__swsetup_r+0x98>
 800b320:	0758      	lsls	r0, r3, #29
 800b322:	d512      	bpl.n	800b34a <__swsetup_r+0x5a>
 800b324:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b326:	b141      	cbz	r1, 800b33a <__swsetup_r+0x4a>
 800b328:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b32c:	4299      	cmp	r1, r3
 800b32e:	d002      	beq.n	800b336 <__swsetup_r+0x46>
 800b330:	4628      	mov	r0, r5
 800b332:	f000 f8bd 	bl	800b4b0 <_free_r>
 800b336:	2300      	movs	r3, #0
 800b338:	6363      	str	r3, [r4, #52]	@ 0x34
 800b33a:	89a3      	ldrh	r3, [r4, #12]
 800b33c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b340:	81a3      	strh	r3, [r4, #12]
 800b342:	2300      	movs	r3, #0
 800b344:	6063      	str	r3, [r4, #4]
 800b346:	6923      	ldr	r3, [r4, #16]
 800b348:	6023      	str	r3, [r4, #0]
 800b34a:	89a3      	ldrh	r3, [r4, #12]
 800b34c:	f043 0308 	orr.w	r3, r3, #8
 800b350:	81a3      	strh	r3, [r4, #12]
 800b352:	6923      	ldr	r3, [r4, #16]
 800b354:	b94b      	cbnz	r3, 800b36a <__swsetup_r+0x7a>
 800b356:	89a3      	ldrh	r3, [r4, #12]
 800b358:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b35c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b360:	d003      	beq.n	800b36a <__swsetup_r+0x7a>
 800b362:	4621      	mov	r1, r4
 800b364:	4628      	mov	r0, r5
 800b366:	f000 fd3b 	bl	800bde0 <__smakebuf_r>
 800b36a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b36e:	f013 0201 	ands.w	r2, r3, #1
 800b372:	d00a      	beq.n	800b38a <__swsetup_r+0x9a>
 800b374:	2200      	movs	r2, #0
 800b376:	60a2      	str	r2, [r4, #8]
 800b378:	6962      	ldr	r2, [r4, #20]
 800b37a:	4252      	negs	r2, r2
 800b37c:	61a2      	str	r2, [r4, #24]
 800b37e:	6922      	ldr	r2, [r4, #16]
 800b380:	b942      	cbnz	r2, 800b394 <__swsetup_r+0xa4>
 800b382:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b386:	d1c5      	bne.n	800b314 <__swsetup_r+0x24>
 800b388:	bd38      	pop	{r3, r4, r5, pc}
 800b38a:	0799      	lsls	r1, r3, #30
 800b38c:	bf58      	it	pl
 800b38e:	6962      	ldrpl	r2, [r4, #20]
 800b390:	60a2      	str	r2, [r4, #8]
 800b392:	e7f4      	b.n	800b37e <__swsetup_r+0x8e>
 800b394:	2000      	movs	r0, #0
 800b396:	e7f7      	b.n	800b388 <__swsetup_r+0x98>
 800b398:	24000020 	.word	0x24000020

0800b39c <memset>:
 800b39c:	4402      	add	r2, r0
 800b39e:	4603      	mov	r3, r0
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d100      	bne.n	800b3a6 <memset+0xa>
 800b3a4:	4770      	bx	lr
 800b3a6:	f803 1b01 	strb.w	r1, [r3], #1
 800b3aa:	e7f9      	b.n	800b3a0 <memset+0x4>

0800b3ac <_close_r>:
 800b3ac:	b538      	push	{r3, r4, r5, lr}
 800b3ae:	4d06      	ldr	r5, [pc, #24]	@ (800b3c8 <_close_r+0x1c>)
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	4604      	mov	r4, r0
 800b3b4:	4608      	mov	r0, r1
 800b3b6:	602b      	str	r3, [r5, #0]
 800b3b8:	f7f6 fe33 	bl	8002022 <_close>
 800b3bc:	1c43      	adds	r3, r0, #1
 800b3be:	d102      	bne.n	800b3c6 <_close_r+0x1a>
 800b3c0:	682b      	ldr	r3, [r5, #0]
 800b3c2:	b103      	cbz	r3, 800b3c6 <_close_r+0x1a>
 800b3c4:	6023      	str	r3, [r4, #0]
 800b3c6:	bd38      	pop	{r3, r4, r5, pc}
 800b3c8:	24001214 	.word	0x24001214

0800b3cc <_lseek_r>:
 800b3cc:	b538      	push	{r3, r4, r5, lr}
 800b3ce:	4d07      	ldr	r5, [pc, #28]	@ (800b3ec <_lseek_r+0x20>)
 800b3d0:	4604      	mov	r4, r0
 800b3d2:	4608      	mov	r0, r1
 800b3d4:	4611      	mov	r1, r2
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	602a      	str	r2, [r5, #0]
 800b3da:	461a      	mov	r2, r3
 800b3dc:	f7f6 fe48 	bl	8002070 <_lseek>
 800b3e0:	1c43      	adds	r3, r0, #1
 800b3e2:	d102      	bne.n	800b3ea <_lseek_r+0x1e>
 800b3e4:	682b      	ldr	r3, [r5, #0]
 800b3e6:	b103      	cbz	r3, 800b3ea <_lseek_r+0x1e>
 800b3e8:	6023      	str	r3, [r4, #0]
 800b3ea:	bd38      	pop	{r3, r4, r5, pc}
 800b3ec:	24001214 	.word	0x24001214

0800b3f0 <_read_r>:
 800b3f0:	b538      	push	{r3, r4, r5, lr}
 800b3f2:	4d07      	ldr	r5, [pc, #28]	@ (800b410 <_read_r+0x20>)
 800b3f4:	4604      	mov	r4, r0
 800b3f6:	4608      	mov	r0, r1
 800b3f8:	4611      	mov	r1, r2
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	602a      	str	r2, [r5, #0]
 800b3fe:	461a      	mov	r2, r3
 800b400:	f7f6 fdd6 	bl	8001fb0 <_read>
 800b404:	1c43      	adds	r3, r0, #1
 800b406:	d102      	bne.n	800b40e <_read_r+0x1e>
 800b408:	682b      	ldr	r3, [r5, #0]
 800b40a:	b103      	cbz	r3, 800b40e <_read_r+0x1e>
 800b40c:	6023      	str	r3, [r4, #0]
 800b40e:	bd38      	pop	{r3, r4, r5, pc}
 800b410:	24001214 	.word	0x24001214

0800b414 <_write_r>:
 800b414:	b538      	push	{r3, r4, r5, lr}
 800b416:	4d07      	ldr	r5, [pc, #28]	@ (800b434 <_write_r+0x20>)
 800b418:	4604      	mov	r4, r0
 800b41a:	4608      	mov	r0, r1
 800b41c:	4611      	mov	r1, r2
 800b41e:	2200      	movs	r2, #0
 800b420:	602a      	str	r2, [r5, #0]
 800b422:	461a      	mov	r2, r3
 800b424:	f7f6 fde1 	bl	8001fea <_write>
 800b428:	1c43      	adds	r3, r0, #1
 800b42a:	d102      	bne.n	800b432 <_write_r+0x1e>
 800b42c:	682b      	ldr	r3, [r5, #0]
 800b42e:	b103      	cbz	r3, 800b432 <_write_r+0x1e>
 800b430:	6023      	str	r3, [r4, #0]
 800b432:	bd38      	pop	{r3, r4, r5, pc}
 800b434:	24001214 	.word	0x24001214

0800b438 <__errno>:
 800b438:	4b01      	ldr	r3, [pc, #4]	@ (800b440 <__errno+0x8>)
 800b43a:	6818      	ldr	r0, [r3, #0]
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	24000020 	.word	0x24000020

0800b444 <__libc_init_array>:
 800b444:	b570      	push	{r4, r5, r6, lr}
 800b446:	4d0d      	ldr	r5, [pc, #52]	@ (800b47c <__libc_init_array+0x38>)
 800b448:	4c0d      	ldr	r4, [pc, #52]	@ (800b480 <__libc_init_array+0x3c>)
 800b44a:	1b64      	subs	r4, r4, r5
 800b44c:	10a4      	asrs	r4, r4, #2
 800b44e:	2600      	movs	r6, #0
 800b450:	42a6      	cmp	r6, r4
 800b452:	d109      	bne.n	800b468 <__libc_init_array+0x24>
 800b454:	4d0b      	ldr	r5, [pc, #44]	@ (800b484 <__libc_init_array+0x40>)
 800b456:	4c0c      	ldr	r4, [pc, #48]	@ (800b488 <__libc_init_array+0x44>)
 800b458:	f000 fd30 	bl	800bebc <_init>
 800b45c:	1b64      	subs	r4, r4, r5
 800b45e:	10a4      	asrs	r4, r4, #2
 800b460:	2600      	movs	r6, #0
 800b462:	42a6      	cmp	r6, r4
 800b464:	d105      	bne.n	800b472 <__libc_init_array+0x2e>
 800b466:	bd70      	pop	{r4, r5, r6, pc}
 800b468:	f855 3b04 	ldr.w	r3, [r5], #4
 800b46c:	4798      	blx	r3
 800b46e:	3601      	adds	r6, #1
 800b470:	e7ee      	b.n	800b450 <__libc_init_array+0xc>
 800b472:	f855 3b04 	ldr.w	r3, [r5], #4
 800b476:	4798      	blx	r3
 800b478:	3601      	adds	r6, #1
 800b47a:	e7f2      	b.n	800b462 <__libc_init_array+0x1e>
 800b47c:	0800dfec 	.word	0x0800dfec
 800b480:	0800dfec 	.word	0x0800dfec
 800b484:	0800dfec 	.word	0x0800dfec
 800b488:	0800dff0 	.word	0x0800dff0

0800b48c <__retarget_lock_init_recursive>:
 800b48c:	4770      	bx	lr

0800b48e <__retarget_lock_acquire_recursive>:
 800b48e:	4770      	bx	lr

0800b490 <__retarget_lock_release_recursive>:
 800b490:	4770      	bx	lr

0800b492 <memcpy>:
 800b492:	440a      	add	r2, r1
 800b494:	4291      	cmp	r1, r2
 800b496:	f100 33ff 	add.w	r3, r0, #4294967295
 800b49a:	d100      	bne.n	800b49e <memcpy+0xc>
 800b49c:	4770      	bx	lr
 800b49e:	b510      	push	{r4, lr}
 800b4a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4a8:	4291      	cmp	r1, r2
 800b4aa:	d1f9      	bne.n	800b4a0 <memcpy+0xe>
 800b4ac:	bd10      	pop	{r4, pc}
	...

0800b4b0 <_free_r>:
 800b4b0:	b538      	push	{r3, r4, r5, lr}
 800b4b2:	4605      	mov	r5, r0
 800b4b4:	2900      	cmp	r1, #0
 800b4b6:	d041      	beq.n	800b53c <_free_r+0x8c>
 800b4b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4bc:	1f0c      	subs	r4, r1, #4
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	bfb8      	it	lt
 800b4c2:	18e4      	addlt	r4, r4, r3
 800b4c4:	f000 f8e0 	bl	800b688 <__malloc_lock>
 800b4c8:	4a1d      	ldr	r2, [pc, #116]	@ (800b540 <_free_r+0x90>)
 800b4ca:	6813      	ldr	r3, [r2, #0]
 800b4cc:	b933      	cbnz	r3, 800b4dc <_free_r+0x2c>
 800b4ce:	6063      	str	r3, [r4, #4]
 800b4d0:	6014      	str	r4, [r2, #0]
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4d8:	f000 b8dc 	b.w	800b694 <__malloc_unlock>
 800b4dc:	42a3      	cmp	r3, r4
 800b4de:	d908      	bls.n	800b4f2 <_free_r+0x42>
 800b4e0:	6820      	ldr	r0, [r4, #0]
 800b4e2:	1821      	adds	r1, r4, r0
 800b4e4:	428b      	cmp	r3, r1
 800b4e6:	bf01      	itttt	eq
 800b4e8:	6819      	ldreq	r1, [r3, #0]
 800b4ea:	685b      	ldreq	r3, [r3, #4]
 800b4ec:	1809      	addeq	r1, r1, r0
 800b4ee:	6021      	streq	r1, [r4, #0]
 800b4f0:	e7ed      	b.n	800b4ce <_free_r+0x1e>
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	b10b      	cbz	r3, 800b4fc <_free_r+0x4c>
 800b4f8:	42a3      	cmp	r3, r4
 800b4fa:	d9fa      	bls.n	800b4f2 <_free_r+0x42>
 800b4fc:	6811      	ldr	r1, [r2, #0]
 800b4fe:	1850      	adds	r0, r2, r1
 800b500:	42a0      	cmp	r0, r4
 800b502:	d10b      	bne.n	800b51c <_free_r+0x6c>
 800b504:	6820      	ldr	r0, [r4, #0]
 800b506:	4401      	add	r1, r0
 800b508:	1850      	adds	r0, r2, r1
 800b50a:	4283      	cmp	r3, r0
 800b50c:	6011      	str	r1, [r2, #0]
 800b50e:	d1e0      	bne.n	800b4d2 <_free_r+0x22>
 800b510:	6818      	ldr	r0, [r3, #0]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	6053      	str	r3, [r2, #4]
 800b516:	4408      	add	r0, r1
 800b518:	6010      	str	r0, [r2, #0]
 800b51a:	e7da      	b.n	800b4d2 <_free_r+0x22>
 800b51c:	d902      	bls.n	800b524 <_free_r+0x74>
 800b51e:	230c      	movs	r3, #12
 800b520:	602b      	str	r3, [r5, #0]
 800b522:	e7d6      	b.n	800b4d2 <_free_r+0x22>
 800b524:	6820      	ldr	r0, [r4, #0]
 800b526:	1821      	adds	r1, r4, r0
 800b528:	428b      	cmp	r3, r1
 800b52a:	bf04      	itt	eq
 800b52c:	6819      	ldreq	r1, [r3, #0]
 800b52e:	685b      	ldreq	r3, [r3, #4]
 800b530:	6063      	str	r3, [r4, #4]
 800b532:	bf04      	itt	eq
 800b534:	1809      	addeq	r1, r1, r0
 800b536:	6021      	streq	r1, [r4, #0]
 800b538:	6054      	str	r4, [r2, #4]
 800b53a:	e7ca      	b.n	800b4d2 <_free_r+0x22>
 800b53c:	bd38      	pop	{r3, r4, r5, pc}
 800b53e:	bf00      	nop
 800b540:	24001220 	.word	0x24001220

0800b544 <sbrk_aligned>:
 800b544:	b570      	push	{r4, r5, r6, lr}
 800b546:	4e0f      	ldr	r6, [pc, #60]	@ (800b584 <sbrk_aligned+0x40>)
 800b548:	460c      	mov	r4, r1
 800b54a:	6831      	ldr	r1, [r6, #0]
 800b54c:	4605      	mov	r5, r0
 800b54e:	b911      	cbnz	r1, 800b556 <sbrk_aligned+0x12>
 800b550:	f000 fca4 	bl	800be9c <_sbrk_r>
 800b554:	6030      	str	r0, [r6, #0]
 800b556:	4621      	mov	r1, r4
 800b558:	4628      	mov	r0, r5
 800b55a:	f000 fc9f 	bl	800be9c <_sbrk_r>
 800b55e:	1c43      	adds	r3, r0, #1
 800b560:	d103      	bne.n	800b56a <sbrk_aligned+0x26>
 800b562:	f04f 34ff 	mov.w	r4, #4294967295
 800b566:	4620      	mov	r0, r4
 800b568:	bd70      	pop	{r4, r5, r6, pc}
 800b56a:	1cc4      	adds	r4, r0, #3
 800b56c:	f024 0403 	bic.w	r4, r4, #3
 800b570:	42a0      	cmp	r0, r4
 800b572:	d0f8      	beq.n	800b566 <sbrk_aligned+0x22>
 800b574:	1a21      	subs	r1, r4, r0
 800b576:	4628      	mov	r0, r5
 800b578:	f000 fc90 	bl	800be9c <_sbrk_r>
 800b57c:	3001      	adds	r0, #1
 800b57e:	d1f2      	bne.n	800b566 <sbrk_aligned+0x22>
 800b580:	e7ef      	b.n	800b562 <sbrk_aligned+0x1e>
 800b582:	bf00      	nop
 800b584:	2400121c 	.word	0x2400121c

0800b588 <_malloc_r>:
 800b588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b58c:	1ccd      	adds	r5, r1, #3
 800b58e:	f025 0503 	bic.w	r5, r5, #3
 800b592:	3508      	adds	r5, #8
 800b594:	2d0c      	cmp	r5, #12
 800b596:	bf38      	it	cc
 800b598:	250c      	movcc	r5, #12
 800b59a:	2d00      	cmp	r5, #0
 800b59c:	4606      	mov	r6, r0
 800b59e:	db01      	blt.n	800b5a4 <_malloc_r+0x1c>
 800b5a0:	42a9      	cmp	r1, r5
 800b5a2:	d904      	bls.n	800b5ae <_malloc_r+0x26>
 800b5a4:	230c      	movs	r3, #12
 800b5a6:	6033      	str	r3, [r6, #0]
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b684 <_malloc_r+0xfc>
 800b5b2:	f000 f869 	bl	800b688 <__malloc_lock>
 800b5b6:	f8d8 3000 	ldr.w	r3, [r8]
 800b5ba:	461c      	mov	r4, r3
 800b5bc:	bb44      	cbnz	r4, 800b610 <_malloc_r+0x88>
 800b5be:	4629      	mov	r1, r5
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	f7ff ffbf 	bl	800b544 <sbrk_aligned>
 800b5c6:	1c43      	adds	r3, r0, #1
 800b5c8:	4604      	mov	r4, r0
 800b5ca:	d158      	bne.n	800b67e <_malloc_r+0xf6>
 800b5cc:	f8d8 4000 	ldr.w	r4, [r8]
 800b5d0:	4627      	mov	r7, r4
 800b5d2:	2f00      	cmp	r7, #0
 800b5d4:	d143      	bne.n	800b65e <_malloc_r+0xd6>
 800b5d6:	2c00      	cmp	r4, #0
 800b5d8:	d04b      	beq.n	800b672 <_malloc_r+0xea>
 800b5da:	6823      	ldr	r3, [r4, #0]
 800b5dc:	4639      	mov	r1, r7
 800b5de:	4630      	mov	r0, r6
 800b5e0:	eb04 0903 	add.w	r9, r4, r3
 800b5e4:	f000 fc5a 	bl	800be9c <_sbrk_r>
 800b5e8:	4581      	cmp	r9, r0
 800b5ea:	d142      	bne.n	800b672 <_malloc_r+0xea>
 800b5ec:	6821      	ldr	r1, [r4, #0]
 800b5ee:	1a6d      	subs	r5, r5, r1
 800b5f0:	4629      	mov	r1, r5
 800b5f2:	4630      	mov	r0, r6
 800b5f4:	f7ff ffa6 	bl	800b544 <sbrk_aligned>
 800b5f8:	3001      	adds	r0, #1
 800b5fa:	d03a      	beq.n	800b672 <_malloc_r+0xea>
 800b5fc:	6823      	ldr	r3, [r4, #0]
 800b5fe:	442b      	add	r3, r5
 800b600:	6023      	str	r3, [r4, #0]
 800b602:	f8d8 3000 	ldr.w	r3, [r8]
 800b606:	685a      	ldr	r2, [r3, #4]
 800b608:	bb62      	cbnz	r2, 800b664 <_malloc_r+0xdc>
 800b60a:	f8c8 7000 	str.w	r7, [r8]
 800b60e:	e00f      	b.n	800b630 <_malloc_r+0xa8>
 800b610:	6822      	ldr	r2, [r4, #0]
 800b612:	1b52      	subs	r2, r2, r5
 800b614:	d420      	bmi.n	800b658 <_malloc_r+0xd0>
 800b616:	2a0b      	cmp	r2, #11
 800b618:	d917      	bls.n	800b64a <_malloc_r+0xc2>
 800b61a:	1961      	adds	r1, r4, r5
 800b61c:	42a3      	cmp	r3, r4
 800b61e:	6025      	str	r5, [r4, #0]
 800b620:	bf18      	it	ne
 800b622:	6059      	strne	r1, [r3, #4]
 800b624:	6863      	ldr	r3, [r4, #4]
 800b626:	bf08      	it	eq
 800b628:	f8c8 1000 	streq.w	r1, [r8]
 800b62c:	5162      	str	r2, [r4, r5]
 800b62e:	604b      	str	r3, [r1, #4]
 800b630:	4630      	mov	r0, r6
 800b632:	f000 f82f 	bl	800b694 <__malloc_unlock>
 800b636:	f104 000b 	add.w	r0, r4, #11
 800b63a:	1d23      	adds	r3, r4, #4
 800b63c:	f020 0007 	bic.w	r0, r0, #7
 800b640:	1ac2      	subs	r2, r0, r3
 800b642:	bf1c      	itt	ne
 800b644:	1a1b      	subne	r3, r3, r0
 800b646:	50a3      	strne	r3, [r4, r2]
 800b648:	e7af      	b.n	800b5aa <_malloc_r+0x22>
 800b64a:	6862      	ldr	r2, [r4, #4]
 800b64c:	42a3      	cmp	r3, r4
 800b64e:	bf0c      	ite	eq
 800b650:	f8c8 2000 	streq.w	r2, [r8]
 800b654:	605a      	strne	r2, [r3, #4]
 800b656:	e7eb      	b.n	800b630 <_malloc_r+0xa8>
 800b658:	4623      	mov	r3, r4
 800b65a:	6864      	ldr	r4, [r4, #4]
 800b65c:	e7ae      	b.n	800b5bc <_malloc_r+0x34>
 800b65e:	463c      	mov	r4, r7
 800b660:	687f      	ldr	r7, [r7, #4]
 800b662:	e7b6      	b.n	800b5d2 <_malloc_r+0x4a>
 800b664:	461a      	mov	r2, r3
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	42a3      	cmp	r3, r4
 800b66a:	d1fb      	bne.n	800b664 <_malloc_r+0xdc>
 800b66c:	2300      	movs	r3, #0
 800b66e:	6053      	str	r3, [r2, #4]
 800b670:	e7de      	b.n	800b630 <_malloc_r+0xa8>
 800b672:	230c      	movs	r3, #12
 800b674:	6033      	str	r3, [r6, #0]
 800b676:	4630      	mov	r0, r6
 800b678:	f000 f80c 	bl	800b694 <__malloc_unlock>
 800b67c:	e794      	b.n	800b5a8 <_malloc_r+0x20>
 800b67e:	6005      	str	r5, [r0, #0]
 800b680:	e7d6      	b.n	800b630 <_malloc_r+0xa8>
 800b682:	bf00      	nop
 800b684:	24001220 	.word	0x24001220

0800b688 <__malloc_lock>:
 800b688:	4801      	ldr	r0, [pc, #4]	@ (800b690 <__malloc_lock+0x8>)
 800b68a:	f7ff bf00 	b.w	800b48e <__retarget_lock_acquire_recursive>
 800b68e:	bf00      	nop
 800b690:	24001218 	.word	0x24001218

0800b694 <__malloc_unlock>:
 800b694:	4801      	ldr	r0, [pc, #4]	@ (800b69c <__malloc_unlock+0x8>)
 800b696:	f7ff befb 	b.w	800b490 <__retarget_lock_release_recursive>
 800b69a:	bf00      	nop
 800b69c:	24001218 	.word	0x24001218

0800b6a0 <__sfputc_r>:
 800b6a0:	6893      	ldr	r3, [r2, #8]
 800b6a2:	3b01      	subs	r3, #1
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	b410      	push	{r4}
 800b6a8:	6093      	str	r3, [r2, #8]
 800b6aa:	da08      	bge.n	800b6be <__sfputc_r+0x1e>
 800b6ac:	6994      	ldr	r4, [r2, #24]
 800b6ae:	42a3      	cmp	r3, r4
 800b6b0:	db01      	blt.n	800b6b6 <__sfputc_r+0x16>
 800b6b2:	290a      	cmp	r1, #10
 800b6b4:	d103      	bne.n	800b6be <__sfputc_r+0x1e>
 800b6b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6ba:	f7ff bdda 	b.w	800b272 <__swbuf_r>
 800b6be:	6813      	ldr	r3, [r2, #0]
 800b6c0:	1c58      	adds	r0, r3, #1
 800b6c2:	6010      	str	r0, [r2, #0]
 800b6c4:	7019      	strb	r1, [r3, #0]
 800b6c6:	4608      	mov	r0, r1
 800b6c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6cc:	4770      	bx	lr

0800b6ce <__sfputs_r>:
 800b6ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d0:	4606      	mov	r6, r0
 800b6d2:	460f      	mov	r7, r1
 800b6d4:	4614      	mov	r4, r2
 800b6d6:	18d5      	adds	r5, r2, r3
 800b6d8:	42ac      	cmp	r4, r5
 800b6da:	d101      	bne.n	800b6e0 <__sfputs_r+0x12>
 800b6dc:	2000      	movs	r0, #0
 800b6de:	e007      	b.n	800b6f0 <__sfputs_r+0x22>
 800b6e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6e4:	463a      	mov	r2, r7
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	f7ff ffda 	bl	800b6a0 <__sfputc_r>
 800b6ec:	1c43      	adds	r3, r0, #1
 800b6ee:	d1f3      	bne.n	800b6d8 <__sfputs_r+0xa>
 800b6f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b6f4 <_vfiprintf_r>:
 800b6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f8:	460d      	mov	r5, r1
 800b6fa:	b09d      	sub	sp, #116	@ 0x74
 800b6fc:	4614      	mov	r4, r2
 800b6fe:	4698      	mov	r8, r3
 800b700:	4606      	mov	r6, r0
 800b702:	b118      	cbz	r0, 800b70c <_vfiprintf_r+0x18>
 800b704:	6a03      	ldr	r3, [r0, #32]
 800b706:	b90b      	cbnz	r3, 800b70c <_vfiprintf_r+0x18>
 800b708:	f7ff fcca 	bl	800b0a0 <__sinit>
 800b70c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b70e:	07d9      	lsls	r1, r3, #31
 800b710:	d405      	bmi.n	800b71e <_vfiprintf_r+0x2a>
 800b712:	89ab      	ldrh	r3, [r5, #12]
 800b714:	059a      	lsls	r2, r3, #22
 800b716:	d402      	bmi.n	800b71e <_vfiprintf_r+0x2a>
 800b718:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b71a:	f7ff feb8 	bl	800b48e <__retarget_lock_acquire_recursive>
 800b71e:	89ab      	ldrh	r3, [r5, #12]
 800b720:	071b      	lsls	r3, r3, #28
 800b722:	d501      	bpl.n	800b728 <_vfiprintf_r+0x34>
 800b724:	692b      	ldr	r3, [r5, #16]
 800b726:	b99b      	cbnz	r3, 800b750 <_vfiprintf_r+0x5c>
 800b728:	4629      	mov	r1, r5
 800b72a:	4630      	mov	r0, r6
 800b72c:	f7ff fde0 	bl	800b2f0 <__swsetup_r>
 800b730:	b170      	cbz	r0, 800b750 <_vfiprintf_r+0x5c>
 800b732:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b734:	07dc      	lsls	r4, r3, #31
 800b736:	d504      	bpl.n	800b742 <_vfiprintf_r+0x4e>
 800b738:	f04f 30ff 	mov.w	r0, #4294967295
 800b73c:	b01d      	add	sp, #116	@ 0x74
 800b73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b742:	89ab      	ldrh	r3, [r5, #12]
 800b744:	0598      	lsls	r0, r3, #22
 800b746:	d4f7      	bmi.n	800b738 <_vfiprintf_r+0x44>
 800b748:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b74a:	f7ff fea1 	bl	800b490 <__retarget_lock_release_recursive>
 800b74e:	e7f3      	b.n	800b738 <_vfiprintf_r+0x44>
 800b750:	2300      	movs	r3, #0
 800b752:	9309      	str	r3, [sp, #36]	@ 0x24
 800b754:	2320      	movs	r3, #32
 800b756:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b75a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b75e:	2330      	movs	r3, #48	@ 0x30
 800b760:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b910 <_vfiprintf_r+0x21c>
 800b764:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b768:	f04f 0901 	mov.w	r9, #1
 800b76c:	4623      	mov	r3, r4
 800b76e:	469a      	mov	sl, r3
 800b770:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b774:	b10a      	cbz	r2, 800b77a <_vfiprintf_r+0x86>
 800b776:	2a25      	cmp	r2, #37	@ 0x25
 800b778:	d1f9      	bne.n	800b76e <_vfiprintf_r+0x7a>
 800b77a:	ebba 0b04 	subs.w	fp, sl, r4
 800b77e:	d00b      	beq.n	800b798 <_vfiprintf_r+0xa4>
 800b780:	465b      	mov	r3, fp
 800b782:	4622      	mov	r2, r4
 800b784:	4629      	mov	r1, r5
 800b786:	4630      	mov	r0, r6
 800b788:	f7ff ffa1 	bl	800b6ce <__sfputs_r>
 800b78c:	3001      	adds	r0, #1
 800b78e:	f000 80a7 	beq.w	800b8e0 <_vfiprintf_r+0x1ec>
 800b792:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b794:	445a      	add	r2, fp
 800b796:	9209      	str	r2, [sp, #36]	@ 0x24
 800b798:	f89a 3000 	ldrb.w	r3, [sl]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	f000 809f 	beq.w	800b8e0 <_vfiprintf_r+0x1ec>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b7a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7ac:	f10a 0a01 	add.w	sl, sl, #1
 800b7b0:	9304      	str	r3, [sp, #16]
 800b7b2:	9307      	str	r3, [sp, #28]
 800b7b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b7b8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7ba:	4654      	mov	r4, sl
 800b7bc:	2205      	movs	r2, #5
 800b7be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7c2:	4853      	ldr	r0, [pc, #332]	@ (800b910 <_vfiprintf_r+0x21c>)
 800b7c4:	f7f4 fd8c 	bl	80002e0 <memchr>
 800b7c8:	9a04      	ldr	r2, [sp, #16]
 800b7ca:	b9d8      	cbnz	r0, 800b804 <_vfiprintf_r+0x110>
 800b7cc:	06d1      	lsls	r1, r2, #27
 800b7ce:	bf44      	itt	mi
 800b7d0:	2320      	movmi	r3, #32
 800b7d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7d6:	0713      	lsls	r3, r2, #28
 800b7d8:	bf44      	itt	mi
 800b7da:	232b      	movmi	r3, #43	@ 0x2b
 800b7dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7e0:	f89a 3000 	ldrb.w	r3, [sl]
 800b7e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7e6:	d015      	beq.n	800b814 <_vfiprintf_r+0x120>
 800b7e8:	9a07      	ldr	r2, [sp, #28]
 800b7ea:	4654      	mov	r4, sl
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	f04f 0c0a 	mov.w	ip, #10
 800b7f2:	4621      	mov	r1, r4
 800b7f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7f8:	3b30      	subs	r3, #48	@ 0x30
 800b7fa:	2b09      	cmp	r3, #9
 800b7fc:	d94b      	bls.n	800b896 <_vfiprintf_r+0x1a2>
 800b7fe:	b1b0      	cbz	r0, 800b82e <_vfiprintf_r+0x13a>
 800b800:	9207      	str	r2, [sp, #28]
 800b802:	e014      	b.n	800b82e <_vfiprintf_r+0x13a>
 800b804:	eba0 0308 	sub.w	r3, r0, r8
 800b808:	fa09 f303 	lsl.w	r3, r9, r3
 800b80c:	4313      	orrs	r3, r2
 800b80e:	9304      	str	r3, [sp, #16]
 800b810:	46a2      	mov	sl, r4
 800b812:	e7d2      	b.n	800b7ba <_vfiprintf_r+0xc6>
 800b814:	9b03      	ldr	r3, [sp, #12]
 800b816:	1d19      	adds	r1, r3, #4
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	9103      	str	r1, [sp, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	bfbb      	ittet	lt
 800b820:	425b      	neglt	r3, r3
 800b822:	f042 0202 	orrlt.w	r2, r2, #2
 800b826:	9307      	strge	r3, [sp, #28]
 800b828:	9307      	strlt	r3, [sp, #28]
 800b82a:	bfb8      	it	lt
 800b82c:	9204      	strlt	r2, [sp, #16]
 800b82e:	7823      	ldrb	r3, [r4, #0]
 800b830:	2b2e      	cmp	r3, #46	@ 0x2e
 800b832:	d10a      	bne.n	800b84a <_vfiprintf_r+0x156>
 800b834:	7863      	ldrb	r3, [r4, #1]
 800b836:	2b2a      	cmp	r3, #42	@ 0x2a
 800b838:	d132      	bne.n	800b8a0 <_vfiprintf_r+0x1ac>
 800b83a:	9b03      	ldr	r3, [sp, #12]
 800b83c:	1d1a      	adds	r2, r3, #4
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	9203      	str	r2, [sp, #12]
 800b842:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b846:	3402      	adds	r4, #2
 800b848:	9305      	str	r3, [sp, #20]
 800b84a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b920 <_vfiprintf_r+0x22c>
 800b84e:	7821      	ldrb	r1, [r4, #0]
 800b850:	2203      	movs	r2, #3
 800b852:	4650      	mov	r0, sl
 800b854:	f7f4 fd44 	bl	80002e0 <memchr>
 800b858:	b138      	cbz	r0, 800b86a <_vfiprintf_r+0x176>
 800b85a:	9b04      	ldr	r3, [sp, #16]
 800b85c:	eba0 000a 	sub.w	r0, r0, sl
 800b860:	2240      	movs	r2, #64	@ 0x40
 800b862:	4082      	lsls	r2, r0
 800b864:	4313      	orrs	r3, r2
 800b866:	3401      	adds	r4, #1
 800b868:	9304      	str	r3, [sp, #16]
 800b86a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b86e:	4829      	ldr	r0, [pc, #164]	@ (800b914 <_vfiprintf_r+0x220>)
 800b870:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b874:	2206      	movs	r2, #6
 800b876:	f7f4 fd33 	bl	80002e0 <memchr>
 800b87a:	2800      	cmp	r0, #0
 800b87c:	d03f      	beq.n	800b8fe <_vfiprintf_r+0x20a>
 800b87e:	4b26      	ldr	r3, [pc, #152]	@ (800b918 <_vfiprintf_r+0x224>)
 800b880:	bb1b      	cbnz	r3, 800b8ca <_vfiprintf_r+0x1d6>
 800b882:	9b03      	ldr	r3, [sp, #12]
 800b884:	3307      	adds	r3, #7
 800b886:	f023 0307 	bic.w	r3, r3, #7
 800b88a:	3308      	adds	r3, #8
 800b88c:	9303      	str	r3, [sp, #12]
 800b88e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b890:	443b      	add	r3, r7
 800b892:	9309      	str	r3, [sp, #36]	@ 0x24
 800b894:	e76a      	b.n	800b76c <_vfiprintf_r+0x78>
 800b896:	fb0c 3202 	mla	r2, ip, r2, r3
 800b89a:	460c      	mov	r4, r1
 800b89c:	2001      	movs	r0, #1
 800b89e:	e7a8      	b.n	800b7f2 <_vfiprintf_r+0xfe>
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	3401      	adds	r4, #1
 800b8a4:	9305      	str	r3, [sp, #20]
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	f04f 0c0a 	mov.w	ip, #10
 800b8ac:	4620      	mov	r0, r4
 800b8ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8b2:	3a30      	subs	r2, #48	@ 0x30
 800b8b4:	2a09      	cmp	r2, #9
 800b8b6:	d903      	bls.n	800b8c0 <_vfiprintf_r+0x1cc>
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d0c6      	beq.n	800b84a <_vfiprintf_r+0x156>
 800b8bc:	9105      	str	r1, [sp, #20]
 800b8be:	e7c4      	b.n	800b84a <_vfiprintf_r+0x156>
 800b8c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e7f0      	b.n	800b8ac <_vfiprintf_r+0x1b8>
 800b8ca:	ab03      	add	r3, sp, #12
 800b8cc:	9300      	str	r3, [sp, #0]
 800b8ce:	462a      	mov	r2, r5
 800b8d0:	4b12      	ldr	r3, [pc, #72]	@ (800b91c <_vfiprintf_r+0x228>)
 800b8d2:	a904      	add	r1, sp, #16
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	f3af 8000 	nop.w
 800b8da:	4607      	mov	r7, r0
 800b8dc:	1c78      	adds	r0, r7, #1
 800b8de:	d1d6      	bne.n	800b88e <_vfiprintf_r+0x19a>
 800b8e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8e2:	07d9      	lsls	r1, r3, #31
 800b8e4:	d405      	bmi.n	800b8f2 <_vfiprintf_r+0x1fe>
 800b8e6:	89ab      	ldrh	r3, [r5, #12]
 800b8e8:	059a      	lsls	r2, r3, #22
 800b8ea:	d402      	bmi.n	800b8f2 <_vfiprintf_r+0x1fe>
 800b8ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8ee:	f7ff fdcf 	bl	800b490 <__retarget_lock_release_recursive>
 800b8f2:	89ab      	ldrh	r3, [r5, #12]
 800b8f4:	065b      	lsls	r3, r3, #25
 800b8f6:	f53f af1f 	bmi.w	800b738 <_vfiprintf_r+0x44>
 800b8fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b8fc:	e71e      	b.n	800b73c <_vfiprintf_r+0x48>
 800b8fe:	ab03      	add	r3, sp, #12
 800b900:	9300      	str	r3, [sp, #0]
 800b902:	462a      	mov	r2, r5
 800b904:	4b05      	ldr	r3, [pc, #20]	@ (800b91c <_vfiprintf_r+0x228>)
 800b906:	a904      	add	r1, sp, #16
 800b908:	4630      	mov	r0, r6
 800b90a:	f000 f879 	bl	800ba00 <_printf_i>
 800b90e:	e7e4      	b.n	800b8da <_vfiprintf_r+0x1e6>
 800b910:	0800dfb0 	.word	0x0800dfb0
 800b914:	0800dfba 	.word	0x0800dfba
 800b918:	00000000 	.word	0x00000000
 800b91c:	0800b6cf 	.word	0x0800b6cf
 800b920:	0800dfb6 	.word	0x0800dfb6

0800b924 <_printf_common>:
 800b924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b928:	4616      	mov	r6, r2
 800b92a:	4698      	mov	r8, r3
 800b92c:	688a      	ldr	r2, [r1, #8]
 800b92e:	690b      	ldr	r3, [r1, #16]
 800b930:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b934:	4293      	cmp	r3, r2
 800b936:	bfb8      	it	lt
 800b938:	4613      	movlt	r3, r2
 800b93a:	6033      	str	r3, [r6, #0]
 800b93c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b940:	4607      	mov	r7, r0
 800b942:	460c      	mov	r4, r1
 800b944:	b10a      	cbz	r2, 800b94a <_printf_common+0x26>
 800b946:	3301      	adds	r3, #1
 800b948:	6033      	str	r3, [r6, #0]
 800b94a:	6823      	ldr	r3, [r4, #0]
 800b94c:	0699      	lsls	r1, r3, #26
 800b94e:	bf42      	ittt	mi
 800b950:	6833      	ldrmi	r3, [r6, #0]
 800b952:	3302      	addmi	r3, #2
 800b954:	6033      	strmi	r3, [r6, #0]
 800b956:	6825      	ldr	r5, [r4, #0]
 800b958:	f015 0506 	ands.w	r5, r5, #6
 800b95c:	d106      	bne.n	800b96c <_printf_common+0x48>
 800b95e:	f104 0a19 	add.w	sl, r4, #25
 800b962:	68e3      	ldr	r3, [r4, #12]
 800b964:	6832      	ldr	r2, [r6, #0]
 800b966:	1a9b      	subs	r3, r3, r2
 800b968:	42ab      	cmp	r3, r5
 800b96a:	dc26      	bgt.n	800b9ba <_printf_common+0x96>
 800b96c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b970:	6822      	ldr	r2, [r4, #0]
 800b972:	3b00      	subs	r3, #0
 800b974:	bf18      	it	ne
 800b976:	2301      	movne	r3, #1
 800b978:	0692      	lsls	r2, r2, #26
 800b97a:	d42b      	bmi.n	800b9d4 <_printf_common+0xb0>
 800b97c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b980:	4641      	mov	r1, r8
 800b982:	4638      	mov	r0, r7
 800b984:	47c8      	blx	r9
 800b986:	3001      	adds	r0, #1
 800b988:	d01e      	beq.n	800b9c8 <_printf_common+0xa4>
 800b98a:	6823      	ldr	r3, [r4, #0]
 800b98c:	6922      	ldr	r2, [r4, #16]
 800b98e:	f003 0306 	and.w	r3, r3, #6
 800b992:	2b04      	cmp	r3, #4
 800b994:	bf02      	ittt	eq
 800b996:	68e5      	ldreq	r5, [r4, #12]
 800b998:	6833      	ldreq	r3, [r6, #0]
 800b99a:	1aed      	subeq	r5, r5, r3
 800b99c:	68a3      	ldr	r3, [r4, #8]
 800b99e:	bf0c      	ite	eq
 800b9a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9a4:	2500      	movne	r5, #0
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	bfc4      	itt	gt
 800b9aa:	1a9b      	subgt	r3, r3, r2
 800b9ac:	18ed      	addgt	r5, r5, r3
 800b9ae:	2600      	movs	r6, #0
 800b9b0:	341a      	adds	r4, #26
 800b9b2:	42b5      	cmp	r5, r6
 800b9b4:	d11a      	bne.n	800b9ec <_printf_common+0xc8>
 800b9b6:	2000      	movs	r0, #0
 800b9b8:	e008      	b.n	800b9cc <_printf_common+0xa8>
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	4652      	mov	r2, sl
 800b9be:	4641      	mov	r1, r8
 800b9c0:	4638      	mov	r0, r7
 800b9c2:	47c8      	blx	r9
 800b9c4:	3001      	adds	r0, #1
 800b9c6:	d103      	bne.n	800b9d0 <_printf_common+0xac>
 800b9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9d0:	3501      	adds	r5, #1
 800b9d2:	e7c6      	b.n	800b962 <_printf_common+0x3e>
 800b9d4:	18e1      	adds	r1, r4, r3
 800b9d6:	1c5a      	adds	r2, r3, #1
 800b9d8:	2030      	movs	r0, #48	@ 0x30
 800b9da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b9de:	4422      	add	r2, r4
 800b9e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b9e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b9e8:	3302      	adds	r3, #2
 800b9ea:	e7c7      	b.n	800b97c <_printf_common+0x58>
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	4622      	mov	r2, r4
 800b9f0:	4641      	mov	r1, r8
 800b9f2:	4638      	mov	r0, r7
 800b9f4:	47c8      	blx	r9
 800b9f6:	3001      	adds	r0, #1
 800b9f8:	d0e6      	beq.n	800b9c8 <_printf_common+0xa4>
 800b9fa:	3601      	adds	r6, #1
 800b9fc:	e7d9      	b.n	800b9b2 <_printf_common+0x8e>
	...

0800ba00 <_printf_i>:
 800ba00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba04:	7e0f      	ldrb	r7, [r1, #24]
 800ba06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ba08:	2f78      	cmp	r7, #120	@ 0x78
 800ba0a:	4691      	mov	r9, r2
 800ba0c:	4680      	mov	r8, r0
 800ba0e:	460c      	mov	r4, r1
 800ba10:	469a      	mov	sl, r3
 800ba12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ba16:	d807      	bhi.n	800ba28 <_printf_i+0x28>
 800ba18:	2f62      	cmp	r7, #98	@ 0x62
 800ba1a:	d80a      	bhi.n	800ba32 <_printf_i+0x32>
 800ba1c:	2f00      	cmp	r7, #0
 800ba1e:	f000 80d1 	beq.w	800bbc4 <_printf_i+0x1c4>
 800ba22:	2f58      	cmp	r7, #88	@ 0x58
 800ba24:	f000 80b8 	beq.w	800bb98 <_printf_i+0x198>
 800ba28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ba30:	e03a      	b.n	800baa8 <_printf_i+0xa8>
 800ba32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ba36:	2b15      	cmp	r3, #21
 800ba38:	d8f6      	bhi.n	800ba28 <_printf_i+0x28>
 800ba3a:	a101      	add	r1, pc, #4	@ (adr r1, 800ba40 <_printf_i+0x40>)
 800ba3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba40:	0800ba99 	.word	0x0800ba99
 800ba44:	0800baad 	.word	0x0800baad
 800ba48:	0800ba29 	.word	0x0800ba29
 800ba4c:	0800ba29 	.word	0x0800ba29
 800ba50:	0800ba29 	.word	0x0800ba29
 800ba54:	0800ba29 	.word	0x0800ba29
 800ba58:	0800baad 	.word	0x0800baad
 800ba5c:	0800ba29 	.word	0x0800ba29
 800ba60:	0800ba29 	.word	0x0800ba29
 800ba64:	0800ba29 	.word	0x0800ba29
 800ba68:	0800ba29 	.word	0x0800ba29
 800ba6c:	0800bbab 	.word	0x0800bbab
 800ba70:	0800bad7 	.word	0x0800bad7
 800ba74:	0800bb65 	.word	0x0800bb65
 800ba78:	0800ba29 	.word	0x0800ba29
 800ba7c:	0800ba29 	.word	0x0800ba29
 800ba80:	0800bbcd 	.word	0x0800bbcd
 800ba84:	0800ba29 	.word	0x0800ba29
 800ba88:	0800bad7 	.word	0x0800bad7
 800ba8c:	0800ba29 	.word	0x0800ba29
 800ba90:	0800ba29 	.word	0x0800ba29
 800ba94:	0800bb6d 	.word	0x0800bb6d
 800ba98:	6833      	ldr	r3, [r6, #0]
 800ba9a:	1d1a      	adds	r2, r3, #4
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	6032      	str	r2, [r6, #0]
 800baa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800baa4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800baa8:	2301      	movs	r3, #1
 800baaa:	e09c      	b.n	800bbe6 <_printf_i+0x1e6>
 800baac:	6833      	ldr	r3, [r6, #0]
 800baae:	6820      	ldr	r0, [r4, #0]
 800bab0:	1d19      	adds	r1, r3, #4
 800bab2:	6031      	str	r1, [r6, #0]
 800bab4:	0606      	lsls	r6, r0, #24
 800bab6:	d501      	bpl.n	800babc <_printf_i+0xbc>
 800bab8:	681d      	ldr	r5, [r3, #0]
 800baba:	e003      	b.n	800bac4 <_printf_i+0xc4>
 800babc:	0645      	lsls	r5, r0, #25
 800babe:	d5fb      	bpl.n	800bab8 <_printf_i+0xb8>
 800bac0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bac4:	2d00      	cmp	r5, #0
 800bac6:	da03      	bge.n	800bad0 <_printf_i+0xd0>
 800bac8:	232d      	movs	r3, #45	@ 0x2d
 800baca:	426d      	negs	r5, r5
 800bacc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bad0:	4858      	ldr	r0, [pc, #352]	@ (800bc34 <_printf_i+0x234>)
 800bad2:	230a      	movs	r3, #10
 800bad4:	e011      	b.n	800bafa <_printf_i+0xfa>
 800bad6:	6821      	ldr	r1, [r4, #0]
 800bad8:	6833      	ldr	r3, [r6, #0]
 800bada:	0608      	lsls	r0, r1, #24
 800badc:	f853 5b04 	ldr.w	r5, [r3], #4
 800bae0:	d402      	bmi.n	800bae8 <_printf_i+0xe8>
 800bae2:	0649      	lsls	r1, r1, #25
 800bae4:	bf48      	it	mi
 800bae6:	b2ad      	uxthmi	r5, r5
 800bae8:	2f6f      	cmp	r7, #111	@ 0x6f
 800baea:	4852      	ldr	r0, [pc, #328]	@ (800bc34 <_printf_i+0x234>)
 800baec:	6033      	str	r3, [r6, #0]
 800baee:	bf14      	ite	ne
 800baf0:	230a      	movne	r3, #10
 800baf2:	2308      	moveq	r3, #8
 800baf4:	2100      	movs	r1, #0
 800baf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bafa:	6866      	ldr	r6, [r4, #4]
 800bafc:	60a6      	str	r6, [r4, #8]
 800bafe:	2e00      	cmp	r6, #0
 800bb00:	db05      	blt.n	800bb0e <_printf_i+0x10e>
 800bb02:	6821      	ldr	r1, [r4, #0]
 800bb04:	432e      	orrs	r6, r5
 800bb06:	f021 0104 	bic.w	r1, r1, #4
 800bb0a:	6021      	str	r1, [r4, #0]
 800bb0c:	d04b      	beq.n	800bba6 <_printf_i+0x1a6>
 800bb0e:	4616      	mov	r6, r2
 800bb10:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb14:	fb03 5711 	mls	r7, r3, r1, r5
 800bb18:	5dc7      	ldrb	r7, [r0, r7]
 800bb1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb1e:	462f      	mov	r7, r5
 800bb20:	42bb      	cmp	r3, r7
 800bb22:	460d      	mov	r5, r1
 800bb24:	d9f4      	bls.n	800bb10 <_printf_i+0x110>
 800bb26:	2b08      	cmp	r3, #8
 800bb28:	d10b      	bne.n	800bb42 <_printf_i+0x142>
 800bb2a:	6823      	ldr	r3, [r4, #0]
 800bb2c:	07df      	lsls	r7, r3, #31
 800bb2e:	d508      	bpl.n	800bb42 <_printf_i+0x142>
 800bb30:	6923      	ldr	r3, [r4, #16]
 800bb32:	6861      	ldr	r1, [r4, #4]
 800bb34:	4299      	cmp	r1, r3
 800bb36:	bfde      	ittt	le
 800bb38:	2330      	movle	r3, #48	@ 0x30
 800bb3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb42:	1b92      	subs	r2, r2, r6
 800bb44:	6122      	str	r2, [r4, #16]
 800bb46:	f8cd a000 	str.w	sl, [sp]
 800bb4a:	464b      	mov	r3, r9
 800bb4c:	aa03      	add	r2, sp, #12
 800bb4e:	4621      	mov	r1, r4
 800bb50:	4640      	mov	r0, r8
 800bb52:	f7ff fee7 	bl	800b924 <_printf_common>
 800bb56:	3001      	adds	r0, #1
 800bb58:	d14a      	bne.n	800bbf0 <_printf_i+0x1f0>
 800bb5a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb5e:	b004      	add	sp, #16
 800bb60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb64:	6823      	ldr	r3, [r4, #0]
 800bb66:	f043 0320 	orr.w	r3, r3, #32
 800bb6a:	6023      	str	r3, [r4, #0]
 800bb6c:	4832      	ldr	r0, [pc, #200]	@ (800bc38 <_printf_i+0x238>)
 800bb6e:	2778      	movs	r7, #120	@ 0x78
 800bb70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bb74:	6823      	ldr	r3, [r4, #0]
 800bb76:	6831      	ldr	r1, [r6, #0]
 800bb78:	061f      	lsls	r7, r3, #24
 800bb7a:	f851 5b04 	ldr.w	r5, [r1], #4
 800bb7e:	d402      	bmi.n	800bb86 <_printf_i+0x186>
 800bb80:	065f      	lsls	r7, r3, #25
 800bb82:	bf48      	it	mi
 800bb84:	b2ad      	uxthmi	r5, r5
 800bb86:	6031      	str	r1, [r6, #0]
 800bb88:	07d9      	lsls	r1, r3, #31
 800bb8a:	bf44      	itt	mi
 800bb8c:	f043 0320 	orrmi.w	r3, r3, #32
 800bb90:	6023      	strmi	r3, [r4, #0]
 800bb92:	b11d      	cbz	r5, 800bb9c <_printf_i+0x19c>
 800bb94:	2310      	movs	r3, #16
 800bb96:	e7ad      	b.n	800baf4 <_printf_i+0xf4>
 800bb98:	4826      	ldr	r0, [pc, #152]	@ (800bc34 <_printf_i+0x234>)
 800bb9a:	e7e9      	b.n	800bb70 <_printf_i+0x170>
 800bb9c:	6823      	ldr	r3, [r4, #0]
 800bb9e:	f023 0320 	bic.w	r3, r3, #32
 800bba2:	6023      	str	r3, [r4, #0]
 800bba4:	e7f6      	b.n	800bb94 <_printf_i+0x194>
 800bba6:	4616      	mov	r6, r2
 800bba8:	e7bd      	b.n	800bb26 <_printf_i+0x126>
 800bbaa:	6833      	ldr	r3, [r6, #0]
 800bbac:	6825      	ldr	r5, [r4, #0]
 800bbae:	6961      	ldr	r1, [r4, #20]
 800bbb0:	1d18      	adds	r0, r3, #4
 800bbb2:	6030      	str	r0, [r6, #0]
 800bbb4:	062e      	lsls	r6, r5, #24
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	d501      	bpl.n	800bbbe <_printf_i+0x1be>
 800bbba:	6019      	str	r1, [r3, #0]
 800bbbc:	e002      	b.n	800bbc4 <_printf_i+0x1c4>
 800bbbe:	0668      	lsls	r0, r5, #25
 800bbc0:	d5fb      	bpl.n	800bbba <_printf_i+0x1ba>
 800bbc2:	8019      	strh	r1, [r3, #0]
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	6123      	str	r3, [r4, #16]
 800bbc8:	4616      	mov	r6, r2
 800bbca:	e7bc      	b.n	800bb46 <_printf_i+0x146>
 800bbcc:	6833      	ldr	r3, [r6, #0]
 800bbce:	1d1a      	adds	r2, r3, #4
 800bbd0:	6032      	str	r2, [r6, #0]
 800bbd2:	681e      	ldr	r6, [r3, #0]
 800bbd4:	6862      	ldr	r2, [r4, #4]
 800bbd6:	2100      	movs	r1, #0
 800bbd8:	4630      	mov	r0, r6
 800bbda:	f7f4 fb81 	bl	80002e0 <memchr>
 800bbde:	b108      	cbz	r0, 800bbe4 <_printf_i+0x1e4>
 800bbe0:	1b80      	subs	r0, r0, r6
 800bbe2:	6060      	str	r0, [r4, #4]
 800bbe4:	6863      	ldr	r3, [r4, #4]
 800bbe6:	6123      	str	r3, [r4, #16]
 800bbe8:	2300      	movs	r3, #0
 800bbea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbee:	e7aa      	b.n	800bb46 <_printf_i+0x146>
 800bbf0:	6923      	ldr	r3, [r4, #16]
 800bbf2:	4632      	mov	r2, r6
 800bbf4:	4649      	mov	r1, r9
 800bbf6:	4640      	mov	r0, r8
 800bbf8:	47d0      	blx	sl
 800bbfa:	3001      	adds	r0, #1
 800bbfc:	d0ad      	beq.n	800bb5a <_printf_i+0x15a>
 800bbfe:	6823      	ldr	r3, [r4, #0]
 800bc00:	079b      	lsls	r3, r3, #30
 800bc02:	d413      	bmi.n	800bc2c <_printf_i+0x22c>
 800bc04:	68e0      	ldr	r0, [r4, #12]
 800bc06:	9b03      	ldr	r3, [sp, #12]
 800bc08:	4298      	cmp	r0, r3
 800bc0a:	bfb8      	it	lt
 800bc0c:	4618      	movlt	r0, r3
 800bc0e:	e7a6      	b.n	800bb5e <_printf_i+0x15e>
 800bc10:	2301      	movs	r3, #1
 800bc12:	4632      	mov	r2, r6
 800bc14:	4649      	mov	r1, r9
 800bc16:	4640      	mov	r0, r8
 800bc18:	47d0      	blx	sl
 800bc1a:	3001      	adds	r0, #1
 800bc1c:	d09d      	beq.n	800bb5a <_printf_i+0x15a>
 800bc1e:	3501      	adds	r5, #1
 800bc20:	68e3      	ldr	r3, [r4, #12]
 800bc22:	9903      	ldr	r1, [sp, #12]
 800bc24:	1a5b      	subs	r3, r3, r1
 800bc26:	42ab      	cmp	r3, r5
 800bc28:	dcf2      	bgt.n	800bc10 <_printf_i+0x210>
 800bc2a:	e7eb      	b.n	800bc04 <_printf_i+0x204>
 800bc2c:	2500      	movs	r5, #0
 800bc2e:	f104 0619 	add.w	r6, r4, #25
 800bc32:	e7f5      	b.n	800bc20 <_printf_i+0x220>
 800bc34:	0800dfc1 	.word	0x0800dfc1
 800bc38:	0800dfd2 	.word	0x0800dfd2

0800bc3c <__sflush_r>:
 800bc3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc44:	0716      	lsls	r6, r2, #28
 800bc46:	4605      	mov	r5, r0
 800bc48:	460c      	mov	r4, r1
 800bc4a:	d454      	bmi.n	800bcf6 <__sflush_r+0xba>
 800bc4c:	684b      	ldr	r3, [r1, #4]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	dc02      	bgt.n	800bc58 <__sflush_r+0x1c>
 800bc52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	dd48      	ble.n	800bcea <__sflush_r+0xae>
 800bc58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc5a:	2e00      	cmp	r6, #0
 800bc5c:	d045      	beq.n	800bcea <__sflush_r+0xae>
 800bc5e:	2300      	movs	r3, #0
 800bc60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bc64:	682f      	ldr	r7, [r5, #0]
 800bc66:	6a21      	ldr	r1, [r4, #32]
 800bc68:	602b      	str	r3, [r5, #0]
 800bc6a:	d030      	beq.n	800bcce <__sflush_r+0x92>
 800bc6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bc6e:	89a3      	ldrh	r3, [r4, #12]
 800bc70:	0759      	lsls	r1, r3, #29
 800bc72:	d505      	bpl.n	800bc80 <__sflush_r+0x44>
 800bc74:	6863      	ldr	r3, [r4, #4]
 800bc76:	1ad2      	subs	r2, r2, r3
 800bc78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bc7a:	b10b      	cbz	r3, 800bc80 <__sflush_r+0x44>
 800bc7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bc7e:	1ad2      	subs	r2, r2, r3
 800bc80:	2300      	movs	r3, #0
 800bc82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc84:	6a21      	ldr	r1, [r4, #32]
 800bc86:	4628      	mov	r0, r5
 800bc88:	47b0      	blx	r6
 800bc8a:	1c43      	adds	r3, r0, #1
 800bc8c:	89a3      	ldrh	r3, [r4, #12]
 800bc8e:	d106      	bne.n	800bc9e <__sflush_r+0x62>
 800bc90:	6829      	ldr	r1, [r5, #0]
 800bc92:	291d      	cmp	r1, #29
 800bc94:	d82b      	bhi.n	800bcee <__sflush_r+0xb2>
 800bc96:	4a2a      	ldr	r2, [pc, #168]	@ (800bd40 <__sflush_r+0x104>)
 800bc98:	40ca      	lsrs	r2, r1
 800bc9a:	07d6      	lsls	r6, r2, #31
 800bc9c:	d527      	bpl.n	800bcee <__sflush_r+0xb2>
 800bc9e:	2200      	movs	r2, #0
 800bca0:	6062      	str	r2, [r4, #4]
 800bca2:	04d9      	lsls	r1, r3, #19
 800bca4:	6922      	ldr	r2, [r4, #16]
 800bca6:	6022      	str	r2, [r4, #0]
 800bca8:	d504      	bpl.n	800bcb4 <__sflush_r+0x78>
 800bcaa:	1c42      	adds	r2, r0, #1
 800bcac:	d101      	bne.n	800bcb2 <__sflush_r+0x76>
 800bcae:	682b      	ldr	r3, [r5, #0]
 800bcb0:	b903      	cbnz	r3, 800bcb4 <__sflush_r+0x78>
 800bcb2:	6560      	str	r0, [r4, #84]	@ 0x54
 800bcb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcb6:	602f      	str	r7, [r5, #0]
 800bcb8:	b1b9      	cbz	r1, 800bcea <__sflush_r+0xae>
 800bcba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcbe:	4299      	cmp	r1, r3
 800bcc0:	d002      	beq.n	800bcc8 <__sflush_r+0x8c>
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	f7ff fbf4 	bl	800b4b0 <_free_r>
 800bcc8:	2300      	movs	r3, #0
 800bcca:	6363      	str	r3, [r4, #52]	@ 0x34
 800bccc:	e00d      	b.n	800bcea <__sflush_r+0xae>
 800bcce:	2301      	movs	r3, #1
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	47b0      	blx	r6
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	1c50      	adds	r0, r2, #1
 800bcd8:	d1c9      	bne.n	800bc6e <__sflush_r+0x32>
 800bcda:	682b      	ldr	r3, [r5, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d0c6      	beq.n	800bc6e <__sflush_r+0x32>
 800bce0:	2b1d      	cmp	r3, #29
 800bce2:	d001      	beq.n	800bce8 <__sflush_r+0xac>
 800bce4:	2b16      	cmp	r3, #22
 800bce6:	d11e      	bne.n	800bd26 <__sflush_r+0xea>
 800bce8:	602f      	str	r7, [r5, #0]
 800bcea:	2000      	movs	r0, #0
 800bcec:	e022      	b.n	800bd34 <__sflush_r+0xf8>
 800bcee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcf2:	b21b      	sxth	r3, r3
 800bcf4:	e01b      	b.n	800bd2e <__sflush_r+0xf2>
 800bcf6:	690f      	ldr	r7, [r1, #16]
 800bcf8:	2f00      	cmp	r7, #0
 800bcfa:	d0f6      	beq.n	800bcea <__sflush_r+0xae>
 800bcfc:	0793      	lsls	r3, r2, #30
 800bcfe:	680e      	ldr	r6, [r1, #0]
 800bd00:	bf08      	it	eq
 800bd02:	694b      	ldreq	r3, [r1, #20]
 800bd04:	600f      	str	r7, [r1, #0]
 800bd06:	bf18      	it	ne
 800bd08:	2300      	movne	r3, #0
 800bd0a:	eba6 0807 	sub.w	r8, r6, r7
 800bd0e:	608b      	str	r3, [r1, #8]
 800bd10:	f1b8 0f00 	cmp.w	r8, #0
 800bd14:	dde9      	ble.n	800bcea <__sflush_r+0xae>
 800bd16:	6a21      	ldr	r1, [r4, #32]
 800bd18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd1a:	4643      	mov	r3, r8
 800bd1c:	463a      	mov	r2, r7
 800bd1e:	4628      	mov	r0, r5
 800bd20:	47b0      	blx	r6
 800bd22:	2800      	cmp	r0, #0
 800bd24:	dc08      	bgt.n	800bd38 <__sflush_r+0xfc>
 800bd26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd2e:	81a3      	strh	r3, [r4, #12]
 800bd30:	f04f 30ff 	mov.w	r0, #4294967295
 800bd34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd38:	4407      	add	r7, r0
 800bd3a:	eba8 0800 	sub.w	r8, r8, r0
 800bd3e:	e7e7      	b.n	800bd10 <__sflush_r+0xd4>
 800bd40:	20400001 	.word	0x20400001

0800bd44 <_fflush_r>:
 800bd44:	b538      	push	{r3, r4, r5, lr}
 800bd46:	690b      	ldr	r3, [r1, #16]
 800bd48:	4605      	mov	r5, r0
 800bd4a:	460c      	mov	r4, r1
 800bd4c:	b913      	cbnz	r3, 800bd54 <_fflush_r+0x10>
 800bd4e:	2500      	movs	r5, #0
 800bd50:	4628      	mov	r0, r5
 800bd52:	bd38      	pop	{r3, r4, r5, pc}
 800bd54:	b118      	cbz	r0, 800bd5e <_fflush_r+0x1a>
 800bd56:	6a03      	ldr	r3, [r0, #32]
 800bd58:	b90b      	cbnz	r3, 800bd5e <_fflush_r+0x1a>
 800bd5a:	f7ff f9a1 	bl	800b0a0 <__sinit>
 800bd5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d0f3      	beq.n	800bd4e <_fflush_r+0xa>
 800bd66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bd68:	07d0      	lsls	r0, r2, #31
 800bd6a:	d404      	bmi.n	800bd76 <_fflush_r+0x32>
 800bd6c:	0599      	lsls	r1, r3, #22
 800bd6e:	d402      	bmi.n	800bd76 <_fflush_r+0x32>
 800bd70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd72:	f7ff fb8c 	bl	800b48e <__retarget_lock_acquire_recursive>
 800bd76:	4628      	mov	r0, r5
 800bd78:	4621      	mov	r1, r4
 800bd7a:	f7ff ff5f 	bl	800bc3c <__sflush_r>
 800bd7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd80:	07da      	lsls	r2, r3, #31
 800bd82:	4605      	mov	r5, r0
 800bd84:	d4e4      	bmi.n	800bd50 <_fflush_r+0xc>
 800bd86:	89a3      	ldrh	r3, [r4, #12]
 800bd88:	059b      	lsls	r3, r3, #22
 800bd8a:	d4e1      	bmi.n	800bd50 <_fflush_r+0xc>
 800bd8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd8e:	f7ff fb7f 	bl	800b490 <__retarget_lock_release_recursive>
 800bd92:	e7dd      	b.n	800bd50 <_fflush_r+0xc>

0800bd94 <__swhatbuf_r>:
 800bd94:	b570      	push	{r4, r5, r6, lr}
 800bd96:	460c      	mov	r4, r1
 800bd98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd9c:	2900      	cmp	r1, #0
 800bd9e:	b096      	sub	sp, #88	@ 0x58
 800bda0:	4615      	mov	r5, r2
 800bda2:	461e      	mov	r6, r3
 800bda4:	da0d      	bge.n	800bdc2 <__swhatbuf_r+0x2e>
 800bda6:	89a3      	ldrh	r3, [r4, #12]
 800bda8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bdac:	f04f 0100 	mov.w	r1, #0
 800bdb0:	bf14      	ite	ne
 800bdb2:	2340      	movne	r3, #64	@ 0x40
 800bdb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bdb8:	2000      	movs	r0, #0
 800bdba:	6031      	str	r1, [r6, #0]
 800bdbc:	602b      	str	r3, [r5, #0]
 800bdbe:	b016      	add	sp, #88	@ 0x58
 800bdc0:	bd70      	pop	{r4, r5, r6, pc}
 800bdc2:	466a      	mov	r2, sp
 800bdc4:	f000 f848 	bl	800be58 <_fstat_r>
 800bdc8:	2800      	cmp	r0, #0
 800bdca:	dbec      	blt.n	800bda6 <__swhatbuf_r+0x12>
 800bdcc:	9901      	ldr	r1, [sp, #4]
 800bdce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bdd2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bdd6:	4259      	negs	r1, r3
 800bdd8:	4159      	adcs	r1, r3
 800bdda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bdde:	e7eb      	b.n	800bdb8 <__swhatbuf_r+0x24>

0800bde0 <__smakebuf_r>:
 800bde0:	898b      	ldrh	r3, [r1, #12]
 800bde2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bde4:	079d      	lsls	r5, r3, #30
 800bde6:	4606      	mov	r6, r0
 800bde8:	460c      	mov	r4, r1
 800bdea:	d507      	bpl.n	800bdfc <__smakebuf_r+0x1c>
 800bdec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bdf0:	6023      	str	r3, [r4, #0]
 800bdf2:	6123      	str	r3, [r4, #16]
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	6163      	str	r3, [r4, #20]
 800bdf8:	b003      	add	sp, #12
 800bdfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdfc:	ab01      	add	r3, sp, #4
 800bdfe:	466a      	mov	r2, sp
 800be00:	f7ff ffc8 	bl	800bd94 <__swhatbuf_r>
 800be04:	9f00      	ldr	r7, [sp, #0]
 800be06:	4605      	mov	r5, r0
 800be08:	4639      	mov	r1, r7
 800be0a:	4630      	mov	r0, r6
 800be0c:	f7ff fbbc 	bl	800b588 <_malloc_r>
 800be10:	b948      	cbnz	r0, 800be26 <__smakebuf_r+0x46>
 800be12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be16:	059a      	lsls	r2, r3, #22
 800be18:	d4ee      	bmi.n	800bdf8 <__smakebuf_r+0x18>
 800be1a:	f023 0303 	bic.w	r3, r3, #3
 800be1e:	f043 0302 	orr.w	r3, r3, #2
 800be22:	81a3      	strh	r3, [r4, #12]
 800be24:	e7e2      	b.n	800bdec <__smakebuf_r+0xc>
 800be26:	89a3      	ldrh	r3, [r4, #12]
 800be28:	6020      	str	r0, [r4, #0]
 800be2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be2e:	81a3      	strh	r3, [r4, #12]
 800be30:	9b01      	ldr	r3, [sp, #4]
 800be32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be36:	b15b      	cbz	r3, 800be50 <__smakebuf_r+0x70>
 800be38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be3c:	4630      	mov	r0, r6
 800be3e:	f000 f81d 	bl	800be7c <_isatty_r>
 800be42:	b128      	cbz	r0, 800be50 <__smakebuf_r+0x70>
 800be44:	89a3      	ldrh	r3, [r4, #12]
 800be46:	f023 0303 	bic.w	r3, r3, #3
 800be4a:	f043 0301 	orr.w	r3, r3, #1
 800be4e:	81a3      	strh	r3, [r4, #12]
 800be50:	89a3      	ldrh	r3, [r4, #12]
 800be52:	431d      	orrs	r5, r3
 800be54:	81a5      	strh	r5, [r4, #12]
 800be56:	e7cf      	b.n	800bdf8 <__smakebuf_r+0x18>

0800be58 <_fstat_r>:
 800be58:	b538      	push	{r3, r4, r5, lr}
 800be5a:	4d07      	ldr	r5, [pc, #28]	@ (800be78 <_fstat_r+0x20>)
 800be5c:	2300      	movs	r3, #0
 800be5e:	4604      	mov	r4, r0
 800be60:	4608      	mov	r0, r1
 800be62:	4611      	mov	r1, r2
 800be64:	602b      	str	r3, [r5, #0]
 800be66:	f7f6 f8e8 	bl	800203a <_fstat>
 800be6a:	1c43      	adds	r3, r0, #1
 800be6c:	d102      	bne.n	800be74 <_fstat_r+0x1c>
 800be6e:	682b      	ldr	r3, [r5, #0]
 800be70:	b103      	cbz	r3, 800be74 <_fstat_r+0x1c>
 800be72:	6023      	str	r3, [r4, #0]
 800be74:	bd38      	pop	{r3, r4, r5, pc}
 800be76:	bf00      	nop
 800be78:	24001214 	.word	0x24001214

0800be7c <_isatty_r>:
 800be7c:	b538      	push	{r3, r4, r5, lr}
 800be7e:	4d06      	ldr	r5, [pc, #24]	@ (800be98 <_isatty_r+0x1c>)
 800be80:	2300      	movs	r3, #0
 800be82:	4604      	mov	r4, r0
 800be84:	4608      	mov	r0, r1
 800be86:	602b      	str	r3, [r5, #0]
 800be88:	f7f6 f8e7 	bl	800205a <_isatty>
 800be8c:	1c43      	adds	r3, r0, #1
 800be8e:	d102      	bne.n	800be96 <_isatty_r+0x1a>
 800be90:	682b      	ldr	r3, [r5, #0]
 800be92:	b103      	cbz	r3, 800be96 <_isatty_r+0x1a>
 800be94:	6023      	str	r3, [r4, #0]
 800be96:	bd38      	pop	{r3, r4, r5, pc}
 800be98:	24001214 	.word	0x24001214

0800be9c <_sbrk_r>:
 800be9c:	b538      	push	{r3, r4, r5, lr}
 800be9e:	4d06      	ldr	r5, [pc, #24]	@ (800beb8 <_sbrk_r+0x1c>)
 800bea0:	2300      	movs	r3, #0
 800bea2:	4604      	mov	r4, r0
 800bea4:	4608      	mov	r0, r1
 800bea6:	602b      	str	r3, [r5, #0]
 800bea8:	f7f6 f8f0 	bl	800208c <_sbrk>
 800beac:	1c43      	adds	r3, r0, #1
 800beae:	d102      	bne.n	800beb6 <_sbrk_r+0x1a>
 800beb0:	682b      	ldr	r3, [r5, #0]
 800beb2:	b103      	cbz	r3, 800beb6 <_sbrk_r+0x1a>
 800beb4:	6023      	str	r3, [r4, #0]
 800beb6:	bd38      	pop	{r3, r4, r5, pc}
 800beb8:	24001214 	.word	0x24001214

0800bebc <_init>:
 800bebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bebe:	bf00      	nop
 800bec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bec2:	bc08      	pop	{r3}
 800bec4:	469e      	mov	lr, r3
 800bec6:	4770      	bx	lr

0800bec8 <_fini>:
 800bec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beca:	bf00      	nop
 800becc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bece:	bc08      	pop	{r3}
 800bed0:	469e      	mov	lr, r3
 800bed2:	4770      	bx	lr
